2601|Ok I get it, our glob matcher is case sensitive. There is currently no option to test ignoring case. I think the easiest would be to lowercase the file name when passing into the glob call @jrieken
2602|"This has been annoying me for quite a while now but I forgot to open an issue once it was published on github.  The behavior is especially weird not only because it behaves differently from any other editor I know but also because it is inconsistent if you ask me.   Pressing ctrl+del will delete the following word until it detects a double quote for example leaving the quote intact (ie `$var = ooops""value"";` will delete ooops only) but it will delete the quote if it is only removing white spaces. Detection up to which point text should get deleted is therefor inconsistent as well in my opinion."
2603|Yeah I found that out, I'm just trying to avoid shipping a precompiled version of `serialport` and instead compile it as an install step, but I need to work out what version of VSCode is running (and that tells me what version of Electron)
2604|thx!
2605|Thanks @sevin7676. For simplicity, we would still count that as the red zone scenario. If there is any uncertainty about which API to use to accomplish a task, even just a small amount, we consider that a red zone scenario.
2606|for the early stuff where it was the same implementation it makes sense to combine, but most/all of those stuff are already documented,so yeah, counting safari/chrome as different makes sense to me.
2607|Thanks for catching this.  I just checked with our icon designers; this change was intentionally just for Visual Studio 2015 (since many VS 2015 users also have legacy versions of VS installed, and it was confusing which one was the latest version since the icons were the same).  Since Visual Studio Code is continuously updated and there are no legacy versions, they left the logo the same.
2608|"Jade is still all blue (minus parens and Angular expressions) in the default ""Dark"" theme for me as of December 2, after updating:  ![image](https://cloud.githubusercontent.com/assets/8701531/11547642/8672a46e-9923-11e5-9f0d-a7db51564106.png)"
2609|Perhaps related to non-BMP character handling?
2610|"Set breakpoint on line 52 for the code :   http.request('http://www.google.com', function(response) {                 console.log(response.statusMessage) // Show the HTML for the Google homepage.              });  in  ""extension.ts"" file"
2611|"@jrieken ok. This is what I have. I'm doing everything just in a single file for learning easily. File extension.ts:  ``` javascript import * as vscode from 'vscode';  var className, methods, importClassDefinition; export function activate(context: vscode.ExtensionContext): void {     console.log('Congratulations, your extension ""phpclassmethods_is"" is now active!');       context.subscriptions.push(vscode.languages.registerCompletionItemProvider('php', new Completion(),'>'));      context.subscriptions.push(vscode.workspace.onDidSaveTextDocument((textDocument: vscode.TextDocument) => {             var text = textDocument.getText().toString().trim();             className = text.match(/(class)\s([\w\d]+)/igm)[0]                             .replace(/(class)\s/,'');              var importClassDefinition = ImportClassDefinition.getInstance();             if(!importClassDefinition.classExists(className)){                 methods = text.match(/[\w\d]+(\().*(\))/igm);                 importClassDefinition.setClassParams(className,methods);                                 }     })); }  export class Completion implements vscode.CompletionItemProvider{     public provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken)      : Promise<vscode.CompletionItem[]>{         return new Promise((resolve, reject)=>{             try{                 var completion:Array<vscode.CompletionItem> = [                     new vscode.CompletionItem('test')                 ];                  resolve(completion);             }catch(e){                 reject(e);             }         });     } }  export class ImportClassDefinition{     private classes : Array<string>;     private className : string;     private classMethods : Array<string>;     private static instance: ImportClassDefinition = null;      constructor(){}      static getInstance():ImportClassDefinition{         if(ImportClassDefinition.instance){             ImportClassDefinition.instance = new ImportClassDefinition();         }         return ImportClassDefinition.instance;     }      public setClassParams(className: string, methods:Array<string>){         this.className = className;         this.classMethods = methods;         this.classes[this.className] = this.classMethods;        }      public getClassParams(className: string) : Array<string>{         return this.classes[className];     }      public getClassName() : string{         return this.className;     }      public classExists(className: string){         return undefined !== Object.keys(this.classes)[className];     } } ```"
2612|"Hi @jrieken , thanks for your reply.  I can restore/build/run my project base on coreclr 1.0.0-rc1-final version on my mac, but can not just format code, neither trigger suggest via shortcut. The VS code version is 0.10.3, project.json looks like:  ``` {   ""version"": ""1.0.0-*"",   ""description"": ""CSharpCode Console Application"",   ""authors"": [ """" ],   ""tags"": [ """" ],   ""projectUrl"": """",   ""licenseUrl"": """",   ""tooling"": {     ""defaultNamespace"": ""CSharpCode""   },    ""dependencies"": {   },    ""commands"": {     ""CSharpCode"": ""CSharpCode""   },    ""frameworks"": {     ""dnxcore50"": {       ""dependencies"": {         ""Microsoft.CSharp"": ""4.0.1-beta-23516"",         ""System.Collections"": ""4.0.11-beta-23516"",         ""System.Console"": ""4.0.0-beta-23516"",         ""System.Linq"": ""4.0.1-beta-23516"",         ""System.Threading"": ""4.0.11-beta-23516""       }     }   } } ```"
2613|+1
2614|"I can remember though how you updated the icon back then to match the white outline of the VS icon. You tweeted ""sometimes it's the little things"" and I agree with that... VS Code icon should match the VS icon in a blue color. I don't see continuous updates as a counter argument - you want people to associate the icon with the newest version of VS, not VS 2013, right? Imo If this association is not wanted then this editor should not have VS in its name and a totally different icon..."
2615|@jrieken I pushed a workaround, but thats likely not the right fix: https://github.com/Microsoft/vscode/commit/2de359c7d3c3635d565b54e62affbc03f6aedc0e
2616|@jrieken also the integration tests are failing, this might be related: https://travis-ci.org/Microsoft/vscode/jobs/94578250
2617|+1 I have the same issue and it seems to be random. Sometimes when I restart Visual Studio code it disappears, sometimes not.
2618|The December 2 release only contained fixes some major performance issues. The fix for Jade will be in the end of December release. You can see that from the milestone set on the issue.
2619|I will investigate. @bpasero when did this happen? plain modes like JS and TS or mixed modes, like HTML+JS+CSS etc
2620|Very tricky and it's exactly the reason why we haven't tackled this yet: every user that would install your extension would need the build tooling installed in their system (VS, gcc, etc.).
2621|C:\Users\egamma\Projects\Monaco\src\vs\editor\contrib\suggest I suggest to join the discussion on the completion UI in #369.
2622|Fixed to use the standard text mate tokens: `<` : punctuation.definition.meta.tag.begin.html `>` : punctuation.definition.meta.tag.end.html `=` : meta.tag.assign.html
2623|@DracotMolver You mentioned `provideSignatureHelp` but I don't see that in your sample
2624|@jrieken yes in TS selfhost.
2625|Thanks, can you also paste the omnisharp log please (Cmd+L, L)?
2626|Yeah, found it and triggered builds
2627|We will tackle for Dec
2628|Thanks for the clarification and the suggestions.  BTW, to update start and end tag, you can currently use 'Change all occurrences' from the context menu
2629|This issue was moved to atom/language-csharp#45
2630|Pull request delivered, thanks a lot @Tyriar !
2631|Fix delivered
2632|Cannot reproduce.  1) open an html file 2) ul>li*5<TAB> and I get an emmet expansion.  Pls try out these steps in a VS Code setup without any extensions installed.
2633|Improved the extension query by reducing the amount of information needed from the server. Current query seems to take between 300 and 500ms on a fast internet connection. Total data is around 100k gzipped.
2634|@jrieken Would this be enabled by the commanding work?
2635|we need to implement calling `deactivate`
2636|Not sure if the fullscreen mode does this
2637|@pcgeek86 Are you referring to `editor.fontSize` setting or to the `View > Zoom out` action ?
2638|@azumikav are you spawning processes from an extension?
2639|Indeed, input handling is ... difficult to get right :)
2640|@BleyChen Is this a bug or a feature request? Please provide more detail ala actual behaviour vs. expected behaviour
2641|Unsure if I understand correctly. @kasik96 Do you want to be able to format a substring of a document, e.g. a string literal inside a JS file, or do you want to contribute a formatter for that targets string literals?
2642|Me and my buddy have implemented this feature, pull request is coming up shortly
2643|Hi **@MattiasPernhult**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
2644|**@MattiasPernhult**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
2645|"@jamietre What part of the VSCode says that 'VS Code does not support separate map files'? VS Code does support separate map files.  In your launch config set ""outDir"" to the project relative folder where babel generates the *.js and *.map.js files.  This launch config should work for attach:  ``` json {     ""name"": ""Mocha Attach"",     ""type"": ""node"",     ""request"": ""attach"",     ""port"": 5858,     ""sourceMaps"": true,     ""outDir"": ""./dist"" } ```  If you want to run mocha tests from within VS Code you do not have to ""attach"" VS Code. The following launch config should work:  ``` json {     ""name"": ""Mocha"",     ""type"": ""node"",     ""request"": ""launch"",     ""program"": ""/usr/local/bin/_mocha"",     ""args"": [ ""src/some-test.js"" ],     ""sourceMaps"": true,     ""outDir"": ""./dist"" } ```"
2646|@jamietre please reopen if this doesn't work for you.
2647|Ok, example of my use: I make a PHP Format, but lot of people use HTML with PHP in it. So first i use my PHP Format and after it on the same String(etc. Code i wrote) i want to use VS Code native HTML format. But i dont find any way to use VS Code HTML format on String.  > On 03 Dec 2015, at 12:15, Johannes Rieken notifications@github.com wrote: >  > Unsure if I understand correctly. @kasik96 https://github.com/kasik96 Do you want to be able to format a substring of a document, e.g. a string literal inside a JS file, or do you want to contribute a formatter for that targets string literals? >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/940#issuecomment-161601742.
2648|@alexandrudima Full screen mode indeed hides menu bar, but providing an option for normal mode is better.
2649|@joaomoreno please re-open this issue - I've just experienced the problem with the latest git version 2.6.3.windows.1
2650|Fix delivered
2651|What do you get with `git config pull.rebase`?  When it happens please send me the git output log (open the git view in Code, press the `...` in the top right corner, Show Git Output), a screenshot and a list of the names of the files that are missing but should actually be there.
2652|Duplicate of #69
2653|I think there are valid use-cases for both scenarios, using commands and using extension api. For instance, the command-approach you can use to make UI extensions, like hover-information showing in the status bar: 1. listen to selection changes, 2. run command _vscode.executeHoverProvider_, 3. update status bar.  Since by using the commands you don't decide which provider actually produces the data and since the commands and data types are defined by us you might need more. Think of a special code action that requires a syntax tree etc. To enable that an extension should [export](https://code.visualstudio.com/docs/extensionAPI/vscode-api#Extension) special APIs that are then consumed by dependent extensions.   Wrt the commands we have pushed many changes to master which should make them accept and return the correct data types. Still, we have no figured out yet what the best way of documenting them is. We will track that in #913
2654|Note that I wasn't using Code's built-in git functionality: I used git pull --rebase from a separate console window.    Could it be that it is indeed that Code is running git status while I'm doing the git pull --rebase independently? The [link](https://groups.google.com/forum/#!msg/msysgit/IdubnZx2cdg/2p8ZHucpn3sJ) you posted above seems to suggest that Code should not use git status:  ``` Do not run git status from this application: it writes the index. Use  git diff-files to detect changed files. See require_clean_work_tree in  git-sh-setup for an example.   -- Hannes  ```
2655|Sounds like a good area for a PR.
2656|This issue was moved to textmate/lua.tmbundle#5
2657|Fix for text mate and Monarch grammar delivered
2658|Closing. Please add a code example, so I can reopen
2659|In theory with the updating release you will be able to invoke the  `vscode.executeFormatDocumentProvider`-command to get all format edits for a given document but it will recurse it yourself again. So be cautious with that.   Despite, I believe the proper way to address this is using scopes. That is when registering your php formatter you can say: _this is for php-files and the php-portion of html files_ with a `DocumentSelector` like this `['php', { language: 'html', scope: 'php.scope'}]`.   This issue is related (maybe a dup) of #580.
2660|Also related (maybe dup) of #719
2661|@alexandrudima @aeschli Mixed modes are a topic we should figure out how to handle
2662|tracking the false positive in unhandled rejection here #963
2663|"@Umriyaev not sure how to fix the specific node-gyp issue you run into.  But here is a hackish workaround. It involves ""manually installing"" `vscode-textmate@1.0.8` in the node_modules such that npm does not need to install it: - download [VSCode for windows as a zip](http://go.microsoft.com/fwlink/?LinkID=615207) - extract the zip and take `resources\app\node_modules\vscode-textmate` and copy it to where you have checked out vscode in `$\node_modules\vscode-textmate` - the vscode-textmate version in that zip is 1.0.6 and we now use 1.0.8 on master, so npm install will still try to install it, therefore: - download [vscode-textmate@1.0.8](https://registry.npmjs.org/vscode-textmate/-/vscode-textmate-1.0.8.tgz) - extract the tgz on top of `$\node_modules\vscode-textmate`  Run `scripts\npm install` again. This time, since `npm` finds vscode-textmate@1.0.8 it won't try to install it, therefore it won't utilise `node-gyp` and will continue with the other node modules (that don't require `node-gyp`)."
2664|:+1:
2665|I believe the problem is the parameter hint widget showing, cos all the code is param of a function invocation.
2666|Cannot reproduce either, works fine on Mac OS X (El Capitan).
2667|"yes, recently i was reading the vscode source and i want to know whether i can change the vscode source that make me can get all the completionitem list include vscode itself provided in method ""provideCompletionItems""."
2668|closing pls reopen with with reproducable steps.
2669|@jrieken Is this possible to implement without something like a (typescript) definition file?
2670|Closing and assuming having the two static methods are OK
2671|very hard. behind the scenes we just the typescript compiler to drive JS. There is a branch in TS that adds deep understanding of commonjs modules. Once we have adopted that we will be better off.
2672|Good to know :).
2673|Further to this, it seems weird that if I want larger fonts _outside_ of the editor I have to zoom in each time I restart.
2674|I have updated to visual studio code 0.10.3, I'll see if the issue still persists. @joaomoreno that is correct I am not merging and rebasing at this time.
2675|"@jrieken  Sorry, Mayby there was a bad explanation by my side. I'm not using provideSignatureHelp. The provideSignatureHelp appears in the console debugger when I type ""();"", after that I can keep using the code."
2676|"Let me address each issue here. Also I am running on windows, the example you give for mocha is for a *nix OS so I just wanted to make that clear in case it matters for my problem.  #### what doesn't work  I made a screen capture of what is happening. Note that it's not the tests that are compiled. it's the code being tested.   I am unsure of how the `outDir` relates to using source maps, particularly when attaching to a running process. The file being debugged could have nothing to do with the entry point of the application. The source map should tell the debugger everything it needs to know about the source code, and indeed other debuggers like chrome and node-inspector work fine with the same code.  In the example below, the entry point is not even compiled (the test file is just under `test/ioc-tests.js` but it refers to an ES6 file `dist/ioc.js` compiled from source `src/ioc.js`. Here's what's happening.  https://youtu.be/0Y-BWB--1qw  Note that when using inline source maps (the first try), it breaks in the compiled code, at the wrong place. When using separate source map files, it says ""Source is not available""  Also note the same thing happens when I just run an actual node app (this is a module) directly through VSCode. I actually can't get source maps to work anywhere, in any circumstances, it's not just related to attaching.  #### reference for vscode source map support:  https://code.visualstudio.com/Docs/editor/debugging  > Source maps can be generated with two kinds of inlining: > - Inlined source maps: the generated JavaScript file **contains the source map as a data URI** at the end (instead of referencing the source map through a file URI). > - **Inlined source:**  the source map contains the original source (instead of referencing the source through a path). >  > VS Code supports inlined source maps but **not inlined source**.  Perhaps I misunderstood this as far as separate file vs. inline source code - but I read this to mean that I need to have a data URI to be supported. The documentation could probably be clearer since you can the source map inined, or not, and you can have the source code as part of the source map, or not, so there are more than 2 possible configurations. Babel includes the source code in the maps. In any event it doesn't really matter, I can't make it work no matter what kind of source maps I generate.  #### config for running mocha  The reason I am attaching to a process to run a mocha test is because it's pretty inconvenient to have to go and change the `launch.json` every single time I want to debug a specific test. It's much easier to just start whatever from the command line and attach to it.   A future ehancement that I think would add a lot of value would be a config that uses a template and applies to any matched pattern, e.g. something like  ``` {     ""path"": ""test/**/*.js"",     ""program"": ""mocha"" } ```  Then you could ideally just right-click a file, and it could match a launch config based on the glob."
2677|Note: I do not have rights to reopen this issue, I believe since you closed it.
2678|The confusing part about all this is  > I cannot type further until hitting the escape key.  Is this really true? You type text and the editor doesn't write it down?
2679|Can you try installing Visual Studio 2013 instead of 2015?
2680|Well, I guess this does not only apply to submodules, it looks like that if I wait long enough, all the files in my project are staged for deletion.... Is there a log from Visual Studio Code that I can look at to see what it is trying to do?
2681|"@jamietre yes, the documentation could explicitly state that non inlined source maps (separate source maps) are supported as well. But I was assuming that this is the default and I do not have to mention this. I will improve the doc.  ""outDir"" is used in VS Code if you want to set breakpoints in the source. In this case VSCode needs to know where the generated *.js files live.  Since source maps work for us (and most other users) just fine, let's find the reason why they are not working for you. I suggest that you let babel create source maps as separate files and without inlined source. In this case the source map lives next to the generated *.js file. In the source maps the ""sources"" array should contain relative paths of the form ""../src/some-test.js"" and ""sourceRoot"" should be the empty string """". Is this the case?"
2682|"Interesting, if i click the ""Unstage All"" button, the git checkout is now ""fixed"" and the git status looks like it is correct. I am not sure why on its first pass at computing the git status Visual Studio Code is staging every files for deletion."
2683|yeah, we had an issue that made the command promise resolve too early. Closing as duplicate of #617
2684|And maybe you want `onWillSaveTextDocument` and a way to add some changes before the actual save happens...
2685|Thank you, kind sir!
2686|I actually don't think the text file service should update the UI but send out a good enough event such that the UI (editor service) updates accordingly.
2687|I did manage this on a Windows 10 pc, with only VS2015. If I recall correctly I installed alot of packages with `npm install <name> --no-bin-links` manually because of some very weird errors. Will try to check it out again tonight
2688|Yes, thanks for the quick response!
2689|As vscode is marketed as a nodejs IDE I think it is very important to add this support. This will make Webstorm has this kind of support but its too heavy.
2690|Yeah, I was planning to use events for that :dancers:
2691|I never saw VS Code marketed as an IDE to be honest, but maybe I just missed that :). In my opinion, VS Code is an enhanced text editor, just like Atom or Sublime Text. If you want an IDE, go for Visual Studio, Eclipse, Webstorm, etc. ;)  Apart from that, it would be very nice to have this. I was only asking @jrieken if it was possible as I was interested in the technology behind it and to how it can be accomplished.
2692|:beers:
2693|np
2694|I am unsure if making stuff lower-case is desirable...
2695|New grammar based on TypeScript grammar delivered.
2696|If a user can provide multiple document filters for the same kind, the solution is to just provide as many glob patterns as needed to catch the casing too.
2697|If the adapter could send it to VSCode it would be pretty trivial for me to implement this. Though I have the model on the vscode side so I could also check for the variable change - might not be so trivial since I get all new variables on each stop event and I am not aware what variables existed in the previous step.  @weinand what do you think? On which side should this logic live? Adapter or VSCode
2698|@SamVerschueren  ![vs](https://cloud.githubusercontent.com/assets/8110867/11564149/ada6b176-99fd-11e5-82e3-74fec6ae0781.png)  That is in the home page.  I think having this feature will be of great advantage for vs code compared to other editors.
2699|In full agreement - VS Code should have the best JS support you can get, like the same is true for TS, C#, go you name it.  As of today our JS support is a little rusty, incomplete, and buggy. The TS team works on better support for plain JS and once they are ready we will jump on it.  @SamVerschueren The details are crazy ;-) We take JS code, create a copy with TS-constructs on the fly, pass that to the TS compiler, and map the results back to original JS code. [This](https://github.com/Microsoft/vscode/blob/master/src/vs/languages/typescript/common/js/requireRewriter.ts) guy for instance takes `require('foo').toString()` and generates something like `import * as $$foo;\n$$foo.toString()` to make TS types flow better.
2700|To try this out on a November release (0.10.1 - 3), replace the content of `Microsoft VS Code/resources/app/extensions/javascript/syntaxes/JavaScript.tmLanguage` with https://github.com/Microsoft/vscode/raw/0b3f7b223d86ac1e8bbebc670913ed83595e98c6/extensions/javascript/syntaxes/JavaScript.tmLanguage
