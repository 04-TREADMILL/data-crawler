11101|@isidorn the debug adapter shouldn't know anything about variables (because that's a frontend/UI concern).  From an end user perspective it would be best if we could show a squiggly in the launch.json when a variable is undefined. Could you do something similar as with the 'path not absolute' warning?
11102|Yes, please use forward slashes.
11103|Reopen to retest in March
11104|Good catch, I pushed vscode@0.11.4 to address this.
11105|With a path not absolute I use a regex https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/node/debugAdapter.ts#L123  I could introduce the list of the variables we use in systemVariables to this regex but I do not think it is good to introduce this knowledge to the debug world. Thus I would be more comfortable if this lived in where all that knowledge already exists and where we replace those variables - systemVariables.ts
11106|"@aeschli I would for example like to insert the following lines:  ``` json     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""-p"", "".""],     ""problemMatcher"": ""$tsc"" ```  How would I do that with default values and how would I provide more than one default value the user can pick from ?"
11107|@msarafzadeh the debug console is not a terminal emulator and it only implements a small number of ANSI control codes. If your debuggee requires to run in a terminal emulator, please use the external console by setting the `externalConsole` attribute in launch.json to true.
11108|@isidorn yes, I agree, this is not debug specific. It is a very useful feature for any json editor. So please file a feature request for @aeschli.
11109|I also think this would make more people adopt VS Code. Here are some ideas: - Similar to how you can switch between markdown code and preview, allow to switch between the settings.json file and a GUI, with the GUI being the default - Dynamically generate the GUI from the JSON schema, including those from extensions   - booleans become checkboxes   - arrays and hashes become lists were it is possible to add / remove new items   - numbers become spinners   - strings become input fields   - union types?
11110|@dbaeumer  Schemas now support a 'defaultSnippets' property. Check out src/vs/workbench/parts/snippets/electron-browser/snippets.contribution.ts, line 135. It's an array of snippets, using our internal snippet syntax ({{...}}). label and description are optional. You can add them top level, but also for arrays and objects deeper down in the JSON structure..  Let me know if that suits your needs.
11111|"I now implemented a virtual error scope. But it doesn't make much sense. I have to go through a lot of hurdes to keep it, keep Sets and Maps of all these virtual scopes and virtual variables and stack frames. I have to take care of cases where an error occurs but the stack trace is empty (PHP Fatal Errors) and generate a virtual stack frame for the virtual scope to show up. I then have a virtual stack frame named ""Error"", a virtual scope named ""Error"" and inside it a single variable named ""message"" that contains the error message.  It would be much simpler and better UI if VS Code had a way to show the exception message directly."
11112|"We had inconsistent behavior with the ""-n"" option depending wether Code was running or not. If code was running, ""-n"" would open a new instance with the folder and if not, would open empty. My fix tries to align both and now when Code is not running you can run it with ""-n"" and still pass a path to open.  To verify: - you can start code -n and it opens empty when not running and opens a new window empty when running - you can start code -n with a path and it opens the path in a new window both if running or not - you can still use -r option to force reuse the last active window"
11113|Likely an issue with Electron...
11114|We will show the exception message on hover over the 'paused on exception' box. This is not very visible, but I suggest we start with that. As a workaround you can do the virtual error scope which I understand is a hurdle for you.
11115|@alexandrudima the issue I have here is that the `mouseLeave` event does not have a `target`, so I can not use something like [this](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/browser/debugEditorContribution.ts#L170)  Because content widgets can now go outside the editor sometimes the `mouseLeave` event should still have a `target`, right? Locally I tried changing the [mouseHandler](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/controller/mouseHandler.ts#L211) however with my simple change (to handle it similar to `_onMouseUp()`) I would still get my hover as the target even when it is a stale target. Maybe some tips on how to solve this properly?
11116|@Tyriar can you give a concrete example where you find the focus indication is too subtle?
11117|Works fine using the new working files picker (~).
11118|I hit this yesterday in the Insiders build as well, but could not reproduce it.  I was renaming a file at the time.
11119|ok great. the option to have a close above / below is important too since we tend to group files in the working files list and there are many instances where we want to just close the last or first few files that were opened.
11120|@alexandrudima this looks bad, do we need to fix for Feb 2016 release?
11121|"Good catch, looks like the view-header has a role of button and thus cannot have buttons within. I changed the role to be ""toolbar"" now for the view header and it seems to make the buttons announce in NVDA and VoiceOver."
11122|This needs to be a feature and whether it is on or off by default is irrelevant. Virtually every text editor / IDE uses tabs for navigation. Maybe some feel that there is a better way but for most of us tabs are efficient, easy to use and familiar... and obviously we love them! Take them out of Visual Studio for one release to see how important they are... (cue Metro-style epic developer meltdown) Please consider tabs for a near term release. it's the only thing holding many of us back from full time adoption of VSCode.
11123|@bpasero thanks
11124|This is fixed in the upcoming Release.  ![capture](https://cloud.githubusercontent.com/assets/1931590/13428599/d0adb170-dfbb-11e5-9488-a29627e0ef99.png)
11125|While this does seem to work it is a bit clunky and not well known as an option. I would assume cmd+d would function case-sensitive as most other text editors do with maybe cmd+alt+d as a case-insensitive selection.
11126|"Excellent! Thanks for that!  Does the upcoming release by any chance also include a fix for ES7 Class properties being seen as a ""Duplicate identifier"". Refer the following snippet, where the red squiggly is for `someProperty = false;` and the hover tooltip gives the duplicate identifier message :  ``` export class SomeClass {      someProperty = false;      someMethod() {         this.someProperty = true;     } } ```  ![image](https://cloud.githubusercontent.com/assets/3510981/13428830/a70066ae-e008-11e5-8b6e-752c992f6138.png)"
11127|also note that when i fold and unfold all the code lenses are not being restored to the correct location, resulting in overlap with comments (in the case below, in the picture) and phantom blank lines.  ![image](https://cloud.githubusercontent.com/assets/1487073/13429203/60dbd396-dfbf-11e5-8423-181af2eb92d5.png)
11128|This issue was moved to Microsoft/TypeScript-TmLanguage#104
11129|"Okay, I see that there is extremely basic functionality that I missed initially, thank you. However, this highlights additional limitations: 1. obscure, unlabelled menu instead of available via context menu (like git gui) or command palette 2. no ""hunk"" staging 3. no partial unstage by line/hunk"
11130|Fair enough
11131|Yeah it does happen with rename only. Not very easy to repro.
11132|This looks like a general issue when an action results in a tree item to be removed and thus the element with tabindex gets lost and the browser decides to move focus to the body.
11133|There seems to be an extra DOM done in the list container. The list model seems sane.
11134|#3062
11135|I cannot reproduce this on Mac at least, but that should not make a difference. If you can record a video and show me what goes on?
11136|Yep, thanks!  New issue is here: https://github.com/PowerShell/vscode-powershell/issues/106
11137|"Looks like VoiceOver does not support role=""status"". My fix is to now always use role=""alert"" if on Mac and that seems to work."
11138|Oh yes, forgot to mention to you that I also had to use alert for my debug messages because status was not working
11139|Thanks for the request, I had 'Fold Level' already planned. Not all of what you request, but IMO the most useful: - `Ctrl + K, Ctrl + 1`: Folds all regions of level 1, except if a cursor is placed in it - `Ctrl + K, Ctrl + 2`: Folds all regions of level 2, except if a cursor is placed in it   ... - `Ctrl + K, Ctrl + 5`: Folds all regions of level 5, except if a cursor is placed in it  The other features you mention (unfold to level, context menu, fold to level at cursor) are currently not planned. Please file separate issues if you think they are important.
11140|"@isidorn you can go back to using ""status"" now as I will take care of it by checking for the platform. Or are you saying that it even does not work on Windows?"
11141|@bpasero no, I only checked on Mac. I will go back to using 'status'
11142|I lost track multiple times when the focus went to the buttons at the top-right of the editors.
11143|@mrmckeb not yet. But speaking of which, this would probably need to go through UX first. ping @bgashler1
11144|"It's still useful for handlebars as it is just a HTML document with data annotations. It shouldn't ever highlight the opening `""` though, and it should assume it's not a regular URL if it starts with `{` and not highlight."
11145|Allowing customization of mouse actions is part of https://github.com/Microsoft/vscode/issues/3130  As for <kbd>alt</kbd>+click, that's captured in https://github.com/Microsoft/vscode/issues/3091
11146|For this we should use the detection algorithm in  https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/model/textModel.ts#L461  And set the editor to whatever it returns.
11147|/cc @joaomoreno
11148|:+1:
11149|Right, I also see this sometimes but I hate to make the focus indication stronger by default. I wonder if we should have a theme that makes the outline stronger for those that want it or provide a setting.
11150|It could potentially be a configurable option, or highlight the background instead of the border like is done with list items?
11151|This should also be done in the exact same way we detect EOL and encoding. @bpasero where and how do we do it?
11152|:+1:
11153|This will be in the March release https://github.com/Microsoft/vscode/issues/3521
11154|@joaomoreno we currently only detect encoding using BOM on the file service layer. Not sure about EOL.
11155|Since you guys seem to found an agreement, please go ahead and make the change in https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/mime.ts#L123 and let me know for review.
11156|moving to @bgashler1 to decide if the high contrast theme is good enough for this to be done. I think we agreed that we want the strong indication for accessibility only in that theme:  ![image](https://cloud.githubusercontent.com/assets/900690/13434368/dc449872-dfd5-11e5-92b4-b2e259d00cc3.png)
11157|Up for UX discussion.
11158|@tinganho when you say sometimes it works and sometimes it does not, can you check if (when it works) you see the keybindings show up in the menu?  Also, does it work if you assign different keybindings for these actions? Their ids are workbench.action.navigateBack and workbench.action.navigateForward
11159|very likely https://github.com/Microsoft/vscode/issues/929
11160|I frequently want to keep output visible but whenever there is an update to the debug window it displays hiding the output window. Is there a way to have both displayed as it's driving me mad :) ?
11161|Should try to reproduce with the Chromium workspace using Ubuntu as it seems @Tyriar had a setup like that when it happened.
11162|I'd find this really useful :+1:
11163|@alexandrudima interesting, I think I reported this to @jrieken in https://github.com/Microsoft/vscode/issues/2333#issuecomment-175034426 because I had this as test item.
11164|Follow instructions here to get the code https://www.chromium.org/developers/how-tos/get-the-code
11165|@mredbishop, thanks for sharing this frustration.  I created an issue for this #3597.
11166|:+1:
11167|I am much more productive with tabs! I use Atom as I use Google Chrome (Ctrl+1 for first tab, Ctrl+5 etc. Ctrl+Tab, Ctrl+Shift+tab).  Working files makes me less productive and I always feel a bit frustrated after using it.  So please, implement tabs.
11168|"And just in case someone would ask, my user preferences are minimal:  ``` javascript // Place your settings in this file to overwrite the default settings {     // Controls the rendering size of tabs in characters. Accepted values: ""auto"", 2, 4, 6, etc. If set to ""auto"", the value will be guessed when a file is opened.     ""editor.tabSize"": 2,      // Controls if the editor will insert spaces for tabs. Accepted values:  ""auto"", true, false. If set to ""auto"", the value will be guessed when a file is opened.     ""editor.insertSpaces"": true } ```"
11169|Tabs will be very useful, +1
11170|I was trying this today but with only one editor open and I found it difficult to know that I had even tabbed into the editor. This is a key piece of information.  We have other focus highlights without the HC theme therefore I would think we need to fix this.
11171|ping @jasonyueyang
11172|What about adding an extra rule that only applies to the editor if it has keyboard focus and only in HC theme?
11173|:+1:
11174|+1 for built in, as in the CodeRunner mac app
11175|Looking at [this extension](https://github.com/VSCodeVim/Vim), there seems to be some solid work done and a good community around it. Commits going through today and a roadmap of work to be done.
11176|"@MadSpindel ""Working files makes me less productive and I always feel a bit frustrated after using it."" 1000% agree... it's like we're being forced into no tabs for someone to make a point or something.  We don't like it, if you do, then make it optional for us please."
11177|The ones that exist are pretty poor at this point, not even usable. I use VIM and in Visual Studio VsVim, and I can't even use the extensions that exist for VsCode.
11178|@kellyelton have you opened bugs on their extension? They seem to be pretty responsive and have closed a number of issues.
11179|There are some severe limitations with that extension's implementation that make it difficult to operate. I have been fumbling around without Vim bindings to avoid the quirks for now, but I won't be able to stay with VSCode for long this way. As I recall, auto-closing of brackets, auto-complete, and snippet completion (including emmet), all fail in some way. Also, some essential motions are missing.  I'll try to get around to actually producing a complete list if someone else doesn't get to it first. For reference, Atom's current Vim plugin is spot on.
11180|I've used that one and [this](https://github.com/aioutecism/amVim-for-VSCode/) and sadly they are not even close to completion, some mention issues with whats available in the API in regards to keybindings. I use [VsVim](https://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329) daily and its not even close.  Another issue IMO is there are at least 3 implementations, would be much better if it becomes one so everyone can work together. Maybe you guys can make this happen.
11181|Well I don't even use VsCode, this one is kind of a blocker for me. Also, it's just not far enough along to address any work that I currently do either. So no, I haven't opened any tickets, I figured I'd just throw in my two cents that what exists is not even good enough to install.  This is actually an issue for lots of editors I've tried recently. The only good vim experience outside of vim is VsVim.
11182|@NickClark that list would be excellent. @Beatusvir good suggestion and I hope to help this happen.
11183|And in case you were not already aware :grimacing: , this is a critical issue for adoption. I'm the only one at my company that uses it right now, others opt for Atom based purely on the Vim support.
11184|Excellent. I'm sure this'll give much comfort to Windows users when switching between applications.  Thanks for keeping up the good work! :sunflower:
11185|"I don't use VSCode either (yet) as it has no benefits to me over my current Vim setup. The only thing I am very interested in using it with is reliable cross-platform C# and ASP.Net development. The current C# integration with Vim sucks.  To everyone here using Atom - I wonder what features it has that rival the ""real"" vim with an appropriate set of plugins?  ![](http://i.imgur.com/PpWOAbS.png)"
11186|@paralin  I don't use atom but comapiring to VsCode, is for sure ease of configuration, Ctrl-P install x-addon and I'm done. We all know for vim after downloading (using a manager or not) is usually followed by some configuration. For now I'm using WebStorm (@home) with its Vim plugin which works just fine although you get prone to spam scape a couple more times than whats healthy (it has some issues with menus and vim insert mode).
11187|@Beatusvir It might be better to try to go the other direction and develop a plugin manager for Vim that doesn't require the long configuration phase you mention.  http://github.com/paralin/PersonalJanus  There's one manager I use called Janus that's very nice, it doesn't use a long list of plugins to install things but rather opts to just use git submodules. I think it could be cool to develop a CLI tool to pick what features you want, and also make it portable via git (as I've done).  Either way this seems a bit out of scope for this repository. But I would like to see proper Vim support in VsCode that doesn't rely on a gimped plugin API.
11188|Visual Studio Power Tools has an option to display tabs vertically, which I absolutely love.
11189|:+1: and I agree with @sitefinitysteve. If the team insists on not having tabs, then at least improve the extension API so it could be added by a third party.
11190|Here is where tabs are important-  we have to step back a moment to another missing feature:  VSCode needs to dump the non-informational implementation of Working Files, and then add the feature to allow opening multiple projects.  I do my work by separating my client side code into one project and my server side code into another project. On a large screen I want two coding windows open, with one project tree on the far left. Client code on the left window, server code on the right window. Now, within either project I will be working on multiple source files. In those cases I want to reference them as tabs above the respective project window they were opened in. I may have 3 or 4 tabs on the client side project and 3 or more tabs on the server side project.  The organization is organic. The whole tree of work, multiple projects, is displayed on the left. I have project separation by code windows and I also have open source files being worked on, or referenced, by tabs above their respective project windows.  This is essential workflow for me. I am currently doing exactly this in Atom but I like VSCode and would like to see that flow replicated in VSCode. To do so VSCode needs to implement multiple project support and tabs above respective windows.  Otherwise it is just another a little guy's editor, and I don't believe that.  Please.
11191|:+1: this is highly annoying
11192|Like others said before, the current Vim plugins for VSCode aren't usable yet, though they are great projects. VSCodeVim/Vim is particularly interesting because it's very active and the contributors worked on Vim plugins for Sublime and other editors.  I guess one thing that would be great is for VSCode to provide more APIs that could facilitate those projects develop a plugin with better Vim keybinding feel and behavior.  The alternative would be to bake in Vim keybindings as a built-in option into VSCode.
11193|Thanks for the clarification.
11194|Code folding is currently based on indentation, this is blocked by language-aware folding https://github.com/Microsoft/vscode/issues/3422
11195|@waderyan awesome that you guys are actively looking into this - I am pretty happy with vim-support in VsVim, WebStorm and Atom and I would love to give vscode another look as soon as the vim-story is decent. Maybe @jaredpar could give some hints on what to look out for.
11196|Duplicate https://github.com/Microsoft/vscode/issues/3574
11197|@bpasero  Sorry, this is for Ubuntu 14.04. I haven't tried it on windows to see if its the same issue or not.
11198|@pieandcakes my speculation is that the first window gets active but is not ordered to the front, and actions are targeting the first window even though not in front.
11199|Closing in favor of https://github.com/Microsoft/vscode/issues/3603
11200|"@riclf  has it spot on.  I usually have 3 vertical columns open, HTML, JS and CSS from left to right.  In Sublime I had all my html tabs above the first column, all JS files as tabs above the second column etc. The tabs have a context and I know I'm not going to be opening the wrong file in the wrong column.  This is almost impossible in VS Code, I can have 3 columns open only by using ""open to the side"" twice, and a column can disappear totally if a file is closed, at which point I can open a new one but have to reorder them. If I open a file it re-opens in the column that the cursor is currently in, so if I open a css file I have to make sure my cursor is in the third column. It is absolutely infuriating.  Not to mention that the Working files section takes a way vertical space in my folder tree, which is a real problem on my laptop.  A question for the microsoft team. If you have a split view, how are you supposed to know which column a file in ""working files"" is associated with? It's simple when the tabs are above their respective columns.  Just my 2c."
