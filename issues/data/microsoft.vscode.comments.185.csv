18401|No one is assigned to this task, really?  On some projects where LOC > 10k and with 50+ files and classes, it is a serious drawback.  File Explorer is very basic and gets clobbered quickly.  Having a tab (on the right of screen) listing all entities at least for Typescript and .d.ts definitions would allow a smarter navigation inside the code.  Tsc compiler API should be able to provide it: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API  And _no_, I don't think it should be a plugin, but a permanent inbuilt feature of VSC.  -- RM
18402|@bpasero marking as important since it sounds a little scary.
18403|@biij5698 what kind of template files are you referring to? Can you give me an example?
18404|@bpasero I move this to you since this seems to be an underlying electron issue and can only be fixed there.
18405|@bpasero thanks. OK to close ?
18406|This is a UI exploration from #637
18407|Let's do it in April
18408|@JCaraballo113 I am pretty confident that this message doesn't come from VSCode itself since errors reported from the JS language service are prefixed with js  ![capture](https://cloud.githubusercontent.com/assets/1931590/14665913/b33e5738-06d6-11e6-8f18-5d358d6833a4.png)  Do you have a JS linter extension installed? If you start code form a command prompt using --disable-extensions do you still see the problems
18409|@kyberias @tjpeden Can you run `echo %PATH%` and show me the result?
18410|Duplicate of #4970
18411|@dbaeumer maybe assign this back to @jrieken in case he found more cycles.
18412|@Lonefy currently not, sorry.
18413|Is there any progress on this issue? Judging by the other issues linked here, I'm assuming this is the same problem; it happens about half the time I do object destructuring in a render method with JSX, depending on where the newlines are.  ![image](https://cloud.githubusercontent.com/assets/6260469/14666148/5bcb18b8-070a-11e6-8efb-54840649fd2b.png)
18414|"@aeschli good catch, my regex ended up to do Catastrophic Backtracking (http://www.regular-expressions.info/catastrophic.html).  I pushed a change to simplify it. A ""**"" is now anything that starts with a path or ends with a path."
18415|@bording we have an internal version of VS Code running with the latest Electron that includes Chrome 49. Can you give [1] a try to see if it changes anything?  [1] https://az764295.vo.msecnd.net/alpha/c83fa467d071a784a3cdeacc69c29fdfdbc91fce/VSCode-win32-alpha.zip
18416|Now after you have pasted I am clearing out the pasted target so that subsequent pastes are not causing the same file to be pasted again.
18417|"Is that a good fix? What if someone wants to paste the same file multiple times?  I would've thought clearing the chosen file in a text copy would've been better? On 20 Apr 2016 5:27 p.m., ""Benjamin Pasero"" notifications@github.com wrote:  > Now after you have pasted I am clearing out the pasted target so that > subsequent pastes are not causing the same file to be pasted again. >  > — > You are receiving this because you authored the thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5519#issuecomment-212297704"
18418|Actually the copy file feature is such a hack (it bypasses the clipboard) that I would argue to rather try to implement it using the clipboard APIs of Electron.
18419|JSHint was causing the issue. Uninstalled it and voila. Sorry for polluting the issues D:
18420|yeah, I will keep looking for more cycles
18421|Sure, the js file in GIF above is here: `https://github.com/Financial-Times/email-manual-editor/blob/master/src/app/components/stats/stats.directive.js`  but for me bug manifests in _any_ file where indentation needs to be preserved
18422|When a file is saved , and are using the JapaneseIME Alt + F (FileMenu) + S (SaveAs) does not work
18423|The code of your command is basically an endless loop and there is no way we can stop that from the outside. You should store the handle `setTimeout` returns and invoke [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout) before proceeding with another run.   ```     (function testFunc() {         channel.appendLine(`test: ${test++}`);         setTimeout(function(){             testFunc();         },2000);     })(); ```
18424|Third one - MessageService.setWorkbenchServices()
18425|There is a very ugly setWorkbenchServices() call in MessageService that I would tackle as part of https://github.com/Microsoft/vscode/issues/5504
18426|@bpasero I will add an event ala `onDidStart` to the lifecycle service such that there are no more excuses (minus singleton registries)
18427|@dbaeumer you try to add a entry to `contributes/jsonValidation` in `extensions/json/package.json` ?
18428|@Tyriar We already do that and `createInstance` will explode when a cycle is [detected](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/instantiation/common/instantiationService.ts#L163). The problem is that we create the instantiation service from a service collection that we in parts populate manually. That manual setup (shell.ts/workbench.ts) is the issue...
18429|fyi @bpasero
18430|Sorry I let this one slip by me in not replying quickly.  I also agree with Steven that consistency is key.  I tend to lean towards not having the monospaced code font in the input box.  The reason why is that the input box is a UI overlay, and UI has its own non-monospaced font.  We're not editing inline—we're merely entering something as input to the overlay which then makes the change on our behalf.
18431|Then it makes sense to keep this closed, thanks for feedback.
18432|so who did this change then?  ![screen shot 2016-04-20 at 10 56 04](https://cloud.githubusercontent.com/assets/1794099/14668868/7e4bdbee-06e6-11e6-8774-efe2539c622f.png)
18433|I just saw the monospace font and I love it. It always felt weird to me that it was non-monospace, regardless of the other input boxes. The same goes for the find & replace.
18434|I did not change it, but I do like it. Thanks misterious contributor
18435|@jrieken having only one event will not work. there are handlers that are **not** interested in vetoing and dispose resources on shutdown (e.g. file watchers) and there are handlers that are interested in vetos (e.g. the dirty file handler).  I distinguish between before close and on close for this reason, otherwise one handler might dispose resources that are still needed when a handler after fires the veto.
18436|Understood, still it should be an event and not a participant which is just another way of eventing. It should be `onWillShutdown` and `onShutdown`
18437|Could we leave this as open until remedied?
18438|Hehe sorry, I reverted my commit and GH closed this issue again. I really think reverting should have left this issue open...
18439|@jrieken that is good for me, yeah.
18440|@jrieken I wonder if we need this in all cases. For example, when I look into https://github.com/Microsoft/vscode/blob/master/src/vs/platform/thread/common/abstractThreadService.ts#L33 it seems to me the setter is not doing any follow up work so it seems the instantiation service could just be passed in.  The real issue is that we need the instantiation service within a service but the instantiation service is only created when all services are done. Instead we should create the instantiation service as first service so that we can pass it around to other services maybe?
18441|"@joaomoreno you changed the title of the issue which now matches exactly my (and @jchadwick) request, but missmatches the authors request.  Disappearing context menus because of different user-level installations are not related to ""allow installations in different user-levels"" or: I want to install VS Code without admin privilegs."
18442|Duplicate of #5388
18443|> the instantiation service is only created when all services are done.  That is not true. We do create it [very early](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/shell.ts#L165) but it doesn't have all services yet. So, someone that received the instantiation service during its ctor-call doesn't know if all services are present yet which in return means contributions it creates might miss a service
18444|@jrieken ok so as long as the service is not using the instantiation service it would be safe to pass it in via ctor.
18445|Sorry, reverted. IMO consistency goes over personal preference
18446|@echpiel please report this to Electron.
18447|"Oh,Your staff have told me the answer: Something like: ""files.associations"": {     ""*.tpl"": ""html"" } in your user preferences may work. And  I have tried this way,This can be! Thanks!"
18448|@dbaeumer
18449|@dbaeumer  yes, C#. If there is no space between class declaration and comment, comment isn't become green.
18450|The proposed ___dirname is a word in that file (observe the file icon in front). The JS intellisense proposes words in the file as well.  If you install the node.d.ts file using tsd install node and then do _<code complete> you will see   ![capture](https://cloud.githubusercontent.com/assets/1931590/14669619/e779779a-06e9-11e6-9f4e-0f6d53205ffe.png)  because the JS language service then knows about __dirname
18451|If it's not using the service it should not ask for it. If it's using the service under some condition later in the code it must be very careful to know that everything is in a well-defined state. That's why I propose to have an event that signals that.
18452|Moving to May. This is more complicated then I thought and requires some more investigation.
18453|you can close this issues,Thanks vscode,I have already fallen in love with vscode.It was wonderful!
18454|@weinand It can not stop more than one project by break poins at sametime. But I still think it's a great feature to run two or more projects in one VSC window. In fact, I can first set break point in project A to pause the process and then set a break point in project B to pause the process later without restart them. Maybe you could have a try on VS2015 about this feature.  Of course, VS2015 has its own problem, it would be very slow when the project contains too many js files, while VSC did really great in this kind of situation.
18455|Consistency goes both ways.  You seem to be on the side of **widget** consistency: most text input widgets show non-monospace font, so this one should to. Examples are in the search and git viewlets' input boxes, quick open, find and replace. Counter examples are the debug evaluate input box and watch expressions, both of which use monospace font, imo correctly.  I don't agree with that type of consistency.  I feel **content** consistency is more important. Meaning: wherever code is always shown, monospace should be used; non-monospace otherwise. This already is very consistent nowadays: editor, output, suggest widget, parameter hints, hover widget; they all show monospace font. It is even consistent with quick open and the search and git viewlets' input boxes, since you do not always write code in there; you might write plain text, so that is non monospace.  This leads me to point out where this consistency is not followed: find all references, peek definition, search viewlet contents and, finally, the rename widget. All of these are examples in which I don't feel we're doing the right thing: they should all show monospace font.
18456|I opened https://github.com/Microsoft/vscode/issues/5538 for the general request of confirming a message box with the keyboard.   I looked for a free keyboard shortcut but it is very hard to find one that makes sense (for example Ctrl+Shift+C and Ctrls+Shift+X are taken)  Since you can bind your own keyboard short cut I suggest doing this (File -> Preferences -> Keybroad)
18457|"Colour me disappointed! This issue is causing me to waste hours scrolling up and down the output panel and manually eye-balling file names and line numbers - particularly when refactoring or renaming a variable or class member.  Perhaps you could implement a ""band-aid"" fix in the interim: simply shelve the concept of problem ownership clear all ""problems"" when a build starts and register them from the new build's output when it finishes. For intellisense problems, just bung them in as duplicates - naively append the intellisense problems and build problems."
18458|They do not _disappear_. They are configured in the registry under `HKCU`, meaning they are scoped under the user who ran the installation. Had the installer been able to be run per user, independently, you'd have these actions in any user you'd like.  There always the possibility of adding some commands to Code that would install and uninstall these shortcuts for your user, as commands in the command palette.. That might actually be a good idea. What do you think?
18459|Good idea.
18460|That's a very compelling argument @joaomoreno, I agree.
18461|I have seen that...
18462|Nice catch. The issue was connected with #4623 in that a thread thought it's callstack length was a callStack length of some other thread. Fixed this by always respecting what the debug adapter says about the totalFrames, so if they are not supported this will not be possible. Will not look into the other bug...
18463|I think we agree on consistency, I just disagree about making that change in small increments and starting with a random widget. If we can establish and formulate a rule then we should go by it.
18464|This is the number of glob.match calls we do when I open a file. I also notice that we match the same pattern over and over again if the recommendation uses the same pattern.   ``` glob.js:190 match {**/*.cs,**/project.json,**/global.json,**/*.csproj,**/*.sln} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.639 glob.js:190 match {**/*.cs,**/*.csproj,**/*.sln} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.654 glob.js:190 match {**/*.ts,**/*.tsx**/*.js,**/*.jsx,**/*.es6} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.654 glob.js:190 match **/*.go /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.658 glob.js:190 match {**/*.ps,**/*.ps1} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.671 glob.js:190 match {**/*.c,**/*.cpp,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.689 glob.js:190 match {**/*.fsx,**/*.fsi,**/*.fs,**/*.ml,**/*.mli} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.711 glob.js:190 match {**/*.js,**/*.jsx,**/*.es6} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.728 glob.js:190 match {**/*.ts,**/*.tsx} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.728 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.736 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.743 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.752 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.759 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.769 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.776 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.785 glob.js:190 match {**/*.rs,**/*.rslib} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.796 glob.js:190 match {**/*.cpp,**/*.cc,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.812 glob.js:190 match {**/*.cpp,**/*.cc,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.829 glob.js:190 match {**/*.c,**/*.cpp,**/*.cc,**/.cxx,**/*.hh,**/*.hpp,**/*.hxx,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.866 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.874 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.882 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:40.960 glob.js:190 match *bash_profile servicestestutils.ts undefined 2016-04-20 11:40:41.476 glob.js:190 match {**/*.cs,**/project.json,**/global.json,**/*.csproj,**/*.sln} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.494 glob.js:190 match {**/*.cs,**/*.csproj,**/*.sln} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.510 glob.js:190 match {**/*.ts,**/*.tsx**/*.js,**/*.jsx,**/*.es6} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.510 glob.js:190 match **/*.go /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.514 glob.js:190 match {**/*.ps,**/*.ps1} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.524 glob.js:190 match {**/*.c,**/*.cpp,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.543 glob.js:190 match {**/*.fsx,**/*.fsi,**/*.fs,**/*.ml,**/*.mli} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.564 glob.js:190 match {**/*.js,**/*.jsx,**/*.es6} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.583 glob.js:190 match {**/*.ts,**/*.tsx} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.583 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.590 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.598 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.609 glob.js:190 match {**/*.php} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.615 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.623 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.631 glob.js:190 match {**/*.py} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.642 glob.js:190 match {**/*.rs,**/*.rslib} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.653 glob.js:190 match {**/*.cpp,**/*.cc,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.668 glob.js:190 match {**/*.cpp,**/*.cc,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.681 glob.js:190 match {**/*.c,**/*.cpp,**/*.cc,**/.cxx,**/*.hh,**/*.hpp,**/*.hxx,**/*.h} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.718 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.728 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined 2016-04-20 11:40:41.735 glob.js:190 match {**/*.md} /Users/bpasero/Development/Microsoft/monaco/src/vs/editor/test/common/servicesTestUtils.ts undefined ```
18465|This caused a severe performance regression. Have to really add performance tests for the pattern we use to not get into this again...
18466|+1, I also miss this feature. Commenting to get notification.
18467|This is the cause for  #5539
18468|@jrieken assigning to you to have an owner.
18469|Fixed.
18470|"@SilentTiger ""It cannot stop more than one project by breakpoins at the same time."" That's exactly one of the issues we want to avoid in VS Code. But that would require to be able to show multiple threads, stacktraces, variables, debug console etc. Doing this with multiple windows is much clearer and simpler than squeezing it into one window."
18471|"- VSCode Version: 1.0.0 - OS Version: OSX 10.11.4  I've tried to reproduce, and detected additional weirdness:  In step 4, when switching back to 'IBM 3270"", I didn't get the serif-monospaced thing, instead, the font remained the same (Arial Narrow), only the entire editor shifted right by a few pixels. The font then doesn't change (remains Arial Narrow) no matter what you put as the font family, as long as it has at least 2 words, the first being ""IBM"", e.g. ""IBM 3270xzy"", ""IBM xzy"", ""IBM one two three"". If you put in ""IBM"" (or any other non existing font), editor returns to default font. Great weirdness indeed.  This is in no way related to Arial Narrow - it behaves the same whatever the previous font was."
18472|Still seeing this. Running code directly in node however prints the correct statement. See screenshot. ![capture](https://cloud.githubusercontent.com/assets/1931590/14672688/a3cbf346-06f9-11e6-8718-885ac11ef00d.png)  Assigning to @joaomoreno to further investigate.
18473|Please, is it possible to add ENU screenshots of VS Code and VS with mentioned strings ? It seems source is not same on these two strings.
18474|@sifue can you provide the context s/s for loc reference
18475|I'd fix this by not using glob in here, but simple regexes. I would not drop the current behaviour of reacting every time a file is open.
18476|I use `toLocaleTimeString()`, [as discussed earlier](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/menus.ts#L678). @dbaeumer  If you open dev tools and try to run that method on a Date, what do you get?
18477|@bpasero why backlog? Does it mean never? Any feedback?
18478|The issue is how can I know whether another task is invoked. You can't access or check other tasks from within a running task unless I missed something in the API.  You can change the example to invoking a child process:  ``` tsc -w ```  This task runs indefinitely. If the user wants to change a setting (extension supports extra settings) or accidentally invoked the same task again, you get multiple instances of typescript watcher modifying the same files.
18479|The historical reason for the eager compute is that we had (and according to discussions maybe will again) hints that there are extensions before the user does something. For that reason I would also not change the model to a lazy one.
18480|@joaomoreno Agree with the simple regexes, tho I assume that glob optimises for this and the I remember in typescript land I had [glob2](https://github.com/Microsoft/vscode/blob/0.10.10/src/vs/languages/typescript.workbench/common/projectResolver.ts#L555)...
18481|@Tyriar I am not personally attached to the key binding :-). What would be the alternative for Run Test Task. We leave it blank ?
18482|Awesome! Feel free to close my issue #3795 if you want to.
18483|![capture](https://cloud.githubusercontent.com/assets/1931590/14675054/6187cede-0707-11e6-84f4-24101c510afb.png)
18484|Might be an electron issue. I tested it with older node version as well and they behave correctly.
18485|By analyzing the blame information on this pull request, we identified @egamma, @bpasero and @pborreli to be potential reviewers
18486|related to #5438 and #5539
18487|"@stephenmartindale sorry about that. There are several possible interim fixes for your specific problem: - if you only want to rely on the problems produce by the external gulp file keep your gulp owner in the problem matcher and add the following setting to your workspace settings  ``` json ""typescript.validate.enable"": false ```  This basically 'emulates' clearing all errors on build - assuming that your gulp task is not a watching task you can enhance the problem matcher with the following property:  ``` json  ""applyTo"": ""closedDocuments"" ```  This will do the following: if a document is open in the editor errors are taken from the internal TS server and external errors are dropped. However in this setup you need to set the owner of the problem matcher to 'typescript' to make this work.  If this doesn't help, could you share your project. Then I have a quick look and see what I can do."
18488|@jrieken assigning to you. Not sure were we get the TextMate grammar from
18489|There is already a feature request open for this here:  #446
18490|This is really strange. I cloned the repository and tried to reproduce but failed. Here is what I see.  ![bug](https://cloud.githubusercontent.com/assets/1931590/14676247/f6250c82-070c-11e6-9f88-ca6e993d8948.gif)  Can you think of any difference? We are aware that we loose indentation when you insert two empty lines in a row and there is a corresponding issue in the TS land for this.
18491|+1 ,I think that this feature will bring closer to this project many people who don't use vs code yet
18492|Good catch. Actually the proper value is en. I will add both to make json happy.
18493|"Got some time to reason about this. I am against adding something to the `TextDocumentContentProvider` and the label of an uri isn't part of the `TextDocument` e.g. it cannot be retrieved from a document. It should be more like a UriLabelProvider that given a uri can provide some sort of title.   ``` interface TextEditorTitle {    primary:string;    secondary:string; } interface TextEditorTitleProvider {    provideTitle(uri: Uri): TextEditorTitle | Promise< TextEditorTitle > } ```"
18494|Lets discuss planning in https://github.com/Microsoft/vscode/issues/5550
18495|Setting optimistically for April, but might slip to May. @outcoldman fyi
18496|@isidorn  We talked about this. fyi @stevencl @bgashler1
18497|@egamma @alexandrudima can we get it to the April milestone? I made it configurable, so if it will break something - will be possible to turn it off.
18498|+1  much needed feature.
18499|We should have `MessageOptions` similar to how we have `QuickPickOptions` which allows to control this. Like  ``` interface MessageOptions {    excludeDefaultClose:boolean } ```
18500|The debugger for node is pretty much unusable right now. Will this be fixed any time soon? This is using node 4.4.2. VS Code 1.0.  I don't see this related to large data structures, I see this when stepping any code, nothing in the watch window.
