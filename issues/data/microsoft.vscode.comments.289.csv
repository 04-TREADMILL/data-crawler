28801|This looks fine for me. I checked my Windows and Linux installation and both have the same version for these files. There is one additional file that could make this being broken. That is the events.js file imported on line 16.  @Tyriar can you check that that file has the same content than this file  Also @bpasero tested this on his Linux install without being able to reproduce.  @Tyriar I get the feeling that your install is somehow broken. Besides checking the additional file, could you do the following: uninstall and reinstall VS Code. If it goes away it looks like an update problem. If not, could you do the following: - start VS Code from the 'broken' instance using the command line switch `--debugBrkPluginHost=3434` - open a json file - attach a node debugger (best VS Code using a second VS Code instance) - set a breakpoint into `/usr/share/code-insiders/resources/app/extensions/json/node_modules/vscode-languageclient/lib/main.js` and `/usr/share/code-insiders/resources/app/extensions/json/node_modules/vscode-jsonrpc/lib/main.js`.  - let the extension host run. - when the breakpoint in `vscode-jsonrpc/lib/main.js` gets hit ensure that the events.js file get loaded correctly and that the emitter is reexported correctly - when the breakpoint in `vscode-languageclient/lib/main.js` get hit ensure that the vscode_jsonrpc_1 object looks like this:  ![capture](https://cloud.githubusercontent.com/assets/1931590/16518192/d3708c36-3f81-11e6-96a1-cbfcf0cf67fc.png)  Let me know what the debugging showed.
28802|Yes I will give it a try
28803|Ok, with vscode-textmate@2.0.1 we don't crash when opening sqlit3.c:  ![image](https://cloud.githubusercontent.com/assets/5047891/16517687/24859330-3f7f-11e6-98cc-078f06721e82.png)  I will create a separate issue to investigate why the C grammar pushes states and does not pop them for this file.
28804|![output](https://cloud.githubusercontent.com/assets/390575/16517719/449c9bc8-3f7f-11e6-8c37-6566d4f6e38a.gif)  Other than this I do not get any feedback. Could it be the same reason as #8605 ?
28805|I uninstalled all the extensions. It said that they where successfully installed.  Then I run --list-extensions again. This is what it returned.  HookyQR.beautify bcmarinacci.theme-material cssho.vscode-svgviewer donjayamanne.python robertohuertasm.vscode-icons  So these where not uninstalled.
28806|It might be connected - let's wait for the other issue
28807|Ok - let's try to manually remove them, if you go to your user folder you should have a .vscode-insiders\extensions -> delete everything inside and restart vscode
28808|Ok
28809|After uninstalling all the extensions and restarting the computer it works. Thanks.
28810|Also this issue is resolved after uninstalling every extension.
28811|Not sure how you ended up in that broken state, so I would leave this issue open so @joaomoreno can investigate next week once he is back. Since you are the only one seeing this and since there is a workaround I am putting this for july
28812|Great - I commented on the other issue which was the root cause (adding duplicate here)
28813|Some more findings: the tsserver can't block the extension host to exit. But if the extension host is still active then of course the tsserver will still be there because it only exists if the extension host closed the stdin pipe. In addition I don't see why the tsserver should block the debugging port of the extension host. It doesn't even know about that port.  Possible reasons why the tsserver doesn't exit are: - the stdin stream doesn't close or node never receives an event for it - the tsserver is busy (endless loop) - the tsserver is in debug mode and sits on a breakpoint  If someone sees this and the tsserver is the only process hanging around could you please drag me in so that I can check why the tsserver doesn't exit itself.
28814|"I know how annoying it can be to receive _up to date_ software, and especially having to _click-close_ a notice explaining important changes/bug fixes/new functionality. I mean come on!   ## Here's how you can fix that: :wink:  ###### Method 1  Edit _`project_root/.vscode/settings.json`_, add this line  ``` js {     // ...     ""update.channel"": ""none"",     // ... } ```  Now vscode shouldn't contact the server to looks for updates... But want a more concrete solution?   ###### Method 2  Follow this tutorial on how to block specific applications. Via the windows firewall.  ![windows firewall](http://pad3.whstatic.com/images/thumb/2/2c/Block-a-Program-With-Windows-Firewall-Step-5Bullet2.jpg/aid1879550-728px-Block-a-Program-With-Windows-Firewall-Step-5Bullet2.jpg.webp) http://www.wikihow.com/Block-a-Program-With-Windows-Firewall  **`[PROTIP]:` Instead of `BitTorrent` you will want to block `Visual Studio Code`!**  Now `VS Code` is incapable of connecting to the internet so you can rest assured that there won't be any prompts to update. This way, you can go months or even years using the same outdated software :sunglasses:  No need to (click) :point_up: any message boxes!  ###### Method 3  Finally if you're still having trouble, I might suggest this: [amazon sells this amazing device](https://www.amazon.com/Fluke-Networks-D-Snip-Cable-Scissors/dp/B000E5VAXM) which is specifically designed to prevent unwanted internet traffic. This is the foolproof way to ensure you'll never see on of those windows again.  ---  Oh, and don't ever try arch. you wouldn't like it."
28815|Done thanks for the reminder to remove the condition, good catch 🌹
28816|Done for TypeScript
28817|Seems to be done for all -> closing
28818|After getting negative feedback for the filter icon we have chosen to go with the elipses. Our concern with the elipses is that it goes against our design principle if it is the only action. So we also moved the clear action top level to also address #8386. We felt this solution is a nice compromise between various suggestions.  ![screen shot 2016-07-01 at 12 23 08](https://cloud.githubusercontent.com/assets/1926584/16519038/a0da29c6-3f86-11e6-9cf2-9ffb7ee70745.png)
28819|@isidorn make sure to fix the bad outline you now get that you removed the search attribute from input.
28820|@Velds what theme are you using? Did you try the VSCode Dark/Light+ themes?
28821|After adopting vscode-textmate@2.0.1 (see #7912) (where the StackElement is immutable) this .d.ts does not cause an OOM for me anymore:  ![image](https://cloud.githubusercontent.com/assets/5047891/16517900/47d5df7e-3f80-11e6-86d4-27a74f1b271c.png)  It is significant to note that the TypeScript grammar gets so broken for this example that at the end of the file it has entered **7152** rules that are not left!!! I will create a separate bug for them.  The good thing is we no longer crash.
28822|@aeschli @paulirish I can reproduce this when using the Oceanic Next theme. I've filed #8613.
28823|1. git clone https://github.com/microsoft/vscode      cd vscode   2. ./scripts/npm.sh install --arch=x64
28824|Who can give me some advice do.
28825|Node.js version: v6.2.2
28826|@egamma I have the same issue for Dark/Light and Dark+/Light+, as well as every other theme installed by default.  I've updated the issue with a screenshot showing what I'm seeing.
28827|Sorry about that!
28828|@aeschli - it is caused by this generated CSS style:  ``` .monaco-editor.vs-dark.vscode-theme-abyss-themes-Abyss-tmTheme {     color: rgba(102, 136, 204, 1); } ```  Perhaps the intent is to use `.token` in there?
28829|Even better: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/themes/electron-browser/themeService.ts#L365  ``` ts     if (editorSettings.foreground) {         let foreground = new Color(editorSettings.foreground);         cssRules.push(`.monaco-editor.${themeSelector} { color: ${foreground}; }`);         cssRules.push(`.monaco-editor.${themeSelector} .token { color: ${foreground}; }`);     } ```
28830|@zhangxiubo Are you using `\r\n` as the EOL sequence in your file?  ![image](https://cloud.githubusercontent.com/assets/5047891/16519694/223ed922-3f8b-11e6-9be7-4bfc0a8b6942.png)  In that case you'd need to search for `\r\n`:  ![ggjnzdyc7m](https://cloud.githubusercontent.com/assets/5047891/16519729/64daaa4a-3f8b-11e6-9850-89ecdc36c878.gif)
28831|@bgashler1 I pushed a variant of your commit (https://github.com/Microsoft/vscode/commit/681e42f8061cdeb12823be626e0bd28b6aa86c6b) to master for June with the following changes: - I also use mix-blend-mode for the ::before element so that the border blends nicely in other themes (not sure why you did not set it)? - I avoid the trick/hack you do with changing the tab size between 34-36px by using z-index for the ::before element. in your solution I noticed the active tab jumping a bit when getting active  There is one thing which I don't like is the dropfeedback color over tabs and tabs container in light theme. It used to be the same blue you get when dragging over the tree or editor area but now with the mixed blend mode, I cannot get this colour to work. It seems this CSS property is inherited like opacity and you cannot disable it? If you have ideas how to solve that, we can still push for it.  Maybe you could verify this across OS and themes.
28832|I'm seeing this in 1.2.1 on Windows 10 with JavaScript. JSON intellisense in my project appears to be working fine.
28833|@bpasero   > Well we open any Nth window (for N > 1) in the default size, what would you expect otherwise?  I agree with @prasannavl and @regs01.  I expected the same behavior as the other Visual Studio products.  The workflow most people who've used older Visual Studio products with multiple window instances opened, are familiar with a use case along the lines of: 1. Close all windows of Visual Studio 20XX that may already be open.  May also need to ensure that no zombie devenv.exe processes are lingering in the background. 2. Open a new instance of Visual Studio 20XX. 3. Resize the window to however you like. 4. Close the window, which will persist the window size. 5. Open N > 0 instances of Visual Studio 20XX.  Each will use the last persisted window size.
28834|Implemented using #7602
28835|@karabaja4 it is not the debugger that is acting strange here. It is the TypeScript transpiler that translates the TypeScript source to JavaScript and it has to rename variables in certain situations. When running (or debugging) you are actually executing the generated JavaScript but thanks to 'source maps' you don't see the JavaScript because it is always mapped back to the original TypeScript source. But the source maps do not cover variables so the generated names are not mapped back to the original names.  To verify this, please locate the generated JavaScript file (test.js). You should find the 'A_1' there. If you set the 'sourceMaps' attribute in your launch config to false, you can debug through the JavaScript and you will see why the 'A_1' makes sense.
28836|@dbaeumer yeah, sure, adding this information to the Extension UI makes a lot of sense.  Display the version in the status bar is not _required_, it's nice for _decoration_ but here is an idea instead of statically display the version of TypeScript, you can change this behaviour to display the version of the language that currently handles the opened file.  So for example, say I have two files open a TypeScript file and a C# file, when I switch between them the version indicator gets changed accordingly.
28837|Let's track in #8282
28838|The eslint, tslint problems are know and there are separate issues for them in their corresponding git repositories. To workaround it you can install eslint and the plugins you use globally as well. Same true for tslint.
28839|While verifying this on windows 8.1 with insiders latest build 716f76458e4dc93e865b6a999e437ed45774744e  Action Run selected text in terminal is opening terminal and copying text but not running the command. Focus remains in the editor.  I am opening a new issue for this.
28840|Great, see my comment in https://github.com/Microsoft/vscode/issues/8564#issuecomment-229920622 why I did not just merge this PR directly but refined it a bit.
28841|Works great in terms of performance 👍
28842|postponing after endgame
28843|I find the current way very confusing if I compare it to the tree. This really needs some fixing in the list widget. I will open a separate issue.
28844|Never mind. Solved my own issue: https://code.visualstudio.com/docs/editor/tabs
28845|Agree - create me an issue and I will look into it next week. Thanks!
28846|#8621 and #8622
28847|I have just tested on Windows and [the test provided](https://github.com/Microsoft/vscode/wiki/IME-Test#windows-chinese-test-2) by @Emeryao works for me:  ![svxjsk7y1v](https://cloud.githubusercontent.com/assets/5047891/16522428/063d2dd8-3f9e-11e6-981e-a05756ac8b8b.gif)  I believe this might be a mac specific issue.
28848|Works for me when using a local file path or absolute path, but not when using a URL like https://gist.githubusercontent.com/bpasero/5574e2cb0cd47aaf9870f956adcc7ff5/raw/bf2a775e5c71eda058b534ae37fa03b930026a60/gistfile1.css or https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css
28849|Good catch
28850|I have the same issue, see the screen shot below, the chinese characters within red-rectangle are overlapping. a little difference with #7062, i have NOT resize the window.  ![screen-shot-01](https://cloud.githubusercontent.com/assets/10598397/16522985/9019119a-3fd3-11e6-95e3-34f87b54bb12.png)  VSCode Version:1.2.1 OS Version: Windows 10 Pro x64 Chinese
28851|Looks good, created #8626 as a related but not important bug
28852|I can still reproduce, see video:  ![sd](https://cloud.githubusercontent.com/assets/900690/16522924/e42e2906-3fa0-11e6-8b11-27731ae82978.gif)
28853|"@bpasero I am using workbench and monaco for an online IDE to manage server side repositories, similar to Kudu and VS Online but for enterprise environment. I was using an angular app and ace editor but found monaco a great alternative. Currently waiting for release clearance before I can publish it open source.  I can report workbench issues in web environment here or wherever it is appropriate, please let me know.  I found the following references by regex searching for `(/electron-browser/|/node/)` in `src/**/browser/**` and excluding `src/**/electron-browser/**`.  ![image](https://cloud.githubusercontent.com/assets/542968/16522549/8f5bafe0-3f6c-11e6-832c-0d875dcfb6ab.png)"
28854|@bpasero All are expanded by default. But when user collapse any, then I am not expanding them even during filtering. I think if user collapses it specifically then it is good to retain it.
28855|Leaving this verification to @bgashler1 based on above comment
28856|Removing verified since we don't have a build yet to verify.
28857|That is pretty cool, thanks 👍
28858|To be clear, I can not make a statement if workbench.ts stays in browser land. I will try, but eventually we might have to move it to electron-browser land. Using the workbench as such standalone was never intended nor planned with VS Code.
28859|"@sandy081 I am not sure about that, the user might have clicked on the ""Collapse All"" action to get an overview and then wants to drill in. What use is it to keep something collapsed that has valid search results? I am still fine to not expand if count > 10."
28860|There are still some issues with the horizontal resize (captured in other issues) but other than that looks ok -> verified
28861|Verified by code review.
28862|Nice 👍
28863|@alexandrudima The cursor position is not correct after the selected(used cmd+shift+z).  ![demo](http://ww3.sinaimg.cn/mw1024/534b48acgw1f5es77q98gg20a409un2b.gif)
28864|Verified using simple python and php examples.
28865|Temporary workaround: adding spaces around brackets.  Syntax highlight broken with .tsx files in Visual Studio Code 1.3.0-insider:  ``` typescript interface test {   a: Array<number>,   b: string }; ```  Temporary workaround:  ``` typescript interface test {   a: Array< number >,   b: string }; ```
28866|Marking as verified due to @jrieken last comment
28867|![untitled](https://cloud.githubusercontent.com/assets/900690/16525884/cc39ce00-3fae-11e6-9b43-b31c31815f17.gif)
28868|@alexandrudima Thank you for your reply. Yes you are right, using `\r\n` works (I thought of it before but mistakenly tested `\n\r` perhaps). :+1: Wouldn't it be nice for VS Code to introduce an universal newline character like the `\R` in Sublime Text. :smile:
28869|@kisstkondoros For the June release I've put the mouse wheel handling behind an editor option and it is off by default. On macs a pinch gesture (that apparently happens all the time by accident) causes a mouse wheel + ctrl modifier that triggers the editor zoom.  We can investigate in July and get ux guidance on how to proceed.
28870|git version 2.6.2
28871|I pushed a workaround where I unset my z-index trick as soon as a drag is starting.
28872|It looks like this commit earlier this month has removed the ability to color the output described above:  https://github.com/Microsoft/vscode/commit/9a57fba48c0c20d5a9a6dec6f35c6d63e0aa5e2d#diff-0ae4fd008d20fc694925b1e837ac1cc2  Is there a way to color the output still? Or is this no longer supported?
28873|@Velds The grammar we are using for JS doesn't color function and variable references in JS files. If you want this, then we just made another grammar available as an extension. Can you please give it a try: https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar
28874|@aeschli fyi
28875|Yes, that coloring story was not good at all. We need support for a) ANSI coloring in the output panel and maybe b) a way for an output channel to contribute rules for tokenization. Coming up with some hard coded keywords (info, error, warning) does not solve it for extensions in general.
28876|Hey @rozzzly thanks for your smartass and useless reply. Your perspective of how things should be is not the ultimate right perspective. In fact quite the opposite! I work in a size-able group of developers and most of us have raised the concern of the annoyance of the update notification in Code. Furthermore, I don't want to not know or be able to update at all! I want to do it on MY preference, not yours! Just move it up into the title bar like VS does and tell me how many versions I'm behind instead of continually annoying me that your weekly update is out! When I'm ready maybe a month from now, or some other time when I'm not in the middle of my very intensive task that I just need Code to do its thing... open my file so I can edit it! Instead of being intrusive, be helpful!  @bpasero Stable.
28877|@Serjster so this should happen at most once per month or do you see it more often?
28878|Sounds good, I'll let me users know its not possible at the moment, thanks!
28879|A configurable update interval could be a possible solution.  For example, on startup, once a day, once a month, never
28880|@bpasero I am not certain. It feels like more often than that. This is coupled with the fact that I have an installation of Code at work and also at home.  @remcoros I still think that an option to make the Update notifications be less intrusive is a better solution.
28881|@liyuan-rey yes it should be the same underlying issue (and fixed now).
28882|@egamma Seems odd that the default grammar doesn't support what is (imo) pretty standard functionality.  The js-atom-grammar extension works well, thank you.
28883|@bpasero Ah, that makes sense. I noticed some similar flags between Chrome and VS Code when I looked at the command lines in Task Manager. Figured Chromium was the reason.
28884|Duplicates https://github.com/Microsoft/vscode/issues/7684
28885|What I'm seeing is that the stylesheet is correctly added to the html page that is being displayed. When I open the dev tools inside the webview, the stylesheets don't seem to have any content. However, this only seems to be true for those gist urls. When setting `http://www.krumplr.com/stylesheets/all.css` as a custom stylesheet, the preview changes accordingly.
28886|Duplicate of #3886.
28887|"This is late to the game but I just ran into this issue.  Make sure your remoteRoot node and localRoot node in your launch.json point to the proper location.  I have a situation where I develop in a /lib folder and in my Docker file the files are put in a /app folder.  This is how my launch.json is configured...  ```         ""localRoot"": ""${workspaceRoot}/lib"",         ""remoteRoot"": ""/app/"" ```  The debugger will attach properly then."
28888|@sandy081 what shell are you using? Also did you include a `\n` character in the text? Is this consistently reproducible or a one off?
28889|By analyzing the blame information on this pull request, we identified @Ikuyadeu and @egamma to be potential reviewers
28890|Hi **@dhollinger**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
28891|The issue is that GitHub responses with `X-Frame-Options: deny`.  The question is 'What is a good way to help people figuring this out?'.
28892|"The issue was that the command declaration was missing a category. Thus, it showed up under ""Open to the Side"" rather than ""Markdown: Open to the Side""."
28893|This was reverted as designed, no verification needed.
28894|@kieferrm do you have any terminal or font family/size/lineheight settings in settings.json? Can you also copy and paste the output of `echo $PS1`
28895|No special settings. Here is the output: `\s-\v\$`
28896|Good to know. In my case moving `workbench.ts` is not important because I have re implemented it in my repo anyway but please try to keep the rest sanitized from being mixed with electron.
28897|+1
28898|I think this I'll leave this one to someone more capable than me. The size of the project is kind of overwhelming for me and this doesn't look like a monkey-patching issue. :pensive:
28899|I already have them installed globally as well. I still get the same error. Even if I install linters in the root folder of the project, they still are not working because they cannot find the config files.  ``` . ├── WHERE LINTER IS INSTALLED   <---- installed in the project root, just to try ├── .vscode │   └── tasks.json ├── client │   ├── .eslintrc  <----- CONFIG FILE │   ├── node_modules │   ├── package.json │   └── src │       └── app.js └── server     ├── index.ts     ├── node_modules  <----- where it should have been found     ├── package.json     ├── src     │   └── app.ts     ├── tsconfig.json     └── tslint.json  <------ CONFIG FILE ```  I've checked the source code on the extensions and they use the plugin api to resolve these libraries and configs like so  ```     return server.Files.resolveModule(rootFolder, 'tslint'). ```  That's why I created this issue on this repo. They are just using the suggested way.  Do you want me to open the same issue on each of these linter's repo?  Thanks for the help so far.
28900|@bpasero any idea what could have changed with this? Did someone touch any watching logic recently? I'd rather fix this in vscode than change my dotfiles to duplicate the files.
