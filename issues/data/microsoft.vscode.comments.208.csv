20701|@cchamberlain  Not now. However, besides `:` commands, most used vim commands are on the [road map](https://github.com/aioutecism/amVim-for-VSCode/issues/1). We have a good code base, so it's only a matter of time to implement them.
20702|wrong repo? we don't ship those dll-files
20703|we don't ship: Microsoft.VisualStudio.ApplicationInsights.dll
20704|The behaviour is consistent wrt to the editor selection. What happens to @vsccarl is that when doing a right click you likely change the editor position.
20705|@jrieken I tried this today. But it inserts the tabstops and placeholders as text itself.  ![image](https://cloud.githubusercontent.com/assets/6961317/15069539/dc33d06a-139b-11e6-81ac-da22041f7aa2.png)
20706|@bpasero Is there anything special wrt <kbd>Enter</kbd>? When the command is invoked from the F1 palette the tree in the peek widget immediately receives an `onEnter` event which makes it jump to the declaration. Now I wonder where that event comes from
20707|the syntax is like so: `new vscode.CompletionItem('hello {{world}}. hello {{world}}')` using double curly brackets. Unsure, if we plan to align that to the snippet syntax that seems to be `${thing}`
20708|@jrieken Great, thanks! This fits my needs! Is there any way to order tab stops with this syntax?  EDIT: It would be really helpful if you could point me to where this syntax is documented.
20709|Maybe F1 triggers the command onKeyDown and thus onKeyUp might go to the editor. Though if that is true I wonder why you do not end up with a newline in the editor for any other command?
20710|unsure. @alexandrudima will know
20711|Found the issue - now it should work
20712|@bpasero Yes, now that you say it, i deleted the folder which was the first instance, and then i started the second one and it didn't work. But now it's working after reboot. Weird :)
20713|+1 very important for large projects
20714|Sorry, take it as not keeping up :-)  In saying that, I am not opposed to the idea but I wonder why we changed the behaviour and don't switch to the debug viewlet when hitting a breakpoint now?
20715|I am not sure if we should change the current behavior to always reveal the debug viewlet. I think we have a reason to not reveal it all the time because people got distracted. Thinking about viewlet indicators in general, I find it a good idea to show any viewlet state in the activity bar because these indicators are meant for exactly that purpose (the viewlet is not visible but has state that you might be interested in).
20716|Ok this is https://github.com/Microsoft/vscode/issues/2259
20717|Sorry, this went to the wrong database.
20718|Excellent! Thank you.
20719|Fantastic, thank you!
20720|I like the arguments ben is making and that is the main reason why I would like to experiment with this to get feedback.
20721|@stevencl or putting it the other way around, can you state concerns you have with showing the debug state in the viewlet? Would people maybe expect they could break/continue from the activity bar? Maybe we should start thinking of making the activity bar more powerful and allowing to invoke actions from it (e.g. the full debug toolbar).
20722|@bpasero I still get the same message, is this expected? Though after that message I get an info message to use editor actions to revert or undo  ![screen shot 2016-05-06 at 14 15 50](https://cloud.githubusercontent.com/assets/1926584/15072725/136acbf8-1395-11e6-8a28-7de1338bf82a.png)
20723|@isidorn yes sure the message is still there but it should go away automatically once e.g. you revert your dirty changes.
20724|The output event which I recieve does not contain the full string. The repl is capable of showing the full string which can be seen if you simply evaluate that string in the repl  Here's a simple repro  ``` for (var i = 1; i < 10000; i++) {     s += 'x';  }   s += 'A'; console.log(s); ```  Forwarding to @weinand to check why the output event does not contain the full string
20725|I haven't gotten it to happen just opening electron. And also it hasn't happened with Code for a little while now as well. I'm going to keep an eye out for it and see if it happens again.
20726|Sure I can give more info comparing how Atom and VSCode both work in this situation.  In Atom, when you first search for a file it will index all of your files. Then, when you start typing a couple characters you instantly see file suggestions. This is great because it gives you a chance to see if you mistyped something or quickly see the file you want.  As for VScode, yes it does search as you type for files it previously indexed but if you start typing a filename that hasn't been indexed yet VSCode waits until you stop typing or hit enter before it performs a search. On small projects this is not terrible but for large projects that scan can take some time and cause some extra wait time.  Is there a way to make VSCode index periodically in the background? That way Quick Open would be faster and there would less chances of waiting for suggestions to show?
20727|"I cant speak for @dimdin, but that is basically what I'm looking for.  I am on OSX and most Cocoa controls in native apps have a base of keyboard shortcuts that are defaults. Most of these shortcuts are emacs keybindings and since I was an avid emacs user for a long time they are ingrained in my head.  `ctrl+k` in emacs and in most cocoa controls take everything from the cursor to the end of the line and put it in a kill ring. `ctrl+y` will then paste it back. These shortcuts even work in the Chrome text box I'm typing in right now.  Yesterday after commenting on this thread I began to look into how to write an extension for vscode to get around this problem.   ``` import * as vscode from ""vscode"";  export let cutToEndOfLine = function () {      vscode.commands.executeCommand(""cursorEndSelect"").then(() => {         vscode.commands.executeCommand(""editor.action.clipboardCutAction"");     });  }; ```  full extension is here https://github.com/dotDeeka/ddcode  This hack seems to work fine."
20728|Ok, lets close this one as duplicate of https://github.com/Microsoft/vscode/issues/55 which is about introducing a faster search in general.
20729|@owtotwo Yes, I'm working on a change that disables our usage of `translate3d` when the `zoomLevel` is not 0. Since it was filed before, let's track progress in #959
20730|Alternative steps to verify on Windows: - edit config file to set `window.zoomLevel: -1` - scroll a bit (you need to get to a `scrollTop` that is not a multiple of `5`) - take a screenshot - you should see RGB antialising:  good (sharp): ![image](https://cloud.githubusercontent.com/assets/5047891/15077151/6c0d6d3e-13ad-11e6-9c26-d793ac23fb2a.png)  bad (grayscale): ![image](https://cloud.githubusercontent.com/assets/5047891/15077235/c958e3d8-13ad-11e6-9c23-88bd2725da13.png)
20731|Fixed (for the case when zooming with ctrl+= or ctrl+- or via `window.zoomLevel`) with 289370f2f335eeb2cd8b74cd8f20101d1ed3335a
20732|@bpasero Since I don't force it on widgets anymore, I removed the font declarations from the obvious places. We should track these places in separate debt issues going to the owners of those widgets.
20733|I'm having this issue as well with Python inside Markdown code blocks. It highlights correctly in the editor, but in the preview it doesn't highlight at all.
20734|@alexandrudima @jrieken not sure who to assign, I think this would have an impact on the find input and the rename box. I don't see other uses of input box in the editor afaik.
20735|Filed: https://github.com/Microsoft/vscode/issues/6171, https://github.com/Microsoft/vscode/issues/6170 and https://github.com/Microsoft/vscode/issues/6169
20736|I'm not opposed to the idea. If I had to think up a concern it would be the same one we have about icons in the explorer, that it becomes a bit of a Christmas tree effect. But that is just me trying to think of a concern. So definitely go ahead and experiment with it.  I see also that we switch to the debug viewlet until the user activates another viewlet during debug mode. That makes sense to me too.
20737|Sorry about that, there was an issue with the context menu service not calling `onHide` that was leading to editors to believe they were focused after a context menu was shown. The `Enter` was going to the wrong editor.
20738|What are the badges that we would show in the activity bar? if we showed a play/pause badge it may feel like you can click on it to take an action. If it is multi color (e.g. orange when debugging) then i feel like it becomes a christmas tree very quickly.
20739|Come on people. Subscribe. Stop spamming. Will not help comment on this.
20740|"please,  have you planned an VSCode update for allow add ""files.encoding"": ""windows1252"" in extension language package.json file? or a way for open files by extension of filenames encoded 1252 and not utf8 (we need to open *.PRG files in 1252) Thanks"
20741|Heres a gif. I can reproduce on 1080p and 1440p resolutions.  ![snapresize](https://cloud.githubusercontent.com/assets/12900364/15080823/b8e86dae-1374-11e6-84c5-8d7006d3d970.gif)
20742|Maybe @isidorn could attach screen shots if he has ideas how to present it. Also, I would maybe only show an indication when the execution is currently stopped in a breakpoint because otherwise we indicate debugging state in the status bar.  This would also better indicate that there is state in the debug viewlet to explore, because if the application is running, most of the views in the debug viewlet are empty anyways.
20743|If in doubt, blame it on some Windows 10 version you are using ;)
20744|#508
20745|It closes even when clicking the same spot. Here's an example: ![peekexample](https://cloud.githubusercontent.com/assets/12900364/15081029/9802c0ca-1375-11e6-8dea-f77566087b2c.gif)  When it re-opens at the end, I press Alt+F12 a few times but it does not close.
20746|>  press Alt+F12 a few times but it does not close.  if you focus the outer editor, it does
20747|![image](https://cloud.githubusercontent.com/assets/11839736/15081453/f6d98910-1377-11e6-891f-7aca018a687f.png) Is this what you were thinking @isidorn ?
20748|To add insult to injury on this one when I set the tab style to tabs it keeps reverting back to spaces every time I switch to another file and then back to the Makefile.
20749|That makes sense then.
20750|@bgashler1 I want to click on that pause button!
20751|Hi @bpasero,  Thanks for your reply, sorry for the confusion.  You're right, VS Code ask for saving the files, but they're not auto-saved. As a comparison, Sublime saves open files to a temp directory, so, if it crashes or restarts, I never lose anything.  Thanks again, Sia
20752|"![image](https://cloud.githubusercontent.com/assets/11839736/15082509/ed4f00a0-137c-11e6-8095-ec3afca56be1.png)  Since we already have all the Debug buttons persist on top (no matter what viewlet we're in), are we certain this is a problem with users? 1. Are they often running their apps while working in the Explorer and wanting to be notified of hitting breakpoints? 2. If so, is the ""Pause"" button turning to a ""Play"" button not clear enough that they have stopped due to a breakpoint/terminating?"
20753|@be5invis I'm not sure if I'm just used to it, but to me it is not obvious what is ugly about it :). Is it the color or the fact that it exists?  It is also not really a border, it is a 1px width line drawn inside a canvas element and I'm thinking Chromium is not doing such a good job in scaling canvas elements when the OS zoom level is different than 100%.
20754|We didn't document it because we didn't want it to spread.  @jrieken maybe completions coming from the extension host should go through https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.ts#L226 such that we don't end up documenting and making API of our internal format.
20755|Good point, I have created #6175 to look into improving our process.
20756|@doronguttman Can you please share the file that reproduces the problem? Is it freezing when opening a specific TypeScript file, or when opening a specific folder? Any other information that could help us reproduce the problem? [i.e. we're all editing TypeScript files all the time - VSCode is written in TypeScript]. Do you have any extensions installed that may cause this?
20757|@chrisdias: just an experiment.  Is this less clickable to you? ![image](https://cloud.githubusercontent.com/assets/11839736/15083154/8a31175c-1380-11e6-8596-4cf4a56877d2.png)
20758|No, its not :).  One thing to consider, we have a problem where the debug toolbar only shows up when the debug viewlet is visible/active.  i find this problematic if i switch to the explorer while at a break point, where did the toolbar go and why?  we've always discussed having the activity bar buttons be commands, perhaps now is the time to consider.
20759|@leedonhyun I cannot reproduce. Is it possible you have installed extensions that interfere with or that overwrite the HTML formatting?  ![6074](https://cloud.githubusercontent.com/assets/5047891/15083758/593f7c2a-13cf-11e6-8167-88880b8c7246.gif)
20760|Is there an option to enable emmet in JS files? The jsconfig.json doesn't seem to have an option. It's annoying to change every time the language mode to `JavaScript React` to be able to use Emmet.
20761|"@erfannoury That is indeed a default shortcut we ship with. Can you please try the following: - Open `File > Preferences > Keyboard Shortcuts` - In the `keybindings.json` add the following rules:  ``` // Place your key bindings in this file to overwrite the defaults [     { ""key"": ""ctrl+shift+1"", ""when"": ""editorTextFocus"" },     { ""key"": ""ctrl+shift+2"", ""when"": ""editorTextFocus"" },     { ""key"": ""ctrl+shift+3"", ""when"": ""editorTextFocus"" } ] ```  These rules will remove the default bindings we ship with for `ctrl+shift+1`, `ctrl+shift+2` and `ctrl+shift+3`"
20762|@oodboo Is that in JavaScript? If yes, please file a separate issue for it. This bug is about improving the HTML support.
20763|@miparnisari I am not sure I understand what you mean that the cursor is lost. I have tried quite a number of times doing Windows + Left, Up, Right, etc. and I did not notice anything weird about it. Maybe can you please make a screenshot or even better, a screen recording gif, showing the problem to help me understand better what's wrong?
20764|@alexandrudima Thank you very much. This solved the problem.  So according to this solution, Keyboard Shortcuts changed in this version. I'm closing the issue.
20765|The code that tries to protect against non-advancing regexes needs to be revisited.
20766|This issue was moved to Microsoft/TypeScript-TmLanguage#160
20767|I have just found #2000 which basically says the same thing ... so I do not know should I copy text there ...
20768|@alexandrudima Chromium does scale canvases, but this scaling is not like scaling other elements, it will cause the contents blur. Many programmers around me, including me, prefer that removing this border will make the UI look better.
20769|duplicate of #5398
20770|This issue was moved to Microsoft/TypeScript-TmLanguage#161
20771|This is used in the context of our extension APIs. Extensions can add a new theme to VSCode. They 'contribute' a new theme to VSCode. To do so the extension needs a special entry in their package.json file under key 'contribute/themes'  The translated label is the description of that key.  There are many other similar contribution points. nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'), nls.localize('vscode.extension.contributes.snippets', 'Contributes TextMate snippets.'), nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'), ...
20772|@oodboo #2000 looks like the right bug. Yes, add your example and suggestions there.
20773|+1
20774|Sorry, didn't know I was supposed to add test. I have already switched to Sublime Text anyway. If somebody wants this feature they will have to write the test themselves.
20775|@alexandrudima Does that mean window zoom level no longer needs to be restricted to 100% and higher (i.e., you can't zoom below 100% with Cmd+-)? I am referring to https://github.com/Microsoft/vscode/pull/434#issuecomment-158865596.
20776|@bpasero yes, all others are being read fully.
20777|@aioutecism - I installed it.  This is definitely much better than the other VIM extensions, great job!  Would still like the core product team to get involved so we can get things like `/` using regex instead of the built-in search tool as well as the rest of the common VIM features that are expected out of a text editor.
20778|https://github.com/Microsoft/TypeScript-TmLanguage/issues/162
20779|@bpasero nothing for all variants on my machine. Failing to create the directory might be the reason it's not working currently though.
20780|@sarbbottam still planned for May release.
20781|https://github.com/Microsoft/vscode-jshint/issues/33 https://github.com/Microsoft/vscode-jshint/issues/32 https://github.com/Microsoft/vscode-jshint/issues/31
20782|i have same problem node: 6.0.0 os: windows10 14332 vscode: 1.0
20783|I think Cmd+- does not go below 100%, but `window.zoomLevel: -1` worked for me when doing it from user settings.
20784|VS Code 1.0 does not yet support node v6. node v6 appeared after we had finished VS Code 1.0. Try the upcoming VS Code 1.1 - the Insider release is already available.
20785|> I think Cmd+- does not go below 100%  I believe that was implemented because of the blurring issue (see [this comment](https://github.com/Microsoft/vscode/pull/434#issuecomment-158865596) by @bpasero):  > We chose to not allow for zooming below 0 because some people end up in this state and wonder why the UI looks blurry.  Now that it's fixed, can't that restriction be lifted?  In other words, isn't forcing user to use `window.zoomLevel` instead of just Cmd+- to go below 100% no longer neccessary?
20786|Yep, found it upstream: - https://github.com/electron/electron/blob/v0.37.8/atom/common/crash_reporter/linux/crash_dump_handler.cc#L347  I'll file a ticket over there.
20787|@maroonedsia but that is a different thing. can you clarify how you are loosing data when you are asked to restart? are you not being asked to save?
20788|Yes I was thinking the same when we brought up the concern that the icon looks like you could click it.
20789|@mikeal can you try to run it from the console, like `./VSCode.app/Contents/MacOS/Electron`
20790|I am easy to change this so that you can also zoom out.
20791|Why is this issue closed? I am having the same issue
20792|Was this fix put out in a release? Noticing this issue mainly on my mac screen, where as on an external monitor it's less of an issue. I tried switching between a couple default dark themes even, and the dark cursor is present.
20793|It's out in the insider's release.  On Sat, May 7, 2016 at 12:37 PM, Aaron McLeod notifications@github.com wrote:  > Was this fix put out in a release? Noticing this issue mainly on my mac > screen, where as on an external monitor it's less of an issue. I tried > switching between a couple default dark themes even, and the dark cursor is > present. >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/754#issuecomment-217649506
20794|@Tyriar In the [April Iteration Plan](https://github.com/Microsoft/vscode/issues/4888) I noticed:  >  Linux: Support running vscode with sudo permissions #3068 @tyriar >  Test #5062  I was hoping that this would allow me to launch VSCode as root. I downloaded the insiders build and tried launching it, but it doesn't launch and I don't get any output:  ``` root@1f20642fd434:~# code-insiders --user-data-dir=/root/profile --version 1.1.0-insider root@1f20642fd434:~# code-insiders --user-data-dir=/root/profile .         root@1f20642fd434:~# pwd /root ```  I noticed that a `User` subdirectory is created:  ``` root@1f20642fd434:~# ls -al ./profile/User/ total 85 drwxr-xr-x 2 root root  68 May  7 19:48 . drwxr-xr-x 3 root root 102 May  7 19:48 .. ```  Should it be possible to launch VSCode as root?
20795|I'm using Lubuntu 16.04.  VS Code first asked me to have ssh-askpass installed (can't remember what the prompt exactly said, but I'm having a very similar issue... even if my user settings declare that autofech is disabled)  The current issues I have are: - I'm having a really long wait time for each commit - I have to type in my passphrase for pulling - I have to type in my passphrase, again, for pushing  Are these issues related to leonyu's? Or should I create a different issue?
20796|@1767083130 Thanks
20797|"Had this problem again. On multiple projects using ${workspaceRoot} to indicate the path to ""program"" would give me the ""program path uses differently cased character than file on disk"" warning, while handtyping the whole absolute path would not."
20798|tks
20799|@bgashler1 I understand your desire to default to aligning with the VS branding, but the color is extremely distracting for some people. It would be great if you could at least have a user style sheet that would allow us to dim it down, or just set it to always be black. This is about the only thing that is preventing me from committing to your fantastic editor.
20800|Tired of copying code from VSCode to VS or SSMS only to make some regex multiline replaces.  Do you have any estimate time on this @Tyriar @alexandrudima?
