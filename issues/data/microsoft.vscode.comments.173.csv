17201|ok, i sent a video: https://drive.google.com/file/d/0Bwx5lO1eBkVQcDhRSXpOS0VPUE0/view?usp=sharing
17202|One problem with this though is if you want the Esc key to close something else, such as a peek window that you might have opened in the editor. Imagine you kick off a long search, look at one of the results inside a file, inspect references to a function using peek reference, then press Esc expecting to close the peek window. It could be quite frustrating if the search was cancelled instead.  Perhaps we need to consider a unique global keybinding instead to close the search since Esc is used to close other UI in context.
17203|@stevencl good point.  And maybe some clear visual affordance somewhere.
17204|@bgashler1 @stevencl maybe better idea would be to just let ESC to do job in input and in area below (where search results are) and add button above input with esc-like functionality.
17205|Related #2117 Less Formatting
17206|Related #1735 Handlebars Formatting
17207|@v-pavanp  https://github.com/Microsoft/vscode/pull/5212
17208|Just for the sake of clarity, the April release referred to here would be _after_ 1.0 is released, correct?
17209|Since 1.0 is on the way, I'd love to see this get added once you guys are prepared to start adding new features again.  Users of the PowerShell extension tell me regularly that they would switch away from the PowerShell ISE completely over to VS Code if there was a persistent REPL experience.  Since Andre self-assigned this issue and removed the help wanted tag, I'll take that as a hint that work might be happening in this area soon :)
17210|Do escape sequences for text colors currently work?  I was under the impression that this wasn't implemented yet.
17211|Would love to see IntelliSense appear in the debug console!  I know that PowerShell users would find it really helpful.
17212|There's one thing I don't understand: Why does the trace in my debug session give two different paths to the `.ts` source file:  ![selection](https://cloud.githubusercontent.com/assets/9283914/14482928/48cd8d72-0142-11e6-99d2-30c0f140deba.png)
17213|@bpasero  I don't think your answer truely matches my report.  I'm complaining about the fact that a user cannot easily navigate between Working Files and project folder files in Files Explorer. The cursor stops at the border between them when using the arrow keys (see animation above).
17214|@gilberto389 thanks, so the issue in the video I see is that you scrolled down in the one file and when you click back into it, the scrolling position is not restored. Is that what you are complaining about?
17215|@SetTrend but the title of this issue is about not being able to use the keyboard to go there, you can change keybindings in settings?
17216|> In order to cancel search, you need to focus input (which is not really clear, ESC is not working in area > below the input) and also if you search and project has many files, its hard to cancel search since > search will take too many resources and its almost impossible to focus input.  I don't get this, how does the number of results in a search make it hard to focus the search input field?  > @bgashler1 @stevencl maybe better idea would be to just let ESC to do job in input and in area below (where search results are) and add button above input with esc-like functionality.  that sounds reasonable
17217|@gregvanl but going from a diff to the actual file might not mean the user wants to add the file to working files? he might as well just be interested in reading the file in full.  I think we should be very careful when we add something to the working files list. In the future this will mean adding a heavy weight tab to your list. I would still vote for not adding to working files unless you edit a file or double click it from the explorer.
17218|yes, would click in the position just want to analyze, as once I have a lot of open files, a click that save me in every review I is helpful.
17219|@bpasero   > I don't get this, how does the number of results in a search make it hard to focus the search input field?  Search results have nothing to do with this. Long running search will take lot of CPU, and you are not able to do almost anything after while (~ 10sec) including focus. And even if you had CPU to move around it is not exactly clear that you need focus in order to cancel search.  I actually try to press ESC many times with long running search before I opened this issue and functionality with ESC was already implemented, but didn't work for me. Now I know why...
17220|It's the terminal service, the execution service isn't needed anymore.
17221|I'd expect it to work like it does with Xcode and Safari. If it does not conform to the same behavior then usage won't fit in well with the other apps. As I use Safari and Xcode and come back to VS Code I naturally try to swipe back and forward between files but have to fall back to the hot keys instead of the gesture.  As for the concern for horizontal scrolling, it has not been an issue with Xcode where I use this gesture the most. Since most developers try to keep their code within a reasonable number of characters per line I do not expect scrolling left and right will be an issue.
17222|@joaomoreno we discussed this once. If we want to do this the installer has to write the locale.json file during installation. What do you think ?
17223|@joaomoreno Is this possible at all. Can we base the language of the setup on some external data (e.g. the locale.json file we have)? My expierence was as follows: if I select a language during the first setup that language is used in the setup later on.
17224|@isidorn I think that could be made more clear with a better message. Errors detected sounds a little harsh. I too had the impression that the task failed with errors. What's about saying something like: 'Build errors have been detected during preLaunchTask. Do you want to debug anyways?
17225|@ironcladlou Thanks! Merge into master
17226|@Mosho1: your problem is the files section. You are creating a project with exactly one file in it the ./typings/main.d.ts'. If you open another file it doesn't see the main.d.ts. You either need to list all files in the tsconfig.json file or none. Then VSCode takes considers all *.ts files (including d.ts) under the tsconfig.json file part of the project.
17227|I close this issue since i haven't heard back from the initial creator of the issue and the other comments relate to tsconfig.json issues.
17228|@EWhite613 VSCode is not relying on any node version installed so nvm shouldn't have any impact on  this. Would you be able to share your project (or better the one that failed) so that I can try to understand why that was the case?
17229|Cool!
17230|@egamma this could happend when: - the JS files are really really big.  - the extension host is busy. All eventing and coordination in the extension host is sync right now (more or less). So if for example another extension is blocking the extension host (could even be the TS/JS extension) then no other extension can do something. So the Eslint server might have already computed the problems but they can't be processed because the extension host is doing something else.
17231|@vedanshujain Thanks for the explanation. I understand. To make sure we won't match on multiple lines, I added the look ahead to the begin pattern. The patterns are matched only against a single line, not the full content. So unless we don't see the regex on the same line, the rule will never be entered. I improved the lookahead so now also your example works.
17232|@KokoDoko for the duplicate warning see https://github.com/Microsoft/TypeScript/issues/7744  @bpasero I move this to you. It looks like the explorer has still focus and does something on paste ? I can't imagine how otherwise the file would become ball-1.ts
17233|@dbaeumer The JS files themselves are not so big. There are just too many (~1k). I do think it's because of your second point.
17234|@weinand Linux only
17235|Which VS Code version do you use?
17236|@kumarharsh the eslint checker has only the files that are open in the editor. It doesn't validate them all. So the total amount doesn't count as long as you don't open them all.
17237|@jrieken there are no references of `gnome-terminal` anywhere in our sources. Why do you say this is the terminal service? I think @Tyriar is right and this should now be closed...
17238|We run the search not within the same process so I am actually curious why you see such a slowdown on your system that would prevent you from clicking into the search input.
17239|As expected. We will also remove the option to chose language if it can be detected.
17240|I think we will rely on Inno's ability to detect the language from the system and not show the selection box.
17241|Assuming that you don't open all files there must be something else. Are you able to share your project?
17242|![tsc](https://cloud.githubusercontent.com/assets/13499245/14486477/ba69e456-018f-11e6-83a7-2462184c4e3d.png) not work
17243|@dbaeumer agree. I have improved the wording.
17244|windown 10, version:0.10.11
17245|@minggo unfortunately not. You can patch the TS extension however your changes will be lost on the next update.
17246|ops, my bad. it's safe to close then. we didn't use that service anywhere anymore
17247|Got it. Can i add a new language to VSCode that just extends TS?
17248|to verify - install an extension that is known to throw errors, like `spywhere.guides`. - toggle between a JS file and another files, notice exception showing in the console - open dev tools, open workbench.main.js, find the `handleEvent` method of the _mainTelemetryService_ (use format (`{}`-icon) and outline (cmd+shift+o) feature to find it) - make sure no PII is contained in the data we send, esp when sending the error info printed on the console
17249|closing as duplicate of #4344
17250|We are using a native nodejs module that gives us support for weak-references. Over some intense debug sessions in the last days we have learnt that this module can crash the node process, esp later version of node/v8 show this (https://groups.google.com/forum/m/#!topic/v8-dev/xBlM2iyuPyY)  With https://github.com/Microsoft/vscode/commit/7c4c828dcbf46e243a4c523b57873394e7deac6a we do not use this module any more
17251|_fixed_ by not using node-weak anymore, https://github.com/Microsoft/vscode/commit/7c4c828dcbf46e243a4c523b57873394e7deac6a
17252|@KokoDoko hard to understand what you are doing, mind to attach a video? I am often using liCECap on Mac to produce animated gifs.
17253|We decided to take out node-weak for now. We can revisit this by implementing our own version of weak references with officially supported API from V8.
17254|"+1 :+1: I'm in the same situation of having to use something else solely for ""replace all"" in multiple files :("
17255|@daviwil yes we support escape sequences. This issue demonstrates that we do not support 2 escape sequences applyied to the same token at once. @eightvans the issue is that we do not respect ';' in anscii escape codes. The code is a bit tricky and I will add this feature if more users ask for it
17256|Debug console is only opened once a debug session is started, in this scenario you have not yet setup debugging. Again pressing F5 - is your `launch.json` configured properly - does the `program` attribute point to your actual program to be debugged  I can not reproduce the behavior you are explaining. A gif, or a repository for which I can repro this would be useful. Will reopen if more details are provided.
17257|It is impossible to access map objects directly like this. You have to use the `get` method If you start node, or google chrome dev console you can notice the following ![screen shot 2016-04-13 at 11 47 39](https://cloud.githubusercontent.com/assets/1926584/14489449/8f4b911a-016d-11e6-9cf2-3dc90517f1e8.png)  I understand that this is unhappy behavior for the 'add value to watch' action but closing this as expected behavior.
17258|@Tyriar That addresses almost all of my caveats. Thanks!
17259|@bpasero Is there any data on this? I assume most of the startup time is due to Electron backend, otherwise I would expect single files would open more quickly than complete folders.
17260|Code doesn't know about Flow by default. To teach it about flow you can: - install the flow language extension https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode - associate .js files with the flow language (you need to upgrade to the insider build for that https://code.visualstudio.com/download?insiders=true). Here is how: https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#file-to-language-association  Please let me know how this works for you.
17261|@isidorn fyi
17262|The fact that you do not get squiggles indicates that the tsserver has crashed and isn't running, assigning to @dbaeumer.
17263|@isidorn fyi
17264|I don't open all the files. Only have ~10 in the working directory. The project is a private project...
17265|@felixfbecker I'll try to do it over the next week or two, I've got a few things on this coming weekend - so it'll likely slip to next week or the next weekend.
17266|Moving to the typescript repository.
17267|This issue was moved to Microsoft/TypeScript#8058
17268|Ok let's try with product pain: https://productpains.com/post/visual-studio-code/replace-all-occurences-in-multiple-files-of-a-project
17269|Ok there are a couple of issues here which resulted in the unhappy experience 1. You have cordova extension installed which overrideds some of the debugger actions 2. You were trying to debug without fully setting up `program` in your `launch.json` 3. Somehow your app.js content on disk is newer and vscode was unable to save it (might be due to the cordove extension) 4. If there is an invalid eslint error I suggest to create a new concise issue which only address that problem.  Closing this as I see no action that can be done here.
17270|nice idea, let's keep it as a feature request and we'll see if more users request it
17271|I suspect this is intellisense inside script tags which is a known limitations.
17272|This is a known limitation of the new JavaScript infrastructure we are now using, sorry.  Closing as duplicate of #3465
17273|@jrieken @bgashler1 fyi
17274|Duplicate of #5193
17275|Works for me, see below.  Do you have the C# extension installed? Do you get syntax coloring? C# is no longer bundled by default. Also `stable` and `insiders` have separate installation folders, this means if you have it installed for stable then it isn't automatically installed for .  ![image](https://cloud.githubusercontent.com/assets/172399/14491103/2f61f398-0177-11e6-9ac8-61c223d6e508.png)
17276|> Just for the sake of clarity, the April release referred to here would be after 1.0 is released, correct?  Correct, the April release will be available early May and the 1.0 release really soon.
17277|Good and we want to make this simpler. We work on automatic acquistion of .d.ts files.
17278|@iHuahua @xianghongai  the development team does not speak Chinese. Can you please find someone that can translate your comment to English?
17279|@JeandeCampredon To be fair, since it's been assigned, it does look like this is being worked on now :)
17280|Hi **@Ikuyadeu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
17281|The command to focus the explorer now focus on the last focused thing (either explorer or working files). There are new commands to focus either working files or explorer.  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
17282|But this misbehavior does not apply only to typescript.  ![bildschirmfoto 2016-04-13 um 15 10 40](https://cloud.githubusercontent.com/assets/3391052/14494223/00979e6a-018a-11e6-8fef-69dc320e893c.png)  Same example works fine in my windows vm or on other Macs  Edit: while browsing through a large JS project I get some logs like the following: ![bildschirmfoto 2016-04-13 um 15 16 44](https://cloud.githubusercontent.com/assets/3391052/14494388/f7407b6a-018a-11e6-8efb-510c9de71387.png) Dont know if this is related to my problem :)
17283|Interestingly I can only reproduce this on Win, but not on Mac.  I am not recieveing any error from the backend, just the response is not coming back from nodeDebug. Due to this I believe this is a nodeDebug issue and forwarding to @weinand   Related issue which I also sometimes see on both platforms is nodeDebug crashing after expanding a large set, and stepping. This seldomly happens but it might be that too many variables request can crash nodeDebug. nodeDebug does not send any meaningful messsage on crash - so I do not have more details.  Here's a code snippet to repro:  ``` js const lm = new Map();  for (var i = 0; i < 1200; i++) { lm.set(i, i * i); } ```  ![nodedebugcrash](https://cloud.githubusercontent.com/assets/1926584/14494658/2efa4ef4-018c-11e6-813f-a5b67df6bfe1.gif)
17284|@kieferrm please verify once we have new builds. you should now be able to have 2 launch.json entries, one without passing in a folder as argument (will open empty) and one with a path to a folder.
17285|new structure is like this:  `ITelemetryService` implemented by: - `NullTelemetryService` used in tests et al - `TelemetryService` implements a full telemetry service - `ElectronTelemetryService` extends above and adds better machine/session identifiers - `RemoteTelemetryService` a proxy in workers/extension host
17286|great @egamma  thank you for this great ide :)
17287|fyi @aeschli
17288|"@martellaj this does not solve the following case:  ``` ## Markdown plus h2 with a custom ID ##   {#id-goes-here} ```  I would not expect anything to be colored as header after the ""##"".  Let me know if you plan to continue working on this."
17289|Just tried out latest master: This is indeed not fixed in VSCode simply by updating to electron 0.37.5.
17290|Ok, very strange.  I am not getting any of the intellisense (IS).  I had installedc# extension and restarted the app, thought there was supposed to be IS but thought maybe not for Linux, plus it was the insiders version. First time trying went right to insiders so I think I will take a step back to stable.  Thanks!
17291|@bpasero I don't think that debug is involved here. But if you think otherwise, please assign to @isidorn.  /cc @egamma
17292|+1 I can't use VSCode at all b/c of this.. My code uses a ton of obj spread, so I am forced to use a different editor :-1:
17293|"@digeff thanks for these great suggestions. Two comments: - source maps are a JavaScript specific concept and as such are an implementation detail of the node debug adapter. VS Code is not aware of their existence: there is not a single line of source map code in VS Code. This limits what we can do in the UI because debug extensions cannot extend the UI on their own (without involving VS Code). Showing anything in the UI would involve UI extensions, debug protocol changes. We will consider this, but not in the April sprint (because I'm no vacation). - You can turn on source map diagnostic by adding a `""trace"": ""sm""` to the launch config. This will send source map diagnostics information to the debug console.  /cc @egamma"
17294|@Wenzil this is native node.js behaviour. What version of node.js are you using?
17295|The only way to solve this is to always normalize all file paths in a way as they are actually on disk.
17296|Unsure if it should be like that at all? @bgashler1 Ideas? Answers?
17297|there is now a command for this. See https://github.com/Microsoft/vscode/issues/58
17298|depends on #239
17299|Actually, treating as duplicate. Once we have the event internally, we will expose on it on the api
17300|Closing as we believe the current story isn't too bad. User manually editor configuration options and extensions can persist settings etc globally/locally
