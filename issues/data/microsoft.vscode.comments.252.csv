25101|One thing to try out is to run `code --logExtensionHostCommunication` and then check the console for output. If there is spam between extension host and renderer, it should show up there.
25102|"@kumarharsh  Could you tell me what is your typescript version?  I've tested. If you do not turn `""javascript.validate.enable""` off, it will always warn `[js] Property assignment expected.` Just as the document writes: https://code.visualstudio.com/docs/languages/javascript#_jsx-and-react-native  > React Native examples often use the experimental Object Rest/Spread operator. This is not yet supported by VS Code. If you want to use it, it is recommended that you disable the built-in syntax checking (see below)."
25103|I can't see anything in my status bar? Only information about line number and branch name and so on...  Are there any way to debug this?
25104|@felixfbecker I will check the `writetableStream.write()` when I'm in the office. Thanks for bringing this up.
25105|A more significant problem when the type is inferred   ![image](https://cloud.githubusercontent.com/assets/874898/15921428/c06ae8da-2e64-11e6-93e3-30be443dd9f5.png)
25106|@sandy081 seeing the warnings now and I think I was able to fix the NPE when clicking on the error.  The editor does not show the warning btw so I think we already do some filtering of warnings that are from non file editors:  ![image](https://cloud.githubusercontent.com/assets/900690/15921467/fd03a874-2e21-11e6-8447-f431ce549143.png)  I filed https://github.com/Microsoft/vscode/issues/7457 for that.
25107|Looks like we have different files where settings are contributed from (in this case https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/modes/supports/suggestSupport.ts#L25) but I think that should not make a difference.
25108|Closing in favor of https://github.com/Microsoft/vscode/issues/7420
25109|Good find, thanks for the link :)
25110|@stevencl having a hard time on making the decision around these settings. Do we really want to introduce a new top level settings category for this called `previewTab`? Should this not be an editor concept that should be put on the `editor` configuration key.  First question is, do we talk about `preview` or `pin` in the UI? So far we have only exposed pin as actions (`Pin Editor` and `Unpin Editor`) but never `preview`. I think for this setting it makes sense to introduce the notion of `preview` to the user though.  If we end up talking about `preview` editors, the setting could be `editor.preview` to globally enable or disable this feature (defaults to be enabled). However, we still miss a setting for controlling this from quick open. We could introduce `search.preview` but this does not make it clear if this is about quick open or fulltext search too?
25111|I'm not sure about the message if you could help me come up with a better one that would be great, also this changes only check first line of commit, what about to check if other lines are under 72 character?  [stopwritingramblingcommitmessages](http://stopwritingramblingcommitmessages.com/):  > Keep your message to 50 characters or less > If you have more to say than that, put it in additional paragraphs wrapped to 72 characters.
25112|@bpasero could you link to the other feature request to make it easy to find? Not sure whether this issue has been fixed!
25113|Merging into https://github.com/Microsoft/vscode/issues/5554
25114|@joaomoreno please verify when you get a chance
25115|I think you can use the editor-config extension to configure this now (https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)
25116|https://github.com/Microsoft/vscode/issues/929
25117|Looks like the hover is wrapping the last word
25118|@anonymous432 What is the id of the python extension you are using?
25119|https://github.com/Microsoft/vscode/issues/6605 documents all the added or changed command identifiers to use with keybindings. Because the stacks model is such a large change to the UI of VS Code, we decided to revisit all commands that relate to editors or groups.
25120|This is fixed in master, coming in June :fireworks:
25121|@joaomoreno did you not look into such an issue recently?
25122|Yeah... it's sad, but I'll close as designed. I remember I ended up having to leave both for some strange and exoteric reason.
25123|The places where this doesn't work are implemented as native `<input>`s
25124|Does it also happen if you [download](https://code.visualstudio.com/Download) it directly from the website?
25125|Still happening on 1.2.0 for me. Happens every night - running on Windows 7 Enterprise SP1. I've got the same question as @garthk  > I've usually left files open. I do run with extensions. Are there any settings I can use to help gather more diagnostic information?
25126|Can't reproduce, but sounds like a lack of file system events.  If you create a new file in the directory open in Code, does it appear in the file view?
25127|@vinod-a-ext The whitespace is trimmed when saving the file. (Or all the time when enabling autosave)
25128|Wonder if this is permission related (e.g. started once as admin and now as normal user).
25129|Does it **always** happen? In other words, was an Insider update never successful for you?
25130|@northerncodemky I was referring to the 1.3.0 insiders release where our tabs/stacks work is included (http://code.visualstudio.com/Download#insiders). I would not expect any much change in 1.2.0.
25131|@josser That is because you have enabled `files.trimTrailingWhitespace` and you are doing an explicit save. The whitespace on line 4 gets removed when saving.
25132|fyi @isidorn
25133|> The global vs workspace configuration change is tricky because an extension might only write to the global config but the user might have workspace config that actually overwrites this setting.  I knew that but the `task.json` and `launch.json` is new to my. My initial reaction is to not allow editing those via the API.
25134|@cfjedimaster Can you please provide additional details to help us reproduce the problem? e.g. Did you open a folder, does the crash occur often, does the crash occur only when opening a certain folder, when editing a certain file, do you have installed extensions that could cause this crash.
25135|I like
25136|Stretch for June...
25137|@alexandrudima No, files.trimTrailingWhitespace controls removing spaces at the end of the file but not in the middle of the file.  However I've tried to set  files.trimTrailingWhitespace and editor.trimAutoWhitespace to false with no luck :(  It looks like we can't control this behavior at all.
25138|@TurkeyMan you'd be interested in the discussions at https://github.com/Microsoft/vscode/issues/6484 and https://github.com/Microsoft/vscode/issues/6495
25139|@androllen Can you please help us understand better the issue: what language are you in, what are you typing (a small snippet), and what would you expect to get?
25140|It's an [optional dependency](https://github.com/Microsoft/vscode/blob/master/package.json#L107), npm will not fail, but continue successfully.
25141|Code Insiders will create a `code-insiders` shortcut. Stable Code will create a `code`.
25142|I think the best possible solution here is to 'leave cursor where it is'  during whitespace trimming.
25143|There is a 'order' property on the configuration settings. Editor settings have order 5. So to appear just after the editor settings use 5.1. @jrieken FYI
25144|Duplicate of #7327. We will release a fix asap.
25145|@bpasero Aah ok - didn't clock the timestamp on your comment. I'll switch at some point today to see if this improves things. And get some new features to boot :)
25146|Maybe it's possible to allow user to choose with three options, like Trim trailing whitespace on save:  - no - all except line with cursor - all
25147|I am sorry you are experiencing this. To help us reproduce, can you please give us more details. Is there a common pattern between these freezes (I see that they occur on Windows 10, Windows 7, Ubuntu and Mac), so I'm thinking they are not OS specific (if they have the same root cause).  What sort of languages are you working on? I see TypeScript and JavaScript mentioned. Is that true for everybody? We have had quite a few issues with the TS/JS grammars (sometimes they recurse to death). Is it possible that this happens when opening a certain file or a file containing a certain pattern that would cause the grammars to go crazy?  We would appreciate any other details to repro this.
25148|@frogcjn yes, you'll need to turn off `javascript.validate.enable` flag, only then will eslint be able to properly lint your files.
25149|We don't support assigning arguments to commands when defining a keybinding, today the only option is to write an extension, but I like the idea as a general mechanism.
25150|@yortus @Seikho very good insights.   I am not using symlinks. I use subst to create a new drive letter that points into my C-Drive. E.g. P:\ => 'C:/Users/dirkb/Projects. I should have spotted that in the error message as well.  Regarding setting the cwd as pointed out in comment https://github.com/Microsoft/vscode/issues/6719#issuecomment-224800465: VS Code by default sets the cwd to the workspace folder. However we set the cwd with a lower case drive letter.
25151|Moved to Microsoft/vscode-go#358
25152|"It should be noted that there are now two ""special tasks"" marked with: isBuildCommand?:boolean; isTestCommand?: boolean; that get linked to the ""ctrl+shift+b"" and ""ctrl+shift+t"" shortcuts.  If it's possible to add arbitrary shortcuts to named tasks, I wonder if they are still necessary."
25153|On top of that there seems to be issue with drive letter in node 6.x: See https://github.com/nodejs/node/issues/6624.  @yortus @Seikho any objection to close this issue. IMO there is little VS Code can do here. The fix should be on TS side to deal correctly with drive letter casing. We internally consistently make it lower case when normalizing paths.
25154|When I installed code-insiders, it also seemed to override my exisiting code command to link to Code Insiders.  On Thu, 9 Jun 2016 at 08:51 João Moreno notifications@github.com wrote:  > Code Insiders will create a code-insiders shortcut. Stable Code will > create a code. >  > — > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7403#issuecomment-224824117, > or mute the thread > https://github.com/notifications/unsubscribe/AA4QCRVdqoVlxVLh1q-IWW2at_7YTbwNks5qJ8YSgaJpZM4IwyuE > .
25155|Dups: #6550
25156|@bpasero looking good so far!!
25157|@dbaeumer agreed - will follow up in [Microsoft/TypeScript#8837](https://github.com/Microsoft/TypeScript/issues/8837).
25158|I was just writing a post that came to the same conclusion. Thanks @dbaeumer
25159|@kumarharsh, so the VSCode Salsa currently still not support Object Spread/Rest? Right?
25160|OK, I ran `code --logExtensionHostCommunication` but virtually nothing is being logged even though the CPU is at 100%. Each time I click somewhere in the editor, there is a log entry, so I know it is logging stuff. But if I just let it sit there, no new log messages are generated at all, even though the CPU fan is running at full blast due to the 100% CPU.
25161|"I can confirm the same issue here. The breakpoint is hit and the application pauses, but the call stack view is empty with an error message: ""No call stack available (Cannot read property 'indexOf' of undefined).""  I'm using node 6.2.1 and vscode 1.2.0"
25162|Dups #6110
25163|Closing in favour of Microsoft/TypeScript#8837
25164|@tallakh @tmkn do you have a (ideally small) reproducible case that I can investigate?
25165|We can now send the mode kind in an open. Need to see if this fixes it.
25166|@jrieken this is with the JS project status bar item.
25167|Awesome, looks like you're already on it! I'm confident it'll be promoted from AUR in no time if there is a system in place for coordinating with the package maintainers.
25168|"@magnasteyr regarding the NotePad++ case: assume VS Code was closed. What event number was generated 0, 1, 2 (e.g the number before the |)"
25169|That is odd. Looking at the code, it is not supposed to do that... If so, what did it overwrite it with?
25170|@jrieken: I could still think about use cases where I want work based completion and still want different accept characters per scope. Any suggestions how to best realize that?
25171|@epaga Any change you can put a breakpoint in that `channel.onread` method and look a bit into the content of the buffers in there?
25172|This does not reproduce easily so it needs a lot more information about your setup.  ![editors](https://cloud.githubusercontent.com/assets/900690/15924761/145f9624-2e34-11e6-8888-3b8c47bc45ef.gif)  Maybe you also record a video :)?
25173|@joaomoreno you talk about auto save here but settings files are being created independent of that setting. Should we turn this around then and argue that any configuration JSON file gets: - saved to disk automatically if auto save is enabled - shows up as dirty (and not on disk) if auto save is disabled  ?
25174|It is even easily possible to add console.log statements to the child_process. I have recorded a video how to do so:  ![editors](https://cloud.githubusercontent.com/assets/900690/15924938/2675ea24-2e35-11e6-902f-2437194e847f.gif)
25175|@TurkeyMan well, I was going to go and do more but the existing maintainer made some good points https://github.com/Microsoft/vscode/issues/6495#issuecomment-220158936  The expertise and time arguments are very good, I haven't used Arch Linux and I have my toes in a lot of other stuff within vscode. Learning how to and then setting up an official repository like this takes time away from other stuff.  One thing I was considering we could do was 'blessing' community led efforts, like how Chrome does (or did do, I think the package wiki page broke when they change something). So setting up a page on the website which featured links to the various repos.
25176|I guess that _turning it around_ means, apart from making this case consistent with the others I mentioned, changing the behaviour when auto save is disabled. I am fine with that.
25177|Yeah, that is what I meant.
25178|Some time may need manual reload, like modify .eslintrc
25179|Also in this case, if needed i can attach the source.  ![cattura2](https://cloud.githubusercontent.com/assets/9047951/15926152/ac07dc4c-2e3a-11e6-8569-e1146f817177.PNG)
25180|`Format Code` often stops working here, on JavaScript.  Version info attached (would be nice if that dialog had text that could be clipboarded).  Doesn't work at all on the Insiders build (at least yesterday): says the extension is out of date, so I no longer use Insiders.  ![image](https://cloud.githubusercontent.com/assets/512816/15926263/f6ace506-2e32-11e6-8a66-5cd3a522f735.png)
25181|Yes, I think that has been clarified by the vscode dev team time and again. Salsa does not have es7 features, but will get it later (most probably in this year). Anyways, disabling salsa does not take away too much from the experience - the intellisense still works okay (without some features), and even gives great cross-file suggestions like say I imported constants from a 'utils/constants' file, then intellisense shows those constants in suggestions, etc.
25182|"I just got a chance to review the May update with the above stated ""TextMate grammar injections"".  Out of the box at least, in my ts files HTML syntax highlight/completion is not available inside of backticks.  I'm wanting to use this for Angular2 component templates.  Can someone help me understand the configuration necessary to use ""TextMate grammar injections"" make this happen?"
25183|I'm experiencing the same issue. The debugger stops, but it doesn't look like it's connected to any breakpoint and the call stack view is empty. I have tried different node versions but the problem persists. Using Visual Studio Code 1.2.0  I have also verified that the same breakpoints works in other IDE's like JetBrains WebStorm for instance.
25184|@jornki it would be great if you could provide a reproducible case that I can investigate.
25185|@roblourens Initially we had a 'cwd' attribute as part of the protocol for 'launch' and 'attach'. But later we decided to remove all 'standard' attributes from the the 'launch' and 'attach' requests because they are highly debugger specific. So every debug adapter can introduce a 'cwd' in their package.json.  I suggest that you introduce a mandatory attribute 'cwd' and set its default value to ${workspaceRoot}. Add this to your default launch config as well.
25186|Duplicating with 7457 as at the end they are similar - ignoring files  duplicates #7457
25187|"I agree, we should make this be about the editor. So would something like the following work?  ""editor.preview.enableInExplorer"": true, ""editor.preview.enableInQuickOpen"": true  And I also agree that we should introduce the notion of preview. It's becoming a standard (Sublime and VS support the same experience for example) so I think will be well understood."
25188|This would be very useful
25189|Thanks, looks great! 🍻   I've added a few more changes on top: - Rephrased it to `It is recommended to keep the commit's first line under 50 characters. Feel free to use more lines for extra information.` - Added a `git.enableLongCommitWarning` configuration setting for those who don't want to be disturbed - Changed the `String` split for a `RegExp`.
25190|Thanks! 🎆
25191|Hi **@Huachao**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Huachao Mao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
25192|Same issue in the OS X version
25193|@stevencl actually looking into the future we will have a set of new configuration settings that are all coming from the fact that we now have stacks and tabs. More things to consider: - a setting to enable or disable tabs - a setting where to open a new editor (to the left or right of the active one or maybe always at the end of the stack or always at the beginning? see https://github.com/Microsoft/vscode/issues/6787)  I can also see that in the future we will have more users asking for configuration around this so maybe we come up with a category that solves this for all these settings under one parent key?
25194|After taking to @dbaeumer I made this issue specific to temporary files.. I do not think the problems view should be filtering them and neither the editor. Better solution for this could be - Let the markers owner (linters) remove them from the files when they are closed  @aeschli FYI
25195|Reopening this as #7457 is a different
25196|@sandy081 sometimes I seem to have markers for files that do not exist anymore, maybe as a workaround could the problems view offer an action to delete markers? that is currently the only way of getting rid of markers besides reloading the window.
25197|@jrieken  Thank you it was an extension that was causing it to do that even when set to false.  So that solves the comment, I thought about the import and could we make it that, for typescript at least, it autocomplete with whatever you have inside your folder. So for example if you have a class CustomerComponent located at <folder root>/widget/customer.component.ts starting to type `import` would bring up a list of typescript construct that you could choose and it would autocomplete the path for you. Or something similar.
25198|There is a newer insiders build but we have issues signing it for Mac so the nightly of today is not released for Mac yet. Stay tuned 👍
25199|Excellent. (And I just realized the number in the About dialog is the commit...) Is there a particular time that the nightly is put out? Looking at the list of commits, the nightly seems randomly in the list.  Thanks!
25200|Currently it runs once per day automated 7 AM CET. If it fails there is no nightly (depending on test failures or signing issues).
