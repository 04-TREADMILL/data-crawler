22201|For the May release I list all unformatted tags in the settings default. I also change it to only contain inline tags. template is not part of that list and will be formatted by default.
22202|This issue was moved to mmcgrana/textmate-clojure#4
22203|We got our theme from http://colorsublime.com/?q=solarized. The one on http://tmtheme-editor.herokuapp.com/#!/editor/theme/Solarized%20(dark) is very different.
22204|I sugest to have a look on how to make an extension for a new theme at https://code.visualstudio.com/docs/tools/yocode and offer the other variant of Solarized Dark as an extension...
22205|Closing. Dups #6580
22206|Thanks @Ikuyadeu !
22207|This issue was moved to Microsoft/TypeScript#8750
22208|@arb this is actually as designed. You can start with and empty literal and then fill it out using IntelliSense. IMO showing more information in the signature hover would only makes things more complicated. Think about a literal with many properties.   I will close this since showing a literal type here will not improve things.
22209|Moving to TS team since it still shows up on 1.1.1 which uses 1.8.9 (tsserver)
22210|This issue was moved to Microsoft/TypeScript#8751
22211|closing we have now - resizable peek windows for (peek def and find ref) - the `stablePeek` setting to disable `ESC` and double click close-behaviour inside peek editors
22212|We should make this a more happy experience. I addition to let the user control this we should add keyboard input to the message as well (e.g mnemonics to select an action)
22213|Lets investigate for May. But no promise :-)
22214|@jrieken Very happy to see those features added.  What version of vscode has them?
22215|This issue was moved to Microsoft/TypeScript#8752
22216|"This is actually a nice idea to solve this.  @alexandrudima can I have arguments to a command in the key bindings file. I would like to name the action workbench.actions.task and then have an argument ""task1"""
22217|The May update will have this - expect an insider update the next days maybe tonight and the final update in ~10days
22218|This issue was moved to OmniSharp/omnisharp-roslyn#559
22219|@vilic now I see.   ``` js var __foo; _<code assist> ```  works but  ``` js __foo; _<code assist> ```  doesn't.  @jrieken: The proposal is a textual proposal an proposes ___foo; (three underlines). Any hint what to tweak here?
22220|![capture](https://cloud.githubusercontent.com/assets/1931590/15468925/4abd37da-20e7-11e6-9056-73d7f6ea0b9c.png)
22221|@aeschli My settings file definitely growing each day ...
22222|Sure, I can imagine this is fairly low priority as far as bugs are concerned - but it sure would be a nice feature to use Keyboard shortcuts to perform various tasks in Bash on Ubuntu on Windows :-)
22223|"Doesn't need to be anything fancy for me thanks :)  ``` task.json {     ""version"": ""0.1.0"",     ""command"": ""go"",     ""isShellCommand"": true,     ""killRunningTask"": true,     ""args"": [""run"", ""main.go"", ""index.go"", ""-name=test""],     ""showOutput"": ""always"",     ""program"": ""${workspaceRoot}"" }  ```  I think most people would like it to be true by default? So that they only need to press shift + command + B once to start a new build and kill the current one."
22224|"This should be fine now. The rule is that any file (including untitled ones) that gets ""Saved As"" will be replaced across all editor stacks if found."
22225|@magnasteyr I tried to reproduce this on a WIndows 7 machine with bitlocker without success (although I have to say I used a VM and not a bare bone machine). I have one other idea to better understand this. Could you tweak the watch task in the gulpfile.js to print the files that got detected as changed. You can simply use gulp-debug and npm module to do so. The Event trace doesn't show any WriteFile event so it is still unclear to me what is triggering the gulp watch and the tsserver reparse. If we know that changed files may be it gives an indication about the source.
22226|waiting, fed up with webtorm nasty terminal.
22227|@dbaeumer This is usually an issue with the word definition - textual completion goes with the word def of the current mode and uses that to determine what portion of a word to overwrite/replace with a suggestion.
22228|My current thinking about this: - We add ways to define `title` and `description` via the [`TextEditorOptions`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L544) such that an extension can set/update the ui-representation via the API - this isn't necessarily limited to virtual documents. - We add ways to provide `TextEditorOptions` when opening an editor via [`showTextDocument`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2998) - For the _future_ we still have the possibility to add a `TextEditorOptionsProvider`-api which would work similar to how language features work.   IMO this is better then the model/UI marriage that happens by adding this functionality to the content provider.
22229|@jrieken I actually not sure who is responsible. Starting with you :-)
22230|Two things I want to report on. 1. I've noticed that the package.json file, when formatted, does not respect the configuration settings in place. For example, I use tabs, not spaces. Formatting works, but does not take into account my settings. All other files in my project do. 2. I've also noticed when placing inline SVGs into my HTML that the file will not format nicely, and toggling the outlines for the SVG element does not work as expected. Everything works as expected IF you have manually spaced/tabbed your SVG elements. This is hard for me to explain, I'd be happy to record my screen.
22231|Note that Code uses [semver](http://semver.org/).  Each version of your extension can have a version restriction under the `engines` field of `package.json`.  In your example, what is under the `engines` field of `Acme v2.0.0`?
22232|"@jrieken: the regular expression is  ``` js /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\""\,\.\<\>\/\?\s]+)/g ```  which actually fully matches __foo according to https://regex101.com/r/eP0nI9/1 Any other idea?"
22233|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/81
22234|@oodboo With my changes you should be able to use the default again.. :-)
22235|This issue was moved to Microsoft/TypeScript-TmLanguage#170
22236|@aeschli thank you :)
22237|The proposal is actually in the list, but even when entering --, it is at the end of the suggestion list: ![image](https://cloud.githubusercontent.com/assets/6461412/15471734/d9aa6d7c-20f7-11e6-90cd-1a8ad3140729.png)  @joaomoreno @jrieken Joh or Joao?
22238|This issue was moved to Microsoft/TypeScript-TmLanguage#171
22239|no clue who made changes here... it still works in the light theme @aeschli does it ring a bell?
22240|So far we only support indent based folding. https://github.com/Microsoft/vscode/issues/3422 is about adding language aware folding.
22241|Attached you'll find the output of the gulp watch task and the gulpfile.js itself. If you need more detailed output from gulp, please feel free to adopt the gulpfile.js to your needs and I will execute it again. [gulp_watch.zip](https://github.com/Microsoft/vscode/files/277522/gulp_watch.zip)
22242|@aeschli Is the issue that the snippet isn't revealed when typing `--`? It looks to be selected which is the behaviour we have implemented - lexi sort and best match selection.
22243|It's not selected. You have to scroll down and look for it and select it yourself. Thats how it looks after Ctrl+Space: ![image](https://cloud.githubusercontent.com/assets/6461412/15472137/f34ead5e-20f9-11e6-822d-4e6c3ed1b00b.png)
22244|assigning to @joaomoreno who knows how to select
22245|Fixed in vscode-textmate 1.1.0 and adopted new vscode-textmate version in vscode
22246|Blocked by #313
22247|"catch22 - that's actually not a textual completion but the TypeScript Salsa feature that proposes all symbols on top of semantic suggestions - note differences on the icon. The `___foo` suggestion is delivered as part of the other suggestions.   <img width=""644"" alt=""screen shot 2016-05-23 at 15 33 50"" src=""https://cloud.githubusercontent.com/assets/1794099/15472525/dabf7050-20fb-11e6-8e5d-c8a359bf5b6d.png"">"
22248|VS Code as the [apis](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3439) for this and now it's up to the extension to this. Moving this item to omnisharp-vscode.
22249|This issue was moved to OmniSharp/omnisharp-vscode#366
22250|I see this issue has been closed... is there going to be any follow-up or explanation? Is this just how it works or am I doing something wrong?
22251|"I think this setting might make things unexpected:  ``` // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.     ""editor.detectIndentation"": true, ```  When `editor.detectIndentation` is `true` (the default), the tab settings will be guessed from the opened file (i.e. mostly spaces vs mostly tabs, etc.). Sometimes, (e.g. the opened file is empty), guessing is not possible  and the settings defined via `editor.tabSize` and `editor.insertSpaces` will be used."
22252|At some place the language id, it's human readable name as well as the file suffices need to be defined. Without it, you would not be able to get an editor in C# mode and the user would not be able to see your snippets. Right now this is the `vscode.csharp` extension. You point out that you don't want to force everyone into installing that extension. But then having that extension is also a good thing.  At some point we discussed here if we should keep the language definition with VS code. @egamma didn't like that idea, but I think it has some merits.   Our installer doesn't yet install extension dependencies. I think that's a reasonable request, please file a request.  @alexandrudima @joaomoreno FYI
22253|"@aeschli   Offending default keybindings:  ``` { ""key"": ""ctrl+shift+alt+["",      ""command"": ""editor.foldAll"",                                      ""when"": ""editorFocus"" }, { ""key"": ""ctrl+shift+alt+]"",      ""command"": ""editor.unfoldAll"",                                      ""when"": ""editorFocus"" }, ```  ctrl+alt+ combinations should be avoided on Windows, as ctrl+alt+ is sent our way by Chromium when AltGr+ is pressed. AltGr+ is often used on various keyboard layouts."
22254|@bpasero This might have been caused by the top level menus not updating accelerators until a restart.
22255|duplicate of #3995
22256|@arb sorry for not being clear. This is actually as designed. We have even considered doing more folding for inline type definition since showing the inline typing is not very helpful. The following screenshot shows this and is to my understanding more or less what you have asked for.  ![capture](https://cloud.githubusercontent.com/assets/1931590/15473327/be6b9f56-20ff-11e6-91d1-0b72dd946e16.png)  We think that starting with an empty literal and then getting code complete is a better solution to the problem  ![capture](https://cloud.githubusercontent.com/assets/1931590/15473396/0ad2ce1e-2100-11e6-82d5-0bf06481948c.png)  However I noticed that code assist in this example shows snippets before properties. I opened https://github.com/Microsoft/vscode/issues/6667 since this shouldn't be the case
22257|moving to June since this is a bit of work
22258|This issue was moved to Microsoft/TypeScript-TmLanguage#172
22259|Do you have an example of any language extension with this feature implemented?   I wanted to have it also in python and could have a go at implementing it if there a place where I can get working example.
22260|This is going to be an amazing release!
22261|I tested the fix togther with the https://github.com/LiuJi-Jim/vscode-vue extension. Unfortunately it seems HTML wins. Therefor I reverted the fix again. Users can always associate the vue extension the html in the file association setting.
22262|Need more information. Closing...
22263|Closing. Please add more information.
22264|@jrieken @aeschli the snippets are declared in the package.json pointing to an external file. Who decides to sort them before the properties returned from the intellisense. I always thought language suggestions come first.
22265|Hi @weinand.  I've made sure that step gets run so the proper version of vscode gets installed.  ``` > node ./node_modules/vscode/bin/install Detected VS Code engine version: ^0.10.7 Found minimal version that qualifies engine range: 0.10.8 Fetching vscode.d.ts from:     https://raw.githubusercontent.com/Microsoft/vscode/0.10.8/src/vs/vscode.d.ts vscode.d.ts successfully installed! ```  I can provide a small-ish repro that will run successfully within VS Code but a minimal gulpfile.js will result in the missing module error (it's about an 11KB zip file).
22266|Thanks for the info. I looked at it and the logging is for the changed JS files which I think come from the TS builder. Would be good to know which TS files change. Will look what needs to change in the gulp file to print this.
22267|yeah, actually OmniSharp for VSCode does implement some code actions already. The implementation of that is here: https://github.com/OmniSharp/omnisharp-vscode/blob/master/src/features/codeActionProvider.ts  Generally, this is how it works - from your extension [register commands](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2903) that implement a code actions, like add using statement - also register a [code action provider](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3439) for the language(s) you target. It's role is to identify a set of commands (see above) for a given range in a document.  With that the editor will know do the following:  - on an error/warning or when called explicitly it will check with all code action provider - from their commands it will create context menu - on selection it will invoke the corresponding command with the given arguments.
22268|No idea how this got caused. But I also filed this issue as #6247
22269|Snippets have been sorted like regular suggestion ever since - generally we sort all suggestion alphabetically and reveal the best match. The real issue here is that none of the snippets make sense there. Which would make it a duplicate of #1304. Otherwise, it looks like a dupe of #2343 - and for consideration there is folks that want snippet more than everything else: #5121
22270|@bgashler1 was this a UX change?
22271|"Thanks to http://stackoverflow.com/a/15666143 that shows nicely how to avoid having the browser scale up the canvas (render the canvas at the final screen pixel resolution), here is a before & after with `""window.zoomLevel"": 5`  ## BEFORE  ![image](https://cloud.githubusercontent.com/assets/5047891/15475687/91cfaa9e-210b-11e6-83eb-e8f7df28fd89.png)  ## AFTER  ![image](https://cloud.githubusercontent.com/assets/5047891/15475719/bad8b39a-210b-11e6-87da-ecf40d876da5.png)"
22272|No, most likely I introduced this regression when I cleaned up some css code
22273|Given #6561 came in earlier, let's track this request there
22274|Blocked by #313
22275|"Actually, this can be configured. @BairDev Just add the following to your keybindings configuration and `.` isn't an accept character anymore  ``` json {     ""key"": ""."",     ""command"": """",     ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'typescript' && suggestionSupportsAcceptOnKey"" } ```"
22276|@fernandoreyes1 Since VSCode is built on top of Chromium, do you experience these issues when using the Chrome browser, for example?  On our side, we simply listen to mouse and touch gestures given by Chromium/Electron
22277|@alexandrudima I would be really cool if we have a _unbind this_-shortcut/command on the LHS keybindings editor such that it generated these kind of configs
22278|fyi @jrieken we could introduce a new command `goToDefinition` and have `goToDeclaration` forward to it for compatibility reasons.
22279|I didn't know it was made on Chromium, but chrome has the same effect and doesn't react to clicks either, so it is an inherithed bug.  Le lundi 23 mai 2016, Alexandru Dima notifications@github.com a écrit :  > @fernandoreyes1 https://github.com/fernandoreyes1 Since VSCode is built > on top of Chromium, do you experience these issues when using the Chrome > browser, for example? >  > On our side, we simply listen to mouse and touch gestures given by > Chromium/Electron >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/6548#issuecomment-221016983
22280|@neilsustc I have opened https://github.com/Microsoft/vscode/issues/6677 to better track this slowness.
22281|@fernandoreyes1 Maybe you can report this to Chromium (https://bugs.chromium.org/p/chromium/issues/list) and if they address it, we will probably soon update and benefit from the fix.
22282|Closing - please disregard.  This was an issue with how my VM was setup.
22283|The extension is awesome, but should this be part of the core installation?   Seems like a feature that should be baked in by default? Notepad++ and sublime both have it.  Or are there plans to bundle some plugins by default in VSCode?
22284|@jrieken Here is the request: #612
22285|I totally agree. Tho the problem is that changing the command id will break everyone that has a configuration referring to it. That's why I would leave it untouched and bite the bullet...
22286|@leegee Can you please share the file or a snippet demonstrating the problem in textual form.   What is the language indicated at the bottom right?  If it is 'JavaScript', then the text, regardless of its contents will be tokenized with the JavaScript grammar.
22287|That is correct, the editor highlights only the first 1000 hits. Dup of #1110
22288|@stevencl @bgashler1 Do you have suggestion for a stranger color? Iff so I could make the change this month.
22289|This should work with latest, please reopen if it does not.
22290|I think you might have some dead/stale vscode processes running that lock those `.sock` files. I am unsure if we attempt to always connect to the same `.sock` file or if their names are randomly generated, @joaomoreno definitely has the insights here (about the shared process, which looks like is the owner of these `.sock` files)
22291|@xenoputtss @rebornix What are your settings (do you use a large value for `wrappingColumn`?) or have you installed other JSON-related extensions? Does this reproduce when running `code --disable-extensions`?
22292|I created this issue originally when making some docker images with VSCode on it. My solution was simply to create a `vscode` user that has sudo access. I'm happy with that solution, so I'm going to close this issue.  https://github.com/ctaggart/dotnet-vscode/blob/master/root/install-user.sh
22293|@keithn What is the filename? What language appears in the bottom right?
22294|In the meantime we have also fixed the bug on our side (#6281) and it went out with VSCode 1.1.1.
22295|Thanks to PR #5423 by @outcoldman it will be in the core with the May release.
22296|@warpdesign Does this issue reproduce when running `code --disable-extensions` (i.e. could it be caused by an extension that hijacks `ctrl+x`?). Is it possible that you have installed some other software on your machine that might interact with/watch the clipboard?
22297|If we provide a normal file URI to this API (not a virtual document URI) will it work as expected?
22298|"@mschuckmann From what you are describing, it seems that ""Detect Indentation from Content"" does the right thing (i.e. guesses spaces@4 when the file contains mostly spaces@4), but it also appears that ""Detect Indentation from Content"" is not executing or is being overwritten.  The user settings can be overwritten by workspace settings (does the folder you open define `.vscode` settings?) and can be overwritten by extensions (do you perhaps have installed an extension that might do something with the indentation settings -- easiest is to check if the issue reproduces after closing all VSCode instances and running `vscode --disable-extensions`)."
22299|@aeschli It appears the current implementation of https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/themes/electron-browser/themeService.ts#L317 does not customize the color of the `.line-numbers`. Is this an oversight or is it that TM themes don't contain such a color?
22300|Going to reopen, I'd eventually like to get it working as expected for root user, sudo and regular users.
