9601|:+1:
9602|@weinand if the debug adapter is not returning exceptionBreakpointFilters as part of capabilites I am still using the old strategy so we give some time for the other adapter writers to adopt this. I propose we get rid of this logic next milestone
9603|The error we are getting is from atom/electron.  My guess is maybe the crash server at https://ticinocrashreporter.azurewebsites.net/crash is not available?  Is it possible to disable verbosity for the crash reporter so that we do not have to see this error every time we launch vs code?
9604|@isidorn that's a good plan.  CC: @roblourens @felixfbecker @lukehoban @gregg-miskelly @daviwil @lukaszunity This feature might be of interest to you.
9605|@weinand This is great. Could implement different filters for warning, notice and exception. So this feature is planned for February?
9606|I seem to have solved it, however, I'm not sure why it works. I found this issue to be helpful: atom/electron#4370  I set the `ELECTRON_RUN_AS_NODE` environment variable to `1`, which then caused me to get the following error:  > (function (exports, require, module, __filename, __dirname, process, global) { _some text from the file I was opening here_ >                                                                                     ^^^^^^^ >  > SyntaxError: Unexpected identifier >     at exports.runInThisContext (vm.js:53:16) >     at Module._compile (module.js:413:25) >     at Object.Module._extensions..js (module.js:452:10) >     at Module.load (module.js:355:32) >     at Function.Module._load (module.js:310:12) >     at Function.Module.runMain (module.js:475:10) >     at startup (node.js:130:18) >     at node.js:982:3 > Could not execute editor  After removing the environment variable, it seems to work as expected.
9607|This also happens in typescript with shift+tab.   Restarting code fixes the issue temporarily.
9608|Dup of #2829. We are preparing a recovery build.
9609|@Nimzozo: This will be in the actual product.
9610|"The default keybindings include these:  ``` json { ""key"": ""ctrl+alt+-"", ""command"": ""workbench.action.navigateBack"" }, { ""key"": ""ctrl+shift+-"", ""command"": ""workbench.action.navigateForward"" } ```  Do these differ from your request?"
9611|@bpasero You would, however, lose the ability to decide whether the preview is shown on the left or the right of the source.  Double clicking in the preview to make the source cursor jump to the corresponding location would probably be helpful.
9612|Re Microsoft/vscode#2863, package maintainers will probably want to change over to using locally generated sourcemaps instead of downloading them at build time.
9613|@felixfbecker yes, will be available end of next week. But you can start to return this info now because old versions of VS Code will ignore it.
9614|Pull does the same as executing `git pull` without any special arguments.
9615|Ah, I must've missed that. Disregard this.
9616|Side-note, I need this feature to prettify the tips shown in my new [QuickTips](https://github.com/bbenoist/vscode-quicktips) extension (new tips are welcome).
9617|:+1:
9618|Investigating. @MichaelAllenMiller have you tried to disable crash reporting? maybe this will help you until we figure out the reason for this?  Instructions on how to here: https://code.visualstudio.com/Docs/supporting/faq#_how-to-disable-crash-reporting
9619|you can do it with a lint tool such as eslint
9620|"if you run code from the command line you should not hit this, `C:\Program Files (x86)\Visual Studio Code\bin` should be added to your path by the installer, if it's not the case please let us know.   You can see in the bin that the command line variable is set to disable this:   ``` @echo off setlocal set VSCODE_DEV= set ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""%~dp0..\\Code.exe"" ""%~dp0code.js"" %* endlocal ```  if you still want run the exe directly from the command line, make sure to  `set ATOM_SHELL_INTERNAL_RUN_AS_NODE=1`"
9621|@meritozh That's a suggestion. I use JSLint.
9622|Related issue: https://github.com/Microsoft/vscode/issues/1614 Related user voice feature request: http://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/8915236-visual-code-w-terminal-integrated-and-super-admin
9623|I get no printout at all
9624|@Nimzozo for those 5 it is likely because https://github.com/Microsoft/TypeScript-TmLanguage doesn't support highlighting them yet.
9625|+1 would love to have this feature too - for the same reasons elad mentioned. Actually not having this feature makes me using Sublime again.
9626|It appears that the flattening of modules also breaks the package tasks currently...  It copies the top-level dependencies directly into the package directory's node_modules, but doesn't copy any dependencies (since in npm@2, such dependencies are already included in each package's directory).  This means that many dependent modules are missing from the package directory :(
9627|Hi **@jamesqo**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
9628|By the way, concerning the [PR](https://github.com/Microsoft/vscode/issues/1704) I made earlier, it doesn't seem like you guys have gotten a chance to supplant it with a unified shell script yet. Should I go ahead and make one for you?
9629|This also seems to be happening with some C# files as well. I don't have a screenshot right now, but I'll post one if I come across it again.
9630|"According to our proxy admin ""**microsoft.com**"" is completely unblocked."
9631|@thoros1179   The download URL Code tries to `GET` is, in the example case of the Go extension:  ``` https://lukehoban.gallery.vsassets.io/_apis/public/gallery/publisher/lukehoban/extension/Go/0.6.27/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage?install=true ```  Can you get your proxy admin to look at whether that URL is blocked?
9632|This is strange. Your setup looks OK to me. Just as to why Code thinks your folder is not a git repository is beyond my knowledge.  Let's try something else. Can you try creating a brand new repo and opening that in Code?  ``` cd ~/Desktop mkdir repo cd repo git init code . ```  And check whether Code thinks the `repo` folder is a git repo or not.
9633|@alexandrudima. I think this PR https://github.com/Microsoft/vscode/pull/1586 closes this issue.
9634|@jpoon This issue is about additional cursor styles.
9635|Hi **@tht13**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
9636|Hi **@stkb**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
9637|@isidorn as discussed I made the configure task runner action public. You can reach it via the ITaskSystem#configureAction(). Simply embed it into the message you are showing.
9638|I can confirm that @Nimzozo list does not get colored in Dark+ theme.
9639|I feel that my extension is actually a pretty solid solution and as it is probably not planned to move this feature into core, maybe this issue should be closed?
9640|What is interesting is that there is logic in place to add icon classes: [https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/views/explorerViewer.ts](url)  ``` typescript private iconClass(element: FileStat): string {         if (element.isDirectory) {             return 'folder-icon';         }          return 'text-file-icon'; } ```  As seen above, vscode currently adds a folder-icon css class to all folders but a style is not defined for it. So if you want to see folder icon in explorer, all you have to do is add the below styles to **<vs install path>/resources/app/out/vs/workbench/workbench.main.css**  ``` css .monaco-tree-row .content .sub-content .explorer-item.folder-icon {     padding-left: 22px;     background: url(./parts/files/browser/media/Folder.png) 1px 4px no-repeat; } .monaco-tree-row.expanded .content .sub-content .explorer-item.folder-icon {     padding-left: 22px;     background: url(./parts/files/browser/media/Folder_opened.png) 1px 4px no-repeat; } .explorer-item.text-file-icon {      padding-left: 22px;     background: url(./parts/files/browser/media/Textfile.png) 1px 4px no-repeat;  } ```  and copy the below icon images to **<vs install path>/resources/app/out/vs/workbench/parts/files/browser/media** ![folder closed](http://i.imgur.com/YS9Sm4x.png) Folder.png ![folder opened](http://i.imgur.com/Oo39t1x.png) Folder_opened.png ![textfile](http://i.imgur.com/ZhP4uUI.png) Textfile.png  Here is a preview of it in action: ![Preview](http://i.imgur.com/TtJdqsM.png)  In it's simplest form, implementing the file icon feature would require modifying the above iconClass method to return 'text-file-' + getFileExtension(element.name) and adding corresponding icon svg/font to each css classes (i.e., text-file-js, text-file-md, etc.)
9641|Nice find @snpai. It would be very easy if they could add another class like `text-file text-file-md`. So extensions could use it to just add another CSS with all the icons.
9642|"In my case Intellisense (even with a `jsconfig.json`) only works for modules that have been `require`d but not for modules that have been imported using ES6 `import`:  ![intellisense-es6](https://cloud.githubusercontent.com/assets/435073/13144149/1e3db11e-d649-11e5-923e-377606ce7017.gif)  You can find my sample project here: https://github.com/nilshartmann/vsctest My environment: - Visual Studio Code Version 0.10.8 with Salsa preview enabled - No extensions - MacOS - TypeScript installed locally (1.9.0-dev.20160218) - jsconfig.json (tried several more variants all without success):  ``` {         ""compilerOptions"": {         ""target"": ""ES6""     },     ""exclude"": [         ""node_modules""     ] } ```  Just noticed: Importing a module from my own project that uses ES6 `export` seems to work.  I'm not sure if this is the same problem or to better open a new Issue?"
9643|#3070 contains some of the same changes but not all
9644|I just discovered that IntelliSense for typings works only when the `module` is set to `system`. What is this `system` module and is this the right behaviour?
9645|+1
9646|Works for me when I have Salsa enabled (which is the new infrastructure that will be the default in the next update). pls see https://code.visualstudio.com/Updates#_javascript-salsa-preview.
9647|Perhaps installing the [Active File In StatusBar](https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar) extension would answer the problem.
9648|Is this still an issue I see your package in the gallery?
9649|:+1:
9650|Looks good thanks.
9651|// @alexandrudima
9652|The new JS infrastructure Salsa will no longer report unused variables and defers this to a linter like JSLint, ESLint. For both ESLint and JSHint there are extensions for Code available.
9653|@egamma you are correct...Salsa was not enabled on my instance.  I sure hope that getting salsa enabled becomes something users do not have to worry about.
9654|Yes, I started this morning trying to use my mac to publish, but after a couple of hours I switched to PC and published from that machine.  By the way, I tried your example, Erich, also. The one with CSS preview. Had the same problem with that one.
9655|I can show it in the hover message on the exception. Notice that we have removed the exception box for this milestone.  Creating a vritual scope 'Exception' might make it more clear to the user what is going on  ![screen shot 2016-02-18 at 16 16 49](https://cloud.githubusercontent.com/assets/1926584/13147878/08d657f6-d65b-11e5-9788-0cad5e2788d7.png)
9656|"This can be enabled using the option:  ``` json ""window.reopenFolders"": ""all"", ```"
9657|Closing. This is the typescript language worker code I removed yesterday. Not shipping anymore :-)
9658|As far as I understood you this is for the no-workspace view. We have the open folder option in the top menu and in my opinion user is aware that he is a non workspace vscode (everything is purple). So the issue here is that the open folder is not discoverable enough in the no workspace view in your opinion?  We have the same situtation in the git viewlet.  Forwarding to @stevencl so he can read this feedback
9659|Re 1) Scripting is currently not enabled see also: #2912. Re 2) Currently not, tagged as a feature request.
9660|Moving to TypeScript
9661|This issue was moved to Microsoft/TypeScript#7134
9662|Moving to typescript
9663|This issue was moved to Microsoft/TypeScript#7135
9664|Ok, that's clearer.
9665|Also the type paramater of the `type` argument is shown as `any` in the parameter hints  ![image](https://cloud.githubusercontent.com/assets/172399/13148686/a2192f3a-d65e-11e5-9bc6-4e972b63acb8.png)
9666|This issue was moved to Microsoft/TypeScript#7136
9667|Thanks for your kind words.  > a proper settings panel,  This is a feature request we already have, thanks.  > a go-to-function shortcut  did you try ctrl-shift-0? You can rebind this key to if desired.  > so it shouldn't be too much of a hassle to find the right package  Not sure I understand, there is no common code between Atom and VS Code except the underlying Electron framework.
9668|+1
9669|I removed that code yesterday from VSCode.
9670|@jrieken FYI. If this reappears in the standalone editor since it is the JS language service using typescript.
9671|@isidorn  which theme are you using. The light one ? And theming is @aeschli :-)
9672|The fix should happen in the promise chain from the suggest contribution through the mode to the extension.
9673|This is as designed. If you run `git status` in the command line, you'll find the same behaviour.
9674|Here is what I did for the Februar milestone: the monolithic tasks.json example got removed in favor of using snippets. However due to a limitation we have right now we can't contribute a snippet for specific files from the outside. We will look into this in the next milestone.  ![capture](https://cloud.githubusercontent.com/assets/1931590/13149435/cf995810-d661-11e5-9d17-db7060d93aa2.png)
9675|Maybe it has to do with the node version used? Which versions do you have in each machine?  What do you get when running `node ./node_modules/vscode/bin/compile` in the mac?
9676|See https://github.com/Microsoft/vscode/issues/3125
9677|Regular light theme, not light+. Light+ does a proper job. I would expect var, function to be coloured in all themes. Thought that just might be me
9678|Excellent. :+1:   As for the unified shell script, rest assured it is happening: #3055, #2859, #2650
9679|I wasn't able to reproduce using Windows 10.  @felixfbecker can you provide your tasks.json ? And which version of Windows are you on.   This is strange since I don't do anything special when launched from the start menu. Does it work when you use code . from the cmd shell?
9680|F1>Configure Task  We decided to keep the File menu small.
9681|@aeschli moving to you for commenting.
9682|Closing. Question got answered on stack overflow.
9683|@jnystrom absolutely the user will not have to configure anything to get Salsa after the next update.
9684|Thanks for this. Went ahead and did a few more changes: 392a060
9685|Agreed with @felixfbecker this is well covered by the extension - closing
9686|Hi,  Thanks for the quick reply, I just tried Ctrl + shift + o which doesn't work properly for me, using the same JS file I can only go to the constructor in Visual Studio, whereas Atom and Sublime allow me to go to the declaration of each method/ function in this file.  I was taking about Atom in case it would be useful for you to have a look at how they parse the file to extract the statements.  Thanks, Alvin
9687|Recovery build 0.10.9 is now available
9688|You can type <CTRL>+<SPACE> again to toggle between the completion list and the doc.
9689|This is an issue in the extension host. Moving to vscode
9690|The problem is that the extension host calls console.info which seems to be not monkey patched. The default implementation does stdout.write which fails due to the fact that we run in electron-node.  @bpasero please reassign if you aren't the right owner. I somehow remember that you implemented it.
9691|Closing as duplicate of https://github.com/Microsoft/vscode/issues/3091
9692|@janaagaard75 Are you running Version 0.10.9 by chance? I seem to be running into this on the latest vscode, not using any typescript. Curious if you updated something else independently?
9693|This is fairly easy to change to <kbd>ctrl</kbd> in `MouseHandler._updateMouse`, however then it conflicts with <kbd>ctrl</kbd>+click to open a link. Atom doesn't seem to support <kbd>ctrl</kbd>+click to open links so there is no conflict there. @berdario <kbd>ctrl</kbd>+<kbd>alt</kbd> and <kbd>alt</kbd>+<kbd>shift</kbd> seem to be free, just adding another modifier may be better than changing both add a selection and open a link for Linux.  I don't think we currently allow customization of mouse shortcuts, only pure keyboard ones. Created https://github.com/Microsoft/vscode/issues/3130 for this.
9694|"I'm running CNTLM with Code 0.10.8 and resolved this error by adding the protocol to the http.proxy preference.  I was attempting with ""http.proxy"": ""localhost:3128"" and I changed it to ""https://localhost:3128"" to get it working.  Parsing the old URL in node's interactive console gave the following output, which put me on the right track (thanks!):  > require('url').parse('localhost:3128') > Url { >   protocol: 'localhost:', >   slashes: null, >   auth: null, >   host: '3128', >   port: null, >   hostname: '3128', >   hash: null, >   search: null, >   query: null, >   pathname: null, >   path: null, >   href: 'localhost:3128' }"
9695|I'm leaning towards <kbd>alt</kbd>+<kbd>shift</kbd> so it matches the default for add selection up/down.
9696|"@bbenoist I set up my VS Code tasks to use my Gruntfile.js tasks.  I simply hit F1 and enter `task test` and it runs my tests. I can do this for any task I have configured.  ``` {     ""version"": ""0.1.0"",     ""command"": ""grunt"",     ""isShellCommand"": true,     ""args"": [         ""--no-color""     ],     ""tasks"": [         {             ""taskName"": ""clean"",             ""args"": [],             ""isBuildCommand"": false,             ""problemMatcher"": ""$msCompile""         },         {             ""taskName"": ""build"",             ""args"": [],             ""isBuildCommand"": true,             ""problemMatcher"": ""$tsc""         },         {             ""taskName"": ""tslint"",             ""args"": [],             ""isBuildCommand"": false,             ""problemMatcher"": ""$msCompile""         }     ] } ```"
9697|We're actually still experiencing this issue with the PowerShell extension in 0.10.8.  Here's some information from @rkeithhill:  ##   I've observed that scope plays some part here. Global scope variables act flakey at first. They maybe show once but not thereafter as long as we're executing in global scope. As soon as I step into a function, the global variables pop debug data tips quite reliably. Unfortunately, I then get no data tips for the variables inside the function I'm executing in. And when there is not a data tip, it is because we never received a variables request from VSCode. Every time we receive a variables request (not related to populating the variables view), a debug data tip appears.  ##   Is there some way that we might be returning our variable data wrong which causes the VS Code debug client to react incorrectly to data tip requests?  Let me know if I should file a separate issue for this.
9698|Hi **@stkb**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
9699|After some internal discussion we decided to go with a dialog redesign. Will work with our UX designer to get some help.
9700|Closing as it will be fixed with #3136.
