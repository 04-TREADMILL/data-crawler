6101|I see your point. The 2 browser heuristic has its weaknesses and might lead to wrong conclusions on the user side. I removed the filter. For now lets show all proposals and tune from there. Maybe its better if we manually mark proposals that are deprecated and outdated.
6102|@plantain-00 Thank you for trying all the steps. I think the Windows zoom at 150% might be the trigger for this issue.  Most likely, it is an upstream Chromium issue (similar to #1896), but in this case besides blurry text there is also an issue around composited layer borders. My best guess is that the first/last pixel row of some composited layers are all zeroed (hence the black).  In the meantime, please work-around by using `--disable-gpu`.
6103|"CC @aeschli   What is happening is that the Intellisense provided by Code for SCCS files and Emmet overlap in this case.  When you start typing then Intellisense is active. To deactivate Intellisense you have to press ESC and then you can press TAB to get the emmet expansion.  Emmet works properly when I use the [cheatsheet](http://docs.emmet.io/cheat-sheet/) as a reference. You can verify this by invoking `Emmet Expand Abbreviation` from the command palette: - `cur:p` -> `cursor: pointer` - `cp` -> `clip: ;`    Another approach is to bind the emmet command `expandAbbreviation` to another key in your `keybinding.json` file. For example:  ``` json     {         ""key"": ""ctrl+m"",         ""command"": ""editor.emmet.action.expandAbbreviation"",         ""when"": ""editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !editorTabMovesFocus""     } ```  Then you can force an emmet expansion using this keybinding."
6104|Can you delete both these folders and try again? - `vscode\node_modules` - `.node-gyp` located in your user's home folder
6105|"I see the issue.   How about generating the setting as follows. It makes it somewhat easier to fix the formatting (but I have no strong preference):  ``` json // Place your settings in this file to overwrite the default settings {     ""editor.renderWhitespace"": true,     ""editor.wrappingColumn"": 0      , // Migrated from previous File | Auto Save setting:     ""files.autoSaveDelay"": 1 } ```"
6106|pull request delivered, thanks @bgse!
6107|"In some cases, Yes. In a machine I everyday use, I configured the ""auto-run"" version manager. In others, for example, I was using nvmw before, but nvmw has some issues for me, then I removed the setting for auto-run. (nvmw doesn't support auto-run itself, then I used ""startup"" of Windows.) Also, In another machine (Ubuntu), I didn't configure auto-run because I used it to compile some versions of node. Maybe I think that cases that the auto-run is not used are not uncommon, because this option of many managers is turned off as default. And node is updated frequently."
6108|![c vscode](https://cloud.githubusercontent.com/assets/16668962/12267661/df07f3a6-b951-11e5-9a03-1620028d3b10.png) please fix this (C#)
6109|Good catch. That bug was hide multiple entries. Fixed script, removed your workaround.
6110|"@joaomoreno No problem at all, willing to test whatever you need, thanks for sticking with this.  The new build finally shows me the list of extensions to install, so that part works now. Trying to install or click on one of them gives me the same ""unable to verify first cert"" error I had before.  So whatever you did is an improvement, it just doesn't seem to be applied to package downloads/install."
6111|Scope of `6` is `token block body constant declaration function meta method numeric object parameter type ts` Problem is that parameter.type is stronger than constant.  It's a consequence of us flattening all the tm scopes. No easy fix here.
6112|PR delivered, thanks @xaverh!  BTW, the c grammar originates from https://github.com/textmate/c.tmbundle. I created https://github.com/textmate/c.tmbundle/issues/33 so that they also add the keyword.
6113|Alright, give [this one](https://ticino.blob.core.windows.net/build/17682edf40b43a84ac798bff2952cb6821c95e44/VSCode-win32.zip?st=2016-01-11T16%3A09%3A00Z&se=2016-01-18T16%3A09%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=NwmjNC1YW7BfAg6zOEE5sfLH5GIeuxQgOD8BgyOqiJU%3D) a try.
6114|We are now showing a warning message in the launch.json if the user uses a relative paths and we do not spam with msgs on top of screen. Please note that the shown message is not a good one since @aeschli has to start supporting `.errorMessage` field in schema which he plans to do this sprint.
6115|Good point, Brad and I will work on this.
6116|:+1:
6117|As you mention, the cause seems to be the function annotation. Remove it results in correct colorization.  For tokenizing we use the tokenizer from https://github.com/textmate/python.tmbundle/blob/master/Syntaxes/Python.tmLanguage
6118|We have changed the default for january release so you should be able to see more. To make this configurable is a feature request that is not on our immediate plan
6119|@tinganho Thanks - you made my day :dancers:
6120|This has been done. Suggestions on the wording are welcome ![screen shot 2016-01-12 at 17 33 16](https://cloud.githubusercontent.com/assets/1926584/12269614/971d1ebc-b952-11e5-9fd9-311aff785776.png)
6121|This has been done
6122|I added the concept of a `scheme -> ContentProvider` to the workbench layer such that we can now handle all sorts of scheme like any other uri - the [code](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/editor/resourceEditorInput.ts#L39) is compact but should maybe be in a service that we then craft out
6123|@isidorn: Fair enough, thanks. With that in mind, should this feature request be closed or remain open?
6124|@alexandrudima fyi
6125|We like to keep feature request open since people outside the team might jump on it or we might change priorities in the future
6126|I created https://github.com/textmate/python.tmbundle/issues/51
6127|"I would expect the validation to not kick in when ""*"" is specified."
6128|This is a consequence that in VSCode we flatten the text mate scopes. The second namespace name matches the 'function' scope created for 'int main()' Not easy to fix.
6129|Interesting: I get this:  ``` getaddrinfo ENOTFOUND 10.170.129.90:8080 10.170.129.90:8080:8080 ```  but only when actually trying to install the extension (browsing the list works just fine).  I've set `http.proxy` to `http://10.170.129.90:8080`, `http.proxyStrictSSL` to `false` and fixed `http.proxy.StrictSSL` typo as recommended above, with no success though -- this error message always shows up. Any ideas on how to fix that?
6130|@isidorn I agree that red doesn't look right here.  I'll take a look.
6131|# Option 1: _header with viewlet bground color_  ![image](https://cloud.githubusercontent.com/assets/11839736/12272197/f5519998-b913-11e5-8f95-fefe8386861e.png) ![image](https://cloud.githubusercontent.com/assets/11839736/12272201/f806bbaa-b913-11e5-93fb-0712b601ddd3.png) ![image](https://cloud.githubusercontent.com/assets/11839736/12272222/1cddaf74-b914-11e5-84f4-9bcc46564206.png)
6132|Nope. From what I recall, the extensions folder only had the one chsaop-o folder and that folder was also empty.
6133|@aeschli - What about Python built-in functions? Should those not be highlighted anymore?  Also, did VS Code recently change how it does syntax highlighting? Because both these examples (function annotations & Python built-ins) used to highlight correctly until a few releases ago.
6134|@Elusive138 how much does it increase for you in avg? I had the workspace with some JS files open for 2 hours now without any increase in memory.
6135|":+1: on switching back to the explorer when you stop debugging.   More often than not, my intention when pressing Stop or terminating the extension instance is to go back into ""development mode"" rather than stay in ""debugging mode"".  In ""development mode"" the Explorer is what I typically want to work with.  Isi's point about the user might want to start debugging again is completely valid, but the real issue I believe is that there is no way to press the ""play"" button from any view other than the Debug viewlet.  I think we should keep these two issues separate and try to correct both."
6136|# Option 2: _striped with no header_  See the animation concept I created below... ![horizontal-panel-option-2-brad](https://cloud.githubusercontent.com/assets/11839736/12278771/bff6fa30-b937-11e5-8c6c-ec8f9dc81476.gif)  ![image](https://cloud.githubusercontent.com/assets/11839736/12278828/2c632aa4-b938-11e5-98bc-ea19a499f054.png)  **_Here it is again without animation**_ ![image](https://cloud.githubusercontent.com/assets/11839736/12278897/9e77da0e-b938-11e5-8828-636fa025eb5c.png)
6137|@bpasero  Please see the comments on this issue https://github.com/Microsoft/vscode/issues/1876#issuecomment-170997257 for current design proposals.  Let us know your thoughts.
6138|"Of course, here you go. I haven't customized any key bindings, just so you're aware. Should I be doing something differently?  **User**  ``` json // Place your key bindings in this file to overwrite the defaults [ ] ```  **System**  ``` json // Overwrite key bindings by placing them into your key bindings file. [ { ""key"": ""escape"",                ""command"": ""closeReferenceSearchEditor"",                                      ""when"": ""editorFocus && inReferenceSearchEditor"" }, { ""key"": ""escape"",                ""command"": ""cancelSelection"",                                      ""when"": ""editorTextFocus && editorHasSelection"" }, { ""key"": ""cmd+down"",              ""command"": ""cursorBottom"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+down"",        ""command"": ""cursorBottomSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+n"",                ""command"": ""cursorDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""down"",                  ""command"": ""cursorDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+down"",            ""command"": ""cursorDownSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+e"",                ""command"": ""cursorEnd"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+right"",             ""command"": ""cursorEnd"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""end"",                   ""command"": ""cursorEnd"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+right"",       ""command"": ""cursorEndSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+end"",             ""command"": ""cursorEndSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+a"",                ""command"": ""cursorHome"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+left"",              ""command"": ""cursorHome"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""home"",                  ""command"": ""cursorHome"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+left"",        ""command"": ""cursorHomeSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+home"",            ""command"": ""cursorHomeSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+b"",                ""command"": ""cursorLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""left"",                  ""command"": ""cursorLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+left"",            ""command"": ""cursorLeftSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""pagedown"",              ""command"": ""cursorPageDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+pagedown"",        ""command"": ""cursorPageDownSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""pageup"",                ""command"": ""cursorPageUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+pageup"",          ""command"": ""cursorPageUpSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+f"",                ""command"": ""cursorRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""right"",                 ""command"": ""cursorRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+right"",           ""command"": ""cursorRightSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+up"",                ""command"": ""cursorTop"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+up"",          ""command"": ""cursorTopSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+u"",                 ""command"": ""cursorUndo"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+p"",                ""command"": ""cursorUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""up"",                    ""command"": ""cursorUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+up"",              ""command"": ""cursorUpSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+left"",              ""command"": ""cursorWordLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+left"",        ""command"": ""cursorWordLeftSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+right"",             ""command"": ""cursorWordRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+right"",       ""command"": ""cursorWordRightSelect"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+backspace"",         ""command"": ""deleteAllLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+delete"",            ""command"": ""deleteAllRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+k"",                ""command"": ""deleteAllRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+backspace"",        ""command"": ""deleteLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+h"",                ""command"": ""deleteLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+backspace"",       ""command"": ""deleteLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""backspace"",             ""command"": ""deleteLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+delete"",           ""command"": ""deleteRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+d"",                ""command"": ""deleteRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""delete"",                ""command"": ""deleteRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+backspace"",         ""command"": ""deleteWordLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+delete"",            ""command"": ""deleteWordRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+a"",                 ""command"": ""editor.action.selectAll"" }, { ""key"": ""cmd+i"",                 ""command"": ""expandLineSelection"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+o"",                ""command"": ""lineBreakInsert"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+tab"",             ""command"": ""outdent"",                                      ""when"": ""editorTextFocus && !editorTabMovesFocus"" }, { ""key"": ""shift+cmd+z"",           ""command"": ""redo"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+pagedown"",         ""command"": ""scrollLineDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+pageup"",           ""command"": ""scrollLineUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+pagedown"",          ""command"": ""scrollPageDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+pageup"",            ""command"": ""scrollPageUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""tab"",                   ""command"": ""tab"",                                      ""when"": ""editorTextFocus && !editorTabMovesFocus"" }, { ""key"": ""cmd+z"",                 ""command"": ""undo"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""escape"",                ""command"": ""removeSecondaryCursors"",                                      ""when"": ""editorTextFocus && editorHasMultipleSelections"" }, { ""key"": ""cmd+f3"",                ""command"": ""actions.find"" }, { ""key"": ""cmd+f"",                 ""command"": ""actions.find"" }, { ""key"": ""cmd+k cmd+c"",           ""command"": ""editor.action.addCommentLine"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+d"",                 ""command"": ""editor.action.addSelectionToNextFindMatch"",                                      ""when"": ""editorFocus"" }, { ""key"": ""shift+alt+a"",           ""command"": ""editor.action.blockComment"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+f2"",                ""command"": ""editor.action.changeAll"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+c"",                 ""command"": ""editor.action.clipboardCopyAction"" }, { ""key"": ""cmd+x"",                 ""command"": ""editor.action.clipboardCutAction"" }, { ""key"": ""cmd+v"",                 ""command"": ""editor.action.clipboardPasteAction"" }, { ""key"": ""cmd+/"",                 ""command"": ""editor.action.commentLine"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+down"",        ""command"": ""editor.action.copyLinesDownAction"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+up"",          ""command"": ""editor.action.copyLinesUpAction"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+k cmd+k"",           ""command"": ""editor.action.defineKeybinding"",                                      ""when"": ""editorFocus"" }, { ""key"": ""shift+cmd+k"",           ""command"": ""editor.action.deleteLines"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+f"",           ""command"": ""editor.action.format"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""f12"",                   ""command"": ""editor.action.goToDeclaration"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+."",           ""command"": ""editor.action.inPlaceReplace.down"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+,"",           ""command"": ""editor.action.inPlaceReplace.up"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+]"",                 ""command"": ""editor.action.indentLines"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+cmd+up"",            ""command"": ""editor.action.insertCursorAbove"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+cmd+down"",          ""command"": ""editor.action.insertCursorBelow"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+enter"",             ""command"": ""editor.action.insertLineAfter"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+enter"",       ""command"": ""editor.action.insertLineBefore"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+]"",           ""command"": ""editor.action.jumpToBracket"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""f8"",                    ""command"": ""editor.action.marker.next"",                                      ""when"": ""editorFocus"" }, { ""key"": ""shift+f8"",              ""command"": ""editor.action.marker.prev"",                                      ""when"": ""editorFocus"" }, { ""key"": ""alt+down"",              ""command"": ""editor.action.moveLinesDownAction"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+up"",                ""command"": ""editor.action.moveLinesUpAction"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+k cmd+d"",           ""command"": ""editor.action.moveSelectionToNextFindMatch"",                                      ""when"": ""editorFocus"" }, { ""key"": ""f3"",                    ""command"": ""editor.action.nextMatchFindAction"",                                      ""when"": ""editorFocus"" }, { ""key"": ""cmd+g"",                 ""command"": ""editor.action.nextMatchFindAction"",                                      ""when"": ""editorFocus"" }, { ""key"": ""cmd+["",                 ""command"": ""editor.action.outdentLines"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+f12"",               ""command"": ""editor.action.previewDeclaration"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+f3"",              ""command"": ""editor.action.previousMatchFindAction"",                                      ""when"": ""editorFocus"" }, { ""key"": ""shift+cmd+g"",           ""command"": ""editor.action.previousMatchFindAction"",                                      ""when"": ""editorFocus"" }, { ""key"": ""cmd+."",                 ""command"": ""editor.action.quickFix"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+f12"",             ""command"": ""editor.action.referenceSearch.trigger"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""cmd+k cmd+u"",           ""command"": ""editor.action.removeCommentLine"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""f2"",                    ""command"": ""editor.action.rename"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+l"",           ""command"": ""editor.action.selectHighlights"",                                      ""when"": ""editorFocus"" }, { ""key"": ""shift+f10"",             ""command"": ""editor.action.showContextMenu"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+cmd+right"",  ""command"": ""editor.action.smartSelect.grow"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+cmd+left"",   ""command"": ""editor.action.smartSelect.shrink"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""alt+cmd+f"",             ""command"": ""editor.action.startFindReplaceAction"" }, { ""key"": ""ctrl+shift+m"",          ""command"": ""editor.action.toggleTabFocusMode"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+space"",       ""command"": ""editor.action.triggerParameterHints"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+space"",            ""command"": ""editor.action.triggerSuggest"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+cmd+x"",           ""command"": ""editor.action.trimTrailingWhitespace"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""f9"",                    ""command"": ""editor.debug.action.toggleBreakpoint"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""tab"",                   ""command"": ""editor.emmet.action.expandAbbreviation"",                                      ""when"": ""editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !editorTabMovesFocus"" }, { ""key"": ""escape"",                ""command"": ""closeFindWidget"",                                      ""when"": ""editorFocus && findWidgetVisible"" }, { ""key"": ""alt+cmd+c"",             ""command"": ""toggleFindCaseSensitive"",                                      ""when"": ""editorFocus"" }, { ""key"": ""alt+cmd+r"",             ""command"": ""toggleFindRegex"",                                      ""when"": ""editorFocus"" }, { ""key"": ""alt+cmd+w"",             ""command"": ""toggleFindWholeWord"",                                      ""when"": ""editorFocus"" }, { ""key"": ""enter"",                 ""command"": ""acceptSnippet"",                                      ""when"": ""editorTextFocus && inSnippetMode"" }, { ""key"": ""tab"",                   ""command"": ""jumpToNextSnippetPlaceholder"",                                      ""when"": ""editorTextFocus && inSnippetMode"" }, { ""key"": ""shift+tab"",             ""command"": ""jumpToPrevSnippetPlaceholder"",                                      ""when"": ""editorTextFocus && inSnippetMode"" }, { ""key"": ""escape"",                ""command"": ""leaveChangeAllMode"",                                      ""when"": ""editorTextFocus && inChangeAllMode"" }, { ""key"": ""enter"",                 ""command"": ""leaveChangeAllMode"",                                      ""when"": ""editorTextFocus && inChangeAllMode"" }, { ""key"": ""escape"",                ""command"": ""leaveSnippet"",                                      ""when"": ""editorTextFocus && inSnippetMode"" }, { ""key"": ""escape"",                ""command"": ""closeMarkersNavigation"",                                      ""when"": ""editorFocus && markersNavigationVisible"" }, { ""key"": ""escape"",                ""command"": ""closeReferenceSearch"",                                      ""when"": ""editorFocus && referenceSearchVisible"" }, { ""key"": ""escape"",                ""command"": ""closeParameterHints"",                                      ""when"": ""editorTextFocus && parameterHintsVisible"" }, { ""key"": ""down"",                  ""command"": ""showNextParameterHint"",                                      ""when"": ""editorTextFocus && parameterHintsVisible"" }, { ""key"": ""up"",                    ""command"": ""showPrevParameterHint"",                                      ""when"": ""editorTextFocus && parameterHintsVisible"" }, { ""key"": ""tab"",                   ""command"": ""acceptQuickFixSuggestion"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""enter"",                 ""command"": ""acceptQuickFixSuggestion"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""escape"",                ""command"": ""closeQuickFixWidget"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""pagedown"",              ""command"": ""selectNextPageQuickFix"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""down"",                  ""command"": ""selectNextQuickFix"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""pageup"",                ""command"": ""selectPrevPageQuickFix"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""up"",                    ""command"": ""selectPrevQuickFix"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""tab"",                   ""command"": ""acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""enter"",                 ""command"": ""acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""escape"",                ""command"": ""hideSuggestWidget"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""pagedown"",              ""command"": ""selectNextPageSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""down"",                  ""command"": ""selectNextSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""pageup"",                ""command"": ""selectPrevPageSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""up"",                    ""command"": ""selectPrevSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, { ""key"": ""enter"",                 ""command"": ""acceptRenameInput"",                                      ""when"": ""editorFocus && renameInputVisible"" }, { ""key"": ""escape"",                ""command"": ""cancelRenameInput"",                                      ""when"": ""editorFocus && renameInputVisible"" }, { ""key"": ""cmd+w"",                 ""command"": ""workbench.action.closeActiveEditor"" }, { ""key"": ""cmd+k f"",               ""command"": ""workbench.action.closeFolder"" }, { ""key"": ""escape"",                ""command"": ""workbench.action.closeMessages"",                                      ""when"": ""globalMessageVisible"" }, { ""key"": ""shift+cmd+w"",           ""command"": ""workbench.action.closeWindow"" }, { ""key"": ""f5"",                    ""command"": ""workbench.action.debug.continue"",                                      ""when"": ""inDebugMode"" }, { ""key"": ""f5"",                    ""command"": ""workbench.action.debug.start"",                                      ""when"": ""!inDebugMode"" }, { ""key"": ""shift+f11"",             ""command"": ""workbench.action.debug.stepOut"",                                      ""when"": ""inDebugMode"" }, { ""key"": ""f10"",                   ""command"": ""workbench.action.debug.stepOver"",                                      ""when"": ""inDebugMode"" }, { ""key"": ""shift+f5"",              ""command"": ""workbench.action.debug.stop"",                                      ""when"": ""inDebugMode"" }, { ""key"": ""cmd+k m"",               ""command"": ""workbench.action.editor.changeLanguageMode"" }, { ""key"": ""cmd+k p"",               ""command"": ""workbench.action.files.copyPathOfActiveFile"" }, { ""key"": ""cmd+n"",                 ""command"": ""workbench.action.files.newUntitledFile"" }, { ""key"": ""cmd+o"",                 ""command"": ""workbench.action.files.openFileFolder"" }, { ""key"": ""cmd+k r"",               ""command"": ""workbench.action.files.revealActiveFileInWindows"" }, { ""key"": ""cmd+s"",                 ""command"": ""workbench.action.files.save"" }, { ""key"": ""shift+cmd+s"",           ""command"": ""workbench.action.files.saveAs"" }, { ""key"": ""cmd+k o"",               ""command"": ""workbench.action.files.showOpenedFileInNewWindow"" }, { ""key"": ""cmd+1"",                 ""command"": ""workbench.action.focusFirstEditor"" }, { ""key"": ""alt+cmd+left"",          ""command"": ""workbench.action.focusLeftEditor"" }, { ""key"": ""alt+cmd+right"",         ""command"": ""workbench.action.focusRightEditor"" }, { ""key"": ""cmd+2"",                 ""command"": ""workbench.action.focusSecondEditor"" }, { ""key"": ""cmd+0"",                 ""command"": ""workbench.action.focusSideBar"" }, { ""key"": ""cmd+3"",                 ""command"": ""workbench.action.focusThirdEditor"" }, { ""key"": ""ctrl+g"",                ""command"": ""workbench.action.gotoLine"" }, { ""key"": ""shift+cmd+o"",           ""command"": ""workbench.action.gotoSymbol"" }, { ""key"": ""cmd+k v"",               ""command"": ""workbench.action.markdown.openPreviewSideBySide"" }, { ""key"": ""shift+cmd+v"",           ""command"": ""workbench.action.markdown.togglePreview"" }, { ""key"": ""cmd+k left"",            ""command"": ""workbench.action.moveActiveEditorLeft"" }, { ""key"": ""cmd+k right"",           ""command"": ""workbench.action.moveActiveEditorRight"" }, { ""key"": ""ctrl+-"",                ""command"": ""workbench.action.navigateBack"" }, { ""key"": ""ctrl+shift+-"",          ""command"": ""workbench.action.navigateForward"" }, { ""key"": ""shift+cmd+n"",           ""command"": ""workbench.action.newWindow"" }, { ""key"": ""cmd+,"",                 ""command"": ""workbench.action.openGlobalSettings"" }, { ""key"": ""ctrl+shift+tab"",        ""command"": ""workbench.action.openPreviousEditor"" }, { ""key"": ""ctrl+tab"",              ""command"": ""workbench.action.openPreviousEditor"" }, { ""key"": ""shift+cmd+u"",           ""command"": ""workbench.action.output.toggleOutput"" }, { ""key"": ""cmd+e"",                 ""command"": ""workbench.action.quickOpen"" }, { ""key"": ""cmd+p"",                 ""command"": ""workbench.action.quickOpen"" }, { ""key"": ""ctrl+tab"",              ""command"": ""workbench.action.quickOpenNavigateNext"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""cmd+e"",                 ""command"": ""workbench.action.quickOpenNavigateNext"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""cmd+p"",                 ""command"": ""workbench.action.quickOpenNavigateNext"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""shift+cmd+j"",           ""command"": ""workbench.action.search.toggleQueryDetails"",                                      ""when"": ""searchViewletVisible"" }, { ""key"": ""cmd+t"",                 ""command"": ""workbench.action.showAllSymbols"" }, { ""key"": ""f1"",                    ""command"": ""workbench.action.showCommands"" }, { ""key"": ""shift+cmd+p"",           ""command"": ""workbench.action.showCommands"" }, { ""key"": ""shift+cmd+m"",           ""command"": ""workbench.action.showErrorsWarnings"" }, { ""key"": ""cmd+\\"",                ""command"": ""workbench.action.splitEditor"" }, { ""key"": ""shift+cmd+b"",           ""command"": ""workbench.action.tasks.build"" }, { ""key"": ""shift+cmd+t"",           ""command"": ""workbench.action.tasks.test"" }, { ""key"": ""shift+cmd+c"",           ""command"": ""workbench.action.terminal.openNativeConsole"" }, { ""key"": ""ctrl+cmd+f"",            ""command"": ""workbench.action.toggleFullScreen"" }, { ""key"": ""cmd+b"",                 ""command"": ""workbench.action.toggleSidebarVisibility"" }, { ""key"": ""cmd+="",                 ""command"": ""workbench.action.zoomIn"" }, { ""key"": ""cmd+-"",                 ""command"": ""workbench.action.zoomOut"" }, { ""key"": ""cmd+k enter"",           ""command"": ""workbench.files.action.addToWorkingFiles"" }, { ""key"": ""cmd+k cmd+w"",           ""command"": ""workbench.files.action.closeAllFiles"" }, { ""key"": ""cmd+k w"",               ""command"": ""workbench.files.action.closeFile"" }, { ""key"": ""cmd+k down"",            ""command"": ""workbench.files.action.openNextWorkingFile"" }, { ""key"": ""cmd+k up"",              ""command"": ""workbench.files.action.openPreviousWorkingFile"" }, { ""key"": ""shift+cmd+d"",           ""command"": ""workbench.view.debug"" }, { ""key"": ""shift+cmd+e"",           ""command"": ""workbench.view.explorer"" }, { ""key"": ""shift+cmd+f"",           ""command"": ""workbench.view.search"" }, { ""key"": ""f11"",                   ""command"": ""workbench.action.debug.stepInto"",                                      ""when"": ""inDebugMode"" }, { ""key"": ""ctrl+shift+tab"",        ""command"": ""workbench.action.quickOpenNavigatePrevious"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""shift+cmd+e"",           ""command"": ""workbench.action.quickOpenNavigatePrevious"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""shift+cmd+p"",           ""command"": ""workbench.action.quickOpenNavigatePrevious"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""."",                     ""command"": ""^acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'typescript' && suggestionSupportsAcceptOnKey"" }, { ""key"": ""cmd+l l"",               ""command"": ""o.showOutput"" }, { ""key"": ""cmd+l shift+r"",         ""command"": ""o.execute"" }, { ""key"": ""cmd+l r"",               ""command"": ""o.execute-last-command"" }, { ""key"": ""shift+0"",               ""command"": ""^acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"" }, { ""key"": ""shift+9"",               ""command"": ""^acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"" }, { ""key"": ""."",                     ""command"": ""^acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"" }, { ""key"": ""ctrl+f1"",               ""command"": ""PowerShell.OnlineHelp"",                                      ""when"": ""editorTextFocus && editorLangId == 'powershell'"" }, { ""key"": ""f8"",                    ""command"": ""PowerShell.RunSelection"",                                      ""when"": ""editorTextFocus && editorLangId == 'powershell'"" }, ]   // Here are other available commands:  // - workbench.action.toggleSidebarPosition // - workbench.action.openGlobalKeybindings // - workbench.action.openWorkspaceSettings // - workbench.action.openSnippets // - workbench.action.selectTheme // - workbench.action.closeAllEditors // - workbench.action.closeOtherEditors // - workbench.action.cycleEditor // - workbench.action.evenEditorWidths // - workbench.action.maximizeEditor // - workbench.action.minimizeOtherEditors // - workbench.action.openRecent // - workbench.action.toggleDevTools // - workbench.action.zoomReset // - workbench.action.appPerf // - workbench.action.reloadWindow // - editor.action.openLink // - editor.action.findReferences // - editor.action.showReferences // - editor.action.goToTypeDeclaration // - workbench.action.editor.changeEOL // - workbench.action.editor.changeEncoding // - editor.debug.action.selectionToRepl // - editor.debug.action.selectionToWatch // - editor.debug.action.runToCursor // - workbench.action.debug.restart // - workbench.action.debug.pause // - workbench.action.debug.configure // - workbench.debug.action.openRepl // - workbench.action.files.saveAll // - workbench.action.files.saveFiles // - workbench.action.files.revert // - workbench.action.files.newFolder // - workbench.files.action.compareFileWith // - workbench.git.action.globalOpenChange // - workbench.action.pull // - workbench.action.push // - workbench.action.sync // - workbench.action.publish // - workbench.action.git.startGitBranch // - workbench.action.git.startGitCheckout // - workbench.view.git // - workbench.action.markdown.showWelcome // - workbench.action.output.showOutput // - editor.action.clearoutput // - workbench.action.tasks.terminate // - workbench.action.tasks.configureTaskRunner // - workbench.action.tasks.showLog // - workbench.action.tasks.runTask // - workbench.extensions.action.listExtensions // - workbench.extensions.action.installExtension // - workbench.extensions.action.listOutdatedExtensions // - workbench.action.files.toggleAutoSave // - vscode.executeWorkspaceSymbolProvider // - vscode.executeDefinitionProvider // - vscode.executeHoverProvider // - vscode.executeDocumentHighlights // - vscode.executeReferenceProvider // - vscode.executeDocumentRenameProvider // - vscode.executeSignatureHelpProvider // - vscode.executeDocumentSymbolProvider // - vscode.executeCompletionItemProvider // - vscode.executeCodeActionProvider // - vscode.executeCodeLensProvider // - vscode.executeFormatDocumentProvider // - vscode.executeFormatRangeProvider // - vscode.executeFormatOnTypeProvider ```"
6139|Just wanted to update everyone.  This feature will be supported soon in the main branch.  We are planning a temporary fix (based on the one above) while we wait for the fixed Chromium v48 to trickle down through an Electron Shell update soon.
6140|I have tried again after those deletions, still failing (same errors)  :unamused:
6141|# Accessibility Analysis  I've checked all the colors against **_Web Content Accessibility Guidelines [WCAG 2.0](http://www.w3.org/TR/WCAG20/)**_.  I've updated your [comment above](#issue-126131234) with annotations as to which colors could be improved (i.e. ones that only got a AA-rating, or minimum requirements) and which ones did not pass with sufficient contrast.  I will provide updated alternatives in a little bit that will fix the ones not passing minimum contrast.  # Aesthetic Analysis  The colors look good on dark, but on light theme the function/method names are not clearly colored (especially for people that have trouble seeing faint colors). We could also improve contrast on type annotations on the light theme.  I'll provide some updated colors momentarily.
6142|I can't seem to reproduce it, I am able to see the ts lint error thrown but not the one from AI. Can you add the TSLint error so I can make sure I am seeing the same thing?
6143|dup to #1956
6144|I just experienced this myself on a similar monitor with light theme.  I'll be addressing these contrast issues soon.  Just wanted to give you an update.
6145|"# Suggested Replacement Colors for Dark+ and Light+  (Changed colors in bold)  | Theme | Control flow keywords | Type names | Function names | Variable & Parameter names | | --- | --- | --- | --- | --- | | Light | Pink AF00DB WCAG AA pass | Turquoise **_267f99**_ | Dark brown **_777759**_ | Dark blue 001080 | | Dark | Pink C586C0 WCAG AA pass | Turquoise C586C0 WCAG AA pass | Yellow-brown DCDCAA | Light blue 9CDCFE |"
6146|I see it is used in CSS for functions that have special handing to give hints about the parameters, such as rgb(a) and hsl(a)
6147|@jrieken :+1:
6148|@inigosola thanks for you interest in VS Code!  We currently don't have plans to look into this as the version of OSX is a few years old now.    However, given your passion for Mountain Lion, we are happy to look at Pull Requests to fix issues. To get started, you can clone and attempt to [build and run VS Code locally](https://github.com/Microsoft/vscode/wiki/How-to-Contribute) and then start to investigate bugs that are blocking on Mountain Lion. If you can submit issues, or better yet fixes in PRs, we'll be happy to look at them.
6149|removed the footer.
6150|> Rich context-sensitive syntax colorization is very hard to do (if not impossible) with tmLanguage syntax definitions. The functionality for specifying custom colorizers seems to be there, but not exposed to extensions (ITokenizationSupport).  I too support being able to replace the tokenizer implementation. For example, since I was working on first-class features for a language that I wanted to implement, I had to create an AST and its associated lexer/parser (which was based on flex/bison by the way). It's a shame that I can't reuse the lexer for syntax highlighting as well. Returning the token/position and saving the lexer state doesn't seem that difficult.  > Another way is to let multiple tokenizers work in parallel...  This part doesn't really make sense to me though.
6151|So you would do the matching fuzzy, but you would keep the sorting the way it is by name? I see that ST seems to apply fuzzy scoring also to commands.
6152|"@jrieken thanks. I think this should move into a static registry similar to our other platform registries that we have. the concept of resolving content from a URI seems so low level to me that it could even live in platform. In theory we could beef this registry up later to implement other file service related methods once we want to support other protocols like ftp and then the file service could just be the implementation of the registry interface for the ""file://"" scheme."
6153|"I am hitting an issue in comments that is ugly. My intent is to write this inside a TS/JS file:  ``` /**  * this is set.  */ ```  However `set` is a snippet and typing ""."" completes it so I end up with:  ``` /**  * this is   public set .(v : string) {      this. = v;  }   */ ```  Typing undo here I end up with:  ``` /** */ ```  @alexandrudima fyi about the undo behaviour here which is not very helpful."
6154|yes, but let's take baby steps given the march deadline
6155|We should not add snippets inside comments, tho I am unsure if we know that when inserting them.
6156|It works! I got a list of extensions now. (Yeah! ;) ) But the installation still fails with: unable to verify the first certificate: Error: unable to verify the first certificate,    at Error (native),    at TLSSocket.<anonymous> (_tls_wrap.js:1000:38),    at emitNone (events.js:67:13),    at TLSSocket.emit (events.js:166:7),    at TLSSocket._finishInit (_tls_wrap.js:567:8)  But its going in the right direction. Thx man, would be nice to try the next build for you.
6157|I would also like a quick way to go back to 'editing' when I'm done 'debugging'. In addition to switching to the explorer viewlet I also want to restore the state of the editors and get rid of the debug output.  In my opinion there are two separate actions: `stop the debug target` and `end/close my debugging session`, I don't feel comfortable to bundle them together with the current `stop` action. Would it make sense to explore some 'x' or close action in the debug tool bar on the right of stop. This action would mean end my debugging session?  ![dbg](https://cloud.githubusercontent.com/assets/172399/12288854/1b22b516-b9d8-11e5-8b9e-5087badd14a1.png)
6158|@nchammas That depends on the theme that you choose. The default light and dark themes typically don't highlight function or method references.
6159|Sorry then it must have been a different error that I've been seeing. I don't have a reproducible example, but I keep my eyes open.
6160|"the detail of the output that python code runs on vscode.     vscode version:0.10.6     python version:3.5.0 the tasks.json configuration: {     ""version"": ""0.1.0"",     ""command"": ""python"",     ""isShellCommand"": true,     ""showOutput"": ""always"",     ""windows"": {         ""command"": ""python.exe""     },     ""args"": [""${file}""] }"
6161|I believe this has been fixed and should be available with the January update. @weinand right?
6162|Yes, supporting other protocols is way beyond March, also because we have code that just uses raw node.js fs APIs and not the file service in all cases.
6163|We only show the drop shadow for the focused editor. If you would move focus to one of the other two files you would get the dropshadow header. This way we distinguish better which editor has focus.  I believe this is as designed, please reopen if you disagree.
6164|Nice, I did not know you could start VS Code just with X! Can you try with a hello world Electron application to see if this reproduces and then report this to Electron? https://github.com/atom/electron/releases
6165|We currently have `editor.autoClosingBrackets` but this does take care of the comments
6166|I think it belongs in the help menu since it should not be too visible. Forwared to Ben for opinions
6167|@egamma that sounds like a good approach - as long as there is a keyboard shortcut for the close debugging session part as well :-)
6168|@isidorn correct.
6169|"@rkeithhill We do try to align with Visual Studio, but sometimes we diverge when we think it makes sense. Consider `F3` and `Shift-F3`, `Ctrl-F3` and `Ctrl-Shift-F3` for Visual Studio Find operations. The `Shift` changes the direction to find above, so I think `Ctrl-Enter` and `Ctrl-Shift-Enter` make sense (in that `Shift` changes the direction to insert above).  To get rid of the annoyance, you can use the following in your `keybindings.json`:  ``` { ""key"": ""ctrl+enter"",            ""command"": ""editor.action.insertLineBefore"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+enter"",      ""command"": ""editor.action.insertLineAfter"",                                      ""when"": ""editorTextFocus"" }, ```"
6170|The contextmenu reveals the editor position right before displaying itself to cover the case that it is invoked via the <kbd>ContextMenu</kbd> key. That's because it needs to figure out a location where to render itself and the best location is the cursor location. Currently, due to some tricks Electron does to render the native context menu, the entire JS VM is paused and the editor paint only occurs after the context menu is closed, thus making it seem that the closing of the context menu caused the jump. I will look into a decent solution.
6171|@jrieken  nothing in omnisharp log
6172|While poking around I've also discovered the following not working case: - put cursor at the end of the file - scroll to the top of the file - press the <kbd>ContextMenu</kbd> key - the context menu is shown, most likely somewhere off-screen
6173|Valid feature request, but will not change it for the reasons mentioned.
6174|Thank you for your reply.  The weird behavior is reproducible on a simple electron app. So this is nothing to do with VS Code.  Sorry for my lack of research.  Thanks, Terminus-IMRC.
6175|@Terminus-IMRC np, did you file it against Electron?
6176|My change makes it that the cursor position gets revealed only if the contextmenu is invoked via a keybinding (in which case it draws itself at the cursor position). So, right clicking will no longer change scroll position whatsoever.
6177|Yes I did: https://github.com/atom/electron/issues/4083
6178|Got it. I argue your situation doesn't happen often. People usually either have node installed globally or just have a default node set up in nvm. I suggest you do the same.  An environment variable setup in `settings.json` wouldn't work for your, since you want to **add to** the `PATH` variable, not set it. A startup script could work, but you can always achieve that outside of vscode by doing `nvm use 0.12 ; code`.  Another alternative would be to use a specific node as the task command and point it to the gulp or grunt entrypoints inside the `node_modules` folder.
6179|Replace the contents of `scripts\npm.bat` with [this](https://gist.github.com/joaomoreno/bfc1b4efb7f1b069df78) and let me know what you get when you run it.
6180|Which OS?
6181|Give this extension a try: [githistory](https://marketplace.visualstudio.com/items/donjayamanne.githistory).
6182|The reason for not seeing exactly the same timing is that we do some buffering on the VSCode side to not update the output panel to frequently if a lot of output appears. This is currently expected and there are no plans right now to change this.   If we want to do something we need to extend the task framework to control the buffer interval for the output window.
6183|Ok. I made a shell script that sets `PATH` and calls `code`, and I am using it instead of `code`. I think that this is safety way to avoid using node of involuntary version.  So, my English is very poor. I couldn't explain well, but you interacted very patiently and kindly. Thank you  :smiley:
6184|Windows 10
6185|build info:  ![image](https://cloud.githubusercontent.com/assets/5047891/12292471/979fa328-b9ed-11e5-9d1c-cb50db959e13.png)
6186|Thanks @bgashler1. I updated the light theme according to your suggestions. I realized that I had a wrong RGB value in the table above. It's Turquoise 4EC9B0 (not C586C0). 4EC9B0 is also what you see in the screenshots. Can you confirm that 4EC9B0 is fine?
6187|Thanks for your ideas and feedback!
6188|Good work Brad, I like the way you used colour in option 2 to indicate whether content in the panel is 'live' or 'hot' as you called it. That would be my preference.  How tall would the separator be? Tall enough to easily grab and resize with the mouse? Especially when the mouse is above the close button (would be good to avoid the user unintentionally closing the window for example when they try to grab the separator to resize it).
6189|> > Another way is to let multiple tokenizers work in parallel... >  > This part doesn't really make sense to me though.  I think they wouldn't be considered as tokenizers from VSCode's point of view. Expanding on @dajoh's example, you could have a tmLanguage tokenizer classifying the simple tokens quickly and have Roslyn parse and return detailed token information from another process. In this case VSCode might only need a way to change a token's style at any time.
6190|Reproduced with snippet  ``` export class UI {     public searchbar: SearchBar     public console: Console      constructor() {      } } ```
6191|Thanks!
6192|This issue was moved to Microsoft/TypeScript-TmLanguage#47
6193|"@jrieken An extension that uses the `vscode` api (aka has a `main` field in `package.json`) is not allowed to use `engines.vscode: ""*""`. (Notable exception: extensions in our source tree which always compile against master and don't make it in the store). I hope you understand why: allowing that means extensions would make it in the store with `*` and we would never be able to introduce api breakage nor filter at browse/install time only compatible extensions.  I don't know how you could signal to the download tool to get you the `vscode.d.ts` on master, but IMHO it should not be `engines.vscode: ""*""`. @bpasero Perhaps the `vscode.d.ts` download tool can be made available also as a command line where the version is passed in?"
6194|"It already is a command: https://github.com/Microsoft/vscode-extension-vscode/blob/master/bin/install and it could accept a version argument to override. It would be nicer though if you could override a value from package.json through the command line and just specify ""*"" as engine for VSCode."
6195|Maybe unrelated but another source of confusion is those two methods that are on `IQuckOpenService` and not on an editor service  ```         /**      * Returns the sorted list of editor inputs that have been opened by the user.      */     getEditorHistory(): IEditorInput[];      /**      * Removes an editor history entry by the given input.      */     removeEditorHistoryEntry(input: IEditorInput): void; ```
6196|"@alexandrudima another idea would be to allow ""*"" as engine but only in combination with ""private: true"" to disable validation. This then should be something our publish tool reads and understands to prevent from publishing it to the store."
6197|Yes, no real reason to have it in quick open service. It is even being used outside of quick open in other areas already I think.
6198|"IMHO the challenge here is that the implementation of `text-rendering: optimizeLegibility` in Chromium is buggy. Here's some random excerpt I've found at [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Browser_compatibility) -- besides the client rects being wrong -- [Chromium 487028](https://code.google.com/p/chromium/issues/detail?id=487028):  > <p>[1] The implementation has known bugs on Windows and Linux, which can break <a href=""http://crbug.com/114719"" class=""external external-icon"">font substitition</a>, <a href=""http://crbug.com/51973"" class=""external external-icon"">small-caps</a>, <a href=""http://crbug.com/55458"" class=""external external-icon"">letter-spacing</a> or cause <a href=""http://crbug.com/149548"" class=""external external-icon"">text to overlap</a>.</p>  So while PR #1510 includes a workaround for [Chromium 487028](https://code.google.com/p/chromium/issues/detail?id=487028) that works for LTR text, I cannot deliver this change in its current form -- making `text-rendering: optimizeLegibility` the default for everybody. The unresolved Chromium issues above look like they would cause a lot of issues to CJK text, RTL text, and bi-di.  I am looking into enabling `text-rendering: optimizeLegibility` via a setting which will be off by default."
6199|Closing as a duplicate of #490.
6200|+1 the same
