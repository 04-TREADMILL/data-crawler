901|@aeschli Interesting! Just installed textmate to be sure, and yes it does affect textmate itself. I'll update here when something happens over there. https://github.com/textmate/javascript.tmbundle/issues/44
902|See #334 for more details on another option for treating JavaScript as JSX.
903|I'm afraid there's really no style guide in that aspect. But Windows always properly stores the window sizes, and its a convention that's just in practice, unless an application overrides it explicitly.   This deviates from it.  Just to clarify, yes it opens maximized, if it shuts down maximized - that's correct behavior. But when you restore it now, it loses its actual size when not maximized.    Technically, its an Electron bug, where it only stores the last size, which when maximized is the maximized size instead of the restored window size. VSCode, since v0.10 works around it by setting itself to a default size instead of the old electron behavior which is worse - since it'll have the maximized size as the previous size (which is the case in previous versions - where when you unmaximize, it will have a size which is again the maximized size).
904|@jpierson I don't expect any superset of JS to be automatically supported. Either of your proposed solutions would work fine for me.
905|I actually have problems with OmniSharp as well but not regarding the paths but rather with DesignTimeHostManager.  Here's the Omnisharp Log:  ``` [INFO] Starting OmniSharp at '/Users/Zed/ttest/VSCode_Test'... [INFO] Started OmniSharp from '/Applications/Visual Studio     Code.app/Contents/Resources/app/extensions/csharp-o/bin/omnisharp' with process id 43072... [INFORMATION:OmniSharp.Startup] Omnisharp server running using stdio at location '/Users/Zed/ttest/VSCode_Test' on host 39900. [INFORMATION:OmniSharp.Dnx.DnxPaths] Using runtime '/Users/Zed/.kre/packages/KRE-Mono.1.0.0-alpha4'. [INFORMATION:OmniSharp.Dnx.DnxProjectSystem] Scanning '/Users/Zed/ttest/VSCode_Test' for DNX projects [INFORMATION:OmniSharp.Dnx.DnxProjectSystem] Found project '/Users/Zed/ttest/VSCode_Test/project.json'. [ERROR:OmniSharp.Dnx.DesignTimeHostManager] Failed to launch DesignTimeHost in a timely fashion. [ERROR] Error: Failed to start OmniSharp ```  Node.JS, NPM, Visual Studio Code and .NET 5.0 were all installed today but DNX commands inside VSCode don't run, claiming that OmniSharp server is not running.  Also, here's my `dnvm list` output: Active Version              Runtime Architecture OperatingSystem Alias  ---  ```    1.0.0-beta4          mono                 linux/osx    1.0.0-beta7          coreclr x64          darwin    1.0.0-beta7          mono                 linux/osx    1.0.0-rc1-final      clr     x64          win    1.0.0-rc1-final      clr     x86          win *    1.0.0-rc1-final      coreclr x64          darwin          default    1.0.0-rc1-final      coreclr x64          linux    1.0.0-rc1-final      coreclr x64          win    1.0.0-rc1-final      coreclr x86          win    1.0.0-rc1-final      mono                 linux/osx ```
906|It seems that this is the only place where the value `'emmet'` is used. Doesn't it make more sense to use `'keyboard'` here, considering the original source of the event?
907|FWIW the ESLint workaround proposed by @alexisbg is good for my needs.
908|Similar to #123   Looks like its neither possible nor planned.
909|@jepessen SO actually fixed that and inline p-based links are now rendered properly there.
910|Fix delivered. Signature help was getting into an infinite loop when no open parent was found. Thanks to everyone for helping tracking this down!
911|Being able to ctrl+c to kill a task would be great too.
912|I've also seen failures to download all of the files for the extension during updates on Windows 10 several times.  I have not seen these failures on OS X.
913|@Totoajax Did removing these extensions fix the issue?  If so, did you get a chance to identify which extension was causing the issue?
914|@jrieken I'm using mono to compile my program.  Here's the results of F8:  https://imgur.com/a/FA9ai
915|For me on OSX 10.10, opening any folder in terminal half the time just creates a new tab in iTerm 2, and it's hit or miss whether it actually CD's into that folder or not.
916|@lukehoban I've now worked with vs code for a long time after removing the extensions. And it works perfect! The extension that made the fan go crazy was Go. I installed bookmarks after the first sounds came. BUT I haven't tried to run only with bookmark, so I can't say there's not a problem with bookmarks
917|Applies to windows also.  ![capture](https://cloud.githubusercontent.com/assets/3933589/11321441/2c0370f2-90c8-11e5-807c-caf74afb4ad9.PNG)
918|Okay - since this was caused by the Go extension I'll move it over to that repo to investigate further.
919|This issue was moved to Microsoft/vscode-go#58
920|@smuuf Are you looking at the image with 100% zoom in a separate tab, so that it's displayed with 1:1 pixel ratio?  https://cloud.githubusercontent.com/assets/4998498/11274683/3350697c-8eda-11e5-8797-806278ef6e93.png  If you're looking at it in this issue, keep in mind it's scaled down via CSS because its full width doesn't fit into the width of the conversation.
921|FWIW, I was using OS X with a hi-dpi Retina screen and I did not notice any issues with blurryness at 90% level, if I remember correctly. Perhaps it's only visible on non-hi-dpi screens?
922|The top requested feature for the Go extension is a format-on-save option (https://github.com/Microsoft/vscode-go/issues/14).    This really begs for being invoked on a pre-save event.    Without it, we have to do some sort of double-save with bookkeeping to make sure the first save doesn't re-trigger the post save event.  The best I have managed is this: https://github.com/Microsoft/vscode-go/blob/formatonsave/src/goMain.ts#L99-L118.  However, the double-save flashes the `(unsaved)` marker in the editor and I'm sure there are other issues with this approach.  It would be great to have a pre-save hook to use instead.
923|Hi **@kheiakiyama**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
924|**@kheiakiyama**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
925|Dupe of #369
926|How about the description autoscrolls from beginning to end. Thinking something similar to music players when the song name is long. When an entry is selected, after ~2 seconds or so it will start scrolling to the left to show clipped text. Once it reaches the end it stops for 2 seconds and resets.  I'll poke around a bit with it tommorow to get a prototype mocked up if theres no objections/better ideas
927|"I'm not sure I understand the ask; its a lightweight code editor, not an IDE ... why would you need to open multiple ""project"" folders that aren't hierarchical (where you could set the working path to a mutual parent)?  If you're working on modules that are disparately stored on disk that are somehow interacting with each other to that degree, then they are too tightly coupled to begin with... are your projects siblings? If so, just open the parent folder, or parent / parent folder... wherever the root of your ""solution"" is."
928|":+1: for multiple instances, but I wanted to provide this workaround in the meantime:  ``` bash # linux (assuming you symlinked already) code () { /usr/local/bin/code -n $* }  # osx code () { VSCODE_CWD=""$PWD"" open -n -b ""com.microsoft.VSCode"" --args $* } ```"
929|Hi **@jel-massih**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
930|It's visible for me for JavaScript files. For `.jsx` (JavaScript React) files, it's missing. It doesn't show up in the palette, and the keyboard shortcut does nothing.
931|I have standard 1920x1080 and 1920x1200 displays that dont have any noticable blurring at 80-90%  I also prefer working at 90% in many cases.  If there is still a desire to not allow the overall zoom <100%, what about having zooming only affect the editor panel (like Visual Studio and most other text editors)?
932|Same issue
933|@jpierson My opinion is similar that they should make an optional choice in user settings to config all .js files support JSX syntax or, to say the least, provide this option in jsconfig.json.
934|"I personally like the way that is looks visually [here](https://github.com/Microsoft/vscode/issues/369#issuecomment-158628935), and would not really be a big fan of the auto-scrolling. I know you mentioned that the temporary implementation you had in place was ""jankey"" and ""cringey"", but I really do like the way that it looks in the UI! Is there a way to make the implementation dynamic? What are your thoughts?"
935|@alexisbg lOl I totally forget we could initiate ESlint in editor other than the default and extensions now make it more convenient to switch between. Thanks.  But I am also looking forward to another way of setting this in global rather than download ESlint from NPM every time.
936|What if the text was restricted to two lines (so it keeps the consistent current layout where things don't move around when moving through items...all items under the selected one don't get moved down or up)? Or instead of two lines, 140 characters, which is probably approx. the same length. It would require rewriting of some of the descriptions to get under that limit, but there could be some improvements in consistency anyway. I'm not sure if the text is used elsewhere though? (probably Visual Studio? and Mad’s VS Essentials web site?)   If the text length is restricted, it would be nice to move the browser support info out of the description string. It is already stored separately in the XML. It could perhaps be shown to the right of the property name if there is enough room (perhaps only for the selected item still to avoid visual noise.)  Otherwise perhaps the text could just get expanded on hover, but that wouldn't work for touch devices, and would need to be careful it can still be read by screen readers.
937|@dstorey So if the description only has one lines worth of text the second line would just be blank?  ![image](https://cloud.githubusercontent.com/assets/1033731/11322310/bfff4386-90b3-11e5-9d78-4dc71c77f634.png)  I do like the consistency as its not jumping around like with variable length wordwrap.  For the expansion on hover, do you mean like a little mouse tooltip bubble type thing or something different?
938|You could maintain the package and have it in the main Fedora repository:  https://fedoraproject.org/wiki/Packaging:Guidelines
939|"Only using excludes here, some projects it works, others it doesn't.  Am not using ""files"" in any of the jsconfig.json project files."
940|Well, if you have a number of modules (which are all in their own git repository) that is independent of each other but you have one repository that uses those dependencies it makes sense to be able to open these independent folders and make changes that would be reflected so you can test it locally. That would still be a lightweight code editor but a more useful one imho!
941|The main issue with setting the project as the parent is that git integration goes away, there are other valid use cases beyond both having a mutual parent as well though.
942|@stoffeastrom sounds like a use case for submodules; I'm not sure how your project would reference another, unless you were aliasing with some mechanism, such as npm linking, etc. This problem is what package managers are largely intended to solve. If the modules are tightly coupled, then they really aren't isolated modules. You wouldn't be able to reliably make changes to support one project without worrying about the change having consequences for other consumers down the road. Even with submodules, they are read-only by default for exactly that reason.  At any rate, what @Tyriar just mentioned is one of the reasons I am wary of having this type of multi-working path interface in a single instance/window: you have to handle integrations (like git), extensions, refactoring, debugging, etc, etc, etc. all in some isolated fashion. For instance:  If I use the git integration to commit, am I committing project A or project B? If I refactor a class name in TypeScript, should it refactor in project A or project B, or both? What if the same class name exists in both projects with different meanings? What if one is loosely referencing the other?  These are just some examples of how something seemingly simple can get very complicated, very quickly. I think it would be way more confusing and, frankly, less useful than to alt-tab/cmd+tab between a few separate instances of VSCode, each happily managing their own isolated working path without all the extra effort and edge case issues.  Im not saying that it couldn't be solved, but I don't quite understand why switching between multiple windows and/or instances is an issue. Maybe I am missing something...
943|Hi **@dstorey**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (David Storey). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
944|"Sublime, Atom, Webstorm - they are also ""lightweight"" code editors (except maybe Webstorm) and they allow opening multiple root folders from different locations. These editors are probably 99% of what web developers use. Code can compete with them with much better Typescript support (and it will be very popular consider Angular 2 is comming) but only if it will give developers what they use now as a basic functionality."
945|@weinand Sure thing
946|@lukehoban hey how do you move issues on GitHub ;)?
947|@aeschli I see the following tokens being used for list and block quotes: `token.meta.tag` and `token.punctuation.section.embedded`. Those seem to not get colored in our default themes but in some other TM themes I think they are. We should fix this for recovery imho if low hanging.
948|"I might be wrong but from what I've found, the current support for jsx is limited to syntax highlighting. That's probably why you can't use the ""format code"" feature."
949|@jel-massih you found the issue, thanks a lot. I picked up your change but did some modifications to it. See https://github.com/Microsoft/vscode/commit/c3094f380d5010a7dd43868a00177a5ff7261124
950|@simlevesque  > IMHO, your approach is wrong and you should ask your distro maintainer to provide a package for Visual Studio.  Yeah my script might be wrong, and this is like saying I'll build the product but let the distro maintaner provide package is like saying I don't care about distribution at all. Having said that obviously I don't expect MS engineers to provide any distro packages! A `.deb` file is a binary, try installing some linux software from the source and you'll get why I am asking for an install script to be added, but nonetheless at least someone will build a binary file, that might just be a solution even if we don't provide a script!  @mackenza  Hmm well, package management is a solved problem, but if you see any linux software, they do allow us to install things from source, and this is where the shell script comes into picture, but if you do not want to provide then fine, at least we'll soon have a linux package!
951|it also would be fun to have a button that install the cli command in bash_profile like it happens in other similar tools
952|Finally after I restart my macbook, it works... Maybe it's just something wrong with my macbook
953|[Sublime Package Control](https://packagecontrol.io/) can be a good example [package_manager.py](https://github.com/wbond/package_control/blob/master/package_control/package_manager.py#L419)
954|So, If we get the code from the repo is OSS but if we get the executables they aren't, isn't it? It makes no sense at all :S
955|OK, so it seems that if you don't have a launch.son file in a .vscode folder, the Format Code command is not available. (Again, I am using the Mac version. My project is Mono C#)  This seems like a problem.
956|@rhires ,thx!
957|I think this is an improvement over the current state of things (can't zoom below 100% at all).  In fact, I'd prefer completely removing any artificial restriction on the zoom. If it's blurry, that should be the issue being fixed. Meanwhile, people can choose to use or not to use low zoom levels depending on if it's a problem for them or if it's acceptable.
958|Hi **@claudioc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
959|":+1:  Furthermore, typing parts of the full path, e.g. `fobate`, should also be a match. (See TextMate’s ""Go to File"" for comparison.)"
960|"@markburgessstl - are you saying that in a Mono C# project on Mac OS X, you see ""Format Code"" as an option when you have a `launch.json` file in a `.vscode` folder in your project; and do not see ""Format Code"" when you don't have the `launch.json` file?"
961|:+1:
962|I can repro using a custom .NET language on Linux x86 using v. 0.10.1 as well. This used to work for plain .NET console apps in past versions.
963|I think you are asking for Makefile with standard `make all clean install uninstall` syntax that supports `--prefix=`from ./configure and `DESTDIR` env variable.
964|+1
965|Yes same thing here. Editors pretty usless for PHP at this point. Hangs, and has to be killed when working on PHP.
966|So this can add +100 karma points to Windows continuum and make it more sell-able... But it also requires to have .NET SDK for ARM (I guess is not difficult to do for Microsoft)
967|"Well, I was saying that but now I'm not so sure.  Now the ""Format Code"" command seems to be working.   If this happens again and I can constantly reproduce the problem I will post an update.  Otherwise please ignore/close this issue."
968|@dlclark the issue is that the action does not add an entry to our history stack. entries are currently only set when you set the cursor +/-5 lines from the last location.  Imho the Editor should provide the history feature and not the workbench from the outside listening to events and then deciding how to navigate.
969|Is anyone seeing this on windows too then for VS Code?
970|@bobwoodard any chance you could use a process explorer that is able to identify the process within vs code that consumes so many resources? preferable that would be the arguments passed to the process (it helps identifying what the process does).
971|@buzinas  CSS/Less and Sass are not yet using the new extensions API, they were written before that. Eventually I'll have to rewrite them to do so. I see that Stylus itself is implemented in NodeJS, so I'd recommend to use as much as you can from there. Scanner, parser, AST. Have a look at https://code.visualstudio.com/docs/extensions/example-language-server. You'd implement the language server in a separate NodeJS process, that can keep the ASTs for open documents as to (re-)use them for validation, intellisense, hovers and so on. We have packages that already implement the process communication for you. IMO that the best way to go. As mentioned, CSS/Less and Sass is old style and is of limited use as an example or framework to build on.
972|Dupe of #207
973|@dstorey You are awesome! Thanks a lot.
974|@aeschli is there any estimate of when CSS will be using the new extensions API?   Probably it will be easier to provide Stylus support by taking advantage of the CSS one.
975|@buzinas Looking at the different styles of syntax that Stylus supports, I wonder if it really makes sense to reuse the CSS scanner and parser.  There's no time decided when CSS is moved to use the extension APIs.
976|Now that is being developed, I have a few suggestions:  ---  **Please add support for this code folding operation** _(I don't know what to call it)_: 1. Fold all blocks 2. Unfold the block that the cursor is currently in (where it was located before the fold all command)  In the ACE Editor this is called 'FoldOther' and it is bound to hotkey Alt+0 by default. Try it out [here](http://sevin7676.github.io/Ace.Tern/demo.html#javascript) _(put your cursor inside of a function block and press Alt+0; Shift+Alt+0 then unfolds all)_.  This folding operation is incredibly useful because it allows you to quickly collapse everything except for the block of code you're currently looking at - which lets you focus on a single block of code.   ---  **Please make all curly braces create a folding block in C-style languages** Example: In Visual Studio _(not visual studio code)_ - curly braces only produce a folding widget for classes and members, which is why [this plugin](https://visualstudiogallery.msdn.microsoft.com/9390e08c-d0aa-42f1-b3d2-5134aabf3b9a) exists. The problem is the plugin has major performance issues in large files, which is something that can be avoided if the proper folding support is added natively. Note: This should be supported in ALL C-style languages including: C, C#, JavaScript, Java, etc...  ---  **Please include support for region folding in all C-style languages** Regions are officially part of C#, but not other C-style languages. However, they are useful in other C-Style languages.   The ACE Editor already has [support for this type of folding](https://github.com/ajaxorg/ace/wiki/Non-Standard-Code-Folding).  This feature should have an option to turn it off, because for every person that loves regions, there is another person [who hates them](https://visualstudiogallery.msdn.microsoft.com/0ca60d35-1e02-43b7-bf59-ac7deb9afbca).   Also, it would be great to have this for SQL-Server (Microsoft's SQL) mode (once the language is added). I personally created a SQL Server mode for the Ace Editor and I included this feature. Try it [here](https://ace.c9.io/build/kitchen-sink.html): Select 'SQLServer' for the document in the top left corner.  ---  **Please make JSDoc style comment blocks foldable in all C-style languages**  ``` javascript /**  * These comments should produce a fold widget (on the first line)  */ ```  ---  Note: I see that each [language file](https://github.com/Microsoft/vscode/blob/497788c0bcd20859f736d585b49c208af8dd518f/extensions/csharp/syntaxes/csharp.json#L7) seems to have its own folding structure. It may be useful to have a way to inherit folding modes because so many modes should share the same [C-style folding](https://github.com/ajaxorg/ace/blob/36e6744a5f40df0da52ff22b3bc729657c056e09/lib/ace/mode/folding/cstyle.js).
977|Thanks @Tyriar  Updated to use fs.stat and looks much better as a result.  More agressive now where it simply doesnt run mkdirp if the directory already exists, not just in the case of drive root.
978|Well, in a way yes, but I was under the assumption that make works for softwares based on C, since this is a nodeJs application, we already have the binaries in place, all we need to do is add the .desktop file in the share/application and we are good to go since it doesn't matter where the binary is located, in the sys path or normal path
979|+1 for this. Doing proper context code completion in CodeMirror and Ace is a nightmare. An open source editor that had good hooks to this kind of thing would be gold. We just need some docs on using it ;)
980|+1 to reopen and talk about this issue. I hope this is a 'bug' and not a decision because it makes no sense at all.
981|The .NET SDK has nothing to do with VS Code and I don't think it will happen. But It would be awesome if we could edit code on Windows Mobile in VS Code that is in some git repo.
982|"Alternatively,and preferrably, the save as dialog would function similar to Visual Studio, where the ""Save as Type"" is not authoritative and is only used when no extension is specified. If an extension is specified it saves it with the specified extension."
983|fixed
984|Hi **@pborreli**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
985|**@pborreli**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
986|Hi **@jel-massih**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
987|This is fixed in electron v0.34.2
988|+1 to reopen it. This is not clear enough.
989|+1
990|Great @aeschli ! Thanks.
991|Awesome! Great job.
992|Duplicate of #105.
993|"I have the same problem. It is posible to disable validate php synax?  Edit: without setting ""php.validate.executablePath"" vscode also crashed during save php files"
994|I am also able to replicate this. For me, it completly breaks the variable panel until restart of VS Code (can scroll but unable to expand any items and nothing gets updated)
995|Duplicate of #105?
996|Looks like this was fixed in https://github.com/Microsoft/vscode/commit/c89555baaf13352799a9299a284ff261d3d68c34
997|Cool, but the last version i can download is still 0.10.1 that has the issue. Can i compile this thing from the repo?
998|Yeah there is instructions on the wiki https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source
999|kc9eye, Thank you
1000|Hi @aeschli, thanks for the feedbacks. Is there a document where the architecture of the VS Code source is described? That should help me to avoid these type of pull requests.
