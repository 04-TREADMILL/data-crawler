4401|Ok thanks.
4402|This can happen when the installer fails to delete the extensions folder for some reason. Typically deleting VS Code manually and running the installer again solves these issues.
4403|Thank you!
4404|+1 This is bizarre behaviour.
4405|@egamma Thanks for the tip about the insiders channel, I got the 10.5 and it's a huge improvement at a little over 20 sec, but still nowhere near the ~2 seconds others are experiencing here. Perhaps there's still room for improvement.  Thanks for the already great work on this IDE, by the way.
4406|Hi **@Bigous**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
4407|**@Bigous**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
4408|I'm seeing the same on 0.10.5. Strangely, I didn't see this prior to 0.10.5 - any ideas?
4409|Magically it started to work after several restarts and trials...
4410|1. Split the editor.    ![1](https://cloud.githubusercontent.com/assets/7270662/11914202/5c31a814-a69b-11e5-9070-46cfa04c0396.png) 2. resize the window    ![2](https://cloud.githubusercontent.com/assets/7270662/11914207/75521e50-a69b-11e5-91b7-bda98b1e8269.png) 3. resize window again and splitted-editor are affected    ![3](https://cloud.githubusercontent.com/assets/7270662/11914213/a9ee9dc8-a69b-11e5-87c5-7d5bdab44c77.png)  On re-sizing, the vertical partition of the editor should be relative.
4411|"OK, thanks.  I think ctrl+_ previously worked since I've checked out code that uses it.  So, for posterity, you have to use ""ctrl+shift+-"" instead of ""ctrl+_""."
4412|Again, if there is a repository we could clone to reproduce the behaviour, please let us know.
4413|It not working in VS Code. I do click in goto definition and nothing occurs
4414|![image](https://cloud.githubusercontent.com/assets/15263521/11914340/31c4ed0e-a6a8-11e5-92f9-183c640062ab.png)  Facing same issue with typescript. Access modifier 'private' in the constructor, class names and interface names are not colored as expected ...
4415|@akamud try with `setup` and `teardown` instead.
4416|@ufateh this is because you drag the window small enough that the one editor becomes minimized. In this state it will not grow again after you expand.
4417|@DDavo can you attach the files where you expect it to work?
4418|@ErikSchierboom works for me on Mac, are you on another OS?
4419|"Hm, I suspect the issue here is the trailing # for C#, does it work when you pick ""csharp"" instead?"
4420|@bpasero in sublime editor, re-sizing window do not minimize any of the editors.
4421|So now I feel less alone with syntax highlighting issues.  Got same issues with **javascript ES6**. As examples -  `import` (was red before) is now just grey -  `constructor` is now grey  _Occurs in  `OSX El capitan` and `windows 10`._  Jsx seems not that much impacted (but still improvements to be done).  > To conclude, **thank you** for all that work already done in VSCode :+1:
4422|"I have my function1   ![sin titulo](https://cloud.githubusercontent.com/assets/5210735/11914704/c350e95c-a654-11e5-9bc0-16586a852d43.png)  and my function1 is in another file there  ![sin titulo](https://cloud.githubusercontent.com/assets/5210735/11914738/149d7e56-a655-11e5-80de-65fdea58887c.png)  I expect that if in the first file I do click ""goto definition""  in function1  it goes to the second file (that should  it is already opened) and it puts the cursor in the function1"
4423|@dbaeumer @bpasero What info you still need?
4424|Maybe I'm off the mark, but could you be running into this issue?  http://stackoverflow.com/questions/22475849/node-js-error-enospc  also look at answer here:  http://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc/31926452#31926452
4425|Sorted, thanks for the help guys.
4426|Thanks @bpasero
4427|~~+1~~  ~~A large project that uses Mercurial is [CPython](https://hg.python.org/cpython/). It would be great if we could get VCS support while working on that and other Mercurial projects in VS Code.~~  Never mind. CPython is [moving to GitHub](https://mail.python.org/pipermail/core-workflow/2016-January/000345.html).
4428|I tried it in the latest version and I still can't get it to work for .ts or .tsx files.  I am using Ubuntu 15.04 with 64 bit version of vscode. Find all references, find symbols, go to definition, intellisense, nothing works. I have tried it in 3-4 machines in our office and it does not work on those machines as well.  I can lookup the code and try to debug the issue, can you please point me to some location in code which is either an starting point or somewhere related to these functionalities.
4429|The other thing that Sublime does very well here is select the newline character at the end of each line, which means super easy deletions of whole lines and moving up the remaining text. Please consider supporting this too.
4430|Fixed, thanks
4431|Not only PHP related. SQL should be highlighted also when I'm doing a query in NodeJS, just like it should highlight HTML inside strings. The feature is called language injection in WebStorm.
4432|I have this exact same problem! The keybindings.json tells me i have to use a different shortcut for my current keyboard layout (cmd+z) but that does not work (it still undo's). Changing my keyboard layout does not work either, the keybindings.json comes up with different but still wrong suggestions.
4433|Thanks for the workaround!
4434|Look here:  https://github.com/Microsoft/vscode/issues/1463
4435|@bgse Thank you!
4436|dupe of #1463
4437|you can see the possible values by clearing out the value and pressing Cmd+Space:  ![image](https://cloud.githubusercontent.com/assets/1487073/11915759/3c335f66-a66a-11e5-920c-4a2f0aa31d46.png)
4438|Thanks for this information. Should I close this then since a solution exists?
4439|I'll check in a fix for the comments as originally suggested, thanks!!
4440|It appears that the December release 0.10.5 has resolved this issue. Now when viewing files outside of index.js (both sibling and nested below it) the green underlines are not rendered.  Nothing in the update seems to point at what resolved this issue.
4441|I can confirm I am having this same issue. I can use GitHub Desktop or CLI to push, but I can not sync with VS Code. I tried again with the December update and it was not supported still.
4442|I found the following [Stackoverflow](http://stackoverflow.com/questions/32639393/authentication-failed-on-the-git-remote) post that solved this issue.   Basically, I ran `git config --global credential.helper wincred` from the command line, and restarted VC Code. When I reopened the project, I was now able to sync from VS Code.   Do not know how this persists, and if it is only for that repo (`--global` makes me thing it will work elsewhere).   Can we run this command as part of installation, if this solves the issue?
4443|+1  Intellisense is noticeably slower for me as well - it was fine before the upgrade to the latest version. I'm working with TypeScript projects.
4444|+1 with TypeScript on Windows 10 - some keywords such as `typeof` and `instanceof` are not highlighted at all
4445|I +1 as well. I have just started using WebStorm instead... Which I don't like nearly as much.
4446|Likely related, also strange: - Launch Code via code.exe from the terminal - Go about your business - At some point, break out of any other action in that terminal via <kbd>Ctrl</kbd> + <kbd>C</kbd>  Code will mysteriously exit. Somehow it's listening for <kbd>Ctrl</kbd> + <kbd>C</kbd> from the parent process?  ![ctrlc](https://cloud.githubusercontent.com/assets/5943573/11916664/401e3378-a695-11e5-9ce2-a2d2825b1100.gif)
4447|Seems related to https://github.com/Microsoft/vscode/issues/1109. There are different quirks specific to launching with `code.exe` and `code.cmd`
4448|I found vscode-node-debug and opened a PR there.
4449|Visual studio code.app
4450|+1
4451|"@bpasero Yes, that's it. Changing it to ""csharp"" fixes the problem.  edit: PR is a bit over my head at the moment :)"
4452|"@bpasero I'm also on a Mac. It's this file:  https://raw.githubusercontent.com/ErikSchierboom/ErikSchierboom.github.io/nameof/images/posts/csharp6-under-the-hood-nameof/dotnet-compilation.svg  Any I'm including it in my Markdown as follows:  `<img src=""/images/posts/csharp6-under-the-hood-nameof/dotnet-compilation.svg"" alt=""Compilation of .NET code"" class=""image mod-full-width"" />`"
4453|I have the same problem with you.
4454|Same here.
4455|there have a temporary solution to fix this crash. u need to switch your input method to system default english(U.S.) before start vscode.  then start vscode, u can switch your input method u like.
4456|@stephenzl Thanks, your solution does work.
4457|@ErikSchierboom I think we dont support absolute paths, can you try moving it to the workspace and relative?
4458|Duplicate of https://github.com/Microsoft/vscode/issues/1463
4459|re-opened to discuss here.
4460|@kumarbalap any chance that maybe your disk was getting full and you ran out of space?
4461|The same problem occurs in TS.
4462|Apologies for all the inconveniences. There are several different issues in this issue that we need to untangle.   First some background...  - Between 0.9.0 and 0.10.3 we switched to textmate grammars for most languages.  - In 0.10.5 we have switched to another grammar for JS coloring. This was done to support ES6 syntax in JS. We are now using the same grammar that is used for TypeScript for JS and we are working with the TypeScript team to address JS grammar issues.   Unfortunately, these changes have impacted the default `Dark` and `Light` theme. As described in the [test plan](https://github.com/Microsoft/vscode/wiki/December-Test-Plan#dark-and-light-theme-polish) our goal was to get back as close as possible to what we had in 0.9.0. The reasoning was that there are many more other colorful themes provided (e.g. monokai) if users want more color for JS.  Now to the different issues:  @gpbl in 0.9.0 the `Dark` theme was less colorful and it matched the `Dark` theme of Visual Studio. We went back to this one. Obviously you got used to the coloring we had in 0.10.3 and we were not sensitive enough here when we made the decision to go back to the colors of 0.9.0. My suggestion is to provide a `Dark*` theme as an extension that is aligned with what 0.10.3 provided as soon as possible. We can then decide to switch the default `Dark` theme. Let's keep this issue open to track this problem. I've adjusted the title. Can you try to use another dark theme in the mean time?  @lcrespom this looks like a bug in how we render this token type the Monokai theme. I've extracted this bug into issue #1504  > More on this, look at how missing space in for-loop breaks even more of following highlighting in 0.10.5  @bgse This is issue Microsoft/TypeScript-TmLanguage#17 as you figured above.  @adnan333bd the reduced colors in the `Dark` theme also show up in TypeScript.  @MacKentoch this looks like a bug in the TypeScript grammar. Extracted into Microsoft/TypeScript-TmLanguage#32. Can you please add a snippet to reproduce the problem.  @irakliy81 this looks like an issue in the TypeScript grammar. Can you please report in Microsoft/TypeScript-TmLanguage with a snippet illustrating the issue.
4463|@bpasero I copied the image to the same directory as the Markdown file, used a relative path (both with ./ and without), but it still won't display.
4464|Weird :)
4465|thanks @egamma , I rather use Solarized Light. Thanks, you guys are doing great!
4466|Problem confirmed, hover, goto definition still works but Intellisense is broken.
4467|"@justsayno @prashaantt  the other work around you can try is to disable the built in JS validation. Then you will still get some intellisense in JS but still no support for JSX intellisense. To disable the built-in JS validation add the following setting to your user or workspace settings:  ``` json {     ""javascript.validate.enable"": false } ```  Please let me know what you think works better, than we can adjust the work around recommendation."
4468|"I cannot reproduce this and I'm on Win 10. Is there any error in the Chrome Dev Tools  Console (Help | Show Developer Tools | Console)"
4469|We will consider this. In the meantime you can customize the key bindings for you to reduce the frustration, pls see https://code.visualstudio.com/docs/customization/keybindings
4470|> I tried it in the latest version and I still can't get it to work for .ts or .tsx files.   Are you referring to format or find references?  When it is find references I suspect something with your setup. Do you have tsconfig.json defined (https://code.visualstudio.com/docs/languages/typescript)?  Can you try this project https://github.com/Microsoft/vscode-samples/tree/master/node-express-typescript and do a reference search in `src`\app.ts.
4471|@thaina. Now it is clear, thanks. Node.js supports to require a json file since a while, but unfortunately we do not support this in the JS language service, yet.
4472|@akamud you can also configure mocha to use `bdd` instead of `tdd` in test/index.ts.  ``` typescript testRunner.configure({     ui: 'bdd',      // the TDD UI is being used in extension.test.ts (suite, test, etc.)     useColors: true, // colored output from test results     timeout: 5000 }); ```
4473|CCing martin @aeschli
4474|Thank you for making it clear, so VSCode _is_ using Mocha, I just mixed BDD with TDD.
4475|On a related note, intellisense parameter documentation seems not quite right; note the cutoff XML: ![screen shot 2015-12-20 at 18 19 14](https://cloud.githubusercontent.com/assets/594564/11919000/3f02b5ac-a746-11e5-9bd0-da459a1ee4b6.png)
4476|@prashaantt thanks, reopening the issue.
4477|:+1:  Except I think you don't have to hold ctrl just to cut/paste - ctrl once dragging makes it copy instead of cut, right?  But regular drag gets rid of the original, moves it to the new location.
4478|@bpasero I couldn't find this from the backlog anymore. Is this issue still open? Also I didn't quite follow why the issue title was changed to target Windows only? I would really like to see this feature in Linux too!  One of the biggest reasons I like to use minimalistic editors is that I hate wasting screen space for stuff I will most certainly use through a keyboard or command palette. In case this is closed/removed from the backlog, should I create another feature request for it?
4479|From my testing the function I used to hide the menu did not work on Linux.
4480|+1 for this. I would say that being able to hide any distracting/unused UI elements being one of the appeal factors with the highly configurable non-IDE code editors (which I presume is the category Code is targeting).  As a side note, is there any way to vote on the feature requests? I'm pretty sure this is not the way to do it. I tried to look for tips on the submitting bugs and feature requests page but didn't find any guidelines on this.
4481|CC @chrisdias   @jwulf I'm responsible for this and I'm happy to change this, but here is my reasoning...  A pull request is almost always a collaboration between a contributor and a core team member, sometimes another community member chimes in. I found it strange to only give credits to the initiator of the PR but not the team member and others that contributed to the PR until it got merged. Enumerating all contributors to the PR is strange as well. For this reason I decided to only include the link to the Pull Request. In this way seeing the collaboration on the PR is only a click away.  Does this reasoning make sense to you?  Another idea was to have a page with all the contributors on the web site.
4482|@hadi77ir the feature request makes sense, but this is also a great opportunity for a Code contribution/extension from to the Unity community.
4483|@ristomatti Here are our [guidelines](https://github.com/Microsoft/vscode/wiki/Feedback-Channels) which are work in progress, to be honest we haven't fully settled on how to separate a discussion inside github issues and usevoice
4484|Ya, miss the more colorful version.
4485|+1
4486|Thanks @egamma for the clarification! I wasn't aware about that test plan 😄. The `Dark` and `Light` default themes were very nice in 0.10.3, I'm already missing them.
4487|This is a consequence of #1470, pls see my [comment](https://github.com/Microsoft/vscode/issues/1470#issuecomment-166111410) for background and apologies.  Can you please try another theme e.g. Monokai? There the tokens should be rendered properly.  Closing as a duplicate of #1470
4488|Hi **@mattblagden**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
4489|@supports isn't included in either the css.plist or cssParser.ts yet. There are a few at-rules missing.
4490|With that CSS style, the editing cursor renders in an incorrect position when the insertion point is at the end of a line.  Moving the cursor to the end of a line makes it (visually) jump to an earlier point in the line. It remains at the incorrect point (or sometimes jumps back and forth) as you type characters. This happens regardless of whether it was placed there with the mouse or the keyboard.  ![broken cursor](http://i.imgur.com/MHFc0HL.gif)  This is the result of a Chromium bug that [has been fixed](https://code.google.com/p/chromium/issues/detail?id=487028), so it should eventually make it into a release of VS Code (which is the proper solution to the problem).  ---  If you're like me, you want those sweet sweet ligatures right now! Let's get to it.  I put up a hacky pull request with a workaround. If you build VS Code locally, you can include #1510 to use it.  If you don't want to run a dev build, you can cram the workaround into existing versions of VS Code.  For example, on OSX: 1. Close VS Code. 2. Enable ligature rendering by opening `/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.css` and adding the following to the end:         ```    .monaco-editor {            text-rendering: optimizeLegibility;    }    ```        Now you have ligatures and a broken editing cursor. 3. Apply the broken-cursor-workaround by opening `Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js` and changing:        ```    u.setStart(h,n),u.setEnd(p,r);var f=u.getClientRects(),m=null;return f.length>0&&(m=this._createRawVisibleRangesFromClientRects(f,o,s,a)),m    ```        to        ```    u.setStart(h,n),u.setEnd(p,r);var f=u.getClientRects(),m=null;return f.length>0&&(m=this._createRawVisibleRangesFromClientRects(f,o,s,a)),(h === p && n === r && r === p.textContent.length) ? (m[0].left = Math.max(0, p.parentElement.getBoundingClientRect().right - a)) : 0,m    ```        Of course, the exact code to be replaced depends on the result of minification, so you may have to adjust accordingly if you have a different version (this example is from the latest version of VS Code for OSX as of the time of writing, 0.10.5. EDIT: It appears to still be the same in 0.10.6). You can refer to #1510 to get a better idea of what the change is doing, if you need to apply it to other minifications. 4. Configure your VS Code preferences to use a font with ligatures (a couple are mentioned in the original issue).  If all went well, you now have some lovely ligatures, with a functioning editing cursor.  ![working cursor](http://i.imgur.com/1m6p4L8.gif)
4491|``` js u.setStart(h,n),u.setEnd(p,r);var f=u.getClientRects(),m=null;return f.length>0&&(m=this._createRawVisibleRangesFromClientRects(f,o,s,a)),m ```  Does anybody have an idea where this line (above) is in the unminified source code? All I can say is, that it's not in [`/src/vs/workbench/workbench.main.js`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/workbench.main.js).
4492|I figured that from the context but I don't see why that would affect this issue. The original issue reported by @be5invis had no platform defined IIRC. Maybe there's something I'm missing here but to me it seems like this issue is still a valid feature request (at least for the other platforms), and therefore should not be closed as the issue is not resolved.  I can report this separately as a multi-platform feature request in case that helps in some way (as this issue is already closed)?
4493|The line of code you pasted is the minified version of [the code here](https://github.com/Microsoft/vscode/blob/014193f5043999ab80579fbd763a3171e22638cf/src/vs/editor/browser/viewParts/lines/viewLine.ts#L350).  The original workaround is implemented in #1510; you can refer to [the files changed in #1510](https://github.com/Microsoft/vscode/pull/1510/files) to see the change in its un-minified form, and in its original context.  The steps listed in my earlier comment are simply back-porting #1510 change to existing (compiled and minified) versions of VS Code.  I haven't checked other versions (or even the current version on other platforms), but I wouldn't be surprised if the minified code differed in each build. That's the trouble with trying to patch minified code, heh.  ---  Side note: The reason you don't see it directly in `workbench.main.js` is because the source of `workbench.main.js` has directives to include many other files. One of the many files (eventually) imported into `workbench.main.js` is the file that needs to be edited: `viewLine.ts`.  `workbench.main.js`, the source file you were looking at, [imports `editor.all`](https://github.com/Microsoft/vscode/blob/18c4a65cb26517c25ce0f487feb6d169145bc647/src/vs/workbench/workbench.main.js#L20), which [imports `codeEditorWidget`](https://github.com/Microsoft/vscode/blob/18c4a65cb26517c25ce0f487feb6d169145bc647/src/vs/editor/browser/editor.all.js#L6), which [imports `viewImpl`](https://github.com/Microsoft/vscode/blob/18c4a65cb26517c25ce0f487feb6d169145bc647/src/vs/editor/browser/widget/codeEditorWidget.ts#L23), which [imports `viewLines`](https://github.com/Microsoft/vscode/blob/18c4a65cb26517c25ce0f487feb6d169145bc647/src/vs/editor/browser/view/viewImpl.ts#L26), which [imports `viewLine`](https://github.com/Microsoft/vscode/blob/18c4a65cb26517c25ce0f487feb6d169145bc647/src/vs/editor/browser/viewParts/lines/viewLines.ts#L11), which is the file that contains the un-minified code in question.
4494|@egamma Thanks! I didn't previously notice the User Voice header being a link. I've now registered there and will vote for the issues there as it seems to make more sense than commenting here.  Maybe it would be a good idea to try to settle on one service that could be used for both feature requests (voting etc.) and bugs/issues? That could greatly simplify managing these.
4495|I was tipped about the User Voice service on an another issue. In case it's of any help mapping GitHub issues and User Voice feature requests, here's a matching User Voice feature request: https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/8345181-hide-menu-bar
4496|Adding sha256 of the file downloaded that I tried to clean install after deleting the .app from Applications: `eab49cfce612f66e66816efbc5341415d2f25c1c7e5ae98d57cfb91016007af5  VSCode-darwin.zip`
4497|"I have a similar issue, since the November update (0.10.2/0.10.3?). Just about every day I'd log in to find my VSCode windows left overnight have all crashed (with the standard uninformative/apologetic crash error, ""Visual Studio Code has crashed"").  Today, after the 0.10.5 update, I had my first crash while I was there - unfortunately not while I was actively using it.  Running VSCode on Windows 7 (64-bit), primarily using it as a JS editor on a very large project - nearly a million lines total (including libs I need to search, so are not excluded). No performance issues in normal use and I didn't notice any excessive resource usage leading up to today's crash.  I'd be happy to provide more detailed error logs/info if someone can point me to them."
4498|OS X 10.11.2, VSCode 0.10.5, crashed
4499|You might be running into this one:  https://github.com/Microsoft/vscode/issues/1463  If that is the case, instructions on how to go back to 0.10.3 are near the top of the discussion, and a possible workaround is near the bottom.
4500|Seems this is not supported for HTML and even in JS is nowhere as smart as Resharper one.
