5701|Thanks for making these themes available again. Colour can be used as visual metadata while navigating through code, so the more colourful the better.
5702|@jrieken Is there some documentation on how to actually call the yo generator? If I try to access the [documentation site](https://code.visualstudio.com/docs/tools/yocode) I get redirected to the main page.  The big problem with fetching _all_ completion items is that it's visible slower. That's why it seems to me that searching only for the snippets directly it's faster.
5703|I having the same issue with my JavaScript in VSCode. I use a common pattern where a function does something and returns an object with a method/property. Its an object factory. I use this pattern a lot, but once in a while I get the same error and red squigglies for No best common types exists among return expressions. Even though the TypeScript declaration file and the function graph are identical to other uses of this pattern.  Actually, after weeks of looking, I resolved my issues. In some functions I was unawares returning a different type than expected. Something I had overlooked when coding. Removing the unexpected return types, the code now parsed by the declaration file without error.
5704|@bpasero Heap snapshots of `Main.js`, `workerMain.js` and `workerMain.js` (2) don't really change. By maybe 5 MB at most.
5705|Adding more on my situation, I tried to run it with a folder open (the one that crashed) but no working files and it didn't happen overnight. So it only happens when a folder is open and there are working files active.
5706|@tonn2y Yes you're right. I've read that in the January release they might add Salsa support, which from what I gather will be a smarter language service for JavaScript editing. However I don't know if this will be supported with Salsa or if it will require separate work.
5707|@joaomoreno  tried and also not work for me after the workaround, the same to @dogfish182   seems it would be better to wait a while to verify the patch before closing issue.
5708|I have now followed the instructions from the other issue and now I'm able to compile flawlessly.  However, VS Code still shows the same two (non existing) errors.  ![codeerror](https://cloud.githubusercontent.com/assets/9283914/12187769/0b0f4a5e-b5af-11e5-86d1-d7cb39fd494c.png)  <br/> The errors are only displayed at these two lines and only in these two modules. I guess VS Code has a problem with the underscored identifier in `_Base.ts`. Moreover, the other line in the other module is displayed as an error while a similar line right below it doesn't show an error.  <br/> I have uploaded the updated sample to the repository. Perhaps you want to clone it to be able to reproduce the issue?  Perhaps the TSC version coming with VS Code might be obsolete compared to the TSC version I'm using for my build? I'm using TypeScript v1.8 for my build.  If that'd be the case, where would an updated TSC version for VS Code need to be saved to so VS code will use the new one? Can VS Code deal with newer TSC versions?
5709|Nice catch! Looks like <kbd>F3</kbd> is probably doing whatever <kbd>ctrl</kbd>+<kbd>f</kbd> is doing to pull in the word the cursor is on before executing a find.
5710|C++ includes aren't colored correctly in Dark+ or Light+, both color the whole line as purple:  Dark:  ![dark](https://cloud.githubusercontent.com/assets/2193314/12188762/13f691e6-b56d-11e5-88ef-1610be5fb1db.png)  Dark+:  ![dark_plus](https://cloud.githubusercontent.com/assets/2193314/12188765/18c5450a-b56d-11e5-9c57-c4175697649f.png)
5711|@bpasero coloring functions in C++ feels pretty essential:  Dark:  ![dark_func](https://cloud.githubusercontent.com/assets/2193314/12188845/d48d7cda-b56d-11e5-952b-aa3ed70d148b.png)  Dark+:  ![dark_plus_func](https://cloud.githubusercontent.com/assets/2193314/12188847/d7bbdc12-b56d-11e5-83df-c4a48cb42e34.png)  On this, it would be nice if the coloring was somewhat consistent across languages, as in functions are colored the same in all languages. It's a little weird how Java functions seems to be colored differently to js, c++ and (especially) C#:  Dark:  ![java_dark_func](https://cloud.githubusercontent.com/assets/2193314/12188937/99f3fd32-b56e-11e5-9b68-f5860885bddf.png)  Dark+:  ![java_dark_plus_func](https://cloud.githubusercontent.com/assets/2193314/12188941/9c8feb14-b56e-11e5-8b14-06eccbeebef1.png)
5712|@joaomoreno That's awesome, didn't know that, thank you man :+1: :)
5713|thinks.
5714|"@bpasero By ""docked window"" I mean the following:  1. Open Code 2. Press on your Keyboard  [Windows-Button]+[Right Arrow] 3. Now the Window is ""docked"" or ""snaped"" to the right half of your screen.  https://www.youtube.com/watch?v=_Y2YG8xydGk  To reproduce the issue now: Drag and drop an file to Code: the Code-Window will un-dock / un-snap"
5715|I cannot reproduce, neither with Win7, nor Win10. Maybe you could record a video?
5716|@vilaskadam can you check if there is something in the extensions folder on disk? That one goes into your user home directory/.vscode/extensions? If so, can you temporarly delete the contents and then restart? If it reproduces please share those contents with us.
5717|@Elusive138 we spawn other processes that can cause the memory pressure and they would not show up in the heap profile. However from one of your previous posts it seems you had identified the high memory coming from the renderer process and that one should show up under the heap snap shot. Are you sure you saw the high memory for the renderer process and not for its children? because the renderer is the parent of other processes that it spawns, e.g. a process for file watching.  @Tyriar can you be more specific what you mean by that. is it that you did not open any file in the editor or that you literally had the working files section empty?  The reason I am asking about opening a file or not is that for example the JS language service only starts once you open a JS file. The same is true for any other language service. So if this issue reproduces without opening a file in the editor it is likely that the memory leak is not in any language service but somewhere else.
5718|Another thing worthwhile to try: Run without any extension to see if maybe an extension is leaking. You can run with `--disable-extensions` to do so.
5719|"For those that see high CPU use, please identify the arguments for the proces (e.g. ps aux | grep <pid>) so that we know which of the processes that Code spawns is the one in charge."
5720|@bpasero I'm sure the command line provided above was for 4772, the highlighted (leaky) one in the screenshot. It does say `--type=renderer`.  I'll leave it running over the weekend again and see what happens. I don't think I've done a clean test with no JS files open yet.
5721|Please find a video of the behaviour and a protocol from psr.exe below: [screen.mp4.zip](https://github.com/Microsoft/vscode/files/82255/screen.mp4.zip) [un-snap.zip](https://github.com/Microsoft/vscode/files/82256/un-snap.zip)
5722|@bpasero I believe I had no file open (on the right), only working files above the tree. If I remember when I finish work I'll try check with a file open and note the language.  I don't know for sure but it probably wasn't a JavaScript file when mine crashed, more likely C++, Java or no language. I'll be sure to check.
5723|@bpasero fyi in case it's you
5724|`npm install yo` and `npm install generator-code` should be all you need. then run `yo code`
5725|@Tyriar if it reproduces only by having something under working files and with all editors closed (right from the startup - that is important), we might be on to something.
5726|@dogfish182 @iamzhout By _not working_ what do you mean? What error do you see? Did you also set the configuration `http.proxyStrictSSL` to `false` in your configuration settings?
5727|@chrisdias It seems that we should write a Navigation blog post, highlighting the exceptional Code features in this area.
5728|@bpasero I might try open a bunch of instances under varying conditions before leaving work on Friday and see if I can get all of my experiments out of the way in one night. Unless you have reason to believe one instance of vscode hanging would break all the others?
5729|@SkaterDad can you attach the profile dump?
5730|"@joaomoreno  for me, still the same error message saying ""unable to verify the first certificate"".   ![20160105_vscode_unable_certificate](https://cloud.githubusercontent.com/assets/14846203/12105415/8d1ca4fa-b38f-11e5-80e9-31eccb1e9902.PNG)  I do have set `""http.proxyStrictSSL"": false` ![20160105_vscode_user_setting](https://cloud.githubusercontent.com/assets/14846203/12105548/cc12701c-b390-11e5-9928-58eeed452b9c.PNG)"
5731|@joaomoreno I've included a screenshot 2 replies above yours of both the suggested change and the error message in one screen. Note that after making the change above, I restarted the application and re-opened it to that page to capture the error.   the error at the top of the screenshot shows 'error unable to get local certificate' which is what I have seen since the initial install of this product.   Initially I was receiving this error when even attempting to LIST extensions for install. Then I went to zscaler and put in an SSL bypass check for the entire visualstudio.com domain. Now I can list the extensions to install and I can also grab the readme etc. However once I select the extension to install, I immediately fail out. I feel this is an important point to note, because I was able to see some difference after whitelisting the visualstudio domain as bypass. no idea what it means, but I had figured the issue resolved as it let me progress.  EDIT: I should note that I do NOT need to manually specify a proxy as our network throws everything at zscaler, so it's always proxied without config, but I did add the http.proxyStrictSSL : false setting as shown ![2016-01-08_09-35-24](https://cloud.githubusercontent.com/assets/5390419/12193793/33df4d6c-b5eb-11e5-8c28-0ba078e18b9f.png)  also, for laughs I pushed in the zscaler cloud proxy addresses manually anyway to see what happens and I get the following ![image](https://cloud.githubusercontent.com/assets/5390419/12193884/dcf669d0-b5eb-11e5-990d-754870224e4d.png)  despite being able to use this exact config in internet explorer manually specified I see the above.   Also exact same behaviour, can retrieve the extension names, but cannot install.
5732|#1044
5733|@Tyriar yes totally, if you have more than one window open it all adds up to the total memory being used and they all would crash. This is because when you open multiple windows, they still share all one parent process and one memory limit of something like 1-1.5 GB. To really understand where the leak is coming from it would be best to measure 1 window isolated under these conditions: - no extension enabled via `--disable-extensions` (an extension that consumes lots of memory or leaks would also cause a crash) - no file opened on startup (just closing a file after startup is already too late) - no working file under working files  btw the only thing for working files that might have an impact is that for each working file that is not inside the workspace we install a file watcher to watch for changes. maybe this causes the leak, would be surprising though. also, we do not install a watcher if the file is inside the workspace that is opened, only for files outside.
5734|@joaomoreno I noticed below stack trace in developer console, but seems not of so much information.  ``` unable to verify the first certificate: Error: unable to verify the first certificate     at Error (native)     at TLSSocket.<anonymous> (_tls_wrap.js:1000:38)     at emitNone (events.js:67:13)     at TLSSocket.emit (events.js:166:7)     at TLSSocket._finishInit (_tls_wrap.js:567:8) unable to verify the first certificate: Error: unable to verify the first certificate     at Error (native)     at TLSSocket.<anonymous> (_tls_wrap.js:1000:38)     at emitNone (events.js:67:13)     at TLSSocket.emit (events.js:166:7)     at TLSSocket._finishInit (_tls_wrap.js:567:8) ```
5735|Yeah a regression from the font change, @isidorn please apply magic
5736|Both of you definitely have different issues.  @dogfish182 Yours definitely sounds like a separate issue, mainly due to the message `unable to get local issuer certificate`. I've moved it to #1862.  @iamzhout Argh, I'm running out of ideas. You get the error when you browse extensions, or when you try to install one?  It would really be helpful if someone could help me setup a scenario in which I could reproduce this...
5737|Related to nodejs/node#3742
5738|Isn't this an issue with quick open?
5739|I do not see this behavior when I type in the file search while a search is running.
5740|I'm still working on better c# coloring. Unfortunately the tokenizer we use for c# behaves differently.
5741|Fixed with 42c3b94
5742|"It's a nice idea but maybe It's a better idea to use an array instead of a map of globbing patterns. The order in which you specify the rules matter because what should be done in this case?  ``` json ""files.settings"": {   ""**/*.idt"": {     ""editor.insertSpaces"": false,     ""diffEditor.ignoreTrimWhitespace"": false   },   ""**/file.idt"": {     ""editor.insertSpaces"": true,     ""diffEditor.ignoreTrimWhitespace"": true   }, } ```  Maps don't keep their order so the result in this case is not known untill you test it. If `**/*.idt` is executed after `**/file.idt`, there is no way to specify other rules for `file.idt`.  When using an array, the order is kept and you know the outcome of the following settings.  ``` json ""files.settings"": [   {     ""files"": [""**/*.idt"", ""**/*.json""],     ""editor.insertSpaces"": false,     ""diffEditor.ignoreTrimWhitespace"": false   },   {     ""files"": ""**/index.idt"",     ""editor.insertSpaces"": true,     ""diffEditor.ignoreTrimWhitespace"": true   } ] ```  This way, you know for sure that `index.idt` will have the setting `editor.insertSpaces: true`.  We had a similar discussion in the [XO](https://github.com/sindresorhus/xo) linter for overridable configs. More information can be found here https://github.com/sindresorhus/xo/pull/58"
5743|@joaomoreno should be the time when browsing extensions,   my OS is windows 7, the steps to reproduce is as below: - open vscode - `ctrl + shift + p` -> type `install extension` -> press enter  then the error will occur. The proxy I configured for vscode is the same to Atom.  Is it possible that I can do something to capture more detailed log for your analysis?
5744|And how do you do that?
5745|"@rhbecker Thank you for the feedback and I'm happy you're happy!  I've left <kbd>alt</kbd>+<kbd>c</kbd>, <kbd>alt</kbd>+<kbd>r</kbd> and <kbd>alt</kbd>+<kbd>w</kbd> intentionally without the `findWidgetVisible` context condition because the find widget modifiers also affect <kbd>Ctrl</kbd>+<kbd>D</kbd> and <kbd>Ctrl</kbd>+<kbd>K</kbd> <kbd>Ctrl</kbd>+<kbd>D</kbd>.  To see what I mean, check out the following snippet:  ``` cpp #include <iostream>  int main() {     cout << ""hello world""; cout << endl;     cout << ""hello world again"" << endl;     cout << ""Hello world again"" << endl;     cout << ""Helloworld again"" << endl; } ```  Without opening the find widget whatsoever, double click on the first `hello`. All 4 other instances of `hello` (regardless of casing) should get a highlight and <kbd>Ctrl</kbd>+<kbd>D</kbd> will reach them. Now select again the first `hello` and press <kbd>alt</kbd>+<kbd>c</kbd>. Only the first two instances of `hello` (same case) should get a highlight and be reachable via <kbd>Ctrl</kbd>+<kbd>D</kbd>. If you reveal the find widget, you will notice the case modifier is now toggled on."
5746|+1
5747|@bpasero I think Electron shows no context menu whatsoever on `<input>` fields. I've tried the: - find widget inputs - search viewlet input - git commit message input - quick open input - rename variable input
5748|@alexandrudima Ah, that makes sense and is very handy. Thanks for the tip!
5749|@alexandrudima That's a little strange since it's just the Chromium content API underneath everything. Maybe it's disabled and can be turned on somehow? That also might be the reason why all text fields in Atom are `atom-text-editor.mini` as opposed to `input` elements.
5750|@JFLavidalle @joaomoreno have the same error message after applied your fix and trying to install ionide extension. I have no clue which requests blocks my corporate proxy **end of central directory record signature not found**
5751|@joaomoreno I think you made a change where your quick open provider has full control over the progress bar and no other provider is leveraging that. Instead they just rely on the controller to start showing progress if no results are returned for 800ms.
5752|Yes, just talked about this with @jrieken
5753|@alexandrudima can you try in a standalone electron sample, maybe we are eating the right click event to prevent showing the native context menu?
5754|To confirm @takuan-osho @JFLavidalle @vilinski: Do you get the **end of central directory record signature not found** error when you try to browse extensions or when you try to install an extension?
5755|fix delivered
5756|duplicate of #1864
5757|Negative. I do exactly the same everyone does.
5758|The quick open widget simply [stops the progress bar every time the user types](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/quickopen/quickOpenController.ts#L566) and then restarts it.  The gallery does have instant progress bar displayed, as opposed to the 800ms of every other handler.  But the jumping UI seems like it's something I cannot control from my handler.
5759|It is a consequence of setting `instantProgress` to true when registering the handler, no other handler does that. I suggest to remove this flag and behave like all other handlers.
5760|Ok, I think I got it. I was able to get the same untrusted error using the [Charles](https://www.charlesproxy.com/documentation/proxying/ssl-proxying/) proxy software.  ![image](https://cloud.githubusercontent.com/assets/22350/12195919/46beddac-b5fb-11e5-95c8-e8b1e6379fe1.png)  I was then finally able to figure out why the setting was being ignored. Pushed a fix.  Can I ask you to test this out? I've uploaded [a build with the fix in](https://ticino.blob.core.windows.net/build/f88ab736b3382efa2cfa409f80935457c4c6179e/VSCode-win32.zip?st=2016-01-07T10%3A55%3A00Z&se=2016-02-09T10%3A55%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=ogYQg4is25EfNA%2BrIEPLOiPrbZ71h7iBRNuBdNFdmu4%3D). Please close any Code instances, extract it and run the `Code.exe` within it. Let me know how it goes.
5761|@joaomoreno When trying to install an extension in my case.
5762|Some ideas from talking to Joh:  Most of the methods in `IEditorService` should move to `IPartService` and talk about the general concept of parts in the slots 1-3. Since a control in one of the slots can also be something else than a code editor, it would make sense to call these things more generally parts than editors.  The `IEditorService.resolve()` method could move into the `IModelService` or similar. It's use case is mainly only for code editor models, with few exceptions that we maybe can handle different.  There should be a service that allows to open a `URI` in the editor at a position.
5763|I'm not sure how to address this for myself as I have a standard install of win10 without any node stuff that i knowingly installed... also the issue presents on a fresh windows 7 corporate image that we don't use for development, so a basic install of win 7 for us (and 10 and 8.1) will all exhibit the same issue.
5764|Just out of curiosity, how comes this one has the typescript label attached to it? Does the typescript language service provide the code formatting?  Also one thing I think I forgot to mention is that Visual Studio on Windows (i.e. the classic version) allows users to change some basic code formatting options like the one I mentioned above.
5765|Still have this issue on 0.10.6.   As usual i will open 2 project(folder),  one is php and the another is javascript.   How can i commit a log or other things in details?
5766|I delivered a fix for csharp. Please update the extension.
5767|@ccimage What if you open only the JavaScript project? The JavaScript language service is doing real work as it needs to analyze and open potentially all files in folder and subfolders.  For PHP, did you configure the PHP command? If not. it should not consume much.
5768|@joaomoreno me too, trying to install, browsing works always
5769|Hi **@YuichiNukiyama**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
5770|After Code checking updates, let's select whether or not to download the new version installer.
5771|Just to add another data point: I'm getting this too after using strictssl false, the workaround and NODE_TLS_REJECT_UNAUTHORIZED=0 when trying to install an extension.  (without the TLS_REJECT env it doesn't work for me at all still)
5772|@bpasero Here you go!  I didn't realize you could attach files to Github issues.  [profiles.zip](https://github.com/Microsoft/vscode/files/82750/profiles.zip)
5773|:+1:
5774|PR delivered, thanks @dpodder!
5775|fixed by #1678
5776|Yes, the typescript language service provides the code formatting and the tsserver protocol has already options to control the formatting. However we haven't wired that up yet.
5777|This issue was moved to Microsoft/TypeScript-TmLanguage#43
5778|This issue was moved to textmate/c.tmbundle#32
5779|This issue was moved to textmate/css.tmbundle#24
5780|We won't support this, as we want to keep our users on a steady update channel.
5781|@isidorn for breakpoints persisted in a previous session I do not get the 'adapterData' back in the setBreakpointsRequest.
5782|We changed the default themes to be more consistent with Visual studio where css attribute values are white (or red for string values) regardless if valid or not.
5783|I think the validation if a value is correct or not should be done in a validator. Having this also in the  tokenizer will make the tokenizer more complex and we will have to update on every spec change.
5784|That's already what we do. The overview ruler shows helps you find the marked areas if the file is large. ![image](https://cloud.githubusercontent.com/assets/6461412/12200584/0274c240-b620-11e5-94d3-b5140bdfcb94.png)  Please reopen if I misunderstood.
5785|The python tokenizer (originating from https://github.com/textmate/python.tmbundle) treats 'in' as an operator. Changing the color of that would impact all other operators like =, +, .... Our default themes render operators white (resp. black) (was gray in November but that was bug)  Sorry, we have no plans to change that for the default themes.
5786|"Here is the proposal that you can already try out by installing the generator from the next branch:  `npm install --g generator-code@next` - an extension is now generated with a npm post install script that will download the correct version of vscode.d.ts depending on the engine field of the extension - the logic to find the right version to download is by applying a semver check and taking the smallest vscode version that qualifies the engine version - you can specify to depend on `vscode: ""*""` and this will pull down the vscode.d.ts as we have it on master  To not break existing extensions, we publish the `vscode` module as version `0.2.0`.   In order for existing extensions to adopt this change: - change dependency of `vscode` to `0.2.0` - add the following scripts section to `package.json`:  ``` ""scripts"": {    ""postinstall"": ""node ./node_modules/vscode/bin/install"" } ``` - adjust the `engine` field for vscode depending on API needs - run `npm install` to pull  down the correct vscode.d.ts version  Note: If you leave the `engine` field for vscode the way it was (`^0.10.1`), you will end up with an old vscode.d.ts that does not have our latest documentation. Therefor it is recommended to change the engine field to `^0.10.6`."
5787|I was using code from the command line in a directory that is a git repository somewhere deep in my user profile, if that's good enough. I started searching for the configuration option mentioned above after experiencing problems launching VS Code.  Is the content of code.cmd and code.js that I reported correct for the latest (few) version(s) of VS Code?  Note that the registry key I mentioned refers to code.exe within the directory of installation, Code.cmd uses `%~dp0..\\code.exe` and code.js uses `resolve(__dirname, '..', 'Code.exe')`. If that code.exe isn't the correct one, that's a problem in VS Code.   I might reinstall, but most people don't. They install the new version through the prompts provided by code.exe when you release a new version. That's what I did this time, too. So if that produces this problem and clean install fixes it, it's a problem in VS Code.
5788|This is a duplicate of https://github.com/Microsoft/vscode/issues/1747  The change in question was made in https://github.com/Microsoft/vscode/issues/498
5789|@DenSmoke Denis, can you paste problematic snippet? It looks like an issue with Unicode characters which I see as well, but I get different errors. Thanks!
5790|[Dark+] Not sure if this is intentional but Java strings are colored inconsistently based on whether they're assigned to variables or not:  ![java_strings_1](https://cloud.githubusercontent.com/assets/2193314/12201665/7cad0144-b5da-11e5-8875-41aa77d2d6e5.png)  Styled with:  ``` css .monaco-editor.vs-dark .token.string.quoted.variable {     color: #74B0DF; } ```  ![java_strings_2](https://cloud.githubusercontent.com/assets/2193314/12201668/7ede464e-b5da-11e5-817d-ba052070c872.png)  Styled with:  ``` css .monaco-editor.vs-dark .token.string, .monaco-editor.vs-dark .token.string.tag, .monaco-editor.vs-dark .token.string.value {     color: #CE9178; } ```
5791|Adding myself as a participant
5792|"@SkaterDad do you have extensions installed? Could you try the same thing with ""code --disable-extensions"""
5793|"@aeschli  5.1.1 INSERT INTO     ТОВАРЫ(ИЗГОТОВИТЕЛЬ,ШИФР,НАИМЕНОВАНИЕ,ЦЕНА,ЛИМИТ) VALUES      ('ААА','А01','Какой то товар',100,20)     SELECT \* FROM ТОВАРЫ 5.2.1 INSERT INTO     СТРОКИ_ПРАЙСА (КОД_ТОВАРА,НАЗВАНИЕ_ТОВАРА,ЦЕНА_ТОВАРА)     SELECT         ИЗГОТОВИТЕЛЬ||ШИФР,НАИМЕНОВАНИЕ,ЦЕНА     FROM          ТОВАРЫ     WHERE         ИЗГОТОВИТЕЛЬ<>'ЗОМ'"
5794|@bpasero There were no extensions installed on the 'built from source' profile.  I had the eslint extension installed in the other one, but the slowness predates that.  When typing `ext install`, there is about 5 seconds lag after i hit the space before `install` even shows up.  Just did a fresh install of Code v0.10.6 (including removing all the Code related folders from my `users` directory). - The app window opens up about 20 seconds after clicking the shortcut. - The editor shows up about 15-20 seconds later. - Adding `--disable-extensions` didn't affect these times.  Here is the new profile:  [CPU-20160108T102601.zip](https://github.com/Microsoft/vscode/files/82943/CPU-20160108T102601.zip)  I'm not sure if this is related, since the version I built from source didn't give these errors (and was just as slow), but my Console log showed 2 of these:  ``` ApplicationInsights:Sender [Error: connect ECONNREFUSED 23.102.160.172:80     at Object.exports._errnoException (util.js:837:11)…]0: Error: connect ECONNREFUSED 23.102.160.172:80     at Object.exports._errnoException (util.js:837:11)     at exports._exceptionWithHostPort (util.js:860:20)     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1060:14)length: 1__proto__: Array[0] C:\Program Files (x86)\Microsoft VS Code\resources\app\node_modules\applicationinsights\Library\Log…:19 ApplicationInsights:Sender [Error: connect ECONNREFUSED 64.4.54.254:443     at Object.exports._errnoException (util.js:837:11)  …]0: Error: connect ECONNREFUSED 64.4.54.254:443     at Object.exports._errnoException (util.js:837:11)     at exports._exceptionWithHostPort (util.js:860:20)     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1060:14)length: 1__proto__: Array[0] ```
5795|It is emmet that expands on `:` For example. if you do `d:` it would expand to `display: block;` It would good if emmet wouldn't expand if is not at the end of the line
5796|@SkaterDad can you do one of: - https://code.visualstudio.com/Docs/supporting/FAQ#_how-to-disable-crash-reporting - https://code.visualstudio.com/Docs/supporting/FAQ#_how-to-disable-telemetry-reporting  And see if it improves?
5797|@bpasero  Disabling telemetry got rid of my Console errors, but the startup & reload speeds weren't really affected.  Disabling crash reporting didn't have any discernible impact either.
5798|This may be useful: I opened up the `.build/electron` and opened `CodeOSS.exe`.  That took about 20 seconds to fully load.
5799|Any chance Symantec scans the exe heavily and slows loading down? Can you set it to ignore Code?
5800|Notepad++ does this very well: ![image](https://cloud.githubusercontent.com/assets/10532611/12204266/5d16c136-b633-11e5-8e8d-554f3a9b14b9.png)
