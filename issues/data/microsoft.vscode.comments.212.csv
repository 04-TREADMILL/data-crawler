21101|We should support defining watch begin / end pattern without a problem pattern as well.
21102|We have tackled this issue as part of #3789 I will leave this one open for being able to take a json config directly - which we do not support at the moment.
21103|@Brakkar just to be sure. When you edit and save files in VS Code is the built triggered in the terminal running tsc?   To make sure things do not infer please don't start the task inside VS Code.
21104|"could the mouse commands be customised in the `keybindings.json`? Like:  `{ ""key"": ""cmd+mouse1-click"",              ""command"": ""editor.action.insertCursorAtMousePosition"",    ""when"": ""editorTextFocus"" }`  I'm (as probably many user are) used to the sublime text keybindings and the keyboard commands are customisable, but the mouse commands are not."
21105|This is not an area where we would easily accept PRs, sorry. It needs more thinking than just allowing to open the same folder in multiple windows. People might expect this to be a very light weight operation because the folder is already open in one window. In fact, the 2 windows share nothing and so you end up with multiple language services. I find this OK but not everyone in the team currently would agree to that.
21106|@jrieken maybe you could answer the question in https://github.com/Microsoft/vscode/issues/6101#issuecomment-218148979
21107|@seanmcbreen fyi master of telemetry data
21108|Still not for me :-(. Do you have additional steps info ?  ![bug](https://cloud.githubusercontent.com/assets/1931590/15148090/fac2af76-16c3-11e6-96d1-e38d83250024.gif)
21109|"Thanks Dirk. It seems like I'm able to consistently reproduce this with any arbitrary TypeScript file even outside the context of any project, and I confirmed with someone else working on the same project that he couldn't reproduce this issue within the project.  That said, an almost up-to-date version of the project is at https://github.com/cyph/cyph/tree/master/shared/js, and the current tsconfig.json is:  ``` {     ""compileOnSave"": true,     ""compilerOptions"": {          ""target"": ""es5"",          ""module"": ""system"",          ""moduleResolution"": ""classic"",          ""emitDecoratorMetadata"": true,          ""experimentalDecorators"": true,          ""rootDir"": "".""     } } ```"
21110|@bpasero Yes, sure. I thought about that when I realized #101 was created some times before this one.
21111|I am seeing this after updating to 1.1  Edit: It went away after closing everything and launching again.
21112|"@MarkPieszak VS Code 1.1 supports something like this already: see section ""Smart code stepping"" in https://code.visualstudio.com/updates#_nodejs-debugging Currently this only works for a very specific use case, but it should be possible to extend this to your scenario as well."
21113|"Capitalization of strings ""Ctrl"", ""Alt"", ""Shift"" is fixed on all languages."
21114|@Janne252 `Uri.file` always assumes the argument is a file path - that means url-specific characters like `#` and `?` will be encoded. To add query parameters and a fragment you should use `Uri.parse`
21115|Ok good.
21116|Also, as per that document, last night I tried configuring a task runner as well. This allowed me to successfully build the project and see the output in VS Code, but had no impact on my problem.
21117|Thanks @weinand I'm looking at it right now, you guys are one step ahead of me, glad it's at least in the works! :+1: I'll close this out since it's already on your guys radar.
21118|Closing since info is still missing.
21119|@Zalatos ping
21120|Wouldn't it be possible to use the `problemMatcher` also for the clickable links?
21121|@MarkPieszak let's keep this feature request open until your scenario is actually supported...
21122|Sounds good to me, I can keep testing it as features get released as well.
21123|+1
21124|@MarkPieszak great! I'll let you know.
21125|I found a way to inject code into a node.js started with `--debug`. This fixes the initial problem. The fix will be available in VS Code - alpha.
21126|"I have a similar problem ""Error starting OmniSharp"" in Visual Studio Code. I'll post the log on the upstream bug."
21127|"@dbaeumer Thanks! I wasn't aware of the watching config. [This](https://github.com/skolmer/react-hot-boilerplate-vscode/commit/a066924233cc16e844db0feb25482313605adbad) did exactly what I wanted to achieve.   ``` {     ""owner"": ""custom"",     ""pattern"": [],     ""watching"": {         ""activeOnStart"": true,         ""beginsPattern"": ""webpack: bundle is now INVALID"",         ""endsPattern"": ""webpack: bundle is now VALID""     } } ```  It is showing `The problem pattern is invalid. It must have at least a file, message and line or location match group.` in the output but is working as expected."
21128|Ah sorry about that.  finally got round to it today.  Thanks for the info on the information buzzer on the bottom left.  I had assumed the extension was already installed since i couldnt find any progress bar and such.  Left it open to run the installation and it installed successfully. it seems I finished making my edits and opened a new window with a new file or gave up and went to normal VS before I let it finish installing.  Does the installation stop if other VSCode windows are open but the one that initiated the install is closed?
21129|Yes, I think bringing in support for using problem matcher patterns is a good idea.
21130|> Does the installation stop if other VSCode windows are open but the one that initiated the install is closed?  Should continue, but @joaomoreno knows for sure
21131|"@dbaeumer As you see in the folder tree we've a folder called ""src"" where all the source files are located. The compiled .js files are located after compiling in ""dist"" folder.  / ├── /dist ├── /src │   ├── /src/.ts (source files)  So the problem is now the following: When I open the project root in VSCode I'm not able to use function like ""Find all References"" and code completion.  Path openened in VSCode: / ![notworking](https://cloud.githubusercontent.com/assets/4057473/15150687/8bee7f2a-16ce-11e6-8098-b98c8a2c67ba.png)  But when I open the src folder as root for VSCode all those function are working as expected  Path openened in VSCode: /src/ ![working](https://cloud.githubusercontent.com/assets/4057473/15150683/8857a72e-16ce-11e6-8f6d-12e099bfda19.png)  Additionally you see that I don't have the channel typescript... I added the setting you wished to my workspace preferences."
21132|1.factory.js file  ``` (function() { 'use strict';      app.factory('Service', function() {         return{             Callmefromcontroller : function() {            return '1';                 }         }   }); }); ```  2.controller.js  ```  // Controller of the App  app.controller('Aboutus2Ctrl', function ($scope,Service) { Service.Callmefromcontroller();    }); ```
21133|when i press F12 on Callmefromcontroller in controller.js I need to go to Callmefromcontroller defintion method which is in factory.js file?Any help on this
21134|@Spown feature request https://github.com/Microsoft/vscode/issues/6245 covers your suggestion.
21135|I appreciate the general fix to this is to support relative paths, and additional support for problem matchers would be awesome (I did try it!).    I hope that the fact that this is not a general language problem but a TypeScript problem should influence it's priority.  Heck, you guys are using TS 1.8 in vscode itself, do you not miss these?  Or maybe you never have any errors :)
21136|I just attempted to upgrade my Visual Studio Code to v1.10, but I kept getting this error. I was originally unzipping the archive using Stuffit Expander 16.0.5 from the Mac App Store when this happened. I don't know what possessed me to try it, but I unzipped the archive using the built-in Archive Utility and guess what? It worked fine after that.
21137|"New translation implemented.  File: src\vs\editor\contrib\find\common\findController.nls.resx ID: "".resx"", 0; ""changeAll.label"" SRC: Change All Occurrences TGT: 更改所有匹配项"
21138|@vinod-a-ext I formatted the snippet to your previous comment, hope it's still correct.
21139|and to clarify, you want `go to definition` understand the service injection tricks such that the editor knows that the `Service` argument has been injected and find where it was defined?
21140|Closing then. Feel free to reopen if you see this again.
21141|Agreed with @lucidtech  we used to 'working Files' Folder .I think tabs can combine along with this great option?
21142|Spot on @jrieken i need same thing which done perfectly in sublime text editor
21143|@Peter-LaComb is this on a VM?
21144|Also can you try running `code.exe --disable-gpu` from a command prompt from the installation folder of code to see if it makes any difference?
21145|ok. moving to the TypeScript team which provides the brain the behind JavaScript and TypeScript smartness in VS Code. I know they have been starting some work on support for angular et al
21146|This issue was moved to Microsoft/TypeScript#8547
21147|@isidorn since you've removed the workaround for the issue with stopped events overtaking request results, it should now be possible to disable the step action UI until a previous action has finished, right?
21148|1) Not on a VM. 2) code.exe --disable-gpu works perfectly. WIsh I had seen that in the docs.
21149|Hmm... I can't reproduce this anymore, even before upgrading. I _am_ using a different machine this time though, so perhaps my issue is limited to the machine I was using before.  I'll reopen if I can figure out more specifically when this problem occurs.
21150|@weinand theoretically yes. If we go into 'continue' mode as soon as we send a step event the step actions will be nicely disabled. However this will also cause the variables tree to clear and that will have tree flickering as a result between step commands. So I have to experiment more with this to see what is the best solution. Clearing the tree with a timeout sounds like a potential solution.
21151|Today I found a use case for the current sash behavior: I want to make one editor bigger, but have the other two even with each other. I resize the first editor, then double-click the remaining sash.  This won't work with >3 editors if we implement that in the future. Trying to think of a UI design for the general case.
21152|"Ok, we now allow both `vscode.commands.executeCommand('vscode.startDebug', 'MyConfigurationName')` and something like  ``` vscode.commands.executeCommand('vscode.startDebug', {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/hello.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": null,             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null,             ""internalConsoleOptions"": ""openOnFirstSessionStart""         }); ```  Notice that if the passed argument is a string we will try to find the launch configuration in `launch.json`, if the passed argument is an object we will try to use it as a launch configuration.  Try it out on the alpha channel and let me know what you think - thanks!"
21153|We still support this, but we also support passing in the json object, please check my comment in #4615
21154|@egamma @gregvanl we should add this to our FAQ when people run into UI issues like this one, do you agree?
21155|+1
21156|@vsccarl awh yes.  Thanks for reporting this.  Will get on it.
21157|I agree with @coreh that the location of the close tab button should match platform conventions. It would be a rather frustrating context switch to have the location of the close button change when I move from Visual Studio to Visual Studio Code.
21158|"My two cents: One reason why I _love_ Code over Atom, Sublime, or any of the other, ahem, hipster editors is that it doesn't try to shoe-horn in the web browser ""tab"" concept.  The traditional IDEs such as Visual Studio, IDEA, and Eclipse all do this too.  Code, on the other hand, has a ""frames and buffers"" approach, akin to what you'd find in Emacs (and Vim, too, I believe).  Inevitably, in any tab-based editor I find myself obliged to work with results in my editor frames being horribly spammed with tabs for which the folder fobs are so tiny they're unreadable.  Furthermore,  when I use such an editor's equivalent to Ctrl/⌘-P I end up warping to another frame as an artifact of whichever frame I was looking at when I first navigated to the file.  In order to view the the same file in another frame, you have to do a clunky ""split tab"" operation which also often tends to be coupled with splitting frames in many of these editors.  _Tabs tightly couple file buffer state with a given frame on the display._  If you'll excuse the emotional appeal, please _please_ don't turn VS Code into yet another tabbed editor.  I think, from a UX perspective, rather than blindly implementing tabs to match the behaviour of Atom or any other editor, it would be instructive to figure out _why_ people want tabs (other than just comfortable familiarity) and see if a more innovative solution to their needs is possible.  I certainly agree the current workspace regime can continue to evolve: as someone else has mentioned opening a separate window in the same (equivalent to tab-based ""ripout"") project in order to better leverage multi-head displays come to mind!  edit: very sad that I missed the call 19 days ago.  I would have joined if I had known about it. Only found out from the release notes of 1.1.0. :("
21159|@alexandrudima I can understand this may not be a high priority item and hasn't been addressed yet, even though it's quite frustrating for some of us on a daily basis. However, would you mind explaining why you removed the bug label in light of my previous comment?
21160|"@jbrook10 does the entry around ""missing icons"" on http://code.visualstudio.com/Docs/supporting/faq#_windows-faq help?"
21161|![missingintellisense](https://cloud.githubusercontent.com/assets/12818376/15156143/7f7d70f4-169a-11e6-8e43-c665c3670759.gif) Here's a repro on another machine Windows 7.
21162|"Perhaps hidden in #3579 was the request for an extension to have this functionality as a part of the **command** structure (and not particular to an input box).  In that issue, it is described that an extension author may want to have command 'options' show up as they type a command name.  For instance, given commands today that are hard-coded as:  team create bug team create task team create work item  The functionality I'm looking for would be for the command palette to show ""team create"" by default and when ""team create"" was either completed (or the only command option left based on matching) would the values ""bug"", ""task"" and ""work item"" would appear.  This allows extension developers to provide ""dynamic"" commands.  In addition (or maybe alternatively), it would be welcome for a command to take a variable number of arguments.  The command that gets called could then take action based on what was passed in to the command.  In the example above, the command could be ""team create"", then one of the 3 options would appear, and the user could type even more values (that would be passed to the command that was selected)."
21163|The .gif above was done with 1.1 stable but it also repros with latest code-alpha
21164|Tabs are a must for me and another suggestion for e.g. angular 2.0 grouped tabs for related files is a great idea too. If the feature is configurable then those whose preference differs will be happy too. When can we try!!!???
21165|@orospakr, you can turn off the tabs in Sublime through a menu option.  Just FYI.
21166|@bpasero The FAQ solved the issue for me.  Thanks!
21167|@alexandrudima I see that the issue on Chromium side was fixed. Is there any chance to move this issue from Backlog to some milestone in near future? :) Thanks.
21168|@bpasero I'm glad to hear that and I'm sure others are, too. I can testify that as far as Sublime replacements go, Atom doesn't look too good because it feels very slow and laggy, and I would love to have the option to switch to VS Code. That said, losing data is something that in 2016 should be off the table. I want my tabs restored when I reopen the browser and I want my unsaved/untitled buffers restored when I reopen my editor. :)
21169|@Maximus5 Thanks for the answer!  > The reason? I have absolutely no idea. >  Why this workaround was chosen instead of implementing sort of  --dump_debug_to_console  switch >  for those cases when it's really required?  I think @kevinsawicki could help answering your questions as it looks like he introduced the wrapper with https://github.com/atom/atom/pull/4560  > **Solution**  Solution worked for CMD but not for PowerShell (ConEmu alias doesn't seems to work with PS) so I tried replacing `C:\Program Files (x86)\Microsoft VS Code\bin` by `C:\Program Files (x86)\Microsoft VS Code` in `%PATH%` and it seems to be OK with both shells.  > **More strange things**  As you can see in the screenshots below, I do not have any garbage coming from VS Code:  ![image](https://cloud.githubusercontent.com/assets/2091902/15156192/332a25ac-16e6-11e6-90be-b857a25b249f.png)  ![image](https://cloud.githubusercontent.com/assets/2091902/15156036/84a7f14e-16e5-11e6-933b-96f5f5f9ccc2.png)  I now wonder what are the differences between our configurations 😕   Is it the same garbage than reported on https://github.com/atom/atom/issues/11686 ?
21170|This is a fantastic idea. Ensuring a consistent workspace across developers would help with code (style, linting, UX) consistency.
21171|@Tyriar As I have a workaround, feel free to close this issue if you do not intend to implement a more convenient fix.
21172|@bpasero So, what is the current stance on #211 and this (#3200)? Can we expect Icon support within the file explorer? Honestly, everything is monotone and it takes me a while (in projects with many files) to actually distinguish between files and folders.
21173|just to keep things connected:  #3215
21174|@bbenoist You have no garbage, because it's hidden by code window due to `-new_console` switch. Try to run just `code` and see the awful result.
21175|Hey, it might be typo but I do not recall it having much of an effect as I just added some excludes randomly when nothing seemed to work.  Though even if it is the source of my problems, I do not think that the behavior should be like this. As in kind of a silent death without any tool tips or help messages telling me where the problem is?
21176|@Maximus5 You're right 😭   ![image](https://cloud.githubusercontent.com/assets/2091902/15158766/a0ada7b0-16f1-11e6-89ed-a87c7472a7c6.png)
21177|"@orospakr   > it would be instructive to figure out why people want tabs (other than just comfortable familiarity) and see if a more innovative solution to their needs is possible.  There's a ton of feedback about why people want tabs aside of familiarity, not to mention that if it's familiar and people are comfortable with it then it doesn't make sense to get creative and innovate something where there's already something that works.  They tried to innovate with the ""working files"" and one group liked it, the other disliked it and here we are today asking for tabs! I don't think that you want the same syndrome to happen again...  The right way to do it is to get the experience people are looking for first and then have additional features, innovation or experiments during alpha builds and/or as an option.  In this case of tabs/""open editors"" or tomorrow something else they made it optional and that's how it should be people need to have the ability to opt-in to the experience or opt-out from it."
21178|"I know that I am a little late to the game here, but in regards to this section:  > We discussed actions for promoting a preview tab to a full open tab: >  > Editing content inside the tab > Double clicking a file in the explorer > Double clicking the preview tab in the tab group  I would like to request that ""Adding a bookmark"" be included in the above list. I find it extremely frustrating to add a bookmark to a large file and then inadvertently click on another file, closing the working file.  It's very unlikely that I have added a bookmark to a file that I intend to close immediately."
21179|Is there any difference between Monaco Editor and Winjs (http://try.buildwinjs.com/)? They both seem similar. Will Monaco be better than Winjs?
21180|I'm experiencing this in node 4.4.3, I'll report back with more details shortly.  Update: nothing in the developer console.  Also, I am attaching to the process via `node --debug-brk`.  Some breakpoints will hit and I can inspect, others will hit but cannot be inspected.
21181|@egamma - just for clarity, if the linked issue gets implemented, VS Code will automatically get it as well?  This is feature is one the main reasons I still use WebStorm over VS Code.
21182|@gujiman The WinJS site seems to use a version of monaco, since it uses classes like `monaco-editor vs-dark`. The WinJS library itself does not seem to contain any code editor controls.
21183|Good suggestion. Added to vscode-website backlog (currently in a private repo).
21184|For anyone seeing issues in places besides node 6.0, verify that nvm (or similar) isn't confusing things. I had to use launch.json's runtimeExecutable setting to get node 4.4.3 working with nvm while node 6 was installed as an OS package.
21185|Thanks @otgerrogla !
21186|@rhurkes I am attaching to the process in this case, so I don't specify a `runtimeExecutable`.  Also, some breakpoints hit and can be inspected whiled others hit and cannot be inspected.  Here is the stacktrace of an error I get when I attach to the process.  I'm unsure if this is the underlying issue or not..  ``` shell.ts:416 Cannot read property 'getItem' of undefined: TypeError: Cannot read property 'getItem' of undefined     at t.getItem (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:33:4937)     at t.expand (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:32:31848)     at t.expand (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:45:4868)     at file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:97:10912     at e.invoke (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:31:219)     at e.fire (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:31:1672)     at e.setFocusedStackFrame (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:79:8322)     at e.setFocusedStackFrameAndEvaluate (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:103:20519)     at file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:103:16041     at Object.h [as _notify] (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:23:22735)e.onUnexpectedError @ shell.ts:416(anonymous function) @ shell.ts:318e.onUnexpectedError @ errors.ts:73u @ errors.ts:88e.invoke @ callbackList.ts:65e.fire @ event.ts:107e.setFocusedStackFrame @ debugViewModel.ts:36e.setFocusedStackFrameAndEvaluate @ debugService.ts:418(anonymous function) @ debugService.ts:258h @ winjs.base.raw.js:1440__dirname.undefined.P.enter @ winjs.base.raw.js:1127__dirname.undefined.t.Class.define._run @ winjs.base.raw.js:1343__dirname.undefined.t.Class.define._completed @ winjs.base.raw.js:1311h @ winjs.base.raw.js:1440__dirname.undefined.P.enter @ winjs.base.raw.js:1127__dirname.undefined.t.Class.define._run @ winjs.base.raw.js:1343__dirname.undefined.t.Class.define._completed @ winjs.base.raw.js:1311(anonymous function) @ v8Protocol.ts:47e.dispatch @ v8Protocol.ts:117e.handleData @ v8Protocol.ts:84(anonymous function) @ v8Protocol.ts:39emitOne @ events.js:90emit @ events.js:182readableAddChunk @ _stream_readable.js:153Readable.push @ _stream_readable.js:111onread @ net.js:531 ```
21187|Build errors layout we are changing thus forwarding this to @sandy081 Debug horizontal scroll bar is not on the current plan, for inspecting such nested variables you can evaluate them in the repl which should give more space. Though I agree we should think about adding a horizontal scroll bar
21188|I know I'm a bit late, but I finally got around to checking if this was working. I haven't made any code changes to my extension and I'm running 1.1.0 and set the engine to ^1.0.0 package.json and when I go through the steps I listed above it doesn't make the change and I get the following exception in the extension host console:  ``` shell.ts:416 i.getModel(...).getAssociatedResource is not a function: TypeError: i.getModel(...).getAssociatedResource is not a function     at Object.a [as finish] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:57:10149)     at Object.d [as bulkEdit] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:57:9775)     at e.$applyWorkspaceEdit (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:84:1399)     at t.e.handle (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:73:8350)     at s (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:55:27689)     at f (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:55:28366)     at _combinedTickCallback (internal/process/next_tick.js:67:7)     at process._tickCallback (internal/process/next_tick.js:98:9) ```  Does this bug need reopened or am I doing something wrong?  To clarify: doing a normal edit in a normal file still works, but the same edit fails when viewing the file in diff mode.
21189|Every morning, I unlock my computer to find VS Code has crashed overnight. - Mac OS X 10.11.4 (15E65) - VS Code 1.1.0-insider  ![vscode-crashes-every-night](https://cloud.githubusercontent.com/assets/15906/15165628/b5f8316c-175a-11e6-9d85-7587d012ab98.png)  I've usually left files open. I do run with extensions. Are there any settings I can use to help gather more diagnostic information?
21190|The intellisense/autocomplete in Winjs appears to be very slow.  I suggest looking at http://vbguyny.github.io/Ace.Tern/demo.html which uses the ACE editor plus the Tern libraries to create a very powerful and fast editor.
21191|@gujiman WinJS is irrelevant, it is a collection of UI controls which does not contain a source code editor. If you are looking for good examples of Monaco in browser you can check http://www.typescriptlang.org/play/index.html or Visual Studio Live if you have an Azure Subscription.  @egamma Is there any possibility to access Visual Studio Live source code? I know https://github.com/projectkudu/kudu is open source but front end code is not available, right?
21192|Hi @alexandrudima ,  It appears that the issue _returned_ in the version 1.1.0.  Looking at the same source files from your commit, I noted that some of them has changed, but I don't know if this changes could affect the clipboard operations.  Thanks for your help
21193|I think this issue is also what I covered in #3533.
21194|![untitled](https://cloud.githubusercontent.com/assets/900690/15170515/c041de84-1746-11e6-928e-0ebfdd9d3320.gif)  Not reproducible for me, this needs more steps or info.
21195|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21196|Agree, closing as duplicate
21197|+1
21198|> then it gets clamped to the minimum of 1  Why not clamp `-1` and thereby fully disabling wrap? If the user already specified such a huge number, then it would probably equally be as good (but obviously in this case better) just disabling it no matter what, instead of having a single character per line.
21199|@Tyriar I started to do this work with a couple projects, but decided that the overhead wasn't worth it.  Instead, all documentation for my projects now live in the same repo as the source code, and I use https://readthedocs.org/ to display them.  That way, documentation PR's are exactly the same as code PR's.  Will be interesting to see what you put together though.
21200|Is this actually really a duplicate of that issue? That issue is about adding new event types like `onPreSaveTextDocument`. This is more about adding extra information to the event being dispatched.  As you said before, it's quite difficult to change that without breaking the API. Currently only the `TextDocument` is being dispatched. It would be possible to attach an event type to the `TextDocument` but that's not perfect. It would make more sense if it was an event object, something like  ``` js interface EventObject {     document: TextDocument,     action: string } ```  Where `action` is something like `autoSave` or `save`. But that will off course break the entire API.
