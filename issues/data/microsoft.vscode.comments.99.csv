9801|@chanpod in what state is the debugger if the error occurs? Still in a debug session but stopped on a exception? A screenshot of the debugger would be helpful.
9802|Yep that was an oversight. Let me fix that.
9803|http://imgur.com/2wwc547  After I step over this line, the debugger just stops and the server never finishes starting. Seems the debugger kills the entire session.
9804|Adapter decides for each scope if it is [expensive](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L564)  Not sure how powershell defines these, but hover does not sniff inside expensive scopes.
9805|I'm not sure if I understand your answer correctly: Whenever I type `+` while the Intellisense dropdown is displayed, a `+` character is added to the text, but Intellisense display mode is not gettinge changed.  I also noticed that hitting `<CTRL> + <SPACE>` or `<SHIFT> + <CTRL> + <SPACE>`, when pressed from within an existing function parameter list, do _not_ show the above Intellisense feature.
9806|Since we want to review changes to the wiki I suggest we handle documentation the way Chromium does now; a git repository full of .md files (using jekyll?) to enable community contributions.
9807|I agree it would be good to have this configurable, I prefer the current method.
9808|Close in favor of new PR
9809|the screenshots from the closed thread.  before:  ![31b9d640-cf3d-11e5-87f5-96d6fdf70fa5](https://cloud.githubusercontent.com/assets/881944/13189241/c8d3852c-d71b-11e5-816b-fc714823f6c3.PNG)  after:  ![c47d4910-cf3a-11e5-9aff-ac090974fbe5](https://cloud.githubusercontent.com/assets/881944/13189245/cf76e1bc-d71b-11e5-831e-8960327426cf.PNG)  i have a few machines i keep refusing to update now because the Dark Not Plus changed >_>  when it comes to visual assets like themes, you shouldn't just change them ever. you should only ever add new ones or fix bugs. not remove features.
9810|Well, that's because the certificate is valid for `*.vsassets.io` and not `vsassets.io` itself. This is OK, since  Code never reaches onto the bare domain, but always to subdomains of it.
9811|Ok, well I´m no expert in web things myself. I can only tell you what our proxy guy said. In fact it is working now that he told our proxy to ignore invalid certificates on vsassets.io or maybe .vsassets.io, I don´t know. Thank you for your help.
9812|Here is the fix in Atom: https://github.com/lee-dohm/white-cursor
9813|We have not seen this issue since, so closing.
9814|I can probably get you the day when it didn't work.
9815|This was the the date when it didn't work: typescript@1.8.0-dev.20160116. So everything before that works.
9816|TypeScript problem
9817|OK the issue is not related to the scope's `expensive` field as we always set it to `false`.
9818|I opened an issue again the website team, thanks for the report!
9819|Same issue here , debugger just hangs on some random line or never gets past some , using native nodejs compiler/debugger to run application works just fine but whenever running with VS code and some breakpoints it almost never does.
9820|+1 also
9821|you should use this, following the readme: https://github.com/meteor-typescript/meteor-typescript-libs
9822|@waderyan no need for a new PR. I can just commit the changes to the extensiontips.
9823|closed
9824|This issue was moved to Microsoft/TypeScript#7166
9825|@chrisdias can you pls work with @DustinCampbell to make this happen.
9826|Hi **@alexaubry**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
9827|Fixed the last tslint warning...
9828|**@alexaubry**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
9829|We will migrate to the Salsa infrastructure in our next update. Salsa provides less warnings and defers this to a linter like eslint. You can enable a preview of Salsa, pls give it a try https://code.visualstudio.com/Updates#_javascript-salsa-preview
9830|This is possible when you use the `-r` or `--reusewindow` option, pls see https://code.visualstudio.com/docs/editor/codebasics#_launching-from-the-command-line
9831|I thought I use CMD+` all the time, but I currently have no Mac with me to confirm.
9832|Duplicate of #446
9833|This indicates that the file extracted from the error does not exist. Are you using a particular problem matcher from in a task.json?  Can you provide steps for how to reproduce this in a simple setup?
9834|"This is a copy of my task json: // Available variables which can be used inside of strings. // ${workspaceRoot}: the root folder of the team // ${file}: the current opened file // ${fileBasename}: the current opened file's basename // ${fileDirname}: the current opened file's dirname // ${fileExtname}: the current opened file's extension // ${cwd}: the current working directory of the spawned process  // A task runner that calls the Typescript compiler (tsc) and // Compiles a HelloWorld.ts program {     ""version"": ""0.1.0"",  ``` // The command is tsc. Assumes that tsc has been installed using npm install -g typescript ""command"": ""npm"",  // The command is a shell script ""isShellCommand"": true,  // Show the output window only if unrecognized errors occur. ""showOutput"": ""silent"",  // args is the HelloWorld program to compile. ""args"": [""start""],  // use the standard tsc problem matcher to find compile problems // in the output. ""problemMatcher"": ""$tsc"" ```  }  // A task runner that calls the Typescript compiler (tsc) and // compiles based on a tsconfig.json file that is present in // the root of the folder open in VSCode /* {     ""version"": ""0.1.0"",  ``` // The command is tsc. Assumes that tsc has been installed using npm install -g typescript ""command"": ""tsc"",  // The command is a shell script ""isShellCommand"": true,  // Show the output window only if unrecognized errors occur. ""showOutput"": ""silent"",  // Tell the tsc compiler to use the tsconfig.json from the open folder. ""args"": [""-p"", "".""],  // use the standard tsc problem matcher to find compile problems // in the output. ""problemMatcher"": ""$tsc"" ```  } */  // A task runner configuration for gulp. Gulp provides a less task // which compiles less to css. /* {     ""version"": ""0.1.0"",     ""command"": ""gulp"",     ""isShellCommand"": true,     ""tasks"": [         {             ""taskName"": ""less"",             // Make this the default build command.             ""isBuildCommand"": true,             // Show the output window only if unrecognized errors occur.             ""showOutput"": ""silent"",             // Use the standard less compilation problem matcher.             ""problemMatcher"": ""$lessCompile""         }     ] } */  // Uncomment the following section to use jake to build a workspace // cloned from https://github.com/Microsoft/TypeScript.git /* {     ""version"": ""0.1.0"",     // Task runner is jake     ""command"": ""jake"",     // Need to be executed in shell / cmd     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""tasks"": [         {             // TS build command is local.             ""taskName"": ""local"",             // Make this the default build command.             ""isBuildCommand"": true,             // Show the output window only if unrecognized errors occur.             ""showOutput"": ""silent"",             // Use the redefined Typescript output problem matcher.             ""problemMatcher"": [                 ""$tsc""             ]         }     ] } */  // Uncomment the section below to use msbuild and generate problems // for csc, cpp, tsc and vb. The configuration assumes that msbuild // is available on the path and a solution file exists in the // workspace folder root. /* {     ""version"": ""0.1.0"",     ""command"": ""msbuild"",     ""args"": [         // Ask msbuild to generate full paths for file names.         ""/property:GenerateFullPaths=true""     ],     ""taskSelector"": ""/t:"",     ""showOutput"": ""silent"",     ""tasks"": [         {             ""taskName"": ""build"",             // Show the output window only if unrecognized errors occur.             ""showOutput"": ""silent"",             // Use the standard MS compiler pattern to detect errors, warnings             // and infos in the output.             ""problemMatcher"": ""$msCompile""         }     ] } */  // Uncomment the following section to use msbuild which compiles Typescript // and less files. /* {     ""version"": ""0.1.0"",     ""command"": ""msbuild"",     ""args"": [         // Ask msbuild to generate full paths for file names.         ""/property:GenerateFullPaths=true""     ],     ""taskSelector"": ""/t:"",     ""showOutput"": ""silent"",     ""tasks"": [         {             ""taskName"": ""build"",             // Show the output window only if unrecognized errors occur.             ""showOutput"": ""silent"",             // Use the standard MS compiler pattern to detect errors, warnings             // and infos in the output.             ""problemMatcher"": [                 ""$msCompile"",                 ""$lessCompile""             ]         }     ] } _/ // A task runner example that defines a problemMatcher inline instead of using // a predefined one. /_ {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""args"": [""HelloWorld.ts""],     ""showOutput"": ""silent"",     ""problemMatcher"": {         // The problem is owned by the typescript language service. Ensure that the problems         // are merged with problems produced by Visual Studio's language service.         ""owner"": ""typescript"",         // The file name for reported problems is relative to the current working directory.         ""fileLocation"": [""relative"", ""${cwd}""],         // The actual pattern to match problems in the output.         ""pattern"": {             // The regular expression. Matches HelloWorld.ts(2,10): error TS2339: Property 'logg' does not exist on type 'Console'.             ""regexp"": ""^([^\s]._)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\):\s+(error|warning|info)\s+(TS\d+)\s_:\s_(._)$"",             // The match group that denotes the file containing the problem.             ""file"": 1,             // The match group that denotes the problem location.             ""location"": 2,             // The match group that denotes the problem's severity. Can be omitted.             ""severity"": 3,             // The match group that denotes the problem code. Can be omitted.             ""code"": 4,             // The match group that denotes the problem's message.             ""message"": 5         }     } } */"
9835|"and here is the tsconfig: {     ""compilerOptions"": {         ""rootDir"": ""app"",         ""target"": ""es5"",         ""module"": ""system"",         ""moduleResolution"": ""node"",         ""sourceMap"": true,         ""emitDecoratorMetadata"": true,         ""experimentalDecorators"": true,         ""removeComments"": false,         ""noImplicitAny"": false     },     ""exclude"": [         ""node_modules"",         ""typings/browser/"",         ""typings/browser.d.ts""     ] }"
9836|Agreed, this would be a nice enhancement.  You should be able to implement this by implementing an extension that contributes a `DefinitionProvider` for JS. This definition provider would check whether the selected string refers to a file and return a corresponding `Locaction`.  Here is the corresponding API: https://code.visualstudio.com/docs/extensionAPI/vscode-api#_languages
9837|These errors do exist but the file names do not have [0] in the beginning.
9838|This looks like issue #2829 on OS X that has been address in the 0.10.9 update. Pls reopen if this is not the case.
9839|here is a screenshot: ![vscode](https://cloud.githubusercontent.com/assets/13104312/13197364/607766ee-d840-11e5-8b77-3b84b1118504.jpg)
9840|Not clear whether this is Omnisharp or the Code marker infrastructure. The fact that the error count drops to 0 indicates that the marker is properly removed when the file is deleted.
9841|@joaomoreno this could be the code assist/paremeter hints widget and the be an issue independent of C#.
9842|You can invoke all the commands from the Command Palette.  You are not the first one that reports this issue I suggest to show an info message  to the user hides with information for how to bring back the menu bar. The info message would only be shown on first use or it could disappear after some time.
9843|Yes it is a manual step, since a relase on github only provides a zip of the source files it is not really valuable and we should either remove the releases or make them useful.
9844|The VS Code JavaScript infrastructure will switch to Salsa and it is less agressive with errors. You can enable the Salsa preview, can you pls give it a try, see: https://code.visualstudio.com/Updates#_javascript-salsa-preview
9845|// @jrieken
9846|When we do an open file in vscode from the file manager, I do not have the liberty of using command line flags, by default the behaviour of vs code should be that it opens files in an existing instance rather than in a new instance and giving ability to open in an existing instance.  This is totally out of line with basic UI/UX behaviour!
9847|That's not doing it. VSCode thinks that the variables aren't defined since they are not defined in the current source file.  > On 20 Feb 2016, at 14:43, Dino Scheidt notifications@github.com wrote: >  > you should use this, following the readme: > https://github.com/meteor-typescript/meteor-typescript-libs >  > — > Reply to this email directly or view it on GitHub.
9848|ping @mitasoft
9849|"@brennanMKE what version of VS Code are you using and on what platform?  From your description I do not really understand whether there is a real problem with VS Code and mocha tests or whether just the ""sourceMap"" attribute is missing from the template.  Here are some comments: - if your tests are written in TypeScript, then it is necessary to set `sourceMaps` to true and specify where the generated JavaScript code lives (via the `outDir` attribute). But sometimes it is difficult to get the sourceMaps generated correctly (and that makes breakpoint set in TypeScript fail). - the first thing I would try is to turn off sourceMaps, set a breakpoint in the generated JavaScript code and see whether it gets hit. - Then I would verify the sourceMaps by analysing an entry in the ""sources"" array and the value of ""sourceRoot"". Combined they should form a relative path that locates the TS source starting from the generated code location. - launching and debugging the mocha tests from within VS Code should work fine. There should be no need to launch outside and then attach VS Code. Your launch configs look good but I do not understand the ""--debug"", ""--require"", ""source-map-support/register"" arguments to mocha.  I'm using mocha tests written in TypeScript for the VS Code node debugger myself (and I'm not using the ""--debug"", ""--require"", ""source-map-support/register"" arguments). Here is my launch config:  ``` json {     ""name"": ""Run Tests"",     ""type"": ""node"",     ""request"": ""launch"",     ""cwd"": ""${workspaceRoot}"",     ""program"": ""${workspaceRoot}/node_modules/mocha/bin/_mocha"",     ""args"": [         ""-u"", ""tdd"",         ""--timeout"", ""999999"",         ""--colors"",         ""./tests/out""     ],     ""runtimeArgs"": [         ""--nolazy""     ],     ""sourceMaps"": true,     ""outDir"": ""${workspaceRoot}/tests/out"" } ```  I run my test with this launch config and if I have set a breakpoint in TS source or an exception occurs, I'm landing nicely in the TS source."
9850|Closing as a duplicate of #2923
9851|We are migrating to Salsa and Salsa doesn't provide this support. Moving to TypeScript/Salsa for consideration.
9852|This issue was moved to Microsoft/TypeScript#7167
9853|merged - closing
9854|That's very cool, thanks for the link. Will give it a try.   > On 20 Feb 2016, at 15:48, Erich Gamma notifications@github.com wrote: >  > We will migrate to the Salsa infrastructure in our next update. Salsa provides less warnings and defers this to a linter like eslint. You can enable a preview of Salsa, pls give it a try https://code.visualstudio.com/Updates#_javascript-salsa-preview >  > — > Reply to this email directly or view it on GitHub.
9855|@SetTrend sorry markdown mistake... this is what I typed  > You can type <CTRL>+<SPACE> again to toggle between the completion list and the doc.
9856|Hi **@killercup**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
9857|@icorderi, I made a PR with your suggested change (#3199) to get this (or an improved version) into the repo.
9858|> Well i think you will kill code if you remove the linting.  Thanks for your open feedback.  I agree that the out of the box experience isn't that nice anymore. I'll try to some fixing/band-aid in the change notes docs for now. We can help with the setup of eslint by providing you with an action to create an eslintrc. At the same the Salsa team has started discussion on providing more warnings. Pls see: Microsoft/TypeScript#6802.
9859|Another option is that we bundle vscode-eslint
9860|@nisheetjain Would my new extension be of any help? https://marketplace.visualstudio.com/items?itemName=GuardRex.status-bar-tasks
9861|:+1: +1
9862|@egamma This would be my first extension, but definitely willing to give it a try.  Is there an example somewhere you could recommend looking at that does something similar to this  (exposing DefinitionProvider for an existing language) that I could use as a reference?  I think I see how to get access to the word and provide a definition, but how do I check if a file exists relative to the current file I am within?  (sorry, probably a newbie question)
9863|Right. You can attach arbitrary files to each release on GitHub, but since y'all already have a means of distributing binaries and the like, perhaps you don't need this feature of GitHub.
9864|Ok.  I think I found a good example here to start from: https://github.com/Microsoft/linkcheckermd/blob/master/extension.ts#L121  (looking up relative links looks like about the same type of operation I want to perform :) )
9865|Thanks for fixing this
9866|Hi **@pflannery**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
9867|"~~I couldn't find the svg icons for the ""file and open folder"" so I didn't add any css for them.~~  ~~This would be the base css classes I would of liked to of added to https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/media/explorerviewlet.css~~  ``` css /* explorer icons */ .explorer-folders-view .folder-icon {     padding-left: 22px;     background: url(media/folder.svg) 1px 4px no-repeat; }  .explorer-folders-view .expanded .folder-icon {     background: url(media/folder_open.svg) 1px 4px no-repeat; }  .explorer-folders-view .file-icon {     padding-left: 22px;     background: url(media/file.svg) 1px 4px no-repeat; }  .explorer-working-files .working-files-item {     padding-left: 22px;     background: url(media/file.svg) 1px 4px no-repeat; } ```  ~~Themes would only need to override the `background-url` for the file icon using the `file-type-{ext}` class.~~"
9868|Duplicate of #1546?
9869|Duplicate of #1546?
9870|Same here.
9871|@egamma that's the one. Thanks!
9872|May I please ask for clarification, @jrieken. What is one supposed to find in `~/.vscode/extensions/`?
9873|+1 for Polymer support in vscode. I tried to write Polymer custom element in typescript with help of typings(polymer.d.ts) and It worked very well but IntelliSense was not working as I expected.   It never shows the polymer functions when I use `this.<ctrl+space>`.  ![image](https://cloud.githubusercontent.com/assets/13977942/13198813/ed2358b2-d838-11e5-87f4-dcc6828a75b8.png)
9874|@egamma @BazIdle Sorry for bugging you here, but I and many people I know have been struggling with this issue since .10.3, is there any chance someone would be willing to look at it for this iteration?  I have multiple projects that do it and would love to help someone track it down.  There doesn't seem to be any interest in omnisharp-vscode, our issues have been there since December with no chatter.  VSCode cannot be used for us in this state, and I really want to be able to upgrade! https://github.com/OmniSharp/omnisharp-vscode/issues/6 this is my bug for the same issue.
9875|"What message should I receive if I've implemented `supportsEvaluateForHovers`?  I'm pretty sure I have the initialize request returning the right data e.g.:  ``` 2/20/2016 4:17:12 PM [VERBOSE] - Method ""ReadMessage"" at line 111 of C:\Users\Keith\GitHub\rkeithhill\PowerShellEditorServices\src\PowerShellEditorServices.Protocol\MessageProtocol\MessageReader.cs      READ MESSAGE:      {       ""type"": ""request"",       ""seq"": 1,       ""command"": ""initialize"",       ""arguments"": {         ""adapterID"": ""PowerShell"",         ""linesStartAt1"": true,         ""pathFormat"": ""path""       }     }  2/20/2016 4:17:12 PM [VERBOSE] - Method ""WriteMessage"" at line 58 of C:\Users\Keith\GitHub\rkeithhill\PowerShellEditorServices\src\PowerShellEditorServices.Protocol\MessageProtocol\MessageWriter.cs      WRITE MESSAGE:      {       ""type"": ""event"",       ""event"": ""initialized"",       ""body"": null     }  2/20/2016 4:17:13 PM [VERBOSE] - Method ""WriteMessage"" at line 58 of C:\Users\Keith\GitHub\rkeithhill\PowerShellEditorServices\src\PowerShellEditorServices.Protocol\MessageProtocol\MessageWriter.cs      WRITE MESSAGE:      {       ""type"": ""response"",       ""request_seq"": ""1"",       ""command"": ""initialize"",       ""success"": true,       ""body"": {         ""supportsConfigurationDoneRequest"": true,         ""supportsFunctionBreakpoints"": false,         ""supportsConditionalBreakpoints"": false,         ""supportsEvaluateForHovers"": true,         ""exceptionBreakpointFilters"": null       }     } ```  But for hovers I'm still seeing a `variablesRequest` message and the hover tip behavior is still flaky.  I'll get it once for a variable but not a second time and some variables still don't show tips at all.  ``` 2/20/2016 4:17:30 PM [VERBOSE] - Method ""ReadMessage"" at line 111 of C:\Users\Keith\GitHub\rkeithhill\PowerShellEditorServices\src\PowerShellEditorServices.Protocol\MessageProtocol\MessageReader.cs      READ MESSAGE:      {       ""type"": ""request"",       ""seq"": 32,       ""command"": ""variables"",       ""arguments"": {         ""variablesReference"": 74       }     }  2/20/2016 4:17:30 PM [VERBOSE] - Method ""WriteMessage"" at line 58 of C:\Users\Keith\GitHub\rkeithhill\PowerShellEditorServices\src\PowerShellEditorServices.Protocol\MessageProtocol\MessageWriter.cs      WRITE MESSAGE:      {       ""type"": ""response"",       ""request_seq"": ""32"",       ""command"": ""variables"",       ""success"": true,       ""body"": {         ""variables"": [           {             ""name"": ""$itemCount"",             ""value"": ""5"",             ""variablesReference"": 0           }         ]       }     } ```"
9876|This is what I'm seeing: ![vscodeflakyhovertips](https://cloud.githubusercontent.com/assets/5177512/13199993/a6d059f8-d7f4-11e5-9ce4-28ebd5260df0.gif) I've noticed that if I use the debug toolbar to step, I don't hardly get any hover tips during debugging.  I believe that is because when I move the cursor off the toolbar down to the code I'm interested in, I move the cursor over something that doesn't have a hover tip (or I'm moving the cursor too fast that it goes away). Anyway, I get a more repeatable experience by not moving the cursor much and using F10/F11 to step the script.  BTW the hover tips trigger a bit too quickly IMO.  When I'm moving my cursor around my source, I don't want to see tips flickering on/off.  It would be better IMO to check to see if the cursor has stopped moving for something like 350-500 mS before displaying the tip.
9877|Sorry @Figbash for not commenting over at https://github.com/OmniSharp/omnisharp-vscode/issues/6. We're in the middle of a bunch of work to move the extension to a new version of OmniSharp that's also in progress. Once we get over that hurdle, I'll dig deeper into your issue.
9878|@GuardRex , No I am looking for something in which you can type text. similar to what vi/emacs have
9879|I can confirm that cmd+` does work to switch between different VS code windows..
9880|Oh, great! I'm sorry, I didn't understand this behaviour. Thanks very much for explaining it!
9881|@egamma I was create an extension for it today.  https://marketplace.visualstudio.com/items?itemName=abierbaum.vscode-file-peek  The extension mechanisms and documentation for vscode are awesome.
9882|Update:  I've tried to reproduce. This appears to happen only if windows are maximised. Otherwise everything works fine. Is this is expected behaviour?
9883|I'm guessing this will come in the next release?
9884|can extensions provide new snippets for tasks.json? For example, a Java language support extension might want to provide a build task with javac and a problem matcher.
9885|@Leonard1980 This has nothing to do with VS Code, but with the typings for Angular. As you can see `$filter` is a generic function that defaults the type argument to the empty object `{}`, which is not callable because it is not a function. The Angular built-in filters are defined with string literal types as overloads, but for your custom filter, you would have to provide the type argument, which you can only do in TypeScript. Your options are to use Salsa, ignore the error or remove the typings.
9886|@abierbaum very nice :clap:  and thanks for the nice feedback.  The right sidebar in peek adds no value when there is a single definition of a symbol. I've filed issue #3207 on this.
9887|Thanks for digging into this @felixfbecker - closing
9888|@felixfbecker not yet, pls see #3125
9889|"@dbaeumer I can only reproduce it in one of my projects, where the project structure looks like this:  ``` |--.vscode |  |--launch.json |  |--settings.json |  \--tasks.json |--client |  |--build |  |--node_modules |  |--src |  |--.eslintrc.json |  |--gulpfile.js |  |--package.json |  \--README.md |--server |  |--public |  |--src |  |--vendor |  |--composer.json |  |--composer.lock |  |--config.ini |  \--example_config.ini |--.editorconfig \--.gitignore ```  Gulp is installed both locally (in `client/node_modules`) and globally.  Here is my tasks.json:  ``` json {   ""version"": ""0.1.0"",   ""command"": ""gulp"",   ""isShellCommand"": true,   ""showOutput"": ""silent"",   ""options"": {     ""cwd"": ""client"",     ""env"": {       ""NODE_ENV"": ""development""     }   },   ""tasks"": [     {       ""taskName"": ""build"",       ""isBuildCommand"": true     },     {       ""taskName"": ""watch"",       ""isWatching"": true     }   ] } ```  As you can see, I set the cwd to client since I only have Gulp tasks for my client. Here is the error again:  ``` Failed to launch external program gulp . spawn C:\WINDOWS\system32\cmd.exe ENOENT ```  The bug occurs only when starting from the start menu, starting with explorer context menu and starting from command line works aswell.  The shortcut's target is `""C:\Program Files (x86)\Microsoft VS Code\Code.exe""`, and the cwd of the shortcut is set to `""C:\Program Files (x86)\Microsoft VS Code""`. This is the default shortcut created on installation.  Any other project works too. I assume it has something to do with setting the cwd.  I am on Windows 10 Pro, newest updates and VS Code January."
9890|Setting `cwd` to `${workspaceRoot}/client` fixed it. But it is still weird that this occurs only when running Code from the start menu.
9891|A workaround is to copy the npm modules folder from an installed vscode (`C:\Program Files (x86)\Microsoft VS Code Insiders\resources\app`) into the checked out vscode folder. This is what I think most of us do, so there is an issue and update the doc if needed.
9892|I think an additional `filter` setting would be nice, that accepts a glob. So snippets (custom ones too) could be scoped to `tasks.json`, `package.json`, `.vscode/*.*`, `gulpfile.*`, `test/**/*.*` etc etc
9893|The extension folder doesn't help a lot here :smile:, but we made the QuickPick item support more rich in 0.10.8.  From https://code.visualstudio.com/Updates#_extension-authoring  > You can now validate user input, get called when an item is focused in Quick Pick, and Quick Pick now has room for additional details. Also Quick Pick now supports GitHub Octicons like the Status Bar.
9894|closing as a dupe of #2957 (it has some more feedback), but anyways we want to address this for the Feb update.
9895|It works for me, it just takes a while...
9896|yes, closing in favor of #2957 and moving the labels and milestone over to this issue.
9897|@aeschli I thought I saw a fix on this in the tmGrammar repository. We should look into taking a newer drop of the grammars for the Feb update.
9898|I would prefer a button right at the window in addition to a default setting. Also, previously you could have the debug console take 100% of the space by closing other windows. Now, this is not possible anymore. It would be better if all windows shared the same behaviour, so every window (file, debug console or task output) could be docked vertically, horizontally or maximized to 100%.
9899|Imo this is a pretty low priority because most of the time settings are overwritten by workspace settings that are synced with version control anyway.
9900|"You can control this using the `files.exclude` setting.  From https://code.visualstudio.com/Docs/editor/codebasics#_explorer  > By default, VS Code excludes some folders from the explorer (for example. .git). Use the files.exclude setting to configure rules for hiding files and folders from the explorer. > Tip: This is really useful to hide derived resources files, like *.meta in Unity, or *.js in a TypeScript project. For Unity to exclude the *.cs.meta files, the pattern to choose would be: ""*_/_.cs.meta"": true"
