27301|I'm a bit lost in this world, need your help @bpasero
27302|"there is some refining going on in #8059. We will differentiate between assigning UI attributes to a command (label, icons) and defining a menu. A sample:  ``` ""commands"": [{     ""command"": ""v.sayHello"",     ""title"": ""Paul Bier"",     ""category"": ""Bier""     ""icon"": {         ""light"": ""./media/Preview.svg"",         ""dark"": ""./media/Preview_inverse.svg""     } }], ""menus"": {     ""editor/title"": [ {             ""command"": ""v.sayHello"",            ""when"": ""resourceLangId == javascript""     } ] } ```  First _label_, _icons_ etc is assigned to the command `v.sayHello`. Such an assignment is allowed to appear multiple times but the **last wins**.  The `menus` structure has fixed properties (`editor/title`, `explorer/context` etc) for which an array of menu items can be defined. A menu item must refer to a command, can have `when` condition which works like the `when` in keybindings, and can have a `alt` command which is an alternative command (the editor action bar will swap in alt for default when pressing the alt-key and while hovering)"
27303|@joaomoreno I do not see any such logs in the console.   But, when I searched for this module in code, I do not see any indication of duplicates.  But, I saw some commented lines in workbench.main.ts   ``` // require.config({ //  ignoreDuplicateModules: [ //      'vs/workbench/parts/search/common/searchModel', //      'vs/workbench/parts/search/common/searchQuery' //  ] // }); ```  I do not know if it is somehow related.
27304|I don't see why you don't have both. I still want to be able to install and search extensions via command palette, but would sometimes like to use the other view.
27305|:+1: Removing it from Hover and IModelDecorationOptions might mean it is entirely not needed anymore
27306|Any update folks
27307|"This is the default config (actually I was wrong it's `cmd` on mac)  ``` { ""key"": ""shift+cmd+space"",       ""command"": ""editor.action.triggerParameterHints"",                                      ""when"": ""editorTextFocus"" }` ```"
27308|How about [`getVisibleEditor`](https://github.com/Microsoft/vscode/blob/joh/menus/src/vs/workbench/services/editor/common/editorService.ts#L39) when your viewlet is set visible=false?  Iterate the editor, check it's your, and close them. Could maybe work?
27309|The problem is that hiding the sidebar is a false positive I can't distinguish from the real thing.
27310|"I've hit this error today and it turns out I was hitting the [`inotify` per-user instance limit](http://man.cx/inotify_init%282%29#heading5). Very non-obvious problem unfortunately :disappointed: .  Only fix is to increase that limit:  ``` sh echo 1024 | sudo tee /proc/sys/fs/inotify/max_user_instances ```"
27311|I would also love to see this natively implemented! This is such a great editor!
27312|"Does the same thing happen when you add this setting?  ``` json ""terminal.integrated.shell.windows"": ""C:\\Windows\\system32\\cmd.exe"" ```"
27313|hi @kieferrm, just curious if you have an ETA for this feature.  @gregvanl and I were discussing it.  Thanks!
27314|"Looks like I already had ""http.proxyStrictSSL"": false in my user configuration. However, as soon as vscode-update.azurewebsites.net is whitelisted in the firewall both insider build and production build prompted me to install updates."
27315|yeah, end of my knowledge
27316|Pushed a change that should fix this - tho not yet verified...
27317|We can wait for @bpasero to fix it next week, should be easy for him.
27318|It so happens that the we have some new icons in the works that match the new Microsoft Design Language (cleaner and more modern icons that use strokes instead of heavy-weight fills).
27319|@delfinof thanks a lot for creating that example project in github. With it I was able to reproduce and understand the problem.  The issue is unrelated to Docker and will occur in any setup that uses source maps **and** `remoteRoot`: After registering a breakpoint in node.js VS Code tries to map back the actual location in the generated code to the original source. This mapping fails because the remote path is not converted into a local path first. And the fall back for the failed source mapping uses the location in the generated code instead of the original location in the source. This makes the breakpoints in the source jump to the corresponding location in the generated code.  Sorry about that.  The fix will be available in the next Insiders build.
27320|@weinand Thanks! We all that work with remote hosts in order to have a configuration server (say a VM, Docker container, etc) as similar as a production server will thank you for this fix.
27321|@Tyriar is this truly a duplicate?  I feel that this is more of a bug with code that is already folded as well.  For example, when I have folded code and attempt to create a new line under it, the newline disappears and becomes part of the folded code above. This makes it a pain to create a new line between folded code blocks.
27322|**One last update:** Greg and I verified that the bad italic screenshot above was due to ClearType not being enabled by default on Windows Server 2008 (the OS he was using).  Enabling ClearType fixed the problem immediately.  On this particular OS, you must enable it manually, probably because it's not a typical desktop machine but is meant to be tuned for server performance.  I don't think this will be a common scenario.  We should be fine with continuing with italic usage, and since it's a pattern used elsewhere, I think it's appropriate.
27323|This would be a killer feature.
27324|@Hygens please file the issue against the owner of the Haskell extension. There is nothing we can do in VS Code to address this.
27325|Okay. Sorry for my mistake open issue here.  On 06/23/2016 05:28 PM, Dirk Bäumer wrote:  > @Hygens https://github.com/Hygens please file the issue against the  > owner of the Haskell extension. There is nothing we can do in VS Code  > to address this. >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub  > https://github.com/Microsoft/vscode/issues/8071#issuecomment-228173366,  > or mute the thread  > https://github.com/notifications/unsubscribe/AFAT7_mNiA5GFx3iVH7XkLZrF3nIs5E2ks5qOuxmgaJpZM4I9Jrq.
27326|Still happens... ![capture](https://cloud.githubusercontent.com/assets/7761828/16319346/4526a67a-3993-11e6-8945-771fbeb79bc2.PNG)
27327|There are notes summarising what we discussed in all of the issues listed above.  In addition, we agreed that the UX team should start an exploration on overhauling panels and viewlets. We need to avoid simply adding bloat, but we also need to consider how best to accommodate new panels such as the terminal, error list etc.
27328|This issue was moved to Microsoft/TypeScript#9335
27329|Maybe there are scenarios where it doesn't make sense (like the temporary tabs that VS 2015 opens when you search with Ctrl+, or navigate to header with Ctrl+Shift+G etc.)  However, I think if File > Open...  is the only scenario where the list is populated then something is missing. I think any file which is opened deliberately should probably count as a recently opened file (File > Open..., Drag-and-Drop, and Double-Click to open in default editor [when set to VS Code] would count), and any file which is opened by another action where it makes sense to open the file for editing but it wasn't necessarily the users intent (I just wanted to peek at some code), then maybe it shouldn't be added to the list.  Please add the Drag-and-Drop scenario at least? :)
27330|@aeschli not sure if this is you.
27331|Which programming language are you using.
27332|Without steps hard to fix. If we remove the workaround code that filters resources this might be gone anyways.
27333|C++ / Go / Typescript / Javascript
27334|Is this the integrated terminal ?
27335|@tienhv this is currently not possible.
27336|"@kieferrm These are issues in with the markdown resp the jsLint settings schema: If `null` is a valid value for a setting, the settings schema needs to list 'null' as in the 'type' as well. See property ""type"" in the example below e.g.  ``` json ""markdown.styles"": {     ""type"": [""array"", ""null""],     ""default"" : null,     ""description"": ""A list of URLs or local paths to CSS style sheets to use from the markdown preview."" } ```"
27337|Great points @Tyriar. I think with our recent discussions around panels, colours etc that we should look at a UI and UX overhaul. We've built up enough UX and UI debt as the product has evolved that we need to address it.
27338|Sorry, yes the integrated terminal
27339|@matthewrk just a tipp; you can start more than one debug session if you open new VS Code windows on subfolders. So if you you have a subfolder 'server' inside your main project, you can have one debug session on the main project folder and one on the subfolder. Yes, this is a limitation but we are working on lifting that.
27340|I have experienced this. However, I am able to scroll with the trackpad if I place the cursor over the left side of the terminal (where my content is). If I move the cursor too far to the right, I cannot scroll.  Maybe the scrollable element is assuming the minimum width necessary to contain the terminal text, rather than occupying the full width of the terminal.
27341|@isidorn It looks like assigning to a variable doesn't prompt a reevaluation of any variables that depend on it. Variables can be stale after setting a variable in languages such as C# (e.g. a property in the locals window), and watch expressions can be stale in all languages since they can be arbitrary expressions dependent on the changed variable.
27342|Confirmed still repros in: - VSCode Version: Code - Insiders 1.3.0-insider (5eaf9f05038b0a9818ebff510e1aafe07ac1ae68, 2016-06-23T05:07:59.360Z) - OS Version: Windows_NT ia32 10.0.14366
27343|I would also like to see this feature.  I am writing an extension that needs to monitor cursor movements and make slight cursor position adjustments on occasion. The only way I've found to do this is to override the keybinding for e.g. 'left', call 'cursorLeft' from my command, and then validate the cursor's position.  Even without validation, intercepting 'left' and then immediately calling 'cursorLeft' from an extension causes the UI to be _much less responsive_ than binding directly 'left' to 'cursorLeft'. (Because extensions are given low priority.)
27344|Looks awesome! I've been using VSCode for PS a lot lately since it's highlighting is somewhat better than some other editors I usually use, and has been improving. I'd say that this covers the rest of the highlighting cases I felt were missing.  I noticed that $_ is now highlighted correctly. I didn't notice a $? in that test case, however -- will that be correctly highlighted now as well?  Looking forward to trying this in Insider once it is merged in.
27345|The function has been removed at https://github.com/Microsoft/vscode/commit/e4a183dab459f71375c3374ece360ed88100967c
27346|"After discussing this with others and thinking about it, I feel it's best we use a downward chevron arrow (collapse arrow).  This implies a non-destructive removal of a view and disambiguates the expected behavior some users have of an ""X"" in a terminal (terminating a process, removing history and closing the terminal).  <img width=""32"" alt=""screen shot 2016-06-23 at 7 29 20 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/16326099/d65e83da-3978-11e6-9c80-d991f0c6357e.png"">"
27347|"Per our UX discussion we will continue with a panel approach for now with a dropdown.  **Plus** open new terminal **Trash** remove current terminal **Down chevron** hide the panel  ![03](https://cloud.githubusercontent.com/assets/11839736/16326179/3de3cefc-3979-11e6-8594-c869030ee255.gif)  See https://github.com/Microsoft/vscode/issues/8018#issuecomment-228241614 for why we chose to use a down chevron instead of an ""x"" for this panel."
27348|Decision on UX https://github.com/Microsoft/vscode/issues/7732
27349|@inergy I agree that it's a bug personally, I originally created it as such. I'll point out the fact that adding a new line immediately folds it.
27350|As @inergy points out on #4968, adding a newline at the end of the folded section will immediately add the new line to the folded block.
27351|@masonicboom that is expected on stable, on the insiders build scrolling _should_ be working as expected.
27352|"Last thing I can think of is try using the 64 bit cmd which is at:  ``` json ""terminal.integrated.shell.windows"": ""C:\\Windows\\SysWOW64\\cmd.exe"" ```  Unfortunately this is a bit tricky to debug due to the fix for https://github.com/Microsoft/vscode/issues/6469  Does this also happen on stable, or just insiders?"
27353|"I'll leave the ""Close"" tooltip as is to keep it consistent with the command name"
27354|Should be fixed by https://github.com/sourcelair/xterm.js/pull/138
27355|Fixed in https://github.com/Microsoft/vscode/pull/7705, should land in Insiders in 1-2 hours.  ![image](https://cloud.githubusercontent.com/assets/2193314/16327639/3ce5e5fa-3986-11e6-8013-b0eff9366eff.png)
27356|Want to ask something. Is this feature would include extension for source control?  The Icon in sidebar only support git right now. Will this feature allow us to override it to use other source control as plugins?
27357|@dilijev Yes, if you wan to preview changes, you can look at the two links provided in the first post :)
27358|All right, C# now is a plugin... But why bother make it a plugin? how strange... https://marketplace.visualstudio.com/vscode/Languages?sortBy=Downloads
27359|"We do only build projects for opened files in tsserver. However, after you commenting of the `import` clause, you shouldn't be able to search for the symbols in b.ts, and this should be consistent. The ""undetermined"" behavior you described is problematic.  What is the setup of your other project which only "".d.ts"" symbols can be searched? We recently added test infrastructure for the project system, this should be able to help us eliminate problems."
27360|"In addition, the order in which the files are opened matters by design. When one file belongs to multiple projects, we try to resolve the conflict by determining which types of project has a higher priority. But sometimes there are no ways to know which one the file is ""intended"" to belong to. So in cases like these, it goes to the first project created."
27361|Upstream issue: https://github.com/sourcelair/xterm.js/issues/143
27362|We can skip automatic fetching if there are no remotes.  Your current branch is `version-1_3`... it says right there in the bottom left corner, in the status bar.
27363|Is this related to #7599 and it so, did you encounter this bug in an actual extension installation?
27364|@gravejester Let me know if you want me to fix the tests by just accepting the new tokens.
27365|@joaomoreno  No. we use our extension marketplace to install extension,  the `zip` file extract success, but `Promise` is pending forever.
27366|the issue is different from PR https://github.com/Microsoft/vscode/pull/7599. the issue `zip` extract success, but `Promise` is pending forever. PR 7599 `zip` file extract failed.  I suggest you write a test use these `zip` file for `vs/base/node/zip`
27367|"@zhengbli  My another project layout is just like the above project I described.  I setup another project to test:  ``` a/a.ts => function afunc(){} a/main.ts => import ""./a.ts"" b/b.ts => function bfunc(){} b/main.ts => import ""./b.ts"" ```  Then I tried several times, each time I close all working files and restart vscode. 1. open ""a/main.ts"". 2. ""afunc"" found, and ""bfunc"" not. It's ok. 3. open ""b/main.ts"" 4. ""afunc"" found, and ""bfunc"" not. I think ""bfunc"" should be found. 5. close all files 6. ""afunc"" and ""bfunc"" not found. It's ok 7. open ""b/main.ts"" 8. ""bfunc"" found, and ""afunc"" not. It's ok. 9. open ""a/main.ts"" 10. ""bfunc"" found, and ""afunc"" not. I think ""afunc"" should be found."
27368|Dup of #2163
27369|@wesrupert true, can you please create a seperate issue for that. Thank you.
27370|"When ""bfunc"" can't be found, even I opened ""b.ts"", it still can't be found."
27371|Nope, no luck with last update - font is smaller, but the button stil cut off. I think you should restore the font size and padding and reduce the margin of the '.actions' div (at least it works for me, when I tweak it through the developper tools).  ![untitled-1](https://cloud.githubusercontent.com/assets/5485902/16330342/32372950-39f1-11e6-85bf-b276cf80dcb7.jpg)  Worth mentionning my display is scaled to 125%, but I don't think this affects the end result in any way.  Btw., another issue is that rest of the interface is looking well with the 125% dpi scaling, but the status bar remains really tiny and incredibly hard to use (tiny click targets :-)). I'm tweaking the CSS to make it usable, but it is annouying to put my chnages after each update.
27372|I find it. sry for bother u. CTRL+SHILT+I.
27373|Thanks for the detailed repro procedure! Indeed I see this on my machine too. I'll dig deeper tomorrow, it could be either the project system or the navBar APIs.
27374|My CSS that solves it, is font 14px on the button, vertical padding of 2px on the button, 10px margin on the '.actions' and '.description' DIVs ... looks ok to me.
27375|Duplicate of https://github.com/Microsoft/vscode/issues/7062
27376|Duplicate of https://github.com/Microsoft/vscode/issues/547
27377|"> ""We do only build projects for opened files in tsserver.""  If I don't open the project entry ts files, tsserver will not known ""all files"" in the project. And can't implment a reasonable ""Open Symbol By Name"".For exmaple, if I close all files,and create a new ts file in the project. Then no symbol will found. It looks not good.  Will tsserver search all tsconfig.json to build projects? I think this is the right way."
27378|This is in upstream, not sure if it's a bug or feature though, closing.
27379|Not CTRL+SHIFT+I is SHIFT+ALT+I
27380|Thanks for the ping @lllopo.
27381|"Indeed this is not ideal for features like ""Go to anything"" in sublime. We are working on supporting the ""Open Project"" api, which will keep the project alive regardless of the opening files, though it will likely land after 2.0 release.  Actively searching for all tsconfig.json by default can be resource-intensive, because for each project we have to open all the files and watch the files and directories etc, we want to be efficient about the resource allocation. Currently in most cases users open the editor at one project root, so it may not be worth it to eagerly build everything by default. Though we can think about adding configuration to enable such scenarios if the user really wants to. This also align to the suggestion we had about extend our definition of projects on tsserver to support ""mid-sized"" scenarios (https://github.com/Microsoft/TypeScript/issues/3469)."
27382|Fair point - this goes as works as designed for TS cos the default import is un-named and `import WebView` is symbol declaration. Maybe `import {default as WebView} from ...` is a better alternative - tho defeats the elegance of default imports
27383|Adding further details to this. I believe Types should be colored too when being used and not only when declaring them.  Here's the same example in three different color themes.  ![image](https://cloud.githubusercontent.com/assets/412489/16331176/c4c390c4-39c4-11e6-967e-c30b4742b58d.png) ![image](https://cloud.githubusercontent.com/assets/412489/16331204/0247232a-39c5-11e6-842c-f3929b3604ab.png) ![image](https://cloud.githubusercontent.com/assets/412489/16331299/a5cb98a0-39c5-11e6-8a79-2290ef2e9ac4.png)  I'd like Types to be colored equally when declaring, importing and using them.  Ideally, I'd like the monokai example to look like this: ![image](https://cloud.githubusercontent.com/assets/412489/16331438/dd761662-39c6-11e6-9291-21ed3d579f87.png)
27384|Duplicate of https://github.com/Microsoft/vscode/issues/547  For python in particular this is mentioned here https://github.com/DonJayamanne/pythonVSCode/issues/183
27385|> The Icon in sidebar only support git right now. Will this feature allow us to override it to use other source control as plugins?  No - this is about adding menubar entries in the editor title area, the explorer context menu, and the editor context menu for command either defined an extension or VS Code. We are consuming this API with the markdown extension: https://github.com/Microsoft/vscode/blob/master/extensions/markdown/package.json#L73  ![screen shot 2016-06-24 at 09 53 37](https://cloud.githubusercontent.com/assets/1794099/16331609/bb191b16-39f1-11e6-98c2-3b0bcc012c60.png)
27386|We have moved markdown into an extension which fixes this
27387|@aeschli Looks like a sticky error on the file
27388|Is it that VSCode uses TextMate's format for the language syntax plist?
27389|@markho10 The way it works from beginning is as follows:  Escape will only cancel the current search request. For eg: Type some text and press enter to search . It starts getting the results. You can see the progress bar on the top. If you want to cancel the request then Press Esc.
27390|No information after 10 days -> closing.
27391|@heroboy I see this is working in latest insiders - de66522e06d74752d48d92e934dcd026050355ba  Can you please check again and let me know.  Thanks.
27392|Can't do anything to prevent this really, since the fetch is an XHR and Chromium just shows it in the console.  Will close as designed.
27393|OK, Thanks
27394|Yes, the errors should eventually go away. It's a part of the install/uninstall procedure.  Closing the issue.
27395|"@bennyticklez sorry, but I cannot get your setup to run. The steps from above are incomplete and I do not want to type in the text from the .babelrc sceenshot.  I noticed on the launch.json screenshot that you have set `sourceMaps` to true but `outDir` is not pointing to the root of the generated code. Please add that and see whether this makes a difference.    You can enable source map tracing by adding this to the launch config:  ``` json ""trace"": ""sm"" ```  With this you should see some information whenever you set a breakpoint in source or when the runtime stops."
27396|@weinand as far as I understand that would work if you have two executable apps, but in this case I have one web app and several class libraries, e.g. data access, services.
27397|@matthewrk aha, your problem is not about multiple debug sessions in one project but about multiple projects in one debug session. This is something that the dot net extension has to solve.
27398|This issue was moved to OmniSharp/omnisharp-vscode#460
27399|@weinand yes that sounds about right. I wasn't sure what project the problem belonged to. Thanks for your help.
27400|Here is what I see using 1.2.1. Does the file exist on disk? Currently JS validation only works for files that exist on disk.  ![capture](https://cloud.githubusercontent.com/assets/1931590/16334169/b93e8c1e-39ff-11e6-8a4a-1cb481522d24.png)
