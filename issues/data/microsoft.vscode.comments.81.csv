8001|Repl is a separate bug which I just now fixed #2536  Let me know if I should still reopen this :)
8002|Yeah starting with 2) seems good, someone should be able to navigate the repl without the mouse.   Having a keybinding for showing the hover makes sense. But I guess we would need another keybinding to jump into the hover somehow.
8003|Ok I will look at these issue as improve REPL accessibility and will look into that.  That keybinding could automatically focus the hover, so you would not need to jump in. Whenever the hover closes it would give focus back to the editor
8004|:+1:
8005|0.10.6,  ~~typescript~~ javascript  The issue exists on both OSX and Windows.
8006|"@egamma: font ligatures won't really help me.  **Use case:** The [Coq Proof Assistant](https://coq.inria.fr/) allows one to write proofs about mathematics (category theory, real numbers, etc.), program behavior, program logics, type systems, etc. I am writing an extension to work with Coq proofs in vscode. It would be useful for the user to be able to define a set of symbol substitutions particular to the domain that they are writing proofs about. For example, set notation is useful for visualizing proofs about set theory.  #192 demonstrates that symbols are also useful for general programming.  **Limitations of ligatures for symbol substitutions:** - requires customizing a font -- I've tried this before and it is not easy; - assumes that a particular set of symbols will satisfy a large number of users, rather than allowing each user to pick & choose what works for them; - symbols are tied to a specific typeface; and - context unaware: ideally the symbol would depend on whether it is a keyword, in a comment, a variable etc. -- things that the editor is aware of but the typeface renderer is not.  **Solution:** - implement ""prettify symbols mode,"" like the Emacs feature; - or more generally, provide the API hooks to override how a selection of text is rendered. This can be done by extending `DecorationRenderOptions` to allow the rendered text to be completely replaced by another string or image/svg. Then I could implement a ""prettify symbols mode"" extension myself."
8007|duplicate of https://github.com/OmniSharp/omnisharp-vscode/issues/26
8008|Thanks!  So if I followed your directions to manually run npm install from that folder, no errors. Then when I run scripts\npm install again, it works!  Maybe this issue only affects new/unused repos?  From: Martin Aeschlimann [mailto:notifications@github.com]  Sent: Monday, February 1, 2016 6:50 AM To: Microsoft/vscode vscode@noreply.github.com Cc: jayongg jayongg_2001@hotmail.com Subject: Re: [vscode] scripts\npm install fails on Windows 10 (#2594)  I'm not able to reproduce this. I see you use node 4.2, I also tried with that and it works. Can you cd vscode\extensions\json\server and run npm install there? This should install node_modules.bin\tsc which is then used in the postinstall action.  â€” Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/2594#issuecomment-178000792 .  https://github.com/notifications/beacon/AKhX-f9rfcS3BYHsUmv9z9UhGw9PmLG8ks5pf2gzgaJpZM4HQKtM.gif
8009|Ok this might break some start up experiences for users. However I would not do this as a 'stable-candidate' since the user can easily get out of this situation by modifying his 'launch.json' and the error is very indicative. Let me know if you disagree and I can mark it as a stable-candidate
8010|Sorry it a wrong title. This is related to https://github.com/Microsoft/vscode/issues/48 It is working as expected (opening new window on each `code .` in Windows environment.  In OSX, it only brings up the current instance, not opening the specified folder.
8011|ok closing as duplicate of #48
8012|Sorry, take it back a bit, as #48 does not mentioned about folder not being opened.
8013|VSCode spawns `git` for its git operations. Every now and then it spawns `git status` to know whether something has indeed changed. This touches the index, which modifies some files within the `.git` directory. This will likely not change in the near future.  Some information on how to effectively use Dropbox with git can be found [one Google search away](https://www.google.ch/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=dropbox%20and%20git).
8014|@unional please clarify exactly what you do from the command line, what happens and what you would expect. also given all the potential other instances of Code already running.
8015|The default keybinding is (complicated because we are running out of keys): `Cmd+K Cmd+Left` for previous change and `Cmd+K Cmd+Right` for next change. Will only work if a text diff editor is visible.
8016|Sure. 1. Have a vscode already running (opened folder: `/projectA`) 2. in terminal, `cd /projectB`, then `code .`  Expected: open a new instance of vscode with `/projectB` opened.  Actual: the current instance activated with `/projectA` as opened folder. Not `/projectB`. 1. Furthermore, if I close the vscode instance (not [cmd+q], just the close button), i.e. there is a vscode process still running. 2. Repeat step 2  Actual: a new vscode window/instance opened with `/projectA` as opened folder, not `/projectB`.
8017|Weird, just did that and works:  ![untitled](https://cloud.githubusercontent.com/assets/900690/12726816/e785b130-c919-11e5-9aa0-be59a5932e25.gif)  How is your script looking that you use to start code?
8018|That's weird.  > How is your script looking that you use to start code?  What do you mean?  btw, what app do you use to create the gif?
8019|This one: http://www.cockos.com/licecap/  I meant this script: https://code.visualstudio.com/docs/editor/setup#_mac-os-x
8020|"``` code () {     if [[ $# = 0 ]]     then         open -a ""Visual Studio Code""     else         [[ $1 = /* ]] && F=""$1"" || F=""$PWD/${1#./}""         open -a ""Visual Studio Code"" --args ""$F""     fi } ```  Seems like it is an old version?"
8021|After changing the script to the new code in that link, it is working now. Many many thanks!
8022|I just tested it now by changing it in a different editor, and this time it did auto update. However, it still doesn't work when switching branches in git (using Terminal). See my recording below:  http://g.recordit.co/HYlpJq5ZSB.gif
8023|I get the same issue with the following appearing in STDOUT  ``` bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell [ [Error: Error deleting the shared ipc hook.] ]  <--- Last few GCs --->      6959 ms: Mark-sweep 1392.9 (1440.7) -> 1392.9 (1440.7) MB, 10.3 / 0 ms [last resort gc].     6960 ms: Scavenge 1393.0 (1440.7) -> 1393.0 (1440.7) MB, 0.4 / 0 ms [allocation failure].     6960 ms: Scavenge 1393.0 (1440.7) -> 1393.0 (1440.7) MB, 0.1 / 0 ms [allocation failure].     6971 ms: Mark-sweep 1393.0 (1440.7) -> 1393.0 (1440.7) MB, 10.5 / 0 ms [last resort gc].     6981 ms: Mark-sweep 1393.0 (1440.7) -> 1393.0 (1440.7) MB, 10.1 / 0 ms [last resort gc].   <--- JS stacktrace --->  ==== JS stack trace =========================================  Security context: 0x69253db45d1 <JS Object>     1: JSONSerialize(aka JSONSerialize) [native json.js:~120] [pc=0x3b9faa9936bd] (this=0x69253d041b9 <undefined>,G=0x69253d05c59 <String[1]: 1>,j=0x1b65a5f137a1 <an Arguments with map 0x19df45809d21>,v=0x1b65a5f13759 <JS Function (SharedFunctionInfo 0x47601bbbe01)>,w=0x1b65a5f13739 <JS Array[1]>,x=0x69253d04291 <String[0]: >,y=0x69253d04291 <String[0]: >)     2: SerializeObject(aka SerializeObj...  FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory ```  ulimit is set to unlimited and the output of `free` is  ```               total        used        free      shared  buff/cache   available Mem:       16336048     4527560     8404904      841112     3403584    10586644 Swap:       8191996     2075856     6116140 ```  I also get no colour coding of the file or option to change the filetype.  This is with the zip exploded out in `~/Downloads/VSCode-linux-x64`. It still doesn't work if I run it with sudo, but if I `su` and unzip to `/root/Downloads/VSCode-linux-x64` it works. Though I do see the following in STDOUT:  ``` bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell Error creating proxy: The connection is closed (g-io-error-quark, 18) Error creating proxy: The connection is closed (g-io-error-quark, 18) Error creating proxy: The connection is closed (g-io-error-quark, 18) Error creating proxy: The connection is closed (g-io-error-quark, 18) Error creating proxy: The connection is closed (g-io-error-quark, 18) ```
8024|@amunca15 It looks like you are referring to Visual Studio, this repository is about VisualStudio Code http://code.visualstudio.com.  Having said this we are working on accessibility support for VS Code and first rough draft will become available in the January release that we are about to make available.
8025|@siegebell no doubt prettify symbols is more powerful than ligatures. Thanks for the clarifications.
8026|There is actually an extension for bower that do this https://marketplace.visualstudio.com/items?itemName=donjayamanne.bower
8027|ok
8028|@amunca15 It looks like you are referring to Visual Studio, this repository is about VisualStudio Code http://code.visualstudio.com.  Having said this we are working on accessibility support for VS Code and first rough draft will become available in the January release that we are about to make available.
8029|Second this, especially for CustomElements. It would be nice if we get IntelliSense support for CEs.  IMO, we don't need to wait for FF, Safari, Edge implementations to implement support. You can write web components today and it would still work in those browsers provided you use the WebComponent polyfill.
8030|thanks @bpasero I didn't know this!  Perhaps we can add some indication to the search area to give folks a clue they can press ESC?  CC @stevencl @bgashler1   ![image](https://cloud.githubusercontent.com/assets/1487073/12735320/c7824e02-c8fb-11e5-95e3-1898525dd393.png)
8031|I'm confused by all the January mentions. Feb schedule should be end of Feb, should it not? Is it due to using the Jan file as template?
8032|Does 0.10.7 include any of the Salsa stuff?
8033|here is how to get 0.10.7 build: https://code.visualstudio.com/insiders
8034|@profiler-bg yes, this is a work in progress :)
8035|:+1:
8036|I have trouble working with large files without code folding, may switch to other editors for a while until vs code gets this
8037|Agreed, this would be great to have!
8038|+1
8039|@isidorn please investigate whether this is a regression.
8040|@jrieken pls investigate.
8041|@bgashler1 fyi
8042|I believe that's a dupe
8043|This issue was moved to Microsoft/TypeScript#6825
8044|Verified that the above JSDoc comment works properly for an ordinary function.  Moving to TS
8045|@bpasero Do you have ideas?
8046|yes this is a dupe of #508
8047|This issue was moved to Microsoft/TypeScript#6826
8048|@daviwil no, this is not a know issue, in fact I do not see it for any other debug adapter (node, mono..). We also did not touch code in this area.  Do you use the same with the vscode stable December release and the powershell adapter you are using?  I will also try to repro this
8049|@jpierson yes, but you have to enable it. Please see https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md
8050|@ig16022 it is now available, please give it a try.  See https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/ for how to get the insider bits  See https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md for how to enable Salsa.
8051|Someone else mentioned that the output gets overridden, did anything change in the way we handle CR/LF in the output?
8052|No, nothing changed as far as I know. Do you have a pointer to that someone else that mentioned the output gets overridden, is it also for powershell or node?
8053|@SamVerschueren Thanks for reporting this!
8054|@chrisdias I would prefer a solution that does not add a message to the search results because it looks weird as soon as results are there. maybe we can add some affordance to the search controls to the top? I suggest we talk in the UX meeting about it.
8055|yes this was also for PowerShell. It was in this tweet: https://twitter.com/r_keith_hill/status/694380609234296832
8056|No problem, thanks for the quick response :).
8057|@pocesar the task and the TS language server are two separate processes which are isolated. So without more information it is very hard for me to track this down. Can you share the project that reveals the problem. Or could you provide a smaller test case.
8058|@daviwil a nit - the screenshot looks nice, but is not a replacement for detailed steps and a snippet so that we do not have to type in the snippets manually :smile:
8059|This behavior is intentional because we do not want to move focus to the second editor when you press Ctrl key. This allows to use the side editor as an assistant to the main editor without having to manage focus all the time.
8060|OK, I can repro on Windows using DebugTest.ps1 that is included in the powershell extension (it is good to read the README). When stepping through the code the output is only appended.
8061|@amunca15 we would love to hear back from you how debugging behaves with screen readers using VS Code since we have invested in accessibility for our next release. You can grab the insiders release with our changes from here: https://code.visualstudio.com/insiders  Feel free to also give us feedback where you feel Code is not accessible in other areas.
8062|I cannot reproduce this in JavaScript, there the output gets properly appended  ``` javascript for (var index = 0; index < 10; index++) {     console.log('output', index) } ```
8063|Toggle developer tools is in, the others are not.
8064|![image](https://cloud.githubusercontent.com/assets/900690/12744493/e4b17054-c994-11e5-941c-2a61a6e6c405.png)
8065|@philippstucki some things to try: - does it also crash with our upcoming 0.10.7 release (https://code.visualstudio.com/insiders) - can you run Code from the command line after defining the following environment variables: `export ELECTRON_ENABLE_LOGGING=1` and `export ELECTRON_ENABLE_STACK_DUMPING=1` and attach the output if there is any
8066|@pmadhur are you  maybe running Code inside a VM?
8067|Here are the steps: - install the powershell extension - open .vscode-insiders\extensions\ms-vscode.PowerShell-0.3.1\examples\DebugTest.ps1 - set a break point on line 8 - F5 - step through the code  The output is not appended in the Debug Console
8068|See issue #2625
8069|Interesting. When I do `reload the window` and F5 again, then the output is appended properly  ![ps-output](https://cloud.githubusercontent.com/assets/172399/12744793/7549d1be-c996-11e5-9d2a-2868a3b07c75.png)
8070|Yes, this is one of the ways we try to avoid proliferating open files. I've referenced this issue from the main workspace management task that we will work on soon.
8071|To discuss in UX.
8072|@bpasero thanks for your taking your time!  0.10.7 works fine  output with enabled logging for 0.10.6:  ``` $> ELECTRON_ENABLE_LOGGING=1 ELECTRON_ENABLE_STACK_DUMPING=1 ~/tools/web/visual-studio-code/Code  [4876:0202/102849:ERROR:browser_main_loop.cc(189)] Running without the SUID sandbox! See https://code.google.com/p/chromium/wiki/LinuxSUIDSandboxDevelopment for more information on developing with the sandbox on. [4876:0202/102849:WARNING:accelerator_util.cc(118)] Invalid accelerator token: unknown [4944:0202/102849:ERROR:renderer_main.cc(200)] Running without renderer sandbox [4876:0202/102849:WARNING:accelerator_util.cc(118)] Invalid accelerator token: unknown [4876:0202/102849:WARNING:accelerator_util.cc(118)] Invalid accelerator token: unknown Received signal 11 SEGV_MAPERR 000000000014 [4876:0202/102849:WARNING:accelerator_util.cc(118)] Invalid accelerator token: unknown #0 0x000001b81d88 <unknown> #1 0x7efc5715ed10 <unknown> #2 0x000000a62000 <unknown> #3 0x000000a61f9b <unknown> #4 0x000000a69aac <unknown> #5 0x000000a693d9 <unknown> #6 0x000000a69226 <unknown> #7 0x000000a38bae <unknown> #8 0x000000a52f47 <unknown> #9 0x000000a402e9 <unknown> #10 0x000000a39f88 <unknown> #11 0x000000a3a1c3 <unknown> #12 0x000002cb519a <unknown> #13 0x000002cb3a98 <unknown> #14 0x000001ae3244 <unknown> #15 0x000001ae303c <unknown> #16 0x000001ad2c58 <unknown> #17 0x000001ad3816 <unknown> #18 0x000001ad28b4 <unknown> #19 0x000001ad25f4 <unknown> #20 0x00000053bf03 <unknown> #21 0x000001b827a8 <unknown> #22 0x0000005394d3 <unknown> #23 0x000000538ba5 <unknown> #24 0x000001b827a8 <unknown> #25 0x000001b9c941 <unknown> #26 0x000001b9cad9 <unknown> #27 0x000001b9ccbd <unknown> #28 0x000001b9d64a <unknown> #29 0x000001bae350 <unknown> #30 0x000001b9c27a <unknown> #31 0x0000011e164f <unknown> #32 0x0000010a6b57 <unknown> #33 0x0000010a7881 <unknown> #34 0x0000010a6780 <unknown> #35 0x000002e6fa97 main #36 0x7efc50ceaa40 __libc_start_main #37 0x000000523d51 <unknown>   r8: 0000000000000010  r9: 0000129eb2629220 r10: 0000000002ff380f r11: 00007efc578de6f0  r12: 0000000003c49a78 r13: 000013e035d115c0 r14: 000013e035d2dd10 r15: 000013e035d2dd18   di: 000013e035d2dd48  si: 000013e035d2dd48  bp: 000013e035d2dd28  bx: 000013e035bc7580   dx: 0000000000000000  ax: 000013e035d2dd28  cx: 0000000000000003  sp: 00007fff851cde90   ip: 0000000000a62000 efl: 0000000000010202 cgf: 0000000000000033 erf: 0000000000000004  trp: 000000000000000e msk: 0000000000000000 cr2: 0000000000000014 [VS Code]: render process crashed! ```
8073|The files that bundle for example vs/base/common/actions up are:  ``` C:\Program Files (x86)\Microsoft VS Code Alpha\resources\app\out\vs\languages\typescript.workbench\common\projectResolver.js C:\Program Files (x86)\Microsoft VS Code Alpha\resources\app\out\vs\workbench\node\pluginHostProcess.js C:\Program Files (x86)\Microsoft VS Code Alpha\resources\app\out\vs\workbench\parts\git\browser\gitViewlet.js C:\Program Files (x86)\Microsoft VS Code Alpha\resources\app\out\vs\workbench\parts\search\browser\searchViewlet.js C:\Program Files (x86)\Microsoft VS Code Alpha\resources\app\out\vs\workbench\workbench.main.js ```  Moving back to Joh since I think \typescript.workbench\common\projectResolver.js is causing this when opening a JS file.
8074|Moving to the TS team.
8075|This issue was moved to Microsoft/TypeScript#6828
8076|@wxqqh Any specific languages you have in mind?
8077|@egamma fyi
8078|@philippstucki I am glad 0.10.7 works fine because from the crash dump I do not see what could cause this.   I am closing it assuming that our Electron update in 0.10.7 is fixing this.
8079|I can reproduce and it looks like a bug in node.js: https://github.com/nodejs/node/issues/5039
8080|"Actually, that is intended by TS. They always generated the shortest path to make the file unique. The fix would be on our end by adding a rootDir property to tsconfig.json. I think:  ``` json {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""es5"",         ""outDir"": ""out"",         ""noLib"": true,         ""sourceMap"": true,         ""rootDir"": "".""     },     ""exclude"": [         ""node_modules""     ] } ```  should do the trick"
8081|@bpasero see my latest comment.
8082|I can only reproduce the problem after a fresh install of the PowerShell extension. Restarting the debug session or restarting VS Code does not make the problem reappear.
8083|"Great, I added this to the generated TS extension. @fcrespo82 please update your tsconfig.json and add ""rootDir"": "".""."
8084|@bpasero I will stick to 0.10.5 until 0.10.7 is officially released.   Thanks again for looking into this.  We use vscode on a daily basis to develop and maintain a large TS code base. Absolutely great experience so far.
8085|@philippstucki sounds good, expect 0.10.7 to be released later this week.
8086|Sorry, I wasn't able to setup a proper dev environment in order to build VSCode on my own. I see a ~ 1 second delay with the insiders build, too.  Thanks a lot! it's a big improvement even though it's still not working fluently.
8087|I also see the same as Andre. I can repro only after a fresh powershell install and only on first run, all subsequent powershell runs do not produce this behaviour. Due to this I do not think it is a stable-candidate but let's discuss more at standup. It is a strange bug, investigating for more details...
8088|+1.  It is quite limiting, and very annoying, that when opening the same workspace (folder, or file) in a new window, VSCode instead jumps to the existing window.
8089|There is a work around, but since I cannot reproduce it in 0.10.6 this looks like a regression we must understand.
8090|@wosi what theme did you use when creating the 0.10.6 typescript screenshot above, can you pls check?   I can reproduce TypeScript on the right when using the Dark+ color theme in 0.10.7. But I cannot reproduce what you show above in 0.10.6 when using the Dark+ color theme extension. To me 0.10.6 and 0.10.7 look the same.   ``` TypeScript declare var require: {     (id: string): any;     resolve(): string;     cache: any;     extensions: any; } ```
8091|Obsolete
8092|The values will be updated once you do a step. I am not a big fan of re-evaluating all watch expressions once you evaluate anything in the console, though we could do that. But this would cause the whole variables and watch pane to flicker once you evaluate something in the console.  I would close this as designed. @weinand opinions?
8093|"@nRewik This is a bug upstream in Chromium, see [#192](https://github.com/Microsoft/vscode/issues/192#issuecomment-166159048) and [Chromium issue 487028](https://code.google.com/p/chromium/issues/detail?id=487028).  Shipping this week is the January version of VSCode, where you can workaround this by using the setting `""editor.fontLigatures"": true`. If that setting is on, some code on our side that workarounds the Chromium issue kicks in:  ![thai-ligatures](https://cloud.githubusercontent.com/assets/5047891/12748185/fffe3338-c9a8-11e5-8577-55a397382f02.gif)  I cannot enable the workaround code all the time (it only kicks in if `""editor.fontLigatures"": true`) because the workaround code assumes all text is Left-To-Right"
8094|I believe this is fixed now, can you please give it a try and reopen if needed
8095|@isidorn what's the behaviour in Chrome dev tools, node-inspector, or VS?
8096|Chrome and node-inspector do not update it, they behave same as we do -> closing as deigned
8097|+1
8098|Dup of #2306 I believe, keeping that one since it captures our discussion
8099|For this case I would have to treat strings specially and clip their quotes. Also the value of that variable actually has quotes and iin some cases you would expect the quotes to be copied -> when you are pasting inside some code  @weinand opinions?
8100|@bpasero I don't think so because I do not know how to run code inside a VM. I download and installed vscode from https://code.visualstudio.com/
