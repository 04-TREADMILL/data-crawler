21301|@asadighi It's all in your head and your nonsense shows in your comments, stop it.
21302|@muellerkyle :+1: you should create an issue against the bookmark extension you use.
21303|I'm either doing something wrong or there are a lot of missing intellisense markers that used to come up. From that link you provided, it doesn't appear any setup is _necessary_, only recommended.  I tried adding the sample `jsconfig.json` that just sets an ES6 target and excludes `node_modules`, but I'm not getting things like `$` being undefined even if there's no jquery project / global var declared, etc.
21304|"For example:  <img width=""415"" alt=""screen shot 2016-05-11 at 10 51 16 pm"" src=""https://cloud.githubusercontent.com/assets/3757471/15205316/f5882114-17ca-11e6-95f1-f05ae6f1a935.png"">"
21305|"Thanks @Maximus5 for looking into this, I created https://github.com/Microsoft/vscode/issues/6307 to fix `code.cmd` to wait.  As for why you need `code.cmd` and not just `code.exe`, this is because `code.exe` bypasses [`cli.ts`](https://github.com/Microsoft/vscode/blob/master/src/vs/code/node/cli.ts#L20) which handles the ""output only args"" like `--help` before electron is launched and its output is printed to the console (in order to avoid https://github.com/atom/atom/issues/11686).  Closing this off as #6307 will remove the need for the workaround."
21306|@martinring where are you seeing that 1.1.0 is versioned as 1.0.0? The `Version` property in the spec file should be set correctly:  ![image](https://cloud.githubusercontent.com/assets/2193314/15205447/2f66939c-17cc-11e6-9a74-9019e73079f3.png)
21307|@vsccarl sounds fixed to me, it's typically not worth adding the state to avoid clicking multiple times like that imo.
21308|The continue request from vscode always sends the [threadID](https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L305) of the thread that should be continued. Previously in vscode there was an issue that VSCode would react as if the continue continued all the threads. This has been fixed and due to this you are probably seeing this behavior. More details can be found here #1703 and here #5644 I pinged your team members in the issue so you are aware of the change.  So upon continue the debug adapter should only continue that specific thread, not all threads. If this is not possible then we need to introduce some sort of capability that the debug adapter can specify to vscode that continue should always continue all the threads. @weinand  and me are looking into this.
21309|@FeaRCODE see https://github.com/Microsoft/vscode/issues/211#issuecomment-205757719 for a recap of the current situation. I'd love to see it added personally.
21310|@rob3c it's not a bug as it's working as intended currently, making this configurable would be adding functionality rather than fixing it.  This is probably the sort of thing we'd accept a PR for because of the priority of it, @alexandrudima do you want to add the help wanted label?
21311|"@Tyriar I agree. I am not sure how they went about their research, but a monotone list of names is hard to look at when I have a ton of files. Also, his comment on ""multi-colored"" distracting icons is false. As pictured here, these icon DRASTICALLY improve the speed at which i can find my folder/files. https://github.com/Microsoft/vscode/issues/211#issuecomment-210210437  I think that themes should also control what the icons look like and i do agree there should be an option to disable them."
21312|@jeysak Please tell me how you did that: https://github.com/Microsoft/vscode/issues/211#issuecomment-210210437
21313|@FeaRCODE Please refer to my comment above
21314|@ashes999 I'm one of the said Microsoft employees :smiley:  I think if GitHub reactions were around at launch then we wouldn't have needed user voice. Currently both lists are used to find what features are highly desired by the community.
21315|This is what I get, when I use the above link. I just got the feeling, the error might be on my side. Maybe there is some broken old install.. I check it right now  ![screenshot from 2016-05-12 08-30-47](https://cloud.githubusercontent.com/assets/763861/15205993/0c0101f8-181c-11e6-95b3-61d4c1530153.png)
21316|"@FeaRCODE RE your comment on https://github.com/Microsoft/vscode/pull/3200#issuecomment-218669706 (which won't be read by many people as its closed).  > @Tyriar I agree. I am not sure how they went about their research, but a monotone list of names is hard to look at when I have a ton of files. Also, his comment on ""multi-colored"" distracting icons is false. As pictured here, these icon DRASTICALLY improve the speed at which i can find my folder/files. https://github.com/Microsoft/vscode/issues/211#issuecomment-210210437 >  > I think that themes should also control what the icons look like and i do agree there should be an option to disable them.   I'm not that big on differentiating folders and files personally, as the expand/collapse arrows accomplish that currently. I want it on a file type basis so that it's easier to tell what file type files are, plus it will make the editor more attractive (subjective of course)."
21317|@Tyriar I guess you're right. For some reason my mind can process the icons faster. I prefer them regardless :)
21318|@martinring there are definitely some weird differences in the screenshots. I have experienced issues before when updating the rpm, restarting fedora always seemed to fix the issue. I assumed it was the GUI updater's fault as cli install always worked.  The revision which is an epoch timestamp for mine is Mon, 09 May 2016 12:47:01 GMT, yours is Wed, 13 Apr 2016 14:17:11 GMT so it's definitely the March release.  I'll close this assuming you were targeting the wrong file somehow, please let me know if you find any other issues with installing though.
21319|Hmm... restarting after removing every old version of vscode changed the issue but didn't necessarily improve on it. Still not able to install via GUI.   ![screenshot from 2016-05-12 08-48-13](https://cloud.githubusercontent.com/assets/763861/15206287/50333966-181e-11e6-823f-4415bee0972b.png)  Ok, but this is clearly not an issue with the vscode rpm package, but something is messed up on my system.  Sorry to have bothered you.
21320|I don't think we'd want customization on this level as Windows paths use `\`, and Unix-like use `/`. While Windows can use `/` in some programs, the correct way is `\`. Perhaps an extension could do this though?
21321|@martinring no worries, as I mentioned I've experienced issues around updating rpms too so ping me if you find anything else.
21322|@harold-b This is an OS-level Windows feature, it should work on Windows now. Also middle click has special behavior on Linux by acting as a secondary clipboard so it definitely wouldn't work there.
21323|Insider's builds which are every week or so are currently available. The nightly builds used by the dev team are also on the way https://github.com/Microsoft/vscode/issues/5453
21324|Folding is currently indent-based, the issue tracking folding knowing about languages is https://github.com/Microsoft/vscode/issues/3422, please :+1: the issue to indicate you want it.
21325|@andy-dev this on Windows?
21326|@Tyriar aha... found the issue. The problem was apparently a `code.desktop` file lying around in my `~/.local/applications` folder. I put it there before there was the rpm package. It pointed nowhere but somehow gnome software seems to check that location. After removing the file and restarting gnome, it now displays the same info as on your screenshot. Maybe this info helps others with the same issue after all.
21327|> it should work on Windows now  Which version is it available on? I can't seem to trigger it on 1.10 public or insiders.
21328|"I know this is only ""half-related"" but is there a way to alter the file viewer using the vsCode API ? What I'd like to do is add the folder behavior to .ts files, so that we can expand it from the viewer and see .js version. Any one any idea ? :)"
21329|@bpasero should `--disable-gpu` be added to `code --help`. FYI I can't seem to find it in `google-chrome --help` or https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md
21330|@harold-b do you have the same issues in Chrome and/or Atom? I wouldn't expect us to need to do anything on our side for it to work.
21331|I'm on Chrome right now and it's always worked. I've never used atom (other than electron via VSCode), but I'll grab it and verify.
21332|I tried Atom, it didn't work either. I checked the settings page to see if there was an option I needed to enable, I didn't find anything, but scrolling worked on the settings page. So I decided to check a markdown file in preview mode on VS Code, and it worked there too. However, not in text documents on either app.
21333|As designed, this is native chrome behavior that the hover is clipped.
21334|Setting to may to investigate
21335|makes sense. it's something we like and don't hear the first time.
21336|"Default option can be ""false"", for those who like default it will stay default:  editor.copyPathForwardSlash = false;  And this is only for the Explorer > ""Copy Path"", there is frequent usage of ""/"" everywhere in coding, angular especially and it is annoying that after copy path we have to go trough manual replacement process.   Above said is all for Windows 10 + VS Code in mind ..."
21337|Please file this issue in the https://github.com/PowerShell/vscode-powershell As this is happening in the powershell extension
21338|No action planned to fix this. Will look into if more users complain.
21339|Actually just saw the last bit, maybe you are right, maybe Extension is better option so Copy Forward Path can be added.  Ok... I have to check how to create an extension ...
21340|@harold-b k, I'll relabel and assign, thanks for bearing with me :smiley:
21341|Not at all, my pleasure to help. Thanks for your attention :+1:
21342|Due to a limitation of the tsserver workspace symbols are currently scoped to the project the focused text editor is part of.  I will move this issue to TS since it requires work on the tsserver side.
21343|This issue was moved to Microsoft/TypeScript#8571
21344|@MrSkinny now I see. This is a know issue with the new JS language server and is tracked in this TS issue: https://github.com/Microsoft/TypeScript/issues/6802.
21345|@Tyriar I think its a hacky workaround for an issue we do not understand, nor do we know the consequences in terms of performance.
21346|thanks, this was reported already.
21347|@dbaeumer After updateing vscode to the latest version in the mosquito Fedora repo, it does work. Here the dnf entry of vscode.  ``` Available Packages Name        : vscode Arch        : x86_64 Epoch       : 0 Version     : 1.1.0 Release     : 1.fc23 Size        : 4.0 M Repo        : mosquito-vscode Summary     : Visual Studio Code - An open source code editor URL         : https://github.com/Microsoft/vscode License     : MIT Description :  VS Code is a new type of tool that combines the simplicity of a code editor             :  with what developers need for their core edit-build-debug cycle. Code provides             :  comprehensive editing and debugging support, an extensibility model, and             :  lightweight integration with existing tools.  ```  The bug seems to be fixed now with version 1.1.0 of VSCode.  Thanks for your support :)
21348|Besides using /// references you can define a JS project using a jsconfig.json file and add typings into the project. A doc describing how to do this is available here: https://code.visualstudio.com/docs/languages/javascript
21349|Fixed
21350|Related: https://github.com/Microsoft/vscode-spell-check/issues/29#issuecomment-218685569
21351|@mathewmeconry great to hear that 1.1.0 resolved the issue. You didn't see any trace since that feature got added for 1.1.0 :-).
21352|In the past contributors have created github issues describing the issue with the text/language/key and we forwarded it to the i18n team.
21353|Duplicate of https://github.com/Microsoft/vscode/issues/509
21354|@gregvanl do you by any change have a tsdk setting which points to a different tsserver. The problem is an exception in the tsserver in your case which I don't get.
21355|@dartzki which version of tsc do you have installed (e.g. tsc --version)
21356|Hello.  I know that 6 months ago icons weren't in vscode planning list. And I know that initially you wanted to keep workbench very simple. As you can see here, many people like icons which help them to process files faster.  In [update 1.1](https://code.visualstudio.com/updates/) you introduced [Visual design](https://github.com/Microsoft/vscode/issues/224#issuecomment-213015687) proposal which modifies workbench and editor. It will be nice to hear if vscode team reviewed possibility to add icons.  @bpasero any thoughts?
21357|@isidorn Tried the same code in IDLE, no error happen. The way IDLE treated it is:  `print(utf8_name)` -> output utf-8 bytes interpreted by local non-unicode setting, althrough not useful (not human readable) `print(unicode_name)` -> output correct characters, because it is unicode after all...  I think the way IDLE handle makes more sense. After all, for python 2.7, `utf8_name` is just byte array, if encoding is not know, then it is just some bytes. But `unicode_name` is... unicode code point, so it should always precisely know what its representation should be.   But VS Code output window did reverse, looks like it interpreted bytes as utf-8 bytes, but report error on unicode.
21358|"@magnasteyr: to better understand what the process is doing could you add the following setting to the workspace settings:  ``` json ""typescript.tsserver.trace"": ""messages""  ```  Then open the output window and switch to the TypeScript channel. Do you see any 'problematic' activity there on a machine that shows the behavior? If so can you provide the log here."
21359|The TS issue is: https://github.com/Microsoft/TypeScript/issues/8139. It will be fixed in TS 2.0. The corresponding vscode issue is https://github.com/Microsoft/vscode/issues/5161 which also contains steps how to already make use of the fix in the tsserver.  Closing as dup of https://github.com/Microsoft/vscode/issues/5161
21360|Sounds good, thanks for the info!
21361|@sun1991 thanks for providing additional information. What happens when you execute your pything script in the command prompt?
21362|@marzubov we did not have a chance to talk about this feature request with the UX team. as you can understand, tabs are currently our #1 priority and gets our full attention. this might keep us busy for another few sprints because there are related follow up work items (empty layouts, horizontal split, etc.).
21363|To recap, the paths we should expose - [ ] extensions home folder, like `/Users/jrieken/.vscode-oss-dev/extensions` - [ ] user config folder, like `/Users/jrieken/Library/Application Support/code-oss-dev/User`   I am unsure if we should also expose the individual files inside that folder like `settings.json`, `keybindings.json` cos that list isn't finite.
21364|"@dbaeumer what about we add an action to the ""Open Recent"" list that does just that or implicitly do it when you Ctrl+click on such an entry?  <img width=""657"" alt=""screen shot 2016-05-12 at 11 06 57"" src=""https://cloud.githubusercontent.com/assets/900690/15209510/a9f1af6a-1831-11e6-9318-fad3f4646329.png"">"
21365|@alefragnani for the bookmark extension I believe you need the _user config folder_. is that right? @SrTobi I am unsure if you only looking at sync'ing the user-level `settings.json` or also at others, like our `keybindings.json` and a potential future `bookmarks.json` etc
21366|similar behaviour: - Ubuntu 16.04 in VirtualBox with NAT - on windows host is a corporate proxy with CNTLM - on ubuntu guest are set env vars http_proxy and https_proxy, other linux cli tools are working - installed latest april deb package - .vscode/ and .vscode/extensions are existing and writable, owned by user - no $TMPDIR env variable - should it be created? - Ctrl+Shift+P ext install --> endless activity indicator with no extension list - developer tools console has some errors (but no new entries after above command):  ``` connect ETIMEDOUT 191.232.139.254:443 connect ETIMEDOUT 40.114.241.141:80 ```
21367|#6307 will not fix **this** issue. If user runs `code.cmd`, user loses the ability to run Code in ConEmu tab. That is the problem!
21368|@Maximus5 oh I think I understand now, the cli.js call runs as a node process and that launches actual vscode process after it has validated some things. Unless ConEmu can somehow work with the processes launched by the process, the workaround is how you will need to do it.
21369|Actually this probably won't reproduce once looking at the code
21370|@bpasero ok, got it. Thanks for such a quick response. Keep us in touch.
21371|"I'm using 1.8.9 from npm and am using the same version by overriding ""typescript.tsdk"" in my workspace settings."
21372|@outcoldman first sorry for the late reply. But I was out on vacation.   I like the message default of 0. It makes indeed more sense than using 4. However I am not a fan of making of making the line 1 the default position if no location is specific. Mainly because this might cover misconfiguration if people try to configure a location based problem matcher.  We were discussing file problem in the team and although we haven't reach conclusion yet how to implement / visualize them we could provide them in the task framework. But IMO we should make this more explicit. I would advocate to have a kind property on the problemMatcher with values 'file' and 'location'. Depending on the value we require different values (location: the once we require right now; file: the once you propose)  Would this work for you?
21373|When you can provide steps to reproduce, we can reopen.
21374|@dartzki strange :-). Could you share your project. Would be easier for me to reproduce.
21375|Sorry, I can't  I'll try to reproduce it in a simple project on github
21376|Sorry, was not precise in the description. I am preferring Ctrl+ click on the entry in the menu.   Silly question: how do I get the list you show in the screen shot. Never saw that.
21377|Thanks !
21378|"I can not see any problematic activity in the log. Here is a short extract of the log output:  ``` Sending request: quickinfo (9). Response expected: yes. Current queue length: 0 TypeScript Service: tried to cancel request with sequence number 9. But request got already delivered.Response received: quickinfo (9). Request took 1017 ms. Success: false . Message: No content available. Sending request: quickinfo (10). Response expected: yes. Current queue length: 0 TypeScript Service: tried to cancel request with sequence number 10. But request got already delivered.Response received: quickinfo (10). Request took 1164 ms. Success: false . Message: No content available. Sending request: open (11). Response expected: no. Current queue length: 0 Sending request: geterr (12). Response expected: no. Current queue length: 0 Sending request: close (13). Response expected: no. Current queue length: 0 Event received: syntaxDiag (0). Event received: semanticDiag (0). Sending request: quickinfo (14). Response expected: yes. Current queue length: 0 TypeScript Service: tried to cancel request with sequence number 14. But request got already delivered.Response received: quickinfo (14). Request took 1203 ms. Success: false . Message: No content available. Sending request: quickinfo (15). Response expected: yes. Current queue length: 0 TypeScript Service: tried to cancel request with sequence number 15. But request got already delivered.TypeScript Service: canceled request with sequence number 16 Response received: quickinfo (15). Request took 925 ms. Success: false . Message: No content available. Sending request: quickinfo (17). Response expected: yes. Current queue length: 0 TypeScript Service: tried to cancel request with sequence number 17. But request got already delivered.TypeScript Service: canceled request with sequence number 18 Response received: quickinfo (17). Request took 1143 ms. Success: false . Message: No content available. Sending request: quickinfo (19). Response expected: yes. Current queue length: 0  ```  What's worthfully to mention is, when running vscode and parallel starting gulp with a ""compile - watching - serve"" task from commandline, gulp ends up running in an infinite loop. It always detects ""changed files"" (altough there are none) and compiles them. When I stop vscode, the gulp task is working as expected.  Seems that vscode starts a watcher process which conflicts with the gulp watcher process..."
21379|@dbaeumer as far as I know there is no way of detecting keyboard modifiers while interacting with the chrome menu.  The quick open for recent files/folders is in `F1 -> File: Open Recent`
21380|ConEmu attaches GUI application when in the tab 1. The GUI application is started as first process in this tab and creates GUI window 2. The GUI wrapper (Windows GUI subsystem, not a console subsystem) application is started as first process and wrapper executes second GUI process which creates GUI window.  If GUI application (creating GUI window) is started from existing console process (which is cmd.exe which runs `code.cmd`) than GUI window is started outside of ConEmu because otherwise the behavior would be a nonsense. User works with console and it suddenly is blocked with third-party tool? But this console process may ask ConEmu to run GUI application in the new tab, starting, for example `code.exe -new_console` from `code.cmd`.
21381|@dbaeumer I found the issue which mentioned a nearly same behaivior: [VSCode 5521](https://github.com/Microsoft/vscode/issues/5521)
21382|Actually there seems to be something wrong here. According to the log requesting hover always takes ~1 sec or more which is pretty much considering that you aren't typing. Do you see the same on machines not showing the behaviour. And are you working with auto save? Looks like something saves files which makes the gulp watch to kick in.
21383|OK. Ctrl+Click in the open recent list would make my day then.
21384|@bpasero unsure if this is the installer or the workbench.
21385|> theme so I would like my content to adjust based on the selected theme.  that sounds like an event but I don't know if we need that. By default, some styles where defined in the `*` selector. I have know a change where those styles are applied to the body only _but_ its values come from corresponding variables, like so:  ``` :root {     --background-color: ${backgroundColor};     --color: ${color};     --font-family: ${fontFamily};     --font-size: ${fontSize}; } ```  Unsure if that's what you want. Is it that you need to set more styles and need different variables?
21386|By analyzing the blame information on this pull request, we identified @Tyriar and @egamma to be potential reviewers
21387|here's the project: https://github.com/dartzki/typescript-vscode-test  it's nothing functional, but tests (gulp test) should run
21388|"The log output on machines not showing this behaviour is quite different. Here is an extraxt of the log output from a well working machine :   ``` Event received: semanticDiag (0). Sending request: open (16). Response expected: no. Current queue length: 0 Sending request: close (17). Response expected: no. Current queue length: 0 Sending request: geterr (18). Response expected: no. Current queue length: 0 Event received: syntaxDiag (0). Event received: semanticDiag (0). Event received: syntaxDiag (0). Event received: semanticDiag (0). Event received: syntaxDiag (0). Event received: semanticDiag (0). Sending request: close (19). Response expected: no. Current queue length: 0 Sending request: change (20). Response expected: no. Current queue length: 0 Sending request: geterr (21). Response expected: no. Current queue length: 0 Event received: syntaxDiag (0). Event received: semanticDiag (0). Event received: syntaxDiag (0). Event received: semanticDiag (0). Sending request: change (22). Response expected: no. Current queue length: 0 Sending request: geterr (23). Response expected: no. Current queue length: 0 Event received: syntaxDiag (0). Event received: semanticDiag (0). Event received: syntaxDiag (0). Event received: semanticDiag (0). Sending request: quickinfo (24). Response expected: yes. Current queue length: 0 Response received: quickinfo (24). Request took 24 ms. Success: false . Message: No content available. Sending request: quickinfo (25). Response expected: yes. Current queue length: 0 Response received: quickinfo (25). Request took 46 ms. Success: false . Message: No content available. Sending request: quickinfo (26). Response expected: yes. Current queue length: 0 Response received: quickinfo (26). Request took 52 ms. Success: false . Message: No content available. Sending request: definition (27). Response expected: yes. Current queue length: 0 Response received: definition (27). Request took 41 ms. Success: false . Message: No content available.  ```  I'm NOT working with auto save, I'm using the default settings, except my workspace specific settings which are:  ``` {     ""files.exclude"": {         ""**/.git"": true,         ""**/.DS_Store"": true,         ""**/*.js"": { ""when"": ""$(basename).ts""},         ""**/*js.map"": true     },     ""files.watcherExclude"": {         ""**/.git/objects/**"": true,         ""node_modules/**"": true,         ""jspm_packages/**"": true,         ""typings/**"": true     },     ""typescript.tsserver.trace"": ""messages""  }  ```"
21389|@bpasero - I'm not yet the heaviest VSCode user, but the performance impact appeared minimal. It's more likely an issue with my actual video drivers - Chrome and Slack started breaking in the same way shortly afterward. Makes me kind of sad to see that GPU acceleration is required for such a clean and simple looking UI.
21390|Can I vote to close this? I'm happy with the FAQ addition and some tweaks to my video driver (I don't recall installing an update or changing settings before this) have resolved the issue, even without the --disable-gpu.
21391|Given that @kieferrm took the markdown extension over, maybe he can chime in how he expects support for dark and light theme to work.
21392|It is a setting (window.reopenFolders) which is checked here (https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/code/electron-main/windows.ts#L846) and if we know that VS Code was restarted because of an update, it should be easy to force reopen of folders from there.
21393|@tyriar no, mac osx yosemite 10.11.14
21394|@yyx990803 Is that really appropriate?
21395|@dbaeumer not sure how that will work with when you do not have file location. The output does not provide it.
21396|C# has moved into an extension, please install the extension https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp
21397|This looks like an error with the C# extension, can you please file this bug in this repository https://github.com/OmniSharp/omnisharp-vscode
21398|ping @Tyriar
21399|Glad reinstalling the C# extension solved your issue
21400|"Hi @dbaeumer, I think could be (and perhaps _should be_) different features:   - Showing a confirmation window (with _do not ask me anymore_ option maybe) - Undo changes in the Explore panel  Recently I had to look at ""git status"" and figure out which file I moved accidentally, and it's really a pain."
