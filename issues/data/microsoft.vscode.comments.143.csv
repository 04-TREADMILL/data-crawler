14201|+1
14202|+1
14203|Happy to hear that's not a general problem.  @dbaeumer ran into a case with NVDA where dismissing the suggestion list with `Escape` brought NVDA to browse mode.  I think that's because he clicked in the editor, which brought NVDA automatically to focus mode. Then, when pressing `Escape` to dismiss the suggestion list, NVDA switched back to browse mode (as it entered the focus mode automatically).  We then chatted about it and thought that maybe this happens all the time, but we were not sure, that's why we reached out to you. Thank you for confirming this is not a general problem.
14204|I'm also seeing this behavior. It was working fine before switching to salsa.  ![image](https://cloud.githubusercontent.com/assets/1503865/13850650/3f5fe3be-ec31-11e5-9986-cdc67f967715.png)
14205|Wait wait wait I am not saying that :) Let me do some testing real quick :)
14206|duplicate of #3008
14207|No, you are right. I am seeing the same behavior. Escaping out of the suggestion list doesn't actually dismiss the suggestion list but takes you to browse mode. So I think thesekeys are necessary after all.
14208|@bpasero Maybe label as help-wanted / effort-easy so we can find stuff like this better. Or even make a label 'extension-opportunity' or something.
14209|Sorry for jumping to conclusions, I guess I read what I want to read :).  I'll go through the places we use Escape and also add Alt+Escape as an alternative keybinding doing the same.
14210|@alexandrudima Unsure how things work now. The issue seems to be that an `TextualSuggestSupport` is being created on the worker side which then misses a reference to an editor worker service
14211|A terminal would be great as an extension. One of the key things I love about VSC is its simplicity.
14212|"```                 ""module"": {                     ""description"": ""Specify used module type: 'commonjs', 'system', 'umd', 'es6', or 'es2015'. Note: 'amd' is currently not supported."",                     ""enum"": [                         ""commonjs"",                         ""umd"",                         ""system"",                         ""es6"",                         ""es2015""                     ]                 }, ```"
14213|I figured it out! My `bash_profile` included a file which included a file which defined the `code` function. I must have added that function as part of the original setup steps when VS Code was first released. Sorry for the confusion when I misstated above that it wasn't being brought in via `bash_profile`.  Once I remove that function, the `code` command works as expected. Awesome!
14214|@jrieken as discussed moving back to you.
14215|@joaomoreno moving to you. Looks like a UI problem.
14216|Good to hear :) closing this off.
14217|This is occurring on Windows 7 as well in Launch mode. Continue and expression evaluation fail because node has become unresponsive.
14218|@jrieken can you shed some light on this. IMO the JS formatter will not be invoked in that case.
14219|Unfortunately it doesn't look like the signing will be up in time for the release, pushing to April. /cc @joaomoreno
14220|Published a version of the extension to the market place that informs users that the extension no longer needed.  To verify, install the js-is-jsx extension. It should show a warning once when a .js file is opened.
14221|"@joaomoreno boils down to the Renderer in https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/quickopen/browser/quickOpenModel.ts#L651 not disposing the template it creates for templateId === templateEntry || templateEntryGroup. I think you added this but I am not sure why it is not getting disposed. One thing I notice is that disposeTemplate() is being called each time you type and get results for the file picker."
14222|@sahas- I have made an extension that allows you to monitor heap usage and garbage collection. It's not yet in the gallery but there are steps how to install it locally: https://github.com/jrieken/vscode-extheap  It would be of great help if you can install and check the `GC Stats` from time to time and also supply some heap snapshot of the extension host (esp. when men usage has grown)
14223|@bpasero Hmmmm, I disagree that this would be suitable for an extension. A function like this, to delete a file, should probably exist in the core editor. What kind of criteria are you typically using to determine suitability for an extension? Just curious, thanks!
14224|@bpasero have you looked into [Watchman](https://facebook.github.io/watchman/) by Facebook? That's what [ember-cli](http://ember-cli.com/) uses.
14225|If something can be done via extension, it should be done via extension. Once we add this functionality into the core product this extension is obsolete, but until then it is fine to have it. We currently have 595 feature requests and maybe 7 people working on the source code, so you can imagine that we are not jumping on every new feature someone asks for.
14226|I ended up adding Shift+Escape as an alternative, since Alt+Escape is some sort of equivalent to Alt+Tab on Windows
14227|@Tyriar post GA I want to look into other options for watching on Mac/Linux. Though I believe if we change to adding watched folders one by one as needed by the UI, we can keep using chokidar. The expensive part in chokidar is watching large root folders recursively.
14228|Inline JavaScript inside HTML no longer gets any rich features since the adoption of Salsa.  What is bad is that this fails with so many errors (i.e. it should fail gracefully).
14229|"@Lonefy Our JavaScript language service is now and real extension. This means, the rule of having a single best match for the `DocumentFormattingProvider` comes into play (https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3490).   Since both (yours and ours) have the same score the provider registered last wins. You can restore the previous behaviour (that is your provider being in charge) by declaring a dependency on the builtin JavaScript mode and thereby being _last_. In your package.json add this  ``` ""extensionDependencies"": [""vscode.typescript""] ```"
14230|Assuming you are on a mac you can try unzipping and opening the vsix-file with VS Code: [vscode-extheap-0.0.1.vsix.zip](https://github.com/Microsoft/vscode/files/178260/vscode-extheap-0.0.1.vsix.zip)
14231|yeah, it needs a graceful check for undefined. I'd figure you know where...
14232|That is most weird. Here it works for me on a clean 0.10.11 (without installed extensions) with your settings:  Do you have any extensions installed? Does it reproduce when running VS Code with the following command line argument: `--disableExtensions`?  ![character-pair-0 10 11](https://cloud.githubusercontent.com/assets/5047891/13853606/bf774b88-ec67-11e5-8604-631b138cf6aa.gif)
14233|@egamma this tour doesn't make much sense for VS Code. - VS Code does not launch a browser on F5 - the TypeScript template does not have any TypeScript setup (no dev-dep in package.json, no compile or watch scripts) - the 'Profiling', 'Test Explorer' and the remaining sections apply to VS not VS Code.
14234|"@weinand: the error message can be more user-friendly, similar to the improvement you made in https://github.com/Microsoft/vscode/issues/4343. For example, instead of ""Attribute 'program' does not exist ('foo')"", it might be better to say something like ""File from 'program' does not exist ('foo')""."
14235|@dbaeumer Is this fixed on the TS side on master?  I still get it in some cases such as pressing Enter twice:  ![formatontype](https://cloud.githubusercontent.com/assets/5047891/13854171/78b5e13e-ec6a-11e5-9731-45d7dd386921.gif)
14236|@bpasero I actually just ran into an `ENOSPC` when trying to build with `gulp watch` while running a single instance of `code ~`. That's an enormous amount of files/processing when only a tiny subset of the files are likely being worked on. Seems like a good route to follow.
14237|Too risky to touch this guy for GA imho.
14238|@vsccarl thanks for trying to go through the #3960 tour (which was based on some Visual Studio tour and is not a good fit for VS Code).  I've verified that hitting a breakpoint in app.js on line `var app = express()` and in `routes\index.js` works fine.  For the TypeScript template additional setup was required because the template does not include any support for transpiling ts to js and producing source maps. After this was done, breakpoints were working fine.  /cc @egamma
14239|@Tyriar if you can find out any way to prevent this issue by increasing the file limit on Linux, we should update the existing entry at http://code.visualstudio.com/Docs/supporting/faq#_linux-faq
14240|@bpasero Any reason the number is so small in the FAQ? It's apparently capable of much more http://stackoverflow.com/a/17437601/1156119
14241|@Tyriar good point! does it work with a higher number?
14242|@bpasero yeah that fixes it. I'll update the docs, I'll also add how to load in the new config value without restarting.
14243|I changed the two console.error() calls in the file service to only fire when code is run with --verbose. The errors are harmless because they are ignored in the service. They can likely happen when there are so many events that some of them cause a file resolve although shortly after the file is already deleted. I would also think that changing our file watching strategy away from watching the entire folder recursively to only watch what is need would improve this.
14244|Users should also be notified in a nicer way that this is how they increase the value. While we could do this set up as part of the .deb/.rpm packages, I would prefer to stay away from messing with global config files like that.
14245|@Tyriar nice, yes please update the docs. I think this is not a good situation to be in, so my suggested way forward is to reduce the number of file handles the watcher needs to install.
14246|@jasonyueyang yes, that's a great suggestion. However, before starting to fix individual messages one by one, I think a native speaker should review all English messages in VS Code.  /cc @egamma @dbaeumer
14247|@bpasero :+1:   Should you close this off (since it's solved by https://github.com/Microsoft/vscode-docs/issues/236) and make a new issue to explicitly stop watching entire directories trees when they're too large?
14248|I will leave this open and cleanup post GA, I have a bunch of watcher related issues for April.
14249|Removing this cache will make many file system related operations slow, including search. I verified that this cache is not being used as long as tmp is not expanded in the explorer. I would not think that having this explorer expanded is typical because there are so many empty folders added here that scrolling becomes a nightmare. I suggest to leave this as is for GA.
14250|Sounds good, I just put the docs PR up https://github.com/Microsoft/vscode-docs/pull/237.
14251|:+1:
14252|Related https://github.com/Microsoft/vscode/issues/726
14253|Commenting so I get a participating notification. I want to deprecate my extension if it gets in :)
14254|I verified it with the latest build and not able to repro now. I will verify it again sometime later with different options and settings and will update if I am able to repro. But for now we are good as after closing the window it is cleaning up properly and I could see no active instance or background process left in the task manager.
14255|@tht13 You can use the [Open in User-defined Console](https://marketplace.visualstudio.com/items?itemName=vilicvane.console) extension
14256|+1
14257|The `localhref` attribute in the generated markdown seems to do nothing. Changing it to `href` works but also breaks vscode's viewport when clicked.
14258|@stkb that doesn't apply to right click > open command prompt here though
14259|@bpasero still got the same crash overnight with the march insiders build. Do you want me to to try getting a heap dump from the developer tools during normal use? I can try to keep an eye on the memory usage for code and grab a dump if it appears to be going up
14260|This issue was moved to Microsoft/vscode-themes#7
14261|Moved to https://github.com/Microsoft/vscode-themes/issues/7
14262|@felixfbecker That's true, but I was only replying to tht13 about his original request regarding the `ctrl+shift+c` shortcut.  Though if they implement the choice for the right-click menu they should do it for `ctrl+shift+c` action too, of course.
14263|Yes please, thanks.
14264|Is there a way to turn off localization? I want the editor to be always on English.
14265|@alexandrudima it should be fixed and @jrieken and I tested it (I updated the tsserver to 1.8.9 today). But it looks like not all cases are fixed. I opt for opening a issue against TS.
14266|Hi, I have requested Portal team to switch to latest vscode bits, but could you in the meantime check and confirm if this issue is already fixed? Thanks!
14267|@Tyriar I'm sorry for not giving feedback sooner about this and thank you for showing what is needed to make it work. I used your code to figure out how to use electron's clipboard to get at the special Linux primary clipboard. I didn't merge this because it was a layer-breaker (accessing electron api from a /browser/ folder). We should access electron API only from a /electron-browser/ folder. I know our compilation does not enforce this at this time.  IN 0242c3a, I made an editor contribution, and an editor setting that is off by default to enable it. I suggest we leave it disabled by default, gather feedback, and then enable it by default if all is good.
14268|@bill-mybiz I was busy today doing a lot of other fixes but I will spent some time tomorrow trying to reproduce and understand this. A couple of comments: - the node version installed on your system doesn't have an impact on the performance of the tsserver. The reason being that we use the 'electron' version we ship with (which is node as well) to run the tsserver  - the tsserver very aggressive caches ts files and if resolved once keeps most of the info in memory.
14269|"Just came across this problem myself and found this issue.  I agree with @lukehoban that all commands contributed by an extension, should be added as activation events for that extension automatically. Don't really understand how it's ""inconsistent and confusing"" not to.  The alternative, as it is now, is that the extension author can forget to add commands as activation events (easily done with many commands); and vscode throws the user a needless error when trying to invoke the command, when it knows, in fact, exactly what to do."
14270|@bill-mybiz since the steps are easy I did some testing with the try catch snippet / code complete but I am not able to reproduce. Here is how my sytem behaves.  ![bug](https://cloud.githubusercontent.com/assets/1931590/13859192/91709210-ec82-11e5-992a-96118d826498.gif)  Would you be able to install a process monitor tool on your system (like Process Hacker) and see which of the vscode processes have unusual CPU behavior in this scenario. If we know the process it will be easier to track this down However over the process which consumes the CPU and send me the command line of the process.  ![capture](https://cloud.githubusercontent.com/assets/1931590/13859302/22950820-ec83-11e5-86fb-407b7725e910.png)
14271|@eliashdezr: yes, there will be a setting or command that you can run that will let you turn off localization.
14272|Thought so. The dedicated error view would be a killer! Thanks
14273|"No worries, I didn't have time recently to look at it anyway.  So to test on code alpha I use `""editor.selectionClipboard"": true`? And provided all is well it will be enabled in April?"
14274|Looks great! Thanks!
14275|Sorry it took so long to reply. Disabling crash reporting seems to have fixed it.
14276|@martellaj  Thank you! :+1:   I took the liberty to tweak the keybindings and add some tests while merging.
14277|Yep!   Please try it out, I tried only on Ubuntu 14.04.4
14278|Cleaning up my fork to avoid some messy merges later.  Will reopen a new PR and reference it.
14279|Rendering diagnostics is a general vscode feature.  Moving to vscode
14280|@alexandrudima I found out what the problem was. It was indeed an extension `Backspace++`.  cc @jrieken
14281|Maybe we can bring the functionality of `Backspace++` into the core, I have seen at least one issue asking for a smarter backspace implementation
14282|That would be awesome!
14283|"For what it's worth, I've been having the same problem for months. When an update comes out for Code I'll install it and use it for a couple hours, then the black boxes show up everywhere and it's impossible to use the app, so I switch back to Sublime. I'd really like to use Code.   Today the black boxes showed up again and then Chrome crashed completely. Not sure if the two are related--usually the black boxes only show up in Code.   Just thought I'd throw that out there in case it's useful to anyone...  <img width=""1098"" alt=""screen shot 2016-03-18 at 11 53 17 am"" src=""https://cloud.githubusercontent.com/assets/1933030/13888766/7507eaaa-ed00-11e5-965f-02f94246f200.png"">"
14284|I mean restarting the machine.
14285|Parameter hints gets triggered every time the user presses a parameter hints trigger key. In TypeScript that is `(` and `,`. But it's still up to the mode whether to show the hints, upon requested. If the hints are showing in that snippet is because TypeScript returned them. There is no way the widget or the editor would have knowledge that those hints should not be shown. Only the mode would know not to show them.  I suggest to forward to TypeScript.
14286|Yeah, closing as duplicate of #1905.
14287|Signatures are always a lengthy process...  It's enough if we get the debs and rpms out the door.
14288|"I tracked this down to line 58 in editor\contrib\smartSelect\common\smartSelect.ts When the code uses model.getModel().logicalSelectionSupport it does not work     var selectionSupport = model.getMode().logicalSelectionSupport || this._tokenSelectionSupport; // but works with _tokenSelectionSupport var selectionSupport = this._tokenSelectionSupport;  I just don’t know enough about the VS Code APIs to know if this is the right fix"
14289|@alefragnani  I've created #4393 to track the problem.
14290|@alefragnani Thank you for reporting this, the code that was in charge of deciding what to write to the clipboard was not always using the most up-to-date selection.
14291|"@gregvanl I wonder if those keybindings are reserved on Windows 7?  Do the actions work if you bind them to different keys.  e.g.  ``` { ""key"": ""shift+alt+down"",   ""command"": ""cursorColumnSelectDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+left"",   ""command"": ""cursorColumnSelectLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+pagedown"", ""command"": ""cursorColumnSelectPageDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+pageup"", ""command"": ""cursorColumnSelectPageUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+right"",  ""command"": ""cursorColumnSelectRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+up"",     ""command"": ""cursorColumnSelectUp"",                                      ""when"": ""editorTextFocus"" }, ```  I know the default ones with `ctrl+shift+alt+` are not great, but we could not find any free ones."
14292|Here is a heap snapshot immediately after launching code (memory usage about 100MB at that time)  [Heap-20160318T115937.zip](https://github.com/Microsoft/vscode/files/178823/Heap-20160318T115937.zip)  I'll try again in an hour or two. The tricky bit seems to be getting it at a point where the memory has increased somewhat, but not so much that taking the snapshot triggers it to crash out of memory.
14293|Thank you @alexandrudima for fixing it so quickly :smiley:  I guess it will be available in March release, right?
14294|yep!
14295|I saw the same kind of results when I tried taking a heap snapshot (ran out of memory), and it’s not fun.  I feel like there are still some memory issues in the latest insiders build (for mac).  I’ll see if I can get another heap snapshot without sacrificing my computer.
14296|@dbaeumer As luck would have it, I already have Process Hacker installed. I have a picture, but GitHub doesn't allow me to upload them. Do you have another way for me to send you the pic? EDIT: Nevermind, I got it to work this time.
14297|@artsjedi What settings are you using and what theme is that?
14298|@PedroNorte specifically for line duplication, we have two. I cannot survive without them :):   https://code.visualstudio.com/docs/customization/keybindings#_basic-editing  Here are the Windows keybindings: ![image](https://cloud.githubusercontent.com/assets/5047891/13863873/76bd7760-ec9d-11e5-8265-c10d03424646.png)
14299|![trycatchlag_processhacker](https://cloud.githubusercontent.com/assets/1253349/13863896/5daf9a64-ec6b-11e5-9ccb-0453c6fddb92.PNG)
14300|That is with me specifying the typescript version in my local node_modules folder. The lag occurs also if I turn off that flag, but I'll go ahead and get screenshots of that too.
