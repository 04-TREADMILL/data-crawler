27501|@udarkness, in next version (@egamma?) VS Code you can use all [documented Emmet preferences](http://docs.emmet.io/customization/preferences/). For example:  ![2016-06-25_14-16-32](https://cloud.githubusercontent.com/assets/7034281/16356423/acf8e5f4-3adf-11e6-97f9-8244f9277b4c.gif)
27502|Reproduce on Mac with 1.3.0-Insider.
27503|The reason this issue comes with Vim extensions is because Vim needs to monitor user's keyboard input and all these extensions are listening to `type` command, but it's working in a strange way.  Let's say users want to type in a Chinese word `安` and in Chinese IME, they should type `a` + `n` then in their IME popup window, choose the first word by pressing `1` or space. Currently if you monitor `type` command, only `a` is emitted by VS Code.  So ideally, if users type `an1` in Chinese IME, VS Code should only pass `安` to `type` command listeners.
27504|The debugger only works in *.ts files not *.js files. I also tried to add some console.log statements, but the Developer Tools don't allow saving. Electron seems to be a biest in that matter. Can I somehow build a custom Visual Studio Code with these console.log statements in it?   ![capture](https://cloud.githubusercontent.com/assets/7761828/16357126/1e987f68-3aee-11e6-9f5c-798fe7b022f8.PNG)
27505|Related to https://github.com/Microsoft/TypeScript-TmLanguage/issues/149 (?)
27506|"@realmx where from do you invoke ""Save All"" and what is happening then?"
27507|@jmm try `workbench.files.action.refreshFilesExplorer` from our insiders build (http://code.visualstudio.com/Download#insiders)
27508|"Moving to @sandy081 who took over work in this area and might want to think about this in the context of ""Search & Replace""."
27509|Best would be a memory profile when memory is growing but before VS Code crashes with out of memory (at ~1 GB). Typically the crash report does not help us much because it just indicates that there was an out of memory. It does not tell us which area caused it unfortunately.
27510|No, because it's `resolve` method will try to make a text editor model out of it (https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/editor/resourceEditorInput.ts#L159)
27511|But from the workbench point of view you can pass in a `file:///` URI pointing to an image and it will open as image. So I think everything should just work if you end up calling `IEditorService.openEditor`.
27512|That is true but we do not support this kind of configuration for other editor settings, hence this is a valid and still open feature request that needs thinking.
27513|"I must also admit that I am not a big fan of the recently introduced icons in the integrated terminal:  ![image](https://cloud.githubusercontent.com/assets/900690/16357568/8a2f98ae-3afa-11e6-9ebe-bbf870b74b3b.png)  They do not seem to fit our other icon set at all. I also find the ""Hide"" icon questionable as one can easily confuse it with a dropdown menu."
27514|This is a consequence of introducing panels and having just one `COMPOSITE_OPENED` event instead of distinguishing between viewlets and panels.   @isidorn can we bring back a way to distinguish viewlets and panels when opening?  @joaomoreno once we have that back, the simple solution would be to check on this opening event if the id of the viewlet that opens is the extensions viewlet or not and make the call based on that.
27515|There is currently no way of excluding editors in the list of recently opened because that list is for editors that you open in a session.  It seems to me that we are starting to think about workarounds for UX issues that all originate from the fact that we use an editor for showing the extension description (see also https://github.com/Microsoft/vscode/issues/8060).   I am arguing that if we feel that the extension description is not a real editor, we should not show it inside an editor but come up with different UI.   As long as extensions are editors, we will have to live with some of these issues.
27516|"@joaomoreno at least I suggest to prefix the editor with something stable like ""Extension: "" so that people are not getting super confused."
27517|"@con-ssc they do in the newly introduced ""Opened Editors"" view. you can try from our insiders build: http://code.visualstudio.com/Download#insiders"
27518|Thanks so much for your interest in this issue! It is currently assigned to the backlog. Every month we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning for more information.   Since we are a small team of developers, there is only so many feature requests and issues we can work on for one milestone. Nevertheless we always welcome pull requests and are happy to accept them if they meet our quality standards.
27519|Thanks, this is an issue with our file watcher (and should be addressed with https://github.com/Microsoft/vscode/issues/6440). We currently do not detect file deletes (or moves as in this case) for files that are not part of the folder opened, but outside.
27520|Can be solved by passing `-1` when calling code snippets. I don't know why it works :smile:   ``` js                                                             \/ overwriteAfter: number snippets.getSnippetController(this.editor).run(codeSnippet, -1, 0, false); ```  ![2016-06-25_18-59-00](https://cloud.githubusercontent.com/assets/7034281/16357718/0c8b3c48-3b07-11e6-9b12-0f79fd12c13e.gif)
27521|@bpasero the consistency of the icons will be solved in time as @bgashler1 mentions this is the way we're heading (there may be 1 or 2 releases where they're inconsistent though). @bgashler1 actually came up with some pretty nice looking icons that featured a mini terminal (box around >) and +/- symbols in the top corner, the argument against these was that the most important part of the icons (+/-) was the smallest.  See https://github.com/Microsoft/vscode/issues/8018 for discussion on the new close icon.
27522|The language service might not always know what is possible at runtime. e.g values of an array or objects created a runtime. The way this is done in JS consoles is walking the prototype tree and properties.  On Sat, Jun 25, 2016 at 1:36 AM, Andre Weinand notifications@github.com wrote:  > @nojvek https://github.com/nojvek I don't think that the debugAdapter > is involved here. What is needed is access to the language model in the > debug console (and all other places where language specific code is > edited). The intellisense experience in the debug console should be the > same as in the editor (and the editor doesn't use the debugAdapter for > this). >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/8114#issuecomment-228523813, > or mute the thread > https://github.com/notifications/unsubscribe/AA-JVIdiGP7pRMOE-VbWhEwzKhvW_FwXks5qPOh9gaJpZM4I-AAT > .
27523|"Actually this hangs for a while after which it gives this error:  `Unable to instanciate quick open handler vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen - ExtensionsHandler: {""errorCode"":""load"",""moduleId"":""vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen"",""neededBy"":[""===anonymous8===""],""detail"":{""errno"":-2,""code"":""ENOENT"",""syscall"":""open"",""path"":""/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/out/vs/workbench/parts/extensions/electron-browser/extensionsQuickOpen.js""}}`"
27524|Support for all Emmet actions in the process development.
27525|@Spown sorry for duplicate. Deleted.
27526|definitely needed feature. watching for it ..
27527|+1
27528|I'm assuming this is a problem with the deletion as the terminal just defers all logic to the shell which I'm assuming is cmd (the default) in your cause?
27529|`ATOM_SHELL_INTERNAL_RUN_AS_NODE=1` is causing the issue.
27530|@aeschli FYI.
27531|@TheColorRed the language server protocol is supposed to be implemented in language different than JS/TS as well. To not cause any confusion with 0 in the protocol and may be falsy values all enums in the protocol start with 1. New enums (for example TextEditorCursorStyle) in the APi start with one as well. The reason CompletionItemKind starts with 0 is backwards compatibility.
27532|@bpasero assigning you as well since @joaomoreno is out next week.
27533|This issue was moved to Microsoft/TypeScript#9360
27534|@aeschli can you comment on the snippet request. Can't we define snippets on a workspace folder level.  @chrisdias @seanmcbreen for the workspace folder extension request.
27535|@badri-n18 Could you provide more details about what is not working?
27536|"- `""explorer.openEditors.visible"": 9`   ![1](https://cloud.githubusercontent.com/assets/6071313/16358773/2e714452-3b51-11e6-93fe-7baaacc0462b.jpg) - '""explorer.openEditors.visible"": 0'   ![2](https://cloud.githubusercontent.com/assets/6071313/16358774/34fcdb7e-3b51-11e6-96a5-db64241f8e33.jpg)  @bpasero  when ""explorer.openEditors.visible"" set 0, how can i do to [save all]?  don't use the menu bar."
27537|Closing. Didn't receive a response in 10 days.
27538|This is not a regression. Also happens in VS Code 1.2.1. Looks like emmet gets stuck in:  `C:\Alex\src\vscode\node_modules\emmet\lib\parser\css.js:186 - function eatString()`  Here are the locals I'm seeing in there, looks like that `while` loop never finishes:  ![image](https://cloud.githubusercontent.com/assets/5047891/16358841/24e51e66-3b21-11e6-99b0-e59d99aa4588.png)
27539|We use `emmet@1.3.1`. Just checked and `emmet@1.3.2` also loops in there indefinitely.
27540|Correct, `Foo` is in the list but not sorted to the top, I should have elaborated.  In this case, enough irrelevant [1] symbols are displayed in the list to hide a field. Furthermore, if the user wrote `Fo`, irrelevant classes like `FocusType` or `FogMode` would still be on top. In this case the user couldn't tab to complete `Foo`, s/he would have to write `F` `o` `o`, or scroll down the list.  It would be helpful to have some sort of context aware sorting, so that the symbols most relevant to the cursor location would appear on top.  ##   [1] Irrelevant as far as the context shows. Perhaps the user really would like a FixedJoint2D, but the nothing in the code besides the blanket `using UnityEngine` points at that.
27541|Sending the mode kind is only available in TS 2.0. Need to wait until it is officially available.
27542|is this already being worked on or is it something I could create a PR for?
27543|Updates?
27544|No, this is not yet possible.
27545|+1
27546|"@mrmlnc please tell me how to execute a command ""wrap abbreviation"" on hotkey?"
27547|"@nicothin, 1. VS Code insiders 2. File - Preferences - Keyboard Shortcuts 3. Press `Ctrl + K, Ctrl + K` (Windows) 4. Press desired key combination and Enter (for example: `ctrl+alt+w`) 5. In `command` section need to write `emmet` and press `Ctrl + Space` or Copy&Paste following code:  ``` json [{     ""key"": ""ctrl+alt+w"",     ""command"": ""editor.emmet.action.wrapWithAbbreviation"",     ""when"": ""editorTextFocus"" }] ```"
27548|Mini task, to keep you informed: - [x] Expand Abbreviation - [x] Balance - [x] Go to Matching Pair - [x] Wrap with Abbreviation - [x] Go to Edit Point - [x] Select Item - [x] Toggle Comment - [x] Split/Join Tag - [x] Remove Tag - [x] Merge Lines - [x] Update Image Size - [x] Evaluate Math Expression - [x] Increment/Decrement Number - [x] Reflect CSS Value - [x] Encode/Decode Image to data:URL - [x] PR
27549|@weinand thanks for your answer, but would you consider it right? 😊
27550|For reference (I forgot to link to this in my issue), i found this possibly related issue that was already closed. https://github.com/Microsoft/vscode/issues/4971
27551|@bpasero I totally hear you on the consistency issue.  What we could do is possibly get these icons ported into our old look (heavier stroke weight) to remain consistent while we await a new icon set.
27552|Unlikely. More likely, folder moves to trash and the terminal still shows it from there. Maybe you try to reproduce?  Or even worse (I dont hope), the terminal blocks a folder from getting deleted.
27553|I am very sorry to hear you are having issues with VS Code. I wonder if this issue is being caused by an installed extension. Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions` and try your steps again to see if it reproduces. If you see it is an issue with the extension, please file it against the extension repository itself.
27554|@realmx in this case you can - use the top level menu File > Save All - use the Save All command from the command palette (View > Command Palette)
27555|I would be interested to get a look at the icon set when it is available 👍
27556|@SkiftCreative this indicates that another instance of Code is already running. It should be fine if you restart or terminate the instance that is running.  It would be interesting to find out how you got into this state in the first place though. Do you remember?
27557|@miguelchico can you try setting `files.trimTrailingWhitespace` instead?  @alexandrudima fyi I think this might confuse more users and we might want to rename this setting to make this more obvious?
27558|I would rather suggest to have a setting that controls this for all our terminal commands 👍
27559|Thats the odd issue. Opening up Task Manager in osx shows no instances of code running. Even then, in the past ive been able to open up another new window from the cli before and it works. So I am not able to even terminate it.
27560|So, as I wrote that I thought of something. I installed `htop` on my system, and did a search through all processes by searching for `code` and  there were 5 instances of some helper running in the background. That I never saw in Task Manager. I may have missed them for some reason.  `/Applications/Xcode.app/Contents/Developer/Library/PrivateFrameworks/CoreSimulator.framework/Versions/A/XPCServices/com.apple.CoreSimulator.CoreSimulatorService.xpc/Contents/MacOS/com.apple.CoreSimulator.CoreSimulatorService`  Running code after killing the `*Helper*` processes that were running seemed to fix it. Code starts now. I am not sure when helpers they were. I stupidly killed them before copying their named. Here is an image of what processes were running:  ![image](https://cloud.githubusercontent.com/assets/89895/16360953/09fd6bc4-3b32-11e6-8c00-c4dd0b7c4b68.png)
27561|Looking through all that, i noticed (because I accidentally killed the wrong helper) that I have another electron app open. Nylas N1 (email client). Heres the processes I had (sorry htop isnt letting me copy and paste)  ![image](https://cloud.githubusercontent.com/assets/89895/16360970/69d3f4dc-3b32-11e6-9c1b-f4b15d1d2292.png)  Reference: https://github.com/nylas/N1  If theres anything else I can provide let me know. Ill try to reproduce it.
27562|It looks as if this action is simply going back 1 in history? That is not really what should happen if you want to go back to source.
27563|@SkiftCreative yes, htop is a good tool to really find all processes. Happy to hear it works fine again after you close those processes.  Please keep an eye open if this happens again and then maybe you remember what happened to get you there.  Did this ever happen more than once?
27564|Moving to @isidorn since Joao is out next week to consider if this is something for the release. Otherwise feel free to move back.
27565|Moving to @isidorn since Joao is out next week to consider if this is something for the release. Otherwise feel free to move back.
27566|@isidorn maybe we sit together next week to make a decision how to improve this 👍
27567|Nice work :+1:  thanks for getting this in!
27568|@badri-n18 if you are not opening a folder in VS Code, we do not restore any previous UI state. Could it be that?
27569|Yea i will definitely keep an eye on it. And no this is the only time it has happened. I am trying to break it now, but its not seeming to want to.
27570|@sandy081 yes, I think @alexandrudima did this and it is related
27571|This makes sense to me. @weinand do you agree?
27572|@jbeaudoin11 can you give me more details how you are still able to reproduce this issue?
27573|Think this is done?
27574|This is a historical problem #1778 :)
27575|Same issue here with build-in Zhuyin IM(Traditional Chinese) on OS X El Capitan. ![screen shot 2016-06-26 at 6 27 14 pm](https://cloud.githubusercontent.com/assets/4230968/16361720/2dd84b00-3bcc-11e6-8387-dc77cf522174.png)
27576|By analyzing the blame information on this pull request, we identified @egamma and @alexandrudima to be potential reviewers
27577|I was teaching HTML5 to high school kids using visual studio code.  Emmet wasn't working in their machines(PC and MAC). Also checked for updates.  Dont know whats the issue. Please advise.
27578|By analyzing the blame information on this pull request, we identified @egamma and @alexandrudima to be potential reviewers
27579|Hi **@mrmlnc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
27580|@sant123 sure, that's the reason for the little word 'yet' 😊
27581|@Tyriar let me know if I can help somehow to troubleshoot this issue, still not working for me Version 1.3.0-insider (1.3.0-insider) de66522e06d74752d48d92e934dcd026050355ba OS X 10.11.15 - 2012 Macbook Pro
27582|Thanks, I really appreciate it!
27583|"@bpasero I'm not using non-project windows and I've never used ""Close Editor"", but the proposed behaviour makes total sense to me. I'm not sure that we have to introduce a configurable option for this, though."
27584|@bgashler1 what are your plans how to compute the right colors for themes other than our default light and dark themes? Are CSS variables powerful enough to compute proper derived colors from the base editor background color?  If we cannot do that with CSS variables, we have to find another solution (LESS?) I guess...
27585|@bpasero that works! But... I don't understand because I found this option here https://code.visualstudio.com/Updates#_editor.  What I should do? Keep both properties? But keep trimAutoWhitespace and don't is the same for me right now...  Anyway thank you for the quick response.
27586|:+1: Very nice, thank you! I shuffled the code around to bring all the logic in the /editor/ folder (not have editor knowledge in /base/) and to make it that ctrl + scroll is looked for only on editor (not on trees, etc.)
27587|I would like to bring in our UX folks on this, rather than just merging it in and get their advice on how we can add functionality to the find widget without overdoing it.  @stevencl @bgashler1 Can I please get your opinion on this proposal?
27588|Very nice! :+1: Thank you!
27589|"I use the integrated terminal only for doing ""ng build"" and getting an error message about what failed to build. But I am never able to read the cause of the failed build because I can not scroll up. Not every error is in the error windows. Sometimes error appear only at build process.  Thus if you want to justify the existance of the integrated terminal it really needs scrollbars or I have to the CMD."
27590|It is super confusing to try and find my cursor without line highlighting.  Would love to see this!
27591|@dbaeumer This should now be closed?
27592|I'll start to digest the PR tomorrow, first scan shows that this is good work 🌹   One convention you missed is this one: https://github.com/Microsoft/vscode/wiki/Coding-Guidelines#strings We have lint checks based on this convention that finds strings that are not localizable.
27593|@egamma, oh, sorry, i forgot about it. Now fix it :+1:
27594|@mrmlnc this is a question unrelated to the PR, but given your emmet know how I thought I'll ask you. Do you know the purpose of the gulpfile inside the emmet module? It looks like it supports to package/bundle emmet. Is any other editor using this? I ask since the startup time of emmet is significant and we look into options to reduce it.
27595|There is some duplication in the code that I introduced and that should be improved, eventually.  This method can be written generically when the action is configured with the emmet action name.  ``` typescript     public runEmmetAction(_module) {         if (!_module.run('balance_outward', this.editorAccessor)) {             this.editorAccessor.noExpansionOccurred();         }     } ```  Something like   ``` typescript class BasicEmmetEditorAction extends EmmetEditorAction {     ...         private emmetActionName: string;      constructor(descriptor: IEditorActionDescriptorData, editor: ICommonCodeEditor, actionName: string) {         super(descriptor, editor, Behaviour.TextFocus);         this.editorAccessor = new EditorAccessor(editor);                 this.emmetActionName = actionName;     }      public runEmmetAction(_module) {         if (!_module.run(emmetActionName, this.editorAccessor)) {             this.editorAccessor.noExpansionOccurred();         }     }    ```  I'll first start with the PR and I'll refactor and you can review.
27596|"Why are we removing ""Ext install""? The new way is REALLY not intuitive."
27597|提问题前最好先搜索下要提的问题是否有人反馈过了。 你这个问题已经有很多人反馈。在1.3.0最新的insider修复了。
27598|> @egamma  Do you know the purpose of the gulpfile inside the emmet module?  Just build all files into one with Browserify. Simply launch the Gulp and get the output files. For example:  ![conemu64_2016-06-27_05-34-56](https://cloud.githubusercontent.com/assets/7034281/16367129/129fada8-3c29-11e6-9276-29444e807c95.png)  And these files can be used in VS Code:  ![photoshop_2016-06-27_05-13-36](https://cloud.githubusercontent.com/assets/7034281/16366860/11f2674a-3c26-11e6-9f6b-95bb7b6610ed.png)  Can play with the settings Browserify that to get a size smaller. For example (`fullPaths: false`):  ![conemu64_2016-06-27_05-35-47](https://cloud.githubusercontent.com/assets/7034281/16367140/2bba4910-3c29-11e6-8f52-d41d4ee7df32.png)  Or even more, using `bundle-collapser` plugin:  ![conemu64_2016-06-27_05-36-20](https://cloud.githubusercontent.com/assets/7034281/16367146/3fafc8b4-3c29-11e6-8bb5-f8ad936ecae0.png)
27599|@alexandrudima Thanks!
27600|Will be covered when vscode-docs work item https://github.com/Microsoft/vscode-docs/issues/124 is completed.
