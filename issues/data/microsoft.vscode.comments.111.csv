11001|this is important especially when needing to restructure an app by moving multiple files into other folder locations or deleting many files at once. we tend to do this often when in the early stages of web app development.
11002|Fixed with changes from #3494
11003|Let's leave it open for the fix. ;)
11004|:fireworks:
11005|That's what this issue is for so this should stay open until https://github.com/Microsoft/TypeScript-TmLanguage/issues/44 gets in.
11006|cc @rkeithhill
11007|That works for me, what you have is the same as how it works in Sublime Text.
11008|@bpasero thoughts?
11009|"Alexandru,  Thank you for reaching out. The way VS performs a vertical selection is the ""correct"" way, in that it is the classic way we expect that action to perform, coming from other editors.  Your second demo as VSCode performs on master is interesting and of value but not the expected behavior.   The problem with the current VSCode behavior is that it specifies in the design that the ""box"" selection will always be to an ""end of line"" condition, including  the CR. An expected vertical selection would be my desired box of data,  not always extended out to the CR at a variable horizontal distance. The current VSCode implementation is not a vertical selection box behavior. It is a variable length selection at each line.  In a perfect world the classic VS way would be the default, implemented with just an Alt Key and mouse draw.  Then maybe your current VSCode way with a Alt+Shift  and mouse movement, as a secondary option. But it is not very usable.  If I could only have one I would much prefer the expected classic  behavior, as in VS, as that permits me to select the vertical data what I want/choose and not be forced to include more data + CRÂ¹s in my selection.  Can we have the classic behavior as implemented in VS?  Thanks for asking !  -Ric"
11010|Well I recommend the deb package when it's out, it just handles everything for you; a nice launch wrapper, launcher integration, registering apt repository for updating through OS software updater (https://github.com/Microsoft/vscode/issues/2973). Plus clean removal with `dpkg`/`apt-get`.
11011|Thanks for the fix.
11012|We support returning Capabilities from the `initialize` request now in the PowerShell extension.  We do not return the `exceptionBreakpointFilters` field.  I believe this should be effectively declaring that we do not support exception filters but we still get the setExceptionBreakpoints request and the breakpoint UI shows the exception breakpoints (all and uncaught). Sounds like this change, would eliminate those messages.  Does it fix the UI as well?  BTW WRT to the debug protocol, is it better (more efficient) to not return a field at all versus returning `null`?
11013|btw I went with 'Configured Tab Size', not sure if 'Configured Tab Size in Workspace' is better to make it more clear that it is coming from the settings file. Though it might be come from user.json and then it might be confusing
11014|Ah, This apparently is a TypeScript problem and not a VS code problem, which is why I couldn't find it:  https://github.com/Microsoft/TypeScript/issues/6312
11015|Yep, this is certainly annoying. I think it's root cause is related to issue https://github.com/Microsoft/TypeScript/issues/6459 that I created,  https://github.com/Microsoft/TypeScript/issues/6312 that my issue was close enough to label as 'duplicate', as well as other issues it's connected to.
11016|looks like it's not relevant anymore. I'm closing it
11017|This is fixed for me in the latest Insiders release, thanks a lot!
11018|This is blocked by https://github.com/Microsoft/vscode/issues/3422
11019|@bpasero correct. I'm using English keyboard with english locale
11020|@bpasero I think the high CPU use was definitely due to the large dir (it was a few gigs in size), which is understandable if the entire dir is being processed. After clearing out the large dir, the CPU use dropped instantly to a very normal amount.  But the large dir was in the list of `files.exclude` (and didn't show up in vscode), so I think the issue is that files in `files.exclude` are still being processed. Not sure if there's another setting to exclude it completely though.
11021|@weinand  Could you please take a look? Thanks.
11022|I apologize, I didn't read the release notes carefully enough.  This is mentioned there already.  I'll close this issue since it's already being tracked by #3422. Thanks!
11023|@bpasero Thanks for your information.   I have tried as below: ![markdown-cdoe](http://i.imgur.com/OHUXh17.png).  It has no color applied on the code block, but it better than partially colored.
11024|I used to use tabs when I use Visual Studio, but now I absolutely prefer code navigation with keyboard. `Ctrl+E` type the file name, `Ctrl+E` to select target file and go. I don't need to remember where the tab is any more.  While I support your voting for this feature, I strongly suggest you trying to adapt keyboard navigation that makes my life easier.
11025|@bpasero Yes, this is on Windows.
11026|@isidorn I think I know the answer, but just to confirm -- this is for March, correct?
11027|@Tyriar can you inspect what HTML element the message is in DOM? I suspect the middle mouse scrolling revealed it somehow.
11028|@cwliu it should look better if you use the Dark+ theme. You can also add the language type after the backticks to color it for the language.
11029|"``` <div class=""alert"" role=""alert"" aria-atomic=""true"">Warning: Some projects have trouble loading. Please review the output for more details.</div> ```  Inside `body > div.aria-container`"
11030|Thanks, I suspected that one.
11031|Sorry I don't have it anymore. To give you a clue, I was using typescript to generate the .js files. I now change it to do compile on the fly.  I guess the .js files was at fault but I was hiding them using the configuration in typescript and only worked on the ts files. This could be why VS Code could not show me the error.  I hope you can find it.
11032|Adding `left: -999em` to `.aria-container` will correctly take it out of the page flow.
11033|Yeah, something like that. We still have to ensure a screen reader picks it up.
11034|I like the suggestion but it would seriously break all clients that expect the current behaviour including Unity plugins that are written so that you can easily open a file from Unity in VS Code. I would not want to make this change easily as this format has been out since almost a year without complaint.
11035|Yep, sending it off screen should still be read out by the screen reader.
11036|Indeed, There is the screenshot using Dark+ theme and set the type to JAVA  ![image](http://i.imgur.com/BAvtoL5.png)
11037|This will break all adapters that do not use `configurationDoneRequest` yet but rely on `setExceptionBreakpointsRequest` to run
11038|@bpasero any idea?
11039|"You seem to be behind a proxy. There are a couple of settings that may be useful to you:  ```     //-------- HTTP configuration --------      // The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables     ""http.proxy"": """",      // Whether the proxy server certificate should be verified against the list of supplied CAs.     ""http.proxyStrictSSL"": true, ```"
11040|@daviwil If the extension register a completion provider, then only that is used. This seems to be a Powershell specific issue, can you move it there?
11041|Closing as duplicate of #224. Please continue the discussion there.  My personal opinion: there is nothing more tabs provide me than what <kbd>Ctrl E</kbd> already does. Oh, besides the pain of having to look for _where the hell that tab is_ once I have more than 6 open.  cc/ @chrisdias @waderyan @seanmcbreen
11042|@bpasero gave it to you for link detection. fwd if wrong
11043|cc @egamma
11044|cc @chrisdias @egamma @waderyan @seanmcbreen @bpasero @alexandrudima
11045|Does it remains in a spin forever? Does your adapter return a response. I do not see the 'this' in your variables response. Are you sure the names are unique across scopes. E.g you do not have two `this` variables
11046|It does support `$1` `$2`, etc., for group matches. It doesn't seem to support `$0` for the entirety of the match.
11047|For sure we're blindly converting to/from `utf8` somewhere...
11048|> Does it remains in a spin forever? Does your adapter return a response.  Yep. The spin remains forever. The response is correct, the response value is attached above.  > I do not see the 'this' in your variables response.  The varialbes response is the value of `this`.  > Are you sure the names are unique across scopes. E.g you do not have two this variables  Yep, only one this.  And you can return a response with the value i offered to have a try.
11049|Duplicate of #821
11050|Codelens rendering cheese
11051|Sorry for that, glad you caught the culprit!
11052|Well, whad'ya know!  ![bug](https://cloud.githubusercontent.com/assets/22350/13421700/40e39210-df90-11e5-80c5-9e72b15296ec.gif)
11053|Not supported and not in the near future plan.  cc @chrisdias @egamma
11054|This was implemented on purpose. How cool is that? cc @alexandrudima
11055|Well then that is the reason for the slowness. Not sure if we can properly display 3000 elements in our tree. Am I reading your response properly, this has around 3000 children?
11056|Being consistent makes sense
11057|Yep, it loads many javascript files, and the global object will record loaded script files.
11058|May i know why it is slow to display? Is it too much work to do for it? As i thought, it just loop the object and display them.
11059|We use a virtualised tree so this should work in theory, though we never stress tested it. Is there some way I can get this reproduced on my machine?  Can you also try to send 100 variables instead of 3000 to see if that makes a difference?
11060|@minggo You'll have to consider to show the data in chunks (like we do for large arrays): ![2016-03-01 10-09-50](https://cloud.githubusercontent.com/assets/1898161/13422542/d53ce4e8-df95-11e5-95ed-0bdc56fe8e6c.png)
11061|I'd like to jump in and work on this, as I've heard the same thing from others. Are there any design guidelines or references, @Tyriar?
11062|@isidorn  My debugger is special, it is not easy to create a demo. But i think it will happen in Node debugger if an object has many properties. I will try to reproduce it if i have time.  100 variables works correctly.  @weinand  It looks good. Does it mean that i have to check the properties size, and create new variables dynamically? For example, `[0..999]` is a variable name generated dynamically, right?
11063|There is a command to do this in F1 and you can change its keybinding.
11064|@rkeithhill yes, the `configurationDone` request is called after all configurations are done (that means after setFunctionBreakpoints).   @isidorn is there are guarantee that `launchRequest` is always called after the `configurationDone`?
11065|@jrieken fyi
11066|"""Close Others"" has been added for February."
11067|#751
11068|@pieandcakes win10?
11069|@Sujay-shetty can you attach the npm debug log?
11070|@Elejdor Are you building your own debug adapter based on mock-debug? Did you build your debug adapter?
11071|"@joaomoreno I think you were too fast in closing this issue.  Today I had the same error on another computer.  Since I knew I could have the same problem, here is what I did: 1. Visual Code for Insiders wasn't running so I checked if there was a sh/git process: there was none 2. I started Visual Code for Insiders which loaded an empty workspace: again, there was no sh/git process 3. I then opened a directory containing a git project and checked again: now there was a git process, which had been started from the directory I just opened 4. I received the update, and clicked on ""restart and update"" 5. I got the same error  It seems the git process is started by Visual Code, but isn't properly stopped when Visual Code is quitted and the update process is started."
11072|@jayrosen1576 The find widget toggles also control the behaviour of `cmd+d`. The toggles can be used even when the find widget is hidden:  Here are the mac keybindings: - case sensitive: `cmd+alt+c` - whole words: `cmd+alt+w`  ![ctrl-d-case-sensitive](https://cloud.githubusercontent.com/assets/5047891/13422984/b002674a-df98-11e5-9f71-b55c96ce8e75.gif)
11073|@weinand no, there is no guarantee.  `launchRequest` is guaranteed to be called after I get a response from an `initializeRequest`. `configurationDone` is guaranteed to be called at the end of all the configuration which is started when an `initialized` event is received. Since VSCode does not control when it receives the `initialized` event from the adapter, VSCode can not guarantee that launch is always called after configuration done.
11074|Nice catch!
11075|"More information..  Here is the exact command line that was started:  `""C:\Program Files (x86)\Git\bin\sh.exe"" ""c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\electron-main\askpass.sh"" ""Password for 'https://warpdesign@bitbucket.org': ""` (from Process Explorer)  Again, killing this process and clicking ""try again"" fixes the problem."
11076|"@rkeithhill yes, the breakpoints returned from the response must be returned in the same order as the breakpoints passed to the request. Otherwise there would be no way to know what response corresponds to what input.  The comment for `SetBreakpointsResponse` says: ""The array elements correspond to the elements of the 'breakpoints' (or the deprecated 'lines') array.""  I will make clearer that 'correspond' means: in the same order."
11077|handlebars inherits link detection from html and tries to make everything inside href be a link. We might as well remove link detection completely from handlebars
11078|Yep definitely. Added to the wiki.
11079|@SetTrend To clarify, the navigation is refurbished, but Ctrl+Right will still go to the end of the words, and not to the beginning of words as in Visual Studio 2015.  We're tracking this in #3577 and considering making it into an editor option.
11080|@minggo yes, `[0..999]`is a dynamically introduced 'dummy variable'.
11081|@rkeithhill yes the UI will be fixed as well, exception breakpoints will not appear if you do not return a field or if you return null ( it is handled the same on the vscode side)  @gregg-miskelly yes, for march, we usually try to set our issues to the correct milestone  @felixfbecker true. Adapters should not rely on this behavior that setExceptionBreakpointsRequest is the last called
11082|@aeschli It is not clear to me what I should do -- should I try to hide all content widgets inside hidden areas?
11083|Agreed!
11084|@isidorn I'm not sure that a virtualised tree can help if the underlying data model is not virtualised. So even if the tree only shows the items that are visible (e.g. 10 items), the underlying data model has to retrieve all 3000 items from the debug adapter before the tree can start the rendering of the 10 items.
11085|@weinand  Thanks, i will try it.
11086|@weinand true, but the underlying model does not have to retrieve the 3000 items seperatly from the debug adapter, it just retrieves all the children in one request - unless I am missing something here.  Closing this since there is a workaround, and will reopen if we get reproducable steps to look more into this. I just tried a simple sample and it worked great for me  ``` var large = {}; for (var i = 0; i < 3000; i++) {     large[i] = 'hello'; } ```
11087|"Hi @bpasero,  Please find the npm logs below.  304 info Code@0.10.10 Failed to exec postinstall script 305 verbose stack Error: Code@0.10.10 postinstall: `npm --prefix extensions/vscode-api-tests/ install extensions/vscode-api-tests/ && npm --prefix extensions/json/ install extensions/json/ && npm --prefix extensions/typescript/ install extensions/typescript/` 305 verbose stack Exit status 1 305 verbose stack     at EventEmitter.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\lib\utils\lifecycle.js:214:16) 305 verbose stack     at emitTwo (events.js:87:13) 305 verbose stack     at EventEmitter.emit (events.js:172:7) 305 verbose stack     at ChildProcess.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\lib\utils\spawn.js:24:14) 305 verbose stack     at emitTwo (events.js:87:13) 305 verbose stack     at ChildProcess.emit (events.js:172:7) 305 verbose stack     at maybeClose (internal/child_process.js:818:16) 305 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5) 306 verbose pkgid Code@0.10.10 307 verbose cwd E:\vs-code\vscode-master 308 error Windows_NT 6.1.7601 309 error argv ""C:\Program Files (x86)\nodejs\node.exe"" ""C:\Program Files (x86)\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" 310 error node v4.2.2 311 error npm  v2.14.7 312 error code ELIFECYCLE 313 error Code@0.10.10 postinstall: `npm --prefix extensions/vscode-api-tests/ install extensions/vscode-api-tests/ && npm --prefix extensions/json/ install extensions/json/ && npm --prefix extensions/typescript/ install extensions/typescript/` 313 error Exit status 1 314 error Failed at the Code@0.10.10 postinstall script 'npm --prefix extensions/vscode-api-tests/ install extensions/vscode-api-tests/ && npm --prefix extensions/json/ install extensions/json/ && npm --prefix extensions/typescript/ install extensions/typescript/'. 314 error This is most likely a problem with the Code package, 314 error not with npm itself. 314 error Tell the author that this fails on your system: 314 error     npm --prefix extensions/vscode-api-tests/ install extensions/vscode-api-tests/ && npm --prefix extensions/json/ install extensions/json/ && npm --prefix extensions/typescript/ install extensions/typescript/ 314 error You can get their info via: 314 error     npm owner ls Code 314 error There is likely additional logging output above. 315 verbose exit [ 1, true ]"
11088|"@isidorn ""Adapters should not rely on this behavior that setExceptionBreakpointsRequest is the last called"": This is only true after we have improved the spec by introducing the `configurationDoneRequest`.  For backward compatibility we will have to support the old behaviour if `configurationDoneRequest` does not exist or is false."
11089|Lets continue accessibility work via issues reported. Closing this one.
11090|@joaomoreno I can reproduce on Win 10 with npm 3, but not with npm 2. I think npm 3 might be more picky about failing postinstall tasks.  It fails here for me:   npm ERR! vscode-json-server@0.0.1 compile: `tsc -p .` npm ERR! Exit status 2
11091|@minggo make the implementation of the debug protocol requests as fast as possible. If you wait too long (because you have to read files from disk), the VS Code UI will show the spinner. To avoid this, try to return some proxy that can be generated quickly.
11092|@weinand  Thanks for the information.
11093|@alexandrudima Looking at the other use cases of the ContentWidget (hover, parameter hints, lightbulb, rename, suggest), it seems to me that a content widget attached to a hidden position should never be shown.  Alternately we could add an API to ask for hidden lines. The code lense could skip the computation and visualization of hidden elements. We would also need a hidden lines event listener.
11094|@weinand @isidorn You should still send the exception request if the adapter does not support configurationDoneRequest
11095|I can not repro this with the march insider release of VSCode I tried putting `${workspace}` in the `program` attribute in my `launch.json` and I get a nice warning  Can you please provide your `launch.json` for which you get this error message. When do you get this error message?  ![screen shot 2016-03-01 at 11 19 57](https://cloud.githubusercontent.com/assets/1926584/13424231/94dcbd56-df9f-11e5-985b-cfb1d6acee4d.png)
11096|@isidorn  the error message does not make clear that a variable 'workspace' does not exist. Is there a better way to show this error?
11097|@weinand this error is generated by the adapter, so it can massage the error in any way. For showing a squiggle when a user uses an unexisting ${variable} is not supported right now by out json schema.   Throwing an error when we try to substitute an unexisting ${variable} might be possible, but then users will never be able to use ${} syntax in their configuration files. If you believe this is a good approach please file a feature request against Dirk.
11098|Discussed with Joao the concerns he raised and demoed him and Erich the new implementation.
11099|Addressed on latest. When you create a new tasks.json file you now only have the snippets in and no ts prefix.
11100|"There are two issues here: the tasks is only picked up when the file is actually existing on disk. That is how our settings story work. The second is the HelloWorld.ts file which is confusing as well. In the new version I exchanged ""HelloWorld.ts"" with a snippet variable."
