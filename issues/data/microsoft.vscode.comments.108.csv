10701|I added code to avoid calling setHiddenAreas unless a folded region has been updated.
10702|Hi **@pflannery**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
10703|"@egamma This might be a psychology thing. I guess when the update notification comes up, users can get a bit excited about new toys, and the obvious thing to do is to hit that update button asap.  Maybe it would be a good idea to display the release notes notification again once the user starts the updated VSCode for the first time.  E.g. ""Visual Studio Code was recently updated. Do you want to read release notes now"", offering options like ""Release Notes"", ""Not now"", ""Do not ask again""."
10704|**@pflannery**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
10705|**@pflannery**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
10706|A couple of things - ~~I wasn't sure on was how I could add typings for this new setting.~~ - ~~I couldn't find any tests for this area so I haven't added a test. So instead I've extracted the dependencies use to spawn into spawnTerminal(...) so its easy to mock in the future~~
10707|After reload can not repro -> will reopen if I get steps
10708|Question for the VS Code guys: under what circumstances does the Sublime-style auto completion become enabled?  Does that feature get turned off when my extension registers a completion provider for the .ps1 file type?
10709|duplicate of #3488
10710|:fireworks:
10711|As you can see, the blocked variable is `this`.
10712|Why would I know?
10713|Well, typing d no longer makes it trailing whitespace.
10714|More information:  The variables are not cleared as #3382 mentioned.  VSCode: v0.19.0 Mac OS X: 10.11.2
10715|Verified that the issue is gone
10716|Actually it is happening all the time, my console is full of these errors
10717|I have to admit, the default way with the 3 sheets limit and working files list (top left) was ok with me for about 2 months. But for larger projects, i need a better way.  Tabs is the standard paradigm to solve this problem with large projects. I cant think of a better way.
10718|Nice!
10719|Wrote test
10720|Nice!
10721|Please attach the js file you were using with ESLint
10722|"This is only happening if you have eslint installed and have a file with the following content  ``` var express = require('express'); var path = require('path'); var favicon = require('serve-favicon'); var logger = require('morgan'); var cookieParser = require('cookie-parser'); var bodyParser = require('body-parser');  var routes = require('./routes/index'); var users = require('./routes/users');  var app4 = express();  // view engine setup app4.set('views', path.join(__dirname, 'views')); app4.set('view engine', 'jade');  // uncomment after placing your favicon in /public //app.use(favicon(__dirname + '/public/favicon.ico')); app4.use(logger('dev')); app4.use(bodyParser.json()); app4.use(bodyParser.urlencoded({ extended: false })); app4.use(cookieParser()); app4.use(express.static(path.join(__dirname, 'public')));  app4.use('/', routes); app4.use('/users', users);  // catch 404 and forward to error handler app4.use(function(req, res, next) {   var err = new Error('Not Found');   err.status = 404;   next(err); });  // error handlers  // development error handler // will print stacktrace if (app4.get('env') === 'development') {   app4.use(function(err, req, res, next) {     res.status(err.status || 500);     res.render('error', {       message: err.message,       error: err     });   }); }  // production error handler // no stacktraces leaked to user app4.use(function(err, req, res, next) {   res.status(err.status || 500);   res.render('error', {     message: err.message,     error: {}   }); });  module.exports = app4;  // asddasdasads   ```"
10723|+1
10724|![image](https://cloud.githubusercontent.com/assets/5047891/13358791/528d443e-dcb1-11e5-92d8-e10f45871fcf.png)
10725|"I finally found all the pieces needed for a complete solution working behind a corporate proxy on Windows:  I use fidller as authentication proxy ( no need to set fiddler as system proxy replacement)  Set environment variables: (also usefull for other tools)   _JAVA_OPTIONS=-Dhttp.proxyHost=""localhost"" -Dhttp.proxyPort=""8888"" -Dhttps.proxyHost=""localhost"" -Dhttps.proxyPort=""8888""   HTTP_PROXY    :    127.0.0.1:8888   HTTPS_PROXY   :    127.0.0.1:8888  for SSL certificate problem:  create a  .coderc file in your user dir with contents:  strict-ssl=false  I also added it to the user settings file but that didn't help with the extentions  Make sure you have  updated to version 0.10.8 to have the fix for installing extentions"
10726|ping @aeschli
10727|"yeah, it's mainly useful when using ""packages"" or ""map"". otherwise typescript code is full of errors, or need to manually create a definitions file for `declare module ""package/something""`, and in a 40+ file project, can get nasty in no time  another reason I asked for this feature is because it's implemented in Typescript itself, you can output ""system"" modules with a configuration  see, when systemjs/systemjs/issues/999 lands, it will be possible for modules to have the global System config merged for each module, just like it happens with typings field in package.json, and no need for further modifications in config files (JSPM is a package manager that works using SystemJS as a base for those unaware)"
10728|Just a follow up comment on this issue, I have ran into similar problems caused by file permissions. I attempted to normalize the file modes, but it didn't seem to make a difference for the above issue.  Thanks!
10729|"Ubuntu Software Center has an issue where it displays only those in official repos, not based on the `DEBIAN/copyright` file:  > What is currently in Karmic Beta is not very good nor useful. >  > it just says >  > ""License: Open Source"" >  >  For everything in main and universe >  > and ""unknown"" for things in multiverse > ""proprietary"" for things in restricted >  > instead of ""Open Source"" software-center needs to use the copyright information from the packages >  > see http://dep.debian.net/deps/dep5/  https://bugs.launchpad.net/ubuntu/+source/software-center/+bug/435183/comments/5  This issue can be closed when the `DEBIAN/copyright` file serves the correct license for both official and OSS builds."
10730|Hi MSLaguana,  I downloaded the plugin yesterday, and i think that is the latest update.  This is my system information: Cordova CLI: 5.4.1 Gulp version:  CLI version 3.9.0 Gulp local: Ionic CLI Version: 1.7.13 Ionic App Lib Version: 0.6.5 OS: Windows 7 SP1 Node Version: v4.2.1  I don't know what else to look, you need any more information? Please do not close the issue.
10731|@bgse @egamma omg yes, you're spot on with that analysis @bgse. I literally do that, _especially because of how fast the VS Code update process is_!!! :smile:   I still like my idea of displaying the release notes after an upgrade, or alternatively, showing **just** the release notes button / notification as @bgse suggested. :smile: :smile:  Maybe have an option to disable it in the VS Code config?
10732|:+1:
10733|Actually considering that this license does not seem to be exposed anywhere, just available by extracting the deb, I won't go ahead with this.
10734|Version 1.0.2 of the cordova-tools extension had an issue, and only a couple of hours before I posted my response we uploaded 1.0.3 which had the fix. If you re-install the extension it should work. If not, please open an issue at https://github.com/Microsoft/vscode-cordova and we'll follow up there.
10735|The `r` has these classes: `token meta property-list property-name support type css`
10736|@bgse and @pcgeek86 thanks for your insights, we spend some real time on the release notes, it would be a pity if they are not getting read.  // @joaomoreno
10737|There are a couple of problems that cause this: - `from` highlighting is not supported - The scope `meta.property-name.css` isn't very strict about the form of the property name, for example `abcfont-sizedef` would highlight `font-size` in the same. This could be a result of `@keyframes` support being poor.
10738|@Elusive138 no problem the issue is good and found its home eventually :smile:
10739|"This feature is sorely needed, and is trivial to implement. I was able to use @pflannery's fork and https://github.com/mrmartineau/SetiUI-Icons-Sublime to add in default icons right into the my own build.  One thing though: some files should be themed based off of more than extension. package.json, gulpfile.js, etc should be themed based off of name. I suppose adding built-in support for specific filename classes would be better (faster/less cluttering to the DOM) than adding a class for the entirety of every file's name.  While we wait, does anyone have a comprehensive, ""good"" looking grayscale icon pack? The icon pack I used doesn't mesh very well with the dark theme and is a little distracting."
10740|+1
10741|"We always convert to a good platform before sending to the adapter, so this launch.json we still work on mac. Though when it is generated on the mac we nicely put ""program"": ""${workspaceRoot}/bin/www"",  I think all is good here"
10742|This is still confusing, isn't there a way to watch and still run other tasks? Ideally one should be allowed to run multiple watches like css preprocessors like less, tsc compliation, and still run tests manually.  Additionally instead of having watcher, it would be a better if one could trigger a task when certain filetype changes, e.g. I don't need to watch for less if I could just trigger less task when *.less changes. (There are plugins for this, but this should be part of tasks.json)
10743|"I don't agree watch is always a good choice, especially since if you have watch running you can't execute other tasks without terminating.  Also creating another process just for watching less, sass is a overkill, it would be a better if IDE could be made to trigger the task when certain filetype changed, like:  ``` {     ""triggerOnSaving"" : ""*.sass"",     ""args"": [""-c"", ""path/to/.sass-lint.yml"", ""-v"", ""${file}""],     ... } ```"
10744|+1  I would like to do `shift+cmd+leftMouseButton` for Peek Definition, would be a perfect combination for me.
10745|I think the behavior I described should also apply to the behavior of `Command + P`, when you want to switch to a file and there are multiple possible matches for the user's search term.
10746|I'd very much like to see terminal-supplied color output supported. It's super-hard to glance and read output right now, and forcing everyone to use a problem matcher to color after the fact seems like an inferior solution. Thanks!
10747|"I came here to say this. Very annoying bug, I keep having to hit ""esc"" after I go to a new line."
10748|"Listen, vertical or column selection is a very simple concept, not including grander concepts like ""multiple cursors"". You put your cursor where you want to start, hold the Alt key down for the duration, and with the mouse move the cursor to the right and then down to create the desired box of selected text. One keystroke held down, the Alt Key, then a simple drawing action.  Please, don't make this thing be some fangled 3-finger salute!"
10749|"Another issue I don't see in that list is user-configured folding like this example from C#:  ``` csharp #region Public methods ... #endregion ```  In the PowerShell extension we would like to provide this same sort of feature the same syntax as what C# uses which, in PowerShell, looks like a ""special"" comment."
10750|I found another issue and want to keep it documented. Do you think this is the best place? I can create a separate issue or find another place to track these es6 issues.   ![image](https://cloud.githubusercontent.com/assets/2449568/13370881/dcaeb502-dccb-11e5-943d-4c73f9a72ba4.png)  This is from ReactStarterKit. Here is the code not in an image.   ``` import React, { Component, PropTypes } from 'react';  function withStyles(...styles) {   return (BaseComponent) => class StyledComponent extends Component {     static contextTypes = {       insertCss: PropTypes.func.isRequired,     };      componentWillMount() {       this.removeCss = this.context.insertCss.apply(undefined, styles);     }      componentWillUnmount() {       this.removeCss();     }      render() {       return <BaseComponent {...this.props} />;     }   }; }  export default withStyles; ```  The error message I see is 'property declarations can only be used in a .ts file'
10751|Error message on hover: 'decorators' can only be used in a .ts file.   ![image](https://cloud.githubusercontent.com/assets/2449568/13370900/9857e148-dccc-11e5-954f-acc843e472f8.png)
10752|Ah ... I think I got it. Decorators are an ES7 feature.
10753|"Excuse me for being objective to this idea, but i see no advantage of tabs. The reason they left it out was for a cleaner workspace. In the latest release they have gone so far as to remove the top options bar by pressing `alt` . I understand this is a paradigm in most other editors, but it seems verbose . There are multiply ways in which to view working files. The obvious one is the ""working files"" in explorer , `ctrl + tab`, or just `F1` and then type the file name you are looking for. There is also the idea of working with windows side by side which can be resized and activated to the larger size when in focus, like an accordion, this also allows for a `ctrl + tab` on each of the 3 windows with each window displaying a different list based on its history. Add `ctrl + b` to remove explorer and you have a tidy workspace.  I see no benefit from tabs, i think is encourages newbies to use their mouse instead of the keyboard shortcuts to navigate around files. If the issue is with seeing the working files the `ctrl + tab` option is a lot cleaner with a view of more files and meta data of the files, which in larger projects is actually really helpful. as apposed to just a filename in the case of tabs.   From the uservoice this option is under review, but i think personally, someone should build an extension if they want this. I think vscode is trying to be as light weight as possible with the user choosing his/her extensions to meet his/her coding style.  ""because an editor shouldn't force you into anything"" .. applications will always be opinionated, every editor is. I think vscode is really trying to endorse a strong extension library with which it becomes the developers who choose where they want the editor to go."
10754|"@4tron   > Excuse me for being objective to this idea, but i see no advantage of tabs. The reason they left it out was for a cleaner workspace. In the latest release they have gone so far as to remove the top options bar by pressing alt . I understand this is a paradigm in most other editors, but it seems verbose . There are multiply ways in which to view working files. The obvious one is the ""working files"" in explorer , ctrl + tab, or just F1 and then type the file name you are looking for. There is also the idea of working with windows side by side which can be resized and activated to the larger size when in focus, like an accordion, this also allows for a ctrl + tab on each of the 3 windows with each window displaying a different list based on its history. Add ctrl + b to remove explorer and you have a tidy workspace.  Well, I disagree because the working files isn't mutually exclusive, meaning, it can coexists with tabs.  The reason they left it out doesn't matter so much because I don't think that a _cleaner_ workspace is more important than the style many developers were accustomed to for many years.  I completely respect your position and understand why would it seems verbose but _verbosity_ isn't a bad thing! certainly not in this case where for many developers it's part of their workflow.  > I see no benefit from tabs, i think is encourages newbies to use their mouse instead of the keyboard shortcuts to navigate around files. If the issue is with seeing the working files the ctrl + tab option is a lot cleaner with a view of more files and meta data of the files, which in larger projects is actually really helpful. as apposed to just a filename in the case of tabs.   I'm a keyboard kinda guy and ctrl+tab or holding ctrl in Visual Studio allows me to jump between files quickly or even to move between windows inside the IDE.  I don't need an editor to educate me about productivity and newbies will use their mouse whether it's to jump between working files or click/select something in an editor or whatever, not everyone are keyboard oriented and if that makes some people happy! this should be acceptable workflow, even though I fully understand the mouse vs keyboard argument but again it shouldn't be the editor's job to tell you how to work and if anything it can prevent newbies from using it.  >  From the uservoice this option is under review, but i think personally, someone should build an extension if they want this. I think vscode is trying to be as light weight as possible with the user choosing his/her extensions to meet his/her coding style.  Unfortunately it's not really possible to make an extension for tabs, not everything is extensible within VSCode.  The lightweight argument is a bit silly because it won't bloat the editor but some people use it without even understanding what it means but whatever...  > applications will always be opinionated, every editor is. I think vscode is really trying to endorse a strong extension library with which it becomes the developers who choose where they want the editor to go.  Again, I don't know how much you read about the program's architecture but it's not possible to extend the UI because there's no extensibility point available to do it!  To really make it work you need to fork it and modify the UI because you can't really make an extension for it."
10755|"Please fix this issue. I try to stripping `electron` from `vscode` rpm package. It return following error.  RPM spec: http://copr-dist-git.fedorainfracloud.org/cgit/mosquito/test/vscode.git/tree/vscode.spec?id=17ce85d650470e023ff37e7412d62c5aa222b304 RPM:  https://copr.fedorainfracloud.org/coprs/mosquito/test/build/163492/  ``` Version 0.10.11 Commit 8b7f21e10bf69745bde4330a337e9501972e983b Shell 0.36.8 Renderer 47.0.2526.110 Node 5.1.1 $ dnf install https://copr-be.cloud.fedoraproject.org/results/mosquito/test/fedora-23-x86_64/00163492-vscode/vscode-0.10.11-1.fc23.x86_64.rpm $ export ELECTRON_ENABLE_LOGGING=1 $ export ELECTRON_ENABLE_STACK_DUMPING=1 $ electron /usr/lib64/vscode [6978:0227/175217:INFO:CONSOLE(133360)] ""IRequestService.makeRequest: Url is required.: Error: IRequestService.makeRequest: Url is required.     at RequestService.makeRequest (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:137627:23)     at GalleryService.queryCache (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:121102:40)     at GalleryService.query (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:121057:30)     at ExtensionTipsService._getAvailableExtensions (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92773:41)     at ExtensionTipsService._init (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92735:46)     at new ExtensionTipsService (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92705:18)     at create (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:5252:14)     at file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61565:45     at AccessLock.runUnlocked (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61393:24)     at ServicesMap.createInstance (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61564:31)"", source: file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js (133360) ...... [6978:0227/175219:INFO:CONSOLE(109401)] ""%c[Plugin Host]"", source: file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js (109401) ```"
10756|Could someone link the new issue?  I can't find the vscode-website repo
10757|> The way VS does it isn't necessarily better if you want to delete a word to replace it with another word.  Then you just have to tap delete twice (while holding down ctrl).  IMHO, it makes sense to follow what other editors do. Even WordPad has this behaviour.
10758|"> Again, I don't know how much you read about the program's architecture but it's not possible to extend the UI because there's no extensibility point available to do it!    . VScode is still in beta .. im pretty sure they are making plans for vast user extensibility.  > I'm a keyboard kinda guy and ctrl+tab or holding ctrl in Visual Studio allows me to jump between files quickly or even to move between windows inside the IDE.  So whats the main problem here? What exactly is the advantage of tabs in this so called workflow? You can have 9 tabs open that will show you their filename and maybe their state, or you can `ctrl + tab` and you have all that info there with meta data ? What is this ""workflow"" you speak of?"
10759|Yeaah!  XD  With a version 1.0.3 of the cordova-tools extension run perfectly!!  Thanks a lot for your supoort!! you save my day!!
10760|i still use notepad++ for such feature. It would be great if this feature is implemented. to even write plain text in VSCode
10761|I don't see any advantage of having the tabs horizontally laid out instead of vertically laid out.  With the way it is set up, you have a little more vertical typing space anyway.
10762|"@4tron  > . VScode is still in beta .. im pretty sure they are making plans for vast user extensibility.  RTM is coming soon and I didn't see anything like this on their [roadmap](https://github.com/Microsoft/vscode/wiki/Roadmap) so I really don't know where you get the idea that they are making _plans_ to extend their extensibility story.  > So whats the main problem here? What exactly is the advantage of tabs in this so called workflow? You can have 9 tabs open that will show you their filename and maybe their state, or you can ctrl + tab and you have all that info there with meta data ? What is this ""workflow"" you speak of?  Okay, so just to state the obvious here, tabs provide horizontal display over vertical display and many people find it more convenient because it simply exists everywhere, in almost every program.  Now, when you are used to look at information in one way and someone change it then you can't always adapt so you have two clear choices here drop the program or voice your opinion about it.  If you don't like tabs that's fine, that's how you like your cup of tea but it's not everyone's cup of tea.  @TheColorRed Why do you look for an advantage? that's not the point."
10763|This is a limitation in the existing JS infrastructure. We are switching to a new infrastructure and you can try the preview https://code.visualstudio.com/Updates#_javascript-salsa-preview and we believe that this issue is now addressed, but would appreciate if you could confirm this in your setup.  // @chrisdias
10764|Did you create a jsconfig.json in your folder? https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson
10765|In general, given that we transition to Salsa the TypeScript repository is the right place to file ES6 issues.  > property declarations can only be used in a .ts file  This is issue Microsoft/TypeScript#6997  > Error message on hover: 'decorators' can only be used in a .ts file.  This is Microsoft/TypeScript#6872. This should be in TS 1.8.2 according the bug report. Can you confirm that you are using TS 1.8.2 (which now the default in the code-alpha channel).
10766|// @alexandrudima
10767|// @daviwil
10768|Check out this tweet by @StefanStranger which gives an example of setting up a task to launch a PowerShell script: https://twitter.com/sstranger/status/700409449337397248  ![screenshot of task](https://pbs.twimg.com/media/Cbhal_MXIAEXAr9.jpg:large)
10769|I've enabled Salsa but now I don't have Intellisense at all (with or without the import statement).
10770|![1](https://cloud.githubusercontent.com/assets/5990013/13374535/3cf07f94-dd90-11e5-9565-362a7d719792.png) Thanks for quick response! Yes, i did
10771|"Thanks @daviwil it helped me figured out what was wrong with my script   here is the working version of my script for those who are interested: I had to split he ExecutionPolicy parameter in two and move it in the front of the list of arguments   ``` json {     ""version"": ""0.1.0"",     ""command"": ""powershell"",     ""args"": [            ""-ExecutionPolicy"",         ""Unrestricted"",         ""-NoProfile"",         ""-File"",         ""${cwd}/source/deployment/build.ps1""            ],     ""taskSelector"": ""-task "",     ""showOutput"": ""always"",     ""tasks"": [         {             ""taskName"": ""build"",             ""showOutput"": ""always"",             ""isBuildCommand"": true         }     ] } ```"
10772|#3525
10773|The short Tweet on this drove questions in my direction. The snippet does not work in the 0.10.8 release. I know the Build conference is coming. Hopefully this can make it into the editor no too long after. It'd be a great feature.
10774|Duplicate of #3512
10775|Duplicate of #3508
10776|Related to Salsa
10777|I have this error too. I try write ES6 in root site files (etc. wabpack.config.js, test.js)  and have red underlined.  `jsconfig.json` - doesn't work!
10778|Thanks @joaomoreno
10779|Please.
10780|Awesome, thanks for finally implementing this! Now I won't have to keep running `start code` and closing a new command window every time I want to start it from Git Bash. (TBH this was the only reason why I was still keeping Atom around.) You guys rock!
10781|@arolson101 the vscode-website repo is closed. @waderyan is currently working on getting the RSS/Atom feed up and running.
10782|"I just dont understand , you get more information for your eyes (O.O) how is this not an advantageous step forward. As for it ""simply exists everywhere "" besides that being false, it does not mean its the best approach, and i like it when people think differently. Sometimes the best place to be is outside your comfort zone.  The extensibility might not be in the RTM but if visual studio is anything to go by we will probably be able to make our own isolated shells of the thing in future versions"
10783|@4tron okay, listen, some people can adapt regardless to whether they are used to something but many people can't, just because you can do it, doesn't mean everyone can do it or even want to do it.  Anyhow, I'd argue that more information isn't necessarily an advantage over less information, with working files you have everything shown to you at once, sometimes you have to look through to remember what files you opened, with tabs you have limited horizontal space where you have to choose what files you want to be in that space and because the files are at the top, always in front of your eyes it allows some people to get this nice focus over files.  There's no right and wrong here! it's not like tabs are evil or bad it's just something people prefer it over working files and vice versa.  If the discussion was about people being lazy then I'd agree with you that sometimes the best place to be is outside your comfort zone but fortunately, this is a matter of style and it's not the case.  > The extensibility might not be in the RTM but if visual studio is anything to go by we will probably be able to make our own isolated shells of the thing in future versions  I don't know about that, I don't assume anything because I don't think they said anything about it, I mean I if only they gave us the ability to extend the UI I wouldn't be here writing this post, instead I'd probably wrote a plugin for it.  Isolated shells is nice and it can _definitely_ solve the problem but I'd argue that it's like killing a fly with a sledgehammer and it can have some weird consequences especially with things like themes.
10784|This issue seems to be a duplication of #906.  I am another user looking for this features here. I also find someone posted feature suggestion on [uservoice](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7756146-auto-save-temporary-files).
10785|"Hi, @bgse  I try to stripping `electron` from `vscode` package (1. [rpm size reduced to 4.2 MiB](https://copr-be.cloud.fedoraproject.org/results/mosquito/test/fedora-23-x86_64/00163492-vscode/); 2. share `electron` binary files). But the `vscode` do not support `electron 0.36.x`. It return following error.  RPM spec: http://copr-dist-git.fedorainfracloud.org/cgit/mosquito/test/vscode.git/tree/vscode.spec?id=17ce85d650470e023ff37e7412d62c5aa222b304 RPM:  https://copr.fedorainfracloud.org/coprs/mosquito/test/build/163492/  ``` Version 0.10.11 Commit 8b7f21e10bf69745bde4330a337e9501972e983b Shell 0.36.8 Renderer 47.0.2526.110 Node 5.1.1 $ dnf install https://copr-be.cloud.fedoraproject.org/results/mosquito/test/fedora-23-x86_64/00163492-vscode/vscode-0.10.11-1.fc23.x86_64.rpm $ export ELECTRON_ENABLE_LOGGING=1 $ export ELECTRON_ENABLE_STACK_DUMPING=1 $ electron /usr/lib64/vscode [6978:0227/175217:INFO:CONSOLE(133360)] ""IRequestService.makeRequest: Url is required.: Error: IRequestService.makeRequest: Url is required.     at RequestService.makeRequest (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:137627:23)     at GalleryService.queryCache (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:121102:40)     at GalleryService.query (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:121057:30)     at ExtensionTipsService._getAvailableExtensions (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92773:41)     at ExtensionTipsService._init (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92735:46)     at new ExtensionTipsService (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:92705:18)     at create (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:5252:14)     at file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61565:45     at AccessLock.runUnlocked (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61393:24)     at ServicesMap.createInstance (file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js:61564:31)"", source: file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js (133360) ...... [6978:0227/175219:INFO:CONSOLE(109401)] ""%c[Plugin Host]"", source: file:////usr/lib64/vscode/out/vs/workbench/workbench.main.js (109401) ```  I think, we needs to solve this problem for Linux platform. However, the [PR](https://github.com/Microsoft/vscode/pull/2559) is marked as `cla-not-required`. @bpasero"
10786|Hi **@tht13**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
10787|@1dot75cm The cla-not-required label just means the contributor does not need to sign a license agreement, for example when it is a small change, in the case of @bpasero because he's Microsoft.  I'm sure it's pretty high up on the agenda though.
10788|@waderyan true, although the icon in VS was changed later to be something less distracting than a smiley face, could this be improved ? A way to hide it or at least to change the icon would be nice.
10789|Thanks. Closing as duplicate of #906
10790|This has been a major source of frustration for me. I rely heavily on snippets for basic language constructs (if, for, class, ...) to speed up coding. I want to type `if` and then press `tab` to insert the snippet. Instead auto complete basically does nothing for me and blocks the snippet.  ![screen](https://cloud.githubusercontent.com/assets/1637916/13380347/0af744e4-de41-11e5-88ec-0c157178ddd7.png)  What about putting snippets always at the top of the proposal list? For me this would always be the desired behavior.
10791|"In my tasks.json, ""isWatching"" was set to true. When I changed this to true,  cpu usage has gone down.  Not sure if this is the solution. But I use tsc --watch so I am not sure if i need iswatching."
10792|:coffee:
10793|@leocrespo IntelliSense for C# is driven off of the project type, you need to have an MSBuild project that can be loaded OR an ASP.NET Core 1.0 project in order for it to work. Check out http://code.visualstudio.com/docs/runtimes/ASPnet5 for more information.   Also, please submit issues in the https://github.com/omnisharp/omnisharp-vscode repository, which is the C# extension for VS code.
10794|+1. Multi-git repo microservice solutions are very painful in VS Code right now, thinking of finding another Typescript-capable IDE instead.
10795|perhaps we open browser after upgrade, same way we do for first time download.
10796|:+1:
10797|looks sweet!
10798|"@joaomoreno It looks like we do allow for overriding the ""Close"" button???   When I am prompted to install the C# Extension I get Yes/No/Later:  ![image](https://cloud.githubusercontent.com/assets/1487073/13381942/e106e810-de68-11e5-8830-17a0f1f08245.png)  But for JavaScript I have Yes/No/Close:   ![image](https://cloud.githubusercontent.com/assets/1487073/13381930/a32ec5e4-de68-11e5-8b8e-9b3924a942f6.png)  I would like to be consistent here and I think ""Later"" does a better job describing what will happen."
10799|looks good to me.
10800|VSCode 0.10.8 ships with TS 1.7.5. Can you try with enable TS 1.8.2 in Code using the tsdk setting (see https://code.visualstudio.com/Docs/languages/typescript#_using-newer-typescript-versions) or you can try the Feburary update available on the insiders channel on early next week.
