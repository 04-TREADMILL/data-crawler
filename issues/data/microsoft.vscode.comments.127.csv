12601|I'll add one more note on a quality implementation of a disassembly window; the best disassembly viewers are able to store metadata about the sources and destination for each opcode, and also jump targets. The value of this, is that when you click on a line of the code, the IDE is able to highlight the sequence of registers as they flow from one operation to the next. It's also useful to highlight/isolate separate sequences, so you can follow the flow of a particular sequence of operations, since in optimised code, it is typical that many sequences of code are all interleaved, and they can only be followed by analysing the inputs and outputs of each opcode and how they flow into eachother.  I raise this because it would be useful for the debug API to accept this information from the debug engine, and then the IDE/UI may do something to visualise the data if it likes. If the API is available such that the debug engine is able to provide this information, then it doesn't hurt :)
12602|LGTM
12603|Your system must have something that is reverting your installation.  Code doesn't update itself automatically in Linux. It is not implemented.
12604|I apologise for the terrible way of display an error message on our part...  Can you somehow get the whole message? Triple click in there and <kbd>Ctrl C</kbd> will let you copy that message.
12605|@Kane-Sendgrid thanks for trying, I guess when you changed the file you did not recompile, could that be true? We typically run `gulp watch` first, which will compile the project and listen for changes to incrementally compile.
12606|:+1:   For your convenience, there is an issue open on this: https://github.com/Microsoft/vscode/issues/1768
12607|@felixfbecker the localisation story is in the works. The locale is passed via the environment. node-debug is an example.
12608|Nice, I knew we had duplicates on this :)
12609|Coming for March!
12610|I will investigate
12611|Moving off of GA, I think we can always revisit after.
12612|@bmoeskau could it be that after your change you did not recompile? we typically first run `gulp watch` before making changes, which will compile everything first and then watch for more changes.
12613|@Tyriar why don't you go ahead and publish an extension from the Git TM bundle? I found it here: https://github.com/textmate/git.tmbundle  Would be nice to have it :)
12614|@egamma Ah, yes it's always difficult to decide new issue vs. old one. I just saw that there are so many intellisense issues already and that they seemed to be swallowed by this one. I'll post a new one. Thanks!
12615|Ah, with regards to the files glob, we do not use the Atom-specific implementation. As per [this TS files glob issue](https://github.com/Microsoft/TypeScript/issues/1927), we use the tsconfig-glob npm package.   EDIT: Perhaps this does not matter if the internal algorithm is relying upon the exclude section of tsconfig?
12616|"@TurkeyMan you do not have to convince me how important a disassembly view – or the other views you've mentioned – are for specific debugging scenarios. I fully agree.  However, we will not make a ""disassembly view"" (or any other debugger specific view) part of the VS Code debugger architecture. Instead we will provide architecture and API so that others can add these things."
12617|"Nice! I went to Preferences -> Color Theme and switched it from ""Dark (Visual Studio)"" to ""Dark+ (default dark)"" and got even more coloring than I had before."
12618|fyi @bpasero editor config can contain `charset` configurations.  Also missing from the API: `trim_trailing_whitespace` and `insert_final_newline`, but I think there are workarounds for these last two (submitting edits to the text editor).
12619|VSCode is a great editor and has nice integration points with both Git and Nodejs.  The main reason that I do not use it as my primary development IDE is because it doesn't support tabs.
12620|@aeschli my screenshot from above is with Dark+ though.
12621|@joaomoreno Thanks - I was able to fix this. the entire exception is ...  c:/Program Files (x86)/Microsoft VS Code/resources/app/extensions/jrieken.vscode-omnisharp: Cannot read file c:/Program Files (x86)/Microsoft VS Code/resources/app/extensions/jrieken.vscode-omnisharp/package.json: ENOENT: no such file or directory, open 'c:\Program Files (x86)\Microsoft VS Code\resources\app\extensions\jrieken.vscode-omnisharp\package.json'  I went into the `extensions` folder and deleted the `jrieken.vscode-omnisharp` folder. That seems to have silenced the exception. It looks like it might have been an old extension that wasn't completely removed.
12622|@tonyfi We have decided to deprecate the built-in linting support in favor of existing linters like `eslint` or `jshint`. These linters are more powerful, extensible, and many of our users are already using them. We understand that if you are not using a linter already then the price for this is that you have to install a linter and configure it.  I've tried to document this in the [release notes](http://code.visualstudio.com/updates/#_languages-javascript) see the `migration section`.
12623|@alexandrudima would it make sense to have charset on the model and me picking it up from there?
12624|@felixfbecker Your code snippet happens to contain no element that we color. Except 'instanceof' which is a https://github.com/Microsoft/TypeScript-TmLanguage/issues/37  That happens to be the design of our default themes.
12625|@bill-mybiz thanks, then I'll close this one
12626|@JanKok agree, thanks for the great feedback, I have pushed a fix to adress this issue
12627|Same here. It's the ONE thing which holds me in using it. Op do 10 mrt. 2016 om 15:18 schreef Konrad Piascik <notifications@github.com  > VSCode is a great editor and has nice integration points with both Git and > Nodejs. The main reason that I do not use it as my primary development IDE > is because it doesn't support tabs. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-194867036.
12628|Now. https://blogs.msdn.microsoft.com/visualstudioalm/2016/03/10/experimental-net-core-debugging-in-vs-code/
12629|@AndyYSWoo another theory I have is that maybe it happens always in the same file when the editor colors the file. These coloring rules are defined with regular expressions and certain input might cause bad things to happen. Next time it happens it would be interesting if you could remember the file you wanted to open.   Another guess I had is git: We periodically do something in the background. It is unlikely this would cause the crash, but to outrule this, can you see if setting `git.enabled: false` still causes crashing?
12630|Lets continue in https://github.com/Microsoft/vscode/issues/3614
12631|@SteveALee   > 'property declarations' can only be used in a .ts file. >  (property) AppState.timer: number  > Is this a syntax problem with TS and decorators? I can raise another bug if useful  pls see this comment: https://github.com/Microsoft/TypeScript/issues/6872#issuecomment-190288631 for how to enable decorators.  > However I get another error - probably not ESLint but I can't tell the source.  If you are on the latest vscode-eslint extension then errors from ESLint are prefixed with `[ESLint]`.
12632|"It's a little surprising to see so much push back on this issue given it should be so easy to implement. At the very least make it an option or available through an extension (as Brackets does).  If this does get added, PLEASE add the following: 1. Close functionality like Google Chrome. (Always been annoyed the standard version of VS didn't have this.)    --  ""**Close other tabs**""    --  ""**Close tabs to the right**"" .  2. An option to open the tab to the right or left. (VS changed the default at some point, but then added an option to change)"
12633|Is there any progress with this? Vscode uses animated icons itself for both Git Sync and Task running, if someone can point me to the files, I'd be happy to look into doing a PR :smile:
12634|@Tyriar I am currently looking into a solution for the case of Code already running. It looks like it is OK to let the second process run as long as it does not open a renderer. I can do a PR later hopefully.
12635|@anseki I understand you perfectly.  Thanks for sharing your feedback.  @kumarharsh thank you as well.  I'll pass this feedback on to the team and update the issue soon.
12636|"Tabs work. They're everywhere, people are used to it. The current list of files is unintuitive. After 2 months using VS Code daily, I still find myself going for a tab almost every time I need to switch files. The fact that every other editor out there will keep using tabs creates a huge barrier for something different becoming intuitive.   In my team, people complain all the time about that, to the point that some people prefer using sublime without any typescript support then using VS Code.  I'm not against UX research to find a ""better"" way of handling open files, but please don't make this the Office ribbon fiasco all over again, which took half a decade and multiple releases to invent another way to do exactly the same thing."
12637|"@aeschli Yeah, and I think that is not appropiate for a ""colorful"" Dark+ theme. At least one of - method names (`.then()`, `.all()`) - properties (`response.breakpoints`) - operators (`=>`) - variables (`connections`)  should get a some color. It seriously feels like I'm writing in Notepad, it is hard to read the code. I have snippets like this everywhere."
12638|Glad to hear.  Let's leave it as is for now and listen to feedback.  I'll close this issue for now.
12639|I started a first cut of the extension here: https://github.com/bpasero/gitmode
12640|Use Microsoft/TypeScript#7459 as a test case.
12641|@bpasero `[Service Library: Watcher] Do we have fsevents?:  true`, my coworker doesn't have problems though with the same project.
12642|Moved the status bar icon to the left. Changed how the errors are reported visually. Also that they can only be seen once, further clicks seem irrelevant, so the notification goes away as soon as it's clicked.  ![image](https://cloud.githubusercontent.com/assets/22350/13677103/fbbfd922-e6e8-11e5-9a01-a175757a296c.png)
12643|FWIW, option 1 is looks cool but would IMHO be quite distracting in practice.  having the code shifting around is like playing whack-a-mole.  3.\* is simple, clean and easy.  3.2 seems particularly robust.  Perhaps with a 1-2 pixel shift right of the text or shift left of the line.  In the meantime, the rulers suggestion by @anseki in the first comment is working fine for me.
12644|Duplicate of #1605
12645|@bpasero can you please add your insights on the node issue that causes this and then move it to the TypeScript repository.
12646|Just to clarify, since you closed the issue: after the move to Salsa, module resolution while working with node.js modules will not work? (I am not familiar with  amd )  This may be a show stopper for me. I was so happy with VS Code, I may need to go back to SublimeText  On Thu, Mar 10, 2016 at 3:32 AM, Erich Gamma notifications@github.com wrote:  > Closed #3880 https://github.com/Microsoft/vscode/issues/3880. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3880#event-584593251.
12647|Even after @egamma 's suggested jsconfig.json Intellisense wouldn't work. Then I deleted ~/.config/Code and tried again, and it worked. I've been using VS Code for a few months now, so it could have been caused by an artifact from an old version.
12648|The node issue is: https://github.com/nodejs/node/issues/4002  @egamma I am not sure how to move the issue, so I give it back to you to decide if this one should stay open as tracking bug or not.
12649|And our workaround for the bug is in: https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/extfs.ts#L48
12650|@Kane-Sendgrid thanks, so this means the native (and good) file watcher is active. it is interesting that you say your coworker is not seeing issues, maybe this could lead us to the actual problem. some questions: - does your co worker have similar hardware as you (mainly is the disk a SSD in both machines)? - are you seeing the CPU spike NEVER going down or after a moment going down? - is your co worker not seeing a CPU spike at all?
12651|@bpasero We have similar hardware (I have MacBook Pro 15, he has 13, same year model). I'm seeing Electron Helper process spiking in CPU and memory and then it dies and starts ramping up again. Let me wait and see how long it can go (it was going at least 5 cycles for me during ~10 minutes). My coworker doesn't see spike.
12652|![snip20160310_1](https://cloud.githubusercontent.com/assets/2404478/13678230/d980c40c-e6ed-11e5-9297-4ea2fb9fca6b.png)
12653|but the vision 0.10.9 works, and it will update automatic .... i can;t lock it
12654|@Tyriar your right. I can also see many derivatives either way its done i.e. dark-web-icon-pack, high-contrast-web-icon-pack, light-web-icon-pack etc... also clashes like `.cs` extensions for c# or coffee script would mean csharp-web-icon-pack etc...  I've always thought of the term theme to mean colours, icons, wallpapers and sounds (sounds not being relevant here).   I think we could setup themes so that they declare what components they contain. i.e. icons, syntax or both. Then the ide allows us to swap out these components and also giving us the choice to turn off icons all together.  For the global dark, light, or high contrast themes we could eventually drop these in favour of css controlling the entire ide.  These global's could then be turned in to generic default, dark, light, or hc syntax themes.
12655|@Kane-Sendgrid interesting, so you say the process increases also in memory and then actually exits and starts this process over again?  Can you give me some numbers on the workspace: how many files and folders?  I realise that we always restart the watching process when it dies so it would never end for you.   I cannot believe that your co worker is not seeing an increase in memory and CPU when opening the same folder though, does he have other settings than you? is he really opening the same folder?
12656|"I must have missed that step. Yes I do see the ""fsevents: true"" now. I also verified that this line is running many, many times on startup:  `watchContainer.listeners.push(filteredListener);`"
12657|Pushing back to April
12658|"@bmoeskau thanks for checking, I also got confirmation from another user that the native library indeed is not the issue. He saw an interesting pattern though: the process that runs the watcher (the one with high CPU/MEM use) climbs to ~1 GB and then quits and restarts. This is because the process runs out of memory, crashes and VS Code decides to just start it again because Code without watcher is pretty bad.   Can you check if this also happens for you here? This would explain why the process never recovers.  Btw two things pushed to master so far, maybe you want to give it a try running ""out of the sources"": - you can now explicitly configure exclude rules for the watcher with the new `files.watcherExclude` setting, so I would expect things to improve if you add a folder in here that is large - Code stops restarting the watcher process after 5 attempts that fail"
12659|"I have message ""Errors detected while running the preLaunchTask"" on every task run. But my preLaunchTask does not contain errors, when I run task via ""F1->Tasks: Run task"" there is no problem.  **launch.json:**  ``` {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Run local debug"",             ""type"": ""node"",             ""request"": ""launch"",             ""cwd"": ""${workspaceRoot}/build"",             ""program"": ""${workspaceRoot}/build/server.js"",             ""outDir"":  ""${workspaceRoot}/build"",             ""stopOnEntry"": false,             ""sourceMaps"": true,             ""preLaunchTask"": ""Build debug local""         }     ] } ```  **tasks.json:**  ``` {     ""version"": ""0.1.0"",     ""command"": ""npm"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",      ""tasks"": [         {             ""taskName"": ""Build debug local"",             ""suppressTaskName"": true,             ""args"": [""run"", ""gulp"", ""--"", ""--stand=local""],             ""isBuildCommand"": true         }     ] } ```  **gulpfile.js:**  ``` gulp.task(""default"", function(done) {     done(); }); ```  **package.json:**  ``` { ...   ""scripts"": {     ""gulp"": ""./node_modules/.bin/gulp"",   } ... } ```"
12660|@isidorn, as agreed with @egamma, we'll have a PR ready by Monday.  @weinand, the workflow you proposed above makes sense except for the fact it seems to assume that in stop-all mode we don't care what thread sent the stop event. As @jacdavis pointed out, we would still want the debug adapter to send the `threadId` which caused the stop event so that the user can see in the UI which thread issued it (by opening that thread, just like it does now). In order to accomplish this, we could have the debug adapter send a flag in the stop event to signal the fact that all threads have stopped, as well as including the `threadId`.  Please let me know if you have concerns about this approach.
12661|@tht13 I tried your suggestion but there are 2 problems - HTML Preview won't recognize a .jade file with HTML in it after converting (although it would be cool if this was automatic) - It doesn't run javascript  I'll wait for the release and see what's possible then.  Thanks!
12662|You mean an action to focus the opened file in the editor?
12663|"Ah! I had reduced my project file count such that the CPU would recover after a couple of minutes while testing things out, but after your last comment I added a huge folder back into the project. Now that I'm logging from the code I am seeing the same pattern you mentioned -- memory climbs to around 1.5Gb, hovers there for a minute, then drops down to a few hundred Mb. Each time that happens I get the ""fsevents: true"" logged again, so obviously that process is restarting as you mentioned. That definitely explains why the CPU never recovers beyond a certain file count.  I downloaded the latest from master, and first ran it as-is just to make sure it didn't get fixed somehow. The CPU problem continued unchanged. Then I added this to my user settings file:  ``` json // Place your settings in this file to overwrite the default settings {     ""files.watcherExclude"": {         ""**/.git/objects/**"": true,         ""**/node_modules/**"": true     } } ```  Voila, now the CPU spikes just for a second or two on load and then immediately drops to 0. Seems like probably a good default setting... :)"
12664|"@bpasero Not exactly. I mean, set focus to the currently opened project in the Side Bar, instead of the `Working Files` section. There's two sections that I can see in the Side Bar (Explorer): - Working Files - The currently opened project  There's a ""set focus"" for the former, but not the latter."
12665|@codyrigney92 If you add a feature request to the html preview repo I'll remember to add that compatibility. As for Javascipt that is a current limitation of VSCode which @egamma has marked as todo for the March plan (it looks like the feature is already done :smile:) So that will have to wait for the end of the month.
12666|Thanks @tht13   https://github.com/tht13/html-preview-vscode/issues/1
12667|:+1:
12668|I think so, no more need to use `&` as it's all handled by `/usr/bin/code`.
12669|Hi,  My primary area of development is the web, so don't worry about going into aria details :) AAs for the implementation, I will research the bug you have filed, see if other projects ran into the same thing. If this bug is fixed, the ARIA implementation would indeed be preferable. The interesting thing is that for the longest time, the behavior you are describing regarding NVDA not reading lines or characters was actually the default. This was the primary reason I deemed the product completely inaccessible last year. I'm guessing there's no way to quickly flip the focus back and forth without inconveniencing the user? As for remapping the keyboard keys, the problem with that I think is that there's not all that many keys that would be suitable. Ideally it would be single keys to make the interaction as smooth as possible, which means I guess only the arrow keys and tab + shift+tab would suffice without sacrificing efficiency. Would like to hear your input. I will test the current implementation now and report back soon.
12670|@bpasero OK, great. I'll assign to you then.
12671|I have just tested the current implementation and see the limitations. At least the feature is usable now, which is already a very big plus. We will have to wait on the Chromium devs to see if the bug you found can be fixed on their end. Also, what is the second element in a help tag supposed to denote, return type? This reports undefined for HTML elements.
12672|Just tested your changes in this matter, they work well. I really think though that adding 'shortcut'  in this label is superfluous, you may leave it out and spare yourself the i18n hell it might cause :) Also, the last bit of he label for each command reads ' commands, picker' . Is there a reason for this?
12673|The same should also apply to the keyboard bindings.
12674|@bpasero thanks.   This is a regression for SharePoint users using code. The previous JS implementation profited from the fix described above. Therefore suggest to consider it for TS 1.8.9 if possible.
12675|This issue was moved to Microsoft/TypeScript#7469
12676|Reopening as a tracking bug
12677|"-1  A few notes for why I'm against tabs: - Any time spent on tabs will be time taken away from making other improvements to the editor. - I've been forcing myself to become more of a keyboard commando and not having tabs has been helpful. So I'm arguing from the it's-for-your-own-good perspective even though I'm not even there yet myself. - Related to the previous, this reminds me of when Gmail came out and I had to convince people that labels were superior to folders. Some people just couldn't process it and are still rocking their AOL / ISP email accounts. I think MS should take a stand here in saying ""we just think this is a better way to do things."" - If I would suggest anything, it would be an upfront explanation of why tabs aren't there along with examples of navigating the editor without them."
12678|> @egamma suggests in this comment that is the files glob that may be the culprit. We're going to look into this further as I was not aware it was considered an Atom-specific practice,  Sorry, I'm actually not familiar with the `tsconfig-glob` npm package so I ignore my comment.
12679|Fixed - minus: https://github.com/Microsoft/vscode/issues/3980
12680|@egamma We still are going to look into changing to an exclude structure if possible and see if this has any effect. We have a client/server structure and it's possible that it was the only way to get what we needed back when that design decision was made.
12681|Well, there is a compromise- Make tabs visible or not in Preferences/Options.    I don't think it takes time away from other improvements because I'm sure they have more than one programmer on this dev. I love being a keyboard commando too.  If they were implemented just don't use them but why inhibit those who prefer tabs in their workflow from having them.  Anyway, no biggie. I have moved back to Atom while I wait for VSC to decide what it is going to do. I find tabs essential for the workflow in a large project, along with being able to open more than one Project Folder.
12682|> I've been forcing myself to become more of a keyboard commando and not having tabs has been helpful. So I'm arguing from the it's-for-your-own-good perspective even though I'm not even there yet myself.  As I've suggested [earlier in this thread](https://github.com/Microsoft/vscode/issues/224#issuecomment-166931316), it's the _behavior_ that's missing which is just as important, if not moreso, than the visual component.  I'm all for using keyboard shortcuts like ctrl+[shift+]tab or even ctrl+P to navigate to files (including open ones), but the behavior of Working Files and how it manages editor windows (and the fact that it ctrl+tabs in MRU order) I find terribly jarring.
12683|For me it's freezing when launching in a terminal as ./code and leaving the terminal open. Will the fix mentioned address freezing in the next release?  Thanks
12684|"@bpasero the quick box looks good.  The top most quick box entries are difficult to discover since the currently defined association is revealed.  How about not revealing the current mode when the user has changed the association. In this way the top most entries are always visible?  What is a bit disturbing are the info messages that appear when you have a workspace settings, but this is not the common case ![image](https://cloud.githubusercontent.com/assets/172399/13685367/6a1ccf34-e710-11e5-9163-febcaa288029.png)  I suggest to make `Configure in Settings...` more verbose, e.g., `Open Settings to configure default for "".html""` or `Configure default for "".html""`"
12685|Same issue. Using `jsconfig.json` doesn't work. e.g `const` keyword is red underlined.
12686|> - [ ] atom-alignment. Aligning multi-line, multi-cursor and multiple selections.  is now included in the  > - [x] atom alignment -> VS Code Align  already checked off.
12687|> - [ ] todo-show. Show todo, fixme, and changed.  is found in [vscode-todo](https://marketplace.visualstudio.com/items/MattiasPernhult.vscode-todo)
12688|"I just found the problem found a ""translate3d"" CSS transform that makes it blurry. I disabled the CSS and it becomes SHARP!!! take a look  ![blurry text](https://cloud.githubusercontent.com/assets/2263037/13688059/0b717b36-e6fe-11e5-843b-42f9b83195e0.png)  Left side is folder tree, and right side is code panel."
12689|@rkeithhill I think 'yes', but that's your decision. 'Stop on entry' is nothing that the VS Code debugger UI or the debug protocol prescribe.
12690|@weinand  Sorry man.  That was meant for the PowerShell/vscode-powershell repo.  Doh!
12691|@rkeithhill no worries ;-)
12692|This is no good as you need to switch your debugger. This requires several mouse clicks. Why can't you make it so Ctrl+F5 runs the current selected launch config with the noDebug:true functionality.
12693|@justin-romano It works exactly like you expect it to work: Ctrl+F5 runs the current selected launch config. There is no need to modify launch configs or switch to a different launch config.  This feature will be available in the March release.
12694|"It realy seems to be a GPU rendering issue. I just found the problem found a ""translate3d"" CSS transform that makes it blurry. I disabled the CSS and it becomes SHARP!!! take a look  ![blurry text](https://cloud.githubusercontent.com/assets/2263037/13688059/0b717b36-e6fe-11e5-843b-42f9b83195e0.png)  Left side is folder tree, and right side is code panel."
12695|Cheers. When will that be on insiders build?
12696|Sounds good. I suppose this means that the UI layout will become somewhat more flexible in that case, if it is to support plugging in new panels? This will be a very welcome change itself, since my main complaint with code is the general inflexibility of the workspace layout. Looking forward to it!
12697|Probably next week.
12698|Thanks for all work! Can't wait to try it out!
12699|Any comment on typeless launch configurations that only use `runtimeExecutable` and `program`?
12700|Sound like a useful thing and intuitive.
