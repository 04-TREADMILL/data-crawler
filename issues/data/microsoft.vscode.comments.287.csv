28601|Perfect. Just installed the new insider build this morning and it works now. Awesome!
28602|I think we could hide the icon of the extension in this size. That gives ~30% of the space.
28603|Seems fine on Linux
28604|Closing as designed, we want to keep settings as flat as possible.
28605|Works on Linux:  ![image](https://cloud.githubusercontent.com/assets/2193314/16484198/d0c1b32c-3e6c-11e6-9267-81bc2c452821.png)
28606|@weinand can also reproduce on his mac but only for zsh. For regular shell it works fine
28607|Looks like this is actually a duplicate of https://github.com/Microsoft/vscode/issues/6793
28608|Tab now moves focus out of search box, while the click anywhere in the viewlet still focuses the search box. Unforunetetly I did not find a differentiator in the `FocusEvent` so I had to add another listener for a press of a tab key.
28609|Since I'm not sure where this comes from (and I cannot reproduce it myself), I've added additional information to the error message and added some additional checks in the injected code. This will be in the June release (and tomorrow's Insider).
28610|Behavior in: - VS Code Insider: [image](https://cloud.githubusercontent.com/assets/7034281/16485491/b5764dfc-3ec7-11e6-8171-e04a6486e540.png) - Sublime Text: [image](https://cloud.githubusercontent.com/assets/7034281/16485040/4dab32ca-3ec5-11e6-8e22-e96a7558c76f.png) - Atom: [image](https://cloud.githubusercontent.com/assets/7034281/16485501/c7ad1082-3ec7-11e6-9b4b-28391e85ed04.png)  Maybe this is the solution? -- [link to the fork](https://github.com/mrmlnc/vscode/commit/f2b725ec81c0c89f8acf1cfdd7c37763fcc89c17).
28611|"This is an upstream problem right? Also I'm not sure where the ""electron"" is coming from, it isn't referenced anywhere in the [rpm spec file](https://github.com/Microsoft/vscode/blob/master/resources/linux/rpm/code.spec.template)?"
28612|"I’m at v6.2.0  De : Andre Weinand notifications@github.com Répondre à : Microsoft/vscode reply@reply.github.com Date : jeudi 30 juin 2016 21:19 À : Microsoft/vscode vscode@noreply.github.com Cc : Boris Gbahoué boris@athieme-conseil.fr, Author author@noreply.github.com Objet : Re: [Microsoft/vscode] Debug error > ""No call stack available (Internal error: TypeError: Cannot read property '0' of undefined)."" (#7683)  Since I'm not sure where this comes from (and I cannot reproduce it myself), I've added additional information to the error message and added some additional checks in the injected code. This will be in the June release (and tomorrow's Insider).  — You are receiving this because you authored the thread. Reply to this email directly, view it on GitHub, or mute the thread."
28613|Done. Also added a keyboard shortcut Alt + Cmd  + Enter to replace all just like in Find widget
28614|The list of extensions with node_modules folder: - [x] typescript @dbaeumer  - [x] javascript @kieferrm - [x] php @aeschli  - [x] markdown @kieferrm  - [x] json @aeschli  - [x] css @aeschli  - [x] configuration-editing @jrieken  - [x] node-debug @weinand  All of these need shrinkwrap and maybe a smoke test after that.
28615|Also, if you have recently moved code to a new extension, please make sure you have removed the dependency of your extension from our package.json and shrinkwrap file.
28616|@gregvanl I like your idea however to implement it is a bit complex in the endgame. The issue is that once you uninstall the extension it is gone from our extension model, so if a user uninstalls an extension, goes to some other viewlet, and comes back to the extensions viewlet the extension should still be present in the list (so the user could disable). However this is not the case since it is no longer in our model. Due to this it would take some resructuring of the extensions model to support this - thus assigning this to July and Joao.  After discussing with @weinand for now we agreed to show a message box - so the same behavior that the stable vscode has. It does not blend nice with the whole new experience but we believe it is better than not showing anything. And it is nothing new since we already shipped with this.
28617|"Maybe also add ""exit"" to simply terminate the running task for the new `whenActive` flag in task.json that shows a log message in console: `task terminated by user`   So the complete list for `whenActive` would be:  ""continue"" -> keep running and show console message so you know the system is not hanging ""restart"" -> show console message and terminate and restart ""auto"" -> show console message and keep running if is a watching task, else log and restart (default) ""alert"" -> show a interactive message box to the user with a terminate and a close button ""exit"" -> show console message and exit"
28618|Fix in localization repository.
28619|@alexandrudima ping...
28620|Moving. Was very busy with the TS builder exploration.
28621|`--disable-gpu` did the trick! thanks.
28622|"As far as I know, VSCode is the only thing I use that runs on electron, and this was a fresh install of Fedora 24. On Jun 30, 2016 7:32 AM, ""Daniel Imms"" notifications@github.com wrote:  > This is an upstream problem right? Also I'm not sure where the ""electron"" > is coming from, it isn't referenced anywhere in the rpm spec file > https://github.com/Microsoft/vscode/blob/master/resources/linux/rpm/code.spec.template > ? >  > — > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/8556#issuecomment-229622171, > or mute the thread > https://github.com/notifications/unsubscribe/AAkB_AfZVMgwx5wCWl9_ha6wX3X0p9L4ks5qQ5tOgaJpZM4JB0nd > ."
28623|Fixed for June.
28624|@Tyriar This works for me on the latest insider. Any additional info ? ![cast](https://cloud.githubusercontent.com/assets/1931590/16490634/db1d0272-3eda-11e6-98b2-770bacc79e08.gif)
28625|I don't like it, but I know how to configure the tool ;-). I just wonder what existing users that like no tabs (do those outside our team exist) thing of it?
28626|@bpasero Can you give pointers how to create the shrink_wrap file?
28627|Whoops! Totally looked for dupes but with that title, I'm not surprised I couldn't find it! The workaround of starting Code from the shell worked great.
28628|Works under Linux as well.
28629|"What I typically do is: - Make sure to have npm 3 installed (to get a flat shrinkwrap file) - Copy the package.json to a new, empty folder outside VSCode - Delete all devDependencies from the package.json file - Open a prompt in that new folder - Run ""npm install"" and wait for it to finish without errors - Run ""npm shrinkwrap"" and wait for it to finish without errors - Copy the npm-shrinkwrap.json file into same location as the package.json file in the extension"
28630|I am on the path of writing a plist parser.  before: ![image](https://cloud.githubusercontent.com/assets/5047891/16491152/15571ae8-3edd-11e6-8fb7-382073b0aacb.png)  after: ![image](https://cloud.githubusercontent.com/assets/5047891/16491179/232583c6-3edd-11e6-925a-64dd9ad341b7.png)
28631|Verified by user -> adding tag
28632|Does not work for me on the mac, tried both ctrl and cmd. Feature -> moving to july
28633|"Current status is that @bpasero investigates into making the titlebar and editor sit under a parent dom element that is being moved/reparented on editor shuffle. If that is too risky or too much, I will revert https://github.com/Microsoft/vscode/commit/a3fd673d1e68dcceeef54327103a2644ce36f69f#diff-2e9d856a679081c7f84828600f59c10d which means we loose access to editor context keys for menu item selection (like no `when: ""editorHasSelection`) Effectively menu item then can only use `resourceScheme` and `resourceLangId`."
28634|I check what happens if you install the vscode-languageclient via npm install vscode-languageclient@^2.2.1 and that install looks totally ok. Interestingly the stack trace in makes not much sense since on line 208 there is no reference to Emitter. The only one in on line 146.   Would be really interesting to know how vscode-languageclient/lib/main.js:208:34 looks like
28635|@mrmlnc thanks man ! You help me
28636|Currently giving tabs a shot, but will probably stay with no-tabs, just works better for me.  I'd guess the majority is used to tabs from other editors, so probably sensible to enable it by default, fine with me as long as no-tabs doesn't disappear completely one day.
28637|Works for me.
28638|The Windows build installs version 2.3.0 of the language client which is also compatible with json rpc 2.2.0.
28639|I am looking into this for half the day now and still try to find a fix that does not break everything. The assumption in the editor part is that title and editor container never move when you move an editor, only the editor gets reparented. Introducing a container that contains title and editor and actually reparents breaks this assumption, so it needs more work than just introducing a container somewhere.  On the other hand, I am also looking why I need to reparent the editor widget. It might also be possible to just change the inputs in the editors when moving editors around so that an editor - once created - never looses its parent containers.  Tricky bit is the case where a group closes, because that means that potentially 2 active editors (CENTER, RIGHT), move to new positions (LEFT, CENTER). There the fact that we reparent is actually nice.
28640|No, it looks like you're absolutely right.  My test yesterday was against a file, not a git commit, which was obviously a mistake.  The --wait flag definitely doesn't allow the commit until VSCode is closed.  I'll go ahead and close this issue if you're OK with that.
28641|@bgashler1 sorry, more findings after playing around with it - I do NOT like the fact that you change the scroll decoration, I think the shadow has a purpose because it makes it visible that there is more to scroll to. with your change the decoration is so subtle that I do not see it anymore - I do NOT like gradient background for the title area, only now I realized how weird this looks compared to other places. we do not use gradient anywhere and it feels so out of place there - I do NOT like the fact that inactive tabs and group actions now have the same background color because as soon as you overflow to the right it looks almost broken (have enough tabs to scroll one out of view to the right to notice that). this might be better once we have the overflow decoration from https://github.com/Microsoft/vscode/issues/7987#issuecomment-228913781 but I do not see that landing  Given this, I wonder how to proceed. I tried to capture all the issues we currently have into https://github.com/Microsoft/vscode/issues/8564  Maybe we can make minimal tweaks to address those as much as possible and keep a larger overhaul for July?
28642|Yeah, no rushing. Reverting is OK for me, the `resourceScheme` and `resourceLangId` are enough to get  a decent menu item contribution - see markdown. We can still unleash the beast of full context key control at a later point.
28643|@bgashler1 ideas?
28644|Tho, I'd still like to see how it compares to the `DOMParser` ;-)
28645|Thanks for the reply. So you're saying I could create my own class that implements `IMarkerService` (presumably wrapping the default one) and pass that in to `create()` using a configuration object like `{ markerService: myMarkerService }`? Definitely doable, but I worry about tightly coupling with internal code.  Can I request an enhancement that adds this capability (enumerating markers or diagnostics) to the public editor API? Or I guess specifically that it ALSO be added to the standalone editor if that is being worked on?
28646|@jrieken I was not aware you could revert but still support the markdown case. if that is possible I suggest to do that for June and do a proper fix for July (either moving the whole thing around or preventing the editor reparenting).
28647|The request is fair, tho this isn't the right repo for it ;-) Pls log it here: https://github.com/Microsoft/monaco-editor. For the editor side we are looking very much forward to receive pull request ;-) So, analog to [setModelMarkers](https://github.com/Microsoft/vscode/blob/master/src/vs/monaco.d.ts#L780) you could do a PR for something like `getModelMarkers`. It's more or less partially exposing [this](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/markers/common/markers.ts#L25)
28648|Yeah, the change was to tell the editor _not_ to create its own keybinding context but reuse the current one. That meant the `editorXYZ` context keys have become visible to the everyone in that editor slot - namely the menu items. But since the editor moves without its context we see these issues. Now, making the editor use it's own context again, mostly solves this issue. Tho it means the editor cannot use the `resourceXYZ` keys and vice versa.
28649|Haha, actually I already have an issue in that repo (https://github.com/Microsoft/monaco-editor/issues/30), but it has gone unanswered. Saw in the readme that monaco-editor-core was here, found this issue and posted here figuring my original issue was in the wrong place. I'm obviously very confused, but what's new. :)  I'll look into doing a PR. Thanks again.
28650|There is [code](https://github.com/Microsoft/vscode/blob/master/extensions/markdown/src/extension.ts#L203) to read them and support to [author](https://github.com/Microsoft/vscode/blob/master/extensions/markdown/package.json#L112) them...
28651|>  I'm obviously very confused,  Tell me about it - there're so many MSFT repos on GH
28652|@bpasero A bit of context: This functionality would greatly help us to handle the management of Python virtual environments across teams that use different operating systems and different ways of managing their Python installations. Rather than filing a feature-request and wait for things to happen we'd like to provide that functionality as a pull request. However, the current approach doesn't seem right and thus we hoped you could nudge us in the right direction. What better way is there than to discuss concrete code?
28653|@isidorn Can you jump in for @joaomoreno   @egamma, @bgashler1 pls yell stop if we shouldn't do this for June
28654|+1
28655|@bpasero yes, I'm using Parallels. I might have set the VMs memory too low, not sure if that affected it, but it seemed to no longer or not as often occur after increasing that.
28656|I see this all the time and this also explains some other bugs you filed on drag and drop. Parallels is buggy.
28657|Also according to https://github.com/Microsoft/vscode/wiki/Code-Organization#target-environments `browser` may not use from `node`, `electron-browser` and `electron-main`.
28658|Makes sense. Maybe advocate for it to be put on the July plan then.
28659|Extracted https://github.com/Microsoft/vscode/issues/8579  I do believe we can close this one given your revert.
28660|@dbaeumer please advise if maybe this one needs multiple owners or someone else.
28661|"@michaelaharvey did you set any encoding in your settings? How do you ""view in browser""?"
28662|In my stack overflow question you can see that the js file encoding is set to UTF-8. To view the file in the browser I simply opened the html file in chrome locally.
28663|Good catch, this should not be the case. Have to look into it, but only for July.
28664|I think this should not be in for june - especially since we are now only fixing critical issues.  If we still decide to do it I can look into it - it would have been easier if I was originally assigned to this issue though.
28665|@michaelaharvey maybe try to save as UTF-8 with BOM?
28666|+1 for do not rush this and do it in July
28667|@bpasero I don't see any option to save with BOM, how do I do this?
28668|"@bpasero   I am still able to reproduce this in this build - a21c12346f388e51858c930875ca30968604c116 with following steps: - Enable tabs - Open a .md file - Open any other file. Now this file is active - Right click on the tab of .md file  You do not see the options  <img width=""777"" alt=""screen shot 2016-06-30 at 6 55 46 pm"" src=""https://cloud.githubusercontent.com/assets/10746682/16496830/46f0621e-3ef4-11e6-887e-0ec2fbea7716.png"">"
28669|[before.CPU-20160630T185643.zip](https://github.com/Microsoft/vscode/files/341935/before.CPU-20160630T185643.zip) [after.CPU-20160630T185657.zip](https://github.com/Microsoft/vscode/files/341936/after.CPU-20160630T185657.zip)  before: ![image](https://cloud.githubusercontent.com/assets/5047891/16496890/914e286e-3ef4-11e6-9341-bf7d36915919.png)  after: ![image](https://cloud.githubusercontent.com/assets/5047891/16496897/9ab00f62-3ef4-11e6-99fb-92a268b28c95.png)
28670|"Appears to be a known issue with Remote Desktop for OSX. Older versions reportedly did not have this. The discussion linked below suggests to swap out the text selection pointer with ""beam_r.cur"", that works for me.  (https://social.technet.microsoft.com/Forums/windowsserver/en-US/cf05826e-63a4-49d9-b812-7a4695832ab8/rdc-mac-version-8024091-can-not-see-cursor-in-any-editor-with-black-background-because-it-is?forum=winRDc)"
28671|"To the verifier: please check that you can get the previous (slow) parser when setting the ""hidden"" preference `editor.useExperimentalParser = false`. I've added this to have a fallback in case my 10x faster parser has a bug, so we can switch back to the SAX based parser based on a setting. I will remove the setting after our confidence grows, by default the setting is on (use faster parser by default)."
28672|@aeschli Is not this fix yet available in monaco-editor here https://microsoft.github.io/monaco-editor/index.html
28673|@chrmarti Nice!
28674|Nope, running on insider previews on my desktop. I just got updated to 14372. I'll see if I can still repro.
28675|@dbaeumer  `tosho@T440:~$ eslint -v v2.13.1`  I also have tried to install Color Picker - https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color which again gives me error - `[processBridge]: Error: Cannot get npm` I don't know if it's relative.
28676|![image](https://cloud.githubusercontent.com/assets/900690/16497473/7cb4c22a-3ef7-11e6-95d0-9fa17e903a24.png)  ![image](https://cloud.githubusercontent.com/assets/900690/16497468/73ee9daa-3ef7-11e6-9e07-b7dd15e0adef.png)
28677|@sandy081 this is currently as designed, we do not show editor actions for an editor that is not active (same as we do not do when tabs are disabled).
28678|"@dilijev ""nope"" you cannot repro when GPU disabled?"
28679|Fixed! Thanks
28680|Since this is a somewhat adoption blocker for people in the team to use tabs, we should look into this.
28681|Sorry -- should have been more clear.  No I am not running in a VM -- instead running on my desktop in an insider build.  I am trying the --disable-gpu option now.
28682|"@bpasero Then I see some inconsistency here. See the pictures with tabs disabled and enabled.  When tabs are disabled, actions are not shown on editor which is not active. When tabs are enabled, actions are shown on editor which is not active. That's why I expected to see actions in above case.  <img width=""1154"" alt=""screen shot 2016-06-30 at 7 24 13 pm"" src=""https://cloud.githubusercontent.com/assets/10746682/16497620/412312a6-3ef8-11e6-806b-a2b5848bef87.png"">  <img width=""1018"" alt=""screen shot 2016-06-30 at 7 25 58 pm"" src=""https://cloud.githubusercontent.com/assets/10746682/16497675/7fccf134-3ef8-11e6-86c1-cb6f237b6589.png"">"
28683|@sandy081 that is true but that is a different case. In your issue you right click on an editor that is NOT EVEN visible and expect editor actions to show.  In your new example, all editors are visible and so we can show those actions in the menu. Initially I did not have those actions in there but I got another bug where someone was looking for them.  It is purly a UX decision to not show the actions when tabs are disabled and the editor is inactive. No technical reason otherwise.
28684|@bpasero Installed the insider builds and it's looking so much better now god you're my hero <3
28685|I tried with  ``` code-insiders -n code-insiders --disable-extensions -n code-insiders --disable-gpu -n code-insiders --disable-extensions --disable-gpu -n ```  I'm not sure if `--disable-extensions` would have any effect since I don't have any extensions installed anyway. (`code-insiders --list-extensions` shows nothing.)  No repro on any mode on any monitor with the following system setup: - VSCode Version: Code - Insiders 1.3.0-insider (a21c12346f388e51858c930875ca30968604c116, 2016-06-30T05:07:11.570Z) - OS Version: Windows_NT ia32 10.0.14372  I'll close this issue.
28686|Side note: `code-insiders -h` does not list the `--disable-gpu` option.
28687|@alexandrudima Thanks for helping track this down!
28688|Looks like not yet part of the build. So untagging
28689|By analyzing the blame information on this pull request, we identified @egamma to be a potential reviewer
28690|Hi **@mrmlnc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
28691|I know Joao was trying to simulate their extension ranking algorithm, but seems like he missed some corner cases.
28692|Yes - this was just fixed 8 hours ago and we did not have an update yet - tomorrow morning should be good.
28693|Verified by user adding verified tag
28694|I agree with @kieferrm 's approach--if we decide to keep the alt key approach.  We might also consider trying (just an idea) showing alternate commands for any area that is focused and/or hovered over when the <kbd>Alt</kbd> key is pressed (i.e. if you are focused in an editor group, any time the key is pressed you'd see the alternate commands).  This could be distracting each time you press <kbd>Alt</kbd> for say multi-cursor, but we seldom have alternate commands, and this may help with discoverability.  I don't think people are holding down the alt key and hovering over each command to explore our UI, so this may help.
28695|"Still the same issue after update:  Version 1.3.0-insider Commit a21c12346f388e51858c930875ca30968604c116 Date 2016-06-30T05:01:41.590Z Shell 0.37.6 Renderer 49.0.2623.75 Node 5.10.0  @aeschli   ``` ❯ ls /usr/share/code-insiders/resources/app/extensions/json/node_modules/vscode-jsonrpc/lib/ cancellation.d.ts  events.js  main.d.ts           messageReader.js  messageWriter.d.ts cancellation.js    is.d.ts    main.js             messages.d.ts     messageWriter.js events.d.ts        is.js      messageReader.d.ts  messages.js  ❯ cat /usr/share/code-insiders/resources/app/extensions/json/node_modules/vscode-jsonrpc/package.json  | grep version   ""version"": ""2.2.0"" ```  @dbaeumer see comment `// line 208` for that line:  ``` ts     function LanguageClient(name, serverOptions, languageOptions, forceDebug) {         var _this = this;         if (forceDebug === void 0) { forceDebug = false; }         this._name = name;         this._serverOptions = serverOptions;         this._languageOptions = languageOptions || {};         this._languageOptions.synchronize = this._languageOptions.synchronize || {};         this._languageOptions.errorHandler = this._languageOptions.errorHandler || new DefaultErrorHandler(name);         this._syncExpression = this.computeSyncExpression();         this._forceDebug = forceDebug;         this._state = ClientState.Initial;         this._connection = null;         this._childProcess = null;         this._outputChannel = null;         this._listeners = null;         this._providers = null;         this._diagnostics = null;         this._fileEvents = [];         this._fileEventDelayer = new async_1.Delayer(250);         this._onReady = new Promise(function (resolve, reject) {             _this._onReadyCallbacks = { resolve: resolve, reject: reject };         });         this._onReady.then(null, function () {             // Do nothing for now. We shut down after the initialize.             // However to make the promise reject handler happy we register             // an empty callback.         });         this._telemetryEmitter = new vscode_jsonrpc_1.Emitter(); // line 208         this._tracer = {             log: function (message) {                 _this.outputChannel.appendLine(message);             }         };     } ```  ``` ❯ cat /usr/share/code-insiders/resources/app/extensions/json/node_modules/vscode-languageclient/package.json | grep version   ""version"": ""2.3.0"" ```"
28696|This is the last PR for Emmet, so now you can take a rest from my bad English. :stuck_out_tongue_closed_eyes: I’m working on improving my English.
28697|You have to test that in the all source mode (https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar) or wait for all versions to be bumped. @alexandrudima should do that soon.  @alexandrudima I update all version number for monaco-css / -json and -languages and published these. I updated the dependencies monaco-editor to these, but did not increase the monaco-editor version nor did I publish. I leave this up to you.
28698|@Tyriar can you do one more thing. Can you check that the code in vscode-jsonrpc/lib/main.js as the following line 18: `exports.Emitter = events_1.Emitter;`
28699|And I have the exact two same version under Windows and its working there.
28700|Great, we'll wait and see what happens with 2.0 :-)
