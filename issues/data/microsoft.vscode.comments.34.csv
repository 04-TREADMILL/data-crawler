3301|Putting it in the launch.json sounds like a good idea.
3302|:-1:  IMHO does not look good and does not fix a real problem. When using us and the chrome debugger i never have a problem of distinguishing between name and value - though that might be just me.  @weinand @bpasero opinions?
3303|Not sure I agree. We don't want the repl to be seen as a Band-Aid for functionality that is lacking elsewhere. The context menu actions aren't sufficient either. Copying the value so that it can be pasted somewhere else doesn't help when I need to inspect the same value over and over again (perhaps because I am updating the variable in a loop or whatever).  I think this is an example of some small change we can make to the UI (I realise that this is a bigger change on the backend since you need to eval the variable to show the full value in the locals window) that will significantly improve the experience of debugging code.  It is also an experience that may not be terribly common. For example, Visual Studio doesn't offer this and I believe it also suffers as a result. VS supports different visualisers but these result in a modal dialog that shows the whole value, I do not believe that this is ideal either.  This could be a small thing we do in the UI that ends up differentiating the VS Code debugger from other industry standard visual debuggers.
3304|"@bpasero I can reproduce.  It crashes 4 out of 5 times for me on windows already here: https://github.com/Microsoft/vscode/blob/89c09866cdf3d6c9b73dbb25d9a008d3e5b2dd47/src/vs/workbench/services/files/node/fileService.ts#L427  I think we do the following: - read the entire file in memory as a NodeBuffer (minimum 100MB) - convert it to a string according to encoding [<--- crashes OOM]  Maybe the code can be improved to be more ""stream-ish"", i.e. read a chunk, convert a chunk, etc.  Until such a ""stream-ish"" implementation we need to reduce the MAX_FILE_SIZE number.  I am also not sure what changed since last I tested a few months ago when I was able to consistently open 110MB files that lead to the 100MB number as a hard limit in the first place."
3305|I agree, this isn't a new concept. This is just reusing the same UI for intellisense, snippets etct inside the debug console. So I press Ctrl-Space and I can see a list of snippets (which as you say would be provided by the debug adapter). I start typing and I get a list of commands that match the characters I type.  It's using the great design time tools we already have to improve the experience inside the repl.
3306|Dup of #64
3307|So we agreed on the following: - if there are no warning or errors - do not show anything in the status bar - if there are - show the number next to the icon - leave everything colorless to fit better with the other status bar items - ask @bgashler1 for a nice icon (sent email) - on click show all the errors and warnings via message service  We also want to provide an 'Uninstall extension' actino which would give the user an option to get out of the error state.  As for the future we want to look into adding more color to the status bar.
3308|@weinand fyi
3309|@bpasero fyi
3310|@eugen-v   Given this only happens on Ubuntu 15.10 when the window is maximized, but it doesn't happen when the window is almost maximized, and also not when in full-screen mode, I'm thinking it is a bug in Chromium...I have found a relevant issue on atom/atom#9724 which again hints this is a problem with Electron/Chromium.  On the Chromium side, I could find [this comment](https://code.google.com/p/chromium/issues/detail?id=514510#c37) which hints Chromium has issues with Intel opensource MESA drivers.
3311|Dear Daniel,  After google to upgrade glibc in RHEL5/6, we give up. Could you porting your code by using the RHEL6(glibc2.12). Many mature tools did this before so that both Ubunth/RHEL can share same binary.  Regards, Simon  2015-12-08 23:44 GMT+08:00 Daniel Imms notifications@github.com:  > Looks like code is assuming glibc 2.14 is present. I'm not too familiar > with RHEL, you can try use yum to install the correct version, yum > install glibc (or something)? >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1056#issuecomment-162922260.  ##   Simon Yi-Hung Chen
3312|duplicate of #703. Fix will be pushed with the Dec15 release.
3313|yeah, related to #752
3314|Also, expose if it got triggered because of `24x7` intellisense or manually.
3315|:dancer:
3316|@stevencl @isidorn Yes, we should store all **breakpoints** (not only exceptions) in the launch.json. Exceptions are just a special type of breakpoint (very similar to function-breakpoints). Storing BP in launch.json raises the question whether we should support to scope BP to a specific launch config (e.g. different breakpoints for launch vs. attach).
3317|@bobcho Thank you for reporting this :+1:
3318|Do it and :beer:
3319|@kristofferostlund I can reproduce the issue in 0.10.3, but on `master` this works again as expected. I am not really sure who from the team has fixed it already, but the December drop will have it fixed.
3320|Hi @hashhar, thanks for the effort! Especially thanks for the `.desktop` file which makes Linux integration much better. I will certainly take it into account for future releases.  The universal installation script seems to be useful for yourself and possibly for others, but I'm not sure this repository is the place for it. How about you create a `vscode-universal-installation-script` repository under your account, containing just those scripts, and distribute them from there?
3321|Oh that's terrible, sorry for that!
3322|This seems to happen consistently every night I leave the computer running. It looks like it's unresponsive due to the CPU being maxed out. Maybe some infinite loop is somewhere, perhaps to do with file or git repo polling?
3323|I assume a simple `git push` from the command line works, right?
3324|"@BleyChen yes, I can reproduce the problem. This problem is unrelated to the imported ""http"" module. The debugger ended up in some internal JavaScript code for which no TypeScript source is available. Instead of trying to show the *.ts source we should show the *.js instead."
3325|This issue was moved to Microsoft/vscode-node-debug#21
3326|Is the HTML highlighting not sufficient for Polymer HTML files? They are pretty much just regular HTML and share the same file extension.  On debugging, my personal opinion is that Polymer, x-tag and web components in general are not widespread enough to be worth the effort for first class support. React has also just emerged and seen a lot of adoption which is a method of implementing web components without the native web components apis (that still aren't widely implemented). - [Web components on caniuse.com](http://caniuse.com/#search=web%20components) - [Mozilla is holding off on HTML imports until ES6 modules come](https://hacks.mozilla.org/2014/12/mozilla-and-web-components/)
3327|Hi **@felixrieseberg**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Felix Rieseberg). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
3328|Discussed with with TS team and they will make sure _Latest_ becomes the default when project salsa is real (https://github.com/Microsoft/TypeScript/issues/6017, Microsoft/TypeScript#4789)
3329|We are save to make this change for Dec because going forward with project salsa the default will be the latest for JS files (#Microsoft/TypeScript/6017)
3330|@felixrieseberg I know it has been a while and there been discussion but I wonder if you willing to continue the work? Simply rebase with master and instead of `ES6` we want to use `Latest`?
3331|Sounds good
3332|Thanks, I'm very happy about this - I'll rebase and update. Should be in in about three hours (once I'm back in front of a notebook). Thanks a lot :rocket:!
3333|Reproduced on vscode v0.10.1, ubuntu 12.04 with this JS snippet:  ``` function foo() {   return 1; }; ```  Looks like the code that handles the bracket matching is intercepting the backspace keypress, this should only happen when a range is not selected.  Note that this only occurs if the cursor/anchor is in between the brackets, not at the end of the return.
3334|Thanks. No hurries. End of week is good for me.
3335|I wonder if the OS decides to put VSCode (Electron actually) into a state where it is causing this crash. I have pinged Electron if they have a clue.
3336|@isidorn I could easily reproduce this but I have no idea why this behaves differently on Windows. The problem does not occur on linux and OS X. Please investigate.
3337|Never happened on Atom fyi, at least on 1.19.x (from memory) and 1.2.4.
3338|:heart:
3339|Hey hey, thanks for the issue! There currently isn't a way to install a specific version, unfortunately. As for the second question, it should work! Will investigate...
3340|"Yes,  ""git push"" from the command line works"
3341|@calmh While waiting for this, there is a workaround for us OS X users, as seen on this Issue from Atom: https://github.com/atom/atom/issues/3790  (Basically, strip spaces, and put a hyphen between the font name and the weight, so InputMono-Thin in your case. I use Source Code Pro Light myself, and so setting it to SourceCodePro-Light works for me)
3342|@jrieken: This should now be good to go :beers:
3343|You are right, most of the time it's working very well but there are sometimes situations when it's not perfect.  ![snip_20151209194907](https://cloud.githubusercontent.com/assets/14092227/11695184/2aec8674-9eae-11e5-99da-110c18ee6d6a.png) This is an example from paper-dropdown-menu.html, you can see my point.   It would be very useful to have IntelliSense: ![image](https://cloud.githubusercontent.com/assets/14092227/11695748/2520e0d4-9eb1-11e5-86bb-16254cc1ac45.png)  I know, lack of native suport is a problem. I think we should look forward and implement the most up to date features. In general WebComponents seems to be approaching very fast - the Angilar2 team is working realy very fast, similar to Polymer group.   Any way, I find Code perfect when I'm doing experiments with new tech :+1:
3344|Got another report of the 2nd question (manually upgrading a plugin): https://github.com/VSCodeVim/Vim/issues/93#issuecomment-163345243
3345|`:host` specifically is part of [the shadow DOM spec](http://caniuse.com/#feat=shadowdom) which vscode probably won't support [until at least 2 browsers support or at least strong interest](https://github.com/Microsoft/vscode/issues/806) (chrome and opera count as one).
3346|Duplicate of #968
3347|Duplicate of #710  What you could consider is to use the quick box in similar way as it is used in the yeoman extension: https://marketplace.visualstudio.com/items/samverschueren.yo or in the file list extension: https://marketplace.visualstudio.com/items/donjayamanne.listFiles
3348|Not sufficient information, please provide steps and expected results.   Also notice tasks show up in the Command palette when entering 'task '.
3349|@dimkk I would love to hear more details about the scenario behind your suggestion. Thanks!
3350|Oh! Neat! I had resorted to disabling the variants except thin and bold in font book. :)
3351|I ran into this developing my extension as well (vscode-startanyshell).  Manually updating (vsix) or trough command palette, leaves the extension folder in a 'broken' state. The extension folder does not contain all files. Like if uncompressing the package stopped half-way.  I really tought it was just my vscode installation or machine, since I didn't see any issues about this.  Looks like I'm not the only one though.  I didn't investigate further. Anything I can do to help?   b.t.w. This happens on my machine with ALL extensions I try to update. My current solution is to just delete the whole extension folder I want to update, then install it.
3352|@isidorn please verify that you receive an event from Ben and send an attach request to the debug adapter
3353|Tables and an additional type column waste space and make only sense if we have horizontal space at our disposal. Chrome dev tools do not use this approach either. As a user, I don't see pressure for this.
3354|I agree, this is only for horizontal layout. In vertical layout we are more constrained for space and this would not make as much sense. I also agree that there isn't a huge problem being solved with this, but sometimes we make small modifications to the UI in order to make small improvements to the UX.   It's possible though that as more debug adapters are written that we might need to show more information such as type. If so, I think we should reconsider this but I will close this for now.
3355|"@stevencl the mono debug adapter (and probably other adapters as well) show already the type by  combining the type into the name that is returned from the debug adapter. One reason why we do not separate type from name in the VSC debug protocol is that in some languages the type appears on both sides of the name, e.g. in C you have constructs like this: ""char *name[]"". Another reason is to keep things simple."
3356|Thanks for the feedback.
3357|Also what's the current plan on the auto-update channel for Linux if I might ask.
3358|thank you ! i can call now
3359|@weinand @egamma  Hello, I will consider scenarios a bit later, thanks for fast reply and thank you for your amazing job!
3360|Sure, we intend to be distributed in the various package managers across Linux distributions. Don't think we will have the automagical auto-update in-app like Windows and OS X.
3361|@jpoon @remcoros which OS are you on?
3362|I have pushed a change to enable fuzzy searching for file matching in quick open. I decided to not touch any other UX area until we get some feedback on the sorting and matching. The new option is `search.fuzzyFilePicker` and disabled by default. I do think that eventually this option would go away and we just enable this by default.  I see the request for broadening fuzzy matching to other places of the UI but I am not yet convinced we should do that. I played around with fuzzy matching in the command palette and was not happy with it. The issue with fuzzy matching is that you also need to do fuzzy sorting: more relevant results to the top. However for the command palette we chose to sort entries by name to keep the result list stable and memorable. Enabling fuzzy for commands would change the sort order for each search you do making it harder to learn the list of available commands.
3363|@aeschli let's update the schema for December.
3364|Closing as a duplicate of #1043
3365|:+1:
3366|Reopen when we have more info.
3367|@alexandrudima fyi
3368|Please see https://github.com/Microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions  Closing for now.
3369|Please refer to https://github.com/Microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions for how to submit issues.  Closing the issue until more steps are provided.
3370|Cheers :beers:
3371|Yes, this collides with our font-size rule for the code block which is not ideal. I am happy to accept PRs for making markdown CSS better. The CSS is defined in https://github.com/Microsoft/vscode/blob/master/src/vs/languages/markdown/common/markdown.css
3372|I think we are even paying the memory price 3 times. Once in the buffer from reading the file, once in the string we assign to the content object and once during decode. Maybe a better way would be to read the file as stream and then pipe it through the decode method into the string.
3373|Fixed this issue, but there is still the problem with workspace UI state not being found if the case differs, filed https://github.com/Microsoft/vscode/issues/1162
3374|"> Windows 10 is half baked one IE and now this editor.  Sorry about the bad experience.   What was the encoding of the file before you killed Code?  @bpasero when I try to open the attached file I get ""... the file uses an unsupported encoding"""
3375|@kumarbalap so did you work for 3 hours without saving or saving frequently? Did you save the file before shutting down or was auto save enabled?  We have heard reports from users that vs code can fail to write the contents of the file to disk in certain cases where the OS shuts down and in that case the contents are not correctly written to the file, leaving the file corrupt.  I think a better approach for saving files is to first write them to some temp location and then replace the file via a copy operation.
3376|Thanks for the replies.  I took a backup in the morning, after that I was saving it frequently, but not committed. So I cudn't recover the content.
3377|@bpasero :+1: That would be awesome!
3378|This is already implemented on `master`. See #950, #961
3379|@bpasero , as you said, it might be because of OS and auto save was not enabled by default. But this is the first time I'm experiencing this issue, I have used many editors before.  Thank you
3380|Git seems to do this, not VS Code. Here's a snippet from the command line:  ``` $ git config remote.origin.url https://github.com/joaomoreno/node-libarchive.git $ git push Username for 'https://github.com': joaomoreno Password for 'https://joaomoreno@github.com': remote: Invalid username or password. fatal: Authentication failed for 'https://github.com/joaomoreno/node-libarchive.git/' ```  Is your host by any chance GitHub or BitBucket? Which command line exactly are you using?  Closing as dupe of #490. Will reopen if further information reveals this to be an independent issue.
3381|Referencing issue #1044
3382|You can do client side debugging using the chrome debugger extension https://marketplace.visualstudio.com/items/msjsdiag.debugger-for-chrome
3383|After discovering that a doubly-clicked app on OSX would not inherit the users's shell environment we implemented the following: at startup, Code spawns the user's default shell, extracts its environment and sets that as its own. Let's call this process: :zap:.  So, here's what's happening: - This only repros if Code is not running yet. If it is, new windows will be opened with the expected environment. - `FOO` is `1` because :zap: is triggered at startup thus overwriting `FOO`. - When skipping step 1, :zap: will still run but no `FOO` will be in there. No overwriting happens.  A possible fix would be to detect whether we are spawned via double-click or the `code` shortcut and conditionally run :zap:. The `VSCODE_CWD` variable could be a good indicator. @bpasero what do you think?
3384|@kumarbalap it would still be interesting if the corruption happened because of you saving the file or something else. When you shutdown the OS, was the file dirty in the editor or saved? Did the OS shutdown maybe while you saved?
3385|@joaomoreno so are you proposing that we do the detection only when someone double clicks from the desktop but when running from the command line we don't do this because we assume the environment is correctly passed in? I think we only set VSCODE_CWD from the script so it is a fair guess to say that someone launched from the command line when this one is present.
3386|Root cause seems to be the timing issue. In this case I first get a reattach request and only then a terminate for the running session. Since the debug service always tries to attach to a running session if there is one, in this case it will attach to the one that is about to be terminated
3387|We will make JSX better supported in the near future
3388|Done by having the default be ES6
3389|Indeed that's indented but you can configure it with the `redeclaredVariables` JavaScript lint option. Even tho the functions are defined in two files they share the same (global) scope.
3390|"@isidorn thanks for the analysis. Yes, there was a change on my side that most likely delayed the terminate event: for windows I had to make the 'killtree' synchronous, so that the debug adapter would not terminate before 'killtree' had done its job.  Since this is a 'good fix', I don't want to revert it. I think we should try to make your code less dependent on the order of events: a terminated event may arrive later than the event to attach to a new EH.  Instead of just checking whether there is a session around to attach to, you should only attach to a session that has not been attached before (e.g. a ""launched"" session). If the session already had an ""attach"", a ""reattach"" should not attach to it but create a new session instead.  So a simple flag ""hadAttach"" could solve this problem."
3391|This comes from the version of TypeScript we are using behind the scenes. Will be fixed once we use project salsa.
3392|I don't believe that supported like that, but moving to OmniSharp for comment first.
3393|This issue was moved to OmniSharp/omnisharp-roslyn#361
3394|@DracotMolver I am sorry, but i still haven't understood the issue here? Can provide detailed steps or let me know if this became obsolete?
3395|Sounds like a reasonable proposal to me. I'm wondering if that's what e.g. atom is doing? Because for atom the same setup works pretty well for me.
3396|@bpasero system suddenly hanged, so I did forced shutdown. I have a strong feeling that the editor made the system slow. The file was fine till the restart, when I opened after the restart it's corrupted. I did saved the file several times before this happened. So whichever the files not saved, got corrupted. One php and js file.
3397|@kumarbalap so it happened for more than just one file?
3398|Yes @bpasero
3399|Tend to disagree because its not part of the completion item model. We might enhance the return to be a CompletionsResult instead of an CompletionItem-array and in there we could provide more context. However, when you make that command-call, you must already know the file and position: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/common/extHostApiCommands.ts#L265
3400|Related to #202 and #752
