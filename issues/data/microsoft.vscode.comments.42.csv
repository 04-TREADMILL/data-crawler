4101|@lukehoban very cool looks perfect!  > Any feedback on whether these looks correct? Also - is it safe to adopt vscode: next for an extension > that is still being used on VS Code 0.10.3? I assume there is no problem with that?  We are planning on decoupling the vscode node module so that the API part moves out and the tooling part remains. Once we do that, the only thing that you will need to set in the package.json to identify the target VSCode version is via the `engine` field (similar to how a node module does it for node). What remains in the vscode node module is the tooling for compile and test and I would eagerly publish releases there as long as I am not breaking existing extensions in a version form that is compatible (e.g. minor version increments) so that you can just keep `0.10.x` to receive updates properly.  For now, please do not publish the extension with `next`. I suggest to wait with the PR until we have released end of week and then change it back to `0.10.x`. Once we have released you also don't need to set the custom download URL.  > One thing I did noticed while setting this up - running these tests locally is a little rough right now - three issues  Yes, we are not in a good state to run the tests locally from the command line. There are still issues and you listed them all. The test script is optimised for running in a build machine that just dismisses any storage on disk after the run.
4102|@rui-infotrack this actually changes in our next release, i have taken out the dropdown with file extensions because it caused other issues. However, if you change the language mode of an untitled file, I will propose the correct extension for this mode so that you dont have to type it again.
4103|for your ease.  ### original  ``` javascript     var globalAttributes =  ['ng-app', 'ng-bind', 'ng-bindhtml', 'ng-bindtemplate', 'ng-blur', 'ng-change', 'ng-checked', 'ng-class', 'ng-classeven', 'ng-classodd',         'ng-click', 'ng-cloak', 'ng-controller', 'ng-copy', 'ng-csp', 'ng-cut', 'ng-dblclick', 'ng-disabled', 'ng-focus', 'ng-form', 'ng-hide', 'ng-href', 'ng-if',         'ng-include', 'ng-init', 'ng-jq', 'ng-keydown', 'ng-keypress', 'ng-keyup', 'ng-list', 'ng-modelOptions', 'ng-mousedown', 'ng-mouseenter', 'ng-mouseleave',         'ng-mousemove', 'ng-mouseover', 'ng-mouseup', 'ng-nonbindable', 'ng-open', 'ng-options', 'ng-paste', 'ng-pluralize', 'ng-readonly', 'ng-repeat', 'ng-selected',         'ng-show', 'ng-src', 'ng-srcset', 'ng-style', 'ng-submit', 'ng-switch', 'ng-transclude', 'ng-value'     ]; ```  ### fixed  ``` javascript     var globalAttributes =  ['ng-app', 'ng-bind', 'ng-bind-html', 'ng-bind-template', 'ng-blur', 'ng-change', 'ng-checked', 'ng-class', 'ng-class-even', 'ng-class-odd',         'ng-click', 'ng-cloak', 'ng-controller', 'ng-copy', 'ng-csp', 'ng-cut', 'ng-dblclick', 'ng-disabled', 'ng-focus', 'ng-form', 'ng-hide', 'ng-href', 'ng-if',         'ng-include', 'ng-init', 'ng-jq', 'ng-keydown', 'ng-keypress', 'ng-keyup', 'ng-list', 'ng-model-ptions', 'ng-mousedown', 'ng-mouseenter', 'ng-mouseleave',         'ng-mousemove', 'ng-mouseover', 'ng-mouseup', 'ng-non-bindable', 'ng-open', 'ng-options', 'ng-paste', 'ng-pluralize', 'ng-readonly', 'ng-repeat', 'ng-selected',         'ng-show', 'ng-src', 'ng-srcset', 'ng-style', 'ng-submit', 'ng-switch', 'ng-transclude', 'ng-value'     ]; ```
4104|@joaomoreno win32MutexName is not used anywhere in our code, and we still use vscode as mutex name, reopening.
4105|Tagging some people as it should be fixed before final december release. Can you guys pass it to the correct person?  // @bpasero @jrieken
4106|@SamVerschueren I think we changed the defaults (see https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#changed-defaults-and-key-bindings) and so unless you explicitly configured it, it would change.  @alexandrudima fyi
4107|I configured it to `auto`, but the it does not work, it keeps inserting spaces unless I explicitly set it to `false`.
4108|Did a screencapture.  My `gulpfile.js` uses tabs, so with `editor.insertSpaces` set to `auto`, it should insert tabs instead of spaces. As you can see in the screencapture, when I change the setting from `false` to `auto`, it is not detected.  ![spaces](https://cloud.githubusercontent.com/assets/1913805/11864301/af428714-a49b-11e5-97c0-f928e587684b.gif)
4109|Changed milestone to Dec and we will discuss in our bug review today.
4110|Thanks for the quick response!
4111|@aeschli when verifying and Intellisense kicks in for the prefix, then use the 'Emmet: Expand abbreviation' command to use emmet to expand the prefix.
4112|"@SamVerschueren Since ""auto"" looks at the file to detect the setting, can you please also share the file with us (if the file is too short or has too few hints we fall back to insertSpaces: true)."
4113|Duplicate of #1321
4114|@edotassi thanks, closing as a duplicate of #1321
4115|@alexandrudima   ``` js 'use strict';  /**  * Tasks that will zip all the files so that the zip file can be deployed to  * AWS Lambda.  *  * @author Sam Verschueren      <sam.verschueren@gmail.com>  * @since  02 Sep. 2015  */  // module dependencies var fs = require('fs'); var path = require('path'); var gulp = require('gulp'); var install = require('gulp-install'); var zip = require('gulp-zip'); var strip = require('gulp-strip-comments'); var removeEmptyLines = require('gulp-remove-empty-lines'); var del = require('del'); var pkg = require('./package.json');  gulp.task('clean', ['zip'], function () {     return del('.temp'); });  gulp.task('rmaws', ['copyAndInstall'], function () {     return del('.temp/node_modules/aws-sdk'); });  gulp.task('copyAndInstall', function () {     var files = ['package.json'].concat(pkg.files);      if (pkg.files === undefined) {         files = ['./**', '!./**/*.md', '!gulpfile.js', '!./{dist,dist/**}', '!./{test,test/**}', '!./{node_modules,node_modules/**}'];     } else {         files = files.map(function (file) {             try {                 if (fs.statSync(path.join(__dirname, file)).isDirectory()) {                     return path.join(file, '**/*');                 }             } catch (err) {                 // do nothing             }              return file;         });     }      return gulp.src(files, {base: '.'})         .pipe(strip())         .pipe(removeEmptyLines())         .pipe(gulp.dest('.temp'))         .pipe(install({production: true})); });  gulp.task('zip', ['copyAndInstall', 'rmaws'], function () {     return gulp.src('.temp/**')         .pipe(zip('build.zip'))         .pipe(gulp.dest('dist')); });  gulp.task('build', ['copyAndInstall', 'rmaws', 'zip', 'clean']); gulp.task('default', ['build']); ```  > Note: It are all tabs, GitHub just renders them as spaces.  With a file that has 100+ lines it doesn't work either.
4116|yeah, we should bubble up !dirty-state and also set an internal isClosed/Disposed flag on the document.
4117|@aeschli not sure if this is you
4118|I verified it takes 1-2 seconds ;-)
4119|@bpasero fyi.
4120|Dupe
4121|To verify: - open `package.json` - add a `contributes` and a `configuration` section - add some configuration keys - inside the configuration keys object make sure you get intellisense and hovers
4122|":+1: but I really think this is just another operation and should not be ""Replace"", instead it should be an option from the dialog to say ""Merge"" folders."
4123|Closing.  @chantisnake pls ping me when you have more info regarding this issue
4124|@rui-infotrack oh sorry. Ignore what I said then. Someone else was having the same problem with `tsx` and I must've overlooked your issue.
4125|@bpasero thank you for taking that into consideration
4126|@jrieken turns out, we already dispose the untitled model when it gets saved, the only thing missing is to set the dirty flag in the dispose, I think that is a fair thing to do.
4127|@jrieken https://github.com/Microsoft/vscode/pull/1408
4128|This is about the 'Transpiling Sass and Less into CSS' section in https://github.com/Microsoft/vscode-docs/blob/master/docs/languages/css.md Not sure who authored that, @gregvanl ?
4129|This issue was moved to Microsoft/vscode-docs#85
4130|@mitchdenny You can also use the extension state for storage (https://code.visualstudio.com/docs/extensionAPI/vscode-api#ExtensionContext)
4131|"Can't find the original issue now but this has already been fixed in master. The actions of the `Don't Save` and `Cancel` were accidently switched. For now, you have to click ""Cancel"" instead :)"
4132|duplicate of #487
4133|@shanalikhan1 You cannot do that, it's seen as starting a new instance
4134|@bpasero Can you also make that change to the unit test?
4135|:+1: it works. Intellisense as well as hovers as well as validation. Thats great.  Maybe add defaults everywhere, where only one type is valid. For example `anyOf` or `allOf` are always arrays, so why not set their defaults to an empty array. It is not necessary but would improve the flow of writing an schema.
4136|This issue was moved to Microsoft/vscode-docs#86
4137|duplicate of #663
4138|Reproduced on 0.10.4 and I can no longer reproduce this on 0.10.5.
4139|Duplicate of #1111
4140|There are two ways to associate a schema. 1. Add a `$schema` property top level in your json file 2. configure the `json.schema` setting  At both places you can add a relative path (`./foo`), representing a workspace path. Verify that when you give a path to a non-existant resource, the error marker makes sense.
4141|got it
4142|Thanks @SrTobi
4143|@evanw it is not yet possible to hook into the view layer of the debugger. But it is planned to open this up, e.g. for tooltips. But even if we would introduce hooks in the variables view, it will be difficult for you to do correct name substitution. The reason for this is that the VSCode debugger is language agnostic. It does not understand in any way what is displayed in the variables view. It is just a tree of name/value pairs. There is no type information available. The debug adapter prepares (formats) the strings, the UI renders them without further interpretation. Just blindly replacing numbers by enum values would not work. But let's continue the discussion! (adding @isidorn)
4144|I see, thanks! I guess this will make it into final 0.10.4 ?
4145|@SamVerschueren Thank you for finding this!! :heart:  It was a nasty regression introduced with d60cc73d82e803184c996da11bbd54d8f4eddb57 where the guessing code was always guessing it should `insertSpaces`
4146|Thanks for expressing your love to me ;).  On a more serious note, thanks for fixing it before the final release!
4147|The `sortText` should do what you want. I will have investigate...
4148|@jrieken done :+1:
4149|All I can think off is to make the imports relative (eg. ../../). If this doesn't help please open a issue against TypeScript here https://github.com/Microsoft/TypeScript since VSCode uses the tsserver provided by the TS team.
4150|Yes i know it will open new instance. but is it possible to open new folder from API and open new instance ?
4151|Done. Thanks
4152|@bpasero another dup :-)
4153|True...
4154|Same problem on Linux
4155|@shanalikhan1 You cannot do that
4156|Just hit `Cmd+Shift+.` in the file dialog to see hidden files!
4157|I tried to see anything strange in the process explorer, but all looked normal.
4158|It takes around 5sec here, on a quite fast connection, no matter when I'm trying it during the day.  I still find it quite slow. I wouldn't be against having immediately cached results and updated results after 5 seconds.  Within Code there is nothing that takes that much time. Even `find in files` takes less time to give some **feedback** to the user.  Switching to another app while it searches will immediately stop the search too.
4159|I agree, it's unhappy esp with cancel on focus loss model. For the future, the extension UI should move into a different slot, like a viewlets or editors
4160|"Verified with the following example:  ``` typescript // The module 'vscode' contains the VS Code extensibility API // Import the module and reference it with the alias vscode in your code below import * as vscode from 'vscode';   // this method is called when your extension is activated // your extension is activated the very first time the command is executed export function activate(context: vscode.ExtensionContext) {      // Use the console to output diagnostic information (console.log) and errors (console.error)     // This line of code will only be executed once when your extension is activated     console.log('Congratulations, your extension ""my-extension2"" is now active!');       // The command has been defined in the package.json file     // Now provide the implementation of the command with  registerCommand     // The commandId parameter must match the command field in package.json     var disposable = vscode.commands.registerCommand('extension.sayHello', () => {         // The code you place here will be executed every time your command is executed          // Display a message box to the user         vscode.window.showInformationMessage('Hello World!');     });      var s1 = vscode.languages.registerCodeLensProvider('javascript', {         provideCodeLenses: (doc, ct) => {             console.log('provideCodeLenses1');              var codeLenses: vscode.CodeLens[] = [];             codeLenses.push( {                 range: doc.lineAt(0).range,                 command: { title: 'Foo', command: 'extension.sayHello'},                 isResolved: true             });             return codeLenses;          },         resolveCodeLens: (codeLens: vscode.CodeLens, token: vscode.CancellationToken) => {             return codeLens;         }      });      var s2 = vscode.languages.registerCodeLensProvider('javascript', {         provideCodeLenses: (doc, ct) => {             console.log('provideCodeLenses2');              var codeLenses: vscode.CodeLens[] = [];             codeLenses.push( {                 range: doc.lineAt(0).range,                 command: { title: 'Bar', command: 'extension.sayHello'},                 isResolved: true             });             return codeLenses;          },         resolveCodeLens: (codeLens: vscode.CodeLens, token: vscode.CancellationToken) => {             return codeLens;         }      });     context.subscriptions.push(s1);     context.subscriptions.push(s2);     context.subscriptions.push(disposable); } ```"
4161|@aeschli thanks.
4162|@jrieken: this is hard to verify since it depends on upstream behavior of the tsserver. Please verify that the TS buffer sync support now sends the content on open and doesn't rely on disk sync anymore.
4163|@aeschli: to verify: - clone https://github.com/Microsoft/vscode-languageserver-node.git - cd client - npm install - open code - Ctrl + Shift + B - Add a compile error  Ensure that the spinner stops
4164|Verifying I see [this](https://github.com/Microsoft/vscode/blob/master/extensions/typescript/src/features/bufferSyncSupport.ts#L31) and that it's being called
4165|@Clivar do you have any additional steps. I tried various scenarios (having tsconfig.json open, changing it, ....) but I couldn't make code holding a handle to it.   I suspect that the tsserver is holding the handle but before moving it to them I want to make sure that this is the case. When it happens the next time can you provide the command line of the code.exe process holding the lock. That would help ti understand which part of the code is the culprit here since code is multi process  and one VSCode instance start ~6 code.exe processes.
4166|@isidorn I've debugged this on my side and I found out that you are not sending me an attach-request. When debugging your code it looks like you are not receiving an event from @bpasero. I think this is a must fix.
4167|@aeschli: makes sense to rely on @alexdresko  @alexdresko: thanks for verifying
4168|@aeschli I played the steps from above and I can't reproduce this anymore (the spinner stops). Can you please let me know why you think that this is not fixed. You added verification-regression
4169|And Joh closed #918 as verified :-)
4170|@aeschli ignore the steps from above. They should be: - clone https://github.com/Microsoft/vscode-languageserver-node.git - cd client - npm install - open code - Ctrl + Shift + B - Open tasks.json - make a change (add a new line) - Ctrl + Shift + B  Ensure that a message appears that there is already a running task. In the past a new task was started and two were running in parallel
4171|this is the good feature. i hope it will be in your roadmap
4172|@rui-infotrack If using keyboard instead of file navigation dialogs works for you, maybe open an issue here and describe your use-case, sounds like it would fit in:  https://github.com/bgse/vsc-addfileextension
4173|The problem is local specific. Martin is running under Swiss locale and me under US. We changed the pattern to be locale independent.
4174|Verified that we now show a better error message
4175|"Not a fix, but here is a **workaround** for using VS Code with JSX: - Install the [vscode-eslint extension](https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint) and [configure eslint](http://eslint.org/docs/user-guide/configuring.html) for JSX.  ``` {     ""ecmaFeatures"": {         ""jsx"": true,         ...     }     ... }  ``` - If you are using React constructs inside .js files then the built-in JavaScript validation can be disabled using the setting `""javascript.validate.enable"": false` or  - You can install the `js-is-jsx` [extension](https://marketplace.visualstudio.com/items/eg2.js-is-jsx) which changes the file mapping so that .js files are treated like .jsx files. **Notice** when installing this extension then you loose the existing language support for .js files."
4176|You need to define a `tsconfig.json` file to define the scope of your project, pls see the [vscode ts doc](https://code.visualstudio.com/docs/languages/typescript).
4177|@Thaina can you please provide an example. It is hard to understand what exactly you mean.
4178|@bpasero IMO not asking for confirmation is what I expect. Normal OS explorers behave the same. However they allow me to undo such changes. So I would expect undo in VSCode as well.
4179|"Hi @egamma. Thanks for the quick response. My project does have a tsconfig.json file and its contents are as follows: {     ""compilerOptions"": {         ""target"": ""es5"",         ""module"": ""commonjs"",         ""moduleResolution"": ""node"",         ""isolatedModules"": false,         ""jsx"": ""react"",         ""experimentalDecorators"": true,         ""emitDecoratorMetadata"": true,         ""declaration"": false,         ""noImplicitAny"": false,         ""removeComments"": true,         ""noLib"": false,         ""preserveConstEnums"": true,         ""suppressImplicitAnyIndexErrors"": true     },     ""filesGlob"": [         ""**/*.ts"",         ""**/_.tsx"",         ""!node_modules/_*""     ],     ""compileOnSave"": true,     ""buildOnSave"": true,     ""atom"": {         ""rewriteTsconfig"": true     },     ""files"": [         ""src/core/api/CallStack.ts"",         ""src/core/api/describe.ts"",         ""src/core/api/it.ts"",         ""src/core/environment/environment.ts"",         ""src/core/queue/iqueueitem.ts"",         ""src/core/queue/queue.ts"",         ""src/core/queue/QueueManager.ts"",         ""src/main.ts"",         ""typings/q/Q.d.ts"",         ""typings/tsd.d.ts""     ] }"
4180|`filesGlob` is an extension to tsconfig.json that is specific to 'atom-typescript' it is not supported by the TypeScript Server and therefore by vscode. Could that be the cause that the scope is only a single file?  A reference search from src/main.ts should find the references in the files listed under the `files` section.
4181|@jrieken fyi
4182|Was this meant to be closed?  I couldn't find a similar issue in the backlog :)
4183|I need this as well since my debug adapter has a '/waitForDebugger' flag so I can debug my debugger :)
4184|+1
4185|:+1:
4186|@liandaoacc this works for me. Here is what I see:  ![capture](https://cloud.githubusercontent.com/assets/1931590/11873491/256cb128-a4db-11e5-8f7c-c0806add4a68.png)  From the error message I think there is a setup issue telling the tsc compiler to produce errors with absolute paths. Which version of tsc are you using. And can you please run tsc from a command prompt and provide the output.
4187|Atom has this bug too https://github.com/atom/atom/issues/10112
4188|fwiw, try installing gitex and see if that has to do with anything. The last time I remember it happening was when I checkout/merge branches. Intellisense went crazy and I finally tracked it down to the tsconfig.json being missing. Happened a few more times with the tsconfig.json either being locked or gone all together.
4189|Visual Studio (the IDE) has the same bug https://connect.microsoft.com/VisualStudio/feedback/details/2214793/triple-click-should-select-whole-line
4190|"Visual Studio the IDE has this bug too. https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/5574507-fix-behaviour-of-home-end-keys-when-word-wrap-is-e  Update 2017:  Though it received 30 votes, bug was closed by a bot ""This item has been around for a couple of versions of Visual Studio and we haven’t acted on it"""
4191|Now it works! Thanks!
4192|Verified in d740e5c4b
4193|sorry, wrong button
4194|Hi @egamma and thanks again for your quick response. I did some sherlocking. I removed all atom specific json entries from the tsconfig.json file and restarted Code. The results were identical. Then I invoked Find All References for a number of variables and types and noticed that it didn't work for interfaces, such as  interface IQueueItem {     path: string,     callback: () => void }  which is the interface I was looking for originally and which raised the issue for me.  Please see the 2 images I have provided. One shows the results of plain old search for IQueueItem which finds it in numerous files. The other shows the results of Find All References for IQueueItem which finds it in only the current file. ![screen shot 2015-12-17 at 10 40 20 am](https://cloud.githubusercontent.com/assets/271288/11874008/6f4f27ec-a4ab-11e5-98a6-126d2ee9b3ae.png) ![screen shot 2015-12-17 at 10 41 24 am](https://cloud.githubusercontent.com/assets/271288/11874007/6f4768cc-a4ab-11e5-9415-c24099dcbe18.png)  I would expect that Find All References for IQueueItem to yield all the files in which the interface was used but that isn't the case.
4195|@tonyeung Exactly, I have it when pulling or merging with git. File went missing or was empty sometimes aswell. Happens quite a bit. Closing and reopening code has always fixed the access denied issue so far
4196|By using `export =` you lose tracking of the `IQueueItem` cos it won't be referenced by that name anymore
4197|"I was imagining that visualizing enums correctly could be accomplished by having the compiler emit custom metadata into the generated source maps which is then retrieved by the view layer. I looked more into this last night and it looks like the tooltip lookup request starts [here](https://github.com/Microsoft/vscode/blob/f21fd8f/src/vs/workbench/parts/debug/browser/debugHoverWidget.ts#L55), but it's based on string splitting using ""."" which means it's not that robust. For example, tooltips work for ""this.foo"" but not for ""(this).foo"" when debugging JavaScript. Maybe it would make sense to pass that range down to the debugger and ask it what the value at that position is? That way the lookup could potentially use the actual syntax tree for better accuracy. Also, if that range could be mapped through a source map, that might be a good way to automatically make tooltips work a lot better for compile-to-js languages (CoffeeScript's ""@"" variables might just work, for example)."
4198|@Clivar  how do you interact with git (git bash or gitex or sourcetree)?
4199|Hi @jrieken and thank you for your quick response. OK I understand but it still smells like a bug to me :). Find All References and even Change All Occurrences should be able to resolve export = value, object and type across files otherwise project-wide refactoring is severely hobbled IMHO.
4200|git bash. I do however commit from inside vs code
