20501|I could introduce this UUID smartness in the message service. Are there more use cases for this? If this is the only use case, I would push it to the backlog until more people want to use it.
20502|@bpasero   https://github.com/ChristianKohler/PathIntellisense/blob/master/src/PathCompletionItem.ts#L5  https://github.com/shardulm94/vscode-trailingspaces/blob/master/src/trailing-spaces/config.ts#L35 https://github.com/shardulm94/vscode-trailingspaces/blob/master/src/trailing-spaces/config.ts#L28
20503|@isidorn I suggest not to introduce a new channel but reuse the 'Extensions' channel instead.
20504|@shardulm94 I cannot reproduce, are you sure you are on latest insider?  ![image](https://cloud.githubusercontent.com/assets/900690/15011687/8012f7ce-11f3-11e6-858d-1a6c73d1c204.png)
20505|I dont think we have another use case atm.
20506|I've enabled the option to use Fn keys as standard function keys:  ![2016-05-04 12-31-16](https://cloud.githubusercontent.com/assets/1898161/15011821/3b1c92b4-11f4-11e6-8f8b-88e0ee7eb889.png)  This requires to press the 'fn' key to get the Mac behaviour (e.g. 'Show Desktop') but in this mode I do not have to reconfigure function keys for individual applications.   I think there is no need for VS Code to do anything special here.
20507|Maybe you can firstly checkout this PR locally, and then edit as you like, and then use `git commit --amend` to append your code onto this PR.  Then the commit log will be `outcoldman committed with alexandrudima`. like this one https://github.com/neovim/neovim/commit/f931e78fe420884447a7a5d4e17f71a2eeeff3cd
20508|I replied on stackoverflow and added a section Q&A in the themes documentation page. IMO the best advice about what scopes to use is to follow the text mate specs. Avoid language specific rules and don't make any assumptions on the grammars we use, as they can be replaced by extensions.
20509|@isidorn a debug adapter can already return any name for a thread (and mono-debug makes use of it by returning the name of the C# thread). So I don't think that we have to change the protocol here, but we should better document that the name returned from the adapter for a thread should make clear that it is a thread.
20510|We have now introduced an option in the `launch.json` to control this behavior  `internalConsoleOptions` which can have the following three values 'neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'
20511|I applied the changes you proposed and explained them in #4045
20512|It's the focus police 👮 Makes perfect sense -> may to investigate
20513|@jrieken do you get the list of workspaces when you right click on the icon in the dock?
20514|nope
20515|@isidorn Awesome thank you!
20516|Sorry I forgot the important part :) I'm talking about Intelisense. This isn't working with this configuration. I've always to open the src folder to get Intelisense working
20517|computer crashed, restarted, and now they are back. wtf
20518|@alexandrudima next time you could ask. I know rebase/reset magic which allows me to remove these files from the history. I actually did it right after I relalized that there were checked in, but got distracted and forgot to update my branch.  Anyway, no bad feelings. Thank you for accepting the work and making improvements.
20519|So... what do you mean by _vscode doesn't find the app.ts_? Where exactly, in Code, do you expected to see `app.ts` and does not appear?
20520|@isidorn @joaomoreno debugged this and it seems the git event is not being fired in https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/workbench/parts/git/browser/gitOutput.ts#L26
20521|If I understand the editor correct. It search the app.ts file to get all the reference paths that intelisense and typings works.
20522|@joaomoreno cc
20523|@joaomoreno cc
20524|@joaomoreno cc
20525|@bpasero - I updated the description accordingly. This happens when you already have a project open in VS Code.
20526|We have introduced a limit of 1024 which should make this experience nicer now
20527|Ok thanks.
20528|@nchammas I cannot reproduce, see the video:  ![untitled](https://cloud.githubusercontent.com/assets/900690/15018817/9ab062ce-121b-11e6-9aa7-fa91e82167c8.gif)
20529|We are now auto-expanding elements in the repl that have children. This makes sense to me since if a user typed an expression in the repl he is interested to drill down inside that expression.
20530|Hmm, maybe this is compounded by having multiple monitors? Lemme see if I can make my own video to show you...
20531|@bpasero - What did you use to make that gif, btw?
20532|http://www.cockos.com/licecap/
20533|We are now always showing the console on errors in the debug. Dup of #5870
20534|If the dirty indicator replaces the CLOSE icon, how will we be able to close the file if we don't want to save our changes? Will ctrl-w still be available?
20535|Couldn't the dirty indicator just change to the close button on hover? That's a pretty common solution...  On Wed, May 4, 2016 at 11:28 PM, rojorojo notifications@github.com wrote:  > If the dirty indicator replaces the CLOSE icon, how will we be able to > close the file if we don't want to save our changes? Will ctrl-w still be > available? >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-216901750
20536|Sorry @bpasero, I can't get screen capture to work with 2 monitors, but here's my setup: - Monitor 1: Project is open in VS Code. - Monitor 2: Terminal is open.  When I run my `git` command from Monitor 2, a new VS Code window opens in Monitor 2, but the focus goes to the VS Code project open in Monitor 1.
20537|And I just tried having the project VS Code window be on the same monitor as the terminal window. In that case the problem doesn't happen (focus goes correctly to the new git VS Code window), so this appears to be limited to multi-monitor setups.
20538|The fix requires collaboration on both ends. One VS Code has to feed that html file into the project context and Salsa needs to be able to work with this 'virtual' JS document.
20539|@ianwesterfield this reasoning makes sense to me. We can also consider workspace local extensions in the future.
20540|I see it too...
20541|So... it's when you do Reference Search? Or when you use Intellisense in some other module? Are your sources open, so we could clone them?
20542|I created the `NodeConfigurationService` which should serve as a stepping stone for this. Any environment with node access should be able to instantiate one of these guys, which listens on changes to the global settings. We then can compose it with another guy which listens on changes to the local workspace settings. Reusability is key here.
20543|Another idea would be to make the `get` return a `Promise`. This, to me, would be much cleaner.  cc @jrieken
20544|I've created the `NodeRequestService` as a stepping stone for this. It contains much of what the `RequestService` in the `workbench` world has.  We should create a `XHRRequestService` that does requests over XHR and then compose that with the `NodeRequestService` to use within the workbench.
20545|So you propose that we show an error in the call stack view if the call stack request fails? Or what would be the mechanism for the debug adapter to send the error message which should be displayed in the callstack view?
20546|I've posted this to https://github.com/OmniSharp instead.
20547|Yes, we show the error message from the request in the view (probably wrapped because the view is narrow).
20548|@ioklo Thank you very much for this change! :heart:  Based on a few issues and on this description I was able to put together an [IME Smoke test](https://github.com/Microsoft/vscode/wiki/IME-Test) that we will go through from now on any time we make changes in the input handling and your changes make VSCode work like Word in these test cases!
20549|So you say making it possible to set a `Promise<IService>` into the collection that gets resolved?
20550|"@alfalabs thanks for pointing this out.  Are you having trouble seeing just the path on the right, or are you having trouble with both the path and the filename? <img width=""297"" alt=""screen shot 2016-05-04 at 8 52 06 am"" src=""https://cloud.githubusercontent.com/assets/11839736/15020504/25ce7a16-11d7-11e6-9492-5a408c6f40fe.png"">  While we work to improve the color contrast here, I'd recommend switching to the High Contrast theme.  ---  **Note to self:** Here are the color contrast measurements.  The right one (B) is too low according to WCAG AA (less than 4.5:1. ![6065-light-theme-explorer-text-hard-to-read](https://cloud.githubusercontent.com/assets/11839736/15020679/fab0ef84-11d7-11e6-934a-dde6d6f025b3.png)"
20551|@alfalabs: to further answer your questions, in case you really want to modify your light theme (instead of using the high-contrast theme), you can modify it by going to `file:///C:/Program%20Files%20(x86)/Microsoft%20VS%20Code/resources/app/out/vs/workbench/workbench.main.css`  Change the following rule so that the **`opacity` is `1`**.  (Like how I've done below)  ``` .monaco-file-label .file-path {     opacity: 1;     margin-left: .5em;     font-size: .9em; } ```  **NOTE:** your modified theme will likely be overwritten when you next upgrade VS Code.  So you may need to do this again if you choose this approach.
20552|"""find all references"" and code completion in all modules even in app.ts doesn't work.  No sorry"
20553|Nice! Thank you for the contribution! :heart:
20554|Fixed by #5615
20555|@bgashler1  re 1  - having trouble with both, file and path as in your illustration. If text was black `#000` it would be much better.  re 2 - Yes I need light theme. Changed opacity to 1 as per your instruction (needed admin permission) but I see no difference. Is there a cache for .css file I need to clear? (cleared IE cache but it did not help)
20556|@Inori Thank you, nice job! :heart:
20557|PR #5715 closes this.
20558|I have a US keyboard layout. Not sure about the others. This has been reported by a couple of folks.
20559|Sorry @alfalabs, I just updated the path to the CSS in my previous comment.  The one I gave you was for the Alpha build of VS Code (and that's why you saw no change).  It should work now if you work off the correct path I just sent you.
20560|@rojorojo we are doing what @anyong also suggested, so you won't have any trouble.  And yes, Ctrl+W will be still available.
20561|@bgashler1  I did figure it by myself since I do not have `alfa` folder. Still no change after changing opacity. I rebooted my computer just to make sure.  ![vscode](https://cloud.githubusercontent.com/assets/11356118/15022811/67f4e8fc-11fb-11e6-9c29-7a645ace02dc.png)
20562|"I came here because of #6000  My point here as a VS Code (& others) user... Adobe Brackets does this (put everything in ""Edit"" or create new menu items for each extension), and the menus become SOOOO cluttered, with native features + extension features in the same menu makes it too long! I particularly hate this kind of solution that Adobe has taken.  I think a menu ""Extensions"" listing the installed extensions and submenus with the functions of each extension (like #6000 does) is an elegant solution.  ![](https://cloud.githubusercontent.com/assets/7069719/14929697/5e4848f2-0e91-11e6-8641-f683860decda.png)"
20563|When you open Toggle Developer Tools from the help menu and inspect the working files text, do you see that its opacity has changed to `opacity:1`?  It works on my machine when I change it.
20564|I had the same issue yesterday upgrading from an ancient version to the latest 1.0.0 version.  It worked with all names except the old /Applications/Visual Studio Code.app name.  Taking a cue from the comment about OS X caching the plist information, I just rebooted my Mac and it worked.  So it's probably related to the cfsprefsd cache and I could have probably killed that process to avoid a reboot.  But the reboot worked and I'd recommend that for anyone having this issue as a workaround.
20565|@bgashler1  This is cool!  I did not know about Developer Tools. I could not find the opacity rule, but I did remove the color of `monaco.shell` and I have black text, as I wanted.  Thanks!  You may consider to fix it for other users too. ![svscode2](https://cloud.githubusercontent.com/assets/11356118/15023908/82055cd6-1200-11e6-80fb-bcc1d2d967b9.png)
20566|@bpasero Yes, even after restart they are not translated.
20567|awesome. i'm not sure how to tell what commits are in the downloadable version? http://code.visualstudio.com/Download
20568|@joaomoreno It is not being colored using either `javascript` or `js`
20569|@bpasero Yes, I am on the latest one. I did not encounter this when I started vscode now the first time. But after closing vscode and reopening I got it again.  ![image](https://cloud.githubusercontent.com/assets/6961317/15025432/d5195264-1256-11e6-8131-5fa465d62459.png)
20570|Is this feature being included in the next iteration, by any chance?
20571|This issue is assigned to May which means it will come out with our may release - which usualy comes out early June (I know it is a bit confusing) :)
20572|@egamma yes, sure, i'll try
20573|@alexandrudima @jrieken this is a race condition that only reproduces on Windows for me, likely because the timing for spawning the extension host is different. When I debug the `onDidRegisterConfiguration()` event (https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/platform/configuration/common/configurationService.ts#L82) I see that I am being called and that the default values from all extensions are being filled into the cached configuration.  Is there any chance that the `onDidRegisterConfiguration()` event does not have a chance to update the configuration value for the extensions because the extension host is already starting up and activating extensions at the same time?  In other words, the extension host should only start activating extensions if the configuration service had a chance to `mixin` the provided default configuration from all extensions and was able to notify all listeners about this change. Maybe the fact that the configuration changes is not being sent to the extension host fast enough before the extensions are starting up?
20574|"Or globally:  ``` sh npm i -g typescript@next ```  ``` json ""typescript.tsdk"": ""/usr/local/lib/node_modules/typescript/lib"" ```"
20575|@alexandrudima can this be picked up in May iteration, pretty please :)
20576|$ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean
20577|By analyzing the blame information on this pull request, we identified @egamma and @joaomoreno to be potential reviewers
20578|Hi **@jsloyer**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
20579|Whoa, interesting.  So if a completion is of type `Snippet` and has the necessary formatting for placeholders, it should work as expected?  This could mean interesting things for the PowerShell extension...
20580|**@jsloyer**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
20581|**@jsloyer**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
20582|With all due respect to the existing VSC Vim extensions, none of them provides anything close to the sort of quality support provided by say JetBrains for their range of (IDE) Editors.   For an example of what is required to be built by **Microsoft** (yes, you, please stop stalling with comments like we are actively evaluating but checking what is missing in Open Source - nothing has changed from a year ago when I last voted on user voice) - see [ideavim](https://github.com/JetBrains/ideavim)  - this includes all the usual keybindings, visual / command modes, and Macros support etc.   Please just get started, and stop stalling for time - this is the feature that will attract thousands of *nix / Mac devs to this otherwise awesome Editor. Would add `integrated terminal support` and `tabs` are the other two features very much needed.
20583|I observed this behavior across all the platforms Mac\Linux\Windows.   ![image](https://cloud.githubusercontent.com/assets/17735796/15032568/25aad378-1217-11e6-8722-3b42bc859dbd.png)
20584|An extension on par with ideavim is definately what is needed. Existing VS Code extensions are nowhere near ideavim. Microsoft should really pick this up and make this Vim extension.  One thing I wanted to add: ideavim uses a simple parser for `.vimrc`. Works good. To have something like that would also attract more Vim users.  Ah, and tabs, tabs are even in Vim considered bad. Vim users seem to prefer buffers and windows (as layout mechanism) over tabs.
20585|please see #4679
20586|Same issue as @rhurkes for me in express app. It now works with node v4.4.3 but not in v6 VSCode seems to stop at the breakpoint without any debug info with current line highlight, watch etc. I can then blindly step through using F8, without the current line being highlighted.  Debugger works on stopOnEntry but not in node/express handlers.
20587|+10086
20588|thnaks!  I assume it would still open with `neverOpen` if I init something session unrelated like a task?
20589|"I'd like to see the hover tooltip get a bit of a makeover. I've been playing around with the extension api, but hover providers are pretty limited. It would be awesome if you could pass html, not just a `MarkedString`. I'm imagining hovering over a function and seeing a table of its params like you often see in online documentation. That be great! But at the very least.. recognise some more of the jsdoc tags. Pretty much anything besides `@param` just gets inlined in the ""description"", then the line breaks are removed and you end up with this jumbled mess.  ![fail](http://i.imgur.com/7AE5kMr.jpg)  Here are a few more things on my wishlist: `@see` autocompletion with click-to-follow. Also keep   jsdocs on imported symbols (right now anything you import via the es2015 syntax will only ever show ""`import MyClassName`"" upon hover.) And then, how about optionally allowing for seperate descriptions on a constructor and a class definition <sub><kbd>foo.ts</kbd></sub>  ``` typescript /**  * some text  * @class Derp  */ export class Derp {     /**      * builds a new Derp      * @constructor      * @param {string} name - the name of the person      */     constructor(name: string) {         this.name = name;     } } ```  <sub><kbd>bar.ts</kbd></sub>  ``` typescript import { Derp } from './foo.ts';      //   ^   hovering shows ""some text""  const foobar = new Derp('rozzzly');                 //   ^    hovering shows ""builds a new Derp""  if (foobar instanceof Derp) {                   //   ^   hovering shows ""some text""     // ... } ```"
20590|@egamma @kieferrm @Tyriar I started a markdown extension last milestone and you can find it here: https://github.com/bpasero/vscode-markdown  It was created using the TM language from [1] and it leverages our virtual document preview support to show a preview. It depends on `markdown-it` [2] and `highlight.js` for the preview rendering.  There is functionality missing to make it a replacement of our markdown support: - we need to investigate how to support embedded languages in the markdown editor (not for the preview, this is for the source) so that code blocks get colored properly. according to @aeschli TM supports the notion of referencing other grammars from within a grammar. ideally we could reference our installed TM bundles for any code block that is being used in the markdown source - we need to change the extension to update the preview based on document edits so that the preview updates while the user is typing - we need to finish the CSS styling for the preview so that it is in sync with what we have today and also works in dark and light theme and any other theme from extensions (also depends on https://github.com/Microsoft/vscode/issues/5737) - we need to bring back the functionality that the preview scroll position stays stable when you make changes or even find a way to scroll the preview in sync with the editor scrolling (that would be a cool feature) - we currently do not have support to contribute actions to the context menu of the explorer or to the editor title area, but we have actions there to open a preview from a markdown file in both places and we also have an action to jump back to the source from a markdown preview - there is a setting in our markdown preview to configure a custom CSS style to use and this setting needs to be added to the extension too - anything labeled `markdown` [3] is something to revisit once we work on the extension  [1] https://github.com/textmate/markdown.tmbundle/blob/master/Syntaxes/Markdown.tmLanguage [2] https://github.com/markdown-it/markdown-it [3] https://github.com/Microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Amarkdown
20591|Intellisense, color schema and Emet already works in HTML, could you apply on template? For instance in Angular 2 if :  ```  template: `   `  ```  pattern is recognized everything inside of  `  `  should behave as HTML?
20592|@Tyriar any update on the current status? Thanks!
20593|@alexandrudima @jrieken I now instrumented the `configurationService` and the `extHostConfiguration` and built a Code version with it to understand the race condition a bit better. It turns out that in some cases an extension calls into [getConfiguration](https://github.com/Microsoft/vscode/blob/release/1.1/src/vs/workbench/api/node/extHostConfiguration.ts#L35) before [acceptConfiguration](https://github.com/Microsoft/vscode/blob/release/1.1/src/vs/workbench/api/node/extHostConfiguration.ts#L29) has been called on the extension host. There is a suspicious [early return](https://github.com/Microsoft/vscode/blob/release/1.1/src/vs/workbench/api/node/extHostConfiguration.ts#L37) in `getConfiguration()` that causes the reported exceptions. Since `undefined` is returned in this case, any extension will fail to use the configuration at all.  When I look into the implementation in version 1.0.0, I would argue that we have been lucky that the exception did not occur, because `_acceptConfigurationChanged` is only being [called](https://github.com/Microsoft/vscode/blob/release/1.0.0/src/vs/workbench/api/node/extHostConfiguration.ts#L91) after `_configurationService.loadConfiguration()`. This call can be long running if it is the first to load the configuration and only because other components have loaded the configuration earlier does it execute fast before the extensions are coming up.  I wonder if the fact that the configuration service was long running in 1.0.0 prevented the race condition because the `modeServiceImpl` did [call](https://github.com/Microsoft/vscode/blob/release/1.0.0/src/vs/editor/common/services/modeServiceImpl.ts#L560) `loadConfiguration` probably very early on and this was going to disk to look for settings. Meanwhile the extensions might have had enough time to be notified about the configuration from their `package.json`.  Again I would argue that no extension should get activated before all configurations have been synchronised to the extension host. We need to somehow flush the configuration to the extension host if possible.
20594|"I'm unable to help, but another +1000 from me. HTML/CSS/JS in PHP is common as a mixed file. I've tried full Visual Studio + VS.php - also not supported. I keep wondering why is this overlooked in every Microsoft development tool that supposedly supports PHP. Yes, PHP support is there, but is useless if we don't have IntelliSense (code completition & code suggestions) for HTML/CSS/JS as well.  Same goes for JS blocks & inline CSS in HTML. If I define in settings.json:  `""files.associations"": {""*.php"": ""html""},` ... than PHP IntelliSense (obviously) does not work, and HTML kicks in. But inline-CSS by using `style="" ...something... "";` does not offer any CSS properties when writing in between quotes of style attribute. Likewise, if I start a `<script>` block, you won't get IntelliSense for JS, while opening .js file reacts normally.  I do support suggestion that (if it's easier): - `<?php ... ?>` should start the PHP IntelliSense - outside `<?php ... ?>` should start HTML IntelliSense   but also - inside `<style> ... </style>` and `style="" .... ""` should start CSS IntelliSense - inside `<script ... >` and `<script> ... </script>` should start JS IntelliSense  Also, if possible, a suggestion by @TheColorRed should be considered, meaning if you are inside  `<?php ... ?>` but are writing a string eg `$string=""...""` than it should consider turning HTML IntelliSense as well. Thing is, PHP devs often use something like: `<?php` `$something=""test"";` `echo ""<div><a href=""http://sample.com"">This is a "".$something.""</a></div>"";` `$continue = ""coding here ... etc"";` `?>` ..  to avoid doing blocks with opening/closing php tags all the time, like: `<?php` `$something=""test""; ?>` `<div>` `<a href=""http://sample.com"">This is a <?php echo $something; ?></a>` `</div>` `<?php` `$continue = ""coding here ... etc"";` `?>`  Also @egamma , while we don't mean to sound ungrateful or lazy, smug comments don't do much help either, if one of us was competent and knowledgeable enough to code it ourselves - I'm sure we'd do it. Unfortunately - I am not :-/ But if I can help in any other way I'd be glad to (not just by commenting with suggestions, but testing, or whatever).  I hope that there IS a consensus that this feature should exist, and that current PHP support without it is only a partial support for the most PHP devs.  P.S. And again, not to sound as a critic - I really like VS Code so far, and am most thankful to everyone that contributed and keep contributing to this wonderful project!  EDIT: Would simply including/referencing one .ts file to another work? E.g. in /languages/php/common/php.ts include: /languages/html/common/html.ts include: /languages/css/common/css.ts include: ...  While there could be some overlap with the tag/attribute/function names nothing comes to my mind at the moment... And for IntelliSense it's non-issue I think as each would have different icon, only color coding could be messed in such cases... Am I missing something else?"
20595|"I have another issue with renaming symbols. Trying to refactor a class name in a Typescript file across a project, VSCode fails and alerts ""No result.""  ``` class MyClass extends AnotherClass {   constructor() {     super();   }    // ... } ```  <img width=""618"" alt=""screen shot 2016-05-05 at 12 05 36"" src=""https://cloud.githubusercontent.com/assets/2685357/15039988/ba5ab856-12b9-11e6-99d8-c1162bcc59ba.png"">  Edit: nevermind, solved it by adding a `tsconfig.json` to root project directory. Didn't know it had to be done 😝"
20596|+1 Would love support for ES7 too.  Maybe it has changed since last year and there are new ES7-related options available ?  For example new function bind `::` operator would be great.
20597|@Tyriar I think we are good, the extensions location can be set via `extensionHomePath`
20598|Interestingly I have seen this too on Windows when I try to build VS Code locally.   @fusion809 what node.js version are you running with?
20599|This is a bug in our markdown library (marked).
20600|"For anyone looking for a workaround in the meantime: `Ctrl-F` opens the same widget, but with the ""find"" field focused. You can also press `Ctrl-F` after you've opened the widget with `Ctrl-H` to shift the focus to ""find"""
