14801|The problem here is that the FS for Mac is case insensitive however the amd loader we use is case sensitive. I need to see if I can find the correct casing of the file and then use that one as the locale independent of the case on the command line or locale.json file.   We need to keep this case sensitive in terms of strings since the Linux file system is case sensitive.
14802|Can't repro myself anymore. These were instances that I left untouched, running over the weekend. The instances may have also been automatically restarted after a Code update although I don't remember. I'll pay more attention at the next update. If this happens again, I'll collect a memory dump.  Closing for now since I don't have more information and I can't repro this myself.
14803|@alexandrudima makes sense.
14804|I think it might be an issue with the documentation pointing people towards `mono-complete` when really it should be http://www.mono-project.com/download/
14805|This works for me on the upcoming Match drop ![bug](https://cloud.githubusercontent.com/assets/1931590/13932387/241042dc-efa8-11e5-8cb7-fb3643ff3ed7.gif)
14806|Verified with TS/JS formatter which creates these edits as well.
14807|"I implemented what I have observed in Visual Studio (which was pointed in this thread as a good implementation of column selection):  - Pressing Shift+Alt and then clicking will create a column selection anchored at the last cursor location going to the mouse location. - Clicking and then pressing Shift+Alt will create a column selection anchored at the click location going to the mouse location.  Regarding the default shortcuts, they would be better, but they conflict with other default shortcuts we have already shipped with and I cannot ""steal"" them without annoying existing folks used to them."
14808|@bpasero for the cases you reported I was able to track this down. The reason was a move of the tsconfig.json file from the src directory to its parent which included the server directory which has the tsserver in it a all the lib.*.d.ts files. (see your screen shot; all the errors point to the typescript extension server directory). I excluded the server directory from the tsconfig.json so you shouldn't see these errors again. I will close the issue since I could explain these errrors and fixed the tsconfig.json  @felixfbecker: I am against a clear errors action since something like that either points to setup problem or a bug in the tsserver. And this action would simply hide this.
14809|See https://github.com/Microsoft/vscode/issues/4206 for the casing details.
14810|"@jayrosen1576 He has edited his comment. If it had originally said ""pointless for me"" then of course I wouldn't have said what I did. I also presume that the two other people who downvoted his comment did so before he edited it.   I totally agree that everybody is entitled to an opinion, but there seem to be several people on here that don't require tabs in their workflow who are seeking to deny those who do want them by putting -1 or telling MS that the feature is not required or would in some way divert resources from more important features. Given that they can see how many people want tabs, I find this selfish and a little immature.  Anyway, I apologise if anybody saw this as a personal attack. I did put a smiley after it."
14811|The quick 'hack' fix for this is to uppercase the region (in this case cn) since we know the languages we ship. However in the mid/long term this might not work for other language since 'locale' identifiers can be more complex. (for example: zh-Hant-TW and de-CH-1901 is valid as well.). I didn't find any node API to get the casing of a file on disk. All we can do is to read the parent directory and compare. This shouldn't be too expensive since we read a directory with 18 items.
14812|Reproduce on Windows as well since Windows FS is case insensitive as well. If we fix this we need to retest #4206 on Linux.
14813|@alexandrudima, Oh, I see, we're discussing a slightly different feature than I thought. Visual Studio and Notepad++ also support Alt+drag to do a column select, which I often use. I think it would be a good feature to include in this story.
14814|For March, can we get comments and/or IntelliSense in the launch.json so that people don't accidentally get into this bad state?
14815|Yes but might be more work/code changes then fixing it. And we do have the --locale command line switch which is affected as well. I will see how open the team is and prepare different fixes so that we can discuss it in the team.
14816|vs code might be more excellent than any other
14817|"@factormystic VS Code supports one window and one extension host process per renderer:  ![2016-03-21 22-24-13](https://cloud.githubusercontent.com/assets/1898161/13934761/135989ec-efb4-11e5-8280-8561489365f6.png)  The VS Code debugger could easily manage multiple debug adapters, however they all would have to live in one window. Before going this route, we have would have to improve the UI support (multiple windows, etc.).  Supporting multiple debugger instances in separate windows by using multiple renderer processes is trivial. We would just have to remove one line of code. This will come next.  We are all using a single VS Code application with 4+ projects and 2 and 3 debuggers open. I don't view this setup as ""awkward"" as any other application with multiple windows.  Running multiple debuggers behind one renderer process makes sense if the debuggers are actually operating in a coordinated way, but currently they are not. So the advantage of this approach is more of theoretical value for now."
14818|@bpasero From what I can determine, it seems to correlate.
14819|@Alphapage so the name of the file is 'test.js!transpiled'? The reason that you cannot set breakpoints in that file, is that VS Code doesn't recognise it as a JavaScript file. In the latest (insiders) VS Code version (released today), you can add 'js!transpiled' in your workspace settings as another extension for JavaScript files. With this you should be able to set breakpoints in 'test.js!transpiled'.  Can you try to force systemjs to not produce inlined source maps? That would make debugging much easier. If not, could you make one of those 'test.js!transpiled' available so that I can investigate?
14820|+1 from me :)
14821|The test.js!transpiled is:  ``` js (function(System, SystemJS) {'use strict';  System.register(['./world.js'], function (_export, _context) {   var returnworld;   return {     setters: [function (_worldJs) {       returnworld = _worldJs.default;     }],     execute: function () {        console.log('running from source:hello ');       debugger;       // try{       console.log('running from source:hello ' + returnworld());       // }catch(e){console.log(e)}     }   }; }); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU87Ozs7QUFFUCxjQUFRLEdBQVIsQ0FBWSw0QkFBWjtBQUNBOztBQUVBLGNBQVEsR0FBUixDQUFZLCtCQUE2QixhQUE3QixDQUFaIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmV0dXJud29ybGQgZnJvbSAnLi93b3JsZC5qcydcclxuXHJcbmNvbnNvbGUubG9nKCdydW5uaW5nIGZyb20gc291cmNlOmhlbGxvICcpXHJcbmRlYnVnZ2VyIFxyXG4vLyB0cnl7XHJcbmNvbnNvbGUubG9nKCdydW5uaW5nIGZyb20gc291cmNlOmhlbGxvICcrcmV0dXJud29ybGQoKSlcclxuLy8gfWNhdGNoKGUpe2NvbnNvbGUubG9nKGUpfSJdfQ== })(System, System); ```
14822|How can I disable this Emmet feature or change the keybinding.  It is really bugging me.
14823|Everything on the surface looks ok. I have to remove #vscode from the FWLink and already made a PR for that. Waiting for next build so i can verify.
14824|"If anything I think this discussion just illustrates that there are many ways a developer can use an IDE and all of them are perfectly valid for their use case. There is no one ""right"" way and at the end of the day it's just a tool to get the job done. Some devs like tabs so they can arbitrarily group like files and others find a single MRU list perfectly adequate. Then you have those who just use notepad for everything and we're all a bunch of pansies ha-ha.   Seriously tho I just feel that since tabs have been an essential part of Visual Studio for pretty much ever, there are a lot of developers who have grown accustomed to their utility and therefore making the single MRU list optional (either opt-in or out) would make the already awesome tool that VS Code is even more versatile, for all."
14825|@aeschli I've already submitted pull requests there last week: atom/language-csharp#53 and atom/language-csharp#54. Would this still be useful to be merged?
14826|I already gave a thumbs on on the change being available in Insiders, but came back especially to call out the March 2016 release note content on this issue. Well writ, @egamma and @gregvanl. Thanks.  I'm full time on Insiders. It's looking good.  `javascript.validate.enable` was all I needed. Thanks for turning that around so fast.
14827|+1 it would be also nice to have ouput of `docker` containers onput related to current opened project code inside the editor, I think with terminal extension it could be achievable.
14828|oh - and FWIW, WebStorm allows me to navigate these files...
14829|looks good
14830|waiting for react native extension fix to be published...
14831|looks good!
14832|@nub340 exactly! some of us like tabs because they were always part of our experience as developers/users, personally I like to see the files that I'm working on at the top, there's no inherent advantage to tabs over working files but that's just how some of us like it.
14833|I verified on other system and looks like I was not opening the correct mapped folder. No action needed. Closing this issue.
14834|@Tyriar Fixed. Thanks for responding :smile:
14835|I am experiencing this issue as well. Also, the block cursor doesn't have any transparency. Meaning you can't see the character under the cursor until you move the cursor off of that character. Ideally it should show the character underneath the block cursor and any selections made with a block mode cursor should definitely include the character under the cursor.
14836|Open Command Palette (`Ctrl/Cmd + Shift + P`)  ![1](https://cloud.githubusercontent.com/assets/7069719/13939898/d63ae492-f013-11e5-8ef6-81937b884535.png)
14837|"here's my tsconfig.json  ``` {     ""compilerOptions"": {         ""target"": ""es5"",         ""module"": ""commonjs"",         ""noImplicitAny"": false,         ""removeComments"": true,         ""noLib"": false,         ""preserveConstEnums"": true,         ""declaration"": false,         ""suppressImplicitAnyIndexErrors"": true,         ""jsx"": ""react"",         ""sourceMap"": true     },     ""filesGlob"": [         ""./src/**/*.ts"",         ""./src/**/*.tsx"",         ""!./node_modules/**""     ],     ""files"": [         ""./src/main.tsx"",         ""./typings/main.d.ts""     ] } ```  and if I type   > tsc --outDir ./temp   there's no error and the temp folder contains compiled js files. however vscode remains the same, saying cannot find module. I had to close vscode and open it again (v0.10.11 on Mac 10.10.5) hope these info helps"
14838|Wouldn't it be great to be able to set a standard key binding profile without having to construct it by editing `keybindings.json` - that's quite hard and tedious. `keybindings.json` would still override the defaults in the profile. So VSCode could ship with a Visual Studio key binding in the box for people to simply select. That'd allow you to modify that profile with the sole argument that it aligns with Visual Studio.
14839|awesome! :tada: thanks @f111fei
14840|Agreed, I would like it as an option, not force it. On Tue, Mar 22, 2016 at 6:22 AM Eyal Solnik notifications@github.com wrote:  > @nub340 https://github.com/nub340 exactly! some of us like tabs because > they were always part our experience as developers/users, personally I like > to see the files that I'm working on at the top, there's no inherent > advantage to tabs over working files but that's just how some of us like it. >  > — > You are receiving this because you commented. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-199565160
14841|@dbaeumer great, thanks a lot, will see how it goes!
14842|Ok, let's reopen when you see it again.
14843|@mysticatea would you be able to share this folder with me?
14844|Closing, as the numbers do not show any slowdown.
14845|(1) auto detect is just doing what the editor does by checking for the file extension and taking whatever is configured. since this is in no way a smart feature I am fine to remove it  (2) I think (3) would solve this  (3) we are currently not able to write to the settings file because the file is user edited and may contain comments, but I agree this would be nice
14846|Found the issue: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/node/fileService.ts#L709
14847|Maybe at least do the nls change for March, I think that is low risk and helpful.
14848|Can reproduce and will investigate if this is a regression.
14849|This issue is likely my number one annoyance with VS Code at the moment. When I get to the end of a comment line and press enter to go to the next line, half the time I end up picking an auto-complete entry instead. I notice this issue is tagged PHP, but please fix it for all languages, not just PHP (I don't even use VS Code for PHP).
14850|Not a regression, this happens because in fileService we first delete the file and then try to copy it, but delete removes the contents. Need to check in the copy-function that the path is really the same.
14851|Key binding schemes would be great as extensions. Might be able to do that now by modifying the current key bindings, but it would be better to modify the underlying defaults like @ericwj described. Just need factory defaults to take back over when the extension is uninstalled.
14852|Thank you!  I'm sorry, I cannot share that folder since some reasons. But fortunately, after I modified [fileService.ts#L709](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/node/fileService.ts#L709) with `$this` (`f` in minified code), this issue was fixed.  VSCode seemed to try to open a removed junction folder (I had opened the folder before) when it was running on fileService.ts#L709.
14853|Thanks, we can fix this without further help. For now you will have to use the stable version at least on that folder.
14854|Yes, I'll still merge your pull request, we will profit from the Razor fix. I just have to wait until we are done with the March endgame. The CSharp extension including the grammar is now managed at https://github.com/atom/language-csharp. I suggest we file a bug there to ask them to pick up the latest csharp grammar to include your fixes there.
14855|We didn't have tabs on the Vic-20....  One thing that comes out of this discussion is that whatever is (made) available, it should be customisable.
14856|Same issue here; on all my workspaces. Is this issue there for a lot of people? Might want to create a new insider build if that is the case to get feedback. **edit** a fixed it - guess it is not a really common issue.
14857|@glennblock, @leegee yeah it should definitely be an option but shouldn't the working file get the same treatment for these who don't want it? however, it's probably best to discuss it in another feature request. :)
14858|> Can we at least provide IntelliSense for locale.json so I know which languages I can pick from and the proper format.  Suggest to just add fwlink in the comment that points to the doc page with the supported locales: ![image](https://cloud.githubusercontent.com/assets/172399/13945012/57fc417e-f00a-11e5-8c0f-1e5212ebb0a4.png)
14859|@pflannery this is more @joaomoreno's area, but powershell isn't built into older versions of Windows like 7 is it?
14860|You're right, it's an upstream issue. Reported http://crbug.com/596804
14861|Hi **@con-ssc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
14862|This issue was moved to OmniSharp/omnisharp-vscode#117
14863|:+1:
14864|This issue was moved to Microsoft/TypeScript#7631
14865|fyi @aeschli @alexandrudima
14866|**@con-ssc**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
14867|**@con-ssc**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
14868|This issue was moved to Microsoft/TypeScript#7632
14869|@squarerootfury maybe there is a delete file event being sent for some reason. Can you run `code --verbose` and look at the output in the developer console for file events when this happens?
14870|"Possibly a duplicate of https://github.com/Microsoft/vscode/issues/4536 ?  @v-pavanp having a hard time to reproduce, are you able to ""break on error"" in the developer console and try again? can you send me the workspace where this happens?"
14871|"Possibly a duplicate of https://github.com/Microsoft/vscode/issues/4526 ?  @v-pavanp having a hard time to reproduce, are you able to ""break on error"" in the developer console and try again? can you send me the workspace where this happens?"
14872|+1
14873|I think the problem arises in vscode because of .js!transpiled extension which is not recognized for now. I think vscode will behave like chrome devtools after this update, so this is a great news. The breakpoints are never hit in both vscode and chrome devtools because of nodejs debugger limitations in my opinion which only breaks on `debugger;`. That's why I'm asking for a way to list the in code `debugger;` and even have the ability to insert/delete `debugger;` when I click on a line in the document (asking me something like: Do you want to insert a breakpoint or a `debugger;` inside the code ?)
14874|@bpasero If I do `Ctrl+Shift+P > Close File` after having opened lib.d.ts file, SVG symbols do not show up anymore.
14875|VS Code prints following output to the console, seems to be nothing suspicous.  ``` ### VSCode main.js ### /home/sqf/Downloads/VSCode-linux-x64/resources/app { pathArguments: [],   programStart: 0,   workers: -1,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   pluginHomePath: undefined,   pluginDevelopmentPath: undefined,   pluginTestsPath: undefined,   disablePlugins: false,   locale: undefined } Lifecycle#unload() 1 IPC#vscode-workbenchLoaded  ```  And here is the developer console output, VS Code seems to throw a deletion event.  ``` Service Library: Watcher] [CHANGED] /run/user/1000/gvfs/sftp:host=host.tld,user=srf/path.file service.cp.ts:140[Service Library: Watcher]  >> normalized [CHANGED] /run/user/1000/gvfs/sftp:host=host.tld,user=srf/path.file service.cp.ts:140[Service Library: Watcher] [DELETED] /run/user/1000/gvfs/sftp:host=host.tld,user=srf/path.file service.cp.ts:140[Service Library: Watcher]  >> normalized [DELETED] /run/user/1000/gvfs/sftp:host=host.tld,user=srf/path.file ```
14876|Please refer : # https://github.com/Microsoft/vscode-eslint/issues/57
14877|@warpdesign that is good, the question is how lib.d.ts ended up in there in the first place. I assume you never opened it. Do you maybe have a jsconfig.json or tsconfig.json that includes a folder with lib.d.ts?
14878|@squarerootfury that is an interesting path, can you attach a screenshot how the explorer looks like?
14879|@bpasero sorry, I forgot that I had to censor the paths and filenames, because it contained the FQDN.
14880|@bpasero I never opened it. I don't think I have jsconfig.json/tsconfig.json files either: where should I find these files ?
14881|@squarerootfury sure. so there is a file delete event and so it is expected that vs code as a result, removes the file from the working files section and closes it because it thinks it was deleted. any idea who deletes this file? does it come back later?
14882|"@Alphapage ""breakpoints are never hit in both vscode ... because of nodejs debugger limitations"" is a speculation. I would like to understand whether this is really true.  You are saying that breakpoints don't work for the snippet both in Chrome dev tools **and** VS Code. For Chrome dev tools the snippet has to run in the browser. For VS Code the snippet has to run in node.js. How are you able to run the snippet in these different setups?    Adding support for manipulating ""debugger;"" statements is a workaround. I don't see this as a feature of the base product, but more like an extension."
14883|@warpdesign ok lets keep an eye on this, if you ever see symbols from lib.d.ts again without having this file opened, I suggest you file a bug.   @dbaeumer fyi this seems similar to the issue that I saw with getting errors/warnings from lib.t.s in selfhost.
14884|I'm using node-inspector for chrome devtools. Do you want a sample project ?
14885|a workaround would be to use `extensionPath` https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2672
14886|Thanks for the PR and thanks for the effort that went into it. I am sorry to say that we do not accept PRs that make style changes across the project. Varying import-syntaxes aren't against our [code guidelines](https://github.com/Microsoft/vscode/wiki/Coding-Guidelines) and freedom of the respective area owners. Also, managing large PRs that affect code from multiple owners hasn't proven to be useful.
14887|Ok, no problem. I will then just delete that branch ☺ Just thought it would be nice to have.  Von: Johannes Rieken [mailto:notifications@github.com] Gesendet: Dienstag, 22. März 2016 11:20 An: Microsoft/vscode vscode@noreply.github.com Cc: Stefan Schneider Stefan.Schneider@connectiv.de Betreff: Re: [vscode] Try to unify import statements (#4546)  Thanks for the PR and thanks for the effort that went into it. I am sorry to say that we do not accept PR that make style changes across the project. Varying import-syntaxes aren't against our code guidelineshttps://github.com/Microsoft/vscode/wiki/Coding-Guidelines and freedom of the respective area owners. Also, managing large PRs that affect code from multiple owners hasn't proven to be useful.  — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/pull/4546#issuecomment-199737316
14888|LGTM
14889|Thanks for understanding
14890|I can give it a try.
14891|"@Alphapage yes, a sample project would be great!  I don't understand ""node-inspector for chrome devtools"". ""node-inspector"" is an alternative to VS Code node debugging. ""Chrome devtools"" is for debugging JavaScript in the browser. How is one related to the other?"
14892|The file isn't really deleted, it exists the complete time. Do you think this could be more a gvfs related problem than a VS Code one?
14893|Fixing wise I came up with the following: locale tags are case insensitive. So we will always generate message bundles with lower case locale tags and will convert the locale specified by the user to lower case as well. This makes it work on all platforms even with a case sensitive loader.
14894|This is the forward link http://go.microsoft.com/fwlink/?LinkId=761051
14895|Test fail because the `triggerCharacter` constraint is now mandatory
14896|closing this as dupe of https://github.com/OmniSharp/omnisharp-vscode/issues/116
14897|I see the localization is now released in insiders channel, how can we contribute to other languages?
14898|@squarerootfury well, it could be that or an issue with our file watching library. something makes the library think that the file is deleted. are you sure there are no further events when this happens?  One theory I have is maybe that the order of events is flipped: E.g. I see a change followed by a delete. Some editors (like Sublime) tend to first delete the file and then change it, and the library's job is to normalize those events to a simple change event.
14899|:-1: [0.12 is not even LTS now](https://nodejs.org/en/). We should stop supporting it.
14900|@weinand I am not able to open an external console when debugging python, is it true that the extension writer has to implement this? because I see it working for node.js
