2501|This issue was moved to Microsoft/vscode-node-debug#17
2502|With our next release, you will be able to run the setup with the additional argument `/mergetasks=!runcode` which will skip the running of Code at the end of the setup.
2503|That is awesome @joaomoreno! :open_mouth:
2504|I understand, since we always translate the untitled scheme to something the internals call 'hasResourcePath' we are fine with just signalling dirty from start.
2505|@bpasero wrt the save-behaviour you describe I believe the code lives in the wrong location. It sits all in the [save-action](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/fileActions.ts#L1511) instead of being part of the service. Given that I see no way reusing the code (getting the same sequence of events). Why doesn't the `save`-function do the trickery of closing the source and reloading and why doesn't the editor service listen to dispose such that it can reopen?
2506|+1
2507|Duplicate of #155  We will only support the `http.proxyStrictSSL`, not adding certificates to the trusted list.
2508|Fix will only come at the end of December.
2509|:tada:
2510|I'm having the same problem. It happens only on directories that are 4th level or deeper. If I move the file up one directory, the error goes away.
2511|ok. I will fix the doc
2512|@jrieken whats the scenario? can you not trigger the same save action?
2513|+1
2514|ah, I didn't realise you need to have everything with a `.d.ts`. All sorted and now it's on the marketplace - https://marketplace.visualstudio.com/items/aaronpowell.vscode-espruino (although I'm not sure it'll be installable for anyone else yet).  Is there any way (easy or ugly) to work out the version of Electron when installing a plugin?
2515|Can you please provide more details? Please give an example on what you type and what you expect to be automatically added. For html we have two ways of creating closing tags: - type `</` and do intellisense - type the tag name (e.g. `div`) and press `tab`. This completes to `<div></div>`
2516|@dstorey Thanks a lot for the comment and the interesting insights. I would say we treat IE and Edge as one browser, as well as Chrome and Opera. Ok for you? Is Safari very different from Chrome? So in the end it would just be about Chrome/Opera/Safari, IE/Edge and Firefox.  I'm also fine to be flexible and make exceptions if there are good arguments that user will profit.
2517|Fix delivered, thanks @MattTalbot !
2518|Btw, it's reproducible in my current session, steps: 1. Save 2. Click (focus) current file content.  Also, I checked this bug without extensions - bug not appears. It only happens with parinfer extension I use. Not sure it's parinfer or vscode bug, but think it's vscode.  Vscode version: 0.10.3 Parinfer ext: https://github.com/Microsoft/vscode-parinfer file content: https://gist.github.com/narma/eefd7f2e3ead8bd57174
2519|WebKit and Blink have diverged a decent amount at this point, so I don't think Safari should be lumped with Chromium.
2520|Also, this was both on 0.10.2 and 0.10.3.
2521|Yeah, I am in [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/common/pluginHostDocuments.ts#L634) and have a service on which I call save. Calling an action doesn't seem like the right thing
2522|@BleyChen here is an example:  http://stackoverflow.com/a/7971584
2523|@weeblr Try `editor.wrappingColumn = 0`
2524|Sorry, my bad, didn't read the comment :(
2525|@alexandrudima in fact, it's detecting the file as Javascript :worried:  Here's the full screenshot. ![capture](https://cloud.githubusercontent.com/assets/5412470/11531744/ac36fe66-98c4-11e5-81d7-0ef0677b7063.PNG)
2526|I tried just to put a new line at the top of the file and the editor is now detecting the file as TypeScript. ![screenshot 1](https://cloud.githubusercontent.com/assets/5412470/11531944/1f812fbc-98c6-11e5-85c6-45adaf55dd69.png)  But it's causing the compiler to complain. ![capture](https://cloud.githubusercontent.com/assets/5412470/11531958/30959af4-98c6-11e5-945d-9151d72c26fc.PNG)
2527|+1, if jsconfig could be defined in the user config, or something else globally, will be very useful. I have several es6 projects, inside different folders with a lot of other projects, result of I have to open the root folder with thousands of files, result of the code completion, code snippets, etc is unusable.
2528|voila: src\vs\languages\javascript\common\javascriptWorker.ts
2529|cc @joaomoreno
2530|A first version of coreclr debugging was presented at the Connect() event, a first version will be available in the first quarter.
2531|This issue was moved to atom/language-csharp#43
2532|@jrieken I see, so the issue is only for untitled files the behavior is different from the global save action. it does not impact normal files right?
2533|![image](https://cloud.githubusercontent.com/assets/6461412/11533565/b670b30e-990a-11e5-8f35-42c6b7aa6cd4.png)
2534|duplicate of #881
2535|Fix delivered
2536|This issue was moved to atom/language-csharp#44
2537|correct @bpasero I like to get the behaviour you have described earlier by calling `save`. [That](https://github.com/Microsoft/vscode/blob/master/extensions/vscode-api-tests/src/workspace.test.ts#L52) test-case describes what I would like to have in the end
2538|Problem is the new 1.7 TS which has a different message for watching.  Duplicates #918
2539|@Wenzil you need to configure eslint using a .eslintrc file. See http://eslint.org/docs/user-guide/configuring for details.
2540|@BleyChen In what line do I have to set a breakpoint? (Breakpoints are not stored in your zipped workspace). Do I have to step through the code?
2541|Regarding the suggested options:  > Not show any commands that are registered but not listed as activation events to the user  To not show a contribution when it is declared in the package.json when there is no activation event is problematic. Since in this case the developer gets no feedback that something is wrong. It will be difficult to debug why an extension doesn't show up in the command palette. It is better to show an error with a hint how to fix the problem, than to silently fail.  > Automatically treat every registered command as an implicit activation event.  We did this earlier and we got feedback from internal users that this is inconsistent and confusing. For this reason we now require that the user explicitly declares the activation event.
2542|@dbaeumer Ok, but what settings do I need to change? I already have a `.eslintrc` file, and the `es6` env setting is enabled.   Thanks!
2543|Yes that is true.
2544|@Tyriar regarding  > For future reference, Is it documented somewhere what the common directory name means?  The best we can offer for now is: https://github.com/Microsoft/vscode/wiki/Code-Organization
2545|@Kurtz1993  See https://github.com/Microsoft/TypeScript/issues/2749. shebang is only supported on the first line.
2546|Assigning issue to @bpasero since the wrong detection has to be fixed in the workbench.
2547|Thank you for the aclaration @dbaeumer So, it's just the shebang in the frist line causing the editor to treat the file as Javascript instead of TypeScript.
2548|@jrieken ok I can look into it. I think I would create a new issue for it though because the original issue from the author is fixed, right?
2549|@Kurtz1993 yes, the workaround is to not use shebangs.
2550|@ucnc testing with with a 'plain' VSCode doesn't show any wired behavior nor output written to the log.
2551|I'm an idiot. I just had to enable the specific ES6 features individually in `.eslintrc`. Thank you :)
2552|"@Bartmax This is just the native error from node, not sure what we can do here. Could it be that the file has the ""hidden"" flag set on Windows? We cannot save files that are hidden. I assume it is that."
2553|For TS files you either need a tsconfig.json file or use /// reference imports. See https://code.visualstudio.com/docs/languages/typescript
2554|Oh yes. It was because of a hidden attribute. Didn't know code can't save hidden files. Thanks.
2555|The `parinfer` extension will always provide the buffer to the parinfer lib, which will return what the buffer should look like. It can be that parinfer returns exactly the same text as it was given. But the extension will simply make the text edit no matter what.  @bpasero should the extension not replace the text if it detects it hasn't changed, or should we finally implement content equals? You could be smart (good luck) and first compare the length and only then run it through a fast hashing function to compare contents and figure out whether the buffer has really changed.
2556|@kitsonk did you configure VSCode to use the install typescript using typescript.tsdk. And is the code public somewhere so that I can try to reproduce?
2557|I hate it too, will address it asap. Duplicate of #439.
2558|You must always compile it against the version of Electron that VSCode depends on, considering the VSCode version you're targeting. So, for VSCode 0.10.3 it is Electron [0.34.1](https://github.com/Microsoft/vscode/blob/0.10.3/package.json#L4).
2559|Don't think it is related, this user is not merging/rebasing.
2560|Awesome, adopted in the test scripts in a436a25.
2561|"Besides setting isWatching to true you need to tell the problem matcher when a watch runs begins and when it ends. To do so you can add a watching property to the problem matcher. For TypeScript this looks like this:  ``` watching: {     activeOnStart: true,     beginsPattern: { regexp: /^\s*(?:message TS6032:|\d{1,2}:\d{1,2}:\d{1,2} (?:AM|PM) -) File change detected\. Starting incremental compilation\.\.\./ },     endsPattern: { regexp: /^\s*(?:message TS6042:|\d{1,2}:\d{1,2}:\d{1,2} (?:AM|PM) -) Compilation complete\. Watching for file changes\./ } } ```  which then treats output from the tsc compiler when run in watch mode:  message TS6042: Compilation complete. Watching for file changes. message TS6032: File change detected. Starting incremental compilation... extension.ts(21,2): error TS2304: Cannot find name 'xx'. message TS6042: Compilation complete. Watching for file changes.  The task system assumes that a compiler generates all errors for every triggered compile. So if a file A has an error and a watch trigger the compile and the compiler doesn't generate an error on A the error gets removed from the system."
2562|I didn't know you could just type the name of the tag it auto creates both opening and closing tags. It would be nice to also type `<div` and press <kbd>tab</kbd> or <kbd>enter</kbd> and have the same effect.
2563|I think its a fair bug, I opened https://github.com/Microsoft/vscode/issues/931
2564|+1 -- the lack of wrapping and horizontal scrolling is very irritating.
2565|Thanks a lot, @Tyriar, great contribution!  I'll work on getting the W3C attribution to the source file as well as in the product.
2566|Ok this explains it. Nice idea, but not really a bug I would say.
2567|thanks! :D
2568|"> did you configure VSCode to use the install typescript using typescript.tsdk  I am not sure what you are referring to.  In all cases I have been using `npm` to install TypeScript and exiting and launch VSCode before and after the install.  I have moved back and forth from 1.6.2 to 1.7.3 a few times.  I am on OSX.  I have installed the `tslint` plugin as well.  Other than that, it is a vanilla VSCode install.  My user settings are:  ``` json {     ""editor.fontFamily"": ""Hack"",     ""editor.glyphMargin"": true,     ""editor.tabSize"": 4,     ""editor.formatOnType"": true,     ""editor.renderWhitespace"": true,     ""editor.wrappingColumn"": 0 } ```  > And is the code public somewhere so that I can try to reproduce?  Yes, it is available at [kitsonk/actions](https://github.com/kitsonk/actions).  It should be fairly straight forward:  ``` sh git https://github.com/kitsonk/actions.git cd actions vi package.json npm install code . ```"
2569|Yes, filter like the one below works fine: `vscode.DocumentFilter = { language: 'yaml', scheme: 'file', pattern: '**/docker-compose*.yml' };`  However, if I try to use a filter for Dockerfile - e.g. `**/dockerfile*`, it does not work.
2570|Fix delivered
2571|Fixed by #730
2572|Can you try to uninstall `tslint` and reproduce the problem, this helps us narrow down the issue.
2573|Oh snap. Good call--that did the job. :+1:
2574|Yup, that was it...  Removed `tslint` restarted VSC, migrated back to TypeScript 1.7.2 for the project, restarted VSC, no error...  Installed `tslint` 0.5.1, restarted VSC, issue returned.  How best to report issues with extensions?
2575|@jwulf What do the squiggles message read when you hit F8 to jump to them? Also, do you have some JS linter installed?
2576|Report the issue against microsoft/vscode-tslint please.  Am 02.12.2015 um 18:00 schrieb Kitson Kelly <notifications@github.com<mailto:notifications@github.com>>:  Yup, that was it... Removed tslint restarted VSC, migrated back to TypeScript 1.7.2 for the project, restarted VSC, no error... Installed tslint 0.5.1, restarted VSC, issue returned.  How best to report issues with extensions?  ##   Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/921#issuecomment-161364633.
2577|I'd say that's because `somepath/dockerfile` doesn't match the pattern `**/docker-compose*.yml` or am I missing something?  The properties of the document filter must all match so that the filter matches (logical AND). You can either change the pattern (maybe `**/docker*.yml`) or use make up the selector from an array of two filers like `[{pattern: '**docker-compose*.yml'}, { pattern: '**/dockerfile*}]` because then just one must match (logical OR)
2578|@bpasero You decide but I would be awesome if it happens in December. It's quite a big one...
2579|We actually fixed that now
2580|@joaomoreno Let's keep this in mind as well
2581|Yes, I know it doesn't - I have a separate document filter that's for dockerfile only and its pattern is `'**/dockerfile*` and files like dockerfile, blah/dockerfile-dev, etc. are _not_ recognized by the pattern.
2582|Check the file here: https://github.com/Microsoft/vscode-docker/blob/master/dockerExtension.ts. If I add the pattern to `const DOCKERFILE_MODE_ID: vscode.DocumentFilter = { language: 'dockerfile', scheme: 'file' };`, dockerfiles are not recognized.
2583|As we get to work on improving the Intellisense design I thought it would be worth going into detail about the two important scenarios that we use to drive our design.  There are a lot of components that contribute to the overall experience that a developer has with Intellisense in VS Code (and other editors for that matter). One tool we use to help us keep track of how those components work together is to design them in the context of the core scenarios in which they will be used.  For intellisense, we have two main scenarios that we use to drive the design. We call these scenarios the 'Red zone' and the 'Green zone' scenarios.  ## Scenarios  ### Red zone  In the Red zone scenario, a developer has a task that they need to perform but they don't know what API they need to use to get that task done. For example, they might need to write a line of text to a text file but they don't know what classes or methods they should use to do this. In this scenario, the developer uses Intellisense to discover what classes and methods are available to them. They browse through the suggestion list, looking for methods, classes, namespaces etc that, according to their name, might be relevant to the task. When they find a candidate, they take advantage of the way that Intellisense displays doc comments and other documentation to learn more and to decide whether or not to try the API.  ### Green zone  In the Green zone scenario, a developer has a task that they need to perform and they know exactly how to do it. In this scenario, the developer uses Intellisense as a shortcut to writing the code. With the suggestion list open they type a couple of characters of text which quickly highlights the class/method/namespace that they want to use. They then press TAB or whatever the autocomplete key is which inserts text in the editor to complete the selected item.  ### Comparison...  In the Red zone the developer uses Intellisense to help them discover which APIs to use. They take advantage of different UI affordances to help them easily learn how to complete their task.  In the Green zone the developer uses Intellisense to be productive and takes advantage of different UI affordances that allow them to stay focused on the code that they are writing and not be distracted by any other extraneous UI or information.  ## Next steps  As we work on the design proposal to improve Intellisense in VS Code we will be using both of these scenarios to make sure that we make great design decisions. We want to make sure that any design we come up with allows developers in the red zone and in the green zone to have a great experience.  We will also be gathering feedback from people about our design proposals as we work on them. Let me know if you would like to take part in these feedback sessions.
2584|I'm looking into this with the team and will keep you guys updated :).  Thanks for the idea!
2585|In general, the intuitive way of typing is when you type `<` then intellisense suggests some examples and when I select it hitting <kbd>enter</kbd> it must auto-complete to full tag: example I typed `<` and from the intellisense hints selected `div` currently when i hit  <kbd>enter</kbd> it looks like `<div` but must look like `<div></div>` and when I edit the opening tag to `p` would be nice if it will automatically change the closing tag to `p` so it will look like `<p></p>` and not `<p></div>` and one more case of auto-complete is when i have `<div` and when i close the tag: `<div>` it MUST automatically add the closing tag: `<div></div>`  for special cases like `input` or `link` it can do nothing or if it is possible it can replace the closing tag to `/>`
2586|Ok: https://github.com/Microsoft/vscode/issues/939
2587|Ported, thanks.
2588|I would add that there is also a Yellow Zone which I commonly use. In this scenario I am looking for methods that I personally wrote (C# in Visual Studio.) However, I've been working on the same project for 4 years straight, so my code base is quite huge. Because of this, I will look for a method with a good idea of which method I want to use, but may not be 100% sure. So I start typing and get down to a few possible methods in the intellisense window, now I need to be able to see my documentation (comments) about the methods in a nice format so I can quickly remember exactly what the method does. The structure of the comments that I'm reading needs to be in the format I specified (line breaks included) and its immensely helpful for the method signature (name, params, returns) to use syntax highlighting to allow me to quickly grab key information about the method. The importance of this yellow zone is that I need to be able to view all of the documentation about the method (not just part of it), and I need that documentation to be in its intended structure (for C# - this includes `<para/>` line breaks, for JavaScript (jsDoc) I want the original formatting of the comments _(try [this demo](http://sevin7676.github.io/Ace.Tern/demo.html#javascript) for jsDoc example)_.  Example of yellow zone usage in Visual Studio:  ![image](https://cloud.githubusercontent.com/assets/5360920/11541523/a97b1e6e-9900-11e5-89ab-37051b1e896c.png)
2589|I tried it in Visual Studio... it just hangs and displays (Not Responding).  Eventually it opens to the default folder %USER%\Visual Studio 2015\Projects.    It's not a big issue, however because it tries to open the files again on startup, it takes a while before the application is displayed.  Again, it's not a big deal, just wanted to make you guys aware.  I'll just need to be sure to close the files and folder before exiting or turn that setting off :-).
2590|This seems to be a problem with our glob matcher
2591|@jrieken I don't see how a pattern of `**/dockerfile*` can match a file `docker-compose-dev.yml`?
2592|@alexandrudima I am open for ideas how to fix this. I don't have a straight forward idea in mind. What we actually want is that the TS contribution overrides the JS contribution but only in this specific case. It almost seems we have to introduce a weight property when contributing patterns for a language?
2593|I am not trying to match docker file to the docker compose pattern. Check the source file I referenced above.
2594|Sorry, I am not getting it. Can you point to the exact line in that file?
2595|For docker-compose files I am using the pattern below. This works fine.  Line 20:   `const YAML_MODE_ID: vscode.DocumentFilter = { language: 'yaml', scheme: 'file', pattern: '**/docker-compose*.yml' };`  I was trying to use the pattern `**/dockerfile*` and put it in line 15: `const DOCKERFILE_MODE_ID: vscode.DocumentFilter = { language: 'dockerfile', scheme: 'file' };`  However, using the pattern `**/dockerfile*` in line 15 for the dockerfile does not work.
2596|@PeterJausovec please confirm these steps and will in the uri of your document - have a document selector like this `{ language: 'dockerfile', scheme: 'file', pattern: '**/dockerfile*'}` - have a `TextDocument` with a `uri` **????** - -> selector doesn't match?
2597|I added this: `vscode.DocumentFilter = { language: 'dockerfile', scheme: 'file', pattern: '**/dockerfile*' };`, I open a file named `Dockerfile` - I get syntax coloring and all works good.   If I open a file named `DockerfileBlah` or `Dockerfile.test` I do not get any syntax coloring.
2598|so it does seems to be glob related. please try using just this `vscode.DocumentFilter = { pattern: '**/dockerfile*' }`
2599|I tried `const DOCKERFILE_MODE_ID: vscode.DocumentFilter = { pattern: '**/dockerfile*' };` and I get the exact same behavior: file named `Dockerfile` works, but `DockerfileTest` doesn't.
2600|ok. thanks for the heads-up
