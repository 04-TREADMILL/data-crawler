16501|I will do.
16502|Yes, it could be something like that. The only idea I have is to explicitly exclude the workspace folder from file watching (though that can cause other issues): Open settings and find the `files.watcherExclude` setting and fill in something like:  `files.watcherExclude: <path to workspace>: true`
16503|nope. I even tried running the [March Insiders Release](https://code.visualstudio.com/Download#insiders) this morning. Still the same thing. It doesn't render anything.
16504|_I posted this in another suggestion but maybe this is a better place to post it so here it goes:_  I'd **really** want to have is a Console that I can use to install extensions, install nuget packages, install npm packages or another kind of packages and the only thing it needs is Intellisense for packages but yeah definitely unified experience for installing packages.  Instead of tackling specific problems, I'd argue that a much better design is to let programmers handle it and what I mean by that is creating a Console that is extensible and is designed for installing packages, whatever the package might be, VSCode extensions, nuget, bower, npm, you name it.  **Just to be clear**, I mostly suggest the experience of the Package Manager Console available in Visual Stuidio to Visual Studio Code but taking it few steps farther.
16505|PE does lock the new version (v0.10.14-insider) but not the stable version. I have no idea why...
16506|I have summarized some of the issues (beyond background color) that make difficult to read tooltips in #4884.
16507|I can't seem to find that setting, is that a setting that isn't in 0.10.11? I went to File -> Preferences ->  User Settings, and also Workspace Settings.   What are the expected issues you can run into when excluding the workspace folder?  I appreciate the help and you looking into it.
16508|double check with @egamma as he does most of the wiki edits.  we will need to update the wiki to point to the appropriate folder.  also, should we call it the `/wiki` folder instead of `/docs`, to avoid confusion with `vscode-docs` repo?
16509|I propose the following args:  ``` # Install code --install-ext=ms-vscode.csharp code -i ms-vscode.csharp  # Uninstall code --uninstall-ext=ms-vscode.csharp code -u ms-vscode.csharp  # List installed extensions code --list-ext ```  With the `--list-ext` arg returning a flat list of extension aliases:  ``` $ code --list-ext donjayamanne.python lukehoban.Go ms-vscode.csharp ```
16510|Closing in favor of https://github.com/Microsoft/vscode/issues/4884
16511|@cadupedroni what happens when you run it?
16512|You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
16513|Sorry, out of ideas. @joaomoreno maybe more ideas?
16514|"The VSCode Insiders he shows at the top of the screen but then immediately closes.  One difference I found on now was in the folder that it creates within ~/Library/""Application Support""/Code - Insiders, have the following structure:   DevTools Extensions - file with just [] User - folder empty   In the same folder structure of the stable version of the VSCode has the following structure:  Devtools Extensions - file GPUCache - folder Local Storage - folder User - folder storage.json"
16515|Setting the workspace setting does seem to work, and prevents the documents from closing.  I'm still curious what else (besides the git integration) might be affected by turning this off?
16516|@Tyriar I'd go with either one of these but the POSIX/GNU**+** style is more appealing to me.  PowerShell style.  ``` # Install code install-extension ms-vscode.csharp  # Uninstall code uninstall-extension ms-vscode.csharp  # List installed extensions code get-extension ```  POSIX/GNU**+** style.  ``` # Install code extension --install ms-vscode.csharp code ext -i ms-vscode.csharp  # Uninstall code extension --uninstall ms-vscode.csharp code ext -u ms-vscode.csharp  # List installed extensions code extension --list code ext -ls  ```  **+** This is more the git style than _real_ POSIX/GNU conventions but it looks good.
16517|"Sorry, @isidorn, I forgot to mention you in the last comment I added. Having something that says ""Thread {name}"" might work. Another option would be to have an arrow or special highlighting that indicates the current thread. Also, to auto expand the thread that is currently being debugged (e.g. the last one paused)."
16518|@delmyers you do not have to mention, I am always subscribed to issues I am interested in and I get notificatinos even if you do not mention me.
16519|Does it happen if you download it and extract it again?  What application do you use for extracting?  What output do you get when running straight from the terminal?  ``` /Applications/Visual\ Studio\ Code\ -\ Insiders.app/Contents/MacOS/Electron ```  cc @bpasero
16520|Did it use to work at any point in time? Either stable or insiders? Any old version?
16521|it never worked for me.
16522|Thank you very much! Now worked perfectly.  The problem is permission denied.  `I run sudo /Applications/Visual\ Studio\ Code\ -\ Insiders.app/Contents/MacOS/Electron`
16523|Also after uninstalling multiple times and then restarting I'm getting this error: ![uninstallmultipleerror](https://cloud.githubusercontent.com/assets/12900364/14297262/cc8ed28a-fb32-11e5-8942-4d79e7ecd0a7.JPG)
16524|yes, this is correct url. when we push a new build of the website it will redirect to the localized page.
16525|@aeschli sorry to be so slow in the follow up, but anything that could give me syntax highlighting (as a first step) and/or autocompletion between backticks '`' would be awesome.
16526|"Thanks for this suggestion!  We've started down the path of using the `json` file format and I think we should continue along that path, unless we find a compelling reason to move to `yaml`.    Here's the thinking. While `json` has shortcomings, it also has benefits: - There is a native parser built into the runtime and we care deeply about parsing speed. For example, we parse configuration files during startup. - `json` structures are easily described using TypeScript, which is what we write 99% of the tool in. It is ""natural"" to use `json` in TypeScript. - Code itself already has great `json` tooling (schema, IntelliSense, formatting). This does not mean we won't improve `yaml` support, I'm just pointing out we've already got this in place.  - Suggesting to support both `yaml` and `json` is pragmatic but also means two code paths (bugs, bloat) and two sets of docs to maintain long term, something we would like to avoid.  So, I think unless we have a compelling reason to move, we should stick with `json` for our configuration files. If we did decide to support `yaml` I would recommend a migration rather than a model where we support multiple file formats.   Thanks again for the suggestion, it is always good to discuss these ideas and make sure we're doing the right things."
16527|"I've added some experimental support for SystemJS to node-debug. It is now possible to set breakpoints in the source and VS Code will hit the breakpoint after SystemJS has transpiled the source at load time. For this I hook the ""afterCompile"" event of the node runtime.  But there is still (at least) one problem left: since the node runtime does not stop after the generated (transpiled) JavaScript has been compiled, registering breakpoints in the startup phase of the loaded JavaScript might come too late for actually hitting the breakpoints. Registration of breakpoints in code that is executed later works fine.  So in your initial sample code I'm able to hit a breakpoint on the 'console.log' line when running it delayed with setInterval():  ``` js import {returnworld} from './world.js'  setInterval(() => {     console.log('running from source:hello ') }, 1000); debugger // try{ console.log('running from source:hello '+returnworld()) // }catch(e){console.log(e)} ```  I have an idea for how to solve the problem of hitting breakpoints in the startup phase of a loaded module but this has to wait until the May milestone (since I'm leaving for vacation)."
16528|https://github.com/Microsoft/vscode/commit/cd12a7e389bff8e7ef96a01735e287f536c7f07a
16529|@joaomoreno Version 2.7.2
16530|Hello, I am interested in this feature as well, as this along with the fact of having no way to easily use Gulp, is one of the main reason for me to use some proprietary solutions right now. Plus some unidentified bug with files having several lines of codes that make css linter get timeout error. How can I help you?
16531|Yup, this would be super awesome for me as well! =).  I often use my text-editors as a scratch-pad.  Sublime Text has had this for a while, and Atom had it via third-party extensions (e.g. [save-session](https://atom.io/packages/save-session). However, Atom recently rolled it into the core - perhaps some of their discussion might be helpful to our implementation?  Relevant PR - https://github.com/atom/atom/pull/9968
16532|"For reference/inspiration, here is a npm runner, with debugging, that I created as a [Custom Runner for Cloud9](https://docs.c9.io/docs/custom-runners) (a competing IDE). Their feature is in turn inspired by the Sublime build system.  ``` {    ""cmd"" : [""npm"", ""run"", ""$file_name"", ""--"", ""--debug-brk=15454""],     ""info"" : ""Started: npm run $file_name"",     ""env"" : {},     ""selector"" : ""package.json"",     ""debugger"": ""v8"",     ""debugport"": 15454, }  ```"
16533|@dbaeumer Any idea?
16534|``` A system error occured (EACCES: permission denied, mkdir '/home/daniel/.config/Code/User/snippets'): Error: EACCES: permission denied, mkdir '/home/daniel/.config/Code/User/snippets'     at Error (native)     at Object.fs.mkdirSync (fs.js:799:18)     at new SnippetsTracker (file:////home/daniel/dev/Microsoft/vscode/out/vs/workbench/parts/snippets/electron-browser/snippetsTracker.js:25:20)     at create (file:////home/daniel/dev/Microsoft/vscode/out/vs/base/common/types.js:150:14)     at file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:193:45     at AccessLock.runUnlocked (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:31:24)     at ServicesMap.createInstance (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:192:31)     at InstantiationService.createInstance (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:243:42)     at WorkbenchContributionsRegistry.BaseRegistry.instantiate (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/platform.js:42:54)     at WorkbenchContributionsRegistry.BaseRegistry.setInstantiationService (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/platform.js:38:22)Workbench.startup @ //home/daniel/dev/Microsoft/vscode/out/vs/workbench/browser/workbench.js:145 index.html:26 [uncaught exception]: Error: EACCES: permission denied, mkdir '/home/daniel/.config/Code/User/snippets'onError @ index.html:26 index.html:29 Error: EACCES: permission denied, mkdir '/home/daniel/.config/Code/User/snippets'     at Error (native)     at Object.fs.mkdirSync (fs.js:799:18)     at new SnippetsTracker (file:////home/daniel/dev/Microsoft/vscode/out/vs/workbench/parts/snippets/electron-browser/snippetsTracker.js:25:20)     at create (file:////home/daniel/dev/Microsoft/vscode/out/vs/base/common/types.js:150:14)     at file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:193:45     at AccessLock.runUnlocked (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:31:24)     at ServicesMap.createInstance (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:192:31)     at InstantiationService.createInstance (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/instantiation/common/instantiationService.js:243:42)     at WorkbenchContributionsRegistry.BaseRegistry.instantiate (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/platform.js:42:54)     at WorkbenchContributionsRegistry.BaseRegistry.setInstantiationService (file:////home/daniel/dev/Microsoft/vscode/out/vs/platform/platform.js:38:22) ```
16535|The EACCES errors can be fixed by tweaking permissions since .config is normally only `700`: `chmod 775 .config/`  Once that's passed, vscode load and, gives a warning about how you shouldn't run as root. Only files owned by root can be modified in this instance of vscode.
16536|When `gksudo google-chrome` is run this is presented:  ![image](https://cloud.githubusercontent.com/assets/2193314/14304972/c50622a4-fb6c-11e5-9f8e-39cfd70c5d39.png)
16537|"This works with Chrome:  ``` sudo mkdir /home/data/chrome-data gksudo ""google-chrome --user-data-dir=/home/daniel/chrome-data"" ```"
16538|The whole thing is pretty messy after understanding it, it would be better to request sudo acces when a file is saved. Something like this might work? https://www.npmjs.com/package/electron-sudo
16539|I am sorry to later for reply. I am a cpp developer, so I had install extension `cpptools` before. I have not modify anything about .vscode.  ![stack](https://cloud.githubusercontent.com/assets/2878674/14305264/241b8fb0-fbed-11e5-93ce-62af4ff1feb7.jpg) ![setting](https://cloud.githubusercontent.com/assets/2878674/14305265/242e2c60-fbed-11e5-80b2-11dbffa7316f.jpg)
16540|@jrieken If I have not reply in time, please email to me, ihuahua#live.com, # => @
16541|@bpasero  Think for your reply. Would you have plan to add API in future? or support encode detect just like ATOM? https://github.com/Microsoft/vscode/issues/2123 Than my native language is Chinese, and vscode does not support encode detect without DOM header. so, I have to code an extension for encode detect, if both of them could not be supported, it will be a pity. your native language is English, perhaps you can not  feel the pain about the garbled. If I have not reply in time, please email to me, `ihuahua#live.com` , # => @
16542|@pflannery I'm confused. I thought this pull request was rejected. Do you want to finish it? I wouldn't start another pull request then.
16543|@donaldpipowitch see https://github.com/Microsoft/vscode/pull/3200#issuecomment-196675666 for context
16544|I wrote an extension a while ago ([here, also hasn't been updated in a while](https://github.com/golf1052/code-sync)) that tried to help sync extensions between computers using file synchronization services. Originally I only supported syncing themes because syncing extensions seemed somewhat messy.  I think this should be the right way to maintain extensions between computers. Keep a list of what extensions are installed where, be able to pick and choose what extensions should be installed on which computer and then only manage syncing settings for those extensions. I assume the recommended way for extensions to manage settings is through [this](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesconfiguration)?
16545|Happy to help. Yeah, I don't thing it needed to put the `$` in from of the suggest label when `$env:` is already written. Generally, things are easy when completion describe an insert operation at the current position. Tho, when having typed just `$`, it might make sense to propose `$ALLUSER, $MORE_VARS` and then insert `$env:ALLUSER` etc
16546|Thanks, that's helpful. @delmyers Can you help? This seems to be an issue with the cpp-extension.
16547|👯
16548|"VSC tries to access my remote git repositories without my knowledge.  When I start it in a git directory, using ""code ."", I am prompted for my RSA key passphrase: Enter passphrase for key '{home}/.ssh/id_rsa': where {home} is my home directory.  If I search for 'ssh' in the process stack, I find: ssh {host} git-upload-pack '{repo.git}' where {host} and {repo.git} are the host and path of my remote origin git repository.  The first few times I ran it, I had already put my key to ssh-agent, so VSC quietly accessed my remote server without needing the passphrase.  I don't feel comfortable with VSC running ssh commands on my remote server, without my permission.  It should at least have a preference to turn this off.  VSC Linux X64 stable: Version 0.10.11 Commit f291f4ad600767626b24a4b15816b04bee9a3049 Date 2016-03-11T16:19:03.130Z Shell 0.35.6 Renderer 45.0.2454.85 Node 4.1.1"
16549|Also many occurrences:  Error: spawn cmd.exe ENOENT   at exports._errnoException (util.js:837:11)   at Process.ChildProcess._handle.onexit (internal/child_process.js:178:32)   at onErrorNT (internal/child_process.js:344:16)   at doNTCallback2 (node.js:442:9)   at process._tickCallback (node.js:356:17)
16550|Also: /vs/base/parts/tree/browser/treeView.ts#1101:54 (btoa)   /vs/base/parts/tree/browser/treeView.ts#728:10 (onModelFocusChange)   /vs/base/parts/tree/browser/treeView.ts#677:66 (onModelEvents)   /vs/base/common/eventEmitter.ts#253:21 (events)   /vs/base/common/eventEmitter.ts#262:8 (_emitToBulkListeners)   /vs/base/common/eventEmitter.ts#285:8 (_emitEvents)   /vs/base/parts/tree/browser/treeModel.ts#1130:7 (emit)   /vs/base/parts/tree/browser/treeImpl.ts#248:13 (setFocus)   /vs/base/parts/tree/browser/treeDefaults.ts#211:8 (setFocus)
16551|Not clear who should get this or what one could do about it.
16552|It seems complicated to solve for now, but there is always the `debugger` workaround. Did you try in a browser instead of nodejs environment ?  But the main problem is that if you replace the first `debugger` by `throw new Error('an error')`, then vscode only stops without throwing anything:  you need to catch the error manually like this: `System.import('path.js').catch((err)=>throw err)`. We really need a better way to track any errors.  Anyway, happy holidays @weinand
16553|@jtremback We do the same and it should work.  Is it possible that you change the count of cursors between copy and paste (e.g. you copy with 5 cursors, but then paste with 4 cursors). In other words, if the clipboard has N lines and you have N cursors, each line will go to each cursor. If the counts don't match, then each cursor will get all the content.  Do you have any ideas how to improve in this case?
16554|@jrieken This looks like a UI-side issue?
16555|Thank you, let's track this feature request in #4865
16556|// CC @alexandrudima
16557|@mindplay-dk Definitely not ok, thank you for reporting.  What OS are you on, what version of VSCode are you using. I have tried for about 2 minutes (I got bored :)) and could not reproduce with Ctrl+X, moving up or down and Ctrl+V.  But what happened to me once or twice is that I had the Ctrl still pressed when doing arrow up/down, which caused the editor to scroll one line up/down instead of moving the cursor when doing these steps quickly. Is it possible that is what you are running into?
16558|Also, do you have installed any extensions that might bind these specific keybindings?
16559|https://github.com/Microsoft/vscode/issues/444
16560|Hm that is an interesting idea actually...
16561|In favor in general, but is there any migration overhead to get existing wiki contents over to plain md? For example, do we have to convert wiki links to mark down links.   The wiki tab is popular and we need to ensure that the wiki in /wiki is as easily discoverable.
16562|Suspect the issue is upstream. Found this closed issue https://github.com/emmetio/emmet/issues/212 but it is from 2013 and we have this version.
16563|"> This does work if explicitly using a jsx file with ""Javascript React"" as a language,  this is the recommended way to do it, we do not want to enable emmet by default in JS.  > Then you are missing features like jump to symbol etc that you get with ""Javascript"".  this should not be the case, since the same language service/parser is used for .js and .jsx files. Can you add a snippet that illustrates the problem."
16564|Also found in 0.10.14-insider, 0.10.13-insider
16565|This was introduced by d97498920f212b9337aac99ed91800b0842370b5
16566|We prompt to prevent data loss, but I agree that the provided options do not make so much sense in that case.
16567|This is to prevent data loss. Other editors seem to behave the same and leave the file dirty in the editor.
16568|Not sure when this was introduced, but I'm assigning it to you because #5018
16569|over 300000 hits, on 32 machines, 100% on windows
16570|@abhinav-shah does it work if you do `sudo /Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron`
16571|@dchw are you actually opening `c:\Users\Some.User\src\gittest\` in VS Code or a parent directory?  Disabling file events has some impact: - git will not update automatically for changes in that folder - editor does not update for files changed outside - explorer does not update for files changed outside  But this is all scoped to that one folder, should not happen for sub folders.
16572|This issue is currently assigned to the backlog. Every sprint we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning
16573|@bgashler1 I think I fixed this, check latest!
16574|@bpasero yeah, thanks very very much, I love vscode.
16575|I couldn't reproduce this in the latest or in the Insiders build.
16576|ping @aeschli
16577|"@saneyuki Can you attach a s/s showing the mistranslated ""Later"" label? That would help understand the context"
16578|"@johnliu2016   > Can you attach a s/s showing the mistranslated ""Later"" label? That would help understand the context  Sorry, I forgot to take the screenshot. I need to wait the next insider update."
16579|"The extension installation shouldn't have built-in UI like this, its defeats the purpose of Visual Studio Code imho. Instead i'd rather just have [Read More] [Install / Uninstall] ..instead of Cloud-down icon.  If the route is to explode this into UI first principles then in reality its just back to Visual Studio we all go?   The target audience is developers so their insights into command line control / development is potentially higher from a discoverability standpoint plus with supportive loop-backs to the vscode extension page(s) online, one has the ability to unpack ""what is this extension?"" there vs trying to mirror that experience inline.  Key factors. - **Cadence of Time.** User's who install an extension are likely to be once-off moments in-time from a majority vs minority standpoint. The exclusion to this rule is when a user(s) in a refractory state and want's to browse / explore the ""market place"" for options. In which case i'd personally prefer they go visit the supportive page(s) for this as this can increase functionality for better search experiences or  self-selection principles. - **Visual Studio Code major selling point** for adoption is it's stripped down Visual Studio to the metal almost, incremental feature creeps like these put it back into a tool that does everything for you again (which imho is a deterrent). - **UI constancy vs consistency.** It's one thing to graft  its own UI shell into place, but when folks talk about modals i get twitchy, given OSX vs Windows modals have different set of behaviours. This is a fast way to break into jail.  Imho, it's fine, just nuke the icon given its reliance of symbology, size and colour have a negative effect. Instead, continue with the wording but remove License and fold it into _[ReadMe]_ or _[More.]_. and keep the options to two. Isolating the _[Install]_ into better grouping ie (solid fill while _[Read Me]_ / [More] has wire frame bordering) also imho reduces cognitive load."
16580|b1572f504ea9001a28928aae6eb968259b777165 introduced this  ping @isidorn
16581|https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync syncs extensions very well
16582|"@v-pavanp above you said ""debugger is crashing"". Why do you think that the debugger is crashing?"
16583|It would be quite helpful for us who can't make the meetings due to other commitments to be able to give feedback.  Maybe, once the meetings are over on the 1st day, post a video of a meeting(with all involved's permission) which others can view and comment on within the remaining time for meetings?  Obviously it can't be a long period but more feedback can't hurt with hopefully some different view points added.   I really hope some Python devs and c/c++ devs will be in the meeting as their workflow is different to a JavaScript dev's workflow
16584|Doesn't happen on insider. Removing important flag.
16585|I suspect that uncaught errors from extensions show up in our telemetry... not very happy.
16586|[We do have it](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/update.ts#L71) but [broke it](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/update-manager.ts#L195) somewhere along the way.  ping @egamma
16587|There are two different types of 'osascript' usages in VS Code: - using an absolute path '/usr/bin/osascript' - just 'osascript' and relying on the search PATH   For the first type I've verified on Windows 10 that the error message shows the full absolute path which looks different than the telemetry error entry from above:  ``` Error: spawn /usr/bin/osascript ENOENT     at exports._errnoException (util.js:870:11)     at Process.__dirname._handle.onexit (internal/child_process.js:178:32)     at onErrorNT (internal/child_process.js:344:16)     at nextTickCallbackWith2Args (node.js:441:9)     at process._tickCallback (node.js:355:17)     at Module.runMain [as _onTimeout] (module.js:444:11)     at Timer.listOnTimeout (timers.js:92:15) ```  The second usage type is in `cli.contribution.ts:131`. Since this action is only installed on OS X and must be triggered manually, it cannot explain the high number of occurrences on Windows.  From this I conclude that this is an uncaught error from some extension.
16588|Closing as duplicate of #217.   We don't plan to implement that in VS Code but advise to use a node module like https://github.com/xavi-/node-copy-paste. This is to reduce complexity in the VS Code API because otherwise we have to handle/describe all sorts of clipboard data (think of images and other binary data).
16589|You can simply rename a file or folder again and escape or enter instead of restart Visual Code and the visual bug disappears.
16590|Duplicate of #637
16591|@bpasero seems to be related to the [accessibility](https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/tree/browser/treeView.ts#L236) [changes](https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/tree/browser/treeView.ts#L1111)
16592|@alexandrudima It seems we still talk about models that don't exist in the ext host... Ideas?
16593|For some it seems like `activeTextEditor` isn't understood be `undefined` in cases. Also, I know we make it `undefined` when changing
16594|Thanks @Tyriar, I can see how it will.  And no problem @bgashler1 - it's my username @ hotmail.com. I understand that, and I'm purposefully building this as an extension so that even if VSCode doesn't end up with a settings GUI, this work can live on.  I didn't really get the answers I was after here (some great suggestions, but no definite yes/no on what I was trying to achieve). Are either of you able to point me in the direction of the best person to discuss this with? Maybe I missed something really obvious. https://github.com/Microsoft/vscode/issues/3355#issuecomment-202289902
16595|Ran in the problem again. Here is the verbose output when trying to launch Code Insider after experiencing the problem.   ``` ### VSCode main.js ### c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app { pathArguments: [],   programStart: 0,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   diffMode: false,   pluginHomePath: undefined,   extensionDevelopmentPath: undefined,   extensionTestsPath: undefined,   disableExtensions: false,   locale: undefined,   waitForWindowClose: false } Lifecycle#unload() 1 ```  VS Code released version is able to launch without any issues. However, this issue has happen to VS Code release in the past.   Attached the VS Code Crashes log. The last write time of the log is about the same time I closed it.   Attachments:  [operation_log.txt](https://github.com/Microsoft/vscode/files/206253/operation_log.txt)
16596|"I decided to keep the `""Code - Insider.exe"" --verbose` running and kill each of instant of Code via Task Manager. After the killing one of the process, the VS Code Insider launch with a popup saying it had crashed. It then preceded to reload properly.   Here is the verbose logging recorded when doing so...  ``` C:\Program Files (x86)\Microsoft VS Code Insiders> ### VSCode main.js ### c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app { pathArguments: [],   programStart: 0,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   diffMode: false,   pluginHomePath: undefined,   extensionDevelopmentPath: undefined,   extensionTestsPath: undefined,   disableExtensions: false,   locale: undefined,   waitForWindowClose: false } Lifecycle#unload() 1 ""Code - Insiders.exe"" --verbose  C:\Program Files (x86)\Microsoft VS Code Insiders> Sending env to running instance... [VS Code]: render process crashed! [uncaught exception in main]: Error: write EPIPE Error: write EPIPE     at exports._errnoException (util.js:837:11)     at Socket._writeGeneric (net.js:675:26)     at Socket._write (net.js:694:8)     at doWrite (_stream_writable.js:292:12)     at writeOrBuffer (_stream_writable.js:278:5)     at Socket.Writable.write (_stream_writable.js:207:11)     at Socket.write (net.js:618:40)     at e.send (C:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\electron-main\main.js:6:12276)     at new e (C:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\electron-main\main.js:6:2769)     at Server.<anonymous> (C:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\electron-main\main.js:6:12849) [13796:12340:0406/070327:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] [13796:12340:0406/070327:VERBOSE1:crash_service.cc(142)] window handle is 00350356 [13796:12340:0406/070327:VERBOSE1:crash_service.cc(290)] pipe name is \\.\pipe\VSCode Crash Service dumps at C:\Users\Brian\AppData\Local\Temp\VSCode Crashes [13796:12340:0406/070327:VERBOSE1:crash_service.cc(294)] checkpoint is C:\Users\Brian\AppData\Local\Temp\VSCode Crashes\crash_checkpoint.txt server is https://ticinocrashreporter.azurewebsites.net/crash maximum 128 reports/day reporter is electron-crash-service [13796:12340:0406/070327:VERBOSE1:crash_service_main.cc(84)] Ready to process crash requests [13796:9168:0406/070327:VERBOSE1:crash_service.cc(323)] client start. pid = 18644 [13796:9168:0406/070327:VERBOSE1:crash_service.cc(323)] client start. pid = 1704 [18936:18736:0406/070327:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] [18936:18736:0406/070327:VERBOSE1:crash_service.cc(142)] window handle is 002012D6 [18936:18736:0406/070327:VERBOSE1:crash_service.cc(290)] pipe name is \\.\pipe\VSCode Crash Service dumps at C:\Users\Brian\AppData\Local\Temp\VSCode Crashes [18936:18736:0406/070327:VERBOSE1:crash_service.cc(294)] checkpoint is C:\Users\Brian\AppData\Local\Temp\VSCode Crashes\crash_checkpoint.txt server is https://ticinocrashreporter.azurewebsites.net/crash maximum 128 reports/day reporter is electron-crash-service [18936:18736:0406/070327:ERROR:crash_service.cc(301)] could not start dumper IPC#vscode-workbenchLoaded ```"
16597|Thanks Steven for taking the time to talk with me! This engagement with the community is really encouraging, and I'm enjoying following the vscode development!  On 6 April 2016 at 19:41, Michael Wallace Louwrens <notifications@github.com  > wrote: >  > It would be quite helpful for us who can't make the meetings due to other > commitments to be able to give feedback. > Maybe, once the meetings are over on the 1st day, post a video of a > meeting(with all involved's permission) which others can view and comment > on within the remaining time for meetings? >  > Obviously it can't be a long period but more feedback can't hurt with > hopefully some different view points added. >  > I really hope some Python devs and c/c++ devs will be in the meeting as > their workflow is different to a JavaScript dev's workflow >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-206261939
16598|@mrmckeb   > Validator / Schema for configuration (to know what format each is expected in).  I know that it's possible to load the json schema parser and validator used by vscode with the following:   ``` js import {extensions} from 'vscode'; const jsonExt = extensions.getExtension('vscode.json'); const jsonSchemaParser = require(jsonExt.extensionPath + '/server/out/jsonParser');  var parsedDocument = jsonSchemaParser.parse(someText); var validationResult; jsonSchemaParser.validate(someSchemaObj, validationResult);  // see https://github.com/Microsoft/vscode/blob/master/extensions/json/server/src/jsonParser.ts#L100 ```
16599|@Tyriar  installed the insiders rpm package 2 days ago, and now it froze. There's no log to show, since I started it using the desktop shortcut.  Note that I haven't restarted vscode since starting it 2 days ago.
16600|@mrmckeb can you make your repo public? I would like to contribute
