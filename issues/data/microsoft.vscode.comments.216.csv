21501|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
21502|duplicate of https://github.com/Microsoft/vscode/issues/5426  See my comment there that explains what you have to configure to also have `template` elements formatted.
21503|It appears that my initial report was incorrect ‚Äì if you wait long enough, eventually there is a response.  In my case it takes about two minutes.  You can see the video here: http://cl.ly/0w200J3t1R1q  You can also see the console in the video, there are no messages.  I'm guessing the issue is that the index is not working, or else there is no index.  In the video you can see I searched for the same term twice, and the second time took just as long as the first.  It doesn't matter whether the directory containing the file is open in the explorer on the left.
21504|Are you using an extension for the OCaml support? Please file the issue against the provider of the extension.
21505|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/141
21506|duplicate of https://github.com/OmniSharp/omnisharp-vscode/issues/316
21507|duplicate of #5223
21508|Yes, correct. I forgot to close this issue and comment. The previously hard coded completions like npm or project.json versions have now moved to the JavaScript resp C# extensions. Each of these extension registers a completion and hover provider for the corresponding JSON files, and uses the new `javac-parser` node-module to parse the JSON in order to evaluate the current location in the JSON file. Have a look at https://github.com/OmniSharp/omnisharp-vscode/pull/224 to see how this works.
21509|Moved to [#47](https://github.com/Microsoft/vscppsamples/issues/47)
21510|Yes, and even more often than usual
21511|@aleksey-pastuhov are you running Ubuntu through a VM and do you see this when browsing Chrome?
21512|Closing in favor of #5780
21513|Moved to [#48](https://github.com/Microsoft/vscppsamples/issues/48)
21514|@Tyriar the 'debuggers' just work fine in oss for 'normal' programs. This is not a debugger issue.  @ghost The issue with the use case from above is that electron needs to be launched in a way that it behaves like VS Code and not like a generic Electron app. For this it is necessary to pass the VS Code workspace path as a first argument to the runtime. Here is a modified launch config for that case:  ![2016-05-13 23-18-02](https://cloud.githubusercontent.com/assets/1898161/15262183/ff570880-1960-11e6-85f0-f9519c51c0aa.png)  Additional remarks: - VS Code 1.0 has only one builtin debugger: node-debug. Mono-debug is a regular extension that exists on the Marketplace for historical reasons. For debugging of C# programs please use the C# extension. - It is not necessary to remove the fake node-debug from the VS Code workspace. You can just install the node-debug extension from a recent VS Code drop into your extension folder: `~/.vscode-oss-dev/extensions` or git clone the vscode-node-debug project into that location and build it there. Those extension will override VS Code's internal extensions.  @bpasero would it be possible to detect the use case from above and automatically pass the VS Code workspace path as the first argument? This would simplify the setup for extension developers who wants to selfhost on VS Code because they would not have to tweak their launch configs.
21515|"@danielschmitz the suggestion code, with the command property within the tasks themselves, says ""Propery 'command' not allowed'.  Plus,without a command property at the top outside of tasks, ctrl+shift+b says there's no tasks found."
21516|That was with the current behavior. Haven't compiled any sources to check your changes. I agree with the sort-order but that the current file/directory should be searched first.
21517|I have the same issue on Windows 10, Code version 1.1.0.
21518|Dupe #1751 ?
21519|By analyzing the blame information on this pull request, we identified @joaomoreno to be a potential reviewer
21520|Closing in favor of #5780
21521|Verified on Ubuntu (`x-terminal-emulator`), Xubuntu (`xfce4-terminal`) RHEL7 (`gnome-terminal` [via `gnome-classic`]) and Fedora (`gnome-terminal` [fixes #4478])
21522|Closing in favor of https://github.com/Microsoft/vscode/issues/509
21523|Tried to reproduce, could not see anything particularly out of the ordinary so going to close.
21524|No, it sizes to the minimal sidebar width which is intended.
21525|Yeah, see also https://github.com/Microsoft/vscode/issues/55 as related.
21526|Yes, this is indeed not fixed yet.
21527|Isn't the behavior of the explorer more intuitive though? Getting rid of the text truncation?
21528|@Tyriar No, I have Ubuntu installed on my notebook as primary OS. By default I use Firefox, and I do not see such problems there. But I will check the bug in chrome.
21529|I also had this issue - it seemed to be caused by this extension https://github.com/HookyQR/ It worked in previous version of VSCode, but became broken when updating to v 1.1.0.
21530|> @egamma on November 2, 2015 8:16 > Exposing the scope names in the API is on the backlog, but will not make it into the November update.  Is there any update on if/when we can expect a way to get the scopes at a position or offset?
21531|"Here's before and after stepping over a call to `DiagnosticsCollection#set`, showing that only the first item of a three element array is being set in the diagnostics collection.  <img width=""960"" alt=""pic"" src=""https://cloud.githubusercontent.com/assets/223467/15269371/3bbd557c-19b1-11e6-8bfe-838b00c58a3c.png"">  <img width=""960"" alt=""pic2"" src=""https://cloud.githubusercontent.com/assets/223467/15269372/3f77ff14-19b1-11e6-8028-461cc42dd3a4.png"">"
21532|My analysis is that somehow the front-end is assuming that for a given stack frame the source reference is going to be the same across multiple calls to the backend. In my implementation this is not true - so therefore the front-end is displaying the wrong source I believe. This seems like 'undocumented' behaviour?
21533|When defining an asynchronous function with the new `async` syntax the next line doesn't have indentation.  ``` python asycnc def hello():     pass ```
21534|When I add `editor.insertSpaces: false`, it actually updates my status bar setting and uses tabs instead.
21535|I did discover a bug when using `--enable-use-zoom-for-dsf`: dragging items in the file explorer is dramatically shifted, like the event handlers are not scaled with the UI. This causes issues when trying to move things around, but it can be worked around.
21536|nice one!
21537|Just chiming in because I'm a big fan of VSCode and I'm looking at the Chromebook Pixel as a future purchase. VSCode on ChromeOS would be amazing. How difficult would this be? I know VSCode is built on Electron, right? Which means VSCode is just a packaged web app. How simple would it be to port that over to a Chrome App (https://developer.chrome.com/apps/about_apps)?  I have a feeling I'm over simplifying this.
21538|I'd love to see it too, but I don't see it ever happening. Electron won't run on ChromeOS and I suspect Chrome extensions are way more restricted than Electron (is it even possible to run processes without using NPAPI, which is being phased out?)  (that said, you can probably make this work via Crouton or similar already, if you don't mind maintaining a Linux install!)
21539|I only implemented optimal resizing for the explorer viewlet but it would makes sense to have a similar behavior on other viewlets as well. I‚Äôm not sure about the exact formula we should use, I think it would be good to have an upper limit in case there are some long lines of text in the search results.  The implementation is pretty easy, it‚Äôs just a matter of defining a `getOptimalWidth` method on the viewlet (otherwise the default value is minimal sidebar), so someone should just come with a clear idea of the intended resizing behavior :)
21540|Hey Tyler,  I have a mint 2015 Pixel with the i5 I'm not using any more and looking to get rid of. If you're interested, I could give you a good deal on it  On Sat, May 14, 2016, 5:09 PM Tyler James Leonhardt < notifications@github.com> wrote:  > Just chiming in because I'm a big fan of VSCode and I'm looking at the > Chromebook Pixel as a future purchase. VSCode on ChromeOS would be amazing. > How difficult would this be? I know VSCode is built on Electron, right? > Which means VSCode is just a packaged web app. How simple would it be to > port that over to a Chrome App ( > https://developer.chrome.com/apps/about_apps)? >  > I have a feeling I'm over simplifying this. >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1031#issuecomment-219251647
21541|Thanks @jasonnolanreed. This is the last place I thought this would happen lol. I'm waiting for after I/O as they might be giving them out :) I'll let you know!
21542|Fingers crossed for a freebie!  On Sat, May 14, 2016, 6:33 PM Tyler James Leonhardt < notifications@github.com> wrote:  > Thanks @jasonnolanreed https://github.com/jasonnolanreed. This is the > last place I thought this would happen lol. I'm waiting for after I/O as > they might be giving them out :) I'll let you know! >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1031#issuecomment-219255265
21543|- VSCode Version: 1.1.0 - OS Version: Win 10 x64  Trying to open a large JS file (~85K SLOC) makes window crash.   Steps to reproduce: 1. Open a large JS file (e.g., http://developer-autodesk.github.io/viewer3d/2.2/viewer3D.js) 2. Wait a few seconds to see editor crash.
21544|@jrieken exactly... thanks üëç
21545|FYI https://github.com/Microsoft/vscode/pull/5570 is moving the user data directory to be a sibling of the extensions dir.
21546|It not getting saved. unable to edit preferences
21547|Hi,  Closing this, pretty sure it's the specific repo I'm working with (not my code).  My tests with other code is working fine.  Cheers.
21548|By analyzing the blame information on this pull request, we identified @aeschli and @egamma to be potential reviewers
21549|Hi **@archer884**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
21550|"VSCode Version: 1.1.0 OS Version: Windows 10 Pro 1. I am also facing the same issue in version 1.1.0. Ctrl + s duplicates the code in a file. The issue fixes when I revert back to the earlier version i-e 10.10. The project was started in earlier version and after update it caused this issue. 2. 'code --disable-extensions' fixes the problem and it seems that the problem is due to the ""beauify"" extension also referred by @n0652640."
21551|+1!
21552|I ran into this problem as well, (i use swedish and english keyboard layouts).  Perhaps a solution could be to have a command that you can invoke to clear the cache?
21553|"Old post but If it's any help I use the following:  ``` json ""**/*.js"": {     ""when"": ""$(basename).ts"" }, ""**/*.map"": {     ""when"": ""$(basename)"" } ```  It hides map files if there's a matching JS file and hides JS files if there's a matching TS file, leaving you with just TS files. Thought it was a little neater hiding all map files"
21554|I have the same problem, same version, but OS is win10 x64 14342 insider
21555|The node runtime of Electron behaves differently than the 'normal' node (even with identical version numbers). In the former names of indexed properties are of type string, in the latter they are of type number.
21556|By analyzing the blame information on this pull request, we identified @dbaeumer to be a potential reviewer
21557|Hi **@niceb5y**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
21558|At version 1.1.0, this problem has fixed.
21559|What is the error you are getting  Run with Root it will work fine.
21560|:+1:
21561|~~Same issue here~~ - ~~VSCode 1.1~~ - ~~Ubuntu 14.04.4 LTS~~  **UPDATE:** Found the fix in the documentation.  Somehow missed it.  @ianaykh you fix it by launching vscode with the disable gpu flag:  `code --disable-gpu`   Documentation found here:  [VS Code Main Windows is Blank](http://code.visualstudio.com/Docs/supporting/faq#_vs-code-main-window-is-blank)
21562|Thanks but do I have to do this every time I launch vs code from the terminal? Is there a permanent fix?  I see that there is an option to set preferences in vs code. Is there anyway that I can disable the gpu?
21563|Thanks @archer884 for the fix. I guess then we can also remove `'` from the list of surroundingPairs?
21564|@aeschli I probably don't have the knowledge needed to make that decision on my own, but here are my two cents:  We probably _shouldn't_ remove `'` from `surroundingPairs`. `'` is still used to surround characters, as in `let character: char = 'c';` -- it's just that it's also used for lifetime annotations and, of the two use cases, that latter one is far more common. Guess it depends on what impact removing it from `surroundingPairs` would have.
21565|By analyzing the blame information on this pull request, we identified @egamma and @jrieken to be potential reviewers
21566|What he is saying is the extension downloading is kind of slow and if you switch windows while installing extensions, the command pallete will disappear somehow.  I suppose this is an known issue and we'll cover this in following sprints.
21567|"**Disclaimer**:  I am not a Linux dev/regular user.  I am in the process of learning Linux myself.  I can not be held responsible for this failing or causing you grief.  Now that the disclaimer is out of the way here is what I did.   After installing via the .deb package, I edited the `/usr/share/code/bin/code` file using a text editor.    ``` #!/usr/bin/env bash # # Copyright (c) Microsoft Corporation. All rights reserved. # Licensed under the MIT License. See License.txt in the project root for license information.  ARGS=$@  # If root, ensure that --user-data-dir is specified if [ ""$(id -u)"" = ""0"" ]; then     while test $# -gt 0     do         if [[ $1 == --user-data-dir=* ]]; then             DATA_DIR_SET=1         fi         shift     done     if [ -z $DATA_DIR_SET ]; then         echo ""It is recommended to start vscode as a normal user. To run as root, you must specify an alternate user data directory with the --user-data-dir argument."" 1>&2         exit 1     fi fi  if [ ! -L $0 ]; then     # if path is not a symlink, find relatively     VSCODE_PATH=""$(dirname $0)/.."" else     if which readlink >/dev/null; then         # if readlink exists, follow the symlink and find relatively         VSCODE_PATH=""$(dirname $(readlink $0))/..""     else         # else use the standard install location         VSCODE_PATH=""/usr/share/code""     fi fi  ELECTRON=""$VSCODE_PATH/code"" CLI=""$VSCODE_PATH/resources/app/out/cli.js"" ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""$ELECTRON"" ""$CLI"" $ARGS exit $? ```  Above is the original file that is installed via the .deb package.  I added 1 line and modified another.  The line that I added was `DEFAULT_ARGS=--disable-gpu` right before the `ARGS=$@` line.  Then at the bottom of the file I modified `ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""$ELECTRON"" ""$CLI"" $ARGS` to be `ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""$ELECTRON"" ""$CLI"" $DEFAULT_ARGS $ARGS`  Below is complete copy of the file which I modified.  ``` #!/usr/bin/env bash # # Copyright (c) Microsoft Corporation. All rights reserved. # Licensed under the MIT License. See License.txt in the project root for license information.  DEFAULT_ARGS=--disable-gpu ARGS=$@  # If root, ensure that --user-data-dir is specified if [ ""$(id -u)"" = ""0"" ]; then     while test $# -gt 0     do         if [[ $1 == --user-data-dir=* ]]; then             DATA_DIR_SET=1         fi         shift     done     if [ -z $DATA_DIR_SET ]; then         echo ""It is recommended to start vscode as a normal user. To run as root, you must specify an alternate user data directory with the --user-data-dir argument."" 1>&2         exit 1     fi fi  if [ ! -L $0 ]; then     # if path is not a symlink, find relatively     VSCODE_PATH=""$(dirname $0)/.."" else     if which readlink >/dev/null; then         # if readlink exists, follow the symlink and find relatively         VSCODE_PATH=""$(dirname $(readlink $0))/..""     else         # else use the standard install location         VSCODE_PATH=""/usr/share/code""     fi fi  ELECTRON=""$VSCODE_PATH/code"" CLI=""$VSCODE_PATH/resources/app/out/cli.js"" ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""$ELECTRON"" ""$CLI"" $DEFAULT_ARGS  $ARGS exit $? ```"
21568|Ran integration tests on my Leveno X1 with Windows 10 installed, all 35 test cases passed. The error raised has nothing to do with my change IMHO , we ran into this issue a couple of times before [1.0.4379](https://ci.appveyor.com/project/VSCode/vscode/build/1.0.4379), [1.0.4358](https://ci.appveyor.com/project/VSCode/vscode/build/1.0.4358), [1.0.4326](https://ci.appveyor.com/project/VSCode/vscode/build/1.0.4326)
21569|@ianaykh This fix would most likely be overwritten when you install an update released for vscode
21570|Quoting my comment on the similar Atom issue referenced just above my comment:  >  In Sublime I can just keep having drafts, kill it any time I'm presenting or having a sole-use of my laptop, and open it later with all drafts intact. The same even if my laptop crashed while Sublime was opened.  I'd love to see this happen with Code now that I'm using it way more often.
21571|Just wating for this PR merged :heart:
21572|+1 Really want to see this in VS Code
21573|I have solved it by updating all of extensions. @sajjadafzal @n0652640
21574|Can not repro on my mac
21575|@bpasero
21576|VSCode supports snippets, please checkout this document https://code.visualstudio.com/Docs/customization/userdefinedsnippets
21577|I think you tried to upload a screenshot but failed. Can you please clarify what behavior you are expecting and what behavior you are seeing
21578|Sorry, I didn't find the picture lost lying, now re upload
21579|"We already have a restart it is called Reload window, you can find it in the command pallete, and you can also bind a keybinding to it  <img width=""551"" alt=""screen shot 2016-05-16 at 09 15 02"" src=""https://cloud.githubusercontent.com/assets/1926584/15282899/b3cc0fe0-1b46-11e6-87c7-8e110ca29cc3.png"">"
21580|Hello there, I have something sort of working.  It is not on the store yet, but you can download it from http://people.canonical.com/~sergiusens/snappy/vscode_1.0_amd64.snap  There are two snappy related bugs still open for this (which are being worked on): - [LP: #1577514](https://bugs.launchpad.net/snappy/+bug/1577514) - [LP: #1577520](https://bugs.launchpad.net/snappy/+bug/1577520)  So it would need to be installed by running  ``` sudo snap install --devmode vscode*.snap ```  The most important thing that I still need to resolve it plugin installation. That is an area I could use pointers for btw.  I have 4 commits here https://github.com/sergiusens/vscode/commits/release/1.0.0  This branch has: - a gulp task to create the snap layout. - snapcraft specific assets. - a launcher (shell) specific to snapcraft (this won't be necessary for future builds though). - a local plugin (`parts/plugins/x-nodejs`) until I (or someone else) adds support for either `gulp` as a top level plugin or clean up what I did here to also support gulp.  https://github.com/sergiusens/vscode/commit/a840a3451061efd0a988799e5383e9382404bd59 you might want to cherry pick regarless.
21581|> the source reference is going to be the same across multiple calls to the backend  What exactly do you mean by multiple calls to the backend?  VSCode frontend supports displaying multiple different source files with a reference (just checkout node debugging and click deep down in the call stack).  When you expect VSCode to show your new source - what is the exact situation? User clicked on that source in call stack?  Is there some way I can reproduce this behavior on my machine?
21582|Dup of #5276
21583|With the latest VSCode all commands in the command pallette are not translated (when you press F1). Though I understand you might want to never translate git commands - so even in the git viewlet
21584|Please add a gif capturing the behavior you are seeing. Or some screenshots.
21585|C# is now an extension - https://code.visualstudio.com/Docs/languages/csharp Please install that extension for a better experience https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp
21586|@archer884 Thanks for the explanation. Then it makes sense to keep `'` as `surroundingPairs`. surroundingPairs are used when making a word selection and when entering one of the pair characters.
21587|The stop/continue all model breaks the debug adapter for Firefox - I need the stop/continue one model to support debugging WebWorkers. Could you please enable the stop/continue one model for the 'firefox' debug type or, even better, add a way for the debug adapter to specify which model it needs.
21588|@Ikuyadeu Thanks for the fix. One issue tough, we should not add the .sass and stylus file extensions in sass.contribution.ts. Our mode only supports the scss syntax.
21589|Daily, I switch between Eclipse, PhpStorm, Notepad++ and VSCode. Guess what, `CTRL+W` drives me nuts.
21590|Assiging to @vsccarl to verify
21591|This seems to be an issue with the omnisharp ext not working you have to manually install it from latest omnisharp vscode for it to work
21592|@csholmq also had this issue
21593|But we were running on insider 1.1.0
21594|Correct. [Built-in Omnisharp](https://marketplace.visualstudio.com/items?itemName=ms-vscode.omnisharp) extension states   > Don't install this extension unless you want to try an early version. By default it is already > bundled with VS Code.  Which isn't true anymore. Something has broken.  Also, installing the C# extension was a pain. But required several `ext install csharp`.
21595|@aeschli Thank you comment. I see. I deleted sass.contribution.ts changes. So, This PR just delete some lines that is not working.  Should I make support mode that for .sass and stylus file extensions can use emmet? Or, It is function of Extentions?
21596|C# extension is no longer bundled by default with VSCode. If the C# extension can not be properly installed please file that issue with setup description against   https://github.com/OmniSharp/omnisharp-vscode/issues
21597|![bug](https://cloud.githubusercontent.com/assets/13777181/15286211/3879a706-1b8e-11e6-85e8-723c3f29186f.gif)
21598|+1 ... and the same for moudules imported from local project path, e.g. `src` in the following webpack config:  ``` module: {     loaders: assetsLoaders.concat([       {test: /\.js$/, loaders: ['react-hot', 'babel'], include: [path.resolve('src')]}     ]),     preLoaders: [       {test: /\.js$/, loaders: ['eslint'], include: [path.resolve('src')]}     ]   } ```  Is there some setting of paths, from where the module imports will be resolved in VS code?
21599|Looked into this and the behavior I am seeing is that we refresh the breakpoints view on every keystroke if that keystroke is on a line that has a breakpoint. This is necessery as that keystroke can potentially delete the line or add a new line and thus modify the line number of a breakpoint.  Since I can not reproduce this behavior if I type on any line that does not have a breakpoint I am closing this as designed. As I think the behavior is not that bad and in this case we have to refresh in order for the line numbers in the breakpoints view to be correct.  Let me know if you see this on every keystroke and I will reopen
21600|Can not repro on win10 neither on mac. Are you still seeing this, if yes can you start debugging by clicking on the green play icon? Can you start debugging if you bind some other keybinding to start debug action?
