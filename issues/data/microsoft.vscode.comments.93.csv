9201|I'm still having issues myself. I've been trying to confirm proxy is used at all and cannot. My proxy is CNTLM running locally on localhost:10080. It works very well for multiple other apps like git and Dropbox. When I start it in foreground mode with verbose logging, I see connections as they come in. Yet, I never see anything for VS Code. I tried using `http_proxy` and `https_proxy` env. variables and setting the `http.proxy` and `http.proxyStrictSSL` in settings, no luck.  Finally I disabled all proxy settings and started a Wireshark session thinking I could at least see the non-proxied query, than I would enable proxy and confirm I don't see it anymore. Surprisingly I can't see the direct attempt to connect to 191.238.172.191 at all. The following GIF shows that no proxy env. variables are set, that packets are being captured (only one interface active on my PC), and that user settings don't have proxy settings enabled. Yet, when I `ext install` things timeout with an error and my network trace (filtered on IP 191.238.172.191) is not showing any attempt to even connect to that IP:  ![vscode_ext_install_issue](https://cloud.githubusercontent.com/assets/822167/12986524/bbd9df80-d0c5-11e5-8227-7d06a9d49c9c.gif)  Version info:  ![vscode_ext_install_issue-version](https://cloud.githubusercontent.com/assets/822167/12986520/b37b5a8a-d0c5-11e5-90ec-7c5fb04fae01.png)  I might just be blind or in need of a good coffee, but if not, any idea why? Could the IP in the message not be the one where the attempt is made to connect?  In any case, thanks and great work guys!
9202|+1
9203|For the record, you're referring to [these lines](https://github.com/Microsoft/vscode/blob/b3f65f618253c106cb083db6285733a6acdab7e8/src/vs/vscode.d.ts#L526-L542).  Would Microsoft be willing to update this interface or is there a good reason they don't use union types for these settings?
9204|+1
9205|Did a PR https://github.com/Microsoft/vscode/pull/2935  I guess they will accept it as I don't see any reason to not allow strings.
9206|@jrieken I tried this today with the latest Alpha build. Really cool! How do we determine what extensions to suggest?   I have done the following.  1. I have an express Node app and didn't get any suggestions.  2. I created a test.php file and didn't get any suggestions.  3. I created a Go file and got the Go extension as a suggestion.   My feedback is I wish it was more robust. For example, with PHP I want to see the five or six suggestions that show up in search. I realize this is simply a start to the feature so take my feedback with a grain of salt.
9207|:+1:
9208|Yeah I tried it on another machine with Windows 10 and it works as expected there too, but on my 8.1 machine it never shows, at least in TypeScript and C# where I tested it. Tried a clean installation with --disable-extensions too, and no errors in the console either.  ![extrainfo](https://cloud.githubusercontent.com/assets/6125444/12988039/361ba89e-d0ff-11e5-9f08-9de535150ebe.gif)
9209|With the new build it has crashed each morning when leaving it running overnight. I have only these extensions installed (in the new build, in the release build I had different extensions):  ![image](https://cloud.githubusercontent.com/assets/314188/12988517/03e92fce-d166-11e5-8569-d3f5cc7a181a.png)
9210|To add some information, if you hold `alt` and press `f`, then it works as expected, but not if you press them separately.
9211|Chiming in since Jo in out for a while.   The tips are driven by a curated list of extensions in `vscode\src\vs\workbench\parts\extensions\electron-browser\extensionTips.json`. There are currently extension suggestions for PHP, but we take PRs :smile:
9212|Excellent thanks.
9213|No prob. Not sure based on the comments, but if you are not using Salsa already, please give it a try https://code.visualstudio.com/Updates#_javascript-salsa-preview
9214|Not yet - I'll check it out.  On Thu, Feb 11, 2016 at 2:18 PM, Erich Gamma notifications@github.com wrote:  > No prob. Not sure based on the comments, but if you are not using Salsa > already, please give it a try > https://code.visualstudio.com/Updates#_javascript-salsa-preview >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2942#issuecomment-183046682.  ##   #   Raymond Camden, Developer Advocate for MobileFirst at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden
9215|+1
9216|@stevencl @bgashler1 @egamma @chrisdias FYI
9217|"To play around with the prototype, check out the `aeschli-folding` branch. In the settings add `""editor.folding"": true`"
9218|Thanks, I did play with that but didn't realize from the description that it occurs on every workspace open, not just initial startup.  So the '*'  activation does allow any kind of per-workspace checking to be done before enabling an extension.
9219|Will themes be able to control the arrow colors? They may clash with certain themes even if there are just standard dark and light versions of them.
9220|It looks like this is just how [Electron](https://github.com/atom/electron) behaves under Windows 10, you may want to file an issue there.
9221|@dfinke @alexandrudima  In the markdown preview the JavaScript from the above gist is executed as shown below. I was assuming that the html preview mostly mimics the mark down preview, but this is not the case and I did not succeed to execute scripts in the html preview.   ![md](https://cloud.githubusercontent.com/assets/172399/12994085/54f52adc-d11e-11e5-8e97-a80a84386743.png)
9222|Related: https://github.com/Microsoft/vscode/issues/2946
9223|Very cool. So a few tweaks to the html preview and vs code can be an interactive d3 pad.  I was looking at the `htmlPreviewPart.ts` to see if I could swap the `iframe` out, but I don't know if that would be enough. Maybe cloning the markdown preview is the place to start.
9224|"I've been talking to a few people about this recently and there seems to be a real interest from users of the PowerShell extension to be able to write new VS Code commands using PowerShell.  I'd like to gauge your interest in providing the capability of dynamic command registration so that I can enable this scenario.  I know that on the list of valuable things you could do post-Build, this is probably not very high.  However, I think it could open the door to even more ways to extend VS Code using any language without any significant changes to the current extensibility model.  Here's a description of how it would work:  ---  The user installs the PowerShell extension for Visual Studio Code.  One day, they hear about a new PowerShell module that provides a custom formatting command for PowerShell scripts.  They install this module using the [PowerShell Gallery](http://www.powershellgallery.com).  The next time they start Visual Studio Code, the language service scans their locally installed PowerShell modules for any that contain editor command extensions.  The new script formatting extension is found and loaded.  This causes a special message to be sent from the language service to the PowerShell extension in VS Code to indicate that an editor command extension was loaded.  The PowerShell extension then uses the VS Code APIs to dynamically register this new command with its ID, display name, and default key binding.  If the key binding is already in use, the default key binding is ignored.  The user can now see and execute the ""PowerShell: My custom formatter"" command in VS Code's command palette.  They can also bind this command to a key combination of their choosing in keybindings.json.  When the custom command is executed, the PowerShell extension will use VS Code's APIs to gather context about the user's currently open file and the current selection or cursor position.  This information is then sent with a request to the PowerShell language service to execute a custom command with the selected ID.  The custom command runs its logic in PowerShell and then returns a result which contains edits to be applied to the file.  When the response is returned from the language service, the PowerShell extension will translate the desired edits to the VS Code APIs so that they're applied to the user's file buffer.  ---  Aside from code formatting extensions, I'd also be providing general action commands (execute some task) or analysis commands (run some special linter or script checker).  The standard VS Code APIs will be used for all extension capabilities.  There are two major benefits to this approach for PowerShell users: 1. They can write new editor commands in a language they're already comfortable with. 2. These same editor commands can be made available in the PowerShell ISE and any other editor where our language service ([PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices)) is used.  Would you be willing to accept a pull request from me to enable this after the appropriate design discussion has taken place?  Thanks!"
9225|"If any _rustacean_ comes this way, as @colinbate suggested, I changed line 305 on `rust.json` to say:  ``` ""match"": ""(\\+|->|<=|>=|=>|>>|<<|==|!=|&&|-|/|\\*|=|\\^|&|\\||!|>|<|%|::|\\bas\\b)"" ```  > _Note:_ On OSX the syntax file is under `/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/extensions/rust/syntaxes/rust.json`  cc: @alexandrudima"
9226|![screen shot 2016-02-12 at 11 15 17 am](https://cloud.githubusercontent.com/assets/607534/12998062/31d53cca-d17a-11e5-81dc-43c98bf4e279.png)  OS X Yosemite. The same behaviour in Ubuntu 14.04. VS Code version is 0.10.8
9227|The functionality for reporting telemetry only supports application insights pipeline, so I suggest calling it something explicit as `aiKey`.
9228|@joaomoreno I am looking and saw lots of atom/electron issues that had the same error message. Not really sure if this is something to worry about, maybe ask someone in the electron team?
9229|+1 yes please
9230|> Maybe cloning the markdown preview is the place to start.  well this is where it started :smile:, need to understand the differences with regard to JS handling in the two implementations.  As a workaround you could already do the d3 things using the markdown preview as is done in the twitter extension, but we should really get this to work.
9231|"Node allows ranges as documented https://docs.npmjs.com/files/package.json#engines.  ``` json {      ""engines"" : {          ""node"" : "">=0.10.3 <0.12""      } } ```  Would be nice if it was supported the same way.  ``` json {      ""engines"" : {          ""vscode"" : "">=0.10.3 <0.10.6""      } } ```"
9232|Oh, I could repro now, but only if I hold the mouse down on the icon for like 200ms.
9233|Oh wow, that's it. It seems to be an issue with the (or my) Surface Pro 3's touchpad. If I use an external mouse it works fine (unless I hold the mouse button down, as you say).  Edit: and if I click on the touch pad instead of tap, and do it very quickly, then it works too.
9234|@mantlebee  I did this change intentionally, is it that most other editors reseed the search string on `Ctrl+H` ?
9235|@be5invis What OS are you on?
9236|@Zoltu Use the [EditorConfig](https://marketplace.visualstudio.com/items?itemName=editorconfig.editorconfig) plugin from `EditorConfig` itself. Global settings being `auto` are supported since `v0.2.2`.
9237|+1 An option to change the default on Windows would be nice.
9238|@amamut Is it possible you hit #2829  (i.e. if you try one of the workarounds is this reproducible?). Otherwise (if this still occurs after applying one of the workarounds), can you please share your settings? (i.e. do you use formatOnType)
9239|+1
9240|duplicate of https://github.com/Microsoft/vscode/issues/2856
9241|fyi @jrieken
9242|:+1: We really need to allow configuration of language mode resolution
9243|fyi @bpasero
9244|This issue was moved to Microsoft/TypeScript-TmLanguage#85
9245|This issue was moved to Microsoft/TypeScript-TmLanguage#86
9246|VSCode has only an output window for tasks. It isn't a real console. Currently we don't have any plans to integrate a real console into VSCode.
9247|@joaomoreno I can reproduce this on our nightly. Not consistently, but most of the time clicking the 'i' make the suggest widget close.
9248|Pretty sure this is caused by a wrongly configured php executable. I should protect against this.
9249|Great!  @egamma FYI: the problem disappeared after reinstalling tslint. There might be an issue there.
9250|I see. Would be nice if a task could timeout after a set time of inactivity.
9251|Looks great, I've merged it so I can contribute on top of it.
9252|I've changed how the size of the deb package is counted from going straight to disk to doing it live from the stream: 5d787e0cb4
9253|I forgot to mention: it happens in 0.10.8-insiders as well as 0.10.8.
9254|Also moved the `out-linux` to `.build/linux`: 9433f3f98f9e9  This is just where I want to start moving the build stuff, there's no way you would've known that. :+1:
9255|"+1; I found this issue because I was hoping to just set arbitrary colors/styles on folders/files, including those related to `.gitignore`.  To expand on @TheColorRed's example:  ``` Folders => bold  Folder `node_modules` & children => npm logo red Folder `controllers` & children => blue Folder `models` & children => green Folder `views` & children => gold  Files in root, folder `dist` & children, specified by `.gitignore` => light grey  git file updated => blue underline git file added => green underline ```  I envisioned a place to put our own styles, `explorer.css` or something:  ``` css .folder, .file {     color: inherit; /* Assuming tree has them nested in DOM */ } .folder {     font-weight: bold; } .folder[data-name=""node_modules""] {     color: #CB3837; } .file.project-root, .git-ignored, .folder[data-name=""dist""] {     color: lightgrey; } .git-added {     text-decoration: underline;     text-decoration-color: green; /* not supported yet, workaround/hack not relevant */ } /* etc. */ ```"
9256|There is an additional issue with modules loaded using SystemJs, where I get the red squiggle, and incorrect path when Ctrl-Click. However, I suspect this is a TypeScript issue, as tsc reports error TS2307: Cannot find module
9257|Which OS?  If Code reports `This workspace isn't yet under git source control.`, then it can easily find git itself. No need to set the `git.path` setting.  Are you sure you opened VS Code on the folder that is the root of the git repository?  For example, I have a `Work` folder in which I have many git repositories, e.g. `Work/vscode` is one of them. Opening the `Work` folder with VS Code will not work. But opening `Work/vscode` should work.
9258|I've also moved `loader.js` to `src/vs/workbench/electron-main/cli.ts`, thus converting it to TypeScript: 8626f24faae  Also created a `src/cli.js` which can be used to bootstrap the whole thing from any platform.
9259|Hi **@bbenoist**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
9260|PR somewhat related with https://github.com/Microsoft/vscode/issues/1651 but does not really closes it.
9261|@dbaeumer thanks, these exceptions are caused by tslint crashes. I've protected vscode-tslint from crashes in tslint.
9262|"@Thaina Please try editing your keyboard shortcuts to add the following to `keybindings.json`:  ``` { ""key"": ""tab"",                   ""command"": ""tab"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible  && !editorTabMovesFocus"" }, ```"
9263|Very nice and the folder regions are even remembered.  I find it somewhat stressful to hit the twisties, they should have a larger hit target area.
9264|The folding regions following the above comment are also incorrect
9265|This bug doesn't always occur. I debugged another project (which is plain JavaScript) and it was working fine.
9266|Ok thanks!
9267|+1 Same here, working with Mercurial a lot.
9268|"It affects all color schemes. It happens after any < or > sign that not divided on left side with a space i.e. if you will write ""i < some.length"" there will be no problems."
9269|"@alexandrudima I do not use formatOnType. So workaround #1 fixed the weird combination tab and space indenting. The culprit could be `""files.autoSave"": ""onFocusChange""` as the workaround made me comment this line out.  However it did not fix the single space on a line bug where it indents to the first indent spot encountered.  It may be useful to add that I am also using **OSX El Capitan 10.11.3**."
9270|Along the lines of what @egamma said: To me, the glyphs seem overly inconspicuous.  Maybe a bit larger in size would help with the hit area?
9271|Extension not installed. No option to install extensions
9272|"I have tried and getting error as :  ```  `npm ERR! Windows_NT 6.1.7601 npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\ node_modules\\npm\\bin\\npm-cli.js"" ""run"" ""postinstall"" npm ERR! node v5.3.0 npm ERR! npm  v3.3.12  npm ERR! missing script: postinstall npm ERR! npm ERR! If you need help, you may report this error at: npm ERR!     <https://github.com/npm/npm/issues>  npm ERR! Please include the following file with any support request: npm ERR!     C:\Users\skhan\Dropbox\code-settings-sync\npm-debug.log` ```"
9273|"I found another bug caused by the same reason. If we execute the following `test.command2`:  ``` typescript let chan = vscode.window.createOutputChannel('Test'); vscode.commands.registerCommand('test.command2', () => {     chan.append('1');     chan.append('2');     chan.clear();     chan.show(); }); ```  then, an ""Output"" pane shows `2` unexpectedly, and what is worse, it always happens regardless of whether the ""Output"" pane has already been opened or not."
9274|HI
9275|And (I think finally) made the whole process quality-dependent: 771257c5. This will let us install Alpha Insiders and Stable side-by-side.
9276|"You have to add the postinstall script manually to the existing scripts section in the package.json  ``` json ""postinstall"": ""node ./node_modules/vscode/bin/install"" ```"
9277|This is by design, for back ground pls see https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005.  But you can tweak this in the product.json.
9278|I agree with @mantlebee, it seems to be a wrong behaviour to me.
9279|> There is an additional issue with modules loaded using SystemJs, where I get the red squiggle,   For this issue can you please try to reproduce it using salsa the new JS infrastructure: https://code.visualstudio.com/Updates#_javascript-salsa-preview
9280|I saw that - I was just a bit too quick on the comment trigger.
9281|"I spoke with @zersiax earlier today and discussed what we should do in the debugger. Here are my notes. Florian, please feel free to add or comment if I missed anything or got it wrong 1. After pressing F5 to launch the app under the debugger the debugger should announce ""Debugger launched"" before the app starts up and the screen reader starts announcing from the app. 2. When a breakpoint is hit, we should announce ""breakpoint hit filename linenumber"". If it's a conditional breakpoint, announce ""conditional breakpoint hit filename linenumber"". We discussed whether or not to announce the conditional expression but thought that it might be too verbose to do so. 3. Each time execution moves from one breakpoint to another, or each time a breakpoint is hit, there is a lot of text announced. The main window title is announced, followed by the file name. Then ""Text file editor, press Alt+F1 for more info"". We don't need to announce this each time and should focus on announcing that a breakpoint was hit. 4. Inside the debug viewlet, when browsing the list of variables we should reduce the verbosity as much as possible. For example, consider just announcing the name of the variable or field rather than prefixing it with ""variable"""
9282|Ahhhh sorry, I left out the OS! I even tried to be as clear as possible haha. I'm on Mac! As for the last part you described, yes it's in `goadesign/goa`, for example, where `goa` is the git repo.
9283|And you do open the `goa` folder in VSCode, as in `File > Open` and select the `goa` folder?
9284|@alexandrudima Thanks but it still didn't work
9285|Yep
9286|This issue was moved to Microsoft/TypeScript-TmLanguage#87
9287|@amamut Indeed, only empty lines get indented straight to the right place -- https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/controller/oneCursor.ts#L1284  I can enhance that logic to also do it for whitespace only lines.
9288|@warpdesign Can you scroll up and find the first occurrence where things get the turquoise color? Could be the < or > as @SDemonUA says, or the use of a keyword as a function name.
9289|Which git version do you have? What exact output do you get when running `git status` in the `goa` folder?
9290|Commit be4a1ef adds an executable `code` which allows me to do this:  ``` → /Applications/Visual\ Studio\ Code\ Alpha.app/Contents/Resources/app/bin/code --help Visual Studio Code v0.10.9-alpha  Usage: code [arguments] [paths...]  Options:     -h, --help     Print usage.     --locale       Use a specific locale.     -n             Force a new instance of Code.     -v, --version  Print version. ```  Pretty cool. Now we just need a way to place a symlink to this executable somewhere in the `PATH`.
9291|@alexandrudima I feel that would make the most sense.
9292|@aeschli I checked and it's `j<datas` that triggers the bug. Writing `j <datas` instead fixes the problem.  Is this being worked on ?
9293|"I have added in scripts. ""scripts"": { ""postinstall"": ""node ./node_modules/vscode/bin/install"" }   ``` > code-settings-sync@1.0.1 postinstall C:\Users\skhan\Dropbox\code-settings-sync  > node ./node_modules/vscode/bin/install  module.js:328     throw err;     ^  Error: Cannot find module 'semver'     at Function.Module._resolveFilename (module.js:326:15)     at Function.Module._load (module.js:277:25)     at Module.require (module.js:354:17)     at require (internal/module.js:12:17)     at Object.<anonymous> (C:\Users\skhan\Dropbox\code-settings-sync\node_module s\vscode\bin\install:4:14)     at Module._compile (module.js:398:26)     at Object.Module._extensions..js (module.js:405:10)     at Module.load (module.js:344:32)     at Function.Module._load (module.js:301:12)     at Function.Module.runMain (module.js:430:10)  npm ERR! Windows_NT 6.1.7601 npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\ node_modules\\npm\\bin\\npm-cli.js"" ""run"" ""postinstall"" npm ERR! node v5.3.0 npm ERR! npm  v3.3.12 npm ERR! code ELIFECYCLE npm ERR! code-settings-sync@1.0.1 postinstall: `node ./node_modules/vscode/bin/i nstall` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the code-settings-sync@1.0.1 postinstall script 'node ./node_ modules/vscode/bin/install'. npm ERR! Make sure you have the latest version of node.js and npm installed. npm ERR! If you do, this is most likely a problem with the code-settings-sync pa ckage, npm ERR! not with npm itself. npm ERR! Tell the author that this fails on your system: npm ERR!     node ./node_modules/vscode/bin/install npm ERR! You can get their info via: npm ERR!     npm owner ls code-settings-sync npm ERR! There is likely additional logging output above.  npm ERR! Please include the following file with any support request: npm ERR!     C:\Users\skhan\Dropbox\code-settings-sync\npm-debug.log `` ```"
9294|Thanks @mkosieradzki !
9295|I get this when I try to open the type definition of a built-in js method like Date[...] or console[...]: `Unable to open 'lib.es6.d.ts': No model with uri 'ts://defaultlib/vs/text%21vs/languages/typescript/common/lib/lib.es6.d.ts' nor a resolver for the scheme 'ts'..`
9296|`git version 2.5.4 (Apple Git-61)` `hub version 2.2.2`  `~/g/s/g/g/goa ❯❯❯ git status` `On branch master` `Your branch is up-to-date with 'origin/master'.` `nothing to commit, working directory clean`
9297|@alexandrudima Alex, FYI
9298|"Noticed another crash yesterday evening when I tried to bring up a second file which was a stylesheet.  I will say that the plugin crashes seem more prevalent when I have one window that's displaying an initial type of file like HTML or JavaScript and then I use Finder to attempt to ""Open With"" VSCode a file that would require a different plugin in order to view it.  One thing that appears to be throwing more crashes is the following workflow:  1) cut some text from a .jade VSCode session and 2) paste it into a stylesheet VSCode session.  When I say session I mean distinct VSCode windows/instances.  I'll continue to keep some amateur statistics on this to push the envelope to get it to consistently break."
9299|I had the same issue a while back when I was working on a PC.  I had to resort to bypassing the checks even though my Git was configured to normalize line endings.  Also one of the files didn't have a copyright, but it was that way from the beginning, so that was preventing me from committing as well.  Thanks for reporting this issue. It's good to address the source of the problem :+1:
9300|can you run `npm install` and try again, pls.
