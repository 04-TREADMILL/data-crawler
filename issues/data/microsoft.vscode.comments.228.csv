22701|@aeschli  Sorry, but I tried many times uploading screenshots and it all failed... If you'd like, I can send it to you as an email.
22702|I am using ps1 on a daily basis. Double-click in File Explorer opens PowerGUI Script Editor. After installing Visual Studio Code and PowerShell add-in double click opened Visual Studio Code and PowerGui and PowerShell menus were not visible.After change in registry menu items were restored and PowerGui menu is a default again.  I don't think, that I done anything else related.
22703|Progress so far?
22704|@Tyriar Yes, I ran the test in a VM.
22705|@kieferrm anything Chromium-based behaves pretty poorly in a VM I find, `--disable-gpu` or `--disable-direct-write` normally help the problem.
22706|Duplicate of #6738
22707|From @kieferrm in #6846   > OS: Windows >  > 1) open the built-in terminal  > 2) run command that produces a bunch of output such as 'npm list' or cat a file > 3) try to scroll up to reveal text that was already scrolled out of sight > -> content is scrolled to the left (and then gets stuck) > -> there is no reliable way to get the terminal back into a 'normal' state; sometime Enter works, sometimes not >  > Here is a [screen recording](https://www.dropbox.com/s/y0x7m77ys8xne3v/scroll-issue.mov?dl=0).
22708|@Tyriar we should verify that we don't have the issue when not running in a VM. This is the only part of vscode I have experienced issues with running in a VM. Everything else is fast and smooth.
22709|There is no `%SystemRoot%\sysnative`, `%SystemRoot%\SysWOW64\WindowsPowerShell\v1.0\powershell.exe` however does exist but it still prints out the PSReadline warning.
22710|Wallabyjs offers the ability to display a screenshot of the last screen in the unit test in other GUIs (WebStorm, etc.). We really want this functionality in our preferred code editor VSCode as well.
22711|I'm assuming you need the .exe because the smarts to check for .bat, .cmd, .exe, etc. are built into `cmd`, not Windows. I'd prefer not to work around this on our side.  The blinking/locking up thing is fixed now https://github.com/Microsoft/vscode/issues/6683
22712|Duplicate of https://github.com/Microsoft/vscode/issues/313
22713|@kieferrm I've tested the terminal on Windows 10, OSX and various Linux distros and haven't seen anything like that. I worked on a VM for a month or 2 and saw that sort of thing all the time in VS Code, Atom and Chrome.
22714|This actually never worked on Ubuntu with the default settings. This is a duplicate of #3091
22715|I don't understand why `code .` returns immediately, so does `code . & echo test`, but `code . & exit` or `code . && exit` waits until vscode terminates...?
22716|The dev who built to very popular Python extension just came out with a Java debugger, you might want to check it out https://marketplace.visualstudio.com/items?itemName=donjayamanne.javadebugger  @bpasero should we close this?
22717|Duplicate of #3130, copied your comment over
22718|"From @ChristopherHaws in #6853   > - VSCode Version: 1.1.1 > - OS Version: Windows 10 Pro >  > In Visual Studio (full version), I tend to turn off the Ctrl+LeftMouseClick go to definition feature. I personally prefer to have Ctrl+LeftMouseClick select the entire word under my mouse cursor. >  > From what I can see, mouse events are not configurable at the moment, and they are also not possible to override with extensions (to the best of my knowledge). It would be really nice to have a mouse mapping configuration file. Sublime Text has this (although it is sort of a hidden feature that is not exposed through the UI). Just as an example, my sublime text mousemap file looks like this: >  > ``` json > [ >     { >         ""button"": ""button1"", ""count"": 1, ""modifiers"": [""ctrl""], >         ""press_command"": ""drag_select"", >         ""press_args"": {""by"": ""words""} >     } > ] > ```"
22719|@joaomoreno  There are many filesï¼ŒI do not know the specific number ![2](https://cloud.githubusercontent.com/assets/8943787/15527960/f9884fc6-2271-11e6-8f2b-3cf71ec48ed9.png)  all files in the picture
22720|+1
22721|I am using the default terminal on Mac OS.
22722|@bgashler1 makes sense, I would think this to be rather an issue with VS Code loosing file events than being related to the tabs work.
22723|Same inside the editor too which is a bit annoying. Plus it's not monospace, not sure if that's an issue or not.  ![image](https://cloud.githubusercontent.com/assets/2193314/15528873/02599490-21fd-11e6-97eb-c754ce24a928.png)
22724|@alexandrudima ping, should we show the Alt+F1 help only once the first time the user clicks into the editor?
22725|@stevencl @bgashler1 I wonder if the user has tabs disabled if we should always just open tabs at the end of the list, similar to working files. Because if tabs are not enabled, the only spatial order that you have is the one in opened editors and there it might make more sense to always open at the end.
22726|Reproduces in stable already.
22727|"Might I suggest: https://github.com/shockone/black-screen  It's an electron/react app that seems to do a really nice job of enhancing the traditional TUI. I haven't had a chance to try it, but never have I seen anything coming close to bridging CLI and GUI. This is really fkn cool, Imagine that intergrated with VS Code!  That project appears to be pretty mature, and it's even written in typescript! :wink: TBH, I don't know anything about the Electron api, but I would assume(/hope) that it would be possible to run that console in an isolated process, which renders its gui to a container docked within the VS Code editor . Then create some mechanism to enable communication between the editor/terminal via some new IPC interface. But then again, it might just be easier to merge the two projects completely, I don't know enough about either backend to offer any meaningful conjecture on the implementation....   However, I recently started using ConEmu, which has this render to pane feature and it's awesome. Yet, the two apps are oblivious of each other. There is no _out-of-the-box-way_ to facilitate communication between the two. Just to launch a task I would have to write some contrived daemon that runs in the shell waiting for vsc to run some other script that _pokes_ that daemon into performing some action within the active shell... yuck. :hear_no_evil: Imagine a unified workspace / intellisense bridging that gap. **damn.**  ### Few cool features (but definitly checkout the repo itself!!)  Intellisense-esque completion when typing into the shell (and theres is  a custom completion provider api in `black-screen`)  ![intellisense-esque completion in shell](https://raw.githubusercontent.com/shockone/black-screen/b946b041a0fa4198f76826351fb427d48ed8dcfb/README/main.png) JSON explorer like in chrome devtools: ![JSON explorer like in chrome devtools](https://raw.githubusercontent.com/shockone/black-screen/59aaf2c14c243469b4bedb8bb453a8e343a6d0fc/README/json_decorator.png) Still works with your favorite tools: ![Still works with your favorite tools](https://github.com/shockone/black-screen/raw/59aaf2c14c243469b4bedb8bb453a8e343a6d0fc/README/htop.png)  Obviously this would be a wayyyyy larger investment (in terms of manhours) than `term.js` but the possibilities are mind boggling when you consider some of the possible workflows you could set up with this...  My friends, just.......<img src=""https://data.whicdn.com/images/231792319/large.gif"" width=""150"" align=""middle""/>"
22728|@bgashler1 maybe you could advise if there is a CSS way to make this better. I do see that the font moves and seems to change its visual font-weightness once it turns italic but I am not sure how to prevent that. Unless we want to play with opacity.
22729|In CSS we treat all variables as global as it is hard to compute scopes. Scopes are known only during run time. For eg: class 'a' and class 'b' can be in hierarchy if corresponding DOM elements are so.   Since all variables are global go to definition will always go to one of the declarations if there are many.  Hence closing this.
22730|duplicates #6748
22731|duplicates #6754
22732|I do not think we are currently supporting imported variables. Making it a feature request.
22733|I am working on it, but I need to clean up quite some code before publishing the API, as my hope is to keep it as stable as possible. The file at https://github.com/Microsoft/vscode/blob/master/build/lib/monaco-editor.d.ts is generated from our sources and our sources need to be in a good shape before releasing it.
22734|Its a good suggestion to show some information about the variable where it is used. It would be hard in cases where they are imported.
22735|"@bgashler1 interesting idea, if I understood you correctly, we would keep an empty slot for each possible preview editor. It would look like this:  ![editors](https://cloud.githubusercontent.com/assets/900690/15530504/056c0ed0-2255-11e6-931b-83549086cf43.gif)  While it fixes the issue with annoying double click behaviour, it almost looks like a UI bug that we would grow the ""Opened Editors"" view with an empty element inside.   Let's discuss this in the next planning meeting :)"
22736|I do not think there is intelli-sense support for functions in CSS. This would be a good one to provide that.
22737|It's just that it's hard to identify when that situation occurs (double click on OS X, or Linux even).  Yes, you should point to `/home/saml/opt/VSCode-linux-x64/bin/code`. Note that you no longer need a custom alias; when installing code via the `deb` or `rpm` package, you'll get a global alias pointing to the right place.  `VSCODE_CLI` isn't set in the shell script, but in the JavaScript that follows it.
22738|I think #1231 is the best way forward, we need to have VSCode specific themes. I was suggesting TM themes as they have an open format, but you have a very good point: lots of people would like to have a vscode theme A (that changes file explorer colors, terminal colors (maybe even icons?), etc.) + a TM theme B (that changes tokens, selection color, etc).  My recommandation for now is to remove the colors from the settings, and maybe increase the priority of #1231.  @aeschli Your thoughts?
22739|Thinking about desktop terminals, such as iTerm, I can only close them via a global shortcut, an `X` button or running `exit` in the shell. <kbd>Escape</kbd> should not bubble outside to the workbench.
22740|I'll see what June allows
22741|Ok, I didn't know that the **file version** was shown more often...
22742|@roadyyy would you be able to write a simple node.js script using `fs.writeFileSync()` API to see if it reproduces with node.js already?
22743|Looks like this is not working for any variables across CSS, SASS & LESS
22744|That's in line with @stevencl suggestion. I have created a separate issue for this: https://github.com/Microsoft/vscode/issues/6857
22745|@stevencl @kieferrm fyi
22746|@jrieken Thanks! No rush, I think I found a good alternative by essentially wrapping the image into an HTML page and displaying the HTML document with the `vscode.previewHtml` command (and custom content provider).  ![vsc](https://cloud.githubusercontent.com/assets/979966/15530755/9ca76c7e-2299-11e6-810b-605beaad59dd.gif)
22747|Ok, no real difference in the `PATH` variable there.  It's like `xcode-select` sometimes fails and sometimes succeeds...  There are two possible workarounds here: - [Run `xcode-select -switch` once](http://stackoverflow.com/questions/17834272/xcode-select-switch-doesnt-work) - Install Homebrew and with it install git.
22748|Will just close it. Feel free to reopen if it happens again.
22749|I do like the ellipses - it nicely represents the fact that there is more/a context menu. The issue is that the down arrow has the same meaning to me. So, I think we should have the down/double down arrows.
22750|`previewHtml` FTW
22751|"I've looked at the code and improved the keybindings rule for 3 find related keybindings.  The ctrl+enter has a simple explanation. It is something ""built-in"" to the replace input. Similar how Enter on the find field goes to next match, Shift-Enter goes to previous match, how Enter on the replace field replaces next. They are not configurable, if the need arises for Enter to do something different while in those two input fields, we can dispatch those keys also through the keybinding service. The explanation in code at https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/find/browser/findWidget.ts#L314 and https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/find/browser/findWidget.ts#L343  The keybinding you see when you hover over the replace all (Ctrl+Alt+Enter) works even when focus is outside the find widget (i.e. in the editor) and can be rebound:  ``` { ""key"": ""ctrl+alt+enter"",        ""command"": ""editor.action.replaceAll"",                                      ""when"": ""editorFocus && findWidgetVisible"" }, ```"
22752|@bgashler1 maybe related to https://github.com/Microsoft/vscode/issues/6759
22753|@M-Zuber Which view has the focus when you press tab? If it is in an editor, what type of file is it (JavaScript, HTML...)?
22754|duplicate of #6371
22755|It seems that the `MOZCONFIG` variable is there in all situations, even when run from that task... I thought you mentioned in the first post that that variable is not set when running within a task? Do you mind adding an `env` to the `options` of this sample task, similarly to your real life scenario? Maybe we'll find that there the `MOZCONFIG` variable would not be set...
22756|On a clean open of Code, blank file with focus on the file.  But it happens with almost any extension - js, ts, html, cs
22757|The error message is likely not related, but also very interesting. To find out more about it we would need the content of the file at that time.
22758|I assume this is about printing in the console view.
22759|The socket files are not stale... OS X and Linux simply do not delete them on shutdown, but on startup. They can be deleted since @lucnoc was able to do so manually.  The shared process seems to be not launching at all in your system... since you never mentioned the existence of a `/var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock` file. Can you check if such a file is around? Notice the `-shared` part.
22760|I could not get it to work
22761|"I propose the following:  **Ctrl+Tab** We allow to type something like `edt <left|center|right> <name>` to open a file from a group. We keep MRU sorting.  **Cmd+Alt+Tab** We change this to `edt <name>` to pick an editor from any group. We keep spatial sorting.  **Cmd+P** We do not change the behaviour from how it works today."
22762|There are two kinds of verbose here. Do you want to see our own messages or do you want to see Electron's messages? Or both?  cc @bpasero
22763|That's what the user already has.
22764|We should never expose the chrome/electron messages. --verbose is for additional logging in VS Code.
22765|**verifier**: run a reference search that yields in no result.
22766|Not trivial, since that location is set by Electron.
22767|Is there anyway I can help? (I would need some basic instructions how to setup though)
22768|We talked about this and while it seems like a good solution for users, it hides the fact that we crash. I hope that with the tabs work we can improve this because closing an editor will cause memory to get freed.
22769|"If so, what would this do?  ``` --install-extension foo --uninstall-extension bar ```  Should it install the extensions `foo`, `--uninstall-extension` and `bar`?  Typically, command line parameters have a fixed number of arguments. This is the reason why you must run `git commit -m ""hello world""` instead of `git commit -m hello world`: when the amount of parameters is unbound you'd need to delimit it somehow.  I keep my proposal of supporting both multiple flags or multiple arguments separated by spaces and surrounded by quotes."
22770|@pcherkasova sorry to hear that. first thing to try out is if you are able to reproduce this with some reliable steps.   Next time it would also be interesting if the file contents on disk are really the same version as remote. In the end VS Code will always try to fetch the contents from disk if it sees that the modification time is different. Could it be that the modification time did not change for some reason?
22771|Currently you are able to navigate between the debug views by pressing ctrl + shift + D and than tab between views. Ctrl + shift + D will focus the first view, or the last focussed view if there was some. I think this experience is not that bad.  @kieferrm Are you looking for something that would for instance focus the breakpoints view directly?
22772|I'll leave this unimplemented for now. These flags were introduced for people to automate integrations. They like a way to install extensions programmatically... it's not really meant for more users, sicne they have the in-product experience.
22773|fixed by https://github.com/Microsoft/vscode-extension-samples/commit/aa698ac289915429556b462b75fb3a5a3cc901dd
22774|@alexandrudima Seems like Code fails to load it when the publisher starts with a digit? ðŸ˜•
22775|@aeschli sorry, the title might have been misleading. I've changed the title to hopefully reflect better what I mean.  Unless you are saying, there's no need for a wiki page?
22776|"Open a Terminal on your empty folder. Run `git status | wc -l`, which will tell you approximately how many changes there are in your git repository."
22777|I would keep away from separate behaviours when certain things are enabled or not. Remember that it has repercussions on others features such as <kbd>Ctrl Tab</kbd>.
22778|@jrieken oops, I just noticed another inconsistency and added it here while you were closing this...
22779|Interesting... but doesn't it look ugly?
22780|@joaomoreno actually Ctrl+Tab moves in MRU order, so the spatial order does not make any impact here.
22781|The extension will keep installing while Code is running. If you shutdown Code, it will stop obviously. If you reload your window or open a different folder with it, it will continue installing.
22782|This PR exposes it.
22783|"""integratedTerminal.ansiColors.brightBlack"" ""integratedTerminal.ansiColors.cyan"" ""integratedTerminal.ansiColors.blue""  I also think it make no sense to have these colors as user settings. A user would not choose to have 'blue' being a red color. VS Code should define these colors, in three flavors, for the light and dark and hc_black (high contrast) base theme.  I agree that once we add theming the workbench we can look into this again.  Also in general, let's not add a configuration setting before we get multiple requests for it. We want to keep the number of settings small to keep the product slick and avoid feature creep."
22784|ok - reopen
22785|The extension host finds the extension and correctly calls into the theme contribution point. I've added `console.log('DETECTED THEMES: ' + extensions.map(e => e.description.id));` at https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/themes/electron-browser/themeService.ts#L117 and the extension is correctly passed to the theme extension point.  Forwarding to @aeschli as it seems to be a theme specific issue.
22786|Assigning first to @weinand to see if we can extend the protocal such that output events could have source and line. If we have that the debug console could render this source to the side like chrome does it
22787|"@Sampo123 can you reproduce the formatting problem locally. If so can you please do the following. - enable TS/JS logging via the setting:  ``` json {     ""typescript.tsserver.trace"": ""messages"" } ``` - open the JS showing the behavior - Bring Output view to front - switch to channel typescript - format the file - attach the output to this issue."
22788|This issue was moved to Microsoft/TypeScript#8805
22789|Hey,   Thanks for your replies. I'll do that and get back to you this evening. I'm on other projects today so I'll need to do this when I get off so I'll try to get back to you later today, like in 7 hours or so :)
22790|Yes, currently the debug hover has fixed horizontal size. For inspecting long variables we recommend using the debug console.
22791|@cliffowen Now that I think about it, maybe you need to press `NumLock`? `NumLock` toggles the numpad9 to be page up.  @aeschli Can you please help me out and confirm this is indeed a bug -- you use a mac with an external keyboard I think?
22792|"Yes, debug console currently has limited ansi support. We recommend using `""externalConsole"": true` in your `launch.json` to use the native console for full ansi coloring."
22793|We removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22794|We removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22795|Note that we removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22796|We removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22797|We removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22798|I know that I can use external console, but it's not so useful.
22799|dup of #6760
22800|@weinand Andre has a external keyboard with numblock.
