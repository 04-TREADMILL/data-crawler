12501|Here are some options.  Please let me know your thoughts.  I also took a stab at making it more intuitive to **deactivate all breakpoints** and to visually make it more clear how that's different from **enable** or **disable** breakpoints.  ## 1) Icon for breakpoint type; keep current UX  #### A) Show all breakpoints  ![01 show all](https://cloud.githubusercontent.com/assets/11839736/13655642/ba4e0bb8-e615-11e5-917c-57bd3879b351.png) If we choose Approach # 1, then this is my recommendation.  In this case, adding icons for all breakpoints will visually separate exception settings from the list of individual breakpoints.  #### B) show only non-standard breakpoints  ![show-only-non-standard-breakpoints](https://cloud.githubusercontent.com/assets/11839736/13655749/af50a436-e616-11e5-8aa4-18e80e56a5f2.png) This is visually less noisy, but if we're going to do this I would recommend applying it to Option 2 or 3 below, because otherwise the breakpoints in the list can blend too much with the exception settings.  ## 2) Add a parent node to deactivate all breakpoints  (animated GIF) ![03-hierarchy-uncheck-02](https://cloud.githubusercontent.com/assets/11839736/13656136/1000fd38-e619-11e5-90be-86213cec02eb.gif)  ## 3) Divide breakpoints from exceptions; visual toggle to deactivate  (animated GIF) ![04-divide-breakpoints-and-add-toggle](https://cloud.githubusercontent.com/assets/11839736/13656140/15a2e9ae-e619-11e5-852e-b942c5859d1d.gif)
12502|Not sure what you mean. Do you mean `ctrl+k+down` or `ctrl+p` and then `~`? Anyway, `ctrl+k+down` cycles down through the _working files_ but without the nice UI dropdown list that is right in front of my eyes. Instead I have to look to the upper left of the screen which is great deal slower once you get used to use _recently opened_.  My point is, that _working files_ **is** my recent files because each file I open ends up in the _working files_ list. The UX for _recently opened_ files is extremely well done but lack the ease of removing files I don't want to cycle through.  So vscode has two almost identical features, where one is easy to manage (_working files_) and the other is easy to use (_recently opened_).  Why not merge the two features?
12503|Just to be clear. Don't change the UI. Just keep _working files_ and _recently opened_ in sync. Try it out in a beta. I'm sure it will prove to be a very nice UX
12504|:+1: I just ran into this same problem and adding `jsconfig.json` _and restarting VS Code_ indeed fixed IntelliSense. Is this by design?
12505|"@isidorn: do you mind handling this?  With the way VS Code is implemented, this is the best I could do without really going deep under the hood (see my previous comment).  It's odd that mine never showed up as blurry as yours:  <img width=""394"" alt=""screen shot 2016-03-09 at 5 15 56 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/13656315/a56c018c-e61a-11e5-921e-6c2f7ab89a2f.png"">  Anybody else have this issue?"
12506|@alefragnani: this is probably due to it being displayed as a background image when a CSS rule is overriding it.  We use a lot of `::after`/`::before` pseudo elements to force icons to display in high-contrast mode on Windows within the Monaco editor instead of background images (since Internet Explorer used to wipe out background images in high-contrast mode).  Then, sometimes, we hide those background images because they would be ghosting behind the pseudo elements.  We're going to get away from this hack soon and use a better method that is much more clean.  In the mean time, could you web inspect using **Developer Tools** in the help menu to where it should be showing up while in the high-contrast theme.  I'm curious if there's a `background: none` that's wiping it out in high contrast theme.  I would love to help you get a fix soon.
12507|We're addressing this in the upcoming release.  Thanks for the feedback!
12508|Well, whatever you guys end up choosing, you might want to shift the text by 1px or so. It makes option 3 look odd to me and causes text to overlap the selected line box too. ![line_overlap_14pt](https://cloud.githubusercontent.com/assets/1007463/13656927/5ea5b410-e628-11e5-91c4-64ac979081f4.png)
12509|"Hi @bgashler1 ,  I don't see any `background: none` in there, I'm sorry. But maybe is my fault, because I'm just starting to play with CSS and the Chrome Developer Tools :smile: .  But I found something weird in _Inspect_ while switching themes, that could help. This image below shows the _normal theme_ and the next one, the _high contrast_. I noted that when I choose the _high contrast_, an element (`media: ""screen""`) is removed. The _breakpoint_ icon, on the other hand, still works in _High Contrast_, and a similar element to that `media: ""screen""` is not removed. I hope this could say something :)  ![guttericon missing - webinspect - normal theme](https://cloud.githubusercontent.com/assets/3781424/13657629/7efba586-e64f-11e5-8e89-e7becab81cf7.png)  ![guttericon missing - webinspect - highcontrast](https://cloud.githubusercontent.com/assets/3781424/13657784/b433f5ae-e650-11e5-9f6a-9ca0e924a4d7.png)  By the way, the problem is happening with my **Bookmarks** extension. Maybe installing it could also help you inspecting the CSS.  Thanks in advance"
12510|The first option in option 3 looks the best to me, maybe giving 1-2px left-padding to the text area as @mattacosta mentioned. Not sure which shade works best, it needs to look good across themes. [You can do it with a tmTheme in Sublime apparently](https://sublimetext.userecho.com/topics/2820-use-separate-colors-for-the-background-gutter-and-folder-tree/).
12511|@egamma removing the red squiggles and entries in `showErrorsWarnings` (⌘⇧M) will help a great deal, catching `code` back up to `subl` in workability.  FWIW, `goToDeclaration` and `triggerSuggest` are still limping along. Nice work, that.
12512|+1 In HTML, newline character has a meaning. There is a case where at the time of formatting trouble changing the line break position.
12513|"I think with `npm run` you can pass additional arguments by appending `-- arguments`.  So how about `npm run debug -- --debug-brk=1234`? On Mar 8, 2016 10:23 AM, ""Andre Weinand"" notifications@github.com wrote:  > @jpierson https://github.com/jpierson I don't see how node-inspector > can help here? I'm looking for a way to pass a port number to an npm > script. Ideally something like this: >  > npm run-script debug port=1234 >  > VS Code would use this to pass a debug port to node and subsequently VS > Code would try to attach to that port. >  > And the npm script would look like this: >  > ``` > ""scripts"": { >     ""debug"": ""node --debug-brk=${port} program.js"", > }, > ``` >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2726#issuecomment-193877131."
12514|@bpasero  @aeschli I see now how theming worked with tm.  This evening I added the rework css parser which allows theming using css. This doesnt break tm themes. I've added an example 'monokai with icons' theme. The css selectors are controlled by a look up map and only those selectors can be used in css themes. ([attr=value] is allowed) I've also moved the filename to attributes in the file items so we can detect gulp, grunt and bower files etc...  **These are the allowed css selector\property definitions.**  https://github.com/pflannery/vscode/blob/file-folder-icons/src/vs/workbench/services/themes/common/themeCssService.ts  **Example theme using css for editor and explorer**  https://github.com/pflannery/vscode/blob/file-folder-icons/extensions/theme-monokai-with-icons/themes/theme-monokai-with-icons.css  **Example of css monokai theme with icons:**  ![untitled](https://cloud.githubusercontent.com/assets/1727302/13659233/2f0a82cc-e677-11e5-922d-456ae3f5eb0c.png)
12515|@nelsonlaquet you made a good point about the gulp, grunt and package.json files and thanks for linking the icons too.  I've updated my PR which puts the filename in to attributes allowing special icons for specific files.  I've also added support for css theming because I feel that this is the cleanest and simplest way to deliver this feature.  Check out my comments here for more info https://github.com/Microsoft/vscode/pull/3200#issuecomment-194656772
12516|Nice!  One thing though, I don't know if it's a good idea to tie icons directly in with the theme. I know that it works now, and it'll likely be the best solution until more work is done on Microsoft's side. However, I I find it likely that a person could really like a particular theme, but the theme's author either doesn't support icons, or supports icons that the user doesn't like.  Since the presence of icons doesn't affect anything structurally, I wonder how feasible it would be to move the concept of an icon pack outside of the theme infrastructure; so users can mix and match themes with icons. Of course, that would require much more code than simply hijacking themes.
12517|if your happy for this to happen then 1. we can add plugins like [css whitespace](https://github.com/reworkcss/css-whitespace) for optional nesting and [rework var plugin](https://github.com/reworkcss/rework-vars) for  css-next variables etc etc...  2. I can change the filename attribute to data-filename= for html validation 3. add some unit tests 4. squash to one commit  @nelsonlaquet yeah would be nice to be able swap out the icons only. I still think themes could still choose to provide their own icons to match their colouring styles.
12518|How easy is it to track the ticket's progress to the insiders channel? Maybe I don't have to wait a whole month for some #3804 relief.
12519|My 2c is for the line (second option in #3).  shading has a habit of not working well across monitors, projectors, viewing angles, ...  The line is simple and well understood IMHO
12520|Closing since it's not supported anyway.
12521|Super excited to see some progress on this!  I don't think themes are the right place to put icons though. The wrong icons would ruin a good theme and it would probably end up spawning a bunch of derivative themes just for icons: monokai-flat-icon, monokai-someother-icon, monkai-dimmed-flat-icon, ... You can imagine how it would get out of hand.
12522|@bgashler1  I hope option 3-1 (background-color) because: - It don't need moving a mouse cursor. - It works without depending on the code folding. It seems that the code folding works only **nested** indent.  For example, this is indented lines without nesting: ![s01](https://cloud.githubusercontent.com/assets/4763469/13660540/55f004aa-e6ce-11e5-8ead-08fc622e3448.png)  This is nested: ![s02](https://cloud.githubusercontent.com/assets/4763469/13660543/5d21ee64-e6ce-11e5-9fce-31c4d4098213.png)  Yes, indent lines without nesting might be strange, but that strange indent is not found. I mean, it should work without depending on the code folding. - We want to find out the edge of code area, not that something exists at there. Then a modest indication is better.
12523|Sorry all, my English is very poor... Can you understand my words?
12524|+1
12525|:boom: :+1:
12526|I agree with @anseki that there should be _at least_ a visual separation for the gutter. As an added plus, option 1 seems very enticing on paper (or rather, in the GIF).  The PR I've made enables the 3rd option - but right now it looks... not good... because the gutter border is sticking very near to the code, like in the mocks here. I'd love to improve that, but it seems I'll have to modify the monaco-editor code which puts some styles inline onto the gutter element, and it's a little daunting going through the whole typescript code. Some pointers as to where to look would help :)
12527|"In case anyone else was wondering, here's how I tailored the OS X instructions to work with my Linux setup:  ``` if [ -x /opt/VSCode-linux-x64/code ]; then   function code () { VSCODE_CWD=""$PWD"" /opt/VSCode-linux-x64/code ""$@"" & disown; } fi ```"
12528|Thank you! Works great!
12529|Thank you, @mattacosta for information. But how can i trigger the completion provider? :)
12530|@dotnetCarpenter it is `Ctrl+K Ctrl-P` to open the working files picker.
12531|Possible via https://github.com/Microsoft/vscode/issues/3612
12532|yes... most cases are when i am not even looking at the vscode window then after a while it happens. The normal memory use is around 100~130 MB and I haven't noticed any abnormal increase.  2016-03-09 23:57 GMT+08:00 Benjamin Pasero notifications@github.com:  > @AndyYSWoo https://github.com/AndyYSWoo curious, does it happen when > you are not adding any file to working files? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-194360285.
12533|Sounds good to me. However, for the next two weeks we are in endgame mode for build and are not adding new feature, we are mostly focussed on testing / fixing. I see this is assigned to backlog, so I assume this is post build - if yes, then I suggest we also do the PR post build.
12534|"The workflow to work with SharePoint Javascript, CSS, MasterPage, PageLayouts etc. is to map folder [site]/_catalogs/masterpage and work with this mapped folder. The problem is that by default you can't include json files (http://sharepoint.stackexchange.com/questions/114540/why-is-upload-of-json-files-prohibited) :)   So way to work with Visual Studio Code is to reference Typescript definitions by adding references to code pages ""manually"". So, after Visual Studio Code 0.10.10 update, opening any javascript file now gives error ""The Typescript language service died unexpectedly 5 times in the last 5 Minutes. Please consider to open a bug report."" again and again."
12535|Duplicate of #3791, see this comment https://github.com/Microsoft/vscode/issues/3791#issuecomment-193690551
12536|@egamma, Please include this issue in the next iteration plan
12537|I also encounter freezing (using latest version now, but always got freezing since December when I start using it) Using Fedora with default Gnome desktop. $ uname -a Linux localhost.localdomain 4.3.5-300.fc23.x86_64 #1 SMP Mon Feb 1 03:18:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux  Only vscode freezes, not anything else, after a few hours of usage. Here's the terminal outout:  ``` $ ./code --verbose bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell ### VSCode main.js ### /home/data/apps/VSCode-linux-x64/resources/app { pathArguments: [],   programStart: 0,   workers: -1,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   pluginHomePath: undefined,   pluginDevelopmentPath: undefined,   pluginTestsPath: undefined,   disablePlugins: false,   locale: undefined } Lifecycle#unload() 1 IPC#vscode-workbenchLoaded IPC#vscode-openFilePicker IPC#vscode-openFilePicker IPC#vscode-openFilePicker  <--- Last few GCs --->  96032349 ms: Mark-sweep 1394.7 (1457.6) -> 1394.7 (1457.6) MB, 2956.1 / 21 ms [allocation failure] [GC in old space requested]. 96035276 ms: Mark-sweep 1394.7 (1457.6) -> 1394.7 (1457.6) MB, 2926.9 / 22 ms [allocation failure] [GC in old space requested]. 96038180 ms: Mark-sweep 1394.7 (1457.6) -> 1394.7 (1457.6) MB, 2904.4 / 31 ms [last resort gc]. 96041079 ms: Mark-sweep 1394.7 (1457.6) -> 1394.7 (1457.6) MB, 2898.1 / 29 ms [last resort gc].   <--- JS stacktrace --->  ==== JS stack trace =========================================  Security context: 0xa9cd183a859 <String[7]: file://>     1: _completed [file:////home/data/apps/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:~23] [pc=0x187c6d132853] (this=0x1c379e06a469 <JS Object>,e=0x3a3a717041b9 <undefined>)     2: arguments adaptor frame: 0->1     6: bound  [native v8natives.js:1208] [pc=0x187c61da8cb0] (this=0xa9cd1846061 <JS Global Object>)  ==== Details ========================================...  Failed to get crash dump id. Report Id:  [VS Code]: detected unresponsive Lifecycle#window-all-closed Lifecycle#before-quit App#dispose: deleting running instance handle ```
12538|Continuing discussion in #1940
12539|@dlong500 both Salsa and the previous JS infrastructure build on the TypeScript parser and AST. The previous JS infrastructure has the same limitations when it comes to using ES7 language features, but it supported to turn off validation.   One issue is that the TypeScript version used for the previous JS infrastructure is now really out of date. This is why we need to deprecate it as soon as possible.  > until Salsa matures a bit? > Do you have particular concerns with regard to the Salsa maturity.
12540|@garthk the plan is to bring back the option and it will be in next update in the [`insiders`](https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build) channel, which we plan to make next week.
12541|This is the underlying issue Microsoft/TypeScript#7292, that is, the default of the module type when you have no jsconfig.json was changed by accident, this will be fixed for TS 1.9. For now the work around is to add a jsconfig.json.
12542|Just checked and mine is also not so super blurry anymore. I am not passionate about this issue to investigate further, feel free to close.
12543|@MichaelCsitkovics I would hope we did not introduce a bug here, are you sure this used to work before 0.10.10? We only reopen files if you open a workspace folder, but not for an empty workspace.
12544|> both Salsa and the previous JS infrastructure build on the TypeScript parser and AST. The previous JS infrastructure has the same limitations when it comes to using ES7 language features, but it supported to turn off validation.  Ok, thanks for the clarification.  I just wanted to know if the pre-Salsa intellisense was superior but it sounds like it was the same or worse, so there's no need to keep it around anymore.  > Do you have particular concerns with regard to the Salsa maturity.  Maturity maybe wasn't the best word.  I was referring to the Typescript foundation of Salsa in regards to support for newer ECMAScript features that are already supported by other tools like Babel and ESLint.  I get the desire to be careful with language constructs that may still be in flux, but I think sometimes there is too much hesitation in supporting features that are already used in the wild and are clearly going to be in a future spec one way or another.  In any case, thanks for the quick responses and for the revival of the option to turn off built-in validation.  Quick question:  what is the difference between the insider channel and the alpha channel?  Is the alpha channel always more up-to-date than the insider channel?
12545|Thanks @egamma,  may the force be with you :)
12546|@dmurawsky What theme were you using? Is it with JavaScript? In the default themes we never had an method and function _references_ highlighting. We highlight the _definitions_ in the Light+/Dark+ themes. Make sure you are using one of these.
12547|@bgashler1  Great work! For 3) we already have a visual toggle to deactivate, the only new thing here is the seperator for brakpoints - exception breakpoints and that you put breakpoitns on top. Right?  I personally like 1A the best and would like to try it out. The only thing that worries me is that all that red might draw the unnecessery attention of a user. Maybe we show this decorations only when a debug session is active - otherwise not show anything (same as we do now).  2) Not a big fan of this idea, I do not think the added functionality gain is worth of using a more complex ui representation  3) Like it, brings a nice visual separation  @weinand @bpasero opinions?
12548|@Tyriar is this solved with the new launcher?
12549|Duplicate of #3790  Workaround: open `/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code` and change `python` to `/usr/bin/python`.
12550|Workaround: open `/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code` and change `python` to `/usr/bin/python`.
12551|Checked on Windows 7 as well. I can see the same issue.  ![error](https://cloud.githubusercontent.com/assets/4905303/13664950/03573ffe-e6d0-11e5-9b8d-08ac431013e2.jpeg)
12552|@contreras-jorgev I you have no jsconfig.json for your project then this is a duplicate of: Microsoft/TypeScript#7292
12553|@alexwarren I'm sorry, but `amd` module resolution is currently not supported by Salsa. Duplicate of https://github.com/Microsoft/TypeScript/issues/6942
12554|Other thought you are using `amd`? AMD module resolution is currently not supported in Salsa Microsoft/TypeScript#6942
12555|duplicate of https://github.com/Microsoft/vscode/issues/3903
12556|duplicate of https://github.com/Microsoft/vscode/issues/3903
12557|@weinand  thanks,it works.
12558|This issue was moved to Microsoft/TypeScript-TmLanguage#119
12559|This issue was moved to Microsoft/TypeScript-TmLanguage#120
12560|This issue was moved to Microsoft/TypeScript-TmLanguage#121
12561|@lukkarip thanks for explaining the workflow and setup.   I assume this is a larger folder with many JS files? Previously, the JavaScript infrastructure has excluded some well known folders: `node_modules, bower_components, jspm_packages, tmp, and temp`. So if these folders have many JS files and you cannot exclude them then this can explain the crash.   Can you confirm that this is the case. I'm sorry that adding a jsconfig.json is not a solution for your setup.
12562|"Hi @dbaeumer   I have only got one version of Typescript installed, which is 1.8.2. I installed it globally using npm. My typescript.tsdk setting is set to null (so i presume it uses the default tsc command used in the npm module folder).   In my source files I have a main.ts file which includes all references to definitions.   ``` (main.ts) /// <reference path=""./definitions/required/node.d.ts"" /> /// <reference path=""./definitions/required/express.d.ts"" /> /// <reference path=""./definitions/required/bcrypt.d.ts"" /> etc... ```  Main.ts should be part of the compilation as I understand it. So even though these modules are defined and referenced in the definition files, the editor seems to complain about them not existing - and yet compilation is fine. Is this maybe because the editor only reads references in open files? If I put those reference paths in every file then the squiggles go away. The problem still exists even if I specify the .files property in the tsconfig.json (I thought it might be an ordering problem - i.e. that main.ts is not loaded first and so files dont see the definitions in order)  I've attached a picture to show what I mean.  ![problem](https://cloud.githubusercontent.com/assets/2727104/13664908/a6f8ea9c-e6a1-11e5-9d63-88cbc8c45d11.png)  Here is my tsconfig file  ``` {   ""compilerOptions"": {     ""module"": ""commonjs"",     ""removeComments"": false,     ""noEmitOnError"": true,     ""declaration"": false,     ""sourceMap"": false,     ""preserveConstEnums"": true,     ""target"": ""es5"",     ""allowUnreachableCode"": false,     ""allowUnusedLabels"": false,     ""outDir"": ""dist""   } } ```  And here is my task file:  ``` {     ""version"": ""0.1.0"",     ""command"": ""gulp"",     ""isShellCommand"": true,     ""args"": [          ""--no-color""     ],     ""tasks"": [         {             ""taskName"": ""build-all"",             ""isBuildCommand"": true,             ""showOutput"": ""always"",             ""problemMatcher"": {                 ""fileLocation"": [""relative"", ""${workspaceRoot}""],                 ""pattern"": {                     ""regexp"": ""^(.*)\\((.*),(.*)\\):\\s(error|warning)\\s(.*)$"",                     ""file"": 1,                     ""line"": 2,                     ""column"": 3,                     ""severity"": 4,                     ""message"": 5                 }             }         }     ] } ```  Gulp file:  ``` var gulp = require('gulp'); var ts = require('gulp-typescript'); var outDir = ""dist"";  // Builds each of the ts files into JS files in the output folder gulp.task('ts-code', function() {     return gulp.src(['src/**/*.ts', 'src/**/*.json'], { base: ""src"" })         .pipe(ts({             ""module"": ""commonjs"",             ""removeComments"": false,             ""noEmitOnError"": true,             ""declaration"": false,             ""sourceMap"": false,             ""preserveConstEnums"": true,             ""target"": ""es5"",             ""noImplicitAny"": false             }))         .pipe(gulp.dest(outDir)); });  gulp.task('build-all', ['ts-code']); ```"
12563|+1
12564|Highlighting is #3903. Workaround is to switch to the Light+/Dark+ theme.
12565|"I made a quick test to demonstrate the problem. I created just one javascript file, which contains no reference to anything, just couple of lines some javascript. I put this one file in ""testing"" folder under [site]/_catalogs/masterpage. This is done by mapping network drive (WebDAV). This is SharePoint 2013.  In Visual Studio Code (0.10.10) I select only to open this ""testing"" folder with one js file. When opened Visual Studio Code starts to give warning ""The Typescript language service died unexpectedly 5 times in the last 5 Minutes. Please consider to open a bug report."" again and again.  So in practise, Visual Studio Code cannot be used with SharePoint 2013 at the moment. Needed to change to SublimeText for now. Hope some fix is goming soon.  I have admin rights so seems that I was able to .json-format from ""not allowed files"" in SharePoint Central Admin. With this change. I can in fact add json-file. The problem is in this my test case there seems to be anything that could be excluded(?)"
12566|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/96
12567|Workaround is to switch to the Light+/Dark+ themes
12568|+1
12569|+1
12570|We have deprecated the built-in linting in favor of existing linters. Pls see the release notes https://code.visualstudio.com/Updates#_languages-javascript the section migration, eslint.
12571|This issue was moved to Microsoft/TypeScript#7458
12572|Can you reproduce this when you work on a local folder with the same file?
12573|Can you share this one js file?
12574|Workaround is to switch to the Light+/Dark+ theme...
12575|> Typescript foundation of Salsa in regards to support for newer ECMAScript features that are already supported by other tools like Babel and ESLint.  got it, thans. This topic is discussed here https://github.com/Microsoft/TypeScript/issues/2103#issuecomment-182195915  > Quick question: what is the difference between the insider channel and the alpha channel? Is the alpha channel always more up-to-date than the insider channel?  The alpha channel is updated multiple times a day and it is the version the development team is using. So it might be broken from time to time. The insiders channel is updated one week before a stable update, but we are looking into updating stable more frequently.
12576|This is not a feature request but a serious bug: stdfork does respect stderr by sending it to stdout!  In case of debug adapters this will corrupt the wire protocol and make VS Code abort the debug session.  Both php-debug and go-debug were hit by this: https://github.com/felixfbecker/vscode-php-debug/issues/19 https://github.com/Microsoft/vscode-go/issues/206 https://github.com/Microsoft/vscode-go/issues/223  We were not seeing this problem before because VS Code was swallowing json parse exceptions silently and tried to continue running. However both debuggers had reports of mysterious session errors that we can now explain with this problem.  We have two options for fixing this: - introduce a separate named pipe for stderr (real fix, high risk) - disable stderr output (low risk)  Since 'stderr' output is not really supported by VS Code and only shows up in the dev tools console, I think we should implement the low risk option for GA.  fyi: @lukehoban @felixfbecker
12577|I run into the same problem. After adding jsconfig.json IntelliSense is working. However warnings are not displayed. For example, if we pass a string parameter instead of number as shown in the Node.js walkthrough there is no warning.
12578|"Same ""testing""-folder with this one file works fine locally. The problem is only if opened in SharePoint 2013 mapped folder. Test file is really uninteresting random javascript, but here it is: https://github.com/lukkarip/Tests/blob/master/testing/session-handler.js"
12579|@bill-mybiz since this is a TypeScript project then your issue is unrelated to what is discussed here and you are in the wrong issue :smile:   > I also tried to explicitly exclude folders in tsconfig, but it is not allowed when using the files glob.  I see that you are using filesGlob this attribute is not supported in TS version that is used by VS Code (fileGlob is an Atom TypeScript specific extension). I would recommend to not use files glob but have a tsconfig.json that has no `files` section but that uses `exclude`.
12580|"This is something that's been bugging me for months. While technically correct, it is counter-productive and not very useful as @tomsdev said. At least make it a separate option and make the distinction between ""go to declaration"" and ""go to implementation""."
12581|Moving to Salsa
12582|This issue was moved to Microsoft/TypeScript#7459
12583|I have removed the proper way (using aria-autocomplete and aria-activedescendant) and implement this now using aria alerts due to https://bugs.chromium.org/p/chromium/issues/detail?id=593646
12584|@dbaeumer I looked a bit into this and it is not connected to debug.  1. create a new extension 2. make tasks.json dirty 3. run npm task through tasks framework - the spinner in the status bar always spins and never finishes
12585|Cool stuff. I think it would be nice to visually separate exception breakpoints from the rest! I also think if we chose to show the breakpoint logo we should do it for all breakpoints, but I would have to see it in action to tell for sure. I also wonder if the checkbox should come first and then the icon?
12586|"@isidorn There is no need to announce the suggest widget opening, that would only add more noise. There is still a need to announce ""suggestion"" after each suggestion as now the entire line gets read again on cursor up/down. I will write down more details in #3787. I have shortened the message when accepting a suggestion, as per your point number 2.  @zersiax I will describe shortly the current state of the suggest widget in #3787"
12587|I updated again, but after restarting the machine I'm getting the same old version. Steps I'm following. 1) Download package from [https://code.visualstudio.com/docs?dv=linux64](url)  2)Extract and run Code.  3)Check version =>0.10.10  4)Restart computer.  5) launch vscode and check version =>0.10.8
12588|"@zersiax I apologize if I'm going too much into HTML aria details.  Two days ago I made a change to make the suggest widget use proper aria semantics. In other words, when the suggest widget would pop up, I would add aria-haspopup=""true"", aria-autocomplete=""list"" and I would set aria-activedescendant to the id of the current suggest proposal.  This would give a pleasant experience when the suggest widget would pop up, it would announce the first suggestion and using arrow up and down would announce each suggestion, while focus was still in the editor (i.e. typing was still possible in the editor to narrow down results or to ignore the suggestions completely).  After further testing, I have discovered that when closing the suggest widget (when accepting a suggestion or when dismissing it with Escape), I would correctly on my side remove the aria-activedescendant attribute from the input element. However, navigating with arrow keys would no longer announce each character or each line, it would be completely silent. I believe this is a bug in Chromium, where they do not handle correctly the removal of aria-activedescendant until you focus out of the input and focus back in to it.  This issue is blocking the usage of proper ARIA semantics, as soon as suggestions are shown once, cursor navigation becomes completely silent. I have captured this issue and another 2 related issues in [Chromium bug 593646](https://bugs.chromium.org/p/chromium/issues/detail?id=593646).  In the meantime, I have commented out for now the usage of proper ARIA semantics, and have replaced them with alerts. I am sorry, I know alerts are probably the worst option, but here is the current behaviour: - when the suggestions pop up, they alert with the pre-selected suggestion. This is useful to inform that Enter will now be accepting said suggestion. - when the suggestions are shown, using arrow down/up or page down/up will change the selected suggestion. This will be announced again through an aria alert. Unfortunately, when pressing arrow down/up, NVDA reads for me the entire line again, and only afterwards the next suggestion. I believe NVDA expects that cursor down/up would move the cursor to a different line, thus its desire to read the entire line again. However, in this case cursor down/up keeps the cursor on the current line and selects the previous/next suggestion. Now that I think about it, we could overcome this by changing the keybindings for selecting previous/next suggestion to something else than arrow up/arrow down. I will try this out and get back to you.   - when a suggestion has a documentation label we alert that it ""has details"". The documentation label can be read by using Ctrl+Space again. Ctrl+Space acts as a sort of toggle between suggestion items and an item's details (when they are available).   - when a suggestion item has been accepted, we alert that it has been accepted.  I would be very happy if you could try it out, I am sure this still needs a lot more fine-tuning.  [Here is a version of VSCode that will be installed in parallel with the stable version](https://az764295.vo.msecnd.net/alpha/d253e034e2a6a17422df292acd2ee3a568606bcd/VSCodeSetup-alpha.exe) and that we can use for continuous feedback - patches."
12589|@weinand I think the issue you linked was not caused by this, but I got several reports at my [Gitter channel](https://gitter.im/felixfbecker/vscode-php-debug): ![debug2](https://cloud.githubusercontent.com/assets/10532611/13668331/681b66fe-e6bc-11e5-8e63-cc60217188dc.gif) ![debug](https://cloud.githubusercontent.com/assets/10532611/13668340/6c3164dc-e6bc-11e5-8677-8affb6f3500a.gif)  I fixed them by eliminating every single occasion where logs could get output to stderr or stdout (some of which I wasn't even aware of, it was a dependency that logged stuff without my knowledge). But I constantly wondered why these issues only appeared since the Feb release. If VS Code swallowed JSON parse errors before, that is an explanation.
12590|That is pretty cool.
12591|Please also hunks. It's when you use `git add -p` and press `e`, the default git editor pops up to edit the patch manually. You have `+`, `-` or a space in the first column (all indentation breaks should get shifted +1 column), `@@` line indicators and comments with `#`. Vim and Notepad++ highlight these well.
12592|I also don't get why there are two folders. Afaik `.vscode` only includes one subfolder, `extensions`. Why not simply put settings in `.vscode` aswell?  I also like `.vscode` more than `.code`, Visual Studio stuff is also in `.vs` and it is less ambiguous.
12593|:+1:
12594|@bpasero There wasn't anything particularly special about the project.  I think if you created a new Unity project, set it up to use VS Code and then attempted to edit some scripts, you would see the same issue.  I am using OSX 10.11.3 on a fairly old MBP (Late 2010).
12595|"An npm scripts template would be nice to, as this has been asked here a couple of times and is used very often by projects. It is very simple, basically `""command"": ""npm"", ""args"": [""run""]`, but new users don't know what to do."
12596|Afaik the whole PHP Intellisense is only based of a list of global functions and superglobals. I already thought about writing a PHP extension for better Intellisense, that actually constructs an AST of the code and looks at the variables in the current scope etc., suggests methods for classes following PSR autoloading, but I don't have the time for it.
12597|That would be nice for docs written in Markdown.
12598|It is poor indeed, and I think this is well suited for an extension. I actually thought about writing one, but I'm not 100% sure how. Maybe someone who wrote the Intellisense support for other language can get me on the right track? I think it will probably be needed to create an AST of the code to get the available symbols. There is an AST parser for PHP, written in PHP itself. So either the language server implementation would have to be in PHP (In PHP everything is synchronous, so would this work with some sort of inifinite while loop checking for input? Would it be beneficial to duplicate the current TypeScript classes for extensions in PHP?) or have an intermediate Node application that calls acts as the language server and calls the PHP AST parser to get the AST (which could get JSON-encoded?).
12599|"> Example of a localized extension  Is there also a way for debug adapters to get the locale of the user? I name my ""threads"" `Request X (time)` and would like to localize the time format and also translate ""Request"". Maybe the locale ID could be send in the InitializeRequest? @weinand"
12600|Thanks, dark+ and other themes works.
