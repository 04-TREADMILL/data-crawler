27901|Feature request -> july, joao
27902|reopening to move them to right place
27903|@egamma good to know that. I didn't know this. But my point was solely on release synchronization. As a linux user I have limited choice over dotnet core app debugging support.
27904|This is a concussion decision made by our PM team that we always open the explorer viewlet on start. Anyways, assingning to July and chris to decide if we want to make an exception in this case
27905|I'm having the same problem again (I had to reinstall vscode): @bpasero is there a setting to exclude *.d.ts files from this list ?  If not what should I add into tsconfig.json to exclude these files ?  Thank you
27906|I am not sure why symbols from d.ts files would show up, @dbaeumer would know.
27907|Yeah, I don't like ctrl/cmd but I take the consistency point...
27908|@bpasero Any other markdown'ish editor that you open or does this happen when nothing is open?
27909|https://github.com/Microsoft/vscode/issues/7950
27910|Just one open:  ![untitled](https://cloud.githubusercontent.com/assets/900690/16410854/b1579450-3d24-11e6-9162-5be7de8fd0ca.gif)
27911|Sorry, it is working. There was a time where I saw it did not work. Not able to reproduce again.
27912|I am marking this important because this happened so many times for me already and caused frustration up to the point that I just reloaded VS Code to get back to normal zoom level.
27913|Tested. Tried to break it but can't :). Looks good.
27914|"@stevencl is this using the ""opened editors"" view or the tabs in the editor pane?"
27915|Not cruical, assigning to Joao and July
27916|@joaomoreno Yes, if I run it from the command line, I get the same issue - but only till vscode is open. As soon as I close vscode, it starts working 'as expected'
27917|Great - thanks! Then we can close this issue
27918|Sorry, this is using the opened editors view.
27919|:tada:
27920|This is cool
27921|The `TextDocument.getWordRangeAtPosition` respects the word definition provided by the language associated with the `TextDocument`. It is configured by languages according to language specific rules via `languages.setLanguageConfiguration`.  For example, css defines that `-` is not a separator. For example, when dealing with a `TextDocument` that has `language` set to `css`, `-` will not be a separator.  I agree there is ambiguity here, as this uses the word definition of a language and not the word definition of the end user. Any thoughts on how to improve here to reduce confusion?  ```         /**          * Get a word-range at the given position. By default words are defined by          * common separators, like space, -, _, etc. In addition, per languge custom          * [word definitions](#LanguageConfiguration.wordPattern) can be defined.          *          * The position will be [adjusted](#TextDocument.validatePosition).          *          * @param position A position.          * @return A range spanning a word, or `undefined`.          */         getWordRangeAtPosition(position: Position): Range; ```
27922|It's worth experimenting I think. This is where we landed in Visual Studio but we can always try and come up with a different threshold. Without it, drag and drop from the explorer often ends up opening additional editors.
27923|This is also a very new feature so maybe we gather additional feedback from the community?
27924|Btw a better solution to waiting arbitrary 250ms is to just only open the editor on mouse up and not mouse down. Any reason VS chose 250ms delay?
27925|We don't yet support per language indentation settings. The only decent workaround is the status bar. Would that help in this case:  ![image](https://cloud.githubusercontent.com/assets/5047891/16411288/9dc05722-3d26-11e6-81b1-d14467f6a1c5.png)  which is clickable and allows you to switch between inserting spaces or tabs:  You can either just change the setting (blue actions) that means from now on pressing `Tab` will do x or y etc. Or you can change the buffer too (red actions) that means convert existing indents and from now on pressing `Tab` will do x or y etc.  ![image](https://cloud.githubusercontent.com/assets/5047891/16411319/cd8156aa-3d26-11e6-8bed-06e411408f66.png)
27926|@kieferrm there are some issues with the coloring in markdown sources. I stopped filing issues because I am also not sure if our repository is the right place for them.
27927|We got this feedback in VS for this exact same scenario so I'm just trying to pre-empt community and team feedback.  We went with the 250ms delay before previewing and opening editors because we also preview items when the user arrows up and down through the list. So with the delay they can arrow up and down very quickly without needing to wait for a preview to open.  Since we don't do that we could just open on mouse up. Using the arrow keys to move up and down the list in explorer is also a good experience though. Something we don't support just now but with the preview tab, we might consider it for the future?
27928|June to investigate
27929|That is a limitation of how the inline diff is implemented. I wonder if we can alleviate this limitation by adding a button somewhere in there (copy or revert this change) that would show up on hover
27930|Agrees. But I want one milestone of user feedback before making such a change.
27931|@bpasero Maybe this is due to us storing view settings per file and not per tab? e.g. having the same file `A.txt` open side by side
27932|@stevencl also I wonder if there are other options: e.g. we could open the editor as before but as soon as we detect the user is dragging we actually take the editor that we just opened and move it.
27933|yeah, should not be like that...
27934|Dup of #8258 Yes - I can look into those css styles - thanks!
27935|Does not sound cruical -> July, joao Let me know if you disagree
27936|@alexandrudima this is in 1.2.1 where we did not have this
27937|Assigning to June for investigation, I am not aware of any recent changes in this area.  @scloudyy @Emeryao @Yukaii @Elderry  Can you please help me out and write in here a comment that I could bring to https://github.com/Microsoft/vscode/wiki/IME-Test  I would very much like to bring this use-case to our IME Test as two items, once for Windows and once for Mac, but I would need it to be in a format similar to the ones existing: - **very very detailed** and clear steps such that devs unfamiliar with the specific input method can reproduce - a gif of a good software showing how the behaviour should be. I used word, but if you don't have that, then please use any wide software that is doing it correctly
27938|@isidorn you can find them here: https://github.com/Microsoft/vscode/blob/1.2.1/src/vs/languages/markdown/common/markdown.css
27939|"@isidorn might be as easy as producing links with target=""blank"". I wonder if that would fix it"
27940|Yeah, @bgashler1 and me work on this still and we will pick a color closer to viewlet.
27941|@bpasero awesome - thanks!
27942|@bgse I think #8298 captures the issue you outlined quite well - please comment on the issue if there is something missing
27943|@mjohnsonengr In what editor do you see this? Is it with left hand side diff editors or with the default-settings editor?
27944|I know its more common to use a dictionary over an array. Still, these reasons made me chose any array - member lookup in a small sorted array is generally faster then using an object - the service collection is modified rarely but read often - we might make the service identifier be a number (keeping the name as 'debug-name') hinting stronger to an array
27945|"### [OS X 10.11.5] - Add Zhuyin Input Method   - System Preferences > Keyboard > Input Sources > Add > Chinese, Tranditional > Zhuyin      ![](http://i.imgur.com/qlOlqlv.png) - Focus VS Code and switch OS input method to `Zhuyin` (press Command + space)      ![](http://i.imgur.com/CRGGrj4.png) - Type `su3cl3` and press Enter. Here is how World looks like doing this (It should be ""你好"")      ![](http://i.imgur.com/pqYKO6q.gif)      ​"
27946|Dup of #7961
27947|If by bad spacing you are refering of missing of padding then dupe of #8251 If there is another issue here please let me know and I will reopen - thanks.
27948|Agree - not cruical - moving to july and joao
27949|@Yukaii Thank you! That is brilliant, I have added the test to https://github.com/Microsoft/vscode/wiki/IME-Test
27950|I'm seeing this behavior:  When I have problem watcher in watching task, it clears all warnings when I change editor (not save it), so each time I edit file all warnings disappear, but as soon as I save (the watching task lists the warnings again) they re-appear.  This makes working with problem matcher view difficult, because the warnings / errors disappear all the time as I edit the file even though the output has not been re-run because I have not saved.   In my opinion on watching task the warnings should cleared only when the console output changes. Right now it's easier me to look at the output console than to problem matcher view because it clears itself out all the time.
27951|Still does not seem to work for the diff action. Maybe a regression from Johs work?
27952|Yeah we do not store view state for readonly editors. There is another issue on it that Isidor filed for debug.
27953|@joaomoreno Anyone working on this? I'm happy to give it a look.
27954|"@calebegg Thank you so much for the repro file! I can immediately reproduce.  fyi @egamma @aeschli   It is the TypeScript TM grammar. I have done the following change in our code: ![image](https://cloud.githubusercontent.com/assets/5047891/16412980/5d9f7b56-3d2f-11e6-8427-8f7eb58bdb0b.png)  **The grammar keeps on pushing states and never leaves them. Again!**  ``` [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 428"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 428"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 426"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 428"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) [15740:0628/125238:INFO:CONSOLE(218)] ""SCOPES CNT: 429"", source: file:///C:/Alex/src/vscode/out/vs/editor/node/textMate/TMSyntax.js (218) ```  This means that the grammar has a scope stack of depth 429, causing each token to have 429 scopes. It leads us to a DoS through OOM.  I am not sure when we last updated the TS grammar and why it started showing up in 1.2. @aeschli  ?"
27955|I think i verified it worked - I will investigate what caused this.
27956|Seems to be related to using the actions in the editor action bar top right.
27957|No longer an issue, since I removed the native proxies, but tests should IMHO be ran with `scripts\test.bat` that runs the tests with the same runtime we ship our product with.
27958|This sounds like an opportunity for a great new `plist-to-json` node module that is streamlined to only handle plist. I'd love to write that :)
27959|Kudos to @kisstkondoros !
27960|@Luncher I am sorry I don't understand what you mean. Can you please explain more specifically your question?
27961|Works. You're awesome, thank you!
27962|Same is true for scss and css
27963|I also see very strange code complete behavior in less and scss
27964|Same seems to happened with less and scss
27965|Also happens in VS Code.
27966|"tested by previewing a markdown file with this contents:  ``` html <script language=""JavaScript"">   document.write(document.body.className); </script> ```"
27967|I noted that it also lost the **Backlog** tag/milestone. Is that right?
27968|Maybe one idea would be to change the message in the input field to somehow indicate how to get into replace mode?
27969|Let's track this in #3828
27970|fyi @aeschli - thanks for the marked string!
27971|How about expanding the Replace input box by default and users can collapse it if they do not want to do replace. This will help the user in discovering replace for the first time.   Also we can have a entry in Views menu for replace which will open replace by default?
27972|Yes, all good ideas to begin with 👍
27973|@bpasero True, idea is to make Find and Replace, Search and Replace look similar. Currently, we just have Replace all button in Search view. Since it is just a single button I placed it inside the input. I felt having it outside would make it left out from the rest of the Search UI.   Anyway, I would try that and see if it looks good.
27974|"The `editor.trimAutoWhitespace` trims automatic whitespace inserted by the editor when you press `Enter` or `Tab`.   The editor inserts automatic whitespace to help you align your code. e.g. if a line is indented with `\t\t` and at the end you have a `{`, and you press `Enter`, most likely on the next line you'd wanna have 3 indents, so instead of inserting only `\n`, the editor inserts `\n\t\t\t`. The last `\t\t\t` is marked as automatic whitespace that will get removed automatically if `editor.trimAutoWhitespace` is on and if you don't use the automatic whitespace (i.e. do not type at that location).  But ... it will not remove ""non-auto"" whitespace such as that you insert with `Space` because in that case the editor is asked to insert `<space>` and it inserts `<space>`, hence no automatic whitespace.  Sorry for the long and complicated explanation, I hope it makes sense!"
27975|I also find this problematic and filed https://github.com/Microsoft/vscode/issues/8332
27976|Yes it might look weird if it is alone, I wonder if we eventually have more buttons outside like the previous/next arrow?
27977|I was looking for this and got told that visual studio 2013 ever support this with additional comments:  https://blogs.msdn.microsoft.com/webdev/2013/11/06/a-high-value-undocumented-less-editor-feature-in-visual-studio/  It would be gorgeous if vscode inherit it. :)
27978|fyi @isidorn @jrieken @egamma   I think it makes sense for some workflows and not for others. Same as `Debug: Add to watch` which also makes sense for some workflows and not for others. I don't know how that one went in, I was personally not consulted :).  I do not want to be the gate-keeper of the context menu and I much rather suggest that we invest on the context menu customization story by the end user.  I would personally like to remove `Debug: Add to watch` from **my** context menus, and add three times in each group the `Copy` (as thats the only one I use from time to time ;) ), etc. I think we should continue investing in the menu story that @jrieken started and come up with a user customization story.
27979|fyi @jrieken  - there is a `ICursorSelectionChangedEvent.source` - `'mouse'` will be set there if the mouse handler or touch handler caused it. https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/view/viewController.ts#L71
27980|Backlog or No milestone is the same to me
27981|@blendsdk Sorry for going dark on this, I needed to get the basics working before asking for outside help. Anything would be appreciated, from trying it out in different browsers and creating issues, to making PRs to fix those issues, but probably at this stage I think more use-cases would be useful (https://github.com/Microsoft/monaco-editor-samples) and https://github.com/Microsoft/monaco-editor/blob/master/website/playground/playground.mdoc  Otherwise, yeah, the editor is now on npm :)
27982|Yes - user customisable context menus
27983|@alexandrudima we only add the debug: add to watch if there is a launch.json present in the workspace of the user. I agree that still it sometimes does not make sense that it is present. I am more for removing all of these than adding more - so I can remove debug: add to watch if the presence of a launch.json is not a clear enough indication that a user would find this useful
27984|Tested with Terminal and iTerm app with simple to complex folder names
27985|Ah, ok.. Thanks :+1:
27986|The edits coming in from the extension host (i.e. `textEditor.edit`) eventually reach https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/commonCodeEditor.ts#L599  It pushes an undo stop before and after the edit.  It was not always like that. I changed it due to feedback from extension writers - https://github.com/Microsoft/vscode/issues/4313  I have a feeling that neither way makes everyone happy (i.e. some prefer to have undo stops before and after their edits, and some prefer not to), and we need additional options to `textEditor.edit`  That being said, you could try to workaround it. From your example about macros, why not make all the edits caused by a macro in a single `textEditor.edit` call...
27987|@Tyriar I'll ping once the menu/context menu customisation is done
27988|@isidorn I'm not complaining, I'm exactly saying that I don't wanna be the gatekeeper here -- I cannot represent in my opinions all the users of the contextmenu :).  I mentioned the Debug one because it is similar in nature with the proposed run selected text in terminal, some folks might use it a lot, some folks might never use it.   Anyways, I was trying to make the case for prioritizing end-user customization.
27989|Will give my suggestion in https://github.com/Microsoft/vscode/issues/8184
27990|There were 2 update to TS in 1.3: 700d73620a29d38ec43ceddee6c9c980114484ce and 88f88a90938243434488ed72a81498651782607b
27991|After discussion with @isidorn and @sandy081 suggest to do the following: - replace action is disabled if there are no search results or the search criteria changed (maybe we give a hint how to enable it in the tooltip of the action or the backgroung text of the replace box) - if replace is visible and something is typed we show a preview of the diff in the same colors as the diff editor (green, red) and probably also with strikethrough for people that cannot read colors - we do not show such a preview if replace is empty (but you can still trigger the replace action to replace with empty string) - if you had something in replace and remove the text in replace we switch back to showing the search results (but replace action is still enabled) - we no more do anything if focus moves between search and replace, all is dependent on having a value in the replace box
27992|+1, I just did this and had a [Visual Studio PTSD](https://visualstudio.uservoice.com/forums/121579-visual-studio-2015/suggestions/2206847-ask-before-moving-files-in-solution-explorer-tree) response.
27993|By analyzing the blame information on this pull request, we identified @egamma to be a potential reviewer
27994|Hi **@mrmlnc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
27995|Tested  with light/dark themes and also compared with the monokai theme in different editors. The grammar is descent.
27996|I actually found a bug in my implementation of opening editors (https://github.com/Microsoft/vscode/issues/8354) that causes this to fail when auto save is enabled.   I am also easy to fix this on my end if we decide against doing this on the bulk edit level.
27997|@mbana sounds like a good chance for writing an extension? Or maybe check if an extension provides this already?
27998|I think this should work fine now in markdown using insiders:  We are releasing preview releases of the next stable VS Code version for everyone to try and give feedback. These preview releases are not 100% tested and might be unstable but contain our latest features and bugfixes. You can give our preview releases a try from: http://code.visualstudio.com/Download#insiders
27999|I think everyone suffers from this one...
28000|Hi **@DonJayamanne**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
