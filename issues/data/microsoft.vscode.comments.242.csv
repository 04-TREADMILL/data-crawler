24101|This issue was moved to OmniSharp/omnisharp-roslyn#573
24102|"@weinand Thanks for clarifying. I see it now. The executable is in ""*.app/Contents/MacOS/""."
24103|@weinand not inside, but you get OS sections offered top level
24104|:+1:
24105|"@weinand Thanks for the quick response and information.  Regarding being able to use VSCode for server side debugging, yes, I am successfully debugging meteor applications and it works very well for the most part, I apologize I didn't explain that well.    From what I notice (and reading your bullet points), it seems like maybe the cache is persisting somehow?   When I'm debugging (both node in debug mode & vscode attached), I detach the debugger, then kill the node process and restart (meteor rebuilds the application and runs  ""node /path/to/my/app.js debug"").  From that point only re-attaching the VSCode debugger after closing & restarting VSCode will have the code changes reflected.  Regarding #6, yes, running ""meteor debug"" basically builds the applications then executes ""node /path/to/my/app.js debug"", for example below is the process, the screen wrapping makes it kind of hard to read.  When breaking out (ctrl-c), it's just killing the node process.  `/home/john/.meteor/packages/meteor-tool/.1.3.2_4.10vjklo++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/bin/node /home/john/.meteor/packages/meteor-tool/.1.3.2_4.10vjklo++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/tools/index.js debug`  Also, one thing to note which realized I didn't mention & don't know if it could be part of the issue, meteor runs an old version of node (v0.10.43).  Their next release will be updating to v4+ (don't know the exact version).  Thanks,  John"
24106|What do you mean with _during the building process_? Where did you add that value?
24107|Sorry for reopening this issue, but it has surfaced again in this version.  ``` Version 1.1.1 Commit def9e32467ad6e4f48787d38caf190acbfee5880 Date 2016-05-13T13:29:20.776Z Shell 0.37.6 Renderer 49.0.2623.75 Node 5.10.0 ```  Even though I have applied the changes you proposed before and indeed they worked on the previous version, they are not functional in this version and I can't insert the nbsp character.
24108|Ops, I will add it inside the user voice instead of inside issues... (sorry for the inconvenience)
24109|@isidorn This is a nice catch.. I am sure it is working before I merged to master. Need to check if something changed
24110|@isidorn I do not know what is desired behavior here... but I expect to see problems view showing errors and warnings when I click on the errors icons in the status bar.   This was the same behavior before with the command pallette. I know that command pallette is not togglable where as panels are.
24111|"@johnf76 since I'm the author of node-debug, I'm pretty sure that no cache is persisted between debug sessions ;-)  Yes, node v0.10.43 is indeed very old but I don't think that is the source of your problem.  So let's analyse what you said about the initial problem:  ""the source map shows the source before modification""  A regular source map is a mapping between a generated JavaScript file and one or more source files that got transpiled into the generated JavaScript. If you have edited the source without updating the source maps, the mapping will be wrong (wrong character locations), but the paths in the maps still point to the correct source so you will see the edited source **after** the modification.  Only a source map with ""inlined source"" can lead to the issue that you are seeing: ""the source map shows the source **before** modification"". In this case the original source files are inlined into the source maps when the source map is generated. In this case the mapping and the source are always in synch but they only reflect what's being executed if the source map has been regenerated after you have edited the source.  Could you please try this: - if VS Code shows ""the source before modification"" can you verify that the editor header says something like ""content from inlined source"". If it does we can be sure that meteor is using source maps with inlined source. - try to locate the source maps on disk. One way to find them is to look into the generated JavaScript. At the end of the file should be a path that points to the location of the source map. - Verify that the source map gets updated when you edit the source and the generated JavaScript is produced. If I understand your steps from above correctly, you have to restart meteor for this. - if you cannot find the source maps on disk it could be that the source maps are inlined into the generated JavaScript files. In this case there is no file path at the end of the JavaScript but a long data URL containing the source maps in base64 encoding.  Please let me know what you find."
24112|@isidorn we should offer intellisense for the OS types on the top level and repeat the intellisense inside the OS sections.
24113|@joaomoreno maybe this is due to our CSS optimizer that we run during the build? It might remove quotes from font families to minimize the CSS content.
24114|Moved quick open editor history into the history service (https://github.com/Microsoft/vscode/issues/6544)
24115|I was looking for something that allows me to jump for example directly between the back points call stack view and the variables view. But let me use the tab order for a while and see how that's working out.
24116|@isidorn if an action variable is used multiple times in a launch config, the associated command should only be run once.  The reason behind this is as follows: For a user the mental model of action variables should be that a variable has a value and that VS Code ensures that this value is initialised once, and not that every use of an action variable is a function call with a potentially different result.
24117|The VS Code integrated terminal already supports colors in the insider preview. Why not the tasks output / debugger console?
24118|@bpasero got my idea. There are quotation marks in CSS source cod, but nothing in workbench.main.css.
24119|@alexandrudima I added a new setting `editor.parameterHints` that would let users disable parameter hints at will. I can't understand why I'm not getting [an editor configuration change event](https://github.com/Microsoft/vscode/pull/7141/files#diff-f6fda5e48aab2d1c9fd953508a5f74b6R56) when I change that value in my settings though... I get the event when I change another editor setting such as `editor.fontFamily`.  What did I forget here? Can you give me a hand?
24120|I see what you mean. The minifier does remove the quotes... but that is OK, the browser still parses it. Here's what I get when building minified Code after #7123:  ![image](https://cloud.githubusercontent.com/assets/22350/15751521/b1697e02-28ea-11e6-925a-e5a6b4fc4d17.png)  It might not be working in your system due to some other issue.
24121|"Names start with punctuation characters or digits (like "".SFNSDisplay"") must be wrapped with quotes to get parsed. According tow this article. https://developer.mozilla.org/en-US/docs/Web/CSS/font-family (look at ""valid family names"" section） 2016年6月2日 23:51，""João Moreno"" notifications@github.com写道：  I see what you mean. The minifier does remove the quotes... but that is OK, the browser still parses it:  [image: image] https://cloud.githubusercontent.com/assets/22350/15751465/7c19efd4-28ea-11e6-8ebc-21768da7d8d2.png  — You are receiving this because you authored the thread. Reply to this email directly, view it on GitHub https://github.com/Microsoft/vscode/issues/7122#issuecomment-223334761, or mute the thread https://github.com/notifications/unsubscribe/ABnEvG4G-THq8B1dedXsJzPzQetMU2FTks5qHvvwgaJpZM4IsTAX ."
24122|@Tyriar Any news on this? Also, I'm wondering if there are plans to also have the coming daily insiders builds in repo, this would be a huge benefit for those of us who like to live on the wild side ;-)
24123|From that link:  > punctuation characters and digits at the start of each token must be escaped in unquoted font family names  The dot `.` is escaped with a backslash in the minified version, that's why the quotes are unnecessary.
24124|Rnordin1000@gmail.cim  On 27 May 2016 17:50, João Moreno notifications@github.com wrote:  > This is OK. >  > — > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub, or mute the thread.
24125|"Just to add my 2¢, the preferred experience on Linux is that the package manager takes care of updating installed packages, and applications do not interfere with it.  In my opinion, an application should not even try to call the package manager to try triggering an update, since it is not the concern of the application if or when the package management does the updating.  No offense, but handling updating in the application itself is bad practice on Linux, imho.  Edit: That is not saying that a notification to the user is a bad idea, say ""we found you haven't got the newest version yet, please check your package management for updates""."
24126|Yeah don't take my point of view as general Linux behaviour, I just disabled any automatic updates in the package manager because applying them always nukes my Linux VM.  I think if I had an action from the update message that just opens the package manager for me to do the right clicks to perform the update is also totally fine.
24127|@bpasero You can also upgrade specific single packages using package manager, for apt it is 'apt-get install --only-upgrade mypackage' iirc. If you leave out the '--only-upgrade' parameter, it will install the package if it isnt already installed.  So basically you'd have 'sudo apt-get install vscode' (or whatever the package is called), and it is done.  With dnf it is a more intuitive command with 'dnf upgrade vscode'.  Btw, for solving the issue of updates breaking your VM, you could just use 'apt-mark hold mypackage' to exclude the package from updates, but still be able to update everything else normally. That requires you to know what exactly the problematic package is though. You can remove the hold with 'apt-mark unhold mypackage' again.
24128|Added intellisense inside os sections
24129|@alexandrudima any updates?  Seems like an easy feature to add, let me know if there's any interest or if you'd like a pull request for this.
24130|@weinand pushed a fix that should take care of this issue - so an action will get triggered only once even if it occurs multiple times in launch.json
24131|"<img width=""187"" alt=""screen shot 2016-06-02 at 19 28 33"" src=""https://cloud.githubusercontent.com/assets/900690/15754378/38446312-28f8-11e6-9daf-b4233c3ca299.png"">"
24132|Thank you for the very useful extension @robertohuertasm. It's unfortunate that this feature is not even scheduled although the logic is pretty much there. How would be move away from Sublime or Atom if they don't have visual indicator of what files they are dealing with. I guess it's time for a pull request.
24133|Hi **@codepo8**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
24134|That's true for the original markdown spec that @rebornix referenced.  I'm not an expert in markdown variations, but I would guess that VSCode / Atom preiew is oriented more to [CommonMark](http://commonmark.org/) then to the original (Jonh Gruber's) markdown.  For example, VSCode supports ``` and ~~~ syntax for codeblocks, which is **not** part of the original markdown [spec](https://daringfireball.net/projects/markdown/syntax#precode).  I would suggest follow CommonMark anyway, because 1) it has a clear spec with test sets 2) it's widely adopted and mostly compatible with GitHub Flavored Markdown.  From that point of view, CommonMark has a clear guidence about [back-slash escaping](http://spec.commonmark.org/0.25/#backslash-escapes).
24135|I think we should still leave the in-app notification in but delay it a week or so, so it only annoys people who aren't updating their OS. I'm going to close this since #229 and #2973 already exist.
24136|@gsaadeh there was already a PR put out by @pflannery, the problem is this would be a new API and we need to make sure it's done right (or it will just break for everyone in a successive release). The icon guidance in this issue is done with a hack so it couldn't be contributed.
24137|duplicates #7128
24138|Not sure there's a way around this, at least an error message would be good though.
24139|#7146 is similar and has more information. Hence marking this as duplicates #7146
24140|@Tyriar do you guys (core team) have a proper API planned then? I understand this is a hack, but this is as close as we can get without support from the core team.
24141|Thanks for the explanation @Tyriar. I agree that it's a hack but at least it will keep a few of us happy until the official support. If there is an existing plan of how you guys want to implement it, I will be very glad to contribute.
24142|@bpasero I am doing same in error-lists as in search. It auto expands when a file has less than 10 markers.. on top of it added some smartness to not to open a file it is collapsed.. I see there are some cases which this is not as expected while applying filters.. I will check and make it more user friendly.  Thanks
24143|This would be helpful for my [vscode-hexdump](https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump) extension, to retrieve selected file not compatible with TextDocument (i.e. png, jpg, ...). I wouldn't need to show an inputbox to ask for the file path everything :)
24144|@bpasero That's a good idea.. this would also fix some usability issues. Thanks.
24145|Thanks. Is ut not possible to just launch a separate low privilege instance?
24146|A few of us have been talking about it, we need to have a team-wide discussion ideally in a GitHub issue.
24147|I don't think so given the way that Electron works, @bpasero will probably know more on the subject.
24148|+1 this is a pain to do now. Also the file find/replace box covers the first line of code, very annoying!
24149|Ok, for the dirty events I need to figure out which open editor has updated dirty state, which means I need to go through all the groups and find editors which match a modifed dirty URI and refresh all those.  For your current model, for the group events I would need to manage listeners for groups (add them when new group added, remove them when group closed). In order to prevent this let's modify the aggregated event.  Can you please add a `structuralChange` flag? A model change event would have that flag, a `editorGroup` (which it does now) and an optional `editorInput`. If the change is structural I will refresh the part of the tree belonging to the group. If the change is not structural I would just refresh the open editor with the editor input in the group.
24150|Good catch
24151|Was caused by the change we did yesterday...
24152|@bpasero I was following the same behavior as search.. Previously in search, - mouse click switched focus to the editor  I think with stacks changes behavior got changed. I will update with new behavior in error-list also. Thanks
24153|Thanks, @robertohuertasm for making an extension that gives file icons to the vscode is really nice, even if it's hacky. Since the team is spread and focused on other tasks, I think it will be good to analyze and propose some changings to existing extension API, that will allow fully support extensions like `vscode-icons` without any hacks and won't break existing one. Then we can apply changes to the fork and make a custom build, so users could easily install it and perhaps even update. Any thoughts?
24154|This seems to behave better now.
24155|"if anybody still cares to restore the variable behaviour to before they introduced dark+, the fix, add:  ```     {         ""scope"": [             ""meta.parameter.type.variable"",             ""variable.parameter"",             ""variable"",             ""variable.name""         ],         ""settings"": {             ""foreground"": ""#569cd6""         }     }, ```  to C:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\extensions\theme-defaults\themes\dark_vs.json and then restart vscode."
24156|@Tyriar based on Your comments I've did a refactor, some stuff has been simplified a lot.  Things to note: - Updating the font doesn't triggers layout, I had to add it manually - BoundingClientRect can be 0x0 if the container is not visible   -- if charWidth and / or charHeight is 0 the terminal resize would crash VSCode, so I've added a guard into the layout method
24157|@bpasero I am confused about the new behavior in Search view.   If the file is in open editors list, then - Single click and Double click opens the file at the position and focus remains in tree - Enter opens the file at the position and focus is in file - Cmd/Ctrl+click opens the editor to the side and focus remains in tree  Else - Single click, Double click and Enter opens the file at the position and focus remains in tree - Cmd/Ctrl+click opens the editor to the side and focus remains in tree  Let me know if this is expected. IMO, this is not a better user experience when iterating search results either by mouse or keyboard.
24158|Really nice! Just a couple of little things and good to go, I'm also cloning your branch to check it out.
24159|Also, it is not very intuitive to know at which position in the file, the currently selected result is shown, if there are more results visible in the page.. See the attached screenshot  ![One of the search results shown in the file](https://cloud.githubusercontent.com/assets/10746682/15759800/b070be36-2910-11e6-8315-d752cc41ffd2.png)
24160|"This is because we pass """" as the title and I guess it defaults to the full path since `git-bash` isn't a thing if it's not on the `PATH`. Not sure it's worth changing this."
24161|"Well it's weird behavior since if you put in ""foo"" as your external tool, it will actually complain that ""foo"" isn't recognized.  It appears that the title is being passed if the external tool contains a space in the path.  Adding quotes around the path doesn't work either as it looks like it only uses everything after the last space"
24162|I'll continue with it tomorrow. Thanks for the feedback! :+1:
24163|I need someone to go over these: - [x] What to do about the localization strings since a call to `nls` is being made while generating the default config. (Need help) - [x] Check to see if a better name can be chosen for the setting. (Need help) - [ ] Add unit tests.
24164|@joaomoreno yes of course, thank you
24165|How does one determine if [this slowness](https://stackoverflow.com/questions/37601936/visual-studio-code-high-cpu) is bug #3998?
24166|"Thanks for the pointer to `stylelint`. I'm guessing that should be `""sass.validate"": false` instead of `true` to disable the built-in validation to allow stylelint to work without conflict?"
24167|@dibyendumajumdar source references are only valid for a single session (the life time of a debug adapter). So VS Code will not persist source references across sessions. This makes it very simple for a debug adapter to manage source references: just use a counter and increment the counter if you need a new source reference. Internal to the debug adapter you can just use the Handles class available through the vscode-debugadapter module. For every source that VS Code should stream from the debug adapter to VS Code create a new entry in Handles and return the handle as a source reference. If VS Code should show the same source sometime later, just make sure to return the same handle. If you need to return a new source to VS Code, create a new handle. Alternatively to the Handles class you could return the address of a source (converted to an integer) as  the source reference as long this address does not change for the lifetime of the debug adapter. I prefer the use of the Handles because the integers returned as source references are easier to follow than arbitrary 64 bit addresses.
24168|There are some peculiar statements about file watchers in these github issues: I have used them extensively, they work, so I expect this here for Linux to be some JavaScript problem.  I installed version 1.1.1 likeso: `sudo dpkg -i vscode-amd64.deb`  If I do: `sudo nano /usr/share/code/resources/app/node_modules/chokidar/lib/fsevents-handler.js` and modify line 7 to: `try { fsevents = require('fsevents'); } catch (error) {fs.writeFileSync('/tmp/y', 'Error: ' + error.stack)}` then relaunch Visual Studio Code  I get:  ``` less /tmp/y Error: Error: Cannot find module './build/Release/fse'     at Function.Module._resolveFilename (module.js:339:15)     at Function.Module._load (module.js:290:25)     at Module.require (module.js:367:17)     at require (internal/module.js:16:19)     at Object.<anonymous> (/usr/share/code/resources/app/node_modules/fsevents/fsevents.js:9:14)     at Module._compile (module.js:413:34)     at Object.Module._extensions..js (module.js:422:10)     at Module.load (module.js:357:32)     at Function.Module._load (module.js:314:12)     at Module.require (module.js:367:17) ```
24169|It would be nice to find nested git repos as well. Some of us are fortunate enough to not code on Monoliths.
24170|"Message ""No errors have been detected in the workspace so far."" looks good to me.. Updated it."
24171|So that's just the check for OS X, chokidar instead runs fs.watchFile which is correct.  What is the get-around, how does people immediately make it work in a way that is meaningful?  Apparently it's been around since November, 2015.
24172|Could this be nodejs/node#6456 in action?
24173|I feel the same way！
24174|``` Old-MacBook-Pro:~ lucnoc$ $SHELL -ilc env Restored session: Thu Jun 2 17:28:51 PDT 2016 TERM_PROGRAM=Apple_Terminal TERM=xterm-256color SHELL=/bin/bash TMPDIR=/var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/ Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.xFgRZxUhDl/Render TERM_PROGRAM_VERSION=361.1 TERM_SESSION_ID=37CEA60A-C93C-41E9-A031-2AF628BBA879 USER=lucnoc SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.kqCbyP2x79/Listeners __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 PATH=/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin:/usr/local/mongodb/bin:/Users/lucnoc/bin:/usr/local/mongodb/bin:/Users/lucnoc/bin:/usr/local/bin PWD=/Users/lucnoc EDITOR=emacs LANG=en_US.UTF-8 XPC_FLAGS=0x0 XPC_SERVICE_NAME=0 HOME=/Users/lucnoc SHLVL=2 COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/LUCNOC/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.onuhsKavd2/ServiceProcessSocket LOGNAME=lucnoc PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/pkgconfig: DISPLAY=/private/tmp/com.apple.launchd.h09Nl1vodu/org.macosforge.xquartz:0 MONGO_PATH=/usr/local/mongodb PHP_AUTOCONF=/usr/local/bin/autoconf _=/usr/bin/env Saving session... ...saving history... ...completed. ```
24175|The collapse all icon is a little weird as well, similar but inconsistent with the close all button in open editors and also easily mistaken for it. Plus the `-` is blue:  ![image](https://cloud.githubusercontent.com/assets/2193314/15765667/3b9f0e06-28ec-11e6-92f1-7721ca32901d.png)  ![image](https://cloud.githubusercontent.com/assets/2193314/15765673/41234734-28ec-11e6-883f-6d48073201d4.png)
24176|@vors, thanks your detailed info. Currently we are using markd.js , which targets both the original makrdown and gfm. That's why you can see those fenced blocks work and terrible escaping hack. But good news is, like what you suggested, we are moving the markdown parser to commonmark and we will supporr backslash escaping.
24177|I think this is intended behavior as the editor is not being focused.
24178|"It looks like markd.js [will switch to CommonMark](https://github.com/chjj/marked/issues/756).  As is, it's not GFM compatible (because horrible escaping hack works just fine on github). Check it out  < horrible hack >  I personally find `""\<""` **way** more readable in the plain-text then `""&lt""`."
24179|"AFAIK, pac file will only proxy requests whose domain is on the list and I suspect our marketplace is not listed, in this case our requests are not going through your proxy. Can you help make sure you can access following three urls in IE ?  ``` ""extensionsGallery"": {     ""serviceUrl"": ""https://marketplace.visualstudio.com/_apis/public/gallery"",     ""cacheUrl"": ""https://vscode.blob.core.windows.net/gallery/index"",     ""itemUrl"": ""https://marketplace.visualstudio.com/items"" } ```  If those urls are accessible and we do not detect system proxy, then it's a valid request."
24180|Agree, current markd.js GFM support is not 100% compatible (IMHO) but that's Okay. Once we finish #6106 we can revisit this issue.
24181|Added libnss3 and libnotify4, will add more if people have issues.
24182|@jrieken I'd like #7035 to be figured out before moving on this again. We don't really want to be migrating settings around multiple times if we can prevent it. It sounds like #7035 would need an extensions manifest to correctly support roaming on Windows.  Considering that settings.json and keybindings.json would probably best be situated at the root directory, not in Chromium's user data, how about we make an API to get at the User directory for now, which will eventually become the root?  ``` <root_settings>/settings.json <root_settings>/keybindings.json <root_settings>/snippets/ <root_settings>/extensions/ <root_settings>/userdata/ <root_settings>/rootuserdata/ ```
24183|It is visible in the current _stable_ release, and I'm pretty sure that at least since 0.10.7 (_stable_ and _insiders_) it was also visible.  I just noted because of my Bookmarks extension, which contains a `List` command that allows the user to navigate between the bookmarked lines and _preview_ the cursor. The code is something like:  ``` typescript function revealLine(line: number) {         var newSe = new vscode.Selection(line, 0, line, 0);         vscode.window.activeTextEditor.selection = newSe;         vscode.window.activeTextEditor.revealRange(newSe, vscode.TextEditorRevealType.InCenter); } ```  Thanks
24184|@joaomoreno OK. I've learned that. Thanks.
24185|@alefragnani good point, this is a regression. It no longer highlights when focus is not in the editor.
24186|Thanks a lot @kisstkondoros, this is awesome! I'm going to refactor terminalPanel.ts for #6458 and didn't want to introduce a bunch of conflicts so I'll make the touch ups mentioned. It should land in the June release! :fireworks:
24187|@Tyriar thanks for you help 👍
24188|@egamma Thanks a lot for your Q&A yesterday in Shanghai. I read the plan and looks like Monaco will be a separate repo? is this happening already? Can we have the URL?   BTW: hope you had a great time in China :)
24189|This is a total buggy bug. I have it on two Linux laptops, all of a sudden one is no longer slow. I'll use that one :)  It seems like code in the troubled state does something extremely cpu intensive on every save. What peculiar activity is started by save and takes 80 seconds for a 7,000 geekbench core?
24190|Fixed in https://github.com/Microsoft/vscode/pull/6998, thanks @kisstkondoros!
24191|can not repro this with vscode 1.2.0-insider and Windows 10 Enterprise. Not sure if it's a Windows issue.
24192|@ups216 its been done https://www.npmjs.com/package/monaco-editor-core which is just shipped (pushed to npm) from _this_ repository and I'm experimenting migrating [alm](http://alm.tools/) to it as well https://github.com/alm-tools/alm/issues/120 :rose:
24193|Awesome, thanks! :tada:
24194|I might be wrong, but from what I recall/understood from recent discussions in neovim: - In some terminal emulators, the colors can be set by the program; however, there can be _at most_ `n` colors, where `n` is usually 16 or 256. - Some vim colorschemes take advantage of this to approximate #RRGGBB colors, by mapping colors to terminal color-codes [0-255]. - Vim is supposed to save the colors from `termcap`/`terminfo` upon entering, and restore them upon leaving.
24195|@rob9 is it the same folder you open in both instances and in one it is slow and in the other not?
24196|IMO the idea was to use a computed line height for the given font size by default here: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/config/commonEditorConfig.ts#L380 And i think it is 0 because here https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/config/commonEditorConfig.ts#L510 the default value is not specified
24197|@sandy081 wow, I totally broke double click with the stacks work, good catch! it should definitely focus the editor on double click :).   As for the broken behaviour in search where it would loose focus on single click, that was a bug from stacks I fixed.
24198|@sandy081 the currently selected search match causes a stronger decoration in the editor, but this is very slight. @bgashler1 didn't you want to talk about this in our UX meeting?
24199|@Tyriar really need some steps to reproduce here to find out. What is odd is that the file is dirty and even that is not showing in the editor.   I am moving this back to you to try out more things: Did you maybe have the same file open in multiple groups and stuff like that?
24200|@Tyriar This is the same button that is also used in Search view and Explorer view.
