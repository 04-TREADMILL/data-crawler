23801|@builden was it cmder that's using the keybinding?
23802|@dbaeumer @jrieken pushed a change to reopen windows when an update is applied. Please let me know from your self host usage if this works on Mac and Windows.
23803|@jrieken I did not touch this recently, not sure about @alexandrudima. I know we do quite some dances in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/clipboard/browser/clipboard.ts#L168 to know where to send the action to and we might not handle the webview case here.  Also there may be differences between Mac and Windows...
23804|![vs code](https://cloud.githubusercontent.com/assets/3543614/15677624/5d6a1834-274b-11e6-8ee9-7ecfb88f86dc.gif)
23805|@Tyriar yes it's not a good idea to roam big data, per TechNet's documentation about app data roaming https://technet.microsoft.com/en-us/library/cc766489(v=ws.10).aspx , data (or data change) larger than 20 megabytes or more might cause delays in user logons.   Windows Application guideline also suggests not to roam large set of data, https://msdn.microsoft.com/en-us/library/windows/apps/hh465094.aspx . Of course, our app is not a Windows Application, but I think they share the same design principal.   So the last question is, are our extensions data too large? IMHO, they are sometimes too large and our extension development toolchain leads to this situation. When we package our extension into vsix, we don't have a good way to separate source code files and other dependencies (like test files, dev dependencies, node_modules), we always put a bunch of unused files in the extension vsix package. Take Go extension for example  ![image](https://cloud.githubusercontent.com/assets/876920/15678865/67843156-2782-11e6-8ea3-19cbf8835c85.png)  The test folder is not necessary, most files from node_module packages are not necessary either. But our current toolchain can't help people easily avoid this kind of file duplication, which finally makes extension packages too large.
23806|No error messages, I will try to get repro steps...
23807|@bpasero ideas?
23808|So something like `%APPDATA%/extensions.json` and `%LOCALAPPDATA%/extensions/` would eventually be ideal, with the extensions from `extensions.json` maybe downloading automatically on launch?
23809|"I am seeing this behavior and I am running node v 4.4.3.  I am seeing Code say ""PAUSED ON BREAKPOINT"" but I am not seeing any indication of the breakpoint or the data around it.  The strange thing is that on some endpoints (express endpoints), the breakpoints work fine, and others not.  I am on OSX 10.11.4."
23810|Hmm, I just tested out `html.format.wrapLineLength` and it didn't seem to do anything for me with an HTML file. I set the wrap line length to 70 characters but was able to type beyond that without any wrapping. Perhaps it doesn't do what we think it does.
23811|@bpasero, yes you are correct.
23812|"@edumunoz, @Andrew-MSFT, @isidorn, @egamma  As an example for the process picker work I've added ""Attach to Process"" support to Node Debug. Please see this [video](https://dl.dropboxusercontent.com/u/2433608/AttachToProcess.mp4).  Please note: I'm launching a simple express application from the command line without running node.js in debug mode. With the picker I select the node process by filtering on the arguments ""bin/www"". The variable ${action.pickProcess} in the launch config is then replaced by the process id of the node process."
23813|@joaomoreno @Tyriar where are we with this and what's the plan?
23814|@jnystrom what version of VS Code are you using?
23815|let's treat this as a duplicate of #3192
23816|"I've tested this where the only open working folder had exactly 2 files in it: test.js and jsconfig.json. Are there other ways that it could be trying to find files which I need to tell it to exclude? Here's the current body of my `jsconfig.json` file which is in the root of my project:  ``` {     ""compilerOptions"": {         ""target"": ""ES6""     },     ""exclude"": [         ""node_modules""     ] } ```  I also went into `Library/Application Support` and removed the `Code` folder to see if any old preferences may be causing this. Issue still repros for me."
23817|@dbaeumer can help. There is a story that we have used for the TypeScript extension and others
23818|Thanks, @aeschli !
23819|Thank you @aeschli !
23820|I am using the latest Insiders version. : `1.2.0-insider`
23821|@weinand very cool, thanks for showing us.
23822|+1
23823|I just tested it in the latest released version and I still see the issue.  I can add breakpoints that hit, during the startup of my node app, but when I hit this express 'PUT' endpoint, I cannot see any breakpoints getting hit.  I do see them getting hit on a 'GET' endpoint.  I am possibly using a newer version of NPM that is newer than the version of node I am using.
23824|The pull is quite stale and probably needs to be redone, there is also the complication of Windows directory changing as well #7035. Just a matter of prioritizing it against the other stuff in my backlog (mainly terminal bugs and linux packaging improvements).
23825|@edumunoz the picker code (from mock-debug) is here: https://github.com/Microsoft/vscode-mock-debug/blob/master/src/extension.ts
23826|"@jrieken: Why do you want to treat the editor title are the same as the context menu?  It seems to me that a context menu entry is added to context that the extension does not necessarily own (such as the explorer). The editor title area could be considered ""private"" to the editor (with some common extensions the workbench provides per default.). So, the API implication/restrictions around the two seem quite different.  <img width=""560"" alt=""screen shot 2016-05-31 at 8 52 11 am"" src=""https://cloud.githubusercontent.com/assets/4674940/15681314/8820b0ee-270d-11e6-8cde-f52605ad265c.png"">"
23827|Maybe i am being naive but this feature already exists. With javascript I am able to auto format my code. The issue I am seeing is that I can only auto format with 4 spaces. Is there a way to change this?
23828|This is also an issue for #6106.
23829|@coleGillespie But you have to run it yourself. This topic is about making it run automatically as appropriate.
23830|@kisstkondoros I merged the PR into master as the 1.2 release was branched off.
23831|@robertohuertasm just forked your repo. I'll try to automate the process using python or bash script and try to push it by tomorrow, no guarantees though :stuck_out_tongue:
23832|@fa7ad ok! I was about to start the same process but you're very welcome to contribute to the cause! 😉
23833|Current state: - markdown as an extension is in https://github.com/Microsoft/vscode/tree/kieferrm/markdown - we miss the editor title area contribution: #7064 - markdown source colorization needs to be beautified: #7068 - the display performance is sub-par: #7066 - there are several defects: #5038, #7067 - extension needs to be part of the regular translation process: #7065 - Toggling between source and preview using the same keyboard shortcut is limited by #6941. Current workaround is to use the `workbench.action.navigateBack` command.
23834|@JVimes understood
23835|Yes, once the extension is in place, we'll close this.
23836|"@jrieken that is true for any editor until some condition that makes it pinned. currently we have: - double click from the explorer - double click from ""opened editors"" list - double click on title of editor - the global action to pin an editor - making a text file dirty  The fact that an editor is preview or not is not bound to the editor being a file or not. Are you suggesting we should change this assumption?"
23837|@joaomoreno there is no Code-91fbfd-shared.sock but there is a Code-91fbfd.sock:  ``` Old-MacBook-Pro:~ lucnoc$ ls -al /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock ls: /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock: No such file or directory Old-MacBook-Pro:~ lucnoc$ ls -al /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd.sock  srwxr-xr-x  1 lucnoc  staff  0 May 31 09:17 /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd.sock ```  I manually moved `Code-91fbfd.sock` to `Code-91fbfd-shared.sock and restarted vscode but now I get:  ``` shell.ts:416 connect ECONNREFUSED /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock: Error: connect ECONNREFUSED /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock     at Object.exports._errnoException (util.js:890:11)     at exports._exceptionWithHostPort (util.js:913:20)     at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1061:14)e.onUnexpectedError @ shell.ts:416 shell.ts:416 Watcher terminated unexpectedly and is restarted again...e.onUnexpectedError @ shell.ts:416 ```  changing permissions +w to all does not help:  ``` Old-MacBook-Pro:T lucnoc$ ls -al Code-91fbfd* srwxrwxrwx  1 lucnoc  staff  0 May 31 09:17 Code-91fbfd-shared.sock srwxrwxrwx  1 lucnoc  staff  0 May 31 09:51 Code-91fbfd.sock ```  and also tried to move 9c folder to __9c, restarting causes a new folder to be created:  ``` bash-3.2# ls -al /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/ Code-91fbfd.sock  TemporaryItems/   com.apple.mail/   xcrun_db ```  but only Code-91fbfd.sock is created and I get the original error:  ``` shell.ts:416 connect ENOENT /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock: Error: connect ENOENT /var/folders/9c/gkt2df7j11b965s2c1tgxvk80000gn/T/Code-91fbfd-shared.sock     at Object.exports._errnoException (util.js:890:11)     at exports._exceptionWithHostPort (util.js:913:20)     at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1061:14) ```  This are the complete logs for the original error from developer tools _before_ I tried creating the -shared file: [1464711582728.log.txt](https://github.com/Microsoft/vscode/files/291673/1464711582728.log.txt)
23838|172821984@qq.com
23839|@weinand I checked out the branch and the code looks good. Though I have some things which I would change, would your prefer: -  I incorparate all that feedback and rewrite parts of your code on master - You create a PR and I add comments on your PR  Both work equally fine for me 😊
23840|@waderyan I've tried following this and the related conversations but I can't seem to find a way to resolve the warnings in VSCode Version 1.1.1 (1.1.1)
23841|I moved the configuration code into `terminalConfigHelper.ts` to make it more testable,  https://github.com/Microsoft/vscode/commit/775c64319217a21ba1de3997a94ca4905f8ccf26  Maybe changing `getFontFamily` into `getFont` which returns an `ITerminalFont` would be best since all 3 values are used together:  ``` ts export interface ITerminalFont {     fontFamily: string;     fontSize: string;     lineHeight: string; } ```
23842|"@Tyriar Is there any chance of making the error ""dialog"" pin-able to the bottom/top? Maybe its already in the 1.2.0 release? I do not want to jump from one error file press ""control/shift+m"" and do this in page having a build error.  I am just doing a migration of Angular beta2 to rc1 with many errors, a pinned window with all errors would allow a much better workflow :-)"
23843|"@bastienJS I don't think it's possible right now, you can file an issue specifically for that ""Show errors/warnings in 'pinnable' panel"" (or something) and it will get routed to the right person :smiley:"
23844|@Tyriar Hey hey quick answer ;-) Ok I will do that, thanks!
23845|@bastienJS I'm most awake around this time :wink:
23846|@Tyriar Man I can`t wait for the 1.2.0 release with the integrated CMD :-)  => https://github.com/Microsoft/vscode/issues/7074
23847|@bastienJS you can try it out now on the Insiders build, pretty eager for feedback to come in! http://code.visualstudio.com/insiders
23848|@Tyriar Just installed it. So I get the latest visual code artifact from each day? Thats cool man. So I can give quick feedback if I see change in the behavior good/ bad ;-)
23849|@bastienJS I think the daily change is going live next week with the stable build
23850|@Tyriar I already experienced the not available scrollbar due to term.js, I am surprised that this is a javascript implementation, never thought of that. Is there a special reason for it? Just curious...
23851|@bastienJS the root cause of that is because only the current viewport is represented in the DOM, it's probably the right way to go to save creating so many elements but a scroll bar would definitely be handy.
23852|Seems fixed, at least with this repo.
23853|"@Tyriar handy? hehe that was said mildly ;-) Without scrollbar, but more than ONE build error, its not usable at least in that context. Just think the integrated terminal has a height of appr. 100px. When I run ""ng build"" with more than an error I can see only the last error, the rest is cut."
23854|@isidorn my code is not meant as a PR, it was just code that I wrote to unblock me. Since you are the owner of the launch config variable substitution you should implement this feature.
23855|I have that problem too since upgrading vscode to 1.0. I use vscode on windows, linux and mac with node 5.x and I get that behaviour on each platform ever since upgrading to 1.0 In case of the linux machine I also tried node 4.x, 5.x and 6.x and it did not make any difference. I then reverted vscode back to a 0.9x version with node 6.x and it worked again. So there must be something wrong with the 1.0 release as opposed to a possible node 6.x incompatibility. I also tried the 1.2.0 insider but the problem still persists there.
23856|@bastienJS it's still possible to scroll though with the mouse wheel and <kbd>ctrl</kbd>+<kbd>shift</kbd>+arrow or <kbd>ctrl</kbd>+<kbd>alt</kbd>+page up/down (on Linux/bash anyway). If you weren't aware of this I'd be interested in the platform you're on and which shell you're using.
23857|I would also say that writing RegExps in the search box would be much easier with a monospaced font.
23858|I think it was because of wrong casing of my opened workspace on mac.  Ben previously had an issue that file events would get missing for wrong casing workspace on mac. I think he fixed that, but maybe there is something related for these decorations.
23859|@isidorn it looks like a font-weight change is occurring, e.g. Segoe UI semi-bold to Segoe UI regular (just from looking at the GIF).  I will need to look more closely and inspect the element in the dev tools.
23860|@bpasero yes, I think there is a font weight change occuring (which also seems to be causing #6792).  I will see what I can dig up and get back to you on these issues.
23861|Pushed a first version of this to master, check it out and let me know what you think. Seems to work fine for the mock debug example - note that the variable name is case sensitive and in `package.json` of mock debug you contribute 'PickProcess'
23862|one reason to have the version in the main .rpm file is so that I actually -know- what version I downloaded. All I see is vscode-x86-64.rpm that's it. I have no idea whether that's the current version or older version until I would try and install it or run a command like rpm -q --info but that' should not be required.,
23863|@jrieken   Is there a reason why we shouldn't extend the local Find/Replace colors here?  While the Find/Replace has focus, the editor shows in a differentiate way what is a match versus what is both a match and currently selected.  Below I'm searching for `foo`, but the Find/Replace for `bar` is much more clear as to what I'm on. ![image](https://cloud.githubusercontent.com/assets/11839736/15693070/43f0f7f0-2747-11e6-9fbf-e533f8427c75.png)  If you have no objection, this seems like a good way for Search to also behave.
23864|"@isidorn looks great! I've released ""Attach to Process"" support for node-debug to master. One issue I saw: dismissing the process picker with ESC does not abort the launching of the debug session."
23865|Also if there's time (lower priority)... - Search colors different from Find/Replace https://github.com/Microsoft/vscode/issues/6402#issuecomment-222636758
23866|I integrated what I was working on with [your prototype](https://github.com/Microsoft/vscode/tree/andre/pickervariables) and it works great.  Let us know once the implementation makes it to master.
23867|Duplicate of https://github.com/Microsoft/vscode/issues/6587, coming in the June release :smiley:
23868|Duplicate of https://github.com/Microsoft/vscode/issues/7034
23869|So the regular Powershell terminal supports selection using those keybindings? Interesting that <kbd>ctrl</kbd>+arrow doesn't skip the word, that works fine on bash.
23870|Should be fixed in 1.2 coming next week (#6338). The insiders build should work correctly now. In the meantime this should fix it:  ``` bash sudo ln -s /usr/share/code/bin/code /usr/bin/code ```
23871|Hi I've just published an extension. It's still in beta but it seems to be working in OS X and Windows. https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons Sublime icons for everyone!
23872|@robertohuertasm you should probably put a disclaimer in the README indicating that it's literally modifying vscode and that the extension will probably break every update (and potentially break the update).
23873|"@Tyriar It's my Chinese input application ""QQ Pinyin"""
23874|@builden ah, I think that's pretty command for keybindings to break when an IME is active.
23875|@Tyriar I have closed the IME keybinding, but another person is hard to find which app have binded the command
23876|@Tyriar yup it's the expected behavior the system will do. The extension json file is synced by the system automatically so I suggest we detect its change and the real extension list and notify users about the change, let them decide whether to sync the extensions on the new machine.
23877|+1, this is https://github.com/Microsoft/vscode/issues/2754
23878|When quick open is closing it calls the focus() method of the active editor. It is up to the implementor of the editor (in this case the htmlPreviewPart) to do something then. We seem to call focus() on the <webview> and this brings up the native outline.   If we add a rule to our shell.css (in https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/media/shell.css#L174) to have no outline for webviews, this issue is fixed.  ``` .monaco-shell .part.editor .iframe-container, .monaco-shell .part.editor .binary-container, webview {     outline: 0 !important; } ```
23879|@ZombieProtectionAgency please use `New Untitled File` from the command palette. The other action really needs an opened folder.
23880|Fixed, coming in June release.
23881|It really feels like there needs to be a harder link between markdown and the preview.  i see from interviews people expect that the preview is closed when closing the markdown file (for example).  i don't know what the answer is but maybe there is a formalization of an editor to a preview.
23882|Need to fix installation conflict:  ``` ❯ sudo dpkg -i /home/daniel/Downloads/code-alpha_1.2.0-1464754274_amd64.deb [sudo] password for daniel:  (Reading database ... 424209 files and directories currently installed.) Preparing to unpack .../code-alpha_1.2.0-1464754274_amd64.deb ... Unpacking code-alpha (1.2.0-1464754274) ... dpkg: error processing archive /home/daniel/Downloads/code-alpha_1.2.0-1464754274_amd64.deb (--install):  trying to overwrite '/usr/share/pixmaps/code-alpha.png', which is also in package visual-studio-code-alpha 1.2.0-1464719797 dpkg-deb: error: subprocess paste was killed by signal (Broken pipe) Errors were encountered while processing:  /home/daniel/Downloads/code-alpha_1.2.0-1464754274_amd64.deb ```
23883|+1
23884|"@dbaeumer the quick open prefix is ""edt left"" though and I am not sure you would want that to also change? Are you mainly concerned about the blue group label?"
23885|"You have case issues :|"
23886|The key point of synchronized scrolling is mapping the preview html sections to markdown source. A dirty but quick solution is injecting hidden splitters to html preview then map them to line numbers of markdown source. Since we've moved the markdown rendering code to a separate extension, this kind of hack should go with the extension either.  The missing feature in VS Code is how to scroll the preview panel. We are previewing the content by triggering `htmlPreview` command with content bytes, it's likely we should bind some `scrollHandler` to the `htmlPreview` action.
23887|Did you get a consistent repro? I've found lots of issues with any Chromium-based app on VirtualBox so this is probably an upstream issue.
23888|@felixfbecker maybe try `code --disable-gpu`
23889|The html preview isn't an editor - it renders html and happens to be implemented as an editor. I think it should be pinned by default
23890|This issue was moved to Microsoft/TypeScript#8912
23891|work has already started
23892|This fix should go in the previewPart
23893|impossible ;-)
23894|I didn't define any of the colours. I remember a time when they were aligned, but I don't know why they changed
23895|#3192 evolved into a general menu/context menu issue. The current feeling is that we will only allow editor title menu. If have updated the title of the issue accordingly
23896|@Tyriar you're right. I assumed that every update will rewrite the mods. I'll address the rollback behavior and warn the users about the inner workings of the extension.
23897|Seems like it gets into the deopt-state cos it was optimised to many times...
23898|The implementation is on master now.
23899|Thanks for the log, @lucnoc, now I get to see the real issue.  @dbaeumer: from @lucnoc's log, it appears that the value in the `VSCODE_NLS_CONFIG` env variable is not valid JSON, making `bootstrap-amd.js` fail at line 20, thus preventing the shared process to launch at all. Any idea how this can happen?
23900|If it is casing, it must be very reproducible when you open it with the wrong case. Did you give it a try?
