8201|I'll let you know what kind of feedback I get.  I imagine that 99% of PowerShell users will be happy because it's more like what they're used to in the PowerShell ISE.  People generally seem pretty excited by [this tweet](https://twitter.com/daviwil/status/694313199982637056) judging from the retweets and likes.
8202|I'll keep an eye on this. Let me know if I can be of any help.
8203|Hi, can you specify which action you are taking in order to highlight this text? I've tried it on both OSX and Windows and it works fine for me when I (CTRL + A) or (Shift + Arrow).
8204|"Just to clarify, the ""February"" milestone is technically the one after the current milestone in progress, which is the ""January"" milestone, right?"
8205|"@eljamaki01 Yes, I can easily break on line 13 of the server.js process on OS X.  On Windows the server.js process gets an ECONNRESET error on the debugger connection as soon as I hit the localhost:3000 address in the browser. This terminates the debug session and prevents the breakpoint from being hit. This ECONNRESET exception only occurs if there is an ""node2.on('message..."" handler installed. If I comment out the handler the breakpoint is hit.  Since I could reproduce the same behaviour with node-inspector, this problem is a node problem and independent from VS Code, hence I will close this issue."
8206|I'm using the mouse. Just hover over the line numbers and drag up/down to highlight the lines.
8207|@rkeithhill that's correct. But you will be able to try the feature as soon as it's available in the alpha channel.  CC @isidorn
8208|@egamma I checked my environment again: The left side of the initial screenshot was made with  VSCode 0.10.6 and Dark+ (Experimental) theme.
8209|Just to understand this properly, you are referring to the fact that highlighting lines 2-4 and pressing backspace results in a file with 3 lines, the middle one empty?  If that is the case, this is to be expected since you have a selection, and replacing that selection (in this case, with nothing).  You could also press another key with your selection, say 'x', and would end up with line 2 having 'x' in it, as you just replaced the selection with 'x'.  This is pretty much standard behaviour in text editors, what you're probably after is something like Vi 'dd' (delete line) comand.  VSCode has this command as Ctrl+Shift+k (you can find out stuff like this in command palette), and it kinda counter-intuitively also works for mutliple line selections.  Edit: A commonly used shortcut when heavily using mouse is to expand your selection to just behind the last character of the previous line, and pressing delete.
8210|Not really. It's when deleting multiple lines, some with content, some empty. Not all the empty lines get deleted - it's definitely noticeable coming from Visual Studio 2015.
8211|Interesting, couldn't reproduce this on Linux with 0.10.6 either.  Multiple empty lines in-between, mouse selection as well as cursor selection works as expected, and leaves me with my cursor in exactly one empty line as expected.  Selecting lines 10 to 3:  ![vscode_select](https://cloud.githubusercontent.com/assets/8385202/12768818/d4116640-ca12-11e5-97c1-bb9685545e30.png)  Pressing 'x':  ![vscode_sel2](https://cloud.githubusercontent.com/assets/8385202/12768836/04ea411a-ca13-11e5-87c2-37a8b88d4fad.png)  Undo, and pressing backspace:  ![vscode_sel3](https://cloud.githubusercontent.com/assets/8385202/12768866/511eaa58-ca13-11e5-9032-d5238235d271.png)
8212|I'm running it on Windows 10 64bit. I am also using a [custom language extension](https://github.com/Armitxes/VSCode_SQF) which may be the cause but I dunno.
8213|@Stanzilla You have to manually download it from the link below. they don't support update to insider anymore. https://code.visualstudio.com/insiders
8214|Electron is the UI framework we use and they are here: https://github.com/atom/electron  They might also have an idea what is going on and how to solve the issue.
8215|@alexandrudima fyi for discoverability of Alt+F1
8216|@Tyriar thanks. I am not sure this can live in the application code because e.g. on Windows we have a startup script that makes sure no output from the application is printed to the console.   @joaomoreno would it make sense to enrich the startup script with this? However we would also need a solution for Mac/Linux.
8217|Ah well, that is unfortunate
8218|I reported the issue ([#4332](https://github.com/atom/electron/issues/4332)) to Electron on GitHub, it seems it is a known and an open issue ([#1821](https://github.com/atom/electron/issues/1821)). That would mean vscode cannot be used on Windows 7 pc's which have basic theme because it is quite bothering if other application windows are not drawn properly and I do quite a lot of Alt+Tab to switch to different windows.
8219|@gregvanl I think we should note this in the FAQ.
8220|@weinand maybe instead decorate the file name in the callstack in gray / red and on hover show the info that the mapping is missing. Or a combination of your first idea with this?  'Paused on entry. Some source maps missing' And then the call stack could indicate which one
8221|@aeschli can you investigate into this  > With OmniPascal I see the same differences on both machines. I'm not sure whether these changes have come due to API changes or a bug. I did't find anything about API changes with the highlighting engine. Please let me know if there are some.
8222|Can be triggered via CtrlCmd+K F12 or from F1 pallette.
8223|+1 for tabs. The question- why don't you remove it from Visual Studio Bundle then? See what happens then...
8224|+1 for this issue. Also appearing on Windows. Its totally annoying and I don't like it.
8225|This issue was moved to OmniSharp/omnisharp-vscode#27
8226|I would love to get a single solution for all platforms. Truth is: starting up Electron is a mess.
8227|@SamVerschueren this is part of our ongoing work to be more accessible: https://github.com/Microsoft/vscode/issues/2108  Indicating the currently focused element is a requirement to be accessible. You can see this in action when tabbing around the UI with the tab key.  As to wether the affordance we show is good or bad, I assign this to UX for discussion.
8228|@digeff Thanks for filling this. But without reproducible steps, I'm going to have to close this. Let me know if you see it again.
8229|The added value is Accessibility :]
8230|Aha, makes sense :). Would it be possible to make it an option (which is default `on`) to turn this behaviour off?
8231|Yeap maybe. For now I like that everyone sees it and can report feedback on it.
8232|:+1:
8233|After some investigation I figured out that all the output events I get from the debug adapter have \n appended at the end. So I am not adding those - Ben just added some heuristics on our side to make sure the output is together if it is the same category. Once the debug adapter stops sending \n at the end, I can remove these heuristics  Forwarding to @weinand to verify if the node adapter is appending \n at the end of each output. I looked at node debug code and noticed a lot of sanitaze calls to the output - not sure if those added the extra '\n'
8234|@Stanzilla sorry about this, but please read this blog: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/
8235|@weinand fyi the `alpha channel` currently isn't public :smiley: (it is still under discussion how we want to do, frame it).
8236|"@isidorn Here are the two handlers from node-debug that receive the data from the debuggee and forward  it to you:  ``` js     private _captureOutput(process: CP.ChildProcess) {         process.stdout.on('data', (data: string) => {             this.sendEvent(new OutputEvent(data.toString(), 'stdout'));         });         process.stderr.on('data', (data: string) => {             this.sendEvent(new OutputEvent(data.toString(), 'stderr'));         });     } ```  I don't see any sanitize calls in there.   And here is the test program:  ``` js console.error(""stderr""); console.log(""stdout""); console.error(""stderr""); console.log(""stdout""); console.error(""stderr""); console.error(""stderr""); console.error(""stderr""); console.log(""stdout""); console.log(""stdout""); console.log(""stdout""); ```  which produces this result:  ![2016-02-03 10-59-32](https://cloud.githubusercontent.com/assets/1898161/12778836/4caa3f76-ca65-11e5-8b9e-50047a5a979e.png)  Since I'm not adding any '\n' anywhere, I don't think that I can fix this on my side."
8237|If I debug the node debug I see that all events have an `\n` at the end before you send them. I can work around this on my side and group them together but it would be interesting to see why the have a `\n` in the first place  Forwarding to @weinand to check if my findings make sense  ![screen shot 2016-02-03 at 11 19 49](https://cloud.githubusercontent.com/assets/1926584/12779423/30b72862-ca68-11e5-81ad-b5e4915eac9c.png)
8238|My mistake, this is expected, since console.log does a writeln, I am not handling it well on my side. Giving back to me to handle the grouping better
8239|Might be more difficult. I like the highlighting when navigating with tabs. It's very clear what item is selected. But when I start debugging something, the the highlighted pane is automatically switched 3 times in a very short timespan which makes it very weird. Think we should just get the discussion going on how we can improve these things.
8240|:+1:
8241|@SamVerschueren can you capture from where to where it moves?
8242|@isidorn Ha! I was just seeing this problem yesterday but I did not understood that it was related to readonly editors. So when I started to file a bug I couldn't reproduce it (because I was debugging a normal file), so I gave up... ;-)
8243|Should be fixed now üòé
8244|üëçüèª
8245|Closing for now.
8246|@isidorn has been fixed but TFS builds are down...
8247|I'll just rebuild locally, thanks
8248|We could reproduce the problem.  - It happens when an extension is uninstalled and the extension has code that is loaded into a server (tslint runs a server process).  - The files loaded into a server process cannot be deleted and removed and you end up with a partially uninstalled extension. - On the next startup Code doesn't find the package.json and complains.  We have addresed this the January update by keeping track of deleted extensions.
8249|Cannot reproduce in 0.10.7-insiders. Closing.
8250|There is nothing to do here on my end IMHO. Forwarding to Andre so he can decide whether to close this bug or if there is some workaround.
8251|@stevencl I think this is a valid feature request and would be useful for some users. But what you then expect this behavior across all our hovers or just for the debug hover? If it is only the debug hover would it make it inconsitent?
8252|I can reproduce the different coloring for the OmniPascal sample for the ifdef and type token The first and last line use `annotation.block.objectpascal`, the type `type.objectpascal`. The change of coloring was caused by my clean up of the token colors css. We used to have colors for both 'annotation' and 'type', but I removed them as both are not standard text mate scopes and caused unwanted matches to other scopes inside a type declaration. The best would be if the OmniPascal could use `storage.type` for type names. For imports maybe use `keyword.control.import`. Which scopes to use is not so easy to decide. I'm using https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai and http://www.apeth.com/nonblog/stories/textmatebundle.html as a reference.
8253|@isidorn make a video
8254|@daviwil we just now changed how we handle multi line output (though this will not be a part of the January release). Here are the changes, I think it should improve your use case - No more rendered lines - No more automatic appending empty lines - You should be able to send an multi line output event and it will be split up and shown nicely in multiple lines  If more things are needed please reopen üòá
8255|That's https://github.com/Microsoft/TypeScript-TmLanguage/issues/41
8256|Ok it is not for all the actions, I see it for debug start and only in vscode alpha, not in out of dev  ![actionfocus](https://cloud.githubusercontent.com/assets/1926584/12780884/0fe1db7e-ca71-11e5-942b-554ec778d3de.gif)
8257|Makes sense, thanks!
8258|closing since this works in the latest version of vs code
8259|"Same for php template files, e.g. ""*.twig"""
8260|@aeschli Thanks a lot for your help! I was able to fix the `.plist` file. I replaced `annotation.block.objectpascal` with `token.metatag` so it looks exactly like it used before. In case you decide to delete this token too then I will replace it with `keyword.control.import` as you suggested.
8261|Since we use our Severity class for distinguishing between output types (info, warn, error, ignore) as an easy fix I gave the console a warn category. So we show it in orange. I also tried blue, maybe is too strong for my taste since the sidebar is orange so it drags unnecessery attention.  Anyways, please try out the orange and if you think this is wrong reopen and I will do a bigger refactoring and change to blue.
8262|I think this is a valid feature request, but I am not very excited about adding specific code for treating strings when copying values. Leaving this as a feature-request and will add it if more people ask for it.
8263|@jrieken FYI I know you are thinking about proposing extensions, just to make sure we propose mono-debug for mono projects  @weinand what exactly did you have in mind here - help existing users? When we show the mono is missing error that there is an action that takes them to the mono extension in marketplace? Or an action that would automatically install mono? Or something else?
8264|@isidorn Since we do not know in the UI whether the quotes belong to the data or are just a representation of a specific type, we cannot remove them blindly. So before we can implement this feature, we have to solve the meta-type issue.
8265|@isidorn you need to pick a theme from the theme list. you are on a stale theme.
8266|@isidorn we should align with what @jrieken is doing for omnisharp.
8267|@bpasero Machete don't use theme üò§
8268|On the Typescript issue, as mentioned by @egamma, there hasn't been any change for the last update. But of course the current coloring should be improved. I'm waiting for https://github.com/Microsoft/TypeScript-TmLanguage/issues/23 to be implemented, then we could give a better experience for object literals.   I'm closing this issue as what you observed are the currently expected results.
8269|I thought I saw it when debugging, but it seems that it occurs when running my `vscode-yo` plugin.  ![debug](https://cloud.githubusercontent.com/assets/1913805/12782819/fbca765c-ca7d-11e5-9f85-236bb14f615d.gif)
8270|Configure to use the latest version of typescript via the 'ts.sdk' option
8271|@SamVerschueren I see, the issue is that the picker closes, focus moves back to where it was and then back into the picker.  The blue line that you see for output is not a focus indicator actually, so you might get confused there easily.
8272|It also only happens if no file is open because with a opened file, focus moves back to the file when quick picker closes.
8273|> The blue line that you see for output is not a focus indicator actually, so you might get confused there easily.  Oh I see, you're right. The output panel never gets focus, although you get the idea that it receives focus because it switches so quickly.  > It also only happens if no file is open because with a opened file, focus moves back to the file when quick picker closes.  Confirmed  But it just looks weird. Maybe I have to get used to it :).
8274|Please see the blog post for how to get the insider bits https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/
8275|"to verify, use [this project](https://dl.dropboxusercontent.com/u/2433608/code/verify2555.zip) first on the original Insiders release and then the stable release. - open in VSCode - set breakpoints in lines of 10, 17, 21, 23 of src/classes.ts  - launch and 'continue' through the 4 breakpoints  Observe: they do not jump - remove the ""--nolazy"" option - launch  Observe: the breakpoints jump  With the fix in the stable release they should not jump."
8276|:+1:
8277|to verify use [this project](https://dl.dropboxusercontent.com/u/2433608/code/verify2574.zip). - open project in original Insiders release - launch debug session and step through the code  Observe: stepping occurs in .js file not .ts  In the stable release after a first step in .js you should step through the .ts file
8278|Thanks @xaverh, I delivered the PR.
8279|I also find it confusing that keywords and type names share the same highlighting color.
8280|Fantastic, thank you!  I think that covers everything that we'll need for now.  Being able to send a multi-line output event will really help cut down on OutputEvent calls so that the REPL output will be faster.
8281|So shouldn't this or #559 be opened if it is not working in HTML files?
8282|![screen shot 2016-02-03 at 7 49 22 am](https://cloud.githubusercontent.com/assets/11839736/12787556/bccf0234-ca4a-11e5-86ff-b4619d6270b7.png) The only problem with doing that is we need to be ready to accommodate horizontal scrolling as well (which is why there is the gap).  I would suggest, however, that we draw it down anyway and make horizontal scrolling go as far as the vertical scroll bar. ![b](https://cloud.githubusercontent.com/assets/11839736/12788027/c1d0c1c6-ca4c-11e5-8bb0-cdf5ed138ee4.gif)  Alternatively, we could do this (add stroke to the horizontal scrollbar area (not my favorite). ![screen-shot-2016-02-03-at-7 49 22-am](https://cloud.githubusercontent.com/assets/11839736/12787916/3ace94c8-ca4c-11e5-9291-68c4ff1e7ccd.gif)
8283|I was actually working on similar scripts for Mac and Linux in order to capture output and not hold the terminal captive which I'm assuming is the reason for the windows script (code.cmd right?). Atom has a similar setup and gets around this by printing the output if `-h`, `-v`, etc. is passed in. That would allow the handling of command line args to be centrally located within bootstrap.js.
8284|"@Tyriar but I think bootstrap.js is already too late, we have a script code.js on Windows at least that eats all the output. I would think the handling of ""-h"" and ""-v"" has to go in there and idealy is cross plat."
8285|Totally agree.  Only code should be in a monospaced font.  The way it's done in the second image is how we should do it.
8286|@bpasero oh I thought maybe that was what `@echo off` was in code.cmd, not too familiar with batch. Regardless if it's code.cmd or code.js, output could just be allowed for a handful of command line args as  it's known that bootstrap.js will handle them and exit(0). That way only the list of commands expecting output has to be implemented per platform (mac and linux could share the same script though).
8287|During the install there is a checkbox whether code should be added to your PATH. If you select the option then a `code-insiders.cmd` is added to your path and support what you are asking for. Is anything wrong with this?
8288|@NoeHedde which OS, node version, VS Code version is this?
8289|is there an extension that offers a terminal? anyhow +1
8290|Ahhh, interesting!  Yeah, the `code-insiders.cmd` isn't accessible via PATH in PowerShell consoles.  It works fine in plain cmd.exe.  I think PowerShell doesn't treat .cmd files as something that should be launchable from the PATH.  It's good to know that I can at least get there from cmd.exe, but I think it'd be ideal if it worked well from a PowerShell console too.
8291|@ianwesterfield is it possible to get access to the project so that I can debug it? Or can you provide a snippet that shows the same problem?
8292|This issue was moved to Microsoft/TypeScript-TmLanguage#68
8293|+1
8294|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/5
8295|checking how risky a fix would be
8296|This issue was moved to OmniSharp/omnisharp-vscode#28
8297|This issue was moved to OmniSharp/omnisharp-vscode#29
8298|This issue was moved to zargony/atom-language-rust#68
8299|@minam365  VS code doesn't have a XML formatter anymore out of the box. Did you install an extension?
8300|@weinand  OS : Windows 10 pro node: v5.0.0 VS Code : 0.10.6
