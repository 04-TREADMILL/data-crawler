26701|UX meeting topic I guess.
26702|I've just tried PNG file with transparent background and find it Okay. Do you mind helping provide following info: 1. What's the real background colour of the image? A snapshot will be better, otherwise you may want to provide a sample image which breaks in your env. 2. Can you help verify this issue with our latest insider build? Our latest markdown feature is on the Insider version.
26703|Thanks for the info!
26704|Is this cmd.exe? VS Code should not have any effect on the external terminal, any other details? A screenshot might be helpful.
26705|I re-created another image with less information as this couldn't be published and I saw it was displayed correctly. When I repeated the steps on the original image it wasn't correctly refreshed. After closing the MD preview and reopening it the image was displayed correctly.
26706|"I also found the refresh button now, so when replacing an image on the filesystem you need to press ""refresh"" as well in order to get the updated image."
26707|@xtbe thanks for your detailed info and patience! The second issue you mentioned is already logged in https://github.com/Microsoft/vscode/issues/5687 , we will add local file monitor later on but for now I'm not sure whether we should keep an eye on local image links in markdown content.   Besides, I'd like to keep this open for a while to see if we can reproduce the problem constantly.
26708|Thanks.   I created #7877 with a package.json which should have installed grunt locally.   This may be a separate bug, if not feel free to resolve as dupe.
26709|Finally reproduced this, of course it was my silly mistake - I had changed my Numlock preference in the BIOS.
26710|Similar to #7881, but note that the **No build tasks configured** message might be generated for a number of different reasons...   For example, in a project with grunt installed as a dev dependency, and the attached gruntfile, we still end up with an empty tasks array even after seeing the message:     Auto detecting tasks for grunt
26711|"@joaomoreno The process that is spiking in cpu usage is the following, let me know if additional information is required on your end:  ""C:\Program Files (x86)\Microsoft VS Code\Code.exe"" --type=renderer --no-sandbox --lang=en-US --app-user-model-id=Microsoft.VisualStudioCode --node-integration=true --enable-pinch --device-scale-factor=1 --enable-delegated-renderer --num-raster-threads=1 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --channel=""9128.1.1948626824\1501164466"" /prefetch:673131151"""
26712|I believe this is already fixed, can you see if you can reproduce in the [Insiders build](https://code.visualstudio.com/insiders)?
26713|Thanks @Weinand, I have open issue https://github.com/Microsoft/vscode-node-debug/issues/77.   For capability detection is it feasible to use some environment variable?
26714|"There is a much cleaner workaround that won't break other apps:  ``` bash # make a copy of the relevant library mkdir ~/lib cp /usr/lib/x86_64-linux-gnu/libxcb.so.1 ~/lib sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' ~/lib/libxcb.so.1 # set the dynamic loader path to put your library first before executing VS Code LD_LIBRARY_PATH=$HOME/lib code ```  Obviously, you can tweak your `.desktop` files and other launchers to set the environment variable solely for VS Code. Go to `/usr/share/applications/code.desktop`, copy it to `~/.gnome/apps` (or wherever your desktop manager likes it) and change the `Exec` line to read something like:  ``` Exec=sh -c ""env LD_LIBRARY_PATH\=\$HOME/lib  /usr/share/code/code"" %U ```  The `sh -c` makes sure the command is evaluated and variables expanded, and `env` sets the variable itself. This is not very pretty, but not all desktop managers handle environment variables inside  `.desktop` files the same way, so it's a sort of belt and suspenders approach.  I just tested this on Xenial (Ubuntu 16.04) inside `vnc4server`. Of course the real issue needs to be fixed upstream in Electron (I have to wonder why they don't have cleaner fallbacks for lack of graphics acceleration...)"
26715|@OneOfOne Thank you! That removed the annoying dialog prompt scenario.
26716|"I originally didn't understand why you would expect **F1** to do this in the ""new terminal"", but by ""new terminal"", I assumed you meat the a CMD prompt window, such as displayed by pressing **Ctrl+Alt+C** under version 1.2.1.   I now understand you were referring to the ""integrated terminal"" displayed with **Ctrl+`** (Ctrl+BackTick)"
26717|I  had VSCode Insiders build running over the weekend. Came in Monday morning and saw a crash.  I'm wondering if there is any telemetry crash/dump data that is automatically sent when VSCode crashes? Sort of like watson reports.
26718|Hi @bpasero. I apologize for the delay in responding. I have created the video and you can find it here: https://www.youtube.com/watch?v=WlOKSGDQ9rg  As you can see, I create a folder and a file, then open the file in Code. When I move the file to a different folder from the terminal, VS Code does not throw any (clear) warning and on saving the file, creates a duplicate. I am not sure if this is intended functionality or a bug. I would like to see at least a message indicating that the file has moved so that I know I am saving a new copy (similar to how Notepad++ handles it).
26719|As you mentioned, it does not save the file to disk unless it is dirty, but neither does it update itself to show that the file has moved. The location bar continues to display the X folder as the location rather than the parent VSCodeTest folder.
26720|"@weinand, as I mentioned earlier I'm using Node `v5.10.0`.  > Does it make a difference if you change your launch.config as follows: > `""program"": ""${workspaceRoot}/js/app.js"",`  Now I'm getting this:  ``` sh Attribute 'program' does not exist ('d:\Projects\web\training\ts-in-depth/js/app.js'). ```  It works fine if I'm using `tsc` from command line using arguments from `tasks.json`.  The only workaround for me now is to use more suitable TypeScript editor\IDE so i'm about to use WebStorm instead. Once issues with Code would be fixed I'll switch back.  Thanks!"
26721|@joaomoreno Why do you want to keep both linked?  The only reason I can think of would be due to giving the user too many options to have to consider, but my suggestion of keeping them linked by default and having an override solves that.
26722|\o/ https://github.com/Microsoft/monaco-editor
26723|@aeschli I meant reconsider adding very basic (language ID + maybe syntax highlighting) for `.sass` files.  Regardless, if I want to support indented syntax, would I just include `sass-indented` in the activation list? I'm assuming (hoping) it won't result in any activation errors if the extension is not installed.
26724|Don't know if this is you or Ben,
26725|@virtyaluk it seems that you did not transpile your TypeScript into JavaScript: there seems to be no app.js in the 'js' directory. Did you run your build task? Debugging won't work until a JavaScript file has been created.
26726|Chris, assigning to you as this is more a produce decision.
26727|This is actually a problem in the tsserver. Moving to the TS team.
26728|This issue was moved to Microsoft/TypeScript#9274
26729|Dups #7877
26730|@joaomoreno marking as important since this might be a regression.
26731|"Looking through the Developer Tools with the extension open, I'm getting lots of ""Cannot find module ..."" errors.    I am using node 6.2.1 and npm 3.9.3.  I've since switched to node 4.45 and npm 2.15.6 with the same results."
26732|This issue was moved to Microsoft/vscppsamples#76
26733|Might be @alexandrudima
26734|Dups #981
26735|Moving to TS team.
26736|@maxdec , thank you for the link.   The issue is now resolved!   https://github.com/Microsoft/monaco-editor
26737|This issue was moved to Microsoft/TypeScript#9275
26738|Might be a proxy issue.
26739|@alexandrudima  Which versions of NPM and Node are recommended to be used for development?  It seems that I have the correct Node modules in my development node_modules folder, but they are not showing up when looking at the out directory of my extension
26740|@infinnie what exactly do you mean with outside the folder. Outside the workspace you have open or is the file an untitled file (doesn't exist on disk). The second one is currently not working the first one should.   @decker67 out goal is to have good JS and TS support :-)
26741|@alexandrudima I opened up the extension and ran `npm install` in the extension folder, and the extension works properly now.
26742|Moving to TS team which owns the JS smartness.
26743|This issue was moved to Microsoft/TypeScript#9276
26744|@joaomoreno starting with you since it sounds like an update bug.
26745|@nikhiljanshali in which language. And can you provide sample code that demonstrate the behavior you are seeing.
26746|@kreso22 that does not sound good - two common issues exist:   1. You need to install a specific C# extension 2. There is a unity extension that helps  These items are covered off on this doc page: http://code.visualstudio.com/docs/runtimes/unity  Have you tried these?  If so we may need to dig into your specific issue more. Sean
26747|@alexandrudima not sure if you or @jrieken with his new menu support.
26748|"@joaomoreno adding you for the ""staging current hunk"" request."
26749|Moving to the TS team which own the formatter.
26750|This issue was moved to Microsoft/TypeScript#9277
26751|This issue was moved to OmniSharp/omnisharp-roslyn#588
26752|@ZCShou which view are you talking about. The explorer, editor, ...
26753|Moving to TS team.
26754|This issue was moved to Microsoft/TypeScript#9278
26755|@OliverJAsh OK to close ?
26756|This is great news. Could you run a profile for about a minute in the `Developer Tools` of your Code window, and send me that? That'll tell us where the time is spent.  Let me know if you need help with that, I'll guide you.
26757|@bpasero assigning to you since this could be caused by the new editor / tab code. And according to https://github.com/Microsoft/vscode/issues/7743#issuecomment-226363567 this is language agnostic.
26758|Yup thanks  On Mon, 20 Jun 2016 at 20:35 Dirk Bäumer notifications@github.com wrote:  > @OliverJAsh https://github.com/OliverJAsh OK to close ? >  > — > You are receiving this because you were mentioned. >  > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7805#issuecomment-227245569, > or mute the thread > https://github.com/notifications/unsubscribe/AA4QCX5jBLccrpOrB5QdHgvlkQUjFdvfks5qNutugaJpZM4I4LRP > .
26759|"@bpasero this brings up a good point about ""release notes"" for insider builds. It's not always evident from looking at recently closed tickets what has changed."
26760|@aeschli not sure if you or @alexandrudima
26761|@jrieken not sure if you or @isidorn @weinand
26762|@robertleeplummerjr OK for you to move the discussion over ?
26763|@Tyriar assiging to you because of the deb package mentioning.
26764|@dslpp056193 can you give 1.2.1 a try. We fixed issues around performance https://github.com/Microsoft/vscode/issues?q=milestone%3A%22June+13th+Stable+Recovery%22+is%3Aclosed
26765|No response received from issue creator. Closing after 14 days
26766|Closing since this will be fixed in next stable release.
26767|@joaomoreno Will this suffice? https://github.com/Microsoft/vscode/files/317180/cpu_profile.zip
26768|@dbaeumer C# and C# debugging are a separate extension. I suggest to always move this to https://github.com/OmniSharp/omnisharp-vscode/issues
26769|Looks like it can not resolve the relative paths.  It will work if the path is relative to the workspace but not relative to the Markdown file location.
26770|Already done.  Thanks for the helpful bump.
26771|I got a new machine last week. When I set it up, I only put the release build (not insiders) - I haven't noticed it crash since then.
26772|"@dbaeumer  I've seen that issue, I thought that the question was a little bit different, it is about defining multiple tasks, a this issue is about concurrent execution, including tasks that are supposed to run ""forever"" like server/watching/etc."
26773|FWIW I am no longer experiencing this as of the update the day after my comment.
26774|Went to bed, woke up, and there's a new vscode update. Problem fixed. Loving your iteration speed.
26775|@JonathanMEdwards thanks for providing the zipped project. That made it very easy to identify this issue as a duplicate of https://github.com/Microsoft/vscode/issues/6549.  The simplest workaround is to rename the 'src' folder to something else. This issue will be fixed in the June release.  Sorry for the inconvenience.
26776|@JonathanMEdwards fix will be available in next Insider build
26777|@JonathanMEdwards fix will be available in next Insider build
26778|@bpasero I haven't seen any crashes since 1.3, running windows 10 insider build >= 14367
26779|@agarwal-sandeep sure, node-debug could use an environment variable as an indicator that node.js is actually chakra.  Please suggest how the env var should be named.  Please note that this env var cannot be set in the launch config but must be set globally. Let me know if this would work for you (until we've fixed the real issue).
26780|@aruneshchandra @mrkmarron for their feedback. We can use NODE_DEBUG_SUPPORTS_STEPBACK=1
26781|Worked on CentOS 7 on x2go ; TYVM for this tip!
26782|"If we move away from term ""editors"" for files, the breaking changes to the command ids called out in https://github.com/Microsoft/vscode/issues/6605 can be greatly reduced.  Users and extension builders may be unhappy when their custom key bindings no longer work.    I'm also not sure there is real benefit in changing ""Editor"" to ""EditorGroup"" in the command ids.  The editor window stays the ""Editor"" and now that it supports a stack of files doesn't mean the command id needs to change.  I worry that some of the UI and command id changes are being driven by implementation details and it isn't necessary to expose these to the user."
26783|@agarwal-sandeep how is this supposed to get set ? Is the user is expected to set this ?
26784|Here is the thing, currently vscode will not do anything after the extension bits are uploaded to the marketplace or after installing the extension to local disk, so when you publish the extension and the node_modules you referenced in the code are not included in the extension bits, they will not show in users' machine.   A proper solution is use `.vscodeignore` to handle file inclusion/exclusion, eg, https://github.com/rubyide/vscode-ruby/blob/master/.vscodeignore
26785|@gregvanl works as charm on my Mac with latest Insider build, I'll give it another try once I have my Windows.   BTW, you may want to close the preview pane and trigger the preview again, or reload the window then preview once more, then if the image is shown correctly, I'll say it can be some file detecting issue. People are running into similar issue in other cases.
26786|"So, the good news is that I got some heap snapshots of a leaky VSCode window. The bad news is that (1) the window crashed while I was looking through the retainers, and after restoring the heap snapshots I lose the ability to look up referenced functions, (2) it contains proprietary information so I can’t give it to you, and (3) there was no clear smoking gun.  The JS heap grew by 1.3MB between the two snapshots, but comparison shows only a +36kB memory delta, and most of this was for newly compiled code (22kB) and internal arrays (9kB). So, I wonder if this issue might be exasperated by some nasty memory fragmentation or allocation bug in V8.  Anyway, of the newly allocated objects, there was one in particular that raised a flag:  ![screen shot 2016-06-20 at 19 20 39](https://cloud.githubusercontent.com/assets/229244/16214265/1d958d20-371c-11e6-94ba-6945f6725ba8.png)  This one is interesting because the backtrace reported earlier mentions `__dirname`, I did not see any frees of a corresponding object from SearchService, and the problem seems to possibly be triggered by messing around with the quick open (cmd+p) dialogue. Still, I would have expected to see way more than a single allocation, which is one reason why I am not very sure about this.  ---  There were also quite a few things pointing at telemetry:  ![screen shot 2016-06-20 at 19 20 14](https://cloud.githubusercontent.com/assets/229244/16214264/1d93f4a6-371c-11e6-8754-db9c39882bb4.png)  This one is interesting because `""telemetry.enableTelemetry"": false` is in my user configuration, and I also block the telemetry servers at the firewall. So, if the telemetry service is still running and doesn’t know how to fail gracefully or limit the amount of data it collects, that could be another problem. However, as far as I could tell, its allocations were balanced with frees.  Nothing else looked very interesting. The only areas of code that were seemingly implicated by the heap snapshots are the search service, the telemetry service, and the loader. (Well, and maybe V8 itself.)"
26787|@bpasero Thanks for pointing me to the preview release. I'll run that for a while and see if I happen to observe this again.
26788|@rebornix I had a .vscodeignore file  I copied the one you linked and removed a few lines from mine, then tried to publish again, but with the same results.  The package works on one machine, but not the other.  I don't understand why some packages would install, but not others, but then when I run `npm install` in the extension folder, it installs all the packages it needs.    I'm currently going through and bumping the version and installing package by package all the low-level packages like `glob`, `faye-websocket`, `hawk`, etc... basically dependencies of my dependencies are not getting installed.
26789|@sandy081 Thanks, that's definitely an improvement. Although the value populated for OS seems very non-specific. I end up still transcribing from winver.
26790|Repro on my machine, only part of the npm packages are downloaded, seems not all dependencies are included into the final extension vsix. @joaomoreno any ideas?
26791|@egamma  We should support real time preview, is so cool 👻  ![](https://img.alicdn.com/tps/TB1Vj..KpXXXXbnaXXXXXXXXXXX-360-235.gif)
26792|I'm willing to see the PR :+1:
26793|@traktraktrugui This experience is not very good.We should add an option to disable looping focus
26794|"Finally the root cause came back to my mind. After switching the markdown preview to extension, we start to use web view instead of a single iframe to show the generated html for better security, but seems we don't handle the base URI correctly in webview, not sure whether it's a webview issue or ours for now but it's a valid bug.  ## update  It's us. We put a base element in the header of the iframe inside webview  ``` <base href=""file:///d%3A/code/vscode-docs/""> ```  And we are setting it as the workspace folder otherwise the default base path will be `file:///D:/code/vscode/out/vs/workbench/parts/html/browser/`, which is totally not what we want."
26795|"In VS Code you can't define the startup project for the debugger but you can set multiple configurations  that correspond to each project.  Here's an example:  ``` {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Debug"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/src/myElectronApp/scripts/main.ts"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": ""compile"",             ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron"",             ""runtimeArgs"": [                 ""--enable-logging""             ],             ""env"": {},             ""externalConsole"": false,             ""sourceMaps"": true,             ""outDir"": ""${workspaceRoot}/src/myElectronApp/bin/resources/app"",             ""windows"": {                 ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron.cmd"",                 ""runtimeArgs"": []             },             ""osx"": {                 ""outDir"": ""${workspaceRoot}/src/myElectronApp/bin/Electron.app/Contents/Resources/app""             }         },                 {             ""name"": ""Test"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/tests/myElectronApp/scripts/main.ts"",             ""stopOnEntry"": false,             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": ""pretest"",             ""externalConsole"": false,             ""sourceMaps"": true,             ""outDir"": ""${workspaceRoot}/tests/myElectronApp/bin""         }     ] } ```  This is of course for an Electron app (Node.js) but you get the idea.  Then you have to select from the Debugger which configuration you want to execute from the dropdown selection option."
26796|@jrieken may have valid reasons when designing this baseUrl setting, let's wait and see his input.
26797|Yes, it's cmd.exe. Well it sometimes work and sometimes not but when it doesn't work it's always started via ctrl+shift+c from VSCode. Is there a special way VSCode starts cmd.exe?  I can post you a screenshot but you won't see when I hit ctrl+c
26798|@tills13 https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/June_2016.md
26799|You are free to rebind any keybinding we picked.
26800|@vogler please report this against https://github.com/atom/electron
