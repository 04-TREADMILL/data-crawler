12201|WebStorm unfolding is based on cursor history. - Its `fold all` is a series of `fold` to the top level where no more folding is possible. - `unfold` looks at the cursor history:   - If current cursor position is at a folded code, will unfold.   - else if last cursor position is at a folded code, cursor will move there and unfold.   - else, i.e last cursor position is not at a folded code, `unfold` has no effect. Cursor remain at same position.  UPDATE: The actual implementation is still more complicated than that. LIkely during `fold` the cursor history is not updated (i.e. the `cursor history` mentioned above is a `folding history`)  But the result is very neutral :+1:
12202|Their implementation is more predictable, i.e.:  ``` js {   {     {     },     {  // cursor     }   } } ```  `looking for next folded code` will:  ``` js {   {     { // cursor     },     {     }   } } ```
12203|Yes, thanks. I've updated the comment with the correct file name.  Resolving the environment variables only when they are actually needed would be best, so that always pick up the latest values.
12204|+1
12205|"Is this a problem only because the tab space size is small (e..g 2 spaces)?  I've personally never had a problem with this, possibly because I'm using a larger tab space size.  This is what it looks like to me while I'm hovering over the glyph area. <img width=""614"" alt=""screen shot 2016-03-08 at 11 45 54 am"" src=""https://cloud.githubusercontent.com/assets/11839736/13614034/70133520-e523-11e5-85f8-f108b1edb99f.png"">"
12206|@bmoeskau wow, this error is weird though, if I understand it correctly it means the native library `fsevents` (our mac file watcher) was compiled against a node version 46 but running it within VS Code has version 47. This does not make much sense to me because the node version in VS Code is 46 (47 was only added in node.js >= 5.0.0 and we use 4.x).  A couple of further thoughts: - verify you are on master with latest changes. I did not see that electron gets downloaded which indicates to me that you have used this workspace before (?) and maybe you are on a branch with a different electron version? - can you start `code.sh` and show me the output of typing `process.versions` from the developer tools console? - can you run `git clean -xfd` from the vscode source folder and then `./scripts/npm.sh install`. this will compile all node modules against your platform. then please try again to run `code.sh` and see if you get something printed or the same error?  Thanks for taking the time!
12207|I've had this problem as well, the gutter has fooled me into thinking it was an indent. Most other editors use a darker gutter to distinguish the two.
12208|And yes, I'm typically using 2 space indenting when this happens as well.
12209|Duplicate of https://github.com/Microsoft/vscode/issues/313
12210|I'm seeing the same issue here (editing code at https://github.com/textadventures/quest/tree/v6/Player). It worked fine before the update.  I'm using requirejs. I tried adding a `jsconfig.js` file, setting `module` to `amd`, but that didn't help.
12211|"Oh, interesting. I did not consider mentioning that I'm actually running Node 5.6.0 locally. I `nvm` switched to 4.2.1 and re-ran with no other changes and now `fsevents` does load properly:  ``` bash  Moe in ~/Projects/vscode ± |master ✓| → ./scripts/code.sh fsevents: { [Function: watch]   getInfo: [Function: getInfo],   FSEvents: [Function: FSEvents],   Constants:    { kFSEventStreamEventFlagNone: 0,    .... ```  However, that said, there appears to be no difference in CPU usage either way. Even with `fsevents` loaded properly Activity Monitor still reports Electron Helper at 108% CPU and my laptop is about to fly off my desk...  Again note that for me this only happens for one very large Node project folder that contains a bunch of repos, each with its own `node_modules`. In all there are hundreds of thousands of files under the root folder. When I load other folders of various sizes (all much smaller) I don't get this issue at all. To me this appears to be either A) a simple file count / memory limit, or B) some specific file(s) or folders(s) within my problem project that VSCode does not agree with."
12212|yup
12213|I'm happy for the inclusion of the Typescript-based Salsa syntax support, but as @garthk mentions it is an odd situation that we are now in.  ESLint is also very much encouraged in the vscode docs (and I've been using it for quite some time already).  What I don't understand is why we can't have Salsa-based syntax color support (and maybe some other things as well) without forcing the Salsa (Typescript) syntax validation.  It seems to me that if ESLint is to become the standard (or at least recommended) way for validation then there should be a simple way to disable the Salsa/Typescript validation.  Apparently at the moment there is not, **and this is a very serious impediment to productivity**.  The issues with incomplete syntax color coding in past versions is highly preferable to an inability to disable code validation that isn't up to par with current coding conventions.  The musings about specs and javascript stages on the Typescript repo in regards to the object spread operator don't justify a continued lack of support for a feature that is well-established in practice and is supported in Babel.  That's fine if the Typescript devs want to hold back, but now Microsoft is forcing the Typescript opinions on everyone using vscode without an ability to disable it.  I guess I just don't understand why the original `javascript.validate.enable` option can't be used to disable Typescript validation as well.  After all, if we're using ESLint why do we need another validator?  There really doesn't seem to be a whole lot of noise about it yet, but that's probably because the February release only just came out.  Salsa support in the January release was opt-in, and given the hoops you had to jump through to enable it I'm thinking that not a whole lot of people tried it out.  If I'm missing something then please enlighten me, but I haven't found any workaround yet (not even in the vscode alpha release).  Sorry if it seems like I'm cranky.  I also just spent several hours figuring out that ESLint 2.3.0 breaks all linting in vscode at the moment.
12214|I was suspicious and tried to open a very large folder (all of chrome sources actually) with Code on Mac and did not notice any CPU spikes like that. Is there any chance I could setup a folder like yours if you share the (open source?) repositories?
12215|I feel the same way :/ I was looking forward to the Feb release to maybe switch from Atom but this is a blocker for me.
12216|"@gregg-miskelly   Have you got an idea, what ""very soon"" does mean?"
12217|@bgashler1 @alexandrudima I'm finding this to be a pretty big annoyance with my theme of choice (One Dark) during what has otherwise my favorite golang code writing experience to date. Is there a workaround/solution for this yet? @bgashler1, your idea of having user defined theme specific settings is pretty much exactly what I would hope for. And you could even make the default the computed value as a guide for the user.
12218|"@jtarbox Yes, please try changing the following setting that now customizes word definitions when doing word operations:  ``` // default: , ""editor.wordSeparators"": ""`~!@#$%^&*()-=+[{]}\\|;:'\"",.<>/?"" // without $: , ""editor.wordSeparators"": ""`~!@#%^&*()-=+[{]}\\|;:'\"",.<>/?"" ```"
12219|Actually, I think the new option `editor.wordSeparators` that just shipped with 0.10.11 resolves this issue
12220|Unfortunately the main codebase is private, but what I can do is try replicating only the dependency tree by creating a new folder structure and copying in the package.json files we use and `npm install` them one by one, monitoring VS Code as I go. I'll try that out later and let you know if I find out anything.
12221|@jayrosen1576 Please try the latest February release, there is a new setting `editor.wordSeparators` that allows you to set the word separators across all languages for word related cursor operations (double click, word navigation, etc.).
12222|"@dbaeumer I will take a look to see if I can ""tweak"" the format edit if it wants to remove whitespace around the cursor"
12223|Is the following indented? If you hit left arrow, will you end up one space to the left or at the end of the previous line?  ![folding](https://cloud.githubusercontent.com/assets/10070956/13616501/ff6adb32-e52e-11e5-849a-b2aa1ccce063.png)
12224|"<img width=""288"" alt=""vscodeversionmismatch"" src=""https://cloud.githubusercontent.com/assets/80310/13616600/78097846-e52f-11e5-8790-e621cd85bf3d.png"">"
12225|@bpasero fsevents is indeed undefined there. Error is: [Error: Module version mismatch. Expected 14, got 46.]  I've had older nodejs version installed (0.12.2), then upgraded to latest (5.7.1) and both don't work. Downgraded to node v 4.2.2 and it worked then.
12226|thx, worked perfectly!  (still getting used to the text based settings)
12227|Great!
12228|thanks, we figured that it must be something else. is it possible to share the workspace with me go reproduce?
12229|Ok that works for double-click, however, single-click still highlights (but not selects) the entire string or value. Shouldn't the single-click highlight match the pattern used for double-click selection?
12230|Code simply spawns `git.exe`, so whatever speed that gives you is what Code gives you.  What version of git do you have? How big is your repository? Is it in a network share or locally? Is it slow just for you or for your co-workers as well? What exactly is slow, showing the list of modified files, staging files, committing, pushing, pulling?
12231|Link to https://github.com/Microsoft/vscode/issues/3532
12232|Is it possible to push this in a bugfix release before March release?
12233|Would it be possible to enable a shortcut command for this? For those of us that use the feature frequently, the mouse-menu movement gets pretty tedious. :weary:
12234|@bpasero looks like this issue is specific to a project, unfortunately I can't share it. Is there anything else I can help to debug it?
12235|"@bpasero  Sorry for the delay, I meant something like this (This makes my VS Code unresponsive consistently):  ``` export function activate(context: vscode.ExtensionContext) {     let disposable = vscode.commands.registerCommand('extension.sayHello', () => {         vscode.window.showInformationMessage('Crashing!');         lotsOfOutput();     });      context.subscriptions.push(disposable); }  function lotsOfOutput() {     setTimeout(() => {         const outputChannel = vscode.window.createOutputChannel(""Test"");         outputChannel.show();         outputChannel.appendLine(""Stop working please..."");         lotsOfOutput();         lotsOfOutput();     }, 100); } ```"
12236|"You can simply press ""alt"" to view the file menu. You can also hold down alt, and hit the key that is underlined in each menu item to navigate that menu with the keyboard.  Personally, I find it much preferable to having the menu always open.  Anyway, if you want to bring it back permanently, go ahead and hit ""alt"" to bring up the menu and check under ""View"". There should be an option in there to always show it."
12237|"@evandroprogram for now, just go ahead and set ""editor.formatOnType"" to ""false"". That will fix the indentation problem... Though of course it will disable auto code formatting, which is disappointing. I'm sure there'll be a fix soon."
12238|@kevinolorenzo if the only difference between the TFS project and the non-TFS project is a root folder containing spaces, then you are hitting https://github.com/Microsoft/vscode/issues/3667.  The fix will be available in the next insider's release.
12239|@Nimzozo Here I am trying to reproduce what you describe, but I am not seeing anything weird:  ![scrollbars](https://cloud.githubusercontent.com/assets/5047891/13619163/ead14f9a-e587-11e5-89ed-13170a10f0c8.gif)
12240|this goes in line with my feedback on https://github.com/Microsoft/vscode/issues/2806
12241|Actually, it's not so easy to reproduce in a precise way, but only by quite randomly resizing the screens. I'm going to try to give more info with a gif file.
12242|![animation](https://cloud.githubusercontent.com/assets/16692999/13620055/2b986090-e58d-11e5-8aaf-1d50d9d9242d.gif)  Here the left scrollbar has just disappeared, the right one works but has a weird size.
12243|Seems I'm only getting autocomplete suggestions when I start typing a variable name _without_ the leading $.
12244|oh my god! that's totally bad idea to bind this toggle thing to alt. I did press alt by mistake and than spend hours to search how to make it visible again. Note that I searched also for shortcut and also didn't find that. I would prefer to have view panel options somewhere on visible place.. or even disable hide option for file menu.
12245|Closing this until more information is given.
12246|"It doesn't toggle on alt. If the file menu is visible, pressing alt doesn't do anything except bring focus to the menu (like every other application that has a file menu). If you select ""View"" -> ""Toggle Menu Bar"" then it hides the menu, but you can still access it with alt. The only way you could have hidden it was by pressing ""Toggle Menu Bar"" or executing that command from the command window (ctrl+shift+p).  I disagree that this feature needs to be disabled; it's incredibly useful since I never need to use that menu anyway; and it just wastes space.  Did you know you can press ctrl+shift+p to access all of the features from the file menu? For example, to open a folder, hit ctrl+shift+p, type in ""ofol"" (or ""open fo"", ""ofolder"", etc, fuzzy matching is a beautiful thing). You can even type in ""mbar"" to toggle the file menu if you wish. Much faster than using the file menu."
12247|@stylemistake your right, basic terminal launching should work on linux. Could be worth raising an separate issue if not already done so.  I have a PR for using better terminals but it's only for windows so far. PR #3495.
12248|Never mind insider version syntax highlighting is 500% better! Can't wait for the to come in.
12249|@weinand Yep, i killed the node process to resolve it. Thanks.
12250|I did some testing and the spaces are indeed the cause.  Thank you for your help and feedback.
12251|"@egamma It looks like the TSD has been deprecated. I was able to use the https://github.com/typings/typings which based on tsd and got the intellisense working for angular, but it looks like i have to add this line in all my javascript files. Is there any workaround to make vscode recognize this for all js files ?  `/// <reference` path=""....\typings\main.d.ts"" />`  Thanks,"
12252|I'm relaying an idea by @WebFreak001: Put tabs on the window so you can choose between Output, Debug Console, etc.
12253|@Umamaheswaran1990 I did it too. But put this in all js files is impracticable.
12254|@cleever I agree, esp. in large projects
12255|Is this PR going to be merged? It sounds like @aeschli is saying that this is possible. After getting used to file icons in Sublime and Atom, it's a bit of a dealbreaker not to support them.
12256|"Here's a related bug (I think) that is using a single colon (and not `::`): ![vscodecolonbug](https://cloud.githubusercontent.com/assets/5177512/13624527/44da76b8-e56c-11e5-8ef0-f2f305dd00e9.gif) Notice how I'm getting a completion list until I type in the colon - then bumpkis.  Same thing happens when you type ""C"" - you see C: and a bunch of other stuff. Then you type the "":"" (as in C:) and you get nothing, nada, zilch, zippo."
12257|@jeffmcaffer, my temporary solution: `editor.rulers` setting includes `0` like `[0, 100, 120]` to indicate a start point of each line ![s01](https://cloud.githubusercontent.com/assets/4763469/13625046/2123ba96-e5f7-11e5-8666-bf49e7947ca5.png)
12258|"Mine works with these settings on the Mac: ... ""program"": ""${workspaceRoot}/server.js"", ""cwd"": ""${workspaceRoot}"", ..."
12259|I have updated to latest version.
12260|I fullyagree, in fact I have switched to Atom for that ONE reason and only use VScode for git as I can easily copy and paste comment to git.
12261|We need tabs ASAP.
12262|"This still seems to me to be a simple issue of file count. The total file count for everything under the root folder is something like 500k files (well over 2Gb). I have one repo in particular that contains 28 sub-projects, each with its own `node_modules` (it's a collection of small utility programs). I went through and deleted all 28 sub-`node_modules` folders within that repo (approx 130k files) and suddenly things started running much better. I noticed that on startup it still pegged the CPU, but after a minute or two it dropped to zero. I started removing more files, and it started performing even better. I then started adding files back, 5k at a time, and sure enough, each time it took longer and longer for the app to recover from full CPU usage on startup (I literally timed it -- each time it took 30s to 1 minute longer to recover). Copying files into the project path while VS Code is already running also causes the same thing to happen as soon as it picks up on the file changes.  I didn't have time to identify the threshold between ""normal"" startup vs when the CPU hit becomes noticeable. I'm also not sure if the performance issue is linear, or if it simply drops off a cliff from which it can't recover at some point. My original project folder with all files never seemed to recover the CPU, even after 30+ minutes.  I admit that this is a lot of files, but it's the new reality with npm if you have a large project. Also I've been loading the exact same project into Sublime, Textmate etc. with no issues. In fact I downloaded Atom today just to see and it also loads just fine with barely a blip in CPU on startup. So this definitely seems specific to VS Code."
12263|I'll do you one better. I have [a failing PR](https://github.com/editorconfig/editorconfig-vscode/pull/31) and [failing Travis-CI build](https://travis-ci.org/editorconfig/editorconfig-vscode/builds/114705101) that demonstrates the issue in [these lines](https://github.com/editorconfig/editorconfig-vscode/blob/e42908690e1908a21fd2e879d72d8ea397e5939c/test/index.test.ts#L67-L125):  ``` ts const doc = await workspace.openTextDocument(filename); assert.strictEqual(await doc.save(), true, 'saves file'); ```
12264|Historic reasons, we should move them out.
12265|@JoshAddington we can merge this in but it is NOT possible to add file icons to the explorer via theme extensions.
12266|@isidorn can you try this out? asking because you recently pushed a change to handle output updates with a 300ms delay directly in the UI layer and maybe we are good to go already.
12267|:+1:   vscode needs to consider about adding type definitions for angular and also for other popular frameworks in the upcoming releases  it will be very impressive :)
12268|"@bmoeskau I am still puzzled why the size of a folder could cause this. to verify, can you remove the if-statement in https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/electron-browser/fileService.ts#L48 and then recompile vs code locally and run it out of the sources on this large folder? it would be interesting to know if this issue can be solved by adding ""node_modules"" to the list of ignored folders by the watcher.  Meanwhile I have opened https://github.com/paulmillr/chokidar/issues/447 to see if chokidar has an idea."
12269|Lets continue this in #3884
12270|I wonder if we should do this before GA. Besides the summary, I also do not like that we have 2 folders, one for application data and one for extensions. Ideally we have one folder for both.
12271|@jedmao it also returns false if the file was not dirty, I have updated the docs.
12272|@isidorn I filed https://github.com/Microsoft/vscode/issues/3896 and https://github.com/Microsoft/vscode/issues/3897 which are not really related to your change.  There is also https://github.com/Microsoft/vscode/issues/3609#issuecomment-193997733 which seems to indicate high CPU usage when an extension spams with output. Maybe you could also take a look and experiment a) with lots of spam per millisecond and b) with very large output content (above 10k lines).  I noticed today that all of VS Code became unresponsive when having the typescript compile task producing tons of errors. I think the two bugs I opened would help in that case.
12273|We'll it is already pushed, it will be release in the next insider release which will be out soon I believe. I do not think we will make a next stable release before the March one.  Sorry if we broke your behavior. This is the reason why we have insider releases, so we can potentially find fixes for the stable release, however this one came in too late.
12274|I love vscode's current whitespace rendering precisely because it **doesn't** mark all the whitespace between words -- which I find way too noisy visually -- just at the start and end of the line where it's really needed. So I hope this would remain an option.
12275|It was a little confusing when I was writing my script that automates my config to discover there were 2 config folders. If this is going to be done I vote for `~/.code[-<quality>]` so that it matches the executable name.
12276|@bpasero thanks! I'll look into the three issues.
12277|Can confirm the same issue with python and C also. Seemed to get fixed when changing to Dark+. Tested in Mac OS X El-Capitan
12278|@richardzeng1985 please file this issue against the C++ extension you are using.
12279|Sorry for not posting my node version. It's an old one, `v0.12.7`. I'll update my node version to latest stable and if I can't reproduce this bug I'll close this issue.
12280|@richardzeng1985 please file this issue against the C++ extension you are using.
12281|"Hi there,  undefined as well.  <snip> martin@mbp13 scripts [master] $ ./code.sh  undefined [08:52:23] Using gulpfile ~/Desktop/vscode/gulpfile.js [08:52:23] Starting 'electron'... [08:52:23] Finished 'electron' after 741 μs [2333:0309/085225:INFO:CONSOLE(199)] ""%c[Extension Host] %cdebugger listening on port 5870"", source: file:////Users/martin/Desktop/vscode/out/vs/workbench/services/thread/electron-browser/threadService.js (199)  </snip>  > Am 08.03.2016 um 11:53 schrieb Benjamin Pasero notifications@github.com: >  > @q42jaap https://github.com/q42jaap @ragebiswas https://github.com/ragebiswas @Kane-Sendgrid https://github.com/Kane-Sendgrid @kevinkucharczyk https://github.com/kevinkucharczyk @planetexpress69 https://github.com/planetexpress69 is one of you able to do a little experiment? I am speculating that maybe our library for file watching is failing. The steps would be: >  > setup to run vscode out of our sources as described at https://github.com/Microsoft/vscode/wiki/How-to-Contribute https://github.com/Microsoft/vscode/wiki/How-to-Contribute > copy the contents of Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/chokidar into the sources at ./node_modules/chokidar (replace the entire folder) > open ./node_modules/chokidar/lib/fsevents-handler.js from the sources and insert console.log(fsevents) in line 9 > run code out of sources with ./scripts/code.sh and send me the output > For me (since fsevents works ok), I get this: >  > ~/Development/monaco/scripts> ./code.sh  > [10:07:53] Using gulpfile ~/Development/monaco/gulpfile.js > [10:07:53] Starting 'electron'... > [10:07:53] Finished 'electron' after 1.28 ms > [9931:0308/100756:INFO:CONSOLE(199)] ""%c[Extension Host] %cdebugger listening on port 5870"", source: file:////Users/bpasero/Development/monaco/out/vs/workbench/services/thread/electron-browser/threadService.js (199) > [9931:0308/100802:INFO:CONSOLE(199)] ""%c[Extension Host] %cdebugger listening on port 5870"", source: file:////Users/bpasero/Development/monaco/out/vs/workbench/services/thread/electron-browser/threadService.js (199) > ~/Development/monaco/scripts> ./code.sh  > { [Function: watch] >   getInfo: [Function: getInfo], >   FSEvents: [Function: FSEvents], >   Constants:  >    { kFSEventStreamEventFlagNone: 0, > ... > If something goes wrong, I would expect fsevents to print as undefined. In that case, can you put another console.log inside the try/catch block of line 7 to see what the error is loading that native module? >  > Thanks! >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/1009#issuecomment-193724632."
12282|Can’t share my workspace, but either 0.10.10 or my upgrade to ember 2.4 and rebuilding the whole node_modules („hairy fireball of death®“) fixed the problem for me. M.  > Am 08.03.2016 um 22:37 schrieb Benjamin Pasero notifications@github.com: >  > thanks, we figured that it must be something else. is it possible to share the workspace with me go reproduce? >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/1009#issuecomment-193978748.
12283|I am more worried about the migration than finding a name :)
12284|1. No, we are testing for return code > 1. If you can create a new issue with your repository so we can investigate. Edit: great I see you created #3895 - thanks 2. The output window will remain visible if debug does not start 3. This is because the task frameworkd does not recognize the errors from your task -> forwading to Dirk
12285|> So I hope this would remain an option.  for sure
12286|With VSCode v0.10.10 items 1 & 2 are OK now, but I'm still having problem with 3. Thanks.
12287|@alexandrudima this is a problem with the tsserver and IMO we should push the TS team to fix this. The corresponding issue in TS land is: https://github.com/Microsoft/TypeScript/issues/6700
12288|After writing the above issue, I downloaded VSCode v0.10.10. Now Code won't launch if the preLaunchTask returns an error (yay!), however if it can't find the preLaunchTask executable, it WILL still try to launch the target app.
12289|Closing since user said in #3826 this issue is fixed
12290|Thanks for trying it with the latest VSCode
12291|Thanks for the tip, let me do that.
12292|Absolutely. @isidorn wanna create a global workbench action for this?
12293|:+1:
12294|I wanted to even put it in the  context menu of the diff view Yeah I will make this awesome feature more discoverable 🐩
12295|@Tyriar @bpasero When using `-w`, I suggest that: [when Code detects that there is a running instance](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L203), it should [send its `pid` over along with the `cliArgs` and `env`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L219) and instead of [killing itself](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L221), it just stands idly waiting for a `SIGTERM` from the outside. The main process would open a new window with the file to be edited. Upon closing that window, it then sends the `SIGTERM` to the waiting process.  That saves further ventures into sockets and not only leverages common process interaction patterns but the existing IPC infrastructure as well.
12296|To be fair, Atom's color theme is _extremely_ colorful, it almost looks childish to me. So I would not want Code's theme to look completely like Atom's. But look at this snippet in Code: ![image](https://cloud.githubusercontent.com/assets/10532611/13629956/c7b70a22-e5dc-11e5-9a63-2dfc63ee2bfe.png)  ``` ts Promise.all(connections.map(connection =>     connection.sendBreakpointListCommand()         .then(response => Promise.all(             response.breakpoints                 .filter(breakpoint => breakpoint instanceof xdebug.ExceptionBreakpoint)                 .map(breakpoint => breakpoint.remove())         ))         .then(() => { ```  8 lines of TypeScript code without any color at all. It feels like I'm programming in Notepad. I know, this also contains some bugs, for example `instanceof` should be highlighted as a keyword. But even then, at least in the Dark/Light+ themes, syntax highlighting should not be restricted to only color keywords, strings, comments and symbols, but also method names and operators.
12297|@bpasero raises the issue of IndexDB locking and multiple Electron instances, which is super valid.  I then suggest to move the [whole IPC dance](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L196) over to the [cli code](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/cli.ts), making all of that happen before it even gets to Electron. We'd even get some performance out of it.  What do you think?
12298|@joaomoreno well we cannot do that because not in every case are we using the cli code when starting VS Code?
12299|"Create a tasks.json like this:  ``` json {   ""version"": ""0.1.0"",   ""command"": ""npm"",   ""isShellCommand"": true,   ""args"": [""run""],   ""showOutput"": ""silent"",   ""tasks"": [     {       ""taskName"": ""watch"",       ""isWatching"": true,       ""problemMatcher"": ""$tsc-watch""     },     {       ""taskName"": ""compile"",       ""isBuildCommand"": true,       ""problemMatcher"": ""$tsc""     }   ] } ```  Unfortunately, you must duplicate the tasks if you want to run them from VS Code. There is a feature request for auto-detecting NPM scripts just like VS Code does it with Gulp and Grunt: https://github.com/Microsoft/vscode/issues/1777"
12300|Yeah if you use the `.exe` directly it won't work. But we can rely on people not doing that and using the shortcuts we set out for them in the `bin` folder.
