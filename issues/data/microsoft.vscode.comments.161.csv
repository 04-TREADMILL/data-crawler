16001|Yes, menu bar and action bar contributions we shall have
16002|Optimistically adding for April - stretch tho.
16003|*\* Renaming file marks for git delete but not git add **  I don't use Windows Explorer, but look at this bash output that will show you how to rename a file under git:  ``` $ git mv foo bar $ git status -s     R  foo -> bar ```  Notice the `R` for rename.  It seems your product is doing this:  ``` $ mv foo bar $ git status -s      D foo     ?? bar ```  Would you like to re-open this ticket, or should I create a new one and reference this one?
16004|With 65cb339 I pushed a change that allows you to `skipEncoding` when calling `URI.toString`. That or `fsPath` should be sufficient when talking to other applications/systems
16005|done with #4640
16006|There is an extension for css formatting.
16007|Jade uses scope `string.comment.buffered.block.jade` for these comment, so it's rather random if this is a string or a comment.  I also think it's minor so for now I would not start customizing our theme for Jade.
16008|This is caused by #3008
16009|@Janne252 Our grammars can not have dynamic content. But what you can do is contribute decorations from your extension. You'd still have the grammar file. It would provide the basic colors (comments, strings...), but on top of that you could color your special identifiers using decorators. It's not something we do ourselves, but it's worth trying out.  To see decorators in action, check out the [decorator sample](https://github.com/Microsoft/vscode-extension-samples/tree/master/decorator-sample)
16010|@buzinas I recommend to create a sub folder for the server or client part of your project (the folder does not have to contain any code) Then you can easily create another VS Code window where you can run another debugger. We are using this approach and it works great.  Yes, we are planning to lift the limitation of only allowing a single VS Code window per project folder.
16011|I think it's rather inconsistent what VS does here. No plans to adopt the coloring of type declarations and some type references.
16012|The problem is that the suggest model computes `::` as being the current word. It will use that to filter the suggestions and end up with nothing left  ![screen shot 2016-04-01 at 10 13 17](https://cloud.githubusercontent.com/assets/1794099/14201649/7f4ba3aa-f7f3-11e5-8a18-f0874b66f3a7.png)
16013|@joaomoreno It's time to finally get rid of that current word notion. My proposal is to not use the word definition anymore but use the `overrideBefore` and `overrideAfter` (which corresponds to the `TextEdit` the api surfaces)
16014|@alefragnani Ah, now I understand. Ignore my first comment (I removed it). There's no API for you to find out if a line is visible or not. We actually try to avoid that. Would it make sense that you could specify if your annotation should hide for a folded region? @alexandrudima Alex, FYI.
16015|To implement what you suggest we would have to get an understanding on what a comment is. #3422 is the first step for this.
16016|That only works because you are calling `git mv` which automatically stages your files.  The correct analogy to what Code does - that is, without the staging - is to run `mv foo bar` instead of `git mv foo bar`.
16017|I open https://github.com/Microsoft/TypeScript/issues/7762 on the TS side.
16018|@dchw  I never had the editor in Split view, so this may be a different issue with smiliar result.
16019|@egamma Can you please elaborate, is it possible to build VS Code with the extension gallery or is that a closed source component?
16020|"@v-pavanp ""where code-alpha"" what does it print?"
16021|This is expected since the task runner currently only support 0.1.0 format of that file. There is no 0.2.0
16022|@johnliu2016 can you please forward to the translation team.
16023|I've added experimental support for automatically skipping code that has a source map but where the mapping does not exist and would end up in the generated code. This can be enabled in the launch config by setting an attribute `smartStep` to `true`.  @jpierson @felixfbecker please let me know if you think this is useful.
16024|@dbaeumer forwarded to loc team
16025|@rkeithhill We have understood the problem and are working on a fix. What you can try to get unblocked faster is tweaking the word definition for Powershell. Today, it seems to match for `:` and disabling that should get you going until we get our fix out
16026|This is pretty tricky to implement in the schema validator.
16027|This issue should go in the C++ extension issue tracking system (email at mailto:c_cpp_support@microsoft.com). @sridmad Can you add it to your tracking system?
16028|@v-pavanp how exactly do you get intelli-sense for ${workspaceRoot}? Can you give me steps? I do not get intelli-sense for any of those properties. @aeschli is it possible for me to define these global variables which should always be offered in my schema?
16029|Thanks! Did not know that, sorry!
16030|Alright, +1 to this. I'm writing Electron application and launch via `npm start` or some Gulp task, because some stuff needs to be generated before `electron main.js` can be launched from the app subdir.  Any way to apply this to `launch.json` nicely?
16031|"Just happened again, I did not open any file in the node_modules directory. I just opened a folder (vscode-node-debug) in VS Code and ran npm install, which failed because of locked files:  ``` 388 verbose stack Error: EPERM: operation not permitted, rename 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport' -> 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\.vscode-debugadapter-testsupport.DELETE' 388 verbose stack     at moveAway (C:\Program Files\NodeJS\latest\node_modules\npm\lib\install\action\finalize.js:38:5) 388 verbose stack     at destStatted (C:\Program Files\NodeJS\latest\node_modules\npm\lib\install\action\finalize.js:27:7) 388 verbose stack     at FSReqWrap.oncomplete (fs.js:82:15) 388 verbose stack 388 verbose stack Error: EPERM: operation not permitted, rename 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport' -> 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\.vscode-debugadapter-testsupport.DELETE' 388 verbose stack     at Error (native) 389 verbose cwd C:\Users\felix\git\opensource\vscode-node-debug 390 error Windows_NT 10.0.10586 391 error argv ""C:\\Program Files\\NodeJS\\latest\\node.exe"" ""C:\\Program Files\\NodeJS\\latest\\node_modules\\npm\\bin\\npm-cli.js"" ""i"" 392 error node v5.9.0 393 error npm  v3.8.3 394 error path C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport 395 error code EPERM 396 error errno -4048 397 error syscall rename 398 error Error: EPERM: operation not permitted, rename 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport' -> 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\.vscode-debugadapter-testsupport.DELETE' 398 error     at moveAway (C:\Program Files\NodeJS\latest\node_modules\npm\lib\install\action\finalize.js:38:5) 398 error     at destStatted (C:\Program Files\NodeJS\latest\node_modules\npm\lib\install\action\finalize.js:27:7) 398 error     at FSReqWrap.oncomplete (fs.js:82:15) 398 error 398 error Error: EPERM: operation not permitted, rename 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport' -> 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\.vscode-debugadapter-testsupport.DELETE' 398 error     at Error (native) 398 error  { [Error: EPERM: operation not permitted, rename 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\vscode-debugadapter-testsupport' -> 'C:\Users\felix\git\opensource\vscode-node-debug\node_modules\.vscode-debugadapter-testsupport.DELETE'] parent: 'node-debug' } 399 error Please try running this command again as root/Administrator. 400 verbose exit [ -4048, true ] ```"
16032|@aeschli No problem. In fact it was my fault, because I should have added this GIF right in the first post :smile:   About your suggestion, I totally agree :+1: .   Thanks again
16033|@weinand If I understand you correctly, this is more an issue with TypeScript's/Babel's source map generation?  I have tried out the tool with your example, but compiled with the gulpfile from my debug adapter: [link](https://sokra.github.io/source-map-visualization/#base64,InVzZSBzdHJpY3QiOwoKdmFyIF9fYXdhaXRlciA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHsKICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgewogICAgICAgICAgICByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC52YWx1ZSk7CiAgICAgICAgICAgIH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7CiAgICAgICAgfQogICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzKSkubmV4dCgpKTsKICAgIH0pOwp9OwpmdW5jdGlvbiBsb25nUnVubmluZygpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICByZXNvbHZlKDQyKTsKICAgICAgICAgICAgfSwgMzAwMCk7CiAgICAgICAgfSk7CiAgICB9KTsKfQpmdW5jdGlvbiBtYWluKCkgewogICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBsb25nUnVubmluZygpOwogICAgICAgIGNvbnNvbGUubG9nKGB0aGUgYW5zd2VyIHRvIGV2ZXJ5dGhpbmc6ICR7IHJlc3VsdCB9YCk7CiAgICB9KTsKfQptYWluKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlc3QuanMubWFwCg==,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiLCJ0ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxZQUFZLFNBQUMsSUFBUSxVQUFLLFNBQUwsSUFBbUIsVUFBVSxPQUFWLEVBQW1CLFVBQW5CLEVBQStCLENBQS9CLEVBQWtDLFNBQWxDLEVBQTZDO0FBQ3JGLFdBQU8sS0FBSyxNQUFNLElBQUksT0FBSixDQUFOLENBQUwsQ0FBeUIsVUFBVSxPQUFWLEVBQW1CLE1BQW5CLEVBQTJCO0FBQ3ZELGlCQUFTLFNBQVQsQ0FBbUIsS0FBbkIsRUFBMEI7QUFBRSxnQkFBSTtBQUFFLHFCQUFLLFVBQVUsSUFBVixDQUFlLEtBQWYsQ0FBTCxFQUFGO2FBQUosQ0FBcUMsT0FBTyxDQUFQLEVBQVU7QUFBRSx1QkFBTyxDQUFQLEVBQUY7YUFBVjtTQUFqRTtBQUNBLGlCQUFTLFFBQVQsQ0FBa0IsS0FBbEIsRUFBeUI7QUFBRSxnQkFBSTtBQUFFLHFCQUFLLFVBQVUsS0FBVixDQUFnQixLQUFoQixDQUFMLEVBQUY7YUFBSixDQUFzQyxPQUFPLENBQVAsRUFBVTtBQUFFLHVCQUFPLENBQVAsRUFBRjthQUFWO1NBQWpFO0FBQ0EsaUJBQVMsSUFBVCxDQUFjLE1BQWQsRUFBc0I7QUFBRSxtQkFBTyxJQUFQLEdBQWMsUUFBUSxPQUFPLEtBQVAsQ0FBdEIsR0FBc0MsSUFBSSxDQUFKLENBQU0sVUFBVSxPQUFWLEVBQW1CO0FBQUUsd0JBQVEsT0FBTyxLQUFQLENBQVIsQ0FBRjthQUFuQixDQUFOLENBQXFELElBQXJELENBQTBELFNBQTFELEVBQXFFLFFBQXJFLENBQXRDLENBQUY7U0FBdEI7QUFDQSxhQUFLLENBQUMsWUFBWSxVQUFVLEtBQVYsQ0FBZ0IsT0FBaEIsRUFBeUIsVUFBekIsQ0FBWixDQUFELENBQW1ELElBQW5ELEVBQUwsRUFKdUQ7S0FBM0IsQ0FBaEMsQ0FEcUY7Q0FBN0M7QUNDNUMsU0FBQSxXQUFBLEdBQUE7QURRSSxXQUFPLFVBQVUsSUFBVixFQUFnQixLQUFLLENBQUwsRUFBUSxLQUFLLENBQUwsRUFBUSxhQUFhO0FDUHBELGVBQU8sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixLQUFnQjtBQUMvQix1QkFBVyxNQUFBO0FBQ1Asd0JBQVEsRUFBUixFQURPO2FBQUEsRUFFUixJQUZILEVBRCtCO1NBQWhCLENBQW5CLENET29EO0tBQWIsQ0FBdkMsQ0NSSjtDQUFBO0FBUUEsU0FBQSxJQUFBLEdBQUE7QURTSSxXQUFPLFVBQVUsSUFBVixFQUFnQixLQUFLLENBQUwsRUFBUSxLQUFLLENBQUwsRUFBUSxhQUFhO0FDUnBELGNBQU0sU0FBUyxNQUFNLGFBQU4sQ0RRcUM7QUNQcEQsZ0JBQVEsR0FBUixDQUFZLENBQUEsMEJBQUEsR0FBNkIsTUFBN0IsRUFBbUMsQ0FBL0MsRURPb0Q7S0FBYixDQUF2QyxDQ1RKO0NBQUE7QUFLQSIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gbG9uZ1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoNDIpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbWFpbigpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBsb25nUnVubmluZygpO1xuICAgICAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTtcbiAgICB9KTtcbn1cbm1haW4oKTtcbiIsIlxuYXN5bmMgZnVuY3Rpb24gbG9uZ1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKDQyKTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9uZ1J1bm5pbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTtcbn1cblxubWFpbigpO1xuXG4iXSwic291cmNlUm9vdCI6ImZpbGU6Ly8vYzovVXNlcnMvZmVsaXgvZ2l0L29wZW5zb3VyY2UvdnNjb2RlLXBocC1kZWJ1Zy9zcmMifQ==,dmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7CiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9CiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMpKS5uZXh0KCkpOwogICAgfSk7Cn07CmZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewogICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIHJlc29sdmUoNDIpOwogICAgICAgICAgICB9LCAzMDAwKTsKICAgICAgICB9KTsKICAgIH0pOwp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIGxvbmdSdW5uaW5nKCk7CiAgICAgICAgY29uc29sZS5sb2coYHRoZSBhbnN3ZXIgdG8gZXZlcnl0aGluZzogJHtyZXN1bHR9YCk7CiAgICB9KTsKfQptYWluKCk7Cg==,CmFzeW5jIGZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgcmVzb2x2ZSg0Mik7CiAgICAgICAgfSwgMzAwMCk7CiAgICB9KTsKfQoKYXN5bmMgZnVuY3Rpb24gbWFpbigpIHsKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvbmdSdW5uaW5nKCk7CiAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTsKfQoKbWFpbigpOwoK) You have to scroll down to the TS source because I do two-step compilation with TS+Babel. The `await` may not be colored, but I hover over it, it highlights the corresponding `yield` statement in the generator.   I think though that transpilation that adds additional function calls is quite common and if you can somehow detect and ignore those that would be a great feature. As a user, when I land in the compiled source, it is not clear to me that I have to do a step over to get to the TS again.  I tried to test the new feature by running `vsce package` in the repo and installing the package, but I get countless ENOENT errors like cannot read package.json or locale files, what am I doing wrong? Do I have to recompile VS Code?
16034|@felixfbecker I've fixed the dependencies in vscode-node-debug and after removing node_modules and doing an `npm install` the `vsce package` created a vsix that works with the insiders release. There is no need to rebuild VS Code.
16035|"@felixfbecker my experimental ""smart step"" feature should be independent from what transpiler tools are used to generate JavaScript and source maps. The feature should just hide generated code by auto stepping through it. If you enable the feature you can see on the console how many ""step in"" commands were issued."
16036|@johnliu2016 this is fixed in the latest translation I received today. Feel free to close.
16037|@weinand I am still hitting the source files. Ran git pull, rm -re -fo node_modules, npm i, gulp build, vsce package and installed it
16038|@felixfbecker how it should look like: https://dl.dropboxusercontent.com/u/2433608/2016-04-01%2014-23-27.mp4 (before/after)
16039|@weinand No idea why it's not working, can you send me your vsix?
16040|@felixfbecker as described in Microsoft/TypeScript#7762 this has nothing to do with the node_modules folder. It can easily happen with other folders as well. And it is not related to having a file open in the folder. It is enough to add any ts file which is part of a tsconfig.json which affects other directories.
16041|Thanks!
16042|@felixfbecker here is my sample project:  [async.zip](https://github.com/Microsoft/vscode/files/199616/async.zip) and here the vsix: [node-debug-0.10.12.vsix.zip](https://github.com/Microsoft/vscode/files/199627/node-debug-0.10.12.vsix.zip) (double zipped...)
16043|@digeff if you use a wachting build task you need to instruct VSCode when an 'incremental' build starts and when it ends. Otherwiese VS Code can not know when to clear old errors.   The properties on a problemMatcher are  ```     watching: {         activeOnStart: boolean; // whether it is active when the build starts (e.g. no begin pattern printed on start         beginsPattern: string; // regexp (as string) when an incremental build starts         endsPattern: string; // regexp (as string) when an incremental build ends     }  ```  And example for the problem matcher for the tsc compiler can be found here: https://github.com/Microsoft/vscode/issues/4316
16044|There aren't any compile errors reported from the task that's why the count is still 0. The error comes from starting the compiler. If this happens we open the console. In your example you are simply missing the tsconfig.json file.
16045|I meant the extension file as apparently I can't get it to compile and install correctly
16046|@felixfbecker I'd like to know what problems you are seeing when trying to build vscode-node-debug? Is this on Windows? I just tried it there and for me it works.
16047|these issues got fixed by  2d56597
16048|@felixfbecker when looking at your [sourec map](https://sokra.github.io/source-map-visualization/#base64,InVzZSBzdHJpY3QiOwoKdmFyIF9fYXdhaXRlciA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHsKICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgewogICAgICAgICAgICByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC52YWx1ZSk7CiAgICAgICAgICAgIH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7CiAgICAgICAgfQogICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzKSkubmV4dCgpKTsKICAgIH0pOwp9OwpmdW5jdGlvbiBsb25nUnVubmluZygpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICByZXNvbHZlKDQyKTsKICAgICAgICAgICAgfSwgMzAwMCk7CiAgICAgICAgfSk7CiAgICB9KTsKfQpmdW5jdGlvbiBtYWluKCkgewogICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBsb25nUnVubmluZygpOwogICAgICAgIGNvbnNvbGUubG9nKGB0aGUgYW5zd2VyIHRvIGV2ZXJ5dGhpbmc6ICR7IHJlc3VsdCB9YCk7CiAgICB9KTsKfQptYWluKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlc3QuanMubWFwCg==,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiLCJ0ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxZQUFZLFNBQUMsSUFBUSxVQUFLLFNBQUwsSUFBbUIsVUFBVSxPQUFWLEVBQW1CLFVBQW5CLEVBQStCLENBQS9CLEVBQWtDLFNBQWxDLEVBQTZDO0FBQ3JGLFdBQU8sS0FBSyxNQUFNLElBQUksT0FBSixDQUFOLENBQUwsQ0FBeUIsVUFBVSxPQUFWLEVBQW1CLE1BQW5CLEVBQTJCO0FBQ3ZELGlCQUFTLFNBQVQsQ0FBbUIsS0FBbkIsRUFBMEI7QUFBRSxnQkFBSTtBQUFFLHFCQUFLLFVBQVUsSUFBVixDQUFlLEtBQWYsQ0FBTCxFQUFGO2FBQUosQ0FBcUMsT0FBTyxDQUFQLEVBQVU7QUFBRSx1QkFBTyxDQUFQLEVBQUY7YUFBVjtTQUFqRTtBQUNBLGlCQUFTLFFBQVQsQ0FBa0IsS0FBbEIsRUFBeUI7QUFBRSxnQkFBSTtBQUFFLHFCQUFLLFVBQVUsS0FBVixDQUFnQixLQUFoQixDQUFMLEVBQUY7YUFBSixDQUFzQyxPQUFPLENBQVAsRUFBVTtBQUFFLHVCQUFPLENBQVAsRUFBRjthQUFWO1NBQWpFO0FBQ0EsaUJBQVMsSUFBVCxDQUFjLE1BQWQsRUFBc0I7QUFBRSxtQkFBTyxJQUFQLEdBQWMsUUFBUSxPQUFPLEtBQVAsQ0FBdEIsR0FBc0MsSUFBSSxDQUFKLENBQU0sVUFBVSxPQUFWLEVBQW1CO0FBQUUsd0JBQVEsT0FBTyxLQUFQLENBQVIsQ0FBRjthQUFuQixDQUFOLENBQXFELElBQXJELENBQTBELFNBQTFELEVBQXFFLFFBQXJFLENBQXRDLENBQUY7U0FBdEI7QUFDQSxhQUFLLENBQUMsWUFBWSxVQUFVLEtBQVYsQ0FBZ0IsT0FBaEIsRUFBeUIsVUFBekIsQ0FBWixDQUFELENBQW1ELElBQW5ELEVBQUwsRUFKdUQ7S0FBM0IsQ0FBaEMsQ0FEcUY7Q0FBN0M7QUNDNUMsU0FBQSxXQUFBLEdBQUE7QURRSSxXQUFPLFVBQVUsSUFBVixFQUFnQixLQUFLLENBQUwsRUFBUSxLQUFLLENBQUwsRUFBUSxhQUFhO0FDUHBELGVBQU8sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixLQUFnQjtBQUMvQix1QkFBVyxNQUFBO0FBQ1Asd0JBQVEsRUFBUixFQURPO2FBQUEsRUFFUixJQUZILEVBRCtCO1NBQWhCLENBQW5CLENET29EO0tBQWIsQ0FBdkMsQ0NSSjtDQUFBO0FBUUEsU0FBQSxJQUFBLEdBQUE7QURTSSxXQUFPLFVBQVUsSUFBVixFQUFnQixLQUFLLENBQUwsRUFBUSxLQUFLLENBQUwsRUFBUSxhQUFhO0FDUnBELGNBQU0sU0FBUyxNQUFNLGFBQU4sQ0RRcUM7QUNQcEQsZ0JBQVEsR0FBUixDQUFZLENBQUEsMEJBQUEsR0FBNkIsTUFBN0IsRUFBbUMsQ0FBL0MsRURPb0Q7S0FBYixDQUF2QyxDQ1RKO0NBQUE7QUFLQSIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gbG9uZ1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoNDIpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbWFpbigpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBsb25nUnVubmluZygpO1xuICAgICAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTtcbiAgICB9KTtcbn1cbm1haW4oKTtcbiIsIlxuYXN5bmMgZnVuY3Rpb24gbG9uZ1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKDQyKTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9uZ1J1bm5pbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTtcbn1cblxubWFpbigpO1xuXG4iXSwic291cmNlUm9vdCI6ImZpbGU6Ly8vYzovVXNlcnMvZmVsaXgvZ2l0L29wZW5zb3VyY2UvdnNjb2RlLXBocC1kZWJ1Zy9zcmMifQ==,dmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7CiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9CiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMpKS5uZXh0KCkpOwogICAgfSk7Cn07CmZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewogICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIHJlc29sdmUoNDIpOwogICAgICAgICAgICB9LCAzMDAwKTsKICAgICAgICB9KTsKICAgIH0pOwp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIGxvbmdSdW5uaW5nKCk7CiAgICAgICAgY29uc29sZS5sb2coYHRoZSBhbnN3ZXIgdG8gZXZlcnl0aGluZzogJHtyZXN1bHR9YCk7CiAgICB9KTsKfQptYWluKCk7Cg==,CmFzeW5jIGZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgcmVzb2x2ZSg0Mik7CiAgICAgICAgfSwgMzAwMCk7CiAgICB9KTsKfQoKYXN5bmMgZnVuY3Rpb24gbWFpbigpIHsKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvbmdSdW5uaW5nKCk7CiAgICBjb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTsKfQoKbWFpbigpOwoK) I get the impression that the double mapping might be the issue. I'll have to try my code on the result of your way of transpiling TypScript... With your source map it could be that the mapping process always succeeds even if the result of the mapping is again generated JavaScript (and not TypeScript). That's actually an interesting test case for the feature.
16049|@weinand I think my Insiders build might be broken, getting all kinds of ENOENT and null pointer excs. Don't have time to investigate further right now. But +1 for the feature.
16050|@weinand Yes, since debugging both in the same instance would be much harder to accomplish - removing the limitation would be good enough (and probably an easy thing to ship).  Since our codebase huge, and we have lots of build processes / continuous integration etc etc, it would be kind of complex to make a folder refactor as you're suggesting. But I'll make a clone of the repo and give a try, maybe it's simpler than it seems.
16051|@buzinas as I said, the sub-folder can be empty. The only thing that VS Code will create in that folder is another launch.json file. So no folder refactoring is necessary.
16052|@weinand Could you please show me an example of a folder structure like that?
16053|@bpasero By assigning this to yourself, does that mean it might happen? If so, please let me know if you would like some help, even if it's just for feedback.
16054|Found the issue (on our side) Duplicate of #4769
16055|+1
16056|Found the issue on our side. Duplicate of #4769
16057|@buzinas here we go:  ![2016-04-01 15-49-19](https://cloud.githubusercontent.com/assets/1898161/14208835/9bd0e764-f821-11e5-8c81-ab8eadc0a029.png) - Client and server code are in the same project. - `_dummyFolder` only exists to be able to open another VS Code window on it. - launch.json in _dummyFolder has 'go up' one level to refer to the server code.
16058|![screen shot 2016-04-01 at 15 57 22](https://cloud.githubusercontent.com/assets/1794099/14209016/82cd21f0-f822-11e5-9df8-2a3a2b3b1298.png)
16059|Duplicate of #4769
16060|@weinand  Oh, that's really cool. I'll give it a try! Thank you :)
16061|duplicate of #4769
16062|@gregvanl I think my workaround from above would be a good FAQ item for the debugger section (until we implement the real fix)?
16063|Please test with corner cases like no-folder-opened or file is not inside workspace.
16064|@squarerootfury I also get it when working with a single document, it just seems to happen more when working with multiple documents. Definitely more often when performing the scenario I mentioned in my last post, but its still there when not in split mode.
16065|@iHuahua What do mean by `yo code`? do you create a new extension that you want to run? What is the _full_ reading of the console?
16066|@weinand Although it's launching both here now, the breakpoints don't work.  It seems that the new instance doesn't send debugging info to the master one. How do you debug the server in that example of your screenshot?
16067|@buzinas yes, you are right, the VS Code on the _dummyFolder has no access to source, so it cannot set breakpoints.  Solution: don't make the _dummyFolder a sub-folder but make it a super-folder:  ![2016-04-01 16-35-23](https://cloud.githubusercontent.com/assets/1898161/14210175/1a84e38e-f828-11e5-9e04-463cd2a913b2.png)
16068|@squarerootfury The more I think about it, the more I realized you are right. If this does seem to be a more general issue, then its worth filing a more general bug. I'll go do that.
16069|With that PR in the goings we will use a smarter way of selecting what text from the current line to filter you completion items against. When providing a `TextEdit` like above we will use the range that it defines (in the same `0,0,0,5` and use that for filtering) otherwise (only `label` is present) we will fall-back to the word range until the position.   There is still an issue because we filter the proposals by `label` or `filterText` against the selected text. In above sample that will is `$ALLUSERSPROFILE` and `$AMD_ENTRYPOINT` against `$env:`. Unsure if we should also use `insertText` when present...
16070|@z-ax until I find the time to add this feature here is a setup for OS X and linux that uses an npm script to launch a program in debug mode.  Unpack this [project zip](https://github.com/Microsoft/vscode/files/199901/npm-run.zip) and make the included script `fakenode.sh` executable.  Open the project with VS Code and set a breakpoint in hello.js:2.  Start debugging: the breakpoint should be hit.  You will have to adapt the script `fakenode.sh` and the npm scripts in the `package.json` to your needs.  Two things are important: - the launch configuration requires a real JavaScript for the `program` attribute even if you don't need this because it is an implicit part of your npm script. So you can specify an empty `dummy.js` instead of the `hello.js` I am using. - VS Code passes a port number to the script that you will have to pass on to the npm script. You cannot drop this because then VS Code will time out when trying to attach to that port.
16071|never mind, it was applying highlights to the label that are based on the filter text...
16072|This is a duplicate of https://github.com/Microsoft/vscode/issues/2726.  I've just added an example project that shows how this can be done: https://github.com/Microsoft/vscode/issues/2726#issuecomment-204349900
16073|+1. Where is like 10 bugs(feature requests) to add file type icons to easer find different files :)
16074|@weinand, thanks for reply, but until it's supported, will better work as before :)
16075|I don't think we would color files based on the file type, we are however looking at including git status to color files https://github.com/Microsoft/vscode/issues/178 and adding file type icons https://github.com/Microsoft/vscode/issues/211
16076|There's an extension API request to change color and opacity of files in the explorer too https://github.com/Microsoft/vscode/issues/1394
16077|Since the port number might make it difficult to adopt my approach from above, I will add support for a `port` attribute in the launch configs of request type `launch`. With this you can specify in your launch config to which port VS Code will try to connect (instead of letting VS Code choose a port randomly).  I've created this [feature request](https://github.com/Microsoft/vscode-node-debug/issues/60) for this.
16078|@weinand That's kindda problematic for our project.  But thanks for your time and attention! :)  For the next projects I'll use this approach, and for the current ones, I'll be waiting till we can open the same project in two different instances. Could this be done with an extension? If yes, I would consider developing it myself.
16079|@buzinas but every folder has a parent folder, right? So VS Code can always open it (even if you cannot freely choose the name of that folder).  No, an extension cannot fix the issue that a folder cannot be opened in two VS Code windows. (Most likely the problem is just a single if-statement that needs to be removed ;-)
16080|I would really love to see an option to format on save
16081|Is the file tree exposed to extensions api? if you can expose it, i think that would allow the community to create an extension for this and for any further opinionated customizations all the while VSCode itself can remain neutral on the issue
16082|Duplicate of https://github.com/Microsoft/vscode/issues/4180
16083|"@cafreeman the insiders build will actually install `code-insiders`, the ""typo"" in the command palette for the insiders build is captured in https://github.com/Microsoft/vscode/issues/3877  If you're still experiencing issues, you can try running `whereis code-insiders` to help diagnose the issue."
16084|Would be nice to also add svg support to html
16085|If that would be added, I'd like to port my icon extension ([Brackets Icons](https://github.com/ivogabe/Brackets-Icons)) for Brackets to VS Code. In Brackets, an icon provider can be added, which is a function that returns an icon as a DOM element for a specified file name ([docs](http://brackets.io/docs/current/modules/project/ProjectManager.html#-addIconProvider)). Since VS Code doesn't expose the DOM, there should be a layer between, but similar ideas can be used.
16086|@egamma @seanmcbreen @waderyan
16087|This PR is feature complete.
16088|Marking as upstream for better menu API around enablement.
16089|No API atm to change the explorer.
16090|Thanks, will review next week!
16091|@isidorn Not with the schema. But you could contribute your own completion provider.
16092|Thanks a lot for working on this!  I believe `insertText` should also be inspected since the real completion text for PowerShell will come from there.  The `label` and `filterText` are used for different purposes and don't necessarily reflect the text that will be inserted.  How are you currently filtering the proposals against the text that is being completed?  What's the goal for filtering, just to discard any completions that don't seem the follow from the previous text?
16093|Thank you. Consider this case is solved/closed, #1394 should solve this.
16094|@bpasero It reproduced over night with insider build. I tried in both our private larger enlistment and our open source enlistment, and only the larger private enlistment seemed to cause the problem, which I unfortunately can't share (it is Microsoft internal though so maybe we can get you access? My alias is alanwri)  Is there anything I can do on my machine to capture logs and share with you?  ![image](https://cloud.githubusercontent.com/assets/2292985/14216227/92cf4fd6-f7fc-11e5-8834-c5be36a65c30.png)
16095|@bpasero is there plans for such a thing in the near future? if yes, any rough ETA?
16096|@egamma @chrisdias please chime in.
16097|Please share with me on my alias benjpas, thanks! Would also appreciate some details how you use VS Code on that workspace to cause the memory increase.
16098|## About the blurriness  This is a known issue with Chromium.  SVG cursors in Chromium are rasterized before they are displayed, hence the blurriness. https://bugs.chromium.org/p/chromium/issues/detail?id=325565  ## My workaround  I was able to address blurriness on webkit browsers (i.e. Chromium) using a `-webkit-image-set` rule to display appropriate scaled versions for the pixel density of the display.  These cursors will now be razor sharp in VS Code.  However, in Monaco online, it may not work on all browsers as nicely, because the spec for `image-sets` is not adopted widely in browsers and neither is `cursor` using a URI for an image.  This is not a big deal necessarily from a functional perspective, because the cursor has a fallback to the default cursor, but it is kind of annoying consistency wide.  ### Potential problems related to how this will work in Monaco online - Edge does not support URI cursors yet. - IE only supports `.cur` cursors (we would need a fallback in this format for IE) - I couldn't seem to get this to work in Firefox, even with the correct syntax.  But in theory it should work according to their documentation.  ## Note to self:  We can easily write a media query to detect hdpi displays like Retina displays (this one courtesy of CSS tricks):  ``` @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (   min--moz-device-pixel-ratio: 2), only screen and (     -o-min-device-pixel-ratio: 2/1), only screen and (        min-device-pixel-ratio: 2), only screen and (                min-resolution: 192dpi), only screen and (                min-resolution: 2dppx) {     .monaco-editor.mac .margin-view-overlays .line-numbers {     /* Use this cursor on high-dpi screens */         cursor: url('./flipped-cursor-mac-2x.png') 24 0, default;     } } ```  But we shouldn't need to if browsers can fix these issues for rendering SVG correctly.  Also, this unfortunately displays the image twice as big as intended.  It seems the only way to go about this is `image-sets` or SVG where the browser handles it correctly in the vector space without rasterizing it.
16099|Let's see how it goes with the packages before doing something like this. This is only really an issue if the zip archive is used on Linux.
16100|"Dunno, if it is lining up with the mentioned:  Under Ubuntu-Xenial 32-|64-Bit latest the cursor obviously looses its svg (if that one is the one used allover), instead showing off 3-vertical-lines-stacked-vertically. I could not determine a specific surrounding-|environmental- -condition (means: independent of ram-|-usage|-free || available-ressources-in-general || install-specific-differences).  Thing is, that not-really-helping--cursor is from then on the only one that is shown, independent of closing VS Code or not and MAY sometime later (between 10 to unlimited minutes or reboot) switch back to the OS-defined.  Any idea, where's the right point to hook into such an issue?"
