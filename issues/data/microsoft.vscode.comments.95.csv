9401|@Tyriar Close #2982?
9402|Note that even following these steps, I'm still unable to get extensionHost debugging working, because pressing F5 launches the generic electron window instead of a child vscode instance: 1. Run `git checkout 0.10.8` 2. Delete the stub debuggers: `rm -rf ./extensions/node-debug ./extensions/mono-debug` 3. Download the actual debuggers with `git clone https://github.com/microsoft/vscode-node-debug ./extensions/node-debug` and `git clone https://github.com/microsoft/vscode-mono-debug ./extensions/mono-debug`  4. Change to each debugger directory and build them with `npm install && gulp` 5. Change back to the source root and run `./scripts/npm.sh install --arch=x64` 6. Build product with `gulp compile` 7. Launch the build with `./scripts/code.sh` 8. Open the source for [amVim](https://github.com/aioutecism/amVim-for-VSCode) 9. Try to debug it by pressing F5  This is probably(?) from the difference in the way the app gets invoked.  In the release, it's running the Code binary, but code.sh runs the build launching electron directly.  ![screenshot from 2016-02-15 13 04 39](https://cloud.githubusercontent.com/assets/17229578/13058091/48f47c04-d3e6-11e5-8874-81585b33e4e9.png) Screenshot showing generic electron window instead of a child vscode instance
9403|"Same exact issue here, history state is lost (and so is the code :scream:). Like PeterAronZentai said, the characters that show up are unpredictable.  User settings:  ``` javascript // Place your settings in this file to overwrite the default settings {     ""editor.renderWhitespace"": true,     ""files.trimTrailingWhitespace"": true } ```"
9404|@ElChupacabra26 also on OS X? I wonder how it did not came up earlier - considering how frequent this use case might be.
9405|@PeterAronZentai Yep, I'm on Yosemite. I was glad to see I'm not the only one having this problem
9406|Closed, see https://github.com/Microsoft/vscode/pull/2983
9407|"Thanks for the reply.  I would like to integrate some minimal UI to see what are my currently open ""projects"" among all the VSCode windows. You could think of it as a very minimal and lightweight form of a solution explorer, but where each project in the solution explorer actually just refers to the related VSCode window.  My usecase that I want to address, is to be able to more comfortably keep track and switch between the 3-5+ vscode windows that I often have opened when working on a project that is composed of several modules (each is a separate VSCode project).  E.g. this would be five open VSCode projects in the windows taskbar that I have to navigate between... ![image](https://cloud.githubusercontent.com/assets/394294/13059593/87ad717c-d42b-11e5-9f63-16dfa19d20c8.png)  To integrate such a feature with an extension, at least I would need to have access to... - a list of the currently opened VSCode windows in a VSCode instance/process - their active title / directory name - a way to switch the currently active window / setting the currently active window  For the implementation of my extension I can imagine three different UX solutions that I would like to try out and mix/match to see what works best: - add a minimal ""solution explorer""-esque listview in the VSCode UI with the names of the currently opened windows, a double click would switch to the selected window (maybe also with the option to close such a window) - add a command that would show the list of names of the currently open windows in the quick info box at the top, then the user can select the one he wants to switch to - add task-items for the currently active windows to the windows taskbar context-menu popup on right-click, see this screenshots for example...  ![image](https://cloud.githubusercontent.com/assets/394294/13059703/66ab84f4-d42c-11e5-9fe6-0958a1d98ba8.png)  the currently opened windows could maybe be placed below the ""New Window"" task via the [electron desktop integration API](http://electron.atom.io/docs/v0.36.7/tutorial/desktop-environment-integration/#user-tasks-windows), and the user could have a very minimalistic overview over the currently open windows/projects and switch more easily between them.  Thanks"
9408|This looks like a duplicate of #2829, work arounds are described in this comment. https://github.com/Microsoft/vscode/issues/2829#issuecomment-182485227.  Please confirm whether this issue is indeed a dupe
9409|This issue was moved to OmniSharp/omnisharp-vscode#36
9410|It is indeed a dupe. I am closing this now.
9411|@drywolf  You could spawn a new process from the extension that launches electron, shows the UI and returns the user selection on stdout that you read from your extensin.
9412|Thanks @MystK moving
9413|This issue was moved to Microsoft/vscode-docs#160
9414|This depends on the language service. If the language service doesn't provide project level errors and warnings you can define a task that runs the build process. In the task you define a problem matcher that turns error messages into errors inside VS Code. Pls see: https://code.visualstudio.com/docs/editor/tasks#_processing-task-output-with-problem-matchers
9415|@daschult it looks like you are missing an `npm install`. After the npm you will have to restart code or run the `reload window` command.
9416|"That's an interesting approach, thanks for the inspiration. I will try it out. :grinning:   Edit: The only concern that I have is that electron will take ""too long"" to boot, maybe I'll have to keep it running in the tray to circumvent that. But I can figure that out.  Thanks again"
9417|@drywolf pls let us know how it goes. I would start with the `simplest thing that could possibly work`, electron tends to start quickly. What will be interesting to see whether the focus/activation behaviour is tolerable.
9418|@mitasoft do you have Salsa enabled? pls see https://code.visualstudio.com/Updates#_javascript-salsa-preview
9419|I've your repo on github (https://github.com/shanalikhan/code-settings-sync) and will try to repro this.
9420|"This is interesting. I created this [fiddle](https://jsfiddle.net/wadeanderson7/1pv9xd71/) to reproduce the behavior.   @egamma do you have any thoughts on this? Here are a couple ideas we've talked about before.   1 - Remove the text area completely and replace with just the tweet button. This makes sense because we're submitting to twitter anyways.  2 - Hack the text area element to get better behavior. This would involve looking for new line characters based on the batter described by OP. I'm not a fan of this as it seems error prone.   If we go with option 1, I'll work with Brad and get some design love on the form.   @beyondcompute any thoughts?   I created PR #3033 to fix the ""s"" on singular count issue."
9421|This is a really neat feature. What are our thoughts on expanding it? I'm thinking about writing a script that fills in the json file with language extensions that have greater than 1000 installs.   Maybe this was simply a proof of concept. I really like it as a user.
9422|"It works for me. - git clone  - npm install - edit package.json (as shown below) - npm install (get the output below)  `package.json`  ``` json {   ""name"": ""code-settings-sync"",   ""displayName"": ""Visual Studio Code Settings Sync"",   ""description"": ""Synchronize Settings, Snippets, launch, keybindings files and extensions Across Multiple Machines using Github GIST."",   ""version"": ""1.0.1"",   ""icon"": ""images/cloud.png"",   ""publisher"": ""Shan"",   ""author"": {         ""name"": ""Shan Khan"",         ""url"": ""http://shanalikhan.github.io""     },   ""galleryBanner"": {         ""color"": ""#3B4859"",         ""theme"": ""dark""     },     ""repository"": {         ""type"": ""git"",         ""url"": ""https://github.com/shanalikhan/code-settings-sync.git""     },     ""bugs"": {         ""url"": ""https://github.com/shanalikhan/code-settings-sync/issues"",     ""email"": ""shanalikhan@hotmail.com""     },   ""engines"": {     ""vscode"": ""^0.10.7""   },   ""categories"": [     ""Other""   ],   ""activationEvents"": [     ""onCommand:extension.updateSettings"",     ""onCommand:extension.downloadSettings"",     ""onCommand:extension.resetSettings""   ],   ""main"": ""./out/src/extension"",   ""contributes"": {     ""commands"": [       {         ""command"": ""extension.downloadSettings"",         ""title"": ""Sync : Download Settings""       },       {         ""command"": ""extension.updateSettings"",         ""title"": ""Sync : Update / Upload Settings""       },       {         ""command"": ""extension.resetSettings"",         ""title"": ""Sync : Reset Token and GIST Data""       }     ],     ""keybindings"": [       {         ""key"": ""alt+shift+u"",         ""command"": ""extension.updateSettings"",         ""when"": ""editorTextFocus""       },       {         ""key"": ""alt+shift+d"",         ""command"": ""extension.downloadSettings"",         ""when"": ""editorTextFocus""       }     ]   },   ""scripts"": {     ""vscode:prepublish"": ""node ./node_modules/vscode/bin/compile"",     ""compile"": ""node ./node_modules/vscode/bin/compile -watch -p ./"",     ""postinstall"": ""node ./node_modules/vscode/bin/install""   },   ""devDependencies"": {     ""typescript"": ""^1.6.2"",     ""vscode"": ""^0.11.x""   },   ""dependencies"": {     ""fs"": ""^0.0.2"",     ""github"": ""^0.2.4"",     ""open"": ""^0.0.5"",     ""temp"": ""^0.8.3"",     ""adm-zip"": ""^0.4.7"",     ""ncp"": ""^2.0.0""   } } ```  `output`  ``` c:\Users\egamma\Projects\tries\code-settings-sync>npm install npm WARN package.json code-settings-sync@1.0.1 No license field. npm WARN deprecated lodash@1.0.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0. / > code-settings-sync@1.0.1 postinstall c:\Users\egamma\Projects\tries\code-settings-sync > node ./node_modules/vscode/bin/install  Detected VS Code engine version: ^0.10.7 Found minimal version that qualifies engine range: 0.10.8 Fetching vscode.d.ts from: https://raw.githubusercontent.com/Microsoft/vscode/0.10.8/src/vs/vscode.d.ts vscode.d.ts successfully installed!  vscode@0.11.1 node_modules\vscode ├── semver@5.1.0 ├── glob@5.0.15 (path-is-absolute@1.0.0, inherits@2.0.1, once@1.3.3, inflight@1.0.4, minimatch@3.0.0) ├── source-map-support@0.3.3 (source-map@0.1.32) ├── mocha@2.4.5 (escape-string-regexp@1.0.2, commander@2.3.0, diff@1.4.0, growl@1.8.1, supports-color@1.2.0, debug@2.2.0, mkdirp@0.5.1, glob@3.2.3, jade@0.26.3) ├── gulp-symdest@1.0.0 (queue@3.1.0, mkdirp@0.5.1, event-stream@3.3.2, vinyl-fs@1.0.0) ├── gulp-vinyl-zip@1.1.2 (queue@3.1.0, yazl@2.3.0, vinyl@0.4.6, event-stream@3.3.2, yauzl@2.4.1, through2@0.6.5, vinyl-fs@0.3.14) ├── request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.1, node-uuid@1.4.7, qs@6.0.2, combined-stream@1.0.5, mime-types@2.1.10, form-data@1.0.0-rc3, aws4@1.2.1, bl@1.0.3, hawk@3.1.3, http-signature@1.1.1, har-validator@2.0.6) └── gulp-remote-src@0.4.0 (node.extend@1.1.5, vinyl@0.2.3, event-stream@3.1.7, through2@0.5.1, request@2.58.0) ```"
9423|"Hi @MystK, all operations are local. The credential error in the video is not my point, just a side effect of showing that, after pressing the sync button,  the local git status is still not updated. Before that, I pressed the ""master"" button, this interaction also did not update the status. Until at last, I opened the git panel, new branch finally shows. So, I expect that, clicking the ""master"" button or the sync button will refresh status first and show the new created/deleted branch."
9424|Thanks for the clarification. My apologies. I've tried to reproduce your issue but cannot. I've clones your environment and steps but my branch still switches to the testing branch without having to click the Git panel.
9425|@MystK, I just find that this happens only when using vscode open a subfolder of a git repository. working on the repository root folder works normal.
9426|That's because they did used to highlight variables! However, it was a bug, because the old theme was designed to mimic the actual Visual Studio, which does not highlight variables. In order to make things prettier, we got new colorful Light+/Dark+ themes to compensate though. It is the default for new installations, but if you updated from a previous version, you were left on the old theme. Just change the theme from your command palette. :)
9427|I actually ended up writing [my own extension](https://marketplace.visualstudio.com/items?itemName=bbenoist.vagrant) which also adds support for common Vagrant commands :tada:   This PR is no more important for me. Feel free to do whatever with it or the [code of my extension](https://github.com/bbenoist/vscode-vagrant) :wink:
9428|"I see now, thanks a lot for the answer! I thought that it was that ""php.validate.executablePath"" thing, but when i fixed it, the variables weren't blue and i got stressed ¬¬'  :)"
9429|@bloudraak You might also be interested in my new [Vagrant extension](https://marketplace.visualstudio.com/items?itemName=bbenoist.vagrant) :wink: :
9430|"Looks like you might still be on the ""Dark (Visual Studio)"" theme (which doesn't have many colors). Double check that you're on the ""Dark+ (default dark)"" theme if you want colors."
9431|A first POC is working out quite well, I can switch between vscode windows from my electron UI when I start it manually from the command line.  ![image](https://cloud.githubusercontent.com/assets/394294/13064060/670c831c-d44f-11e5-9f72-0f33cd289674.png)  But when I try to run electron from within my vscode extension it does not find the electron module for some reason:  ```     var command = 'node_modules\\.bin\\electron.cmd';     var cwd = 'C:\\Users\\JohnDoe\\Documents\\code\\code-solution\\electron-service';      var child = exec(command, { cwd: cwd, });      child.stdout.on('data', function(data) {         console.log('stdout: ' + data);     });     child.stderr.on('data', function(data) {         console.log('stderr: ' + data);     });     child.on('close', function(code) {         console.log('closing code: ' + code);     }); ```  The error:  ``` Error: Cannot find module 'electron'     at Function.Module._resolveFilename (module.js:338:15)     at Function.Module._load (module.js:289:25)     at Module.require (module.js:366:17)     at require (module.js:385:17)     at Object.<anonymous> (C:\Users\JohnDoe\Documents\code\code-solution\electron-service\main.js:3:18)     at Module._compile (module.js:425:26)     at Object.Module._extensions..js (module.js:432:10)     at Module.load (module.js:356:32)     at Function.Module._load (module.js:313:12)     at Function.Module.runMain (module.js:457:10) ```  I have not been able to fix it so far, so any help is much appreciated.
9432|Thanks, that helped. It still looks like not all keywords are handled by default though (`import {...} from`).  ![image](https://cloud.githubusercontent.com/assets/563819/13064249/ad5ef2f2-d416-11e5-8f73-2f2e0f60d062.png)
9433|@egamma workaround works perfectly, thanks for the pointer. sorry for the wasted cycles.
9434|Now I packaged the eletron app into an exe bundle and I try to run that instead. Now the app seems to be executing but it does have some problem to create the main window, I can't see it anywhere on the desktop.  ![image](https://cloud.githubusercontent.com/assets/394294/13064839/aedebe6a-d456-11e5-9913-1b64c58c4873.png)  Edit: this might be related to atom/electron#1613
9435|@alexandrudima thanks! workaround 2 was a real lifesaver. Small addition that the error exists on OS X 10.11.1 as well.
9436|@Tyriar Yes, i have installed g++. I try to upgrade nodejs to 4.3. Hope it will be OK. Thank you.
9437|yes I have the same problem, I'm using Version 0.10.8 (0.10.8), have to close the editor and reopen it. ![image](https://cloud.githubusercontent.com/assets/1619030/13066562/53200e98-d4a2-11e5-81c9-78be6f444d4b.png)
9438|"Ok, I think I posted just a moment too soon. Looking at issue #2920 and https://github.com/Microsoft/TypeScript/issues/7025 it seems that I may have had my _VSCODE_TSJS_ environment variable incorrectly set to **true** instead of **1** as in `VSCODE_TSJS=1`. Making this change, adding `""module"": ""commonjs"",` to tsconfig.json and ensuring I have run `npm install -g typescript@next` seems to have done the trick but I haven't gone back to figure out whether the last to changes were necessary or not in my case."
9439|@MystK : I noticed this happens on OS X and not on Windows. I have taken the screen shot of the instance of vscode running on windows to highlight what gets hidden. The Start button gets hidden on OS X which is highlighted on red.  ![image](https://cloud.githubusercontent.com/assets/6128234/13067351/37bae9c6-d497-11e5-984a-36a71b9a7a8e.png)
9440|Even this thread is off-topic, a windows phone version of VS Code would be stunning. Especially when working with continuum.
9441|Dup of #1029
9442|nearly the same message at every start from commandline.  > D:\Users\damu1de\Documents\workspace\webapp\dpt-app>code . > D:\Users\damu1de\Documents\workspace\webapp\dpt-app> > [8612:648:0216/081901:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] > [8612:648:0216/081902:VERBOSE1:crash_service.cc(142)] window handle is 00030442 > [8612:648:0216/081902:VERBOSE1:crash_service.cc(290)] pipe name is \.\pipe\VSCode Crash Service > dumps at D:\Users\damu1de\AppData\Local\Temp\VSCode Crashes > [8612:648:0216/081902:VERBOSE1:crash_service.cc(294)] checkpoint is D:\Users\damu1de\AppData\Local\Temp\VSCode Crashes\crash_checkpoint.txt > server is https://ticinocrashreporter.azurewebsites.net/crash > maximum 128 reports/day > reporter is electron-crash-service > [8612:648:0216/081902:VERBOSE1:crash_service_main.cc(84)] Ready to process crash requests > [1188:6140:0216/081902:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] > [8612:10184:0216/081902:VERBOSE1:crash_service.cc(323)] client start. pid = 7520 > [1188:6140:0216/081902:VERBOSE1:crash_service.cc(142)] window handle is 00030414 > [[1188:6140:0216/081902:VERBOSE1:crash_service.cc(290)] pipe name is \.\pipe\VSCode Crash Service > dumps at D:\Users\damu1de\AppData\Local\Temp\VSCode Crashes > 8612:10184:0216/081902:VERBOSE1:crash_service.cc(323)] client start. pid = 5468 > [1188:6140:0216/081902:VERBOSE1:crash_service.cc(294)] checkpoint is D:\Users\damu1de\AppData\Local\Temp\VSCode Crashes\crash_checkpoint.txt > server is https://ticinocrashreporter.azurewebsites.net/crash > maximum 128 reports/day > reporter is electron-crash-service > [1188:6140:0216/081902:ERROR:crash_service.cc(301)] could not start dumper
9443|Sorry, I give it up. It is too difficult to fix so many npm-dependency. Maybe it's better for me, Newbee, to download the compiled software.
9444|Sorry this is #2829. Work arounds are described here: https://github.com/Microsoft/vscode/issues/2829#issuecomment-182485227  closing as a dup.
9445|Hello thanks for the issue, but please report issues in English.
9446|For which language would you like these settings?
9447|@joaomoreno @seanmcbreen @waderyan do you know? I'll also check with the market place team.
9448|@jannavarro As per my question, I'm able to run the project by going into project directory using `cd` and using `dnx web` . See if that works for you.
9449|Thanks @mattacosta for chiming in.  Closing since this has been addressed by the ligh/dark+ themes
9450|This issue was moved to Microsoft/TypeScript-TmLanguage#89
9451|One more thing you could try is try installing it in `~` instead of `/media/litianci`, maybe file permissions are causing some issues since I see a bunch of read and file don't exist errors. Also I'm not sure if it's a problem for vscode but I've had issues in the past with file permissions on where `npm` installs its packages, I install mine in `~/.npm-packages` (there a [tutorial how to do this here](https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md)).  Anyway good luck, thanks for trying it out!
9452|This is due to a lack of file system events within the `.git` folder, when scoping VS Code to a sub directory of the repository.  @bpasero Let's talk about this when you're back.
9453|"``` npm ERR! Tell the author that this fails on your system: npm ERR!     node-gyp rebuild npm ERR! You can get their info via: npm ERR!     npm owner ls native-keymap npm ERR! There is likely additional logging output above. ```  when in ~. it pops the same error. I see above messages. does it the reason? `node-gyp rebuild`  here is my `node-gyp rebuild` error message.  ``` litianci@litianci-pc:~/vscode$ node-gyp rebuild gyp info it worked if it ends with ok gyp info using node-gyp@3.0.3 gyp info using node@4.2.4 | linux | x64 gyp info spawn python2 gyp info spawn args [ '/usr/share/node-gyp/gyp/gyp_main.py', gyp info spawn args   'binding.gyp', gyp info spawn args   '-f', gyp info spawn args   'make', gyp info spawn args   '-I', gyp info spawn args   '/home/litianci/vscode/build/config.gypi', gyp info spawn args   '-I', gyp info spawn args   '/usr/share/node-gyp/addon.gypi', gyp info spawn args   '-I', gyp info spawn args   '/usr/include/nodejs/common.gypi', gyp info spawn args   '-Dlibrary=shared_library', gyp info spawn args   '-Dvisibility=default', gyp info spawn args   '-Dnode_root_dir=/usr/include/nodejs', gyp info spawn args   '-Dnode_gyp_dir=/usr/share/node-gyp', gyp info spawn args   '-Dnode_lib_file=node.lib', gyp info spawn args   '-Dmodule_root_dir=/home/litianci/vscode', gyp info spawn args   '--depth=.', gyp info spawn args   '--no-parallel', gyp info spawn args   '--generator-output', gyp info spawn args   'build', gyp info spawn args   '-Goutput_dir=.' ] gyp: binding.gyp not found (cwd: /home/litianci/vscode) while trying to load binding.gyp gyp ERR! configure error  gyp ERR! stack Error: `gyp` failed with exit code: 1 gyp ERR! stack     at ChildProcess.onCpExit (/usr/share/node-gyp/lib/configure.js:354:16) gyp ERR! stack     at emitTwo (events.js:87:13) gyp ERR! stack     at ChildProcess.emit (events.js:172:7) gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12) gyp ERR! System Linux 4.2.0-1-amd64 gyp ERR! command ""/usr/bin/nodejs"" ""/usr/bin/node-gyp"" ""rebuild"" gyp ERR! cwd /home/litianci/vscode gyp ERR! node -v v4.2.4 gyp ERR! node-gyp -v v3.0.3 gyp ERR! not ok   ```  it says  ``` binding.gyp not found (cwd: /home/litianci/vscode) while trying to load binding.gyp ```  I search in my vscode  ``` find ./ -name binding.gyp ```  nothing shown."
9454|Should this go to telemetry?
9455|@drywolf There is an environmental variable we set to get electron to run as a node process when we spawn it: `ELECTRON_RUN_AS_NODE`. It might be that when you spawn electron out of vscode, this environmental variable remains set, thus making the spawned electron run in node mode again. You can try to remove that variable from the env (passing in a env clone without it to spawn).  Hope it helps, I'm just guessing...
9456|ping @Tomamais
9457|@alexandrudima Thanks for the hint. In the issue that I linked above this is also the suggested fix. I tried it out with the proposed `ATOM_SHELL_INTERNAL_RUN_AS_NODE=0` fix, which didn't seem to make a difference. I didn't pick up that this was the atom-specific version of the env-variable, so I will try it out with `ELECTRON_RUN_AS_NODE=0` later today.  Thanks
9458|Yeah, the env variable got renamed in Electron (which still supports the old one):  https://github.com/atom/electron/blob/b42695a0b5e6dec92fe86b8a7f40ec0d0b7c8db7/atom/app/atom_main.cc#L36
9459|We had some discussion on this. Our conclusion was that the wallaby extension **is** free, it is the backend service that requires a license. So the market place shows the right information about the extension. Our suggestion is to clarify this in the `Readme.md`. You can also try to add a hint in the description in the `package.json`.  My understanding that support for paid extensions is on the backlog of the market place.
9460|Thanks for the update Erich, makes sense. Will update the readme file.
9461|Though it'd be great to be able to specify a 'Trial' label for the extension like they can in Visual Studio marketplace:  ![screen shot 2016-02-16 at 10 22 07 pm](https://cloud.githubusercontent.com/assets/979966/13076130/ec22f070-d4fb-11e5-9c3b-1a300c12b4e4.png)
9462|I love the Visual Studio design with plus and minus signs and the line, like the proposal of @bgashler1, however I would like to fold the closing brace too, together with the starting brace replacing both with a hoverable tooltip icon, like visual studio does, so please make that an option.
9463|Closing brace could be folded like this:  `function simpleMethod() { ... }`  instead of  `function simpleMethod() { ...`  I am definitly for folding closing brace.
9464|+1  I met the crashes several times after I upgraded to 0.10.8(Windows 10 x64). Unlike #508, sometimes, it happens after vscode started only 5 minutes.  I didn't meet this crash before 0.10.8  When crashes, there is only one button to let me click and then close, I am wondering the following too: How can I provide more info?  By investigating files on my disk, I found the following crashes info may be helpful( I found it in C:/Users/myuser/AppData/Local/Temp/VSCode Crashes): https://github.com/TheLevenCreations/electron_typescript_template/blob/master/VSCode%20Crashes.zip  Now sure how to upload the files, so I just attached it to my GitHub project.
9465|Sorry I got mixed up as well, looks like the best is to unset both -- not sure setting to `0` is a real unset. cc @joaomoreno
9466|nice one, thank you.
9467|"Hi, I've been able to identify an unresolved issue that might help solving the issue. when setting     ""http.proxy"": ""http://[user]:[password]@[url]:8080"",     ""http.proxyStrictSSL"": false  It doesn't work for the following reason: workbench.main.js:87 getaddrinfo ENOTFOUND [user] [user]:80: Error: getaddrinfo ENOTFOUND [user] [user]:80     at errnoException (dns.js:25:10)     at GetAddrInfoReqWrap.onlookup [as oncomplete](dns.js:76:26)  Our corporate proxy is NTLM based and can leverage on declarative authentication in the Proxy Url  Seems like the parsing of the username and password is bugged,"
9468|@weinand we are not using acronyms in our protocol at all, so not a big fan of `aiKey`, I would rather go with `telemetryKey`. I would put it as a top level attribute under `debuggers` in the `package.json`. If this is not provided I would ignore the telemetry event so we never mix the adapter telemtery with our vscode telemetry. What do you think?
9469|@isidorn yes, put aiKey at the top of `debuggers`.  @SofianHn What's about our own debug adapters? Do we get our own keys for them so that their telemetry events go to vscode telemetry?
9470|Thanks :+1:
9471|+1  I met this issue too. If you use Ctrl++ to zoom in and use mouse to right click. The right menu will pop up with a floating position.  See the captured screenshots: https://github.com/TheLevenCreations/electron_typescript_template/blob/master/capture-1.gif
9472|Currently JavaScript.
9473|Fixed in d2a151f
9474|I'd also like to add that I'm seeing this behavior in OS X 10.10.5 (Yosemite)
9475|BTW, put the surface pen in there and hold there for 3 seconds, the context menu will pop up. Why finger cannot?
9476|This issue also exists on 0.10.7, 0.10.6
9477|@mponton Strange. It definitely looks like there's something else going on in your system. The request should appear in Wireshark imo.
9478|@kikokikok Authentication was fixed in #1942. Are you sure you are using the latest 0.10.8 version?
9479|![bug](https://cloud.githubusercontent.com/assets/22350/13080063/649aee34-d4c7-11e5-98b2-21ca12d906df.gif)  The `Clean All` button cleans all changes in the `Changes` section. Untracked files and folders appear in the `Changes` section, so they are also cleaned up. It has always worked that way since the first release.
9480|Yes but this doesn't seem to be taking into account the git ignored files and folders which in our case include the node_modules directories.
9481|![image](https://cloud.githubusercontent.com/assets/1577981/13080446/ed0803dc-d4c8-11e5-8768-747af27e1063.png)  Yup :)
9482|What we do we with the current adapters telemetry? do we depend on any of them in our current active reporting? If not, let's put them in the standard first party extensions pipeline. Otherwise, we can use the same vscode key, if so I would want make sure that @isidorn adds standard properties such as machineId and sessionId so the processing scripts can function normally.
9483|This was going to be part of https://github.com/Microsoft/vscode/issues/1704 - did you want me to handle this?
9484|https://github.com/Armitxes/VSCode_SQF its already been made by another person. Thanks
9485|Ignored files and folders should not be _cleaned_ since they don't appear in the list. Are you saying that in your machine they are being cleaned up?
9486|When you set your actual username, password and url, what do you see?
9487|Nah, this issue is just for the Command Prompt and Powershell. I'll take it.
9488|@bubifengyun it looks to me like a problem with node, you say you installed it using `apt-get` initially and then tried to upgrade to 4.3?  > i spend half day to install nodejs version4.3, but I cannot install npm successfully because of dependency.  I don't think nodejs provides an official repository to update via `apt-get` so it could very well be an issue with how node was being installed. Also did you work out the `npm` issues because that is essential?  I recommend a simple install of node; [download 4.3.0](https://nodejs.org/en/), extract to `~/nodejs` (or similar) and then adding `~/nodejs/bin` to your `$PATH`:  Make sure you remove the previous version of node however it was installed:  ``` bash sudo apt-get remove nodejs ```  Here is how you add to the $PATH:  ``` bash export PATH=$PATH:/home/litianci/nodejs/bin ```  You will need to add the above to your `.bashrc` in order for it to carry over to other terminal sessions.
9489|Not bash shells? Got it.
9490|Correct, it appears that the command being run is git clean -fd which is removing my git ignored files and folders. should it not be running _git reset --hard_ which will reset all changes to tracked files ?
9491|@aloisdg context on why the Linux hotkey is different is that it conflicts with switching workspaces on many Debian-based distros.
9492|That would be helpful indeed!
9493|:+1:
9494|What is interesting is that we never call `git clean -fd` without any other arguments. Can you please open the Git Output view and show me the exact `clean` command Code is running?  ![image](https://cloud.githubusercontent.com/assets/22350/13082050/56258d2a-d4cf-11e5-865a-dc21f8d4265d.png)
9495|For Microsoft owned debug adapters, wouldn't we want their telemetry in the same stream as VS Code so that one could look at all activity for the same session? Or are there other good ways to tie that together?
9496|@SofianHn previously we were reporting telemetry events of all debug adapters to vscode. With the new mechanism we don't do this any more, so we have to make sure that the node-debug adapter (which is shipping with vscode) still gets reported in the same way as before. So I will set the aiKey.
9497|@Tyriar I think debian-based distro should move the defaut key for window related stuff to the Windows-key (as an OS key), but this argument is for another issue. Thank you for the answer.
9498|![vscode-gitoutput](https://cloud.githubusercontent.com/assets/8030087/13082942/bc268d2c-d4ca-11e5-8777-747b0522fcb4.png)
9499|"@danlfarnell This is most likely a file with a different encoding than UTF8. Please use the switcher at the bottom right to open the file with a different encoding or use the `""files.encoding""` setting to change the default from UTF8 to something else."
9500|Oh, I take it back, it doesn run `git clean -fd`. Sorry about that.  But what I find strange is that it doesn't happen to me. I always have a bunch of stuff inside `node_modules` which never gets erased. Git would only remove them if passing the [`-x` option](https://git-scm.com/docs/git-clean) to the `clean` command, which we don't.  Did you maybe update `git` itself? What version of git do you have? Do you ignore `node_modules` in `.gitignore`?
