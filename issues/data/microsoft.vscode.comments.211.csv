21001|"My two cents: I don't ever want close buttons; to me, they're a waste of real estate that sometimes cause frustration (accidentally click). It's much more difficult to accidentally middle-click than to accidentally click 1px too far to the left.  I also think dirty indicators are a waste of real estate. In Sublime Text, I configure ""dirty"" to just change the tab's font color. In the past, I've also made it italicized but it sounds like you have plans for italicizing previews."
21002|"~~@jackvial wait so this update deleted my settings as well? Now when I go to File -> Preferences -> User Settings, it shows the ""Default Settings"" and not the one's I've set/created.~~  ~~But even so it still says `""editor.wrappingColumn"": 300` (obviously since it's the default settings). So something else must be wrong!~~  **Edit:** Correction it opened both the default settings and my custom settings. Months ago I did `""editor.wrappingColumn"": 10000000000000000000`, so fully avoid any wrapping. Has that turned into a problem maybe?"
21003|"By looking in the ""Default Settings"", I see that now you're supposed to/can do `""editor.wrappingColumn"": -1` do disable wrapping."
21004|Hi! Im having the same error, every time that I format the code with the shorcut or the option menu it's repeating the last tag!  This is the version that I have:  ![image](https://cloud.githubusercontent.com/assets/7120647/15132746/04a9b8a4-161a-11e6-9117-1480024758c5.png)  And this is the error:  ![error](https://cloud.githubusercontent.com/assets/7120647/15132801/544f83ac-161a-11e6-81c7-85b909c79588.gif)  As you can see is always repeating the last element line
21005|I didn't have this error before, this came out on this new version!
21006|This is still an issue - yet it has been closed.  So has the duplicate #133.  Is this being addressed somewhere else, or can this be re-opened?
21007|@GuardRex Thanks for the reply. I tried installing the latest SDK from the link you posted. After installing it, I still see the same version. Do I need to uninstall it first and reinstall it? Thanks
21008|- VSCode Version: 1.1.0 - OS Version: Ubuntu 16.04  I just update vscode to 1.1.0 today and have similar problem with using vscode-eslint. Starting vscode from terminal works fine but starting from GUI (clicking on vscode icon) doesn't because vscode does not pick up `PATH`. Everything work ok if I use vscode 1.0.0.
21009|@vaishnav4226 Ah ... you may have run into this problem ... https://github.com/dotnet/cli/issues/2948  Do what I did: Uninstall any `dotnet cli`'s you see in `Programs & Features`, clean out any lingering registry keys (I think they're at: `HKLM > Software > Microsoft > dotnet`), clean up any lingering SDK's (should be found at `c:\Program Files\dotnet\sdk`. Probably a good idea to nuke the package caches: `nuget locals all -clear` or find and delete them at `C:\Users\<USER>\.nuget\packages`. Check the system PATH and make sure there aren't any lingering paths I found one there just yesterday to a DNX location! I haven't had DNX on this PC for quite a while. Restart your PC. Install the latest SDK.
21010|The left side of the border is too wide
21011|not set config tsconfig.json is empty
21012|Oh, I'm sorry that I forgot providing the screenshot. For some WE-CAN'T-SAY-REASONS :smirk: , it's hard to connect to the Internet under the protect of GFW :disappointed: . ![cl8n2mgt 9lrtkr3 fdw j](https://cloud.githubusercontent.com/assets/1703022/15134935/3d2d28ee-16a3-11e6-933c-ddb464a03886.png)  So, this feature is not required outside the GFW :sob:
21013|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21014|Yes, for output and repl we only detect absolute paths as links:  https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/workbench/parts/output/common/outputWorker.ts#L73 https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/workbench/parts/debug/browser/replViewer.ts#L97  Maybe we should revisit this though. The reason we pick absolute paths is to have less false positives but maybe when we include the full error pattern (line:column) we will not get false positives even if we support relative paths.  The downside is that we always need to root relative paths to the workspace path and that might be a wrong assumption.
21015|@be5invis @MrTravisB @rauschma @marcusrugger @jpaaso   Folks I understand that it's a long thread so you probably didn't read it all, but please read the posts around [here](https://github.com/Microsoft/vscode/issues/224#issuecomment-213015687). Tabs will be optional, the devs are already very, very aware of the points you are bringing up.  Would-be posters: please look through the thread to see if your issues are already addressed - every time you post there are a hundred people getting emails with your :+1: Thanks
21016|@anyong However the “Open editor” separates the existing working file list into two half if you open two columns. I love the idea that there is only one “working files” for all editor columns. Please make this optional either.
21017|@be5invis The only difference is that there is a visual separator. You can still drag the files around and open them in any editor you like.
21018|"@anyong Can I hide it? And if I choose to hide the ""separator"", and Ctrl-Tab in one editor column, can I switch to a open file in the other column? What the con-tabbers want is to completely maintain the existing behavior."
21019|Seems related to this too: https://www.virtualbox.org/ticket/15375
21020|@be5invis from the comment I linked to above:  > Ctrl Alt Tab shows a list of all tabs inside all tab groups  So yes, you can still set the key binding to keep the current Ctrl+Tab behavior if you want.
21021|@anyong That's good. But still, can I hide the “left/right” indicator and make the list looks like a unity?
21022|@Janne252 there is some weird URI escaping happening, but I am able to fix this issue by changing the customHoverProvider.ts to create the file URI as follows:  ``` typescript /*---------------------------------------------------------  * Copyright (C) Janne Varjo. All rights reserved.  * Licensed under the MIT License. See LICENSE.txt in the project root for license information.  *--------------------------------------------------------*/  'use strict';  import * as vscode from 'vscode'; import {HoverProvider, Hover, TextDocument, Position, CancellationToken, Uri} from 'vscode'; import {Directory, Path} from './helpers';  export class CustomHoverProvider implements HoverProvider {      public provideHover(document:TextDocument, position:Position, token:CancellationToken)     {         var files:string[] = Directory.GetFiles(vscode.workspace.rootPath);          var word = document.getText(document.getWordRangeAtPosition(position));         var hoverMessage = `'${word}' doesn't match a filename in the current workspace. You should probably create ${word}.txt`;          for(var file of files)         {             var fileName = Path.GetFileNameWithoutExtension(file);             var uri = Uri.file(file);              if (fileName == word)             {                 hoverMessage = `'${word}' matches the file [${file}](${uri.toString()}) in the workspace.`;                 break;             }         }          return new Hover(hoverMessage);     } } ```
21023|What is GFW? Do you have an internet connection while you are trying the ext install command? The ext install command will fetch the list of extensions from a server, thus you must have an internet connection while doing this
21024|What is your editor.wrappingColumn, might you be facing this issue https://github.com/Microsoft/vscode/issues/6219 Does changing your editor.wrappingColumn to -1 solve the issue? Do you only see this for PHP files or for any file?
21025|Thanks for the suggestions however this is a dupe of #4580
21026|This is as desgined. The git viewlet is the only viewlet that support multiple selection. The issue here is that our explorer does not support multi select yet.
21027|dup of #6192
21028|maybe @aeschli
21029|That would be a question for @stevencl
21030|Closing - stable is updated
21031|"I had the same issue and added below lines to fix the problem {     ""http.proxyStrictSSL"": false,     ""http.proxy"": ""http://company-proxy.com:8080"",     ""https.proxy"":""https://company-proxy.com:8080"" }"
21032|+1
21033|Yay! I hope we get tabs soon!
21034|@nchammas I am not able to reproduce, maybe it got fixed by our 1.1 update?
21035|My steps are: - 2 monitors on Mac OS X - terminal on monitor 2 - open code from terminal on monitor 2 - code opens on monitor 1 (where I left it before) - focus is in editor  Do you have special settings? do you see a blinking cursor at least?
21036|Dupe of #143? They are currently working on it in this pullrequest #5985, and it's also in the May Iteration Plan #6105
21037|Yep, didn't see that. Thanks for that @JarnoNijboer
21038|Happened to me when VS code tried to update to version 1.1 from version 1.0
21039|No, we have no such config yet. fyi @alexandrudima
21040|The new 1.1 release brought some more details in the error: `messageService.ts:128 - write EPROTO 0:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:y:\jenkins\workspace\electron-win-ia32\vendor\node\deps\openssl\openssl\ssl\s23_clnt.c:794`  If any of that helps.
21041|You are right, there's more to do.
21042|Addressed in https://github.com/Microsoft/vscode/issues/6233
21043|And sorry for the late response. I was on vacation :-)
21044|@MrSkinny we move to a unified JavaScript / TypeScript language service to better support JS. However this requires some more configuration which is documented here: https://code.visualstudio.com/docs/languages/javascript   We are also working on bringing back the prompting to download typings files.  Regarding the underlines unused: yes the new language service warns about unused locales. This can be disabled in a jsocnfig.json file.
21045|cff665d rename from `rename2` to `rename`. But  /in18n/ file is still rename2.  (ex. `vscode/i18n/rus/src/vs/editor/contrib/rename/browser/rename2.i18n.json`) They should be `rename.i18n.json`
21046|I cannot find a solution. which is the correct issue?  Thanks,
21047|@aeschli the stale markers are CSS markers. However there is not easy fix here since we can't in general remove markers on mode change (for example spelling problems stay valid). I will keep the issue for now and will consider this when working on an improved marker story.
21048|There is no solution right now. It is a bug we need to address.
21049|Great News ..we are Getting Tabs..But we don't want to loose 'Working Files' Folder .Keep it along with tabs ?
21050|you are testing this too early
21051|Closing as we have no plans to go in that direction. Maybe an extension can pick that idea up.
21052|"Sorry for long silence, I was on vacation. Looks like in our project only definition files was included. According to documentation of typescript   > Any files that are referenced by those specified in the ""files"" property are also included.  So I just added to `files` attributes list our entry point `app.module.ts` and everything works.  VSCode works according to documentation for tsconfig, not a bug. Thank you for your help."
21053|This is related to #2000 and #2793
21054|@buu700 would you be able to share you project? Do you have a tsconfig.json file to configure the TS language server for your project. See also: https://code.visualstudio.com/docs/languages/typescript
21055|Awesome! Tab Groups
21056|Nice, thanks!
21057|Well, the GFW is an invisible wall between Internet and China Internet (maybe LAN is a better name :disappointed: ). It makes connections -- from the Mainland to Outland -- slow or fail. That's why there is a [cnpm](https://github.com/cnpm/cnpm) -- a mirror for npm which organized by Taobao. I should not have talked about this.  At last, it may be better if the **Quick Command Action** keeps there when losing focus for those people whose internet connections are not good enough. Isn't it?
21058|Thanks for more info, assigning to Joao
21059|FYI @bpasero
21060|Currently not, but we have other feature requests asking for this.
21061|Many thanks for the response :smile:
21062|Node-inspector has the same issue: https://github.com/node-inspector/node-inspector/issues/864  Since code injection fixes the issue for the `--debug-brk` case, we only have to find a way to inject code when node has been started with `--debug`.  I've verified that debugging node **v6** works in VS Code 1.1 if node has been started with `--debug-brk`.
21063|I changed the PHP grammar to use the latest textmate grammar from https://github.com/atom/language-php. Now when you use a theme like Monokai, you will get the coloring you want. The VS Code default themes do, by design, only colorize declarations, not references.
21064|@be5invis You're right, we intend to show multiple editor groups in the open editors list once you split the editor. But you don't need to do this in order to be able to work with multiple files. You would split the editor to view more than once file at once. If you just keep one editor visible at any time you can still have multiple files open. For example, in this screenshot ![image](https://cloud.githubusercontent.com/assets/1704059/15142642/e58d77e2-169d-11e6-8a6b-f9a86ad9f9a5.png) I have two files open but I'm only viewing one of them since I haven't split the editor. The open editors list shows both the files and I can interact with them there or through the overflow control on the top right. (And note that there are no tabs shown here - this is the no tabs option.)  The reason we have done this is that there is the potential for confusion when managing a file that is open in two editors in the current working files setup. For example, in the screenshot below from the current product, what should happen when I close file app.js in the working files list. Should both editors close or just one of them. And if just one of them, which one?  ![image](https://cloud.githubusercontent.com/assets/1704059/15142830/af953f20-169e-11e6-8bf9-1968cc5f093e.png)  We want to avoid any ambiguity and uncertainty so we have opted to be more explicit about the files that are open in each editor group.  That's also why we renamed working files to open editors as we feel that better reflects the new behaviour.
21065|Incredibly disappointed that this wasn't included in the initial release. Mac users are used to essentially all of their applications working this way. I just lost a lot of work because I incorrectly assumed that Microsoft was making this app Mac-friendly. This is not beta software, this is production software. Users are going to lose data because this is a **standard feature** for Mac document / code editors, Sublime included. There are very few excuses for a modern text editor to lose unsaved user data in the event of an unexpected application termination.
21066|This issue was moved to Microsoft/TypeScript-TmLanguage#165
21067|This issue was moved to Microsoft/TypeScript-TmLanguage#166
21068|ref https://github.com/Microsoft/vscode/issues/906
21069|Moving to TS since it looks like the tsserver doesn't honor the move of files correctly.
21070|This issue was moved to Microsoft/TypeScript#8543
21071|Go To Definition(F12) option need to be enhanced (Even the  Definition one is in another page with in the project))like sublime text?i'm facing this issue from long since i install VS code ?Any help on this?
21072|@vinod-a-ext - please open a new issue describing the problem you are facing with Go To Definition.
21073|"@bpasero I just read issue #101 linked above by @katopz, and I think I understand why you would not favor this change. This maybe a misunderstanding.  >  I find it very confusing that you quit an editor and don't get prompted to save dirty files. You might expect all changes are written to disk when in fact they are not.  No, we don't expect changes changes to be written to files. We expect changes, ie the current editor content, to be saved. Nobody said it was to be saved in the actual file being edited. On top of possibly failing, as you hint at, this might not be what you want (ie you made a change, but this was no good and you actually don't want to keep it)  So the point is save the ""state"" of the editor, in a separate area probably (and please, save that data in a portable way, not in the user folder #329 !).  > In the VS Code team we all run with auto save enabled (File | Auto Save) so we are past these issues it seems :)  You're probably actually behind what others do. Saving on the fly is common feature in many IDE and editors, but basically, it's still missing what this feature request is about. To auto-save, you need to have a file name. There are many situations where we don't want to have to choose a folder, and make up a name, and then have that useless file lying around. Auto Save is fine. I don't use it personally, I rather select what needs to be saved and when, but I hate being prompted for file names, when I don't have to.  Rgds"
21074|@stevencl  Go to Definition Problem in VS Code  https://github.com/Microsoft/vscode/issues/6238
21075|@pocesar thanks for the additional information. I will move this to the TS team since they own the tsserver which power VSCode's TS smartness. I am not sure if planner.ts in this setup is considered part of the project defined by the tsconfig.json.
21076|This issue was moved to Microsoft/TypeScript#8544
21077|@stevencl My opinion is that you can hide the labels in the “open editor”, and simply draw a line to represent different panels. Once a panel is closed, then two lists can be merged naturally.
21078|Yes, that is the issue. I was hoping for the modal to pick up the same scheme. The change in background colour is jarring.
21079|Thanks for the suggestion, we'll definitely explore different visual treatments for this.  Date: Tue, 10 May 2016 04:06:34 -0700 From: notifications@github.com To: vscode@noreply.github.com CC: steven_clarke@hotmail.com; mention@noreply.github.com Subject: Re: [Microsoft/vscode] Proper tabs for open files (#224)  @stevencl My opinion is that you can hide the labels in the “open editor”, and simply draw a line to represent different panels. Once a panel is closed, then two lists can be merged naturally.  — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub
21080|Ahhh I didn't find that one! Apologies. Hopefully it's on the radar :)
21081|Actually this has been discussed. https://github.com/Microsoft/vscode/issues/71  so will close
21082|@weeblr-dev I have removed my comments on https://github.com/Microsoft/vscode/issues/101 because they do not reflect our latest thinkings. Sorry for the confusion. It is a perfectly valid feature request.  I would still close this one as duplicate of https://github.com/Microsoft/vscode/issues/101 though if you are ok with it?
21083|I have deleted my initial comments on this feature request because it was my personal opinion and not the VS Code opinion. We think this is a perfectly valid feature request.
21084|I'm curious, what program did you use to generate the mock ups, like [this one](https://cloud.githubusercontent.com/assets/1704059/15142642/e58d77e2-169d-11e6-8a6b-f9a86ad9f9a5.png)
21085|I'm just getting to use this today.  Thanks @pflannery I love it.
21086|Making the node debug timeout configurable makes sense to me. @weinand opinions?
21087|Please provide a short code snippet for which this behavior can be reproduced. Or even better create a repository on gitHub which we can clone and see this behavior
21088|We used PowerPoint for these mockups. Our intent was to focus on the interaction flow, not the visual design so the tools in PowerPoint work fine for that level of detail. Doing things in PowerPoint also allows us to easily string together a sequence of screens to get a better feel for the flow.  Date: Tue, 10 May 2016 05:03:55 -0700 From: notifications@github.com To: vscode@noreply.github.com CC: steven_clarke@hotmail.com; mention@noreply.github.com Subject: Re: [Microsoft/vscode] Proper tabs for open files (#224)  I'm curious, what program did you use to generate the mock ups, like this one  — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub
21089|@Sampo123 Is this a typo `node-modules` since it should be `node_modules`?
21090|"A few languages define a rule like so: `""editorTextFocus && suggestWidgetVisible && editorLangId == 'typescript' && suggestionSupportsAcceptOnKey""` which means certain character accept completions _and_ insert the character. It's by design but I understand that it's not desirable for everyone"
21091|"I've added optimization code that makes sure in certain places we use integers. I use a JS trick for that where `x | 0` is truncated to a int32. The problem is that `10000000000000000000 | 0 = -1981284352` and then it gets clamped to the minimum of `1`. One billion (`1000000000`) should be more than sufficient for your use-case, as that means if you have a 1GB line in a file it will be rendered on one line."
21092|"For unknown reason, Code reuses parent console to dump debug information, which has no sense for general users.  To avoid that behavior, Code installer adds `bin` with `code.cmd` to `%PATH%` instead of folder with `code.exe`.  So, when you run `code`, the `code.cmd` is executed actually, which blocks automatic attach of code into ConEmu tab, because this cmd executes  ``` call ""%~dp0..\Code.exe"" ""%~dp0..\resources\\app\\out\\cli.js"" %* ```  The reason? I have absolutely no idea. Why this workaround was chosen instead of implementing sort of `--dump_debug_to_console` switch for those cases when it's really required?  ## Solution  [Create alias](https://conemu.github.io/en/SettingsEnvironment.html) to run code in tab  ``` alias codetab=""C:\Program Files (x86)\Microsoft VS Code\Code.exe"" -new_console $* ```  ## More strange things  If you let your `%PATH%` to point to `C:\Program Files (x86)\Microsoft VS Code` (without bin), or register `code.exe` in application paths  ``` [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\App Paths\Code.exe] @=""C:\\Program Files (x86)\\Microsoft VS Code\\Code.exe"" ```  Than, when you start `code` from existing console you'll have a lot of garbage in your console instance."
21093|Awesome thanks!
21094|@bpasero Thanks for figuring it out. Certainly does make sense to use a service to construct the URI rather than prepend the protocol.   **Edit**: How would one integrate the line number syntax (e.g. `#L14`, where 14 is the line number) to the `vscode.Uri.file` call? Including the line link in the `vscode.Uri.file` call results the `#` being encoded which breaks the URI. Perhaps `vscode.Uri.file` could support line number as the second parameter?   Appending `#L14` after the uri works as expected.
21095|@bpasero  How about this? Is this a feature that a contributor can solve or only core team members?
21096|Just came here after seeing April release notes.  Thread open for a long time - but I am +1 for the original design - i.e. no tabs.  Initially it bothered me - but then I grew to appreciate and understand the philosophy behind it... Now when I think of Atom and the tab spam... I shiver.  All that aside - I love the engagement and thoughtful comments and feedback from the developers.
21097|Looking forward to trying this out. One thing I'd love to see is combining of multiple related files into a single tab (similar to [this VS plugin](https://visualstudiogallery.msdn.microsoft.com/EBF6137E-AA2D-4DC9-860A-F04168F11CD7))  This would be really useful for keeping organised in Angular 2 development, where you commonly have related files: - widget.component.css - widget.component.html - widget.component.ts - widget.component.spec.ts
21098|"@mathewmeconry as said from looking at the description of the issue I think things should work. However it looks like the don't. What exactly do you mean by  > I've always to open the src folder to get Intelisense working  Since you can't share out project could you please do the following: - open workspace preferences - add the following setting  ```  ""typescript.tsserver.trace"": ""messages"" ``` - open the output window and switch to the typescript channel - do what causes the problem to appear - attach the trace to this issue"
21099|"@skolmer I see your point. AS a workaround couldn't you define a problemMatcher with a regexp not matching anything. In the problem matcher you then set the watching property to define regular expression that signals when the watching tasks begins and when it ends. An example of such a property for the tsc watching compilation mode is:  ``` json         ""watching"": {             ""activeOnStart"": true,             ""beginsPattern"": ""^\\s*(?:message TS6032:|\\d{1,2}:\\d{1,2}:\\d{1,2} (?:AM|PM) -) File change detected\\. Starting incremental compilation\\.\\.\\."",             ""endsPattern"": ""^\\s*(?:message TS6042:|\\d{1,2}:\\d{1,2}:\\d{1,2} (?:AM|PM) -) Compilation complete\\. Watching for file changes\\.""         } ```"
21100|We now allow to call `vscode.commands.executeCommand('vscode.startDebug', 'MyConfigurationName');`
