13601|"@isidorn Can you reproduce without installed extensions? Hint: ""Notification handler"" string is not in vscode source code."
13602|Same issue :+1:
13603|Fixed in stable channel.
13604|@alexandrudima I can repro it if I do not have any extensions installed
13605|I didn't know this either, but apparently that is achievable with `$&`:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter  (disclaimer: we call JavaScript's string.replace).  I will look into adding support for `$0` too, by transforming it to `$&` behind the scenes.
13606|@chrisdias this is how errors work everywhere in the workbench: an error bubbles up and is displayed as an error notification (and as a side effect it appears in the dev console).   (BTW the error is not about badly formed launch.json but about a file that doesn't exist).  @bpasero could you please comment on this.
13607|I think we are good for GA atm.
13608|F1 > Indent using spaces > 4 F1 > Indent using spaces > 4
13609|Ok, for untitled files we need to ask the user which filename to pick.
13610|@bpasero Why do I think I do this, I think I do the proper thing [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/common/outputEditorInput.ts#L120) I do not do any scheduling for the initial `setOutput`
13611|As designed, we print to the console for reasons that we as developers know whats going on.
13612|Why don't i get the prompt to read More Information and the suggestion to use ${workspaceRoot}?
13613|I disagree, folks won't know to exclude things like `temp` folders which become giant because of a transient build step. node_modules et al are the obvious but we have been hurt more than once with those unusual folders
13614|"> Rename ""Configure excludes..."" action to ""Configure Excludes""   I put the `...` because it opens a new UI element which I believe is the rule?  > In this particular case the suggestion is not very precise, why are we tryign to be smart here, the user should decide what to exclude himself imho  see above  > The title of the project seems to be wrong - why not use the same we show in the explorer header, in this case 'vscode'  Agree, it's the filename of the configuration but the action already takes you there..."
13615|Reopening, I thought this was about the fact that something gets logged to the console.
13616|"HI  @bpasero   > Ok, for untitled files we need to ask the user which filename to pick.  No, that's the point. Don't ask anything. Make up a temp file name, store and reopen when vscode is started next time.  See my OP:  > instead of the usual ""Do you want to save/not save/cancel"" (as vsCode does), all those unsaved and unnamed files are simply saved to a temp location by the app, and restored in the same state upon next start.  Cheers"
13617|> I put the ... because it opens a new UI element which I believe is the rule?  Not sure where else in UI we use this rule? AFAIK we do not follow it in debug and task world @stevencl opinions?
13618|@weeblr why do you assume this feature works if the feature request is still open?
13619|@isidorn The steps don't do it for me, also the message appears nowhere in our sources. Please attach the debugger to the extension host and break on error such that we have a chance to understand this
13620|![screen shot 2016-03-15 at 17 11 59](https://cloud.githubusercontent.com/assets/1794099/13784838/0e32293e-ead1-11e5-9876-567f3f0d9d40.png)  Like here for instance. Unsure if it's applies to message-actions?
13621|Would be solved with https://github.com/Microsoft/vscode/issues/4159
13622|Yeah i was thinking more of action labels
13623|@bpasero Sorry, I'm confused. From your previous comment, I understood you wanted to implement that feature by prompting the user for a name, in case the file didn't have one already. So I replied that that's not how it should be implemented, per my request. Isn't it what you suggested?  Rgds
13624|"fyi @isidorn I think the problem shown in the last gif is the previous status bar implementation that would always update editor options when changing active editors (that we shipped in Feb).  @rebornix We also noticed some of these issues and reworked how this works under the hood. The indentation settings used to live on the editor and now they moved to live on the model (the buffer). We also added a new setting `editor.detectIndentation` that will scan the file contents for detecting what indentation should be used.  One thing I didn't understand from your description is  > ""Even though the default setting is 4, the output of Tab on my VS Code is always 8."""
13625|Dupe: #55
13626|Closing in favor of #4265 with detailed steps on how to reproduce.
13627|You're not doing anything wrong, it is simply not implemented yet. Dup of #313
13628|@weeblr sorry I confused you with @pascon
13629|@bpasero ok, no problem, understand now.
13630|@isidorn It is perfectly fine to use the cursor position and there is no need to fetch current word around lines:  ``` const position = this.editor.getPosition(); const word = this.editor.getModel().getWordAtPosition(position); if (word) {     const range = new Range(position.lineNumber, position.column, position.lineNumber, word.endColumn);     ... } ```
13631|@alexandrudima thanks for the tip!
13632|@stevencl @bgashler1   The request is to show error messages in the status bar on cursor move. I have mixed feelings about that, can you please chime in.
13633|@joaomoreno assigning this one to you as well, if you get too much of react just unassign one of the test tours and I wil reassign it to somebody else
13634|In: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/cli.ts#L39
13635|Could this not be done as extension? Sounds doable.
13636|(but maybe API is missing to get the error messages at cursor location)
13637|@jsloyer adding a new npm module to vs code you will need to add it to our npm-shrinkwrap.json file too.
13638|@alexandrudima the intellisense window is still clipped for me though?  ![image](https://cloud.githubusercontent.com/assets/900690/13785585/66cc4d42-ead4-11e5-946e-5710271ae14b.png)
13639|@bpasero or @aeschli  I added xregexp to the npm-shrinkwrap file and still have the issue.  Can we please reopen this?
13640|@isidorn I have finished testing but there is still an outstanding issue #4120. From your question i'm assuming I should still mark testing as complete even with an outstanding issue.
13641|+1
13642|@joaomoreno on my machine the OS was not German, on a German windows machine the date formatted properly. However, it would not work when the user uses the --locale argument or the local setting support.  So the plan is that @dbaeumer provides an API to find the current locale.
13643|@waderyan yes, once we are done testing we check off the test item. The issues track the state of that, not this test plan item
13644|"@daviwil I just looked into this and the edits I get in the editor:  The file contents are (the `|` denotes the cursor):  ``` $obj = New-Object ""system.col|"" ```  And the generated edit from accepting the suggestion is replace `""system.col""` with `""System.Collections""`  This makes it that the cursor is inside the replaced range, in which case it stays put.  If the generated edit from accepting the suggestion would be replace `system.col` with `System.Collections` <-- notice that double quotes are left untouched then the cursor is at the end of the replaced range, in which case it goes to the end of the new inserted text.  Here is the current behaviour: ![collections-current](https://cloud.githubusercontent.com/assets/5047891/13786463/f4b81e6c-ead7-11e5-8926-ce868ef81d45.gif)  And here would be the behaviour if the suggestions would not contain the leading and trailing double quotes: ![collections-patched](https://cloud.githubusercontent.com/assets/5047891/13786479/0386416c-ead8-11e5-9c52-ff2df8217489.gif)"
13645|Well, there were two bugs in one here.  I did not change the clipping nor have any plans to fix it :).  Please use larger editor for productive work.
13646|@dbaeumer Maybe you use such strings in the language protocol?
13647|No, but on a network drive through Linux smb
13648|@jrieken when I attach debugger to the extension host I can not seem to get it to break on this error. I can easily repro so just drop by my table if you are interested in looking into this.
13649|Thanks for looking into this, Alex!  Even if we removed the quotation marks aroung the completion text, the problem still remains that the cursor is not being placed after the quoted string.  Here is the behavior in the PowerShell ISE:  ![intellisense](https://cloud.githubusercontent.com/assets/79405/13787033/73a18dda-ea97-11e5-9207-a628c6d7d1ee.gif)  Since we're replacing a whole substring, is there any way we can have the caret be placed just after the completed substring?  Could we possibly add some way to configure the cursor position after the completion?
13650|"@bpasero I hope the plan will include - all theme's to get the same extensibility as what the high contrast theme has now. - able to use css to create theme's (in this PR) - extensible folder and file icon themes (in this PR) - resource colouring  (data attributes added in this PR make it possible) - allow users to override theme style's using a preference file in .vscode i.e. contained in `./.vscode/theme.css (json|tm|etc..)`  Would be a shame to be stuck with editor themes via abstracted config json\xml files"
13651|"@chrisdias because your program ""/bin/www"" is a perfectly fine absolute path. So there is no need to prepend it with ${workspaceRoot}, hence there is no ""More Information"". The problem is the file does not exist!"
13652|Updated git and worked as expected
13653|"+1  I work on many different file types during development so I often like to create a tab group on the right-hand side for one type of file and another tab group on the left for other types of files. For instance, when working on protractor/webdriverjs code, I like to keep all of the ""Page Objects"" on the right and all of the ""specs"" on the left, grouped separately and logically. Similarly when working on front-end stuff, I'll keep a tab group on the right for all of the js/ts files and another on the left for html and css.   These are just two examples, but I do this ALL the time on almost every project to some extent and this strategy has served me well for many years of development and I find it extremely helpful.   While Code certainly allows me to have multiple panes, the global file list approach makes it more difficult to differentiate between the file types and thus I find myself wasting a lot of time scrolling thru the list for the file I wanted to view. Additionally, when I (instinctively) try to close just one file on the right pane the entire pane disappears which is extremely frustrating, especially after using regular VS for over 16 years which has trained me to expect the pane to remain open with the rest of the files visible.   The lack of tab groups in Code is extremely disappointing and I don't think people should be forced or convinced to work in a certain way because ""it's better"" or ""there is no good reason for tabs"" in your opinion. Yes there is. Maybe you just don't use them in the best way or don't feel they are useful, but there are tons of us who do and would really appreciate something as basic as tab groups.   My understanding is that Code is based on Atom which already has tab group support. It would seem that it would of taken a lot of extra work to remove this functionality, which just doesn't make a whole lot of sense to me. At the very least allow the user to pick which experience they want so they can use Code in the way works best for them.   Please bring tab groups back to VS Code."
13654|@isidorn For now we don't deal with multithreading, not sure if it's something we'll have to support.  Thanks for the notification!  cc @rkeithhill
13655|@isidorn could you please stop the debug adapter in this case?
13656|"Looking thru the default bindings, I noticed this binding at the very bottom of the file:  ``` { ""key"": ""."", ""command"": ""^acceptSelectedSuggestion"", ""when"": ""editorTextFocus && suggestWidgetVisible && editorLangId == 'typescript' && suggestionSupportsAcceptOnKey"" } ```  Pressing `.` does not autocomplete in TypeScript either."
13657|thank you, Switching to 'amd' for module fixed the 'cannot find module...' problem on our Fayde project as well.
13658|@joaomoreno  about 2 weeks ago you filed an issue about an error from a watch task is not bein respected and that debug gets run anyways. We need to verify that scenario again. I tried to dig up that bug, but could not. Can you give me a pointer to that bug if you can find it on github please
13659|Oddly I can't seem to repro it now with search.exclude containing the lib folder. I see the lib folder in left nav, but ctrl-p is not resolving to files from within it. I swear this wasn't working, but maybe it was patched in the recent update. I will close for now and reopen if I can pinpoint the repro.
13660|@isidorn Sure you don't have PowerShell tools installed? https://github.com/PowerShell/PowerShellEditorServices/blob/9fa1feaf16d13075c02b420789bbebe9b75c122b/src/PowerShellEditorServices.Protocol/LanguageServer/TextDocument.cs#L59
13661|harding @alexandrudima assumption about the language protocol (https://github.com/Microsoft/vscode-languageserver-protocol/blob/46dd8c99166b3cbee69a54e6043b99be221d793c/README.md#L654)
13662|"@GlenPerkins I agree, the current theme story only really covers token colors and a bit of the generic editor concepts (selection color, etc.).  We have to revisit this and figure out how we can make it possible for someone to change all of the built-in styles in a ""sane"" way.  In the meantime, I pushed a simple change that makes the bracket matching more visible in the dark theme."
13663|@alexandrudima do we need to tell the loader this is a node.js module?
13664|Got it, do you already have a bug for the clipping?
13665|@chrisdias fyi on the last comment for planning
13666|ok, now i see.  thx.
13667|@jrieken I do not have powershell installed
13668|maybe _tslint_?
13669|@isidorn This is all I could find #2370
13670|OK. Let's maybe add a warning on Windows to update the git to 2.0.
13671|I do not have any extensions installed :) I only use open in github but I uninstalled it to try to repro this issue, and I could repro
13672|What is this still doing in the backlog? There are more important features? [:  I'm currently using another editor just for the cases when I have to do a mass find-replace for refactoring.  +1
13673|in addition: 1) argument destructuring 2) different jsx highlight in function declarations and arrow functions 3) all grey except statements inside jsx expressions vscode@master 20160315, typescript@next 20160315 ![highlight](https://cloud.githubusercontent.com/assets/1247759/13791969/a50833e2-eb00-11e5-9949-57f39c0028a2.png)
13674|Nice job. Question is; should this be merged or handled by an extension? E.g. [Sort lines](https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines)
13675|@bpasero i'll keep an eye on improving the scalability in chokidar to fit into the release. Let me know if you have a specific test repo (with large folders?) to check the performance.
13676|Some good ones are TypeScript (https://github.com/Microsoft/TypeScript) and of course the full Chromium workspace is probably the largest I know: https://chromium.googlesource.com/chromium/src.git
13677|No repro on Ubuntu 14.4
13678|"On Ubuntu 14.4, the button shows ""Download for Linux x64"" with link to ""32bit version"" below."
13679|Just checked TypeScript, it consumes around 80% of one core for ~2 seconds and then it's back to 0%.  Cloning Chromium.
13680|+1 For notification that update is available.
13681|Although when `useFsEvents` is `false` (non-default option on OSX), the CPU usage becomes terrible.  I'll investigate the new PR in chokidar too.
13682|We did implement update notifications this release, will come with the next version.
13683|I know Sublime Text has this functionality built in and that it's often a requested feature for IDEs. I don't see a downside of including it without having to download a third party extension, given that it's an operation on code lines with essentially no logic (I'm on the OneDrive team and would love to alphabetize our dependencies. :yum:).  Really I was just trying to contribute where I could to a product I love using. Would love to see it merged!
13684|I verified with dnf.
13685|"Thanks for everyone's feedback!  It really helped us understand the underlying concerns.  We will be addressing this issue most likely in our April release by introducing our own flavor of `draw_indent_guides`, which will remove the confusion about where an indent is, no matter what tab space size you use.  Since we won't have time to get it in by March, a workaround is to use @anseki's suggestion of having `""editor.rulers"": [0]`.  This will give you a left-hand reference. If you need more granularity, it may be helpful to also use `""editor.renderWhitespace"": true`."
13686|@joaomoreno I've added a terminal configuration extension point for windows and linux which allows them to override the default shell launch by vscode.  I wasn't sure what to do for osx as it has script files, so I havent added anything for osx.
13687|@aeschli Ah yes, it is most likely an issue with the PHP Code Format extension. I'll open it there.
13688|Moved to [https://github.com/kasik96/VSCode-PHP-Format/issues/27](url)
13689|As far as I could tell, nothing is really being leaked. We do keep holding on to memory after the Intellisense widget is closed, but everything gets released as soon as it opens again. You can verify this by running a **Record Heap Allocations** instead of multiple **Heap Snapshots**.  ![screen shot 2016-03-15 at 22 58 13](https://cloud.githubusercontent.com/assets/22350/13795536/b58fcdf0-eb01-11e5-9ed2-7aafc45a139d.png)  [Heap-20160315T230025.heaptimeline.zip](https://github.com/Microsoft/vscode/files/174896/Heap-20160315T230025.heaptimeline.zip)  Rendering the entire JavaScript suggestion list allocates roughly around `700KB`. Which gets release upon the next Intellisense trigger. Although a great catch, given the findings, I think this hardly qualifies as a fix for March.  There is indeed a fix (releasing the memory as soon as the widget hides) but that would take a larger refactoring that what we should do in March, which I already wanted to do after this release. Moving this to April.  @jrieken Please check whether my findings are correct and sound.
13690|I don't think this is a good memory leak test setup. The snippet will endlessly emit output, which gets rendered in a tree. Obviously, the memory will grow.  A better test is to run an application that always emits lots of output, and run it many times:  ``` javascript var msg = 'hello leak\n';  for (var i = 0; i < 10; i++) {     msg = msg + msg; }  console.log(msg); ```  Testing it this way, just like #4114, you'll find that there is no _big_ leak here.  [Heap-20160315T231100.heaptimeline 2.zip](https://github.com/Microsoft/vscode/files/174928/Heap-20160315T231100.heaptimeline.2.zip)  ![screen shot 2016-03-15 at 23 26 20](https://cloud.githubusercontent.com/assets/22350/13796207/b94614aa-eb05-11e5-8aa0-84d055e0a7da.png)  There are a few leaks but they are nothing really worrying. In this 1000-line repeated `hello leak` test, after repeating it 6 times, we got 129KB of leaked memory. It's a leak, but definitely not big.  But if you follow the rabbit hole, you'll eventually get there: [every time a new debug session is created, a bunch of new disposables are added to the `toDispose` list of the `DebugService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L227). This list is only disposed when the service is disposed, so everything those disposables hang on to are leaking, namely instances of `RawDebugSession` which I believe are the essence of the whole leak.  @jrieken please make sure my logic is sound here.  Moving this to @isidorn.
13691|@stylemistake I couldn't launch the terminal on Fedora 23 too so I've now added custom configuration settings for linux in PR #3495.
13692|"I went with the popular [hackathon starter kit](https://github.com/sahat/hackathon-starter). Some things I saw that may or may not be bugs.   **Linting**  I installed [eslint extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint).  - `no-undef` is not fun. It shows up for all built in functions and variables (ex. `require`, `__dirname`, etc.).   ![image](https://cloud.githubusercontent.com/assets/2449568/13796350/70ae249a-eac3-11e5-944c-af9b6bd63483.png)  Fixed it with this code in my eslintrc.  ``` js ""env"": {         ""node"": true     } ```  That wasn't tough to do but wasn't intuitive. I'm wondering if there is something we could do to help the user know what to do here. Maybe a :bulb: prompt action.   **Intellisense**  I followed the instructions in this [doc](http://code.visualstudio.com/docs/runtimes/nodejs) and can't get intellisense to work. These are the steps I took.  1. `npm install -g typings` 2. `typings install express node --ambient` 3. Confirmed that the typing files were added 4. Created a `jsconfig.json` file and added the contents as instructed [here](http://code.visualstudio.com/docs/runtimes/nodejs#_adding-a-jsconfigjson-configuration-file).  5. <kbd>ctrl+space</kbd> after a variable or object, expecting to see intellisense.   ![image](https://cloud.githubusercontent.com/assets/2449568/13796917/d8602e96-eac6-11e5-82f7-ac69881592b1.png)  I couldn't get it to work. Filed this as a bug #4284.  **Debugging**  Worked great. One UX thought I had is it might be good to prompt users to click the wrench.   ![image](https://cloud.githubusercontent.com/assets/2449568/13796952/1f5278fe-eac7-11e5-87ba-8aadec5aa25e.png)  I know that I should click there, but I can see a user having a hard time knowing how to configure.   **Find and Install Useful Extensions**  Installed eslint, vscode-npm-source, and node-modules-resolve."
13693|Any chance you could point me at a PR?
13694|+1 to that!
13695|"""Create a jsconfig.json to enable richer IntelliSense and code navigation across the entire workspace."""
13696|@ivansieder why would not you start by creating a user setting file and then automatically copying that in to the user home directory. This should get you most of what you want. We don't have currently any plans to add the ability to read settings from the registry.
13697|Yes, close as dup
13698|"I am not getting prompted on OSX. Node version v4.3.1  Create a workspace using `ember new bigApp` Open `app/app.js` accept prompt to create `jsconfig.json` edit `jsconfig.json` to remove folders from `exclude` section reload window  result -> not prompted to add `exclude` information.  I see this in the console:     ``` //Applications/Visual Studio Code - Alpha.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:91 [Extension Host] Error: Service died.     at /Applications/Visual Studio Code - Alpha.app/Contents/Resources/app/extensions/typescript/out/typescriptServiceClient.js:187:46     at Array.forEach (native)     at TypeScriptServiceClient.serviceExited (/Applications/Visual Studio Code - Alpha.app/Contents/Resources/app/extensions/typescript/out/typescriptServiceClient.js:186:37)     at ChildProcess.<anonymous> (/Applications/Visual Studio Code - Alpha.app/Contents/Resources/app/extensions/typescript/out/typescriptServiceClient.js:137:31)     at emitTwo (events.js:92:20)     at ChildProcess.emit (events.js:172:7)     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12) ```  here is my `jsconfig.json`:  ``` json {     ""compilerOptions"": {         ""module"": ""commonjs""     },     ""exclude"": [      ] } ```"
13699|Hi @pantulis   Not sure if we're experiencing the same thing as my other PC at work is hibernated when I experience this at home.
13700|please see my comments in #4254, i am not prompted on OSX either.
