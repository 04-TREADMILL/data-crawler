25301|@bpasero is it possible to test <kbd>ctrl</kbd>+<kbd>r</kbd> in the terminal without it reloading? Do I just need to comment that out in my local workspace?
25302|@bpasero yes, this would be contained within the specific panel. Not to be confused with https://github.com/Microsoft/vscode/issues/7161
25303|Yeah if you comment out that line, Ctrl+R should not do anything.
25304|@rebornix does your ruby extension do this?
25305|@bpasero thanks :smiley:
25306|It's not happening anymore, I didn't update insiders or anything.
25307|"I'm proposing the following, all commands start in `workbench.action.terminal.` - I haven't checked for conflicts yet.  | Command | Description | Keybinding | | --- | --- | --- | | `close` | Terminal: Close the current terminal | <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>x</kbd> | | `closeAll` | Terminal: Close all terminals | - | | `copy` | Terminal: Copy text from the terminal | <kbd>ctrl</kbd>|<kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>c</kbd> | | `focus` | Terminal: Focus the terminal panel,<br>toggling it if not visible | - | | `focusNext` | Terminal: Focus the next terminal | <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>j</kbd> | | `focusPrevious` | Terminal: Focus the previous terminal | <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>k</kbd> | | `new` | Terminal: Create a new terminal | <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>`</kbd> | | `paste` | Terminal: Paste into the terminal | <kbd>ctrl</kbd>|<kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>v</kbd> | | `toggleTerminal` | Terminal: Toggle visibility the terminal panel | <kbd>ctrl</kbd>+<kbd>`</kbd> |  Notes: - <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> seems to be commonly used for `new`, we use it for reopen closed file. <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>`</kbd> seems like a good fit, just add <kbd>shift</kbd> on top of `toggle` to create a new one. - Notice that all terminal management commands use <kbd>ctrl</kbd> over <kbd>cmd</kbd> on Mac.  Also regarding the external terminal, I think it would be better to just hijack the keybinding from it and leave the command there in case people want it. That is more flexible and feels less messy to me than having a toggle switch in settings."
25308|@Tyriar Yah I thought so initially and in favor of doing that. But I felt users would like to have a separate conf as they are two independent features.  I will also take the team's opinion today and change it as per that.  Thanks.
25309|Actually, I just found out that the debug console supports colors too. It's only the tasks.
25310|@bpasero  After I disabled git in VSCode, I retried 10+ times, restarting VSCode every time, and cannot reproduce the issue.  Once I re-enabled git, the issue come back in one try.  > git --version > git version 2.7.4 (Apple Git-66)
25311|Another issue that's related to this: Add maximize panel command #7314
25312|After updating to 1.2, I've lost PHP highlighting completely ![screenshot_1](https://cloud.githubusercontent.com/assets/10388839/15956394/e929c192-2ef0-11e6-9553-76e2d3d41847.png)
25313|Basically, you can check the permissions of `~/.vscode-insiders` and `~/Library/Application Support/Code - Insiders`.
25314|Does it work from the command line for you? Which command line?
25315|If you go to the command line, what do you get when running `git status`?
25316|@J-Siu If you open the OS X Terminal application, `cd` into the folder that you have open in Code and run `git status`, what do you get?
25317|+1 In my case, not works when using sticky-cluster module, but using ctrl+F5 normally works ..T_T
25318|@joaomoreno I got the following: ![screen shot 2016-06-10 at 03 03 41](https://cloud.githubusercontent.com/assets/3171920/15956679/19703bf8-2eb8-11e6-995d-15b73dfc3a2d.png)
25319|You seem to have run `git init` in your home folder, unfortunately. Can you confirm it by running `git rev-parse --show-toplevel`?
25320|@joaomoreno   > git rev-parse --show-toplevel > /Volumes/HD2/JS
25321|Does `%0A` work?
25322|Great catch!
25323|I find hex much easier to read personally.
25324|Exactly... so do you have a git repository in `/Volumes/HD2/JS` for any special reason? Or it was an accident? Removing that repository (`/Volumes/HD2/JS/.git`) will fix the issue for you.  @Microsoft/vscode: We need to think about what to do in these scenarios though. Should the git integration try to detect cases like these and just throw its hands in the air, with an optional opt-in?
25325|@joaomoreno https://github.com/Microsoft/vscode/issues/new?body=:0%0Ao.0
25326|Just updated and tested, here's the output:  ``` - VSCode Version: 1.3.0-dev - OS Version: Darwin x64  Steps to Reproduce:  1. 2. ```
25327|@joaomoreno  I believe I init the git in my home directory when I was going through git tutorial long time ago. Will remove it as I really don't need it.  However, is it logical for VSCode to recursively scan the starting dir or home directory for git repeatedly? Because that is not even the folder I open in VSCode. Though it is a few level within it.  My home directory: /Volumes/HD2/JS Folder I opened in VSCode: /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs
25328|I'll merge and update the stable/insiders report URLs
25329|@CannibalVox maybe try <kbd>Cmd Alt I</kbd>... maybe that'll open the dev tools?
25330|Running as an Administrator might've caused the issue. Can you try deleting the `.vscode\extensions` directory once again and running without Administrator privileges?
25331|Just came here to create an issue about this annoyance. Launch checkbox should be available only at the end of the wizard.   Can anyone contribute to development of the install wizard? Or is the installer off limits?
25332|Got it! Thanks for the **very** detailed explanation. Apologies for not believing in you at first.
25333|It's, unfortunately, off limits.  I'll take another look at it, then, if it bothers more than one person.
25334|Imagine that you work in a team that has a git repository containing several projects inside. You'd clone it to `/home/bigrepo`. You'd then open project `A` which lives in `/home/bigrepo/A`. Wouldn't you like Code to still give you git features from the `/home/bigrepo` repository, despite being focused in the `/home/bigrepo/A` directory? That's what #57 was all about.
25335|@joaomoreno I want to get off Windows whenever I see it https://github.com/Microsoft/vscode/issues/2795 😉
25336|I think cmd+shift+g is used for find/replace to make it consistent with other mac software.
25337|@joaomoreno You have a point. However did VSCode git handling behavior change in 1.2.0? Because I definitely didn't notice the slowness before the update.
25338|I usually run `node ./build/monaco/api` only before releasing a new `monaco-editor-core` version, so it might be flaky when running on master
25339|OK so after playing around a bit, it seems like @alexandrudima is right. The while loop is never entered. Additionally, the jsonBuffer keeps growing so there seems to be a memory leak as well.  One more thing - the locations in the JSON are not the folder I have opened in Visual Studio Code (which is a subfolder of the `workspace` folder you see in the JSON) - but outside it. It seems to be indexing folders outside the workspace folder?  ![screen shot 2016-06-10 at 09 32 20](https://cloud.githubusercontent.com/assets/58567/15957313/91416964-2eee-11e6-97fb-feb1aaf6d221.png)  Let me know any other debugging output that may be helpful.
25340|Updated original steps.
25341|@J-Siu can you really verify it does not happen in 1.1.x by trying this 1.1.x build for Mac: https://az764295.vo.msecnd.net/stable/def9e32467ad6e4f48787d38caf190acbfee5880/VSCode-darwin-stable-unsigned.zip
25342|@epaga are you sure this is not reproducing in our 1.1.x release? Can you try with https://az764295.vo.msecnd.net/stable/def9e32467ad6e4f48787d38caf190acbfee5880/VSCode-darwin-stable-unsigned.zip
25343|We dispose the editor when you close it and this means we get rid of the undo stack. This needs support from the editor to store the undo stack with the editor and resource (maybe similar to storing the view state)?  @alexandrudima moving to you.
25344|@joaomoreno OK, Thanks!  I can run vscode.
25345|@bpasero Huh, interesting, the same problem occurs with that download as well. All I know is I was working productively in that same folder for at least a couple of weeks with 1.1.??? and things were fine. It was only after the update to 1.2 (last Monday I think) that I noticed the high CPU. I am positive it wasn't happening before because the system literally becomes unusable after 10 minutes.
25346|@bpasero Tried your 1.1.1 and it did not show the issue.
25347|@JamesHenry In vscode we can used:  <kbd>cmd</kbd>  + <kbd>i</kbd> and  <kbd>option</kbd> + <kbd>shift</kbd> + <kbd>i</kbd>  But I'm very much like the shortcut key to Sublime Text.
25348|"@calam1 do you happen to have a "".git"" folder in your home directory?"
25349|@cfjedimaster is this happening when you open any folder? do you happen to open folders below your home directory maybe?
25350|@basarat I'm thinking you're running `gulp compile-build` with `SET VSCODE_BUILD_DECLARATION_FILES=1`.
25351|@bpasero - The freezing problems just started again. I am using Smartgit on Windows 10, which includes some kind of git for windows.   I changed the setting as you suggested, now it runs fine again, at least for the last half an hour.
25352|Are you sure git is enabled? And do you see any changes in the git view?  ![screen shot 2016-06-10 at 10 53 15](https://cloud.githubusercontent.com/assets/22350/15959156/99923f7a-2ef9-11e6-9de0-846058eb3203.png)
25353|@preexo, what do you get when running `git status` from that same folder?
25354|@preexo can you quickly check if this is reproducible in our previous version (https://az764295.vo.msecnd.net/stable/def9e32467ad6e4f48787d38caf190acbfee5880/VSCode-darwin-stable-unsigned.zip). Make sure to enable git again.
25355|Ah, awesome thanks @yisibl!  Yeah, I have just made it my first ever shortcut override :D
25356|@c4milo this issue is about Intellisense in TypeScript. Please file the issue against https://github.com/microsoft/vscode-go which host the go extension for VS Code.
25357|If you run `git status` from that folder, what do you get? The git repository reports that there are **many** untracked files. Maybe you have run `git init` from some folder that you did not intend to? Or added many new files inside the git repository to which your working folder belongs?
25358|@Tyriar can we at least directly link to the right deb package from the update notification? I think that would speed up my update flow quite a bit because it could just download after click via browser and then when I open it the update happens from the package manager.
25359|https://github.com/colinta/SublimeMoveText  I think <kbd>control</kbd> + <kbd>cmd</kbd> + <kbd>←/→</kbd> is better(Atom 1.8).   <kbd>Alt</kbd> + <kbd>←/→</kbd> is to move the cursor around the word.
25360|0 means that the file has changed (either its content or its name).   The events come from the OS and it looks like all kind of programs on your system (even the Explorer) cause content/name change events although there aren't any. I have to say that I have no idea what cause these events on your system to fire.   Can you think of anything special on your system besides bitlocker (e.g. some kind of backup program)?  If you launch the gulp watch task and use Notepad++ on your workspace will it trigger the watched task as well?
25361|"@joaomoreno - `git status` gives me the expected modified file, I have been working on:  ``` git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit:   (use ""git add <file>..."" to update what will be committed)   (use ""git checkout -- <file>..."" to discard changes in working directory)          modified:   modules/PDFMaker/resources/functions/msa.php  no changes added to commit (use ""git add"" and/or ""git commit -a"") ```  @bpasero - your link looks like the OSX app, I am running windows 10."
25362|By the way, VS Code not support <kbd>cmd</kbd> + <kbd>j</kbd>
25363|@kisstkondoros thanks for the pull request. Although I like the features provided they don't fit architecturally how VS Code integrated with TypeScript. All TS smartness in VS Code is running in a separate process (the tsserver) maintained in this git repository (https://github.com/Microsoft/TypeScript).  Your pull request basically creates another compiler instance in the extension host, builds AST and resolves symbols. This doubles the memory consumption and in the worst case makes the extension host unresponsive which might impact other extensions. That is why all language smartness (even linters like eslint, tslint, ...) are run in a language server in its own process.  The best way to integrate quick fix into VS Code is to integrate it into the tsserver directly. VS Code basically consumes the tsserver as a binary. We don't own it and changes to the tsserver can't occur in the VS Code git repository.   Unless I don't miss anything I need to reject the PR and ask you to create a corresponding PR against the https://github.com/Microsoft/TypeScript repository.
25364|@preexo there you go: https://az764295.vo.msecnd.net/stable/def9e32467ad6e4f48787d38caf190acbfee5880/VSCode-win32-stable.zip
25365|According to the trace this is a problem in the tsserver. Moving to the TS team.  @Sampo123 could you still provide the trace so that we can ensure your behaviour is caused by the same root cause
25366|This issue was moved to Microsoft/TypeScript#9072
25367|@bpasero - yes, I can reproduce it. Started the old version, changed the config back. The same thing happens with the version you gave me there.   But it has never happened before. I was using the editor for a while already without trouble and never changed the git.enabled default value.
25368|@dbaeumer  Hi, thanks for the detailed answer!  I thought this might be a temporary solution until https://github.com/Microsoft/TypeScript/issues/6943 is resolved. It is on the roadmap for TS 2.1 https://github.com/Microsoft/TypeScript/wiki/Roadmap#20  I'm a bit sad, but I understand the reasons behind. I'll close the PR.
25369|Adding `git.enabled: false` seems to have fixed this issue for me.  I can confirm also that there is a .git file in my home directory, possibly from an old Sourcetree install that isn't used anymore.
25370|I went back to 1.2.0 and disabled the git again... Just had another freeze. This is completely random. I don't think that this trial and error procedure will get us anywhere. Is there no debug mode and log file that would just tell you what actually goes wrong, where it explodes?
25371|Yes, the `--debug-brk` option is the problem. Currently there is no way to prevent VS Code from using this option, but there are two workarounds: 1. change the argument by adding this statement as the first line to `app.js`:        ```    process.execArgv[0] = process.execArgv[0].replace('-brk', '');    ``` 2. or launch node from a terminal and attach to it with the VS Code debugger.         Run in terminal:        ```    node --debug app.js    ```        Then select the default 'attach' launch config and attach to it.  The 2nd workaround is the preferred way if you actually want to debug any worker and not just the first process that is launched. For the example from above you could add the debug port to the hello world message:  ``` res.end(`hello world ${process.debugPort}\n`); ```  and then you can attach to that port with VS Code.
25372|"OK so this issue is one of the known ones we have around "".git"" in home directory."
25373|@preexo are you restarting when making the git change?
25374|@bpasero right now it's powered by `updateUrl` in product.json, there would need to be a different value for each 3 builds (deb, rpm, tar.xz) but they all share the build assets. Seems like a mess to get into fiddling with that as then the gulp task `vscode-linux-x64` would need to be split into 3 tasks different tasks just for the product.json. Messing with product.json after it's built could cause weird race condition issues otherwise.
25375|By analyzing the blame information on this pull request, we identified @egamma and @Jaykul to be potential reviewers
25376|Hi **@gravejester**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
25377|@kisstkondoros we should not wait until TS 2.1. I would like to encourage you to work on a PR against the TS server. I do the same if I need features in there and I volunteer to get you started if you want. However the final answer if the PR gets accepted depends on the TS team. So why don't you ask in Microsoft/TypeScript#6943 if they would accept a PR?
25378|"I'm running into this on a daily basis with the following setup (deb from the homepage):  ``` kda@toster ~ $ code --version 1.2.0 kda@toster ~ $ code --list-extensions ms-vscode.cpptools kda@toster ~ $ uname -a Linux toster 4.4.0-22-lowlatency #40~14.04.1-Ubuntu SMP PREEMPT Fri May 13 22:47:02 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux kda@toster ~ $ lsb lsblk        lsb_release   kda@toster ~ $ lsb_release -a No LSB modules are available. Distributor ID: LinuxMint Description:    Linux Mint 17.3 Rosa Release:    17.3 Codename:   rosa kda@toster ~ $ apt-cache policy code N: Unable to locate package code kda@toster ~ $ apt-cache policy visual-studio-code  visual-studio-code:   Installed: 1.2.0-1465219835   Candidate: 1.2.0-1465219835   Version table:  *** 1.2.0-1465219835 0         100 /var/lib/dpkg/status ```  A simple scenario to reproduce:  ``` kda@toster ~ $ code # Now close the window kda@toster ~ $ ps -ax | grep code 20588 ?        Ssl    0:01 /usr/share/code/code 20590 ?        S      0:00 /usr/share/code/code --type=zygote --no-sandbox 20666 ?        Sl     0:00 /usr/share/code/code /usr/share/code/resources/app/out/bootstrap --type=SharedProcess 20763 ?        Sl     0:00 /usr/share/code/code ./terminalProcess ```"
25379|@semihalf-kardach-stanislaw the process that hangs around seems to be the shared process though and not the extension host process. If you can confirm that please open a new issue on this!
25380|BTW, in the latest VS Code Insider you can use the new process picker support to select the cluster worker that you want to debug. After starting the cluster app from a terminal:  ``` node app.js ```  run the 'Attach to Process' launch config and select a process:  ![2016-06-10_12-42-43](https://cloud.githubusercontent.com/assets/1898161/15962065/daa6cfe4-2f08-11e6-9185-29d2afde9587.png)
25381|Just tested this and can't reproduce either. It seems like the bug appears randomly after VSCode is running for some time (2-3 days in my case).
25382|@softshape if that happens again please open the chrome developer console to see if something gets logged. You can open it from the help menu. Lets reopen when you have more info.
25383|@jack-pallot given your .git folder in the home directory, have you not noticed many untracked files in the git viewlet when opening a folder with VS Code below that home directory?  We are trying to find out why this issue is suddenly reported with 1.2 when it was actually behaving the same in 1.1.
25384|I am getting the same error at my work environment
25385|@dbaeumer I'll certainly check what can I do in TS core with the topic (after work) :smile:
25386|I'm going to talk with our system egineers if they can think of anything special on our machines that could cause the fireing of file changed events. When l run the gulp watch task, all my project files are listed in the codeHelper output (nr. 0). Then when opening a ts file in Notepad++, gulp starts to tranpile this and probably other files. codeHelper outputs many files, all lines starts with 0.
25387|Thanks - also worked for me - I can now use Atom over XRDP on Debian Jessie 8.5.0
25388|@bpasero Just to be sure. How can I confirm it beyond inspecting the command line?
25389|![flickering](https://cloud.githubusercontent.com/assets/3006809/15963290/ad29f262-2f08-11e6-8c91-57f7fb0faad8.Gif)  I have attached the a gif screen shot, mind you the flickering looks slow only because I am capturing at 40 frames per second, so it happens a lot faster
25390|If I remember right, this project was rather shallow. (And again - I apologize for having so little information. As my first real crash w/ Code, I thought it was important to file it, but it hasn't happened again yet.)
25391|https://cloud.githubusercontent.com/assets/3006809/15963290/ad29f262-2f08-11e6-8c91-57f7fb0faad8.Gif  Here is a screencast of the flickering
25392|None whatsoever. The only untracked files that appear are those that are related to the project I have open.
25393|@semihalf-kardach-stanislaw yeah command line is totally enough to verify!
25394|Firstly we have snippets in my ruby extension so each time you type `def` you will get correctly indented `end`. So it's likely a workaround.  Secondly, I think we have this auto indenting feature but unluckily I found it not working right now. I'll let you guys know when I have more info, then this issue can be treated as external.
25395|Indeed I am. Didn't make the mental connection that it had to be off for the main build 🌹
25396|I just install the new version a few days ago. I just noticed that in one particularly long css file that the color preview just stops after a certain point so that anything after that point does not show the preview but if I move code above that point it works. Really odd.
25397|If I remove my override, it works. Strange...
25398|For performance reasons, there's a maximum of 500 color decorators we render
25399|@elemongw Why did you close it?
25400|@dotchev Unfortunately, @alexandrudima is right, it used to be that... but was taken away for consistency with other OS X applications.  You can always overwrite it in your keybindings file, so I'll close this issue.
