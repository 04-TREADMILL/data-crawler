23701|"@Tyriar Great have another question: { ""key"": ""ctrl+`"",                ""command"": ""workbench.action.terminal.toggleTerminal"" }, this shortcut is invalidation"
23702|@builden what keyboard layout are you using?
23703|@Tyriar like this ![image](https://cloud.githubusercontent.com/assets/9499016/15661922/b4dd285e-271e-11e6-95f3-cb33a58f4dbf.png)
23704|<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>m</kbd> is the shortcut for showing errors and warnings in all files. You can also click the icons with the numbers at the bottom of the screen  ![image](https://cloud.githubusercontent.com/assets/2193314/15661931/153c79c6-26a1-11e6-95c5-510c1e33e27f.png)
23705|Related to https://github.com/Microsoft/vscode/pull/5570; we are consolidating the multiple config directories soon. We might want to reconsider the space in the migration too.
23706|cc @bpasero @joaomoreno
23707|@builden So the key next to 1 doesn't work? Works from the testing I've done on Mac/Windows/Linux using US keyboard layout (which seems to be the same).
23708|@Tyriar i change shortcut string can work fine ![image](https://cloud.githubusercontent.com/assets/9499016/15662168/cf34f180-2720-11e6-9a76-dee5d0d7dac3.png)
23709|@Tyriar I have find the reason, ctrl+` have used by other application
23710|"I could be experiencing the same issue, not sure - when I type ""cls"" into command prompt, sometimes (with a full screen of text) it won't refresh until I hit another key (then it clears the screen and renders that key).  Windows 7, using Cmd and Powershell 2 as terminal"
23711|@Tyriar interesting, though I did not get any bug for this from any other user besides you so maybe the way it works now is actually what all people expect?  Still, you say that often $HOME gets opened even though you did not pick it, I would like to understand when and how that happens.
23712|"@pythondetective and then when you click on the ""Compare"" action, can you see what changes did occur meanwhile that VS Code blames?"
23713|Behaves like this since our initial release actually.
23714|With the move to daily builds in Code (https://code.visualstudio.com/blogs/2016/05/23/evolution-of-insiders), I think this feature is even more important.  If I have to restart my text editor every day, and I'm using it as a scratchpad, I don't want to have to save each and every scratch pad once a day, when it's just temporary note files.  It would be great if we can just restart for an update, and have it exactly where we left off.  Browsers remember last saved tabs, so it would be cool if Code can also remember your open buffers as well =).
23715|"Sometimes, ""Compare"" action takes way too long time to get to compare mode and shows the same file on both side with no changes. Sometimes, ""Compare"" action is quick and show changes in both file."
23716|@bpasero I'll try make some notes during regular use :)
23717|@alexandrudima Can you comment?
23718|well, you do [this](https://github.com/cfjedimaster/htmlescape-vscode/blob/master/src/extension.ts#L87) which is previewing the document as _html_. I wonder, if in your case and as a workaround, you could just `openTextDocument` and `showTextDocument` - then the editor will be used to display the _virtual_ document.
23719|Unsure - I don't like that fact the separator/group must be repeated on each item. Tho I also don't like the idea of a complex data structure. For now, I would opt to keep this simple
23720|does work for me...
23721|Good feedback. The behaviour when multiple provider contribute to a language feature is described in the `registerXYZProvider`-methods. For suggestion it is [this](https://github.com/Microsoft/vscode/blob/joh/paths/src/vs/vscode.d.ts#L3446):   > Multiple providers can be registered for a language. In that case providers are sorted > by their [score](#languages.match) and groups of equal score are sequentially asked for > completion items. The process stops when one or many providers of a group return a > result. A failing provider (rejected promise or exception) will not fail the whole > operation.  This is a little special and different to the commonly used strategy of just merging all results. We made that decision to always have a _reasonable_ small list of completions. I can see how that bites you now and we should revise.   Having  said that, the selector `{ language: 'javascript', scheme: 'file' }` should be equal to the one VS Code uses, therefore be in the same group, and consulted when completions are requested
23722|Translation team was a little late this time and we were eager to push insiders... Will be proper with the stable release
23723|"That's a shame. It's also slightly ""unfair"". In the sense that it means that Microsoft can write language modes that can do things that other people can't....  There would be zero chance of a pull request to the core of vscode being accepted for a new language mode, so we are left being unable to write a sensible language mode for vscode. We have no problem in Eclipse, there's no problem in writing similar things there, they have no issue with things running in the render thread.  At least in Monarch there was a ""pop state"" facility, which as far as I know has no equivalent in TextMate. In Monarch you could shift states to an explicit state, and then ""pop"". So you could write ""subroutines"". The facility made it least _possible_ to write our language mode in Monarch, even if it was _much_ harder work than doing it the low level way, which is what we ended up doing."
23724|Is there any progress on this issue, or at least some statement if this will ever be implemented? Are there some low-level decisions in the code that prevent multiple roots in one project?  This is pretty much the only reason I'm not moving from ST3 to VSCode.
23725|@pythondetective how do you notice that the save takes long?
23726|The way it works currently with string array as pick items is easy and would probably not allow for more complex things like groups and separators. For sure I would not just copy the internal API we have and make it public.
23727|The delay works for me.
23728|@jrieken   > the first definition is the nearest wrt to position and file path  isn't true is my usercase.  ![peek_definition](https://cloud.githubusercontent.com/assets/1297882/15666555/a3c855c8-2711-11e6-8a3a-6330f8ac13c4.gif)  As you can see, I have three definitions of a function. Two of them are in the `out/` directory and one is in `src/`. I'm editing a file in the `src/` directory so I would expect to get a match in that folder. Not by alphabetical sort order.  It seems to work when we're talking about the same source file. Then the peek definition defaults on the same file.
23729|Yes, when the value is `>0`, the number of visible items doesn't seem to match it at all.  Also, the setting's name is awkward, but I guess we're past the point where we can fix that. The documentation for it, though, could be much improved:  > Maximum number of open editors to show before scrollbars appear. If set to 0 open editors section gets hidden - only applied after VSCode restart.  How about:  > Maximum number of editors shown in the Open Editors pane. Set it to 0 to hide the pane.  Requiring a restart is incredibly bad UX, please just implement swapping out the contents of the viewlet with the split pane, and vice-versa, whenever the value toggles between `0` and non `0`.
23730|We can change the setting name - feedback is welcome. This is not public yet - why do you think we can no longer change that?  Will look into not requring a restart.
23731|I thought the setting was there already before this feature.
23732|It was called `explorer.workingFIles.maxVisible` we are changing it to `explorer.openEditor.maxVisible`, so if we want to change the name completley now is the time. So let me know your ideas.
23733|`explorer.openEditor.visible`
23734|`explorer.openEditors.visible` works for me. @bpasero let me know if you have some objections
23735|And message:  > Number of editors shown in the Open Editors pane. Set it to 0 to hide the pane.
23736|Yes there is a 250ms timeout which we introduced due to #6749
23737|Totally agree. We need an owner for this story that just implements it right for all platforms. Not only implements the change but migration as well. - Windows: `%APPDATA%` - Linux: `.vscode` - OSX: `~/Library/Application\ Support`
23738|Yep, that has to go.
23739|No, you could still have untitled files.
23740|By dot in front of file name in the title bar. I can see that pressing Ctrl+S does not remove dot especially before automatic Compare action trigger.
23741|I am fine experimenting with this however I do not like the visual looks of your sketch - just personal preference. I think it is also up to the ux team to decide on this since they designed the inital open editors experience.  For me the biggest flaw of the current design is that the tree grows considerebly when you go from 0 to 2 groups. I am not convinced if this is big enough of a flaw to go with a different design
23742|Not yet.  Duplicate of #2882
23743|I also prefer our current design because you can interact with groups a lot more (potentially reorder groups, context menu on groups etc).
23744|Didn't we agree that we want to avoid having 2 settings for the same thing? I think less settings are good, why introduce another one that you can do with maxVisible = 0?  +1 to do the UI update without restart.
23745|No, Joao does not want an aditional setting but just to change wording of `maxVisible` to `visible`
23746|@isidorn this goes into a similar direction of not doing a full tree refresh when there is just the active group changing I believe. In the end, selection should update as fast as for the explorer.
23747|Ah ok I like that üëç
23748|Globs are currently not support in tsconfig. But as @wardbell already mentioned it is being worked on https://github.com/Microsoft/TypeScript/issues/1927 https://github.com/Microsoft/TypeScript/pull/8841  Having one top level tsconfig.json which excludes node_modules and is being merged with an active tsconfig is currently not supported either. The concept of a tsconfig.json is to define a 'project scope'.  If you feel stong about such a feature please open an issue in the TS repository. Something I could think of to support this is having an extend rule like ESLint (http://eslint.org/docs/user-guide/configuring#extending-configuration-files)  @wardbell @Foxandxss is it ok for you to close this issue. IMO any additional work as to be tracked in the TS repository.
23749|@bpasero yeah I think it is time to introduce some smartness on updating the tree. So we could refresh with a delay when new elements added, but updating selection and other minor stuff we could do immediatly - will look into that
23750|I can see many other flaws other than the growing: - The static screen real estate taken up by the group rows is considerable. - The group names are bogus and irrelevant. - The tree-like indent of the whole view is weird, especially with very few files open.  As for the _future_ interactions: - You can still implement group reordering with an affordance to the left of the group's first editor    ![image](https://cloud.githubusercontent.com/assets/22350/15667686/eb889e94-2717-11e6-8c89-1ffa00b46694.png) - You can have context menu on groups by having a separate group of actions in the context menu of each of the group's editors
23751|I'd instead assume that the delay is going to go away and work upon that. Don't take it for granted. Remember that you only introduced it to fix the double clicking. In my opinion, it was a bad fix, and it needs to happen some other way.
23752|I can't reproduce this using our setup. Here is what I see using version 17.x of cl:  ``` Microsoft (R) C/C++ Optimizing Compiler Version 17.00.60610.1 for x86 Copyright (C) Microsoft Corporation.  All rights reserved. Source.cpp p:\mseng\vscode\playgrounds\bugs\consoleapplication1\warning.h(5) : error C2146: syntax error : missing '}' before identifier 'TestWarning_three' p:\mseng\vscode\playgrounds\bugs\consoleapplication1\warning.h(6) : error C2059: syntax error : '}' p:\mseng\vscode\playgrounds\bugs\consoleapplication1\warning.h(6) : error C2143: syntax error : missing ';' before '}' ```  Setting up the problem matcher for this pattern makes the errors show up correctly.  @Aukstkalnis how does the output of the nmake run look on your system.
23753|@isidorn I would not expect a tree refresh on non-structural changes, this is outlined in https://github.com/Microsoft/vscode/issues/6670
23754|> The group names are bogus and irrelevant.  I think with your design it might be hard for the user to figure out which group some editor belongs to when > 10 editors open  > The tree-like indent of the whole view is weird, especially with very few files open.  It is the same ident we use in the explorer and explorer looks the same with very few files open.  > You can have context menu on groups by having a separate group of actions in the context menu of each of the group's editors  This would potentially work with a group submenu otherwise the context menu would be too large  Not sure if making the first editor in the group more powerful by having more options would be too complex for users. UX team can comment on that better.
23755|"Note that %APPDATA% on Windows seems to be the ""Roaming"" folder, so you potentially end up roaming extensions and settings around."
23756|I like the idea of running a command since it allows for cases like downloading a typings file. But there are lot of cases as well that only need to apply multiple edits. Could we have both, providing an array of edits or an command.
23757|yes - I came to the same conclusion, esp when a command also wants to modify the current text document. Coordinating a command and a text edit would be hairy...
23758|As a user that doesn't use Open Editors and has auto save enabled, I'm not getting used to a different decoration for unpinned files. Often I look up there and I get the strange feeling that my file is somehow unsaved, which is unfounded since files are automatically saved...
23759|Agree on the coordination command and text. That is why I would do exclusive or.
23760|Awesome! `deleteWordStartRight` is what I'm looking for and also what I think should be the default. It's the same behavior as in Sublime Text and Visual Studio if I'm not mistaken?
23761|We should introduce the option to disable preview editors because when you are not having tabs enabled, they are less useful. This is https://github.com/Microsoft/vscode/issues/2754
23762|Ok, now I understand. Thanks. I'l push another change, tho it'll miss the train for May.
23763|Extensions should go with `%LOCALAPPDATA%` but it would be great if we can have an extension list manifest file stored in `%APPDATA%` which roams, then notify users if there is newly added/deleted extension on other machines.
23764|@dbaeumer would this really be scoped to Ctrl+P or any action that opens an editor (e.g. click on the explorer)?
23765|Would it be possible to automate, when I have auto save and tabs and open editors hidden? The number of settings I need to change to get my workflow is starting to grow...
23766|@joaomoreno I don't like to change the behaviour of the UI based on other settings you do. There are people that want no preview tabs but still have tabs enabled. How do you please those?
23767|So many editor can write markdown by snippet. why the VS code do the strange behavior ? And the vs code even supply a markdown snippet file. It  would be useful and common by adding the snippet function
23768|@stereokai Please provide the requested information
23769|@bgashler1 ping
23770|Yes, thank you for your quick responses. We are cooking our solution with your guidelines.
23771|No-op.
23772|I didn't say that was the one exclusive way of disabling it. But if someone has no tabs nor open editors, preview editors don't mean anything, right?
23773|"I am not sure you can say that. Preview editors have nothing to do with tabs or the ""opened editors"" view. It is a state an editor can have in an editor stack. The stack cannot be disabled, so the preview state always applies. Someone might want to benefit from a stack without seeing it (via tabs) but still have the auto-clean up feature that not every editor ends up on the stack.  I see where you are coming from, as much as possible you want the old behaviour back. That is why I think settings are needed."
23774|@JoshSchreuder The problem is that the first part is not valid JavaScript syntax. Inside a class you can't define a var. You need to surround this with a method or constructor. That's why the syntax highlighting gets confused.
23775|This is my project example from https://github.com/Microsoft/vscppsamples/issues/41: [ConsoleApplication1.zip.txt](https://github.com/Microsoft/vscode/files/290783/ConsoleApplication1.zip.txt)  With this example I am able to reproduce this problem.
23776|Cannot type cyrillic as well
23777|**PHPStorm:** the whole line is deleted **Sublime Text 3:** Everything to the left of the cursor is deleted, everything to the right is kept as is **Atom:** Same as sublime
23778|I didn't mean to expose _that_ API, but only use the `separator` attribute idea. Sorry about the misundertandig.   I didn't look at the source to see how that API is related to the _published_ API, so I don't know hard would be to publish a `separator/grouping` attribute and use it as in @bpasero example (whiltespace picker). But since the same idea appears in other pickers too, like _Go to Symbol_, _Open Recent_, it's something that I was expecting to be able to use. Specially because it keeps the UI cleaner.  @jrieken I totally agree about _keep this simple_ :+1:   Thanks
23779|"Thanks @aeschli. I was just messing about trying to get highlighting looking like I want it to, so not surprised I messed up the syntax :smile:   Are there any plans to revise the highlighting to include properties? Or would I have to write a custom highlighter to do something like that?  For instance, here's what my current ST3 theme looks like: ![image](https://cloud.githubusercontent.com/assets/681706/15673312/3c25dd24-2779-11e6-8254-238b73c61ce8.png)  And here's VS Code: ![image](https://cloud.githubusercontent.com/assets/681706/15673308/34995b4e-2779-11e6-95cb-3e19fb886db2.png)  Obviously it's a highly personal thing what a user may like highlighted, but personally I find having additional highlighting as per my ST3 theme to be beneficial   Especially looking at a line like:  ``` js root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$)); ```  Which comes out completely white in VS Code.  Thoughts?"
23780|@aeschli @alexandrudima We just talked about this
23781|@sandy081 will fix this by moving markers in the panel
23782|Are you saying it would take over the default editor pane? If so, that's not what I want.
23783|>  default editor pane  Well, like `previewHtml` it open where editors open but you can define the column in which it shows and also if it should take focus or not: https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3018
23784|Are you on OS X? I think the keybindings are different there then on Windows / Linux.
23785|":+1: This will come very handy especially when developing Electron apps. Currently I'm stuck at changing the ""runtimeExecutable"" path each time when changing OS env."
23786|The feedback we got from participants last week on this indicated that they don't think the group names are bogus and irrelevant nor do they think that the indentation is weird. Participants naturally assumed that they could drag and drop files between groups for example thus suggesting that the representation serves at least three of it's purposes (namely indicating that files belong in groups, that the groups are easily identifiable and that files can be moved between groups).
23787|@swaner we do not have encoding detection so you need to either configure the encoding globally or per workspace or switch it from the status bar picker.
23788|Now that I see the image I pasted I actually think this is a much better icon to use if we keep an icon!
23789|@jrieken Doesn't matter much now with nightly builds on -insiders. I'll get back when I've tried this.
23790|check
23791|I might be able to just do this by storing a temporary setting before applying the update.
23792|Then, let's close it.
23793|You can always run [`openTextDocument`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3301) and copy the text of the returned document.   The `previewHtml` command is producing a piece of UI and, as other UI pieces like the git or explorer viewlet, it not generally desirable to have a select all and copy gesture. Tho, I understand that there are cases in which it makes sense to have the contents selectable and copyable. I believe tho that only the extension can make that decision.   The problem I see is that the `Cmd+C` doesn't travel to the web view container. Reopening to check if this is an issue with us or electron.
23794|@alexandrudima @bpasero It seems like something has changed here and that we now unconditionally eat up <kbd>Cmd+C</kbd>. Ideas?
23795|despite alternative implementations/workarounds to the problem, I believe this is #6924.
23796|You must url encode your password, since it is a URL. Replace the `#` with `%23`.
23797|I never got it. Any console error messages?  Maybe find a reproducible case?
23798|@alexandrudima Can an editor be opened without a model? Seems like that happened here.
23799|Sold!
23800|@rebornix why would we separate them? Is it bad to roam things potentially as big as extensions or something?
