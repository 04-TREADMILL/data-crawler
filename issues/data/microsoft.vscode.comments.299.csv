29801|I can't share the project as-is, but I'll try to find time to duplicate the issue then rename/remove things until the problem disappears as a repro.
29802|There is a setting to turn that off. It is: 'php.validate.enable'. I would love to add a button to not show this again but it would require to have access to the settings in the extension host. @aeschli I know you worked on this. Any status?
29803|Thanks a lot.
29804|I've verified that node.js sends indeed a break event with an 'undefined' exception for the reject(), so the behavior is correct. I will investigate whether VS Code could try to swallow the event and continue.
29805|This issue was moved to Microsoft/vscode-languageserver-node#53
29806|This issue was moved to Microsoft/vscode-languageserver-node#54
29807|Notived that the issue is in the wrong repository.
29808|@alexandrudima Not working in 1.3.0-insider. Perhaps it missed the boat?
29809|"@kisstkondoros I think unfortunately you picked a time for doing this PR where we are in the middle of introducing a new concept for providing context menu actions (see https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/June_2016.md#menu-items-and-context-menu-entries). So, whatever we used to do in the workbench and editor to build the context menu is considered deprecated and old school and we intend to get those things converted to the new model.  As such, for the search viewlet we should also use the new way and I think @sandy081 and @jrieken are teaming up to get this going.   I will assign @sandy081 to be the owner of this PR as such so that he is aware of the code and the desire to have a ""Copy Path"" command. However, I think we should not use the ""old way"" for menus."
29810|@rchiodo is this on stable or insiders build? if stable, mind trying insiders?  We are releasing preview releases of the next stable VS Code version for everyone to try and give feedback. These preview releases are not 100% tested and might be unstable but contain our latest features and bugfixes. You can give our preview releases a try from: http://code.visualstudio.com/Download#insiders
29811|"@gdimauro The problem is in the `.vscode/settings.json`: The reference to the workspace resource must be a relative URL: ""url"": ""./schemas/all-schema.json"". See https://code.visualstudio.com/docs/languages/json#_json-schemas-settings"
29812|I believe this is already fixed, can you see if you can reproduce in the [Insiders build](https://code.visualstudio.com/insiders)?
29813|must be fixed in node.js, see nodejs/node#7219
29814|can no longer reproduce.
29815|@bldesign @andregsilv nice suggestion, forked to #8818 to be considered after this.
29816|Could not reproduce in VS Code 1.3.0 and node 5.11 or 6.2.2
29817|The shortcut is <kbd>ctrl</kbd>+<kbd>`</kbd> (backtick), not <kbd>ctrl</kbd>+<kbd>'</kbd> (apostrophe)
29818|I believe this is already fixed, can you see if you can reproduce in the [Insiders build](https://code.visualstudio.com/insiders)?
29819|I need to move this to August since I will be out on vacation in July.
29820|Moving to August since I will be out on vacation in July.
29821|Weird, so it works fine now?
29822|Nope, I may have been on an old version of node, I'm on 6.2.2 now and it works.
29823|@jrieken can you have a look. This is triggered by the JS project status. Looks like the resolved path is null.
29824|Confirmed done in Electron commit :+1:
29825|@joaomoreno Its slow with a large clean but it is not crashing anymore.
29826|No point half doing this, it can be done later if we want to expose the terminal interfaces to monaco.
29827|**Below is out of date, please see [the top comment](https://github.com/Microsoft/vscode/issues/3884#issue-139391403) for the latest**  So I'm going to move forward with this as:  ``` <root_settings>/settings.json <root_settings>/keybindings.json <root_settings>/snippets/ <root_settings>/extensions/ <root_settings>/userdata/ <root_settings>/rootuserdata/ <root_settings>/workspaceStorage/ ```  Where `<root_settings>` is the parent of the [extension directory]: - Windows*: `%APPDATA%\Microsoft\Visual Studio Code[ - Variant]` - Linux**: `$HOME/.vscode[- variant]` - Mac**: `$HOME/.vscode[- variant]`  \* The folder name used is actually `nameLong` from the `product.json` (eg. `Code - OSS`, `Visual Studio Code`, `Visual Studio Code - Insiders`, etc.)  *\* The folder name used is actually `dataFolderName` from the `product.json` (eg. `.vscode-oss`, `.vscode`, `.vscode-insiders`, etc.)  Related issues: - Windows roaming improvements will be partially done, moving extensions to %LOCALAPPDATA% but not creating an extension manifest of anything, meaning extensions will not carry across different machines on a corporate network. - Automatic selection of the root user data directory (#5561) will be included with the `rootuserdata` directory - I want to clean up the whole `code` vs `vscode` thing in this change.  Here is the complete picture:  ### Windows  **Old**  ``` Settings:                %APPDATA%\Code[ - Variant]\User\settings.json Keybindings:             %APPDATA%\Code[ - Variant]\User\keybindings.json Snippets:                %APPDATA%\Code[ - Variant]\User\snippets\ Workspace storage:       %APPDATA%\Code[ - Variant]\User\workspaceStorage\ Chromium user data:      %APPDATA%\Code[ - Variant]\ Chromium root user data: (manually specified) Extensions:              %USERPROFILE%\.vscode[-variant]\extensions\ ```  **New**  Note that `%APPDATA%` is roaming and `%LOCALAPPDATA%` is local, meaning extensions **_will not**_ be carried across multiple machines until a solution is devised for #7035.  ``` Settings:                %APPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\settings.json Keybindings:             %APPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\keybindings.json Snippets:                %APPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\snippets\ Workspace storage:       %LOCALAPPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\workspaceStorage\ Chromium user data:      %LOCALAPPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\userdata\ Chromium root user data: %LOCALAPPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\rootuserdata\ Extensions:              %LOCALAPPDATA%\Microsoft\[Visual Studio ]Code[ - Variant]\extensions\ ```  ### Linux  **Old**  ``` Settings:                $HOME/.config/Code[ - Variant]/User/settings.json Keybindings:             $HOME/.config/Code[ - Variant]/User/keybindings.json Snippets:                $HOME/.config/Code[ - Variant]/User/snippets/ Workspace storage:       $HOME/.config/Code[ - Variant]/User/workspaceStorage/ Chromium user data:      $HOME/.config/Code[ - Variant]/ Chromium root user data: (manually specified) Extensions:              $HOME/.vscode[-variant]/extensions/ (not moving) ```  **New**  Thanks to @ollie27 and others for calling out the [XDG Base Directory Specification](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html), see that document for fallbacks to the environment variables.  ``` Settings:                $XDG_CONFIG_HOME/[vs]code[-variant]/settings.json Keybindings:             $XDG_CONFIG_HOME/[vs]code[-variant]/keybindings.json Snippets:                $XDG_CONFIG_HOME/[vs]code[-variant]/snippets/ Workspace storage:       $XDG_CACHE_HOME/[vs]code[-variant]/workspaceStorage/ Chromium user data:      $XDG_CACHE_HOME/[vs]code[-variant]/userdata/ Chromium root user data: $XDG_CACHE_HOME/[vs]code[-variant]/rootuserdata/ Extensions*:             $XDG_CACHE_HOME/[vs]code[-variant]/extensions/ ```  \* `$XDG_DATA_HOME` may be a better candidate for extensions, my thinking is putting it in `$XDG_CACHE_HOME` and eventually having an `extensions.json` in `$XDG_CONFIG_HOME` which details a list of extensions to be installed.  ### Mac  **Old**  ``` Settings:                $HOME/Library/Application Support/Code[ - Variant]/User/settings.json Keybindings:             $HOME/Library/Application Support/Code[ - Variant]/User/keybindings.json Snippets:                $HOME/Library/Application Support/Code[ - Variant]/User/snippets/ Workspace storage:       $HOME/Library/Application Support/Code[ - Variant]/User/workspaceStorage/ Chromium user data:      $HOME/Library/Application Support/Code[ - Variant]/ Chromium root user data: (manually specified) Extensions:              $HOME/.vscode[-variant]/extensions/ (not moving) ```  **New**  ``` Settings:                $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/settings.json Keybindings:             $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/keybindings.json Snippets:                $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/snippets/ Workspace storage:       $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/workspaceStorage/ Chromium user data:      $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/userdata/ Chromium root user data: $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/rootuserdata/ Extensions:              $HOME/Library/Application Support/[Visual Studio ]Code[ - Variant]/extensions/ ```
29828|Apparently this is [intended behavior](https://github.com/nodejs/node/pull/6099). Maybe chokadir can figure out a fix? I kind of doubt it though...
29829|@chrmarti, thanks for your PR! By analyzing the annotation information on this pull request, we identified @Tyriar and @kisstkondoros to be potential reviewers
29830|Hi **@chrmarti**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Christof Marti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
29831|"@Tyriar This was probably a typo within the GitHub reply and you may have already noticed this, but within the ""complete picture"" the snippets and extensions paths have been swapped for all platforms:  Snippets: %USERPROFILE%.vscode[-variant]\extensions\ Extensions: %LOCALAPPDATA%.vscode[-variant]\snippets\  Just making sure..."
29832|@QuietusPlus thanks, I posted a little early. I just fixed up a few issues including this one. I also changed the format of the Windows setting directory to match platform standards.
29833|@Zoltu I'd appreciate your feedback on the Windows portion of #3884
29834|the current behaviour should be considered a bug. and next versions should enforce `editor.fontLigatures` value
29835|"I'd appreciate any feedback on the above proposal. The main open questions I have currently are: - Where is the standard place for application config on OS X? Should we use `$HOME/Library/Application Support/Visual Studio Code[ - Variant]/` instead of `$HOME/.vscode[-variant]`? (As per @joaomoreno's comment https://github.com/Microsoft/vscode/issues/7035#issuecomment-222618737, I'm using application support above) - Should we take this opportunity to cull the 'vs' from `.vscode[-variant]` in the open source builds? ie. change:      ``` json   ""dataFolderName"": "".vscode-oss"",   ""win32MutexName"": ""vscodeoss"", // This too?   ```      to       ``` json   ""dataFolderName"": "".code-oss"",   ""win32MutexName"": ""codeoss"",   ``` - Whether everything else sounds good.  /cc @joaomoreno @bpasero @rebornix"
29836|Cannot reproduce with the current insiders build on Windows 8.1/10.
29837|"``` Workspace storage:       %APPDATA%\Microsoft\Visual Studio Code[ - Variant]\workspaceStorage\ Chromium user data:      %APPDATA%\Microsoft\Visual Studio Code[ - Variant]\userdata\ Chromium root user data: %APPDATA%\Microsoft\Visual Studio Code[ - Variant]\rootuserdata\ ```  What is in these folders?  Can they grow unboundedly or are they basically just ""settings"" type things?  If they can grow unboundedly (e.g., a cache folder, a build output directory, plugins folder, etc.) then they should probably go in `%LOCALAPPDATA%`.  I'm curious why the names are different on Linux?  In Linux, is there a convention to not use spaces in folder names?  If so, then I support the difference."
29838|Thanks @Zoltu, I changed user data folders to be `%LOCALAPPDATA%` as they are Chromium's data dirs and contain a bunch of files. My `Cache` directory inside the user data directory is 187mb for example. Workspace storage is just a few small json files. The only problem with this is that local storage will no longer roam, not sure all the implications of this but popups that the user told to not show again will show up again on a new machine.  In Linux for user-specific configurations it's common practice to keep them in a dir with a dot on the front which means they will be hidden by default. All lowercase with hyphens is also standard for files/folders on Linux.
29839|@chrmarti can you check out the related https://github.com/Microsoft/vscode/issues/8617 as well? I thought they probably have the same root cause and t he latter was repro'd on Insiders.
29840|Here is to hoping that the Chromium stuff behaves well when its folders randomly disappear between runs.  :)
29841|+1
29842|"@isidorn, @weinand   > Did you test this both on the folder and no-folder workspace?    I have only tested this with a folder workspace. Didn't know we can have VS Code with a no-folder workspace. How does that work?   > Can you please squash all the commits as the first 4 commits in this PR should be removed?    Will do.  > It would be great if this also worked for tasks.json  > Is it possible that SettingsVariables just extends from SystemVariables - using that approach we would not need both SettingsVariables and SystemVariables in DebugConfigurationManager and we would get this feature for free in the tasks world?  Great idea. However, wouldn't this render SystemVariables obsolete? From what I can see this is only used in two places, running tasks and debug adapters.  Also it could be a little misleading, if we used this new class SettingsVariables where ever SystemVariables was being used, then one would be mistaken into assuming that only Settings (config) variables were being replaced.  I think this all boils down to the fact that this SettingsVariables (having extended SystemVariables) class will be doing two things:  - Replacing System variables (base class functionality) - Replacing Settings (config) variables (overridden method functionality).  If you agree with the above then, how about we proceed with the following approach: - SettingsVaraibles extends SystemVariables (as per the suggestion) - Replace references to SystemVaraibles and SettingsVariables with ISystemVariables - Get ISystemVariables passed in as a constructor argument resolved via DI (resolved using the serviceCollection - no sure what the right terminology is here)  > We should not call this 'setting.' but 'config.' to align with other places where we have this  Agreed, for now I'll continue using the word ""Setting"" and SettingsVariables so there's no confusion."
29843|@jrieken    how about this? https://github.com/Microsoft/vscode/pull/8797/commits/77d061426e7bf981dcbe3c21ff677720f82dd542
29844|@jens1o  At the moment, `install` return a `void` Promise, it's hard to get which extension actually was installed.
29845|"@weinand: But does VSCode support creation/deleteion?  Sending a BreakpointEvent with reason = 'new' doesn't seem to have any effect.  Your [comment](https://github.com/Microsoft/vscode/issues/2013#issuecomment-182291463) from February says ""VS Code now listens on breakpoint events with reason update and updates the verification state and location"".  If I read the [relevant code](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L308), correctly, it indeed only deals with updates of existing breakpoints."
29846|@joaomoreno When install c/c++ ext, This problem still exists。 ![2016-07-07 10-23-18](https://cloud.githubusercontent.com/assets/6904176/16640699/e224e3c6-442c-11e6-9863-37ca4c137431.png)  I think This problem is most likely caused by Xorg and Nodejs
29847|Also, please note that currently the [Breakpoint](https://github.com/Microsoft/vscode-debugadapter-node/blob/661032a4234ef69e01a7751fe5246604da95867c/protocol/src/debugProtocol.ts#L776) does not provide a way to preserve custom information (such as condition, hit count, etc) across debugging sessions.
29848|Here is my two cents: - Font family is more important than font size. Currently we are using `Segoe WPC`, it's good enough but still far from perfect. If the font size is small, you have a difficult time to recognize the character. I'll put more info here after doing more investigation. If @bgashler1 wants to do any exploration, I can help on this. - Big font size with normal font weight is better IMHO. There is a good [UX blog](https://medium.com/@bobtung/best-practice-in-chinese-layout-f933aff1728f#.3mdbvzwbb) about Chinese Font Best Practice which suggests use `10.5pt` (I suppose it's `14px` on web page).  Besides, there are two issue related to Chinese Fonts 1. The min-width of left side panel is too small.        ![image](https://cloud.githubusercontent.com/assets/876920/16641397/bf75f5d0-4432-11e6-98f0-496db51c011e.png) 2. Sometimes I use `cmd`+`+` to increase sizes of UI elements but the context menu doesn't change at all. See below, everything is bigger except the context menu        ![image](https://cloud.githubusercontent.com/assets/876920/16641429/11eb1cc8-4433-11e6-816a-482cbbb6c28b.png)
29849|This doesn't happen with master build and latest Insider (updated this morning), this issue is already obsolete.
29850|@bgashler1, thanks for your PR! By analyzing the annotation information on this pull request, we identified @W4RH4WK and @chrisdias to be potential reviewers
29851|![error](https://cloud.githubusercontent.com/assets/8364947/16642713/89096664-43db-11e6-9c35-b4eddb7e1e14.gif)  In testing I've realized that the issue only arises when code is called from within tmux.
29852|@rebornix looks like you're on a retina display too, so it is a lot better than a standard scale one, also the fonts selected probably differ across platforms, I was showing the one on Ubuntu.
29853|@Tyriar that's true, retina makes it better. If I plug in another Monitor with no 4k resolution, the characters are showing not that good.   ![image](https://cloud.githubusercontent.com/assets/876920/16643108/15cf292c-4444-11e6-8d5e-383defd9c65d.png)  Look at `量` next to `变`, it's now a grey solid polygon.
29854|@rebornix great, in fact I have seen it on a build that was not latest and cannot really explain it.
29855|We did quite some tweaking on the selected font via https://github.com/Microsoft/vscode/issues/5260, I am surprised to hear that we still have font issues (related to the font family)?
29856|Works for me, though I only press the Ctrl key after the list is opened. Works for both mouse click and Enter with pressed Ctrl key.
29857|Looks good, we could add a Features / Screenshots page to the wiki, showing off what has already been implemented. Along with some small description why its a cool feature.
29858|@bpasero let me correct my words, the fallback sequence of font-family with normal font-weight is perfect. From what I observe, the font-family that takes effect on a clean OSX is Hiragino Sans GB, but with bold font-weight, it looks worse than Helvetica or sans-serif. I'm not a Font expert so it may be just a weight issue :)
29859|That should go to https://code.visualstudio.com
29860|@jrieken @f111fei while the change seems to enable dropping stuff into the web view, I see issues: - this disables any workbench related DND interaction if you go over the web view (e.g. you can no longer drop a file into the editor area to open the file) - I am able to drop a URL into the web view and have it opened (see screen shot below)  Should we just be strict here and say that the HTML preview feature is not intended for DND operations?  ![image](https://cloud.githubusercontent.com/assets/900690/16644531/f73d3b78-441d-11e6-95ab-18ba79b22894.png)
29861|+1. I can't remove sublime only because of that.
29862|> this disables any workbench related DND interaction if you go over the web view (e.g. you can no longer drop a file into the editor area to open the file)  Workbench related DND interaction is contradictory with my usage. We can only choose one.   > I am able to drop a URL into the web view and have it opened (see screen shot below)  Default if you drop a link into an electron window it will try to navigate to that URL. We maybe can prevent the interaction in my html extension.
29863|@Zoltu Wow, finally someone who also embraces Windows' program storage conventions. One question though, what is the exact difference between `%APPDATA%` and `%APPDATALOCAL%`?
29864|One thing I find weird is that you nest the `Visual Studio Code` folder under a `Microsoft` folder. The big Visual Studio simply installs to `C:\Program Files\Microsoft Visual Studio`, I think VS Code should do it the same way (don't nest, but prefix).  I really really like this whole clean-up, especially with moving to appdata on Windows and dropping the `User` folder (as this is already in the user's personal folder)
29865|I see, so `delete` is a valid object property, just not a valid function name.  Yeah... sounds like another TypeScript type constraint problem. 😉   Maybe @jrieken has an idea how to solve it?
29866|My opinion was not to have just one entry in the context menu as it does not look good.  Since context menu entries are contributable, why not providing an extension? I am not sure how many users would want to have it by default.
29867|We'd simply fade it, not hide it. We can also introduce a `500ms` delay on that, would help in reducing flickering.
29868|> IMO snippets must go out of code complete and we should have a separate key.  All in for that. Do we have a third, @jrieken ?
29869|@dbaeumer That's not ready to use yet. For now you can offer a button that brings the user to the settings page (similar to what Ben does with the 'Configure File Associations')
29870|Large still means ~200 files?
29871|Great point. Let's fix that.
29872|Is this the UI you saw when installing the extension?  ![image](https://cloud.githubusercontent.com/assets/22350/16646051/5f959274-4428-11e6-9eac-dfdb8f450414.png)
29873|Can you reproduce it with [plain Electron](https://github.com/electron/electron/releases/download/v1.2.6/electron-v1.2.6-darwin-x64.zip)?
29874|cc @Microsoft/vscode: please review @Tyriar's proposal
29875|Interesting idea, do we have all the things in place to contribute to the search result context menu?  One issue I can see is that from an extension it might be tricky to get access to the clipboard.
29876|I agree but I know it's thin ice. Just add options to control snippet sorting. We have users that want snippets sorted to the top, we have users that want the opposite.
29877|Btw I think we can have more entries in the context menu. Candidates are: - Open to the Side - Reveal in Finder / Explorer - Copy Path
29878|I believe the difference is to have `delete` as a global symbol vs a member symbol. The `soundcloud` sample does the (correct) former and you do the latter.
29879|No Search results context menu is not yet ready for contributable. This has to be kept in mind while implementing context menu for files in Search.  How about providing Search / Replace specific action also in the context menu, like, Remove, Replace, Replace all? Probably they are duplicates of the actions on the right but just a thought?
29880|@joaomoreno  Yes。
29881|Pushed the changes, Feedback is welcome. Thanks.
29882|@dbaeumer I receive following response:  > Sending request: projectInfo (4050). Response expected: yes. Current queue length: 0 > Response received: projectInfo (4050). Request took 1 ms. Success: false . Message: Error processing request. Cannot read property 'projectFilename' of undefined > Sending request: format (4051). Response expected: yes. Current queue length: 0 > Response received: format (4051). Request took 1 ms. Success: false . Message: Error processing request. No Project.
29883|For July you can click on an image that does not fit workbench size to make it fully expanded in size.
29884|+1 that would be nice!
29885|Yes we typically do not repeat the actions that are showing as primary actions on the element within the context menu (which only has secondary actions). But if there are search/replace specific actions not showing up as primary, we can add them too.
29886|I pushed a workaround for now to not add a random number to the image URL when showing the image. This has the benefit of keeping the memory pressure low because we avoid loading the same image over and over. It has the downside that the image will not show any changes if it has been updated. I plan to add an explicit refresh action to the image viewer so that you can still force it to repaint.
29887|Marking as upstream due to https://github.com/electron/electron/issues/6275
29888|"Since it's named export, shouldn't it consider as local? Or maybe I'm not understanding what you mean by ""global symbol vs a member symbol""  btw the original issue on that repo is that structure does not expose the interfaces. I fixed it using namespace: https://github.com/unional/typed-soundcloud/blob/b9506673dba719e76b4440eae6c5984558f6a61a/index.d.ts  But this issue would occurs if we try to change the typings from commonJS to ES module syntax."
29889|@wallverb Had it been a little earlier I would've agreed with you, but here's what I'm thinking: - It affects people that   - Run on *nix, and   - Have customised their `.bash_profile`, making them power users who   - are likely to be on the insider release any way, which will get the fix this week. - Not all output from bash breaks this, since there is already ANSI escape code protection, #7343. - There is a **workaround**: launch code from the command line. Another one is: use the insiders build. - June's release is planned for today.  Given all that, I'm forced to not include this for June, but for July. I just hope I'm not being too optimistic. 🙈
29890|"@Tyriar @eyalsk I always prefered Less because I never met anything that wasn't possible with Less. Less is written in JS, so you can simply npm install it and it will run in JS. With Sass you either need to install Ruby or use libsass (which uses C). Sass is still very tied into the Ruby world though. For example, Less has the `relativeUrl` option to rewrite URLs from imported stylesheets (needed when you import libraries like font-awesome from node_modules that reference fonts). When the same feature was suggested to Sass, the developers just said ""you don't need this because Compass provides asset helpers"", completely ignoring that there are poeple out there who use Sass without Ruby/Compass with other package managers like NPM."
29891|+100 for moving data from `$HOME/.vscode*`to `$HOME/Library/Application Support/Visual Studio Code*`.  Files and folders starting with a '.' are by default not visible in the OS X Finder and need special treatment when navigating into them whereas `$HOME/Library/Application Support/` is just a normal folder (after making it visible once).
29892|@felixfbecker I also prefer Less but that's their decision to make not ours. :)  However, I can relate to what @Tyriar said, many people prefer to use Sass not to mention that bootstrap 4 is _rolling_ with Sass.
29893|> The 2nd workaround is the preferred way if you actually want to debug any worker and not just the first process that is launched.  what could be the workaround if I want to debug all workers in the same time ?
29894|@dbaeumer: feels like JS formatting, not sure if you are the right person.
29895|Have you given [any PHP extension](https://marketplace.visualstudio.com/search?term=php&target=VSCode&sortBy=Relevance) a try? Out of the box PHP support will likely not come in the near future.
29896|This is expected given the change in 0f38435250b9ce748a04676b26d2db7b08943d4a for #4312, which defines that if a selection is not a full line selection, then it is replaced with a tab character.  @warpdesign Your selection in this case starts at (1,2) - notice the one space that is not selected from the line. So, this being not a full line selection, the tab character replaces the content. This is unrelated to the text wrapping.  Would you expect a different behaviour?
29897|"Fixed.  File: src\vs\code\electron-main\menus.nls.resx ID: "".resx"", 0; ""miBack"" SRC: &amp;&amp;Back TGT: 뒤로(&amp;&amp;B)"
29898|> using the hover and hovering in the middle of the first character gives offset 1 instead of 0  I believe that's because we 'round' up/down depending on how you hover over the character
29899|well when implementing languageservers this behaviour is a bit bogus. at least if you hover on the last character of a Symbol
29900|"Unless I'm misunderstanding the issue, this is expected behaviour.  How would you expect the editor to behave? This happens on every editor.  If you'd like your long line to **wrap**, you can control that by setting the configuration `""editor.wrappingColumn""` to `0`."
