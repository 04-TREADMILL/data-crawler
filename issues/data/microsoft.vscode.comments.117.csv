11601|When it comes to scaffolding template for new file, pls checkout what the aspnet yo generator is doing and how they use sub generators https://github.com/OmniSharp/generator-aspnet.
11602|I like the discussion, but we hear different feedback on this topic:  ![image](https://cloud.githubusercontent.com/assets/172399/13521613/3928991a-e1ea-11e5-81b2-dab4baa33cca.png)
11603|https://github.com/aioutecism/amVim-for-VSCode/pull/46 (I didn't manage to test it - low skills developing Code plugins :))
11604|Please check this document out https://code.visualstudio.com/docs/editor/debugging#_mono-debugging  Also if you have some feedback on our docs feel free to file issues here https://github.com/Microsoft/vscode-docs
11605|``` ... [03:30:00] [check semantics] /opt/vscode/src/vs/languages/lib/common/beautify.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/lib/common/beautify-html.mock.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/lib/common/beautify-html.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/lib/common/beautify-css.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/php/common/php.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/php/common/php.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/markdown/common/markdownWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/markdown/common/markdownTokenTypes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/markdown/common/markdown.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/markdown/common/markdown.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/less/common/lessWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/less/common/lessTokenTypes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/less/common/less.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/less/common/less.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/json/common/jsonWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/json/common/jsonSchemaService.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/json/common/jsonIntellisense.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/json/common/json.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/json/common/json.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/htmlWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/htmlTokenTypes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/htmlTags.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/htmlScanner.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/htmlEmptyTagsShared.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/html.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/html/common/html.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/javascript/common/javascriptWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/javascript/common/javascript.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/javascript/common/javascript.extensions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/javascript/common/javascript.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/handlebars/common/handlebarsTokenTypes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/handlebars/common/handlebars.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/handlebars/common/handlebars.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/css/common/level.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/css/common/cssWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/css/common/cssTokenTypes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/css/common/css.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/css/common/css.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/node/plist.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/node/flow.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/node/decoder.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/uuid.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/uri.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/types.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/strings.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/sortedList.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/scorer.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/paths.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/objects.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/network.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/mime.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/keyCodes.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/json.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/graph.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/glob.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/filters.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/eventEmitter.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/event.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/errors.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/collections.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/cancellation.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/async.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/assert.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/arrays.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/common/actions.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/quickopen.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/progressBar.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/mockDom.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/mockDom.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/mockBrowserService.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/htmlContent.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/highlightedLabel.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/dom.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/builder.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/browserService.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/test/browser/browser.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/worker/workerServer.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/worker/workerProtocol.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/worker/workerClient.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/worker/simpleWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/marked/simpleMarkedWorker.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/marked/marked.mock.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/marked/marked.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/diff/diffChange.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/diff/diff2.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/diff/diff.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/bits/encoding.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/test/common/testModes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/test/common/servicesTestUtils.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/test/common/modesUtil.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/test/common/modesTestUtils.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/test/common/editorTestUtils.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/node/textMate/vscode-textmate.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/node/textMate/TMSyntax.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/node/textMate/TMSnippets.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/xml.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/vb.tests.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/testUtil.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/swift.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/sql.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/ruby.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/r.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/python.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/powershell.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/objective-c.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/lua.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/java.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/jade.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/go.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/fsharp.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/dockerfile.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/csharp.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/cpp.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/coffee.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/test/bat.test.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/modes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/languages.common.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/editorCommonExtensions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/editorCommon.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/editorActionEnablement.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/editorAction.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/common/commonCodeEditor.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/browser/editorBrowserExtensions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/browser/editorBrowser.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/browser/editor.all.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/worker/workerMain.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/worker/defaultWorkerFactory.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/windows.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/window.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/update-manager.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/storage.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/sharedProcessMain.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/sharedProcess.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/settings.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/menus.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/main.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/lifecycle.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/env.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-main/cli.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/window.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/update.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/shell.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/main.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/main.contribution.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/integration.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/crashReporter.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/electron-browser/actions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/node/userSettings.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/node/pluginHostProcess.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/node/extensionPoints.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/node/extensionHostMain.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/viewlet.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/storage.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/panel.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/options.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/memento.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/events.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/editor.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/contributions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/constants.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/composite.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/component.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/common/actionRegistry.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/workbench.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/viewlet.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/quickopen.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/part.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/panel.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/layout.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/composite.ts [03:30:00] [check semantics] /opt/vscode/src/vs/workbench/browser/actionBarRegistry.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/zip.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/stream.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/stdFork.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/service.net.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/service.cp.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/request.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/proxy.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/processes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/ports.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/plist.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/pfs.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/mime.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/flow.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/extfs.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/env.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/encoding.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/decoder.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/node/aiAdapter.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/winjs.base.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/uuid.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/uri.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/types.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/timer.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/strings.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/stopwatch.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/sortedList.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/severity.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/service.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/scrollable.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/scorer.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/remote.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/processes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/platform.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/paths.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/parsers.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/objects.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/numbers.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/network.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/mime.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/marshalling.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/lifecycle.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/labels.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/keyCodes.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/jsonSchema.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/json.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/iterator.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/http.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/htmlContent.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/hash.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/graph.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/glob.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/flags.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/filters.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/events.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/eventEmitter.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/event.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/errors.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/diagnostics.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/dates.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/comparers.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/collections.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/cancellation.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/callbackList.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/async.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/assert.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/arrays.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/common/actions.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/touch.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/styleMutator.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/mouseEvent.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/keyboardEvent.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/iframe.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/idleMonitor.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/htmlContentRenderer.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/globalMouseMoveMonitor.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/dom.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/dnd.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/builder.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/browserService.ts [03:30:00] [check semantics] /opt/vscode/src/vs/base/browser/browser.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/node/languageConfiguration.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/xml.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/vb.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/types.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/swift.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/sql.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/ruby.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/r.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/python.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/powershell.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/objective-c.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/lua.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/java.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/jade.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/ini.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/go.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/fsharp.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/dockerfile.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/csharp.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/cpp.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/coffee.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/bat.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/standalone-languages/all.ts [03:30:00] [check semantics] /opt/vscode/src/vs/platform/platform.ts [03:30:00] [check semantics] /opt/vscode/src/vs/languages/languages.main.ts [03:30:00] [check semantics] /opt/vscode/src/vs/editor/editor.main.ts [03:30:00] [check semantics] /opt/vscode/src/vs/vscode.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/nls.d.ts [03:30:00] [check semantics] /opt/vscode/src/vs/css.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/yauzl.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/winreg.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/windows-mutex.ts [03:30:00] [check semantics] /opt/vscode/src/typings/weak.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/semver.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/sax.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/require.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/node.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/native-keymap.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/mocha.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/iconv-lite.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/https-proxy-agent.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/http-proxy-agent.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/graceful-fs.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/getmac.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/electron.d.ts [03:30:00] [check semantics] /opt/vscode/src/typings/applicationInsights.d.ts [03:30:03] [check semantics*] /opt/vscode/src/typings/mocha.d.ts is an internal module and it has changed shape -> check whatever hasn't been checked yet [03:30:03] [tsb] time: 30184ms mem: 418MB Δ387 *** Finished with 0 errors. ```
11606|Thank you @erikbra! I leaved some comments #46.
11607|This was just reported recently https://github.com/Microsoft/vscode/issues/3700, closing in favor of that.  What versions of Ubuntu and VSCode are you on?
11608|Likely an electron issue...
11609|@bpasero there were 2 reports in like 24 hours, electron wasn't touched recently was it?
11610|@Tyriar no
11611|@kylewolfe What do you get if you run `node` and in its interactive prompt run `require('url').parse('YOUR PROXY URL')`?  Namely, do the `host` and `auth` parameters look OK to you?
11612|:+1:
11613|No, it's related to the adoption to TS 1.8.2, super() ctor call ordering.
11614|I think you can always command palette > `Reload Window` and that will trigger the restart of OmniSharp. Does that work for you?
11615|@csholmq this seems to be the behavior of the extension you are using, could that be? Looks like on Ctrl+down they would popup a picker to select the target. I do not think this is standard Code behavior otherwise.
11616|"I'm not sure... will try it next time I face this issue.  Still, having at least an option next to ""OmniSharp server is not running."" message to start OmniSharp is still helpful in my opinion and more intuitive."
11617|That, or a [credential store](https://help.github.com/articles/caching-your-github-password-in-git/). But Code should prompt for credentials...  Also, which git version are you on?
11618|> Closing, code . & works.  A problem with this is the `code` process is killed when the shell terminates.
11619|EOL checking is now skipped if `core.autocrlf` is set to `true`.
11620|Duplicate of #2507
11621|We hit the same issue in our builds, since we fetch many things from GitHub.  What we ended up doing was creating a [personal access token](https://github.com/settings/tokens) for one of our dev accounts and give it no permissions on any scopes. Setting the `GITHUB_TOKEN` env variable to that auth token in the Travis CI build settings will make all requests go authenticated.  Would this unblock you?
11622|Yes, the GITHUB_TOKEN environment is supported for the vscode module, please use that!
11623|To confirm its behaviour: - The message should only appear to a user who was updated from a build previous to March to a build after March.
11624|I am using version 0.10.9. Setting maxVisible doesn't seem to help. I am reading the spring framework  source code the AOP part. The files I open are as follows: ExposeInvocationInterceptor.java, MethodBeforeAdviceInterceptor.java, AspectJAfterAdvice.java, AspectJAfterThrowingAdvice.java, AspectJAroundAdvice.java, ConfigBeanDefinitionParser.java, AopNamespaceUtils.java, AopConfigUtils.java, ParserContext.java, ReaderContext.java, AspectJAwareAdvisorAutoProxyCreator.java, AbstractAdvisorAutoProxyCreator.java, AbstractAutoProxyCreator.java, ProxyProcessorSupport.java, ProxyFactory.java, DefaultAopProxyFactory.java, ObjenesisCglibAopProxy.java, CglibAopProxy.java, AdvisedSupport.java, ProxyConfig.java. It's freaking me out cause every time vscode crashes I have to find and reopen those files in the working files window again.
11625|Oh, totally missed that. I was debugging the wrong extension actually :)
11626|May I add a simple use case: The first time I select a string via douple-click I would like the selection to _exclude_ the double quotes.
11627|+1
11628|Hi @aeschli, I ran into this problem as well and thought I might take a crack at fixing it! Could you give me a quick rundown as to what you think the solution is? Is it simply extracting the core styles into a new theme? Is it providing theme authors the ability to use CSS in addition to TextMate themes for more granular control over styles? Thanks!
11629|Conclusion after discussion among @egamma, @joaomoreno, @waderyan, @chrisdias  - remove the status bar contribution - keep the action but rename it to 'Recommended Extensions' - remove the setting  - remove the time memento of 28 days - don't change the recommendation list unless the extension is installed
11630|@AndyYSWoo does it also crash when you disable all extensions (start with --disableExtensions)?
11631|Discussed with Alex and we have an idea how to solve this together with the ability to let the user configure file => language setting.
11632|:+1:
11633|@daviwil @felixfbecker @lukehoban @rkeithhill @gregg-miskelly you can now control whether an exception filter is enabled or disabled by returning an attribute `default` for the exceptionBreakpointsFilter capability.
11634|Hi **@m-garg**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
11635|@bpasero: that unfortunately doesn't resolve the issue. I can start Code once, any successive attempts again result in ENOSPC. This includes opening a new file from the cmdline.
11636|> I'm also having issues behind an NTLM proxy. I do not have any special characters in my password. I often do not get an error, but the list never loads. On v0.10.8.  Try to specify the username with your domain
11637|Andre I believe this is a duplicate of a bug that is already fixed, right?
11638|Sorry, yes - I forgot to check first….  Andy Barlow t: +44 7830 302268  www.datum360.com http://www.datum360.com/ ...delivering a measured approach to engineering information  Please be advised that this email may contain confidential information.  If you are not the intended recipient, please do not read, copy or re-transmit this email.  If you have received this email in error, please notify us by email by replying to the sender or by telephone and delete this message and any attachments.  Thank you in advance for your cooperation and assistance.  In addition, Datum360 disclaim that the content of this email constitutes an offer to enter into, or the acceptance of, any contract or agreement or any amendment thereto; provided that the foregoing disclaimer does not invalidate the binding effect of any digital or other electronic reproduction of a manual signature that is included in any attachment to this email.  > On 4 Mar 2016, at 14:24, Isidor Nikolic notifications@github.com wrote: >  > Andre I believe this is a duplicate, right? >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/3720#issuecomment-192299738.
11639|This is a duplicate of #3625. Please see work around there.
11640|@aeschli I understand that you can't assume ARM by default, given that JSON is generic. I don't know exactly what the right solution is, but having nothing certainly isn't one. :smile:
11641|"> https://code.visualstudio.com/Docs/languages/javascript states that the ""files"" entry in jsconfig.json's will only show those files, implicitly excluding all others. Yet all files remain visible, not just app.js.  The misunderstanding is the sentence `The file itself lists the files belonging to the project as well as compiler options.` The explorer shows all files not only the files belonging to the project defined in the jsconfig.json.  > Similarly, Intellisense doesn't work at all. I installed typings using the tsd commands mentioned at https://code.visualstudio.com/Docs/runtimes/nodejs (they're visible in the screenshot),   In your jsconfig.json you define that only `app.js` belongs to the project, therefore the typings folder is not considered. You either need to remove the `files` section or add the `.d.ts` folders to the `files` list."
11642|@egamma What about the quick open text. Currently it is `ext tips`. Should it be `ext recommend`?
11643|The plan is to extract the default css rules into real tmThemes for our defaults. We already have the dark_plus.tmTheme and the light_plus.tmTheme, and we additionally need dark_vs.tmTheme & light_vs.tmTheme. The colors from the default css (tokens.css) need to go both these themes. The challenge is IMO not so much the implementation, but verifying and testing with all the grammars with the default themes as well as some of the contributed themes. Also I'd take the opportunity to remove some css rules that are no longer used.  There has been a lot of swirls regarding coloring in the last months and want to be extra careful to now. I'd be happy if you are willing to take a shot!
11644|This issue was moved to Microsoft/TypeScript-TmLanguage#110
11645|I don't understand this. Which file lacked Node.JS Intellisense, when editing our sources?
11646|@jokeyrhyme there's now a wrapper script that launches code in a detached process. Debian-based distros will get this in the March release when installed via the .deb package :smiley:
11647|There's also [JSON5](http://json5.org/). Not sure how much traction it's got but from looking at the npm download numbers (120k in the last day) apparently quite a bit.
11648|Like sublime text `[cmd]+D`.  How to?
11649|You can programmatically set the cursor and invoke the folding command. But by doing that you would assume that the folding regions are always computed the same way. We are planning to make this extensible and customizable.  To avoid you having to set the cursor, we could also add a command that takes the line number as argument.
11650|:+1:
11651|VS Code has built in version of TS which is TS 1.7.5 in VS Code 0.10.8. You have updated TS and as a consequence the TS versions now diverge and this can result in different errors.  You can tell VS Code to use another version of TS using the `tsdk` setting https://code.visualstudio.com/Docs/languages/typescript#_using-newer-typescript-versions.   Can you please try this and see whether is the cause of your differences.
11652|I had [posted on Stack Overflow](http://stackoverflow.com/questions/34835082/how-to-debug-using-npm-run-scripts-from-vscode) about this exactly. It would be nice if this was more easily supported.
11653|This worked great. I don't appear to be getting any more erroneous errors. Thank you so much.
11654|"Thanks Trevor - this is a function of how the schemas are built, the intellisense is based on ""type"" and ""apiVersion"" because the schemas differ by apiVersion.  So when apiVersion is an expression the JSON editor can't resolve it to a ""real"" apiVersion.  So we're trying to see how we can poke into the schema based intellisense and try to evaluate a _simple_ expression (we wouldn't try to evaluate all expressions)."
11655|The problem with folding a full document to one line is that we collapse all decorators to that one line. Decorators are used for error markers, git markers, but also for tracking the folding regions.  We have ideas on how to reduce the number of decorators used for folding to improve the performance of this scenario. Bur not for March.
11656|I created #3725.
11657|@alexandrudima this is the change we did!
11658|Thanks for the pointer.  Yeoman is the scaffolding tool I was thinking about.    As far as using Yeoman with VSCode, would you expect VSCode users to drop out of VSCode to a shell to scaffold items?  Or would you expect VSCode users to invoke the scaffolding tool via a task?    Of course, sometimes the scaffolding tool needs input from the user i.e. target filename.  Does the task runner currently support defining a task that can pop an input dialog to ask the user for a filename?  If not, I could see how that would be a useful feature to have.  :-)
11659|"[JSON5](http://json5.org) looks great, especially, because it is much easier to edit because there is no need to use quotes for keys (though `.` separated keys like `""editor.fontSize""` would still need quotes)."
11660|This is a duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
11661|We delivered a fix to our build scripts. The NPM postinstall hooks no longer trigger the compilation of the JSON extension. This is now done in our regular build script (gulp watch). I tested it with npm 3.
11662|You all seem to have a clear picture how this feature should work. I don't, so I'd appreciate if someone could help me.  A VS Code 'launch' configuration needs to pass the standard node debug argument '--debug-brk' and a port number to the runtime (e.g. 'node').  If the runtime is launched via an npm script, I still need a mechanism to pass the debug port into that script. What is the way to do this?
11663|There was a really silly misunderstanding from my side.  I was in a little hurry and thought it's the [github's gitignore](https://github.com/github/gitignore) repository, and thought of updating vscode gitignore file. Really Sorry. Closing the PR.
11664|"Suppose, VSCode would use `.json5` files for the user settings as alternative format. For new projects it would propose to use `.json5` and it could obviously load  the existing `.json` but propose to rename them. There could be a setting `""settings.use.json5"": false` if users want to use the `.json` files."
11665|We had it in, but turned it off as it conflicted badly with the other background decorations we have (selection, word highlighting). I'd say we accept this as limitation and tell to better use themes that don't rely on background colors.
11666|I see some uses of `editor.getControl() .saveViewState` without first checking if `control !== null`
11667|> As far as using Yeoman with VSCode, would you expect VSCode users to drop out of VSCode to a shell to scaffold items? Or would you expect VSCode users to invoke the scaffolding tool via a task?  There is a nice yeoman extension: https://marketplace.visualstudio.com/items?itemName=samverschueren.yo. An integrated generator appears more natural to me than a invoking a task to scaffold a file. Can you check how the yo extension works with your scenario.
11668|@daviwil David, ok if we move this issue to https://github.com/PowerShell/vscode-powershell ? Once fixed we're happy to update our powershell text mate grammar.
11669|It's such a handy feature of tmThemes though to draw attention to important things. it's used frequently across themes for invalid and deprecated scopes.
11670|We're actually about to start maintaining the official PowerShell TextMate grammar in its own repo so you'll be able to move all PowerShell grammar bugs there. I'll see about getting that repo created today and I'll create a bug there to track this issue.
11671|This command already exists ![image](https://cloud.githubusercontent.com/assets/172399/13534119/dfe160b8-e233-11e5-8f78-1ae85defb52a.png)
11672|Sorry, I don't seem to bae able to reproduce this. Is this the complete code snippet? This is about syntax highlighting, right?
11673|Dup of https://github.com/Microsoft/vscode/issues/2712
11674|Closing for now, will reopen if more data is provided
11675|This should be fixed in the march realese
11676|Variable spinners means the tree is in a broken state.   So I believe this is a feature request against the tree 'Setting new tree input should get the tree out of a broken state'. @joaomoreno or is there something better I could do to clear the bad state?
11677|Maybe it is just me, but I think it would be cool if intellisense was available inside of php strings as well.
11678|I'm sad #78 is not on the roadmap :(
11679|I believe we are doing a good thing here, messages should be on top of the debugger toolbar because they should be read and closed first (they are like notifications). Also the debugger toolbar has the alternative of being triggered by shortcuts in the case that there are messages blocking the toolbar.  I am not a big fan of messages pushing the toolbar down, since they also do not push quick open or any other ui we have. VSCode is still orange, so you still have a clear notification that debugger is running even though the toolbar is hidden.  Leaving this as a feature request
11680|For me it was about syntax highlighting.
11681|@isidorn aha, this is not mono-debug related. It occurs everywhere...
11682|@weinand yeah, side affect of a PR i merged this morning
11683|Ok :disappointed:   It's just something that **everybody** will have to do. Why not add this to the typings registry and get it through `typings install`?
11684|As far as I know, tsd does not support versioning.
11685|And btw the API limit is not hit because of downloading the VSCode.d.ts, it is hit to find out which versions we have released.
11686|+1. I use this feature in WebStorm but really want to work only in VSCode
11687|We talked with the Yeoman folks and found out this:  > Apparently the user has to globally install a Yeoman generator via npm before it shows up in the list. This is definitely an adoption blocker for PowerShell folks.  I think we will roll our own solution that generates projects and files in the PowerShell extension.  Perhaps if the installation of our extension could ensure that every dependency were in place already, such that the PowerShell extension user did not  have to perform extra install steps, we would reconsider.
11688|"> tsd does not support versioning.  `tsd` has been replaced with `typings`, but it looks like it has versioning? https://github.com/typings/typings/blob/master/docs/typings-the-registry-and-versions.md  >  btw the API limit is not hit because of downloading the VSCode.d.ts  Interesting. I'm taking a look at `install` and I see what you mean. Doing the suggested `typings install` won't work then cause it's hitting: https://api.github.com/repos/Microsoft/vscode/tags. I guess I can just set my `""engines"": {""vscode"":""*""}` to avoid all this."
11689|Hi **@lukehoban**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Luke Hoban). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
11690|There is already an [issue](https://github.com/Microsoft/TypeScript/issues/188) in the typescript repo for this and it is scheduled for the 2.0 release.
11691|@egamma, sorry, my bad... don't know how I missed it :)
11692|@Tyriar awesome! I found the `disown` shell built-in in the meantime. Not hard to make an alias or function for the time being. :D
11693|@Tyriar also, hi! :D
11694|What @jtosey talks about is exactly what I came here to say. I use panes to organize a set of related files. Most tab management involves getting those related files next to each other when I switch contexts.
11695|I was looking into this a little, but it'd be helpful to understand what the behavior should look like on non windows systems. Mainly, should we use the same environment variable %SYNTAX% or try to emulate the host platform?  I'd argue that having VS Code be consistent across multiple systems is more important than constancy with the host platform, but I'm curious to see if anyone has any objections to that. We could use $SYNTAX or something else, across all platforms too.
11696|"I just tried it again and it seems that HEREDOC isn't parsed at all.   ``` <?php $myVar=<<<EOT echo ""test content""; EOT; ?> ```  In this case the text between the two ""EOT"" is a string that gets assigned to $myVar  However, the syntax highlighting indicates that `echo ""test content"";` is a function call to ""echo""."
11697|Is this not a duplicate of #84?
11698|Just gave `scripts\npm install` another with the latest code and it worked just fine.  However the next step `gulp watch` fails:   ``` D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:39577                         resolvedName = resolveModuleName(moduleName, containingFile, options, host).resolvedModule;                                                                                                    ^  TypeError: Cannot read property 'resolvedModule' of undefined     at resolveModuleNamesWorker (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:39577:100)     at processImportedModules (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:40249:35)     at findSourceFile (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:40225:17)     at processSourceFile (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:40146:27)     at processRootFile (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:40056:13)     at D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:39602:60     at Object.forEach (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:945:30)     at Object.createProgram (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:39602:16)     at synchronizeHostData (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:48342:33)     at Object.getEmitOutput (D:\REPOS\vscode\node_modules\typescript\lib\typescript.js:51328:13) ```  ![image](https://cloud.githubusercontent.com/assets/874898/13540839/0194f598-e2ad-11e5-8eac-6141a0297191.png)  I'll create a separate issue for that once I've investigated that a bit more. Going out for a suit fitting (:necktie: :jeans:) for now :rose:
11699|Hi **@guillaumejenkins**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Guillaume Jenkins). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
11700|:+1: +1 Agree with @MrAndMrsK .
