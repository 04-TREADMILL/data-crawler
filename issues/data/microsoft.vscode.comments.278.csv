27701|@sandy081 yes, we are in agreement 👍
27702|hm... is the grammar we are using?
27703|![screen shot 2016-06-27 at 14 06 47](https://cloud.githubusercontent.com/assets/1794099/16379197/6a6bb7ce-3c70-11e6-8ec5-92a118c2e864.png)  Holy moly - the parsing/loading the grammar is **slow**. Tho it only happens once/the first time. @aeschli @alexandrudima ideas how to seep that up? Is it better to use JSON instead of PLIST?  [CPU-20160627T140746.cpuprofile.zip](https://github.com/Microsoft/vscode/files/334769/CPU-20160627T140746.cpuprofile.zip)
27704|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
27705|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
27706|I do agree. Easy enough as just opening the viewlet.
27707|Yeah we can guide the user to the viewlet, not a bad idea. I took out the handler but it can easily be brought back, maybe we just one item inside to tell the user that we moved the functionality to a viewlet and clicking that message opens the viewlet.
27708|"Ah no, that is ""Close Window"", d'oh."
27709|We already have a view: show extensions action that opens the viewlet - it is named like that for consistency with other openeing the viewlet actions. I can add another action with a 'Extensions: Install' name that just does the same  ![screen shot 2016-06-27 at 14 17 55](https://cloud.githubusercontent.com/assets/1926584/16379479/1091e97e-3c72-11e6-8435-98833a8f9a07.png)
27710|+1 👍
27711|@isidorn yeah, thanks. We should try to drive as much traffic to our new UI.
27712|Searching for extensions works for me on Elementary OS (Freya) with Version 1.3.0-insider Commit 41f53d27a8cb477130f84116c78f43ddacbaf24b Date 2016-06-27T05:15:21.343Z
27713|I hate to close this but I really cannot reproduce this anymore, trying for 5 minutes. This is a tough one, please report back if you have any clue how to reproduce.
27714|@bpasero added the 'Extension: ' prefix
27715|I did not see it since then - I will reopen if I hit it again - I also tried reproducing but failed.
27716|I have the same version. Also Elementary OS (Freya)  Version 1.3.0-insider Commit 41f53d27a8cb477130f84116c78f43ddacbaf24b Date 2016-06-27T05:15:21.343Z Shell 0.37.6 Renderer 49.0.2623.75 Node 5.10.0  Maybe there is a log that I can check to see if something goes wrong?
27717|@JostCrow I do not think we log this operation - if you open the F1 > developer tools > do you see some errors in the dev console? @bpasero ideas on how to tackle this are welcome
27718|Confirmed! :D
27719|There are some errors indeed. I also tried to see what was the problem. The error at line 14 is connected to the extensions search error. _Cannot read property 'domNode' of null: TypeError: Cannot read property 'domNode' of null_  [vscode.txt](https://github.com/Microsoft/vscode/files/334873/vscode.txt)
27720|@JostCrow  We can probably rule out proxy issues by checking if in the stable release you can search for extensions.
27721|Could not reproduce. @joaomoreno fyi if you ever seen this. Closing for now until we find steps.
27722|Yes I have never setup a proxy. and also in the office no proxy is active
27723|@JostCrow and you can search for extensions using our stable release from the picker?
27724|- [ ] Test Plan Item created - [ ] Key board accessible - [ ] Screen reader accessible - [ ] Works with the different themes, including the high contrast theme - [ ] Telemetry events in place - [ ] Release notes updated
27725|Yes that is possible. It is only in the insiders that I am not able to search. The second screenshot that I posted in this treat is from the picker.
27726|Maybe you can do the following - break on exceptions and try to search for python - if you get an exception location screenshot in dev tools would be most useful  ![gettingexception](https://cloud.githubusercontent.com/assets/1926584/16380652/9ee17022-3c78-11e6-9718-b08dd3512159.gif)
27727|Yes I have done this. ![screenshot from 2016-06-27 15 09 34](https://cloud.githubusercontent.com/assets/390575/16380758/35487f4c-3c79-11e6-83a1-9c879dba157f.png)
27728|@JostCrow awesome thanks! So it is coming from [here](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/ui/list/rowCache.ts#L63) @bpasero I can put a null guard [here](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/ui/list/listView.ts#L204) but I do not have a deep understanding of the list widget so if you have a better suggestions I am all ears.
27729|Oh wow you can just click and hold on the bar itself? Well I'm embarrassed I never even thought to try that! A popover would be nice to let people know perhaps? Thank you though!
27730|Basically what I want is when you <kbd>ctrl+click</kbd> for it to go to the correct definition.   Sometimes there are classes with the same name as a method in another class. How does it know which one you actually want?  Currently our provider finds and returns the first one it finds. So you could either go to the class or to the method. When we add properties the same thing goes for here..  I haven't tried using a list of items yet. Will they resolve themselves to the proper item when you <kbd>ctrl+click</kbd>?
27731|@bpasero I will bring back the handle. We explictly decided to keep it due to #7973
27732|> @egamma this is a question unrelated to the PR, but given your emmet know how I thought I'll ask you. Do you know the purpose of the gulpfile inside the emmet module? It looks like it supports to package/bundle emmet. Is any other editor using this? I ask since the startup time of emmet is significant and we look into options to reduce it.  ## Disclaimer  I don't know how much is a correct test, but the results are interesting.  ## Tests - Reload VS Code by F5 from `http://localhost:9222/` - Run Emmet by Tab key  ## Results  #### Current version (first run ~**300ms**)  ![image](https://cloud.githubusercontent.com/assets/7034281/16381196/f843e14e-3c83-11e6-94a6-de404d0bef18.png)  [GIF](https://cloud.githubusercontent.com/assets/7034281/16380696/33a8bcd0-3c81-11e6-8a0c-d348a62d2908.gif)  #### Current version witn Emmet bundle by Gulp (first run ~**300ms**)  ![image](https://cloud.githubusercontent.com/assets/7034281/16381206/0456cb68-3c84-11e6-8938-daa5a71dd144.png)  [GIF](https://cloud.githubusercontent.com/assets/7034281/16380650/ffc19450-3c80-11e6-8720-b7d50eb505cd.gif)  #### My version ([code](https://gist.github.com/mrmlnc/3345b7d2a709e125d517e91ad1b9ca6f)) (first run ~**150ms**)  ![image](https://cloud.githubusercontent.com/assets/7034281/16381225/20fc6930-3c84-11e6-9c63-8c8a58e8487b.png)  [GIF](https://cloud.githubusercontent.com/assets/7034281/16380734/6fe6f3b0-3c81-11e6-8a09-7f440ffa15c9.gif)  #### My version with Emmet bundle by Gulp (first run ~**150ms**)  ![image](https://cloud.githubusercontent.com/assets/7034281/16381236/2ab0b18e-3c84-11e6-83ef-71006643b7ea.png)  [GIF](https://cloud.githubusercontent.com/assets/7034281/16380776/b0f60756-3c81-11e6-9625-7e6876687808.gif)
27733|We have the same deep understanding of the list widget.
27734|@Tyriar assigning to you for verification.  ![image](https://cloud.githubusercontent.com/assets/900690/16381357/602744d4-3c7c-11e6-9cc1-5cd7eb036ed0.png)
27735|To clarify, <kbd>ctrl+click</kbd> is just another gesture for the _Go to Definition_, so I assume you are implementing a `DefinitionProvider`.   Generally, VS Code does support multiple definition of a symbol cos that actually happens - think of TypeScript interface/variables merge or C# open classes. So, the UI will show a list when multiple definitions for a symbol have been computed:  ![screen shot 2016-06-27 at 15 41 03](https://cloud.githubusercontent.com/assets/1794099/16381614/a7d3e264-3c7d-11e6-9214-2d3d3b999371.png)  > Currently our provider finds and returns the first one it finds.   You mean 'find' as in textual search? That would be one way to do but to get a correct result you must run a real semantic analysis which knows these kind of things. What language is this for?
27736|@forethoughtde do you run with any extensions installed?
27737|This seems to be related to commit 88f88a90938243434488ed72a81498651782607b, where the processing of angle brackets has been changed.
27738|@BusyJay mind opening a new issue for your case? we have a 2 second window where we ignore changes made to a file outside VS Code. maybe you are fast enough to switch to the terminal and run your format command in under 2 seconds?
27739|@aeschli do you see this as well in your Linux distro? do you have a machine that runs Linux without parallels?
27740|I really like the idea. We might consider doing something similar to Visual Studio. Instead of three separate buttons for find next, find previous and find all, VS has a button with a drop down that allows you to select the specific action you want to use. So it would look something like this mockup (showing what the user sees when they click the drop down):  ![image](https://cloud.githubusercontent.com/assets/1704059/16381954/c3579a96-3c76-11e6-92ab-c663956ba290.png) The idea would be that you click on the drop down next to the button to run and then change the command. So if you click Find Previous in the drop down, the button changes to the Find Previous button. If you click Find All, the button changes to the Find All button etc.  @bgashler1 might have some other, better ideas. I haven't spoken with him about this today.
27741|There is no problem with newer version. @bpasero I am using version 1.2.1
27742|@JostCrow I have pushed a potential fix for this issue - hard to verify since we can not reproduce. Tomorrow there will be a new insider release with the fix - so please try it out then and let us know how it works. Thanks again for all the help!
27743|Will give a shot. Thanks.  On Monday, June 27, 2016, Isidor Nikolic notifications@github.com wrote:  > PR's are welcome > Code pointer > https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/browser/repl.ts#L56 >  > — > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/8115#issuecomment-228702040, > or mute the thread > https://github.com/notifications/unsubscribe/AA-JVDFV9QHQBsE0TiPDPkta2dbQmrj7ks5qP53BgaJpZM4I-AEX > .
27744|I will let you know tomorrow if it works. Thanks for the support
27745|2nd try in July
27746|@forethoughtde so you say this issue is fixed for you?
27747|Thanks a lot, Martin! I'm happy this will be in the next release.
27748|I only have Linux in Parallels 9. DnD looks ok to me.
27749|Pushed a change to stop the goto definition procedure if you change the cursor position while having Ctrl-key down. This should handle the case where you start to drag over the word to select the portion to copy.
27750|Looks like an upstream issue then.
27751|Yes, it is got fixed for me.
27752|@bpasero Alright ! can't wait to next update ! :)
27753|The language is `PHP`, and what we do is build the AST using the language server, and then store it in a variable `workspaceTree`. When vscode asks the server for list of items, it searches the tree (this is what I mean by **find**).  Here is the provider I wrote that asks the server for the word it is looking for a definition:  ``` php import {     workspace, Range, Location, Uri,     DefinitionProvider, TextDocument, Position, CancellationToken } from 'vscode'; import { RequestType } from 'vscode-languageclient'; import Crane from '../crane';  export class PHPDefinitionProvider implements DefinitionProvider {      public provideDefinition(document: TextDocument, position: Position, token: CancellationToken): Thenable<Location> {         return workspace.saveAll(false).then(() => {             return this.findDefinition(document, position, token);         });     }      public findDefinition(document: TextDocument, position: Position, token: CancellationToken): Thenable<Location> {         return new Promise((resolve, reject) => {              let wordRange: Range = document.getWordRangeAtPosition(position);             let word: string = document.getText(wordRange);              var findDefinition: RequestType<{path:string,word:string}, {path:string,position:any}, any> = {method: 'findDefinition'};             Crane.langClient.sendRequest(findDefinition, {                 path: document.uri.fsPath,                 word: word             }).then(result => {                 var uri: Uri = Uri.parse('file://' + result.path);                 var location = new Location(uri, new Range(result.position.startLine - 1, result.position.startChar, result.position.endLine - 1, result.position.endChar));                 resolve(location);             });         });     } } ```  as you can see it gets the word using `document.getText(wordRange)`, my thought was that I could also send the `SymbolKind` to the server such as `SymbolKind.Class`, `SymbolKind.Method`, etc. this way I could search the tree for just methods, or just classes instead of searching the tree for everything.
27754|"I found a good way to reproduce it consistently: I have a very large (1.7MB, 37K lines), generated .d.ts file as part of my project, and if i open it, VSCode crashes after a few seconds. I don't normally have to open it, but it seems that even if I edit a file that depends on it and do certain things, like hovering over a symbol in that file for a few seconds, VSCode (it looks like) tries to load/parse that large file, and crashes within a few seconds. While it's working, I see ""Loading..."" in the tooltip.  Is there any way to make vscode never look at the file (only let the TS language service see it?) Maybe if this is a common problem, you could introduce a file size limit above which VSCode will not attempt to parse a file?  Alternatively, is there a way to bump up the memory that VSCode will use so maybe it can parse the large file without choking?  I have a heap snapshot from before the crash, at about 618 MB used. I also have a memory timeline. 82% of the retained size usage from the heap snapshot is instances of StackElement, which seems to be something to do with syntax highlighting as far as I can tell. In a ""normal"" (not about to crash) heap snapshot, StackElement takes up only 8KB."
27755|Just tried code-insiders_1.3.0-1467004291_amd64.deb Looks like it's working now. I don't see this error anymore.
27756|@Tyriar pulled down and started demo - scrolling works fine, let me know what to do next :)
27757|It should be available tomorrow already from our insider builds, but I need to do some more testing on Windows and Linux that I did not break this feature entirely.
27758|@calebegg thanks, that points to an issue with the language service and or editor.  @dbaeumer dragging you in and freeing myself, because I have 7 other freeze-slow-crash issues to look at.
27759|@calebegg are you able to attach this file here?
27760|Found the difference, in `xterm.js` around lines `1132-1136` in this piece of code:  ``` // allow mousewheel scrolling in       // the shell for example       on(el, wheelEvent, function(ev) {         if (self.mouseEvents) return;         if (self.applicationKeypad) return;         if (ev.type === 'DOMMouseScroll') {           self.scrollDisp(ev.detail < 0 ? -1 : 1);         } else {           self.scrollDisp(ev.wheelDeltaY > 0 ? -1 : 1);         }         return self.cancel(ev);       }); ```  In vscode `self.applicationKeypad` is `true` that's why it's returning while xterm.js demo has this value set to `false`
27761|Unfortunately, it contains proprietary code, but I will try to create a version of it without any. (It was generated with https://github.com/angular/clutz).
27762|"The reason why it's set to true is due to this flow:  `internal/child_process.js` line `444`: `handleMessage(target, message, undefined);` where `message={type: 'data', content: ""[K[?1h=""}`  which then calls: `terminalInstance.ts` line `47` `this.xterm.write(message.content);`  which then does: `xterm.js` line `1722`  ```  // ESC = Application Keypad (DECPAM).               case '=':                 this.log('Serial port requested application keypad.');                 this.applicationKeypad = true;                 this.state = normal;                 break; ```  I hope it helps  One update: seems like xterm demo is starting with bash, while vscode starts with my zsh (https://github.com/robbyrussell/oh-my-zsh)"
27763|@bpasero DND can be pretty great but how about starting from something more primitive? like right click on a tab and create a new window? right click on a folder in the explorer and create a new window? I imagine you can pass all the information you need through IPC (Inter-Process Communication) but first you need to have this infrastructure.
27764|I think we should keep if - it's actually amazing how many items we see in Twitter each day.  the added benefit is that these tweets go to the friends of the sender as well.  This helps promote the product is a good way.  I'll close for housekeeping but re-open if required.
27765|Ok - as said before you could use the [api commands](https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands) to get to the completion items at a position but someone has to compute that info? The [provider](https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands) that ships with VS Code isn't very smart but consults a static list of symbols.   Generally, you need an AST and a symbol/type information. Generally it's like this `ast node` maps to `type` and `type` maps to `symbol`. The symbol knows where it is defined - either a ast location or some lib location (thing of a dll or so).   Closing this as question since it out of scope for VS Code
27766|Yes, all related scenarios.
27767|Okay, thanks. :)
27768|The workaround is to change the zoom of the whole editor and than adjust the fontSize to fit. I've been doing that for a while and it works pretty well if you don't mind a slightly rescaled editor.
27769|@isidorn thanks! I had not seen this in the build I was working with, but I have seen it in a more recent build.
27770|added the links, polished all labels,
27771|Once I set the focus to the defaults editor the fold actions work for me. E.g fold all Ctrl + K , Ctrl + 0
27772|Duplicate of #8066.
27773|Yes, we go one back in history. There is no API for extensions at the moment to get access to the editor showing an html preview. Although this behavior is wrong in some cases, we at least support the switching back and forth between source and preview.
27774|@kieferrm going back to the source should just be a call to opening the editor with the path of the markdown file, no?
27775|This is coming for June, stay tuned.  @sandy081 you deserve credit here.
27776|@bpasero Thanks!
27777|And  `Expand Abbreviation` by `tab` and `F1` also.   #### VS Code stable  ![2016-06-27_20-07-38](https://cloud.githubusercontent.com/assets/7034281/16388711/faa9bfc0-3ca2-11e6-9944-deb6e689761f.gif)  #### VS Code insiders  ![2016-06-27_20-08-26](https://cloud.githubusercontent.com/assets/7034281/16388730/154c6490-3ca3-11e6-8d61-fc3ad969d4f5.gif)
27778|Thank you very much! I love it to develope javascript applications.
27779|"I also get stuff that I have imported e.g. I use globalStyles a lot, and it lists these as symbols:  `import globalStyles from ""../GlobalStyles"";`  I think import lines (which are not re-exports) should not be listed in the symbols listing.  P.S. this change apparently removed all filtering, including ""import something"" what I wanted is to _include_ `export let something = {}`  P.S.S. I think ""listing definitions"" is more appropriate for Ctrl+T, I don't think people are using it to jump to import statements, but to definitions with typically export in front."
27780|Praise the mighty @sandy081 🤗🎉
27781|Okay, I see now! I probably want to execute `vscode.executeWorkspaceSymbolProvider`.  Thanks for the info!
27782|Interesting... Can you check what `message.content` is in this case? Whatever it is, it seems to be telling xterm to enter the application keypad mode.
27783|Since 1.3.0 is shipping in a couple of weeks and it seems fine there I'll resolve this. It's potentially caused by https://github.com/Microsoft/vscode/pull/7350
27784|Here's a similar file that kills my VSCode within a few seconds. 96K lines, 3.9MB.  http://ca.lebe.gg/files/out.d.ts  Like I said, I don't necessarily expect VSCode to be able to handle such large, generated files, but the problem is that if I depend on a symbol from this file elsewhere, it also seems to crash VSCode eventually.  Also, if it helps, my deps on files of this size worked fine pre-1.2. This all only started with VSCode 1.2.
27785|Adding fenced code for php was necessary but did not fixed the php highlighting issue.
27786|This issue was moved to Microsoft/TypeScript-TmLanguage#196
27787|This is a duplicate of https://github.com/Microsoft/vscode/issues/3886 which asks for variable and function reference highlighting But yes, to implement that we need https://github.com/Microsoft/TypeScript-TmLanguage
27788|Came here to post this issue too. ![image](https://cloud.githubusercontent.com/assets/412489/16389937/b68ddb36-3c76-11e6-99f4-f94cbe5f81e7.png)  As you can see, inside the fetch parameter of type `RequestInit`, snippets are shown in the middle of the properties. I think they should be shown at the end or even not shown at all. I think snippets make sense when in an empty line, not in the middle of a function call, right?
27789|This issue was moved to Microsoft/TypeScript-TmLanguage#197
27790|No easy solution here, defer.
27791|I won't say it is a deal breaker but getting annoying not able to do this.  In angular 2 project we usually exclude all js file but still want to see a few js setting files, like webpack.config.js, systemjs.config.js, etc.
27792|using the command prompt?
27793|Changes were made to the dark theme and the dark+ theme. The dark theme only colors the lists bullet `*` and the quote indicator `>` while dark+ colors the complete list and the complete quote.
27794|What about suggesting snippets first only if cursor is in an empty line? Would that make sense?  I actually want snippets to not even show (or show at the bottom at least) inside an object literal where properties should be the only thing showing up in the intellisense.  Right now snippets are showing everywhere which I think makes no sense at all. ![image](https://cloud.githubusercontent.com/assets/412489/16391409/5b9a9cbc-3c7d-11e6-97ca-d7a7abf2ca86.png)
27795|same with me, i run ubuntu 16.04 just installed .net core 1.0.0 after seeing redhat devnation.  here is my path /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin  omni also failed to run   [INFO] Starting OmniSharp at '/home/gadael/MyDev/dotnetcore_1_0/dotnetcore_1_0'... [INFO] Installing to /home/gadael/.vscode/extensions/ms-vscode.csharp-1.1.7/.omnisharp [INFO] Attempting to download omnisharp-1.9-beta10-ubuntu-x64-netcoreapp1.0.tar.gz... [INFO] Downloading to /tmp/tmp-18376culwZh1nO4s2.tmp... [INFO] Download complete! [INFO] Decompressing... [INFO] Done! 323 files unpacked. [INFO] Started OmniSharp from '/home/gadael/.vscode/extensions/ms-vscode.csharp-1.1.7/.omnisharp/OmniSharp' with process id 18976... Failed to initialize CoreCLR, HRESULT: 0x80131500 [ERROR] Error: Failed to start OmniSharp
27796|@mrmlnc I almost forgot to say thank you :rose:. I was busy to get the PR into for the June update before we have the code freeze and start the endgame.
27797|"Ok - just had a crash. Had about 10 ""Electron Helper"" processes, one was 555 megs - way above the rest. I have no idea how to get that detailed list though.  On Tue, Jun 21, 2016 at 10:07 AM, Benjamin Pasero notifications@github.com wrote:  > @cfjedimaster https://github.com/cfjedimaster ideally find a tool that > is able to show you a detailed list of all processes below Code so that we > find the one responsible. >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7414#issuecomment-227450576, > or mute the thread > https://github.com/notifications/unsubscribe/AAYBvGmSOouAIaL0ySWeHveFjXEBi9BDks5qN_AggaJpZM4Iw7xV > .  ##   #   Raymond Camden, Developer Advocate for StrongLoop at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden"
27798|By analyzing the blame information on this pull request, we identified @jrieken to be a potential reviewer
27799|Hi **@emiljas**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
27800|Thanks for putting this together!
