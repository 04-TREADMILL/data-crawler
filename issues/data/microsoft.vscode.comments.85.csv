8401|Here's an example (Visual Studio Code 0.10.6): http://1drv.ms/1X5P1kJ  In the video you can see that when trying to highlight an empty line it will only focus the caret on that line so you have to use backspace or delete to remove the line. Whereas when highlighting a line with content and then moving over empty lines, it picks them up as well allowing you to delete them.  Here's the same example but in Visual Studio 2015: http://1drv.ms/1R67DAS - This is what is expected to happen.  The language of the file I'm editing is SQF however the exact same happens with plain text, C++ and so on etc.
8402|Just to clarify, clicking on the mac menu works. Just typing it on the keyboard doesn't work. I also don't know how to replicate it. It just happens some times. And when typing on the keyboard doesn't work the icons on the mac menu are also gone.
8403|:+1: thanks
8404|@aeschli thanks for the feedback.  What do you think of this commit?  https://github.com/sheldonbarnes/vscode/commit/de8d4dea62754ccf386b78ec04cdc8e6a3c5bf5c  Thanks for being gracious with me for my first attempt to contribute to an open source project.  I found the instructions for the project easy to understand, and I was able to get going very quickly on my MacBook Pro.
8405|@getglad could it be that you are suffering from this issue: https://github.com/nodejs/node/issues/4917 ?
8406|The main point is it does not even have `keyword`, I was going off `import` and `export` having the same scope. Maybe `keyword.control` would be best for both?
8407|:+1:
8408|#1768
8409|"Question about the semantics of this:  ``` json {     ""type"": ""gdb-x64"",     ""windows"": {         ""program"": ""./bin/gdbDebug.exe"",     },     ""windows-x86"": {         ""program"": ""./bin/gdbDebug.exe"",     } } ```  It doesn't make sense to allow the user to select a 64-bit debugger if they are running on a 32-bit OS, right?  Would it be enough to remove the `windows-x86` section from this debugger definition for the type `gdb-x64` to not appear as an option on 32-bit Windows?  This implies that `""windows""` always means 64-bit Windows.  Is that correct?"
8410|@aeschli I've double checked. Turns out it isn't a regression. It only applies when editing CSS inside style elements (I was editing someone else's code at the time in the Insider build). If you press space after the : it gives the list suggestion in CSS files (like in the screen shot) but in the style element in HTML files, it behaves like I described.
8411|@aeschli it looks like I missed this case. Problem is 'REM' is highlighted as a keyword in addition to being part of the comment line. I have a fix in [6d05f15](https://github.com/dpodder/vscode/commit/6d05f15), shall I submit a PR into master and/or release/0.10.7?
8412|@weinand, I copied the entire project to another directory to package up a small sample for you. With this new directory, the issue was not reproducible and neither is #1552 for that matter.  This seems like something wasn't right with the project directory somehow? I switched VS Code back to the original project directory and it is working there now as well.   You can probably close this issue. I'll let you know if I am ever able to reproduce it again.  Thanks!
8413|@alexandrudima there you go: https://github.com/joaomoreno/vscode/tree/list  It's linked in #2702
8414|@ianwesterfield thanks a lot for this update. I'm glad to hear that this is no longer a problem.
8415|@indiejames instead of returning your object as a string, you could return it as a structured Variable. Then the debug console would provide the UI for drilling in that data structure. Do you have considered this?  cc @isidorn
8416|Ok now it is much more sexy. I show and hide it with an 1s delay. Let me know how it feels and we can tune this interval
8417|Awesome. :fireworks:
8418|I centered the title, but did not reduce the margin as I agree with Steven. If you feel strongly about this Martin please create a new issue with more arguments as to why we need this.
8419|+1 want to run some npm, or nuget or <insert cmd x> stuff directly from vs code.
8420|@isidorn I've reverted commit #8761076 because otherwise the debug console is unusable.
8421|I'm not sure that would work. The debugger I am working on is for the Elixir programming language, so it might be confusing if the data structures look like Javascript instead of Elixir. It would be nice to drill down, though. I'll try it.
8422|"@indiejames fair point.  @isidorn what would happen if we would obey the newlines? Or should we introduce a flag ""verbatim"" ?"
8423|We currently do not expose the emmet preferences in Code's settings.
8424|YES!! :+1:
8425|@thoradam in general yes we love PRs:smile:, the challenge here is that VS Code does not have an API to plugin different SCM systems. As first first step such a PR should propose such an SCM provider API. When it comes to API I suggest early collaboration with the maintainers, e.g, start with a proposal. The proposal also needs to support the existing git support.
8426|@Tyriar Aliasing doesn't really solve the issue properly imo, renaming post-install is a fair point, but then I'd have to ask myself why I'd take the official repo over a community repo that possibly spares me of the hassle. Taking this to https://github.com/Microsoft/vscode/issues/2722 though as to not pollute your issue.
8427|"Just remove `noImplicitReturns"": true,` from  `tsconfig.json`"
8428|@moostad Just tried, no luck.
8429|Yeah, it definitely sounds similar. Treat it as a known bug and wait for 4.2.7? In the mean time, have you had success stepping down to 4.2.5?
8430|@bpasero thanks I have the insiders build running with Salsa as the JS language service. I'll let you know how it goes over the next day or so
8431|@moostad Yep, I restarted Code - same result.
8432|"@nfriend I just removed both   ```         ""noImplicitReturns"": true,         ""noFallthroughCasesInSwitch"": true, ```  and problem solved however this is a problem with TsServer and not VScode."
8433|"I have some similar concerns: - Currently there are two aliases for the editor; `code` and `vscode`. It would be good if a consistent one was used everywhere. - After making some progress on https://github.com/Microsoft/vscode/issues/2679, it looks like if another application chose to add an icon or desktop entry named ""code"" it would cause a conflict, leading to badness. - `man code` on OSX displays a man page for some other utility, proving that conflicts happen. - Related https://github.com/Microsoft/vscode/issues/2150"
8434|@moostad You're right - I removed all compiler options introduced in 1.8, and now it's working as expected.  This also solved a few other errors I was getting in the IDE.  I'm guessing this will be fixed automatically when 1.8 comes out of beta.  Thanks a ton!
8435|No repro on Linux/GnomeShell with 0.10.6, open file or open folder does not impact snapping, VSCode stays where it is supposed to.
8436|I believe that this is now implemented in the Insider build. By any chance is there a sample extension that demonstrates this?
8437|@weinand Can you point me to an example of using a structured variable? I can't quite understand it. It looks to me like the `result` field of an EvaluateResponse.body is a string - I'm not sure how to pass back a Variable.
8438|@weinand Never mind. I was able to figure it out (mostly) by looking at other debug adapter implementations on github. Thanks anyway.
8439|@chrisdias what about we add a placeholder message into the search box that indicates ESC stops the search? Similar to how we do it for Git:  ![image](https://cloud.githubusercontent.com/assets/900690/12839412/574140e0-cbd9-11e5-9c14-e9ba5a53b41c.png)
8440|"@bpasero  NPM 3.5.2 and the file doesn't exist the line.  {     ""name"": ""vscode-api-tests"",     ""description"": ""API tests for VS Code"",     ""version"": ""0.0.1"",     ""publisher"": ""vscode"",     ""private"": true,     ""engines"": {         ""vscode"": ""*""     },     ""scripts"": {         ""compile"": ""node ./node_modules/vscode/bin/compile -watch -p ./"",         ""vscode:prepublish"": ""node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../gulpfile.plugins.js compile-plugin:vscode-api-tests ./tsconfig.json""     },     ""devDependencies"": {         ""typescript"": ""^1.6.2"",         ""vscode"": ""next""     } }"
8441|Ok good, seems unrelated to the vscode-api-tests then. Moving to Joao if he knows what is going on, unsupported platform might be it.
8442|duplicate of #2673
8443|You can also configure VS Code to use another version of typescript https://code.visualstudio.com/docs/languages/typescript#_using-newer-typescript-versions
8444|@jrieken suggest to add a sample in https://github.com/Microsoft/vscode-extension-samples
8445|@bpasero, I tried insiders release and problem still exists, after one night in idle VS Code has crashed.
8446|@milenkovic @gwynjudd you will also have to follow the steps to enable Salsa as outlined in https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#javascript---salsa-preview
8447|Well, we build Code in a Windows Server 2012 machine, so it can't be that.  @1767083130 can you try installing Node 4 and building with that instead?
8448|Not a beauty either -_-  ![image](https://cloud.githubusercontent.com/assets/900690/12841481/42529662-cbec-11e5-8bba-366511ce2204.png)
8449|One solution would be to put a placeholder into the search box, just not sure about the text to put:  ![image](https://cloud.githubusercontent.com/assets/900690/12841493/54ecb668-cbec-11e5-808d-a8d7c347838d.png)
8450|Dup with steps in #2586
8451|"Talked a little bit with @joaomoreno about this this morning, here are some thoughts on how this ideally works: - we encapsulate the code to print help into a JS file that we can use across all OS, similar to how Atom is doing it with their atom.js file (see comment on this below) - on Windows and Linux we can use our installers to put ""Code"" on the command line - on Mac we could provide an action from the File menu to ""install Code to the path"" and then do the right thins to go into the bash profile instead of asking the user to do this manually  As for running a JS file for the output, there are some issues. For one, we do not ship with node so we cannot just execute a JS file to show help (as opposed to Atom, who ships node 0.10.x for their APM tooling). So we have to execute Electron, which has other issues: If we start the full blown thing, we potentially get other output from Electron that we do not want (filed https://github.com/atom/electron/issues/4370). If we use the ELECTRON_RUN_AS_NODE environment variable, it seems that on Windows we cannot log to the console because stdout is not connected.  As a general rule, we try to avoid dependencies to NPM modules for VS Code unless really needed because NPM modules tend to drag in a huge list of other dependencies and are typically always outdated and hard to keep up to date. If possible, the parsing/printing should just be implemented."
8452|@Tyriar @joaomoreno ok I actually looked into printing something from a JS script via Electron and their ELECTRON_RUN_AS_NODE environment variable to be able to run node and it actually works. Given that I suggest: - help/version info goes into a script similar to https://github.com/Microsoft/vscode/blob/master/resources/win32/bin/code.js#L3 - this script will be used not just on windows but also linux/mac - we find ways on all OS to put this script on the path, similar to https://github.com/Microsoft/vscode/blob/master/resources/win32/bin/code.cmd#L1
8453|We fixed this for >= 0.10.7
8454|@gregvanl please try to reproduce with bare Electron and file to them, I do not think we can do something about it in VS Code.
8455|The default is just that: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/comment/common/comment.ts#L99  Please provide more info in cause it still doesn't work for you
8456|@cfjedimaster As long as we don't have a sample you should check with our api-test: https://github.com/Microsoft/vscode/blob/master/extensions/vscode-api-tests/src/commands.test.ts#L42
8457|"@rj45NSX It would help if you could provide more information where VSCode ""does not hit certain areas"". What version of VSCode are you referring to? In 0.10.7 we added support for remote debugging.  ""Secondly there is no way to know the scripts the debugger is attached to."" Yes, VS Code focuses on the files in your workspace. VS Code will show the scripts in the remote node if they appear in a stack, but it does not (yet) provide a way to freely browse the scripts."
8458|`keyword.control` sounds like a good choice!
8459|I'd say master, I don't see it as critical.
8460|No worries, thanks for lookin at it!
8461|"@Ciget a VS Code 'launch' configuration is used to launch 'node' in debug mode listening on a specific port. I'm not aware of a way to pass the debug-port to node via an ""npm start"". If you know a way how to do this, please let me know and we can consider to support ""npm"" as a launch option. Thanks."
8462|Sorry about that!
8463|@weinand whenver we represent a string value in repl / variables / watch we always show \n to avoid using too much space, and potentially cropping of the rest of the value. Due to that I would not obey the newlines by default. `verbatim` flag could force me to not massage the value and just show what I get. Though not super excited about this since there is a workaround to use structured variables.
8464|This is a current limitation of the debug hover that it does not have a full language understanding and does some heuristics to figure out the parent chain of the value that is being hovered over. In this case the bracket before the frame is stopping the heuristic from finding that the frame is the parent of the hovered value - contentWindow. To improve this the debug hover would need to have an AST understanding of the language which is a feature request and not yet on the plan.
8465|Some things pushed and thoughts: - closing quick open no longer restores focus to the viewlet if no editor is open - we think about not coloring the output panel in blue but in a less strong color that does not interfere with focus - I went over many places in the tree where we quickly removed focus from the tree which results in the large blue border and relaxed that so that it does not happen that often anymore  I am closing this one and would like to hear more feedback.
8466|Closing.
8467|@weinand just to remind you about this.
8468|Thanks! Will post some feedback if it gets released.
8469|@stevencl @bgashler1 some debug features will not be supported by some debug adapters. For example, powershell might not support conditional breakpoints. We need to think about how to handle this in the UI in a good way.  One option is just to not show any UI for adding conditional breakpoints or to somehow make the user aware that conditional breakpoints will not be respected for powershell. Another tricky thing is that VSCode becomes aware if conditional breakpoints are supported only on the first launch of a debug session. So then it can happen that some UI is suddenly not available which might be strange. Due to this I am not in favor of hiding some parts of the UX but I prefer that we somehow make the user aware that some funcitonality is not supported in his current work flow.  We can also discuss this in our weekly UX sync.
8470|"Hi Johannes, thank you for your answer. The problem was the name of the command. I was using ""editor.action.addCommentLine"", instead ""editor.action.commentLine"".  My apologies"
8471|If save fails for any reason, we offer the ability to try again.   ![image](https://cloud.githubusercontent.com/assets/900690/12844328/f004b6ac-cbfe-11e5-9ab8-2fb502ca3682.png)
8472|@bpasero , it is true for Mac, but not for Windows.  ![screenshot 2016-02-05 12 55 04](https://cloud.githubusercontent.com/assets/3822922/12844423/d332f1c0-cc07-11e5-8465-46659aad819b.png)
8473|@isidorn right, when the session is going down anyways, we can ignore the exception. In other cases, we should let the error ripple up and terminate the session with a corresponding error message. We should then self-host on this and get a feel for how often that happens. If it happens too often, we can disable that behaviour in the product. Just silently ignoring the exception in all cases is a bit dangerous...
8474|Copy value action was causing confusion and because we now wrap lines in repl I have removed the copy value action. User can always select what he wants and ctrl/cmd + C to copy it.  As the selection is not being preserved when scrolling that is because we use a virtualised tree and that is captured in #2163
8475|duplicate of https://github.com/Microsoft/vscode/issues/2716
8476|cc @isidorn
8477|"@ernado-x in that case ""Retry"" is replaced with ""Overwrite"" and will do exactly the same as ""Retry"" but will also try to change the permissions as needed."
8478|@chrisdias I'm seeing the same behaviour, but I thought you did some fwlink magic for the insiders build?
8479|> Currently there are two aliases for the editor;  code  and  vscode .   @tyriar where did you find the second alias `vscode`? The intent was to use `code` consistently.  // @chrisdias
8480|@weinand, thanks for quick reply. I`m asking this, because most of top solutions use this approach to run. So, does it means, that using VS Code we will do own way to develop app?
8481|Solution that @paulomorgado worked for me.
8482|Makes sense, I have pushed it so we try it out. I append stopping debug adapter at the end so it is more clear to the user what is going on  ![screen shot 2016-02-05 at 12 25 25](https://cloud.githubusercontent.com/assets/1926584/12845065/993ae828-cc03-11e5-9390-91c42a41993b.png)
8483|How feasible would it be to query the debug adapter before first launch to find out what is possible?
8484|One option would be that if we need to wait until debug launch that those breakpoints that have conditions attached which we know won't be hit we show with a '?' instead of '='. When the user hovers over it we say 'The [name of debug adapter] debug adapter does not support conditional breakpoints.'
8485|We can not query the adapter before first launch, since we only launch the debug adapter on debug start. The solution you proposed sounds good to me.
8486|Using @weinand workaround a user on a 32-bit os will still be able to choose gdb-x64 if he wishes, since that will be contributed as a seperate debugger. And I believe you are right for the gdb-x64 option the windows-x86 section is not needed.
8487|"@Ciget no, you don't have to change the way of developing an app.  To start your app in debug mode you can use ""npm dev"" from the command line.  I assume that ""npm dev"" runs your app in debug mode like this:  ``` json ""scripts"": {     ""dev"": ""node --debug=12345 server.js"" } ```  In VS Code create an 'attach' configuration:  ``` json {     ""name"": ""Attach to server.js"",     ""type"": ""node"",     ""request"": ""attach"",     ""port"": 12345 } ```  Make sure that the debug port is identical to the one used in the ""dev"" script (or is 5858 if no port is specified in the dev script)."
8488|I have pushed the `winx86` as the name. Please let me know if somebody has a better suggestion, that optimally also conforms with the TS spec for property names.
8489|👍🏽
8490|"I was about to write the same, I've just used a  more complex script as an example.  So the pattern is that you add an npm script for debugging, e.g., `build_test_debug`.  ``` json   ""scripts"": {     ""build_test"": ""rm -rf dist/ && npm run lint && npm run build_cjs && jasmine"",     ""build_test_debug"": ""rm -rf dist/ && npm run lint && npm run build_cjs && jasmine --debug-brk   } ```  This requires still two steps 1) npm run build_test_debug 2) F5 to attach. @weinand would it make sense to support running an npm script as a preLaunchTask?"
8491|@egamma yes, it makes sense to run anything (including npm scripts) as a `preLaunchTask`. This is on our [February 2016](#2616) plan (see #2263).
8492|I also arise same bug on windows8.
8493|I think this bug related #1138
8494|no worries. glad it works now
8495|I think the structured variable approach will work for me, so I'm going to close this issue.
8496|Please give Salsa our new JS infrastructure a try. Here is how: get the insider channel: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/ enable salsa: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#javascript---salsa-preview
8497|@milenkovic Can you share in what language that happens?
8498|Because those messages are rendered very prominent their intent is that a user must react on them. Messages that don't have those characteristics should use the `setStatusBarMessage` API (or the more generic status bar api)  I am leaning towards closing. @tht13 What is the scenario in which the status bar API isn't sufficient but the message API is too strong?
8499|Javascript
8500|@egamma I mean as an alias for the project; the repo name, extension prefixes, etc. Presumably this was the names as such because code itself was too ambiguous?
