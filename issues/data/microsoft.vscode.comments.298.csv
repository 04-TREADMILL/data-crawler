29701|Got addressed for 1.3.1.  ![capture](https://cloud.githubusercontent.com/assets/1931590/16617880/7fc04b86-4386-11e6-8803-e7e207affdb2.png)
29702|Yeah afaik npm stops at the first error.
29703|@bmingles The output should be a raw JSON object. If you wrap `result.stdout` with `JSON.parse`, does it work?
29704|@rebornix I am puzzled by this bug, having a hard time to understand it. you say the tabs start to scroll (slowly even?) when you do some action? like what?
29705|We actually already support this - try out the 'Find in selection' button in the find widget  ![selectionfind](https://cloud.githubusercontent.com/assets/1926584/16618237/9c9fac2c-4388-11e6-858c-b9b0e35aacf3.gif)
29706|@joaomoreno I get an unexpected token error with JSON.parse
29707|What does the beginning of that string look like?
29708|This issue was moved to PowerShell/vscode-powershell#218
29709|When terminating a debug session VS Code first sends a 'disconnect' request to the debug adapter and then kills the debug adapter upon receipt of the 'disconnect' response. The implementation of disconnect was done in a way that the response was returned before killing the remote node.js process. On a fast machine VS Code would kill the debug adapter before the adapter had a chance to kill the node.js process. The fix was to send the 'disconnect' response after the node.js process has been killed and to make the kill synchronous.
29710|My bash_profile echos a few lines of code with env values. Then the JSON string is presented. I'm assuming that the echo output is unexpected?
29711|Worth mentioning that I only echo if interactive shell: `if [[ $- == *i* ]] then     echo 'foo'     echo 'bar' fi`
29712|duplicate of Microsoft/vscode#6572
29713|duplicate of Microsoft/vscode#6572
29714|Okay, looks like getting rid of all echo statements from my .bash_profile fixes this, but definitely would be preferred if this is not required.
29715|I fixed some issues in workbench land and as expected `workbench` had to move into `electron-browser`.  Since the related issues are in @isidorn and @alexandrudima land, I am moving this issue to them.
29716|"<img width=""356"" alt=""screenshot"" src=""https://cloud.githubusercontent.com/assets/238736/16619659/559669a4-438f-11e6-86b6-4524259938df.png"">"
29717|see https://github.com/Microsoft/language-server-protocol/issues/26 as well
29718|@kisstkondoros Thank you! :heart:   I was thinking of converting that to a CSS animation too. I just needed to do a few tweaks to your otherwise great PR (hope you don't mind!): - merged new option into the old `cursorBlinking` option (supporting `visible` from the old option but no longer supporting `hidden`) - added a fallback case for IE9 (where animations are not supported AFAIK) - tweaked the blink animation to get as far as I can tell 100% the same behaviour as before.
29719|+1 to wanting this
29720|This is covered by https://github.com/Microsoft/vscode/issues/3201
29721|It's difficult for me to describe this issue as well. Please take a look at below gif, at first I opened more than 10 files in a single Group Editor. Then I double click `subparser.ts` from left side explorer, after that, I did nothing. Now if you look at the tabs header, you can see they are scrolling. I'm not sure if this a new feature or not, but to me, it's weird.  ![tab-header-2](https://cloud.githubusercontent.com/assets/876920/16619766/23e21736-43c2-11e6-8ab4-60a38f34e68c.gif)
29722|Problem is that `Cmd+A` is not guarded by `when` and which is done [here](https://github.com/Microsoft/vscode/blame/master/src/vs/editor/common/config/config.ts#L405)
29723|@isidorn The vscode.d.ts API lets you get all extensions (`extensions.getExtension`), so you can actually find out about all contributed variables. If you wanted to do this in the main process you can use `vs/base/common/json`. But I don't recommend that as we should not do too much parsing the main thread. Doing it in the 'configuration-editing' extension seems like the right place to do. Doing it in every debug adapter extension is also possible, but it would mean that every extension would parse the file instead of just doing it at one place.
29724|Are you moving `workbench.ts` file only or it may affect other files in the browser folder like `layout.ts`?
29725|We cannot hardcode keybindings like that. If someone defines `Ctrl+A` to let's say open file he is blocked by this. The commands that are bound by default to those keys should have a `when` condition which tells the keybindings service not run the command (and thereby consume the event).
29726|Fixed by #7316
29727|Looks awesome, thanks! 🎆
29728|@malekpour just workbench.ts
29729|@tfsjohan Can you paste the code snippet? Thanks!
29730|Thanks! Duplicate of #8434
29731|@jrieken  selectAll actions maybe add a `when`condition `editorTextFocus`
29732|Oh, it's a feature, you want to always reveal the active one and this feature is brought in by https://github.com/Microsoft/vscode/commit/3d469f88107cdde449af8c6a0f5907ea7871c493 . Now my problem is really easy to describe, I can not see the active tab title on the tab scrollbar.
29733|Any chance that running non-interactively would fix this? In my .bash_profile I have conditional echo statements eg.  `if [[ $- == *i* ]] then echo 'foo' echo 'bar' fi`   If I remove the -i flag `cp.spawnSync(process.env.SHELL, ['-lc', command]` things seem to parse.
29734|@rebornix whenever an editor opens or gets active, we scroll the active tab into view in the tabs container. however, we are not doing this in the way you see it. it should move quickly. see my video:  ![untitled](https://cloud.githubusercontent.com/assets/900690/16620705/c2bb1404-4393-11e6-8c5f-da5cd4e8d4d7.gif)
29735|@bmingles The fix will be instead: wrapping the JSON object with a sequence of bytes that are unlikely to occur in the rest of the output.
29736|"@T1KK3S can you please enable TS tracing using the following setting: `""typescript.tsserver.trace"": ""messages""` and open the Output view and switch to the TypeScript channel (JS, JSX is powered by TypeScript). When formatting stops can you please attach the output. This will help tracking this down."
29737|Yes, we have a similar issue with cut, copy, paste and now have a `when` condition
29738|This works fine in VS Code 1.3.0 and node 6.2.2:  ![2016-07-06_16-16-39](https://cloud.githubusercontent.com/assets/1898161/16621021/174dfca6-4395-11e6-892f-b8199c586465.png)
29739|This was a problem with node 5.2.  Breakpoints are hit in node > 5.2.
29740|This might indeed be an issue in Chrome/Chromium, while I do not have the issue either on VSCode or Chrome on any of my computers, I've seen something very similar on Chrome-Android quite regularly.
29741|We will cover this in #865
29742|Sweet, when will this be released?
29743|"`echo "".monaco-workbench>.part.statusbar{background-color:#000;}"" | sudo tee -a /usr/share/code-insiders/resources/app/out/vs/workbench/workbench.main.css`"
29744|@f111fei I took your suggestion from #8044 and started writing tests for `zip`: a11c9b24770c336cbb4cb8b8da1179bc4a4d37ee  The first (and only, so far) test tries to extract the file you appended to this PR. The test seemed to pass successfully... I then realised the file you provided didn't cause the issue. It needs to be a zip file containing an empty directory. I've updated the test and then it started failing.
29745|Didn't this feature used to work, or am I just failing to remember correctly? I was just going to report this as a bug, but maybe it never actually worked. I jump between different computer setups fairly regularly, so maybe I am just not remembering. Anyway, I found this dupe, and didn't want to submit a new issue. Thanks for your efforts @bpasero.  By the way, I think I would expect this feature to work the same way that `CTRL + +` and `CTRL + -` work. VSCode's UI deviates from many other UIs in that it scales well, so I think I'd expect this to scale the entire UI consistently with the keyboard commands.
29746|> Killing the process only if there is no selection  A very good idea
29747|Martin, if you need complete solution, let me know. Tnx. G.
29748|Your fix got close, but there was still the problem of opening the stream of an empty directory: the extract would never end. I've pushed another commit on top.  For some idiotic reason I failed to properly preserve history and ended up not merging this properly and did a rebase instead. You still appear as a committer, though: 74b8236929a9d77765a3d5c2ca165892bc1deb46  Thanks for your help! 🎆  Great job! 🍻
29749|Is it possible that you ran into this on top of your own changes from #7599? After the changes of that PR plus my commit on top (as explained in the PR) I can not reproduce this issue.  Closing as can't reproduce. But let me know if you still can and we'll reopen this. 👍
29750|yes, this appears to fix the issue.  Thanks!  On Wed, Jul 6, 2016 at 12:01 AM, Benjamin Pasero notifications@github.com wrote:  > @calam1 https://github.com/calam1 if you configure files.watcherExclude > to exclude all from watching (**) does it make a difference? >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7323#issuecomment-230671430, > or mute the thread > https://github.com/notifications/unsubscribe/AA4JXNf1K4Dc7yzLTopV-gTns8Csq-_3ks5qSzaWgaJpZM4Iv5F9 > .
29751|Ok this is: https://github.com/Microsoft/vscode/issues/3998
29752|Please add the variable to the Success Message, which extension actually was installed.
29753|@joaomoreno Thanks for the heads up :eyes: on the debugging. I will probably be looking into this tomorrow or Friday. I wanted to complete my train of thought for the changes on the previous commit message on the reset (I _think_ I'm almost done), and I will definitely get that PR rolling. I was committing things to that git branch, knowing that it was a little haphazard as I was learning, so it's no surprise if it's not easy to follow from the commit history. If the approach is all wrong overall when we do the PR, then no big. Now that I understand the overall architecture better, any alternative approach(es) should be easier to implement.
29754|"As you can see on the screenshot in the original thread coloring of attributes in the form tag are wrong.  ``` @model CloudQR.ViewModels.LoginViewModel @inject IViewLocalizer Localizer; @{     ViewData[""Title""] = ""Cloud QR""; }  <div class=""container"">     <div class=""row"">         <div class=""col-xs-12 col-md-8 col-md-offset-2"">              <h1>@Localizer[""PageTitle""]</h1>              <form asp-controller=""Account"" asp-action=""LoginWebForm"" method=""post"">                 <div asp-validation-summary=""All"" class=""text-danger""></div>                 <input type=""hidden"" name=""redirectUrl"" value=""/""/>                  @Html.EditorFor(x => x.Email)                 @Html.EditorFor(x => x.Password)                 @Html.EditorFor(x => x.RememberMe)                  <button type=""submit"" class=""btn btn-lg btn-primary"">@Localizer[""LoginButton""]</button>             </form>              <hr>              <a asp-controller=""Account"" asp-action=""Signup"">@Localizer[""SignupButton""]</a><br>             <a asp-controller=""Account"" asp-action=""ResetPassword"">@Localizer[""ResetPasswordButton""]</a>         </div>     </div> </div> ```"
29755|+1 this would be very helpful. The suggestion to use git submodules is very inconvenient. Would love to have this feature.
29756|We agreed in the UX meeting today to remove the `mix-blend-mode` and instead use rgba colors to avoid issues with anti-aliasing and other color side-effects that we cannot otherwise work around.
29757|We agreed in the UX meeting today to remove the mix-blend-mode and instead use rgba colors to avoid issues with anti-aliasing and other color side-effects that we cannot otherwise work around.
29758|To summarise, as of today: - views toggle focus - panels toggle visibility  I think we did this originally for the panel because we wanted it to dismiss very easily. For viewlets the behaviour is afaik very very old, and maybe we did not have a UX discussion on this after all.  I think changing the behaviour for views is a questionable idea because all users might be very used to be able to quickly jump between view and editor using the keybindings.  For the panels I think we have some room to change the behaviour because they are relatively new. Though I am not sure if our current behaviour is good or bad, so we might still cause issues changing it for some users.  At least, I give us +1 to be consistent (all views behave the same, all panels behave the same).
29759|Sounds good, I will move this to the backlog once we decide how to proceed with general workbench theming.
29760|A little more information: I don't see this issue if the prompt is brought up during my active session, meaning I don't initially see the prompt while working and then I do see the prompt.  I saw this when I log into my machine, switch to Insiders and the prompt is already visible.
29761|Perfect, thanks!
29762|An initial lightweight approach would be something similar to what [git-project-manager](https://marketplace.visualstudio.com/items?itemName=felipecaputo.git-project-manager) extension does. The approach could be to basically switch the context/root for what git sees as changes, but without changing the context/root for what file browser sees. This extension works perfect, just needs a tighter integration to make the switching faster.
29763|# NOTES  ## CJK support  We need to let this issue sit longer with the community to see if our users are experiencing this problem the same way @tyriar is.  If we try @tyriar’s suggestion, we’ll need feature flag that can be enabled/disabled in case it causes some problems.  Something we could try right now: we could add an animated gif that shows people how to change this font size with dev tools (and a code block they can copy).  They then can give us feedback and, if desired, share screenshots.  ## Tab drop visual feedback  We need to let this issue sit longer with the community.  Wait for +1s for the two approaches we could make.  We should do a mockup of dynamic sorting (browsers’ approach to tabs), and also of the vertical bar showing insert position (Atom’s approach).  The advantage to doing one of these solutions is that we can more intuitively allow a user to move a tab to the left or right of a tab.  ## Tab colors issues  We need to switch tab colors to rgba due to anti-aliasing issues that could diminish the user experience on Windows for some users, since `mix-blend-mode` disables an important anti-aliasing feature in Chrome.  @bgashler1 will make a PR and get it for the July milestone.  (See below paragraph for a related issue).  ## CSS 4, SASS or CSS Custom Properties?  We’re not sure how long Chrome will take to support `color-mod()` in the CSS 4 spec, and we also must support other browsers for the stand-alone editor—therefore, we can’t rely on it at this time.  SASS could be better, (because it would fix many other current problems, such as how verbose our CSS must be and simplifying the changing of colors/sizes across VS code consistently), but it does add another language to compile from.  Or, should we go with CSS custom properties since they are dynamic, or both?  We need to decide on improved styling technology not just based on tab colors but on all the issues that would be benefit from it.  ## Local commands should be visible with tabs-enabled  We agree that we must show local commands, to remove the “price for using tabs,” which is the problem of having to right click a tab each time to use these.  We discussed a few designs @bgasherl1 made and brainstormed a couple more.  One that made local commands appear in an editor widget seemed promising—but we need to address how we can show multiple widgets, such as find/replace and the local commands together (possibly through stacking?).  We will wait until next UX sync to discuss, so that @alexandrudima can give his feedback.  ## Panels  We will discuss this in a later UX sync when @sandy081 can attend.  ##   CC - @chrisdias and @Tyriar
29764|We all agreed this would be the best approach in UX sync today, and it's similar to how others do it (e.g. Mac OS X).
29765|Today in UX sync, we agreed to let this issue sit for a little bit to gather feedback from the community and to see if this affecting our users widely.  @Tyriar can you demonstrate with a GIF or some other instructions on how to change the font-size in Developer Tools for anyone interested in trying larger font sizes?
29766|👍 for asking feedback from CJK users. https://github.com/Microsoft/vscode/issues/5260 has a good list of people.
29767|We agreed in UX sync today that it would be good to get feedback on two different approaches: 1) dynamic reordering with animated tabs moving to make room (browser style) 2) using a vertical bar to indicate the exact position a tab will be inserted.
29768|Adding @joaomoreno because this PR touches a lot in tree and git land.
29769|@bpasero I think you posted the same issue number by accident.  Feel free to reference the existing issue and close this one :)
29770|@bgashler1 oh sorry, I meant: https://github.com/Microsoft/vscode/issues/7666
29771|The <kbd>Shift</kbd> solution could work, but might that cause people to accidentally disable the parameter hinting if they are just trying to capitalize something?
29772|@bgashler1 we have many places in code where the same SVG is referenced in a rule with `background` and `content` (e.g. https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/media/titlecontrol.css#L114 and https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/media/titlecontrol.css#L126).  Do you recall why for HC theme we do this? If we inline all SVGs, we end up duplicating the data URI value if we reference the image multiple times. Maybe there is a way to avoid this and still have a good looking HC theme?
29773|I am thinking of removing this `no matches` in both Search and Replace and introducing following behavior  In Search results,  - Editing a file so that it does not have any search results, will remove the file - Doing an undo will put it back in the results  In Replace results - Replacing all entries in a file (one by one or using replace all on a file) removes the file - Doing an undo will put it back in the results  Removing - File entry will not be added back if removed explicitly (Current behavior)
29774|I like that 👍
29775|Interesting, on Mac comparing the 2 application bundles I see this: - inlined version: `152.424.577` bytes (`158,9` MB on disk) - normal version: `152.386.366` bytes (`159,7` MB on disk)  So, in raw bytes we loose, but in terms of allocated disk space we win :)
29776|@joaomoreno I have confirmed that your proposed solution fixes my issue as well. Thanks.
29777|I have recently switched to vim which does this very well.  I can have one tab for each component, within which I can have splits for the JS, HTML, and CSS of that component.
29778|This comes from module (e.g. `soundcloud`) https://github.com/shawnlauzon/typed-soundcloud/blob/master/index.d.ts As I change it to named export: https://github.com/unional/typed-soundcloud/blob/c926158f8492b2cdd518aa93f612fc6a9a3f2cf4/index.d.ts#L9  it fails.  Do you have a recommendation on how to do it?
29779|If this zooms only the editor, shouldn't it be seperate from `Ctrl + +`?
29780|Sounds good.  It may be a good compromise if we didn't want to change the size of portions of the UI to just strip bold for Chinese, that way this (on Ubuntu):  ![image](https://cloud.githubusercontent.com/assets/2193314/16628447/a7eec7f6-4366-11e6-8bd0-283bc277b987.png) ![image](https://cloud.githubusercontent.com/assets/2193314/16628498/d615b07c-4366-11e6-9e85-0b967fef9cd6.png)  Becomes:  ![image](https://cloud.githubusercontent.com/assets/2193314/16628471/bfb4716a-4366-11e6-9bb5-52cbe65678e6.png) ![image](https://cloud.githubusercontent.com/assets/2193314/16628488/cb5ba7ea-4366-11e6-8d9a-7f254f3bbe13.png)  That way at least some detail comes through in the last character.
29781|If anyone wants to test out bigger/less bold titles on the sidebar you can add a style via devtools. 1. Help > Toggle Developer Tools 2. Add a new style rule by pressing the plus        ![image](https://cloud.githubusercontent.com/assets/2193314/16628619/5476fe26-4367-11e6-9db0-52a23dd288af.png) 3. Paste in this style:        ```    .monaco-workbench .viewlet .collapsible.header .title {        font-weight: normal;        font-size: 14px;    }    ```
29782|@bpasero:  Removing junk metadata and unused classes I think can be done automatically with this or another gulp package https://www.npmjs.com/package/gulp-svgmin  The reason why we historically started doing pseudo elements with `content` is because of Windows' high-contrast mode.  When in high-contrast mode, Edge and Internet Explorer both remove all background images (thus all of our icons that are used in background images, which is most).  To get around this we used the pseudo elements to insert images inline via `content`.  See this issue https://github.com/Microsoft/vscode/issues/3690 for more info and for a media query solution that would make it so would no longer need to do anything special for high-contrast theme to make icons display in background.
29783|Ah thanks. I didn't even notice that button. Maybe it would make sense to make that selected by default when a text selection is made at the time the find widget is opened?
29784|This issue was moved to Azure/azure-resource-manager-schemas#193
29785|Sounds good - would like to try it out before giving more feedback
29786|The schema at http://schema.management.azure.com/schemas/2015-08-01/Microsoft.Network.json#/resourceDefinitions/networkInterfaces specifies that dnsServers is an array of type string.  Moving to https://github.com/Azure/azure-resource-manager-schemas
29787|I believe that might have been the previous behavior but we have reverted that due to some reason - I can not remember why.
29788|I noticed it doesn't play well with some inline tags like <font> or <span> especially when they are chained together. Not only does VSCode not format these properly (in terms of indention) but the outlining functionality (toggle a block of code) is ruined by this too.
29789|This is only for the html formatter (Note the 'html.' prefix) From what I tried, the setting works. Setting false: ![image](https://cloud.githubusercontent.com/assets/6461412/16630923/aa5768e4-43bc-11e6-92f7-db870a5ff453.png) Setting true: ![image](https://cloud.githubusercontent.com/assets/6461412/16630945/c10e6010-43bc-11e6-96cb-feceeb69aa03.png)
29790|There hasn't been any changes recently, but that the strategy: To avoid that snippets are too prominent in the intellisense proposals: Offer a snippet only if the name matches the current word or if the completion position is after a whitespace/new line.  We had a more restricting policy for a short time where we would offer snippets only after a whitespace/new line, but had to change that again after user complaints.  The sort order changes were made by @jrieken. IMO snippets must go out of code complete and we should have a separate key.
29791|I think this may be due to the running Code - Insiders.exe mentioned above.  I just saw another case where I shut down Insiders, uninstalled it with Windows Control Panel then tried to install again.  Manual installation failed due to a running Code - Insiders.exe process even though there was no visible instance and I had uninstalled the product.
29792|@kierenj do you have a project you can share. This would ease reproducing this.
29793|@jeffijoe next couple of days.
29794|Moving to TS team since TS smartness is powered by tsserver.
29795|This issue was moved to Microsoft/TypeScript#9539
29796|Moving to TS.
29797|This issue was moved to Microsoft/TypeScript#9540
29798|Maybe it could go to June 2016 milestone ? Seems like I'm not alone with that issue.
29799|@bpasero I did reduced the set of commands to only 'copy path' but i have no idea how to do it in a clean way, so that none of the rules are broken (currently the copy path action has been duplicated).  @sandy081 You are right, it feels odd.  Since I don't know how to do it properly, I'm thinking about abandoning the pull request
29800|@isidorn I am not a fan of adding a task as a owner or source of an error. That seams bogus. All we can do is to add some counters to a task summary telling of markers got created. Or add an event. Since I'm out on vacation in July this can't happen for the July backlog. But feel free to provide a PR :-)
