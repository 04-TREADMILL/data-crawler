13901|@isidorn Can this be reopened or should I file another issue?
13902|@aeschli will do, sorry about that.
13903|@aeschli oh cool, so theme devs should no longer run into conflicts with the default themes? Can https://github.com/Microsoft/vscode/issues/2564 be closed then?
13904|@bpasero :+1:
13905|@jrieken when should i expect to get prompted to configure excludes then?
13906|@contreras-jorgev  Sorry, I wasn't clear Salsa fully supports node module resolution and it is more robust than it was before. Commonjs is the default module type, but I still recommend that you create a jsconfig.json, then you can easily leverage .d.ts files to get Intellisense for existing node modules. Pls see https://code.visualstudio.com/docs/runtimes/nodejs.
13907|"[Midori](http://midori-browser.org/), ""a browser for linux and windows"" identifies [itself as a macintosh running OSX](https://www.raspberrypi.org/forums/viewtopic.php?f=63&t=71898)... Oh how [I hate the state of user agents](http://www.growingwiththeweb.com/2014/04/get-your-nose-out-of-my-user-agent.html).  ``` User-Agent = Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-us) AppleWebKit/535+ (KHTML, like Gecko) Version/5.0 Safari/535.22+ Midori/0.4 ```  @gregvanl you can catch this by checking the UA for `Midori/\d+\.\d+`, though you will need to verify what the UA looks like when installed on Windows and Linux. Also I believe [you need to rebuild from source](www.hanselman.com/blog/BuildingVisualStudioCodeOnARaspberryPi3.aspx) as we don't build vscode for arm."
13908|Hmm... I tried `Reload Javascript` but didn't work.   I tried installing `typings install lodash --ambient`. Same issue.   ![image](https://cloud.githubusercontent.com/assets/2449568/13823026/2f6e5674-eb65-11e5-82b6-5ab7e474502d.png)
13909|Awesome, thanks a lot for making that change Alex!  It seems like this behavior should come automatically with no extra work on my side, correct?
13910|Duplicate of https://github.com/Microsoft/vscode/issues/2192
13911|This is coming in the upcoming release along with deb and rpm package files. If you're interested the file used is https://github.com/Microsoft/vscode/blob/master/resources/linux/code.desktop
13912|This will also address #3803, where users have had trouble seeing where the left edge of the code editor is and where subsequent tabs are (especially with smaller tab sizes).
13913|My experience with both Unity dash and the gnome dash is that it takes some time to pick up new installations. I'll double check on my instance by removing, reinstalling and restarting if it doesn't show up.
13914|@chuckries good catch, I will fix this tomorrow, unless it is urgent then let me know and I can look right away
13915|Could it by that your tsdk setting points to an older version of TypeScript?
13916|any time before next release is fine, but tomorrow is great! thanks!
13917|Not sure. I'm on 1.9.    ``` tsc --version Version 1.9.0-dev.20160130 ```
13918|@egamma, maybe [this](https://github.com/Microsoft/vscode/issues/3620#issuecomment-197183559) is a scenario that we want consider in the future.
13919|For me, startup is slow. Even if I have an instance of Code open, opening another instance takes a good 5 seconds. I'm on a MacBook Air
13920|//+ @chrisdias
13921|Tried the insiders code today. While I do think the column selection behavior is a major improvement over previous behavior IMHO the lack of virtual space is limiting the use. Will look if there's an issue for this.
13922|@mohsen1 is F1 > Reload Window also slow? because if yes, we could do some profiling.
13923|Discoverability of keyboard shortcuts could be improved potentially here and certainly elsewhere.  I favor @stevencl approach of helping users discover these shortcuts in the context of where they could be relevant, and applying this to other areas of the product.  This is an experience we should design that could help users improve their productivity and ease of use throughout the product.  @anseki, I noticed that Atom and Sublime do not include your requested feature by default, but they are installable through optional packages/extensions.  To @bpasero's point, I think an extension makes perfect sense for people who would really like to see this particular feature.  How hard would it be to get this API?
13924|Can you check whether you have tsdk  defined in your user settings. This was required to enable Salsa in January.  Notice the commandline tsc version has nothing to do with this. Code ships with a version of tsc.
13925|@dbaeumer is this our edit infrastructure or the TS formatter?
13926|@egamma   ``` js /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ function upper1(value) {     return value.toUpperCase(); }   /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ var upper2 = function(value) {     return value.toUpperCase(); };   /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ const upper3 = (value) => {     return value.toUpperCase(); };   var v1 = upper1('hey');  var v2 = upper2('ho');  var v3 = upper3('lets go'); ```  Intellisense with a function declaration (upper1)... ![fd completion](https://cloud.githubusercontent.com/assets/5047398/13824703/193ed274-eba7-11e5-9280-4025f6200803.PNG) And hover... ![fd hover](https://cloud.githubusercontent.com/assets/5047398/13824714/21e2a75c-eba7-11e5-9057-7bcaa24a2b15.PNG)  Intellisense with a function expression (upper2 & upper3)... ![fe completion](https://cloud.githubusercontent.com/assets/5047398/13824735/32638c18-eba7-11e5-8c56-7d4a6e50f6d1.PNG) And hover... ![fe hover](https://cloud.githubusercontent.com/assets/5047398/13824737/35c07cae-eba7-11e5-82b8-d6cc972c5623.PNG)  This is VS Code 0.10.11 with a jsconfig.json.
13927|"Reproduced the issue. I have a feeling only packages installed via the application installer GUI through the official repo show up in the list, similar to how launchpad only lets you use some features when installing through the GUI. It's definitely installed (`yum list installed | grep code-alpha`) and can be uninstalled through the command line without issue so I'll close this off (`yum remove code-alpha.x86_64`)."
13928|This will also be relevant to #4100
13929|Yes, it's slow when reloading as well. From CLI, opening the shell takes another 2~3 seconds on top of this  Screen capture https://gfycat.com/NeighboringGloomyDassie
13930|pinging @stevencl for feedback.
13931|@jrieken I've seen the bad quality issue before but for a different reason. Considering it only happened one time I would assume Firefox was playing with the download file at that point which is why it couldn't access it or something. Seems to me more like either an OS or Firefox-level issue so closing.
13932|@bpasero yes, the zip doesn't contain the launcher. I'm wondering whether we should even ship the zip at all anymore since the deb and rpm files are just archives, including everything in the zip plus more. See https://github.com/Microsoft/vscode-website/issues/73#issuecomment-195578442
13933|[Process Hacker](http://processhacker.sourceforge.net/) will provide many more details than the default Windows process explorer. I suggest to use that to figure out what those processes are and how they were launched.
13934|cc @chrisdias
13935|@NickHeiner, you probably pasted that code in, since we recommended to do it. Can you undo what you did in the instructions on https://code.visualstudio.com? This will make it work.  We should warn users about this.
13936|@Tyriar well we also ship the zip for windows for those people that really want to have just the app (e.g. also for portable usecases), so I think we should not offer the zip as primary download on the web site but as alternative. @chrisdias fyi
13937|"@mohsen1 can you open dev tools (Help > Toggle Developer Tools), click on the Profiles tab, click on the ""Start"" button, run the ""Reload Window Action"" and then press stop and then ""Save"" on the left hand side and attach the file (as zip is fine) here?"
13938|Our latest insiders build is out and I would appreciate if people could give it a try on this issue: https://code.visualstudio.com/insiders
13939|"@bpasero I still had the previous insiders build, can I just run that and do ""check for updates"", or do I have to update the build from the link you gave?"
13940|[CPU-20160316T123357.cpuprofile.zip](https://github.com/Microsoft/vscode/files/176742/CPU-20160316T123357.cpuprofile.zip)
13941|Will try and get back to you. To be honest I am seeing less of the VSCode crashes nowadays. Atleast it doesn't crash everyday.  I can make it crash by openening a huge file with million plus lines minified js and scrolling up and down repeatedly.  But I know what is pushing the limits of editor.  Whatever you have been adding as magic sauce is working for me.  On Wed, Mar 16, 2016 at 12:29 PM, Benjamin Pasero notifications@github.com wrote:  > Our latest insiders build is out and I would appreciate if people could > give it a try on this issue: https://code.visualstudio.com/insiders >  > â€” > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-197503185
13942|@gwynjudd you should be able to update if the VS Code logo shows up as green logo:  ![image](https://cloud.githubusercontent.com/assets/900690/13826262/dc696f34-ebb6-11e5-8c61-c83c63f4b38b.png)
13943|@nojvek yes that is pushing the limits a bit. for the march release we did explicit memory testing to find areas where we can improve. the insiders build includes some of those fixes (not all, we did some changes yesterday and today that are not yet in). so just curious if it makes any difference for people that see this...
13944|"I actually don't know how to remove this. It's not in any of my files like `~/.bash_profile`. I tried the ""Shell Command: Uninstall 'code' command in PATH"" command, but that just made `which code` return nothing. `type code` still returns the same result."
13945|@bpasero thanks I've done that and I'll let you know how it goes
13946|I'm having some trouble getting it to work at all on OSX or Ubuntu 15.04 VM. I have tried several things. I quit Spectacle to make sure nothing was hijacking my keystrokes. I also tried it reinstalling it: Version 0.10.12-insider (0.10.12-insider). Do I need to set up keybindings for it in keybindings.json?
13947|"@mohsen1 any extensions installed? does it reproduce with starting from the command line with ""--disable-extensions""?"
13948|I did comment the function code () ... , but I'm still getting this question every time?
13949|moving cursor up and down is slow for me.
13950|just wanted to add that [TWIG pack](/Bajdzis/vscode-twig-pack) is basically what I needed. It's syntax is consistent with Nunjucks and it has emmet and proper HTML handling
13951|I have a couple of extensions  ![screen shot 2016-03-16 at 12 54 29 pm](https://cloud.githubusercontent.com/assets/543633/13826852/cc30db7e-eb76-11e5-9cc9-da3ac5eab415.png)  Can't try without extensions since my `code` alias does not accept an argument...
13952|As said we will loose auto detection of Jake if we remove it. And I doubt that the .sln workspace all use task :-). I also agree that the description doesn't add a lot of value but it makes the dialog look nicer. Why do we have to optimize for the number of entries in the list. I have for example an request to add an entry for npm as well. And if we allow extension to contribute to it we don't have control over the list anyways.   Don't get me wrong I am in for a good in the box expierence. I simply don't see why making the list as short as possible and moving everything to the docs helps with that.
13953|Salsa formatter. Moving.
13954|This issue was moved to Microsoft/TypeScript#7548
13955|@mathiasdose  I made an extension for require auto-complete to accomplish this until it's added to Salsa. https://marketplace.visualstudio.com/items?itemName=sensourceinc.require-complete
13956|No, it was on my physical machine. This issue is intermittent so keep it low priority.
13957|With #4169 we started detecting that you may have commented it out and wouldn't pester you about it, but that will only come next release, unfortunately.  You'll have to remove the line for now.
13958|This is odd. `~/.bash_profile`, `~/.bashrc`, `~/.zshrc`... it's in none of those?  Which shell are you using? You can figure it out by running `echo $0`.
13959|"how about making it consistent with task's `""showOutput""` setting? `""always""/""never""/""silent""` but `""DEBUG""/""REPL""/""ALL""/""NONE""` for `""externalConsole""`? IDK how backward compatible it would be however. Depends on weather `""externalConsole""` expects strictly Boolean or just `!=false`. But anyway I find it also annoyng that if I'm asking for external console I still get internal also."
13960|Thanks!
13961|@aeschli I still think the best behavior here is to merge. I will assign this to you, please let me know if you disagree.
13962|I'm was on Node Version 4.3 I'm upgrading to 5.8 now to see if it will work.  The config is working as expect now. Seems one of the previous updates fixed it (or it was just some strange isolated intermittent issue) But it is still silently crashing b/c of the mongoose module. Which, as stated before, works fine with a normal npm start.  Will update in a bit.
13963|@Reanmachine totally agree, the customizable mouse shortcuts is captured in this issue https://github.com/Microsoft/vscode/issues/3130.
13964|It seems using Node Version 5.8 I no longer have the issue. The debugger launches and runs as expected and I'm able to successfully use break points and what not.  @weinand If you want to see the mess that is my side project, https://github.com/chanpod/bossCollection  I didn't test Node V4.4 and Node still has that as a recommended version. I'll test it when I get home to see if I still experience the same issue.
13965|"I didn't change my system default setting. I recently upgraded to Windows10 so I think it is with the default system setting. After your response, I tried by changing system display setting for ""ClearType Text Tuner"" as below but didn't see any difference. ![image](https://cloud.githubusercontent.com/assets/17735796/13828480/fac1ca22-eb7e-11e5-8aef-5cb798898e9b.png)"
13966|It should...
13967|"@alexandrudima @joaomoreno can you please remove the ""_needs more info_"" label from this issue? Thanks"
13968|@mrmckeb afaik this is just exploratory and we're not committing to anything yet. The main concern of most people seems to be wasted effort in building out this when it's not adding any new real functionality, just an alternate UX. It could also potentially be more confusing have two different editors for the same thing.  Extensions are another beast which would probably need to be handled quite differently. I created an issue for that too https://github.com/Microsoft/vscode/issues/3356
13969|"At the end of the day what I want to do is help customers be successful while keeping the product consistent and streamlined.  I'm making a couple of assertions to achieve this goal.  First, we have clear data that indicates jake usage is extremely low. So low in fact that the presence of Jake in the list only adds what I will call ""noise"" to the list. It doesn't help the vast majority of people be successful and it doesn't keep the product streamlined. This issue is about removing Jake from the list, but I assert we should remove the jake detection logic from the code base as well.  More code means more bug opportunities (does anyone test for Jake, are there new versions, do we have to fix bugs here, etc.) and more download and code loading size.  Every bit counts.  Second, I don't see having multiple TypeScript entries provides enough value to keep all of them in the list. The difference between each type of TypeScript task is very subtle, in some cases it is simply an additional parameter. Having documentation that discusses why you would want one or the other option would be much more valuable than having four subtly different entries in the list, which is why I suggested to update the docs. Also, we teach rather than do, making people more successful over the long term. Having four TypeScript entries complicates the list. Why do we have four TypeScript entries and not multiple variations for gulp?  Again, I am trying to keep the product consistent and streamlined.  To help close this I suggest we establish a principle which says there is one entry for a task type (e.g. grunt, gulp, npm, etc.). Any variations on how to set up tasks for these should be covered in the documentation. Following this model would keep the list clean (one entry per type) and would also support adding npm to the list, as is being requested."
13970|@bpasero could a `find` for `(term)*` be run in parallel and those result(s) shown while the fuzzy search is happening to speed up an ideal search?
13971|"I spent 20 minutes on this error) I copied the way from explorer  :  ""D:\xampp\php\php.exe"" But the right way is: ""D:/xampp/php/php.exe"""
13972|@bpasero Would introducing the new way, deprecating the old way and notifying known consumers not be a better route? Otherwise this is technical debt as there is an arg that has inconsistent usage others like `--locale`.
13973|@chanpod thanks for verifying your project with a newer version of node. Yes, some versions of node have obscure issues with debugging. Whenever you see a problem, it is always a good idea to try an older or a newer version.  Does the crashing b/c of the mongoose module still occurs for your github project and node 5.8? If yes, I would like to investigate it.
13974|"Same thing for the ""Tweet us your feedback"" option.  <img width=""477"" alt=""screen shot 2016-03-16 at 3 27 11 pm"" src=""https://cloud.githubusercontent.com/assets/466713/13829253/a460eb9c-eb8b-11e5-8929-1f131c77275f.png"">"
13975|"It's the same speed. I used this command:  ``` open -n -b ""com.microsoft.VSCode"" --args --disable-extensions ```  I use fish. I am too lazy to fix the alias to pass flags to actual executable..."
13976|FYI the insiders build with the above change is out now https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build
13977|"Also, note that this 1px outline has an `outline-offset: 0`.  I think it looks fine, but technically it would be better if it was `outline-offset: -1`, so it's exactly covering the current outline.  However, in order to do this, we would need to put a `z-index:0` or something like that on its child `<div class=""overflow-guard""></div>` element, otherwise it gets in the way.  I left this change out, because I didn't want to take a chance on introducing a weird bug right before release."
13978|I created a pull request, because I felt the change could risk introducing some unexpected side-effect.  Please verify and merge if it looks good.  If not, please feel free to reopen.
13979|Note the only reason I removed `detached: true` was to prevent the cli from terminating. It looks like that's now handled by the `exit` variable.
13980|@bgashler1 attach an image?
13981|Looks good :+1:
13982|@mrmckeb I wonder if a prototype of @bgashler1's example could be started now by using a similar technique as @egamma pointed out to @drywolf https://github.com/Microsoft/vscode/issues/3011#issuecomment-195823705  Then later on down the line it could be migrated to a json viewer extension if and when it becomes available (i.e. like the current markdown viewer).
13983|"After removing `""typescript.tsdk""` from my settings this was resolved."
13984|I just saw this linked from the 'Add tabs' issue, and wanted to comment because I just added this very idea to the UserVoice.  If you treat the open files as a stack so that closing the latest brings you back to where you were in the previous file, then that'd be awesome (and expected) default behavior.
13985|Maybe if you draw boxes around the filenames in the Working Files list, people will see that it's functionally equivalent to left-sided tabs... :-)
13986|@chrisdias  ![focus on editor new](https://cloud.githubusercontent.com/assets/11839736/13831530/8d9c3bc2-eb91-11e5-8146-30fb6474f955.gif)
13987|And here are the hc-black and light themes. ![screen shot 2016-03-16 at 4 11 58 pm](https://cloud.githubusercontent.com/assets/11839736/13831557/d3b49ffa-eb91-11e5-9368-c3aec180992d.png)  ![screen shot 2016-03-16 at 4 11 11 pm](https://cloud.githubusercontent.com/assets/11839736/13831548/bf46d2cc-eb91-11e5-92af-1230fa6c75fc.png)
13988|@ChrisMiami: except [it's not](https://github.com/Microsoft/vscode/issues/224#issuecomment-166931316).  (I'd potentially be wiling to live with it if it were.)
13989|@isidorn: Does this issue apply to all extensions or is it specific to the Go extension?
13990|"@bpasero I'm not able to get focus onto these buttons, even in the ""Tab moves focus"" mode. Perhaps we need to create an issue on this?  However, I did add styling rules for them.  I manually pinned the focus using Developer Tools.  <img width=""517"" alt=""screen shot 2016-03-16 at 4 59 38 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/13832397/20c17406-eb99-11e5-84c2-1b1cd2cc52fb.png""> <img width=""512"" alt=""screen shot 2016-03-16 at 5 01 41 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/13832399/20e4336a-eb99-11e5-87b2-28d15926d603.png""> <img width=""546"" alt=""screen shot 2016-03-16 at 5 02 36 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/13832398/20e34252-eb99-11e5-92be-a79b35ee2068.png"">"
13991|assigning to @bpasero for the focus issue.
13992|LOL  On Thu, Mar 17, 2016 at 4:59 AM Kenneth G. Franqueiro < notifications@github.com> wrote:  > @ChrisMiami https://github.com/ChrisMiami: except it's not > https://github.com/Microsoft/vscode/issues/224#issuecomment-166931316. >  > â€” > You are receiving this because you commented. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-197603728
13993|@isidorn, I addressed your feedback from yesterday. We performed the testing tasks for different platforms based on the items in `Debugging JavaScript` *(checked off the items in the description of this PR).  For the existing debuggers, we tried that the behavior remains identical. For new debuggers that support `allThreadsStopped`, the multi-threading support kicks in and the experience is as we expected.  Let us know if you need anything else from us.
13994|"Hi @alexandrudima , do you know if something has changed prior to 0.10.11 about it?   I had an extension [Copy Word in Cursor](https://marketplace.visualstudio.com/items?itemName=alefragnani.copy-word) that is meant to replace the `Copy` and `Cut` commands when  there is no selection. It automatically selects the word where the cursor is, and copies/cuts to the clipboard, but I just noted that it is not working anymore :cry: . It detects and select the word, but when I call `vscode.commands.executeCommand(""editor.action.clipboardCopyAction"");`, it does not respect the new selection, and the whole line is copied to the clipboard strangely, if I use the `clipboardCutAction` command, it _cuts_ the selected word, but the clipboard is filled with the entire line, again.  I don't know if the commands itself changed, or if I have to do something else after updating the `selection`. The code is basically:  ``` TypeScript   const cursorWordRange = doc.getWordRangeAtPosition(selection.active);   var newSe = new vscode.Selection(cursorWordRange.start.line, cursorWordRange.start.character, cursorWordRange.end.line, cursorWordRange.end.character);   editor.selection = newSe;   vscode.commands.executeCommand(""editor.action.clipboardCutAction"");  ```  Thanks for your help."
13995|Here's something from Douglas Crockford on using comments in JSON config files - https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr  Myself I prefer something like yaml or cson for configuration which allow comments and no need for the extra chaff i.e. comma's, braces etc..makes it much more human friendlier to read.
13996|"I tried installing a vim plugin for vs code and found it unusable as well; simple bindings didn't work (ie. `yyp`). I understand it's a work in progress. Therefore, I'd like to provide some feedback on what I'd expect out of a vim plugin. :)   Here are the important key bindings for me: - basic commands need to work (`yyp` `ddp` `p` vs. `P` `cc` `C` etc...) - simple searches (`*` to find all instances under cursor and `#` to search in reverse) - finding text with `/` and `?` - quick edits are crucial (`ci""` `di""` `vi""` `va""` `ciw` `daw` `cit` `dit` `ct]` `cf<char>` `de` ...) - marks need to work (`ma` / `'a` and `mA` / `'A`) - command line mode (`:%s/find/replace/g` and `:sp` `:w` `:wq` `:e filename` etc...) - macros (`qa<do stuff here>q`, then `22@a`) - named registers (`""ayi(` then `vi(""ap`) - :+1: for supporting my `~/.vimrc` or `~\_vimrc` configs  Everything I've listed above are very important bindings for me, and I'm assuming most Vim users. I personally use them everyday. They are considered ""standard vim functions"" in my eyes. I develop in MS Windows 90% of the time and use [ViEmu](http://www.viemu.com) in Visual Studio 2015 and SQL Server 2014 all day. it's an absolutely stellar product, and I can't live without it! I did use VsVim for a while and it was great as well. If I remember correctly, it lacked in command line mode for me and had some other small issues with recording macros. I'm sure many of my ailments have since been fixed. Regardless, I currently use ViEmu and have very few complaints.  The biggest problem I've had with all Vim plugins is the way vim bindings work against standard windows shortcuts. For example, `<c-v>` is typically paste, but in vim it's for visual block mode. There are other bindings as well that I always butt heads with like `<c-o>` for traversing jump lists and not ""File Open"", `<c-n>` for word completion and not ""File New"", `<c-y>` for scrolling.. It's a tricky puzzle for sure.   Thanks for creating this case and requesting feedback from all the Vim users. I sure hope to see a solid vim solution for VSCode. In the meantime, I'll continue to use Visual Studio 2015 with ViEmu."
13997|@bpasero The style change is in PR #4339
13998|"I am not so worried bout this as long as a user can find how to use this feature with ""--help""."
13999|And we would also loose a feature we have now: you can open multiple files with their line/col information.
14000|@Tyriar in my experiments using `find` or any other external process did not yield significant speed improvement over what we do now. the reason is that we do quite some heavy pattern matching and other things with the result before it even reaches the user. The better fix is to keep the list of paths in memory once you ran the search once and reuse that information.
