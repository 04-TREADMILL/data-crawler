12401|"I think it is the latest Windows version. I have clicked on ""Check for Updates"" for many times, right before searching the forums and posting it here, and it says that I'm on the latest version."
12402|+1
12403|This looks like `npm` is doing something wrong. Which `npm` version do you have?  ping @bpasero @aeschli
12404|We also recommend to use `npm@2`. You can install it with `npm install -g npm@2`.
12405|I think there is a misunderstanding, <kbd> ctrl k cltr i</kbd> is the keyboard shortcut that brings up the tooltip for the symbol located next to the cursor. You do not need to use the mouse at all!  This keybinding also works for regular hover - same way as visual studio is doing it.  If this does not work for you please reopen the bug.
12406|It can't be, [the hygiene specifically checks for `CRLF` and barfs if it finds one](https://github.com/Microsoft/vscode/blob/master/build/gulpfile.hygiene.js#L127). So it is indeed the `CRLF` that occur after the header that trigger the failure.  `.gitattributes` is a good idea which we never looked into. I promise to do that soon: #3914.  Meanwhile, if you are on Windows and want to use `CRLF` for some reason, you can still set `core.autocrlf` to true, [since the hygiene listens to that](https://github.com/Microsoft/vscode/blob/master/build/gulpfile.hygiene.js#L207).
12407|Oh, I just realised what you mean. You have a file that is **all** `CRLF`, including the header. So yeah... the hygiene would also barf at the copyright header.  Just use the `auto.crlf` setting and you'll be fine.  For the future, I believe `.gitattributes` will definitely be the solution.
12408|What version **exactly** of git do you have? Is it also slow in the command line: when you open the Command Prompt and run some git commands there, for example? Can I have access to the repository?
12409|[It comes from the context service now](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/darwin/cli.contribution.ts#L62). Any other idea?
12410|@isidorn: you can have a handler on the returned promise. If the task can't be run or fails to start the promise resolves in an error. Could that be the case?
12411|I'm using `npm@3` because it has support for flatter node-modules folders, without which I can't work on most of my internal projects - too deep nesting breaks on Windows due to the MAX_PATH bug.
12412|Valid point. Make sure you have the latest `npm@3`, clean the repository and retry the `.\scripts\npm install` action.  If you do have the latest, we won't fix it very soon, since we're not using `npm@3`, it'll be a bit out our radar for a while.
12413|@isidor it is not via broadcast but basic IPC to the main side and it goes like this from the renderer:  ``` javascript import {ipcRenderer as ipc} from 'electron'; ipc.send('vscode:closeExtensionHostWindow', 'extension development workspace path'); ```  the extension development workspace path is used to find the window that runs this extension.
12414|:+1: (commenting to get updates on this)
12415|OK, that'll do. Just wanted to be sure that you were informed of this occurrence in case it came up later.
12416|@joaomoreno while not encouraged, in this case you can use our old flags style: https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/flags.ts#L10 and how they get filled in: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/index.html#L191
12417|D'oh! I don't know why I didn't see this before.
12418|No problemo, just glad we got the confusion out of the way 🐙
12419|I think it's a regression in the latest update (0.10.10?). Pretty annoying :)
12420|@stevencl @Tyriar here are some outcomes, first with 2px border, second with 3px border. would like to hear if you think the border has any impact or rather we should pick a different color?  2px: ![image](https://cloud.githubusercontent.com/assets/900690/13640935/ebcde784-e616-11e5-84d2-e5a96db1e708.png)  3px: ![image](https://cloud.githubusercontent.com/assets/900690/13640941/f05fc560-e616-11e5-8b4c-5122105ff687.png)
12421|@jrieken please assign to @dbaeumer after you are done.
12422|Thanks Ben. The 2px border looks fine to me. But I would need to see it in action as the challenge is finding it when looking at the whole screen, working on some task.
12423|@AndyYSWoo curious, does it happen when you are not adding any file to working files?
12424|@alexandrudima I need to add that only this particular jade file makes VS Code freeze. I could open every other jade file in the project without any issue.
12425|Worked for me in 10.9. and broke with 10.10.  Auto formatting throws an error with the ESLint configurations defined in our project (_space-before-function-paren_). As I rely heavily on auto formatting of trailing spaces and objects I had to downgrade Code.   Though I couldn't find an option for the space in anonymous functions, is this due to the removal of the functionality behind `javascript.validate.lint.*`? In general, does/will Code's auto formatting derive rules from a workspace's `.eslintrc.js`/`.jshintrc`?
12426|"So the example that the user provided still can crash vscode because it is a quadratic function which creates new output, shows the output channel and appends the output. However the following can no longer crash / slow down vscode  ``` const outputChannel = vscode.window.createOutputChannel(""Test""); setInterval(() => {     outputChannel.appendLine(""Stop working please...""); }, 10); ```"
12427|@egamma Thanks it works :+1:
12428|@dbaeumer just checked that is not the case, the promise simply does not return. Neither the success nor the error case trigger
12429|VS Code 0.10.10 and Node V5.6
12430|This would be a really cool feature. I'm currently using Webstorm for Angular 2 development - there you can just type `util1` in your code and then hit `ALT+ENTER` which would suggest adding an import... Something like this would be quite nice!
12431|@stevencl you can change this in https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/media/shell.css#L59 for the light theme and https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/media/shell.css#L71 for the dark theme. Just replace the 1px in outline and outline-offset with other values.
12432|Sorry, have to reopen, would like to understand why we still crash and if we can prevent that.
12433|@isidorn What if you set the interval time to 0?
12434|You can close this. I appreciate the help, though, considering it didn't appear to be anything really Code related :).  My git install actually was older, and i don't believe i had the cache option before. In addition to that my global .gitconfig was stored on a very slow network drive (admin set $HOME that can't be changed), which has since been moved. Everything is moving along nicely now!
12435|Ok, the cause of the crash was the multiple calls to show(), now I protect against that. Please note that the original sample provided by @digeff still crashes after some time since it converges to infinity.  @digeff regarding interval 0 https://stackoverflow.com/questions/7648557/setinterval-behaviour-with-0-milliseconds-in-javascript
12436|@yleflour I can reproduce on Windows too. Thank you for filing this!
12437|@bmoeskau very sorry, I realized my instructions were not good and I have updated them. the output we see on the console is coming from a different use of chokidar, not the one from VS Code. the new instructions are slightly different but not much and we can see if chokidar is running by looking at the developer console within Code. Can you retry please?  Meanwhile I have talked to the chokidar developers and got confirmation that chokidar does 1 full scan of the directory on startup. I can reproduce this, however my CPU goes down after a while. Are you saying that CPU stays high forever and never calms down?
12438|Fixed by @alexandrudima
12439|@Kane-Sendgrid @planetexpress69 very sorry, I realized my instructions were not good and I have updated them. the output we see on the console is coming from a different use of chokidar, not the one from VS Code. the new instructions are slightly different but not much and we can see if chokidar is running by looking at the developer console within Code. Can you retry please?
12440|@awgeorge @ccimage @chiangf sorry my instructions from yesterday were not good and I have updated them.
12441|Fixed by half the team
12442|@isidorn What if we use process.nextTick instead of interval 0? (Basically, I want to simulate adding output as fast as possible, while not yet converging to infinity).
12443|@ZombieProtectionAgency is it possible to share this workspace with me?
12444|@digeff if I setInterval for 1ms it does not crash any more with the latest fixes
12445|I used to have function and method highlighting but it's gone since the update that added code-folding
12446|:heart:
12447|Thanks for coming back with more feedback. Is your last comment captured in bug #3669? For the previous comment - regarding subissue 2, I can not reproduce this. So I have a watch task, I start debugging again and you get prompted? I do not see this. Can you please create a new issue if you see this on latest vscode (0.10.10) with reproducable steps - it would be great if you could share your repo.  Thanks
12448|"@fariyAhill the problem is that your program expects file 'text.txt' in the current working directory and that you are using different working directory in your two setups.  When running `node index.js` from the command line, the current working directory is where index.js lives. Since in this case the contents of the file is printed correctly, that means that your 'text.txt' lives in the same directory as 'index.js'.  In contrast you have opened VS Code three directories above the place where 'index.js' and 'test.txt' live. This location defines the 'workspaceRoot'. When launching a program from VS Code the current working directory is automatically set to the `${workspaceRoot}`. Since there is no 'test.txt' in that place, 'index.js' fails and prints 'undefined'.  You can fix this problem either by opening VS Code on the directory 'FileSystem' or you can set the `cwd` attribute in your launch configuration to `""cwd"": ""${workspaceRoot}/github/Node.js-Notes/FileSystem""`."
12449|I've tracked it down to right before calling `onig_search` with the regexp `(mixin\s+)([\w-]+)(?:(\()((?:[a-zA-Z_]\w*(?:,\s*)?)*)(\)))?$` on the first line `mixin blockBtnRubric(link,libelle_line1,value_line1, libelle_line2,value_line2,picto )`
12450|Using https://regex101.com/#pcre with that regex and that string errors with `Catastrophic backtracking`
12451|"As another example, Ant build.xml files can have large text blocks where the content doesn't adhere to indentation of the XML. Such as  ```     <echo file=""myfle.txt""> totally unindented text        goes here  and breaks VS Code folding     </echo> ```"
12452|Looks like it is indeed an issue with the grammar davidrios/jade-tmbundle/issues/68
12453|fyi @aeschli
12454|Yay team work  ![teamwork](http://i.giphy.com/bCd3nrE4UiJqg.gif)
12455|@alexandrudima please update this test plan item as you see fit
12456|:-1:
12457|Very happy to read that! Keep the feedback coming!
12458|fyi @egamma stable candidate
12459|@bpasero feel free to add details if you are feeling creative
12460|@stevencl Once you focus an editor, pressing <kbd>Tab</kbd> inserts tab characters (i.e. does not move focus). This means the editor is trapping focus, you cannot focus the next element in the tab ring. We currently allow you to escape the trap by toggling what <kbd>Tab</kbd> does by pressing <kbd>Ctrl+M</kbd>. Once you are in an editor and you press <kbd>Ctrl+M</kbd> the specific editor you were in allows you to escape it (<kbd>Tab</kbd> moves focus). However, once you land on another editor, you are trapped again and you must do it again if you want to focus the next focusable element.  If you land on a readonly editor, then focus is not trapped since you cannot edit it.
12461|As far as I can tell, this is compliant with the accessibility docs, as it provides a means to escape a focus trap, but the means are local to the current editor. In other words <kbd>Ctrl+M</kbd> is a local toggle and not a global one. The question was if you know how VS handles this?
12462|@snaquaye Nice catch!
12463|@Nimzozo Thank you! I was also able to reproduce, also randomly by resizing the split editors a lot.
12464|:+1: we should compute all colors from the theme or invent new theme keys and not have any default left overs when switching to a theme.
12465|fyi @jrieken @dbaeumer
12466|@SamVerschueren I've just added a way to do that this morning via `textEditor.edit()`.  We thought to put it on the `editBuilder` since it changes the document content.  fyi @jrieken
12467|The relevant commit is 45906d91e44bc4e62e917184933ec3e92dbacc26
12468|"Based on the updated instructions I still see "" fsevents: true"" in the bash command line output, but in the UI developer console I don't see anything after the ""listening on port 5870"" message. I've tried console logging from within various instance methods of `FsEventsHandler` and I never see anything, but not sure what's expected.  As I mentioned previously, depending on the total number of files, I do see the CPU go down after a while too, but the more files there are, the longer this takes. I measured a very clear increase in CPU thrashing time each time I added a batch of 5k files to the project root.  As an additional data point I also added the ""real memory"" column to the activity monitor output and (maybe as expected) memory use also climbs dramatically along with CPU use while this occurs, and then also drops to normal when it recovers.  <img width=""484"" alt=""screenshot 2016-03-09 11 32 24"" src=""https://cloud.githubusercontent.com/assets/194167/13644592/2b9b0606-e5ec-11e5-8ad2-a3ea469add6f.png"">"
12469|fyi @aeschli The border should only be shown in vs light / dark themes, not in other themes.
12470|How is the intellisense and syntactic recognition of Salsa different from the pre-Salsa engine?  If there isn't much difference then I'm fine with simply disabling Salsa's validation.  However, if there is a big difference would it be possible to have an option to continue to use the pre-Salsa engine for intellisense at least until Salsa matures a bit?
12471|"@isidorn The main problem is fixed, so for example if there is a compile error during a make, Code won't try to run the target app. However, after further testing, I found that with other types of problems, e.g. preLaunchTask not found in tasks.json, or the executable (make, etc) not found, then Code still tries to launch the target app, which is probably not what we want.  In that case, Code displays a one-line error message ""Error Could not find the preLaunchTask 'make'"" but it's easy to miss that when the user's app runs. It can cause confusion because it may be an old version of the app, since it was not rebuilt with make.  So there is still a problem which could trip people up while getting the Code environment set up. Code should give a (perhaps more visible) error message and NOT launch the target app."
12472|I have come across a similar issue.  Intellisense will work as described (in the release notes) with a function declaration:  ``` js /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ function upper1(value) {     return value.toUpperCase(); } ```  But will be limited (see previous comment be @egamma) with a function expression:  ``` js /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ var upper2 = function(value) {     return value.toUpperCase(); }; ```  My preferred ES2015 style behaves the same:  ``` js /**  * Transform a string to upper-case.  * @param {string} value The string to be transformed.  * @returns {string} The upper-cased string.  */ const upper3 = (value) => {     return value.toUpperCase(); }; ```  Also, it looks to me that `@returns` is not being parsed, or perhaps it's just being poorly presented.
12473|"(Hopefully) new VSCode convert here! One of my most used commands in sublime is `shift` + `cmd` + `l` which sublimes calls 'Split into Lines' (under ""Selection"" menu).  It creates a new cursor for each line of a given selection. Does this functionality exist in VSCode? I cannot see it in the list of missing bindings @waderyan compiled above, but I also cannot seem to find it in VSCode."
12474|:+1:  on computing colors as a default, but we should also allow theme creators to specify these values explicitly for the theme if they so desire.
12475|@JamesHenry not sure how I missed that one. Added now. I don't know of an equivalent command in VS Code.
12476|Great, thanks. Consider this my +1 :)
12477|@stevencl suggested the following:  > Reducing the width and adding  the line number highlight sounds like it would help. >  > One of the commenters posted a screenshot asking what would happen when pressing the left arrow.  With the line highlight it would look something like this: >  > ![image005](https://cloud.githubusercontent.com/assets/11839736/13646931/94a4d088-e5e6-11e5-8765-83bac61d2569.png)
12478|Awesome, thanks! The only thing that's missing for an entire `EditorConfig` integration is `charset`. There is already an open issue for this https://github.com/Microsoft/vscode/issues/824
12479|@anseki, that actually works pretty well and interestingly is (appearance-wise) exactly what I imagined a solution to be.  Perhaps having 0 in there should be a default?  @bgashler1 the line number highlighting might help for navigation the ruler line gives a continuous sense of nesting/indentation.
12480|"If i have variable like: $string = 'my string'; and on next line i start writing ""$st"" or ""st"" - there is no any suggestions like $string variable.  ![image](https://cloud.githubusercontent.com/assets/5619582/13648673/8d9be2ac-e642-11e5-9fe4-759729297eb9.png)"
12481|I'm actually fine with the terminal being separate by default. How hard would it be to make an extension that adds this though? That would be awesome.
12482|Problems reported above **still remain**, but here is a portable download for Windows: - Win32 stable: [`https://code.visualstudio.com/docs?dv=winzip`](https://code.visualstudio.com/docs?dv=winzip)
12483|"@jeffmcaffer.  Thanks for the feedback, for the sake of discussion, here are 3 additional ideas that may address the ""continuous sense of nesting"" you mentioned...  ## 1) Small gutter width until hover.  Then gently transition the width up to allow for the folding icons (move the code to the right temporarily).  We could also incorporate the vertical folding braces from Visual Studio, which may serve somewhat as a left-edge guide and will also clarify what regions will fold. ![distinguish_gutter_movecode](https://cloud.githubusercontent.com/assets/11839736/13648595/51454928-e5ee-11e5-8416-16a62c9a12db.gif)  ## 2) Make code folding affordances persistent.  No hover required in gutter to have them appear. ![comparison](https://cloud.githubusercontent.com/assets/11839736/13647254/1c9ab1fa-e5e8-11e5-822a-2294dfcf00ab.png) We could make vertical folding braces a little more low-key if they are too bright or loud.  ## 3) Use a gutter style  Such as a background color or border  <img width=""50%"" alt=""gutter background"" src=""https://cloud.githubusercontent.com/assets/11839736/13648900/ed537f32-e5ef-11e5-9e89-a261e1b95b9c.png""> `background-color: rgb(37, 37, 37)`  Or...  <img width=""50%"" alt=""outline copy"" src=""https://cloud.githubusercontent.com/assets/11839736/13649121/d7aa6d7a-e5f0-11e5-82c2-bc68f9da8286.png""> `border-right:rgb(51, 51, 51) solid 2px`  ## 4) Highlight the current line number to show edge of gutter.  Decrease gutter width.  ![image](https://cloud.githubusercontent.com/assets/11839736/13718363/1d259eac-e79e-11e5-9190-9f77f3e3ef5c.png)  This is a more conservative, leaner design choice because it avoids a big line ruler or a heavy background color as used in option 3.  Sublime also does this approach, and we haven't heard anyone complain about it."
12484|Perhaps this is related to changes from #832?
12485|Just found #3882 which has already been triaged. Closing the issue.
12486|This may be a simple repro for https://github.com/Microsoft/vscode/issues/3791
12487|@1dot75cm I've tried updating to the latest F23 build, but didn't get far, dnf skipped the package due to dependency issues. Might be able to investigate more towards the weekend.
12488|"@alexandrudima @bgashler1 That sounds awesome. Sensible defaults + the ability to customize via config would be sweet!  I'm not exactly sure how this would work as I haven't contributed to open source before, but is there anything with this issue that I could help with? I see that it's in the March milestones now, so does that mean that someone else has taken it on? If there is any way to contribute back to the project please let me know, I'd love to help out anywhere I can.   (Also, this might show my naiveté, but I assume because you guys both have the ""Microsoft member"" badge and have vscode right at the top of your repos contributed to that you either work there or are core contributors of some sort, which is why I'm asking you for some guidance in how to contribute. And if I am right about that let me also say thank you for this awesome editor!)"
12489|@bpasero for me it's only logging: debugger listening on port 5870 and nothing after that.
12490|"I got it working again by adding a jsconfig.json to the root with the module attribute set: {     ""compilerOptions"": {         ""module"": ""commonjs""     } } We'll need to update the Node.js walkthrough if this becomes a necessary step. https://github.com/Microsoft/vscode-docs/issues/221"
12491|"VSCode gets its squiggly information from the version of PHP installed on your system. If you haven't configured the ""php.validate.executablePath"" setting, then it tries to find the executable using your system environment settings (so for Windows, the PATH variable). In this case your system appears to have a really old PHP version, installing a newer version and setting the executablePath to it should fix those errors."
12492|@jrieken So was the decision not to do this:  > > I think the real issue is that 24x7 IntelliSense shouldn't be active in all cases, esp when a 'smart' completion provider is there but didn't produce a result. In such cases the textual provider should only become active if explicitly invoked (Cmd+Space). >  > :+1: and this should be the default behaviour. We could still provide a setting 'always include textual completions' for users that like the current behaviour.  For the Go plugin, I know there are a number of users who would have liked that default behaviour (not showing completion lists with textual completion and snippets automatically when the Go completion provider has returned no results, only on cmd+space).  The `editor.acceptSuggestionOnEnter` approach seems like it won't fix the default experience, and turning this option on will degrade the experience in normal completion outside of the undesirable locations like comments and strings.    It seems like the ultimate fix here is addressing a different problem than the core concern.  The suggestion you proposed in the quote above seems to fix the core concern.
12493|"Huh. Debugged a little more, seems I need to not have a leading $ AND press the up arrow on my keyboard to get it to _sometimes_ show up as a possible selection. Either way, definitely bugged.  Edit: More information using the variable ""$apple"" 1. Start typing 'ap', see results highlighting 'a', 'p', and 'ap' in functions like array_pop() and array_map().      a. If I press esc and then ctrl+space here, I get 'no suggestions'. 2. Type another 'p', all suggestions go away. 3. Press backspace, suggestions from 1 show up, but without blue letters. 4. Backspace again, get suggestions with just the 'a' highlighted in blue. 5. Backspace again, empty line, suggestion window closes. 6. Press ctrl+space, I can see $apple just after the super-globals. 7. Type an 'a', and use the up arrow to find $apple. 8. Typing more letters will correctly filter to $apple.  So basically, I guess you need to trigger the completion provider before typing anything to get variables to show up..."
12494|"I would like to second this request. If this is to compete at all with Sublime and others, this needs to be added. Makes it so much more useful and I feel ""safer"" using it if I don't have to worry about loosing files."
12495|Maybe make it an option in preferences?
12496|I've just checked and I had an old version higher up the path. Thanks for the clarification.
12497|I had the same issue. I fixed it by complete remove the app and reinstall it again, btw I'm using Mac or I need a third party app to completely remove all files
12498|@holyman2k how did you completely remove the app? I use mac as well. I deleted the app from the Application folder and reinstalled the program and the issue remains. :(
12499|For all of us +1's, someone [posted this request for vote on UserVoice](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/9905172-invert-cursor-color-when-using-dark-theme).
12500|We talked with Chris and Erik a couple of days ago, and we have some resources to fix this. Ed Munoz is available, so hopefully he can contribute a fix in the next week or so, if you have some time to code review.
