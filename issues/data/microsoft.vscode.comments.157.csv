15601|Looks good with latest build
15602|@Tyriar This is what I often see while selfhosting (gulp watch) on Ubuntu. It happens most often when I do git operations and sometimes when I type (with autosave enabled).  If I then do another change in the file, it gets picked up. I always thought it's the fault of our gulp watch scripts, but maybe it's a timing thing and gulp ends up reading the file as empty.  ``` *** Error: /home/alexdima-qwerty/Desktop/src/vscode/src/vs/editor/browser/viewParts/linesDecorations/linesDecorations.ts(11,48): File '/home/alexdima-qwerty/Desktop/src/vscode/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts' is not a module. ```
15603|What's the status regarding that today ?
15604|@bpasero if I localize this and a user switches between English and German what will happen with the drop down. Will we have two entries one with Tasks and one with 'Aufgabe'. Would we need an Id and a label for a output channel.
15605|@johnliu2016 can you cycle that back to the translation team?
15606|@dbaeumer yes this would require an additional identifier next to the label for a channel which I think would make sense but is a larger change, not a one liner.
15607|"@dbaeumer actually I just tested this: I switched to ""Tasks"", then shutdown and renamed this to ""Aufgaben"" and started up again. I lost my last selected output channel, but there are no duplicate entries in the list.  @isidorn can you confirm that we are not using the stored output channel name otherwise?  If so, I think we could just translate the output channel names too."
15608|I got a first version of explorer optimal resizing working in 9da61e8.
15609|Sent using CloudMagic Emailhttps://cloudmagic.com/k/d/mailapp?ct=pi&cv=7.9.8&pv=9.2.1&source=email_footer_2
15610|@alexandrudima ah, I tend to stop `gulp watch` when I do a destructive git command and I also don't use autosave.
15611|"@bpasero just checked code, once there is new output the active channel will be set to that, however if there is no output comming the active channel can be in a broken state read out from the storage service (e.g. ""Aufgaben""). In that case we use the wrong identifier in a lot of places. Just find all references in `outputServices.getActiveChannel()` Not sure if this breaks anything though."
15612|Right. I would think having identifier + label is a cleaner solution anyway.
15613|Or after the file name?  > 150257.png - 96x96px
15614|That is currently not possible, I suggested the status bar because the IStatusBarService makes adding and removing entries easily possible.
15615|@bpasero @Tyriar   I agree, this information would be much better in either of those locations. Correct me if I'm wrong but I didn't see any existing framework set up for handling binary files (resources) metadata. From what I can tell they're just sent from the `binaryEditory` to the `resourceViewer`. If we wanted to pull out information like dimensions so it's accessible to the file name or status bar would we not have to process the binary file (or at least snoop the headers) first?  This was my first contribution and I was trying to keep it small as I'm learning the codebase. I'm willing to take a crack at moving that to either the file name or status bar (perhaps with other metadata like file size / mime?). If there was anything you could think of (architecturally) you could point me at in the files pipeline to get me started that'd help a lot.
15616|![lost coloring](https://cloud.githubusercontent.com/assets/1253349/14114626/37212472-f59d-11e5-8428-cdb85cdf027d.png)
15617|thanks i gonna try this
15618|Yup I can add the identifier after 1.0
15619|@bgashler1 what sort of dialog do you think we want to go for? - Modal dialog (like Sublime) - File-like tab (like Atom) - Non-native dialog (like :smile: feedback form, <kbd>esc</kbd> & `x` button to dismiss)
15620|Duplicate of https://github.com/Microsoft/vscode/issues/981
15621|This issue was moved to Microsoft/vscode-docs#250
15622|I also think this is not a candidate.
15623|Duplicate of https://github.com/Microsoft/vscode/issues/571
15624|@Reanmachine yes there are some pieces missing I would say, though I would be willing to look into this and sketch some ideas how this could be implemented. Let me come back to you tomorrow.
15625|Related: https://github.com/Microsoft/vscode/issues/571
15626|This page has information on creating language colorizers. https://code.visualstudio.com/Docs/customization/colorizer
15627|@mquandalle cool, I think it would make somewhat more sense that every viewlet can implement a function to provide its optimal width. That way, the double click works with all viewlets. If a viewlet decides to not provide optimal width, it should just fallback to the minimal view width as indicated before.  I think you also need to take into account some other aspects: The working files view to the top also has labels that might get truncated. However, I would not expect that the full path of a working file gets revealed, only its label :+1:
15628|Thanks for deduping this @Reanmachine :+1:
15629|Hi @Tyriar! I appreciate the quick response. Does that really apply if it works in 0.10.11 already but does not work in the 0.10.12-insiders version?
15630|> I think it would make somewhat more sense that every viewlet can implement a function to provide its optimal width. That way, the double click works with all viewlets. If a viewlet decides to not provide optimal width, it should just fallback to the minimal view width as indicated before.  Yes, that’s exactly how I implemented it.  > I think you also need to take into account some other aspects: The working files view to the top also has labels that might get truncated. However, I would not expect that the full path of a working file gets revealed, only its label  Sure, currently I only take into account the explorer tree width but adding the working view as you say makes total sense.
15631|Oh.. All of the [vscode.d.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts) can **only** be used in the extension host, not in the main part. Sorry, I know it's confusing, but for the extensions we try to surface all of our internal APIs in a nice & compact way - that's why we have the `vscode`-module. Our internal API is less polished and has grown.   Still, I am happy to help you with that. For instance, the `workspace.rootPath` info you will find like so: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHost.api.impl.ts#L242
15632|No clue, not even sure if I wrote that code...
15633|@bpasero I have been unable to duplicate this again. However, I did update OS X (now 10.11.4) since we first discovered the problem, so maybe it was a bug fix with connected shares? Grasping at straws here.
15634|@dbaeumer Is this maybe due to marker ownership conflicts between a task and a language worker?
15635|It's a little big fixed... The true issue is in TypeScript-land and we have refrained from massaging their text edits. @alexandrudima tracks the issue on the TypeScript-side, tho unsure what the status is?
15636|@thomastaylor312 that would be very nice, please try how it behaves for a while!
15637|I'll keep trying for the next week and let you know if I see anything
15638|@bill-mybiz oh sorry, misread, didn't think it was a regression?
15639|Add comment about insiders release ready for testing.
15640|@Tyriar We should use a native modal dialog, if possible.
15641|Assigning to @joaomoreno as it seems to do with extensions.
15642|"Thank you.  #4696 is this issue. Just link to #4691. I'm sorry, I hadn't found this in known issues since I mistyped ""pallet"".  Just information for people which are looking at this issue:  - ""Configure locale"" in v0.10.12-insiders but it was changed to ""ロケールの構成"" in v0.10.13-insiders."
15643|@Tyriar Yeah I think I would consider it a regression, but I'm not sure if it would be a regression in VS Code per se or if it's something that breaks chalk and possibly others. I just know that for tracing asynchronous code, the console coloring has been a Godsend as I'm able to match interspersed log entries extremely efficiently.
15644|I found a similar issue on StackOverflow: http://stackoverflow.com/questions/36234643/cannot-install-extensions-in-visual-studio-code. A reboot seems to be the solution. Same here, but I'll leave this issue open, because rebooting OS X is not the most obvious task to do.  I tried running VSCode as root again to check if it would reproduce the problem, but it didn't. Sorry that I am not able to provide a repro scenario...  PS: Love the OSS work on VSCode and DNX!
15645|"I got it working! Thanks T18970237136 for the start. This HTML hosts the editor when served from the 'out' directory VSC builds to:  ``` <!DOCTYPE html> <html> <head> <title>VSC Editor</title> <style>     html, body { height: 100%; margin: 0; }     .box { display: flex; flex-flow: column; height: 100%; }     .box .row { flex: 0 1 auto; }     .box .row.content { flex: 1 1 auto; } </style> </head> <body> <div class='box'>     <div class='row content' id=""editor""></div> </div> <script type=""text/javascript"" src=""vs/loader.js""></script> <script type=""text/javascript""> 'use strict';  (function () {     require(['vs/editor/editor.main', 'vs/base/browser/ui/aria/aria'], function (main, aria) {         aria.setARIAContainer(document.body);          var editor = Monaco.Editor.create(document.getElementById('editor'), {             value: 'var foo = \'bar\';',             mode: 'text/typescript'         });          window.addEventListener('resize', function () {             editor.layout();         });     }); })(); </script> </body> </html> ```"
15646|"While we wait for official documentation... This HTML hosts the editor (in TypeScript mode) when served from the 'out' directory VSC builds to:  ``` javascript <!DOCTYPE html> <html> <head> <title>VSC Editor</title> <style>     html, body { height: 100%; margin: 0; }     .box { display: flex; flex-flow: column; height: 100%; }     .box .row { flex: 0 1 auto; }     .box .row.content { flex: 1 1 auto; } </style> </head> <body> <div class='box'>     <div class='row content' id=""editor""></div> </div> <script type=""text/javascript"" src=""vs/loader.js""></script> <script type=""text/javascript""> 'use strict';  (function () {     require(['vs/editor/editor.main', 'vs/base/browser/ui/aria/aria'], function (main, aria) {         aria.setARIAContainer(document.body);          var editor = Monaco.Editor.create(document.getElementById('editor'), {             value: 'var foo = \'bar\';',             mode: 'text/typescript'         });          window.addEventListener('resize', function () {             editor.layout();         });     }); })(); </script> </body> </html> ```"
15647|@MuhammadRashed I can't reproduce this using VSCode 0.10.11. Which JS file did you open?   It looks like you had the vscode workspace open. The workspace itself is configured for TS and not JS and if you opened a file in the out folder it could happen that too many files get loaded into the JS language server. We fixed this for 0.11.13.  Can you provide more details about a file that reveals the behavior.
15648|@jrieken @egamma FYI.
15649|+1 for using more ES6 Maps instead of object hashes
15650|Thanks, that works.
15651|Working on it
15652|editorconfig already has this implemented (insert final new line)
15653|But emmet should not trigger inside `<?php ?>` blocks, only in the HTML sections
15654|I noticed this aswell. Always getting EPERM errors when updating/removing packages with VS Code running.
15655|Maybe something like an `.vscode/extensions.json`
15656|Currently the whole concept is incorrect or incomplete. You place breakpoints onto a **statement** and not onto a line. A line can contain multiple statements, and lines are only presentation features of the source code (at least in most of the languages).
15657|@Peter-Juhasz correct. We accept PRs that fix this!
15658|Working on it
15659|Node 5, yes please...
15660|I know, I'm core contributor of the EditorConfig plugin but my plugin was created when extensions were still closed beta. And it seems that still some people prefer to not have a config file for this feature.
15661|What workspace setup? Please give me hints how to reproduce the locking.
15662|@isidorn : Oops... I accidentally excluded the .vscode folder. Added it now to the repository.  @weinand : Nope, the suggested solution didn't help:  ![debugerror](https://cloud.githubusercontent.com/assets/9283914/14123150/746dbd92-f5ff-11e5-8445-c43c7addf5b9.png)
15663|"@SetTrend thanks for making the project available.  There a two problems with your setup: 1. `outDir` expects the folder where the generated code lives. For your project this is `${workspaceRoot}\\output\\js`. 2. the source map rev 3 spec says: 'If the sources are not absolute URLs after prepending of the “sourceRoot”, the sources are resolved relative to the SourceMap (like resolving script src in a html document)'.    In your source map the concatenated path is `../.././src/typescript/X/Test.ts` which is identical to `../../src/typescript/X/Test.ts`. Resolving this relative to the source map location `VSC-Debugger/output/maps/js/X/`results in `VSC-Debugger/output/maps/js/X/../../src/typescript/X/Test.ts` which can be simplified to `VSC-Debugger/output/maps/src/typescript/X/Test.ts`. This location does not exist.    The correct `sourceRoot` for your project is `../../../../src/typescript/`. With this setting breakpoints work fine.  There is still a bug in the source-map npm module that VS Code uses which prevents that paths with single dot segments `/./` are handled correctly. For that reason I've reopened this issue.  BTW, you can use forward slashes in your launch.json. They are portable and do not need escaping...  BTW you can enable source map logging by adding a `""trace"": ""sm""` to the launch config."
15664|Reproduced in Version 0.10.13-insider.
15665|Oh I just saw that after doing an upgrade. This seems fairly recent. This really bought me a lot of joy when it worked.
15666|:+1: the `Ctrl-Space` was not expected.  Are there any others outside of markdown that require the use of `Ctrl-Space`?  Asking out of ignorance here, is this something that markdown files can be made into an extension like C# is an extension?
15667|@isidorn Is there any clue of this issue? Please let me know if you need any more information. Thanks.
15668|+1
15669|"In my package.json:  ```  ""scripts"": {     ""forever"": ""forever start server.js"",     ""db"": ""mongod --dbpath ./data"",     ""nodemon"": ""nodemon server.js"",     ""debug"": ""concurrently \""npm run db\"" \""npm run nodemon\"" \""parse-dashboard --config parse-dashboard-config.json --allowInsecureHTTP\"""",     ""start"": ""concurrently \""npm run db\"" \""npm run forever\"" \""parse-dashboard --config parse-dashboard-config.json\"""",     ""test"": ""echo \""Error: no test specified\"" && exit 1""   }, ```  In my launch.json:  ``` {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/server.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": null,             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null         },         {             ""name"": ""Attach"",             ""type"": ""node"",             ""request"": ""attach"",             ""port"": 5858,             ""address"": ""localhost"",             ""restart"": false,             ""sourceMaps"": false,             ""outDir"": null,             ""localRoot"": ""${workspaceRoot}"",             ""remoteRoot"": null         }     ] } ```  I'm wondering if I can debug ""**npm start**"", ""**npm run debug**"" or not?"
15670|"Looks like this is the place that resets envvars:  https://github.com/Microsoft/vscode/blob/25ce394231a63cad030c804460bd957a1102d14e/src/vs/workbench/electron-main/main.ts#L252-L256  ``` ts // On some platforms we need to manually read from the global environment variables // and assign them to the process environment (e.g. when doubleclick app on Mac) getUserEnvironment()     .then(userEnv => {         assign(process.env, userEnv); ```  https://github.com/Microsoft/vscode/blob/25ce394231a63cad030c804460bd957a1102d14e/src/vs/base/node/env.ts#L22  ``` ts          let child = cp.spawn(process.env.SHELL, ['-ilc', 'env'], { ```  Do we really need to execute `$SHELL -c env` there?  Can we assume or check if `env` command exists and execute it?  ``` bash # intuitive behavior: variable GOPATH can be overwritten $ GOPATH=1 env |grep GOPATH GOPATH=1  # variable cannot be overwritten.  $ GOPATH=1 $SHELL -c env |grep GOPATH GOPATH=/home/saml/go ```  Or, `getUserEnvironment()` in `main.ts` should only be called if it's not invoked from terminal:  ``` js import tty = require('tty'); if (!tty.isatty(process.stdout)) {   getUserEnvirionment() ..... } ```"
15671|Hi **@saml**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
15672|It was always possible to edit the right hand side of the diff editor for git changes view.
15673|@aioutecism  This one is actually usable with .12, way to go man!
15674|I added some comments to the code
15675|Is there any way I can help you? maybe testing your work?
15676|I suggest to hook this up with the listeners in the statusbar. It reacts to editor events (see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/editorStatus.ts#L266) and updates the status bar entries based on the meta data of any opened file. When the editor input changes (this event is fired when any file is opened or when the active editor changes if more than one are open) you can react on the event and test for the editor to be a binary editor. That editor should expose a method to retrieve metadata text (could also return information for audio files or video files).   Since the image dimensions are not known until the image is loaded, I think the meta data needs to return a promise with the text to show.  Conceptually this would make sense to me, in the same way a text editor can return all meta data around a opened text file, the binary editor can provide this for binary files.
15677|I was able to reproduce the problem.  The error is that the file is being emptied and saved, then saved again with the new content.  As expected it has nothing to do with dust.  Fortunately, I'm using fs.watch, so it was easy to isolate.  Here's the output of running the attached **watcher.js** script on the attached **watched.txt** file as I edit the latter (just adding/deleting spaces so sadly, the edits aren't that obvious in the output).  [watched.zip](https://github.com/Microsoft/vscode/files/194903/watched.zip)  First, editing and saving (twice) with VSCode:  ``` bash joe@dev-frontend:~/Software/codeTest$ ./watcher.js  watching for changes watched.txt changed  watched.txt changed This is arbitrary text.   watched.txt changed  watched.txt changed This is arbitrary text.    ```  Then, when editing and saving (four times) with emacs  ``` bash watching for changes watched.txt changed This is arbitrary text.  watched.txt changed This is arbitrary text.  watched.txt changed This is arbitrary text.   watched.txt changed This is arbitrary text.   ```
15678|npm does a lot of normalizations of package.json, meaning it supports a lot of shortcuts. Someone should probably go through this list https://github.com/npm/normalize-package-data#what-normalization-currently-entails and ensure it's all supported.
15679|@sindresorhus Thanks for pointing to the docs. Will add it to my todo.
15680|Cloned this issue to translation team for loc fix.
15681|"@bpasero Yeah, that seems the best way to do the display.  I did some poking around looking for the right places to implement some pieces (still finding my way around the source). My major concern is that loading metadata probably shouldn't rely on actually ""loading"" the file (at least not fully). I'd be wary that video files that can be 100's of MB or larger or even really large uncompressed images could pose problems.  I found what I think is the right place for the actual filesystem interactions `IFileService` & It's implementation under the `node` / `electron-browser` folders. I probably would add a new call similar to `resolveFile` that would return a promise of `IFileMetadata` and use the guessed mime type to load just the headers of files and go inspecting for the dimensions / metadata / etc...  Examples for future expansion I can think of: - Videos - Dimensions, Length, Codecs, Streams - Images - Dimensions, Color Space (8-bit, 32-bit), Encoding / Compression - Audio - Length, Compression Codec, Bitrate  Having this information available in the future could be useful outside of metadata display to extension authors, especially if there's a contribution point for metadata parsers. That's all probably out of scope for the initial feature but it's just some things I've been thinking about.  Does this sound like I'm thinking along the right track to you? (Trying to make sure I haven't missed some incumbent code that simplifies this approach or that I'm not creeping scope too much)."
15682|@Reanmachine this makes sense to me. Every editor has an input that gets resolved once opened. The resolved state of an input is a model. In case of binary files nothing really happens for resolving because the file is just displayed raw. I suggest to add code to the binary editor model (https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/editor/binaryEditorModel.ts#L13) resolve() method (currently not used) to do the meta data lookup and then store the information in there. The editor status could then just take it from there in the same way it does when it has a text editor model in hand to get the meta data.  File service seems like the right place to do this and I like the ideas you have around the meta data to return. I think the challenge lies into how to get this meta data in an efficient way using node.
15683|Do you have a problem matcher defined for the task?  Can you pls add you tsconfig.json and task.json.
15684|I'll add it. But we want it to be annoying, [because](https://github.com/msysgit/msysgit/releases).
15685|Closing as duplicate of #4438
15686|This appears to be standard emmet expansion behaviour, reproduced in other emmet integrations like sublime.  It would help to give users control to not bind emmet expand abbreviation to the TAB key.
15687|Related: https://github.com/Microsoft/vscode/issues/1964
15688|I like how you use because :). Because internet :).
15689|@v-pavanp from the screen shot it looks like the tsconfig.json file sits inside the .vscode folder. It must sit in the root in this example.
15690|@v-pavanp please ping if moving the tsconfig.json to the workspace folder doesn't solve the problem. Then please attach the workspace folder.
15691|@johnliu2016 thanks!
15692|@bpasero I think this is the output window.
15693|https://github.com/Microsoft/vscode/issues/4616
15694|@bpasero I marked it as a candidate to translate the string.  @bpasero & @isidorn what is your advice. What is the harm caused by translating it. It is not clear to me from the last comments.
15695|+1
15696|@Treri Is VSCode reading from keybindings.osx.json file directly? Or you have to rename it manually to keybindings.json on OSX?
15697|@mucsi96 I just soft link **keybindings.osx.json** to **keybindings.json**
15698|This is as designed, the code folding is based on indentation.  Semantic based/AST based code folding is on the backlog  // @aeschli
15699|Check this post on reddit by author of sublime text on how they totally nail it https://www.reddit.com/r/programming/comments/4cfz8r/reverse_engineering_sublime_texts_fuzzy_match/
15700|"hi all,   I encountered the same issue seems like this.  When I started debugging at the first time(with F5), then error message didn't display. Then if I try to reconnect to debug instance(with Ctrl + Shirt + F5), the error message display.   I defined a task that compiles code from ES6 to ES5 and added it to `preLaunchTask`. Via ""F1->Tasks: Run task"" there is no problem. You can see the compile process has been invoke without errors in screenshot, something like this: ![_007](https://cloud.githubusercontent.com/assets/6328186/14135743/cf569250-f691-11e5-9850-14841405252e.png)  Anybody can help me? Although it wasn't a big problem, but it was really noisy.  Thx a lot."
