2901|I'm not sure If I should add it here or start a new issue. Visual Basic is also affected by this.  Same effect, brackets work fine but double quotes do not. As the single quote is the comment character I don't think that's ever closed and I don't think anyone would want it to.
2902|@jrieken my ticket is a dupe of a ticket made 8 days after mine?
2903|Perhaps I'm misunderstanding, but isn't this an OS X cursor issue? ([is it this one?](http://cdn.osxdaily.com/wp-content/uploads/2011/07/mac-cursor.jpg))
2904|While I agree that files should have a new line at the end, wouldn't forcing this disallow saving files without the terminating new line character?
2905|@Tyriar This has no effect on file saving, it's just about the display of line numbers.
2906|So the line would still be there, just not the line number?
2907|@bpasero here's the CPU profile. [CPU-20151204T235311.cpuprofile.zip](https://github.com/Microsoft/vscode/files/52466/CPU-20151204T235311.cpuprofile.zip)
2908|"Yes, but it's not technically a ""line"", it's just an area that can receive focus for text entry.  ``` 1. Line 1\n 2. \n 3. Line 3\n    | <-- cursor ```"
2909|@bgourlie I agree that applying this regardless of the language in use isn't desirable.  I'm thinking whether it'd be better to change the indentation behavior entirely - right now, (un)indenting causes lines to be aligned at multiples of tabs and extra whitespaces are removed. On the other hand editors like Sublime Text retain the relative positioning by simply inserting tabs in front of lines, regardless of the content. I feel that'd make more sense, and it wouldn't cause problems like #348.
2910|1. On a Mac running OSX 10.11.1 (probably a MacBook Pro) and the latest VSCode, connect to a Samba share in the Finder. 2. Open a file from the Samba share for editing 3. Sleep the computer or disconnect from an Ethernet connection. Normally I have seen it happen when I close the lid on my machine, leave it closed for a few minutes (not connected to power), and and then open it back up 4. When you wake up the machine the dialog box pops up saying that VSCode had an issue and needs to close.  Note: I have replicated this various times with my own machine.
2911|Thanks @alexandrudima. The first link doesn't work for me. Tested on 2 Fedora PCs. The second link works as expected.
2912|I like the idea of a direct download link.  I'll put that in there.  Sorry you had trouble @romu70!
2913|Fix should be in our upcoming December release.
2914|We are actually removing send-a-smile all together. We will have a blog post soon after next release explaining our feedback channels now that we are OSS.
2915|"@jrieken  No `temp` or `js` in the folder names. I did some more testing with a completely empty dir containing only `jsconfig.json`, a `test.js` file and a bunch of subdirs named 'a' through 'e'. It seems to work at all levels but it takes a few seconds to recognize the ES6 syntax.  This is in an almost empty dir, in a real app dir with `node_modules` and `jspm_packages` at level 4 it doesn't recognize ES6 at all.  I then copied the `package.json` file from the real app and did `npm install` and `jspm install`. After that, it broke again. Also tried using ""exclude"" in `jsconfig.json`, but that didn't help.  Here's `package.json` and the folder structure for reference.  ![image](https://cloud.githubusercontent.com/assets/1427723/11603228/062c661a-9ae9-11e5-9d66-8c99e102f200.png)  ![image](https://cloud.githubusercontent.com/assets/1427723/11603284/6e0b9b02-9ae9-11e5-81e5-99d808c5209e.png)"
2916|Having a garbage experience with typescript and vscode, just give up man. This thread has made up my mind.
2917|"> Having a garbage experience with typescript and vscode, just give up man. This thread has made up my mind. > @Arebee88   :+1: it was crippled from launch, and instead of providing any kind of community support or hiring a community advocate, the devs just keep saying ""VS code fully supports ES6."" Not documented in any way!  A Microsoft product that has trouble with the filesystem?! Who would have guessed!"
2918|"We have a previous product that VS Code is based on, called Visual Studio Online ""Monaco"", that may be useful to start with: https://azure.microsoft.com/en-us/documentation/videos/building-web-sites-with-visual-studio-online-monaco/  Problem is, it is only for Azure websites.  You should talk with @chrisdias about how to move forward with this Chromebook scenario."
2919|@SofianHn I disabled telemetry for about an hour and problem solved and as soon as I enabled that again, I get spinning progress 4 times in less than 10 minutes.
2920|Interesting...thanks @moostad for the quick response. I am guessing you are on Mac, after being offline for a while please run `open $TMPDIR/appInsights-node` from the terminal and verify what exists in this directory. You should see a bunch of json files, I am interested how many and what's their sizes.   @bpasero I verified that the caching mechanism by AppInsights is [async](https://github.com/Microsoft/ApplicationInsights-node.js/blob/master/Library/Sender.ts#L147). My guess now that it might be writing to the disk [too often](https://github.com/Microsoft/ApplicationInsights-node.js/blob/master/Library/Config.ts#L26) ~15 seconds which might be causing this issue. I will take it from here.
2921|@Tyriar not mean that, just the means of providing for auto completion, and the affect after auto completing. As below : 1. type `<div>` 2. type`<` 3. needn't press enter, it becomes `<div></div>`, and the cursor is between `>` and `<` Resources : `1. Komodo Edit 2. Brackets` **the key point, just for html tags, needn't select for closing tags, it's a _real_ auto completion**.
2922|@alexandrudima I can open that CSS file without any problem (and syntax highlight shown up very quickly), so I don't think they're same.  And I can reproduce this phenomenon both on the computer in the company which is a workstation and the computer at home which is also pretty fast. So you can just open the file I attached to have a try.
2923|@SofianHn I will send those information later however I'm not sure that have anything to do with writing  because I don't get spinning when system is disconnected from network (wifi is off) it's happening only when my mac is connected to the network without internet. I guess when it's see network connection then try to connect to website, at this time everything is blocked and I get spinning until that get http timeout.   p.s. I have no problem to understanding (reading and listening) English but writing and speaking is another story, so sorry about my poor English.
2924|+1 on this feature. Also, I would like to see an option to see the REPL window on the bottom.
2925|Hi **@kschiu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
2926|**@kschiu**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
2927|"The [website](https://code.visualstudio.com) now has the ""BETA"" banner and the [license](https://code.visualstudio.com/license) refers to ""BETA"".  Issue #60 explains the difference between the repository license and the Visual Studio Code product license."
2928|@csinco Is the Visual Studio Online still under development? I think Visual Studio Online is one of the best cloud-based IDEs avaiable on the web. But it does lack some feasures compared to c9 cloud ide. What's the future of Visual Studio Online?
2929|Not Working  ![untitled](https://cloud.githubusercontent.com/assets/4066994/11606822/e31774e6-9b54-11e5-89a3-6ddf14e8b3be.png)
2930|I am sorry the file ext was wrong
2931|@SofianHn  this time I tried on Ubuntu to be sure it's not OS/Device related, it's happening but not as often and not as long as Mac. maybe because it has much more power then the Mac (2x raid0 SSD for OS, 12 core CPU, 32 GB ram)   Here's the list of files  Total size: 1.5 MB Count : 43  ``` bash   45K Dec  5 11:16 1449301590361.ai.json   21K Dec  5 11:16 1449301607507.ai.json   44K Dec  5 11:17 1449301669096.ai.json  8.0K Dec  5 11:18 1449301685054.ai.json   28K Dec  5 11:18 1449301701515.ai.json   28K Dec  5 11:18 1449301722262.ai.json   14K Dec  5 11:19 1449301741035.ai.json   18K Dec  5 11:19 1449301757832.ai.json  5.4K Dec  5 11:19 1449301776224.ai.json   65K Dec  5 11:20 1449301804942.ai.json   54K Dec  5 11:20 1449301820250.ai.json   19K Dec  5 11:20 1449301854519.ai.json   17K Dec  5 11:21 1449301877099.ai.json   26K Dec  5 11:21 1449301897507.ai.json   16K Dec  5 11:21 1449301913055.ai.json   20K Dec  5 11:22 1449301928942.ai.json   18K Dec  5 11:22 1449301946785.ai.json   46K Dec  5 11:22 1449301975527.ai.json   23K Dec  5 11:23 1449301990779.ai.json   43K Dec  5 11:23 1449302007367.ai.json   52K Dec  5 11:23 1449302031358.ai.json   15K Dec  5 11:24 1449302047260.ai.json   46K Dec  5 11:24 1449302067154.ai.json   41K Dec  5 11:24 1449302082161.ai.json   54K Dec  5 11:25 1449302107280.ai.json   37K Dec  5 11:25 1449302122366.ai.json   17K Dec  5 11:25 1449302142179.ai.json   35K Dec  5 11:25 1449302159539.ai.json   34K Dec  5 11:26 1449302182334.ai.json  5.4K Dec  5 11:26 1449302198281.ai.json   25K Dec  5 11:26 1449302215101.ai.json   38K Dec  5 11:27 1449302231171.ai.json   25K Dec  5 11:27 1449302248680.ai.json   35K Dec  5 11:27 1449302264804.ai.json   19K Dec  5 11:28 1449302280982.ai.json   66K Dec  5 11:28 1449302299938.ai.json   69K Dec  5 11:28 1449302315167.ai.json   37K Dec  5 11:28 1449302330401.ai.json   31K Dec  5 11:29 1449302349368.ai.json  9.5K Dec  5 11:29 1449302369790.ai.json  6.8K Dec  5 11:29 1449302399153.ai.json   80K Dec  5 11:30 1449302418946.ai.json   22K Dec  5 11:30 1449302433991.ai.json  ```
2932|"I have an IMac at my office where everything works perfectly however I also have a Macbook Pro where this problem has been a continual issue. I have tried reinstalling VSCode (I'm on 0.10.3) and even getting OmniSharp from Github and running it purely from there as well which generates the same error. Right now I'm running Mono version 4.2.1 as well. I don't need to start VSCode to see the error just OmniSharp inside VSCode- if that narrows it down at all:  Jesses-MacBook-Pro:WebApplication jessebennett$ dnvm use 1.0.0-beta8 -p Adding /Users/jessebennett/.dnx/runtimes/dnx-mono.1.0.0-beta8/bin to process PATH Updating alias 'default' to 'dnx-mono.1.0.0-beta8' Jesses-MacBook-Pro:WebApplication jessebennett$ ""/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/csharp-o/bin/omnisharp"" info    : [OmniSharp.Startup] Omnisharp server running on port '2000' at location '/Users/jessebennett/Documents/vnext/yeoman/WebApplication' on host -1. info    : [OmniSharp.Dnx.DnxPaths] Using runtime '/Users/jessebennett/.dnx/runtimes/dnx-mono.1.0.0-beta8'. info    : [OmniSharp.Dnx.DnxProjectSystem] Scanning '/Users/jessebennett/Documents/vnext/yeoman/WebApplication' for DNX projects info    : [OmniSharp.Dnx.DnxProjectSystem] Found project '/Users/jessebennett/Documents/vnext/yeoman/WebApplication/project.json'. Process ID 1523 Listening on port 49496 error   : [OmniSharp.Dnx.DesignTimeHostManager] Failed to launch DesignTimeHost in a timely fashion.  In the source code for OmniSharp I see the socket timeout ~30 seconds before generating this error mesage. I've tried reinstalling Mono from the Xamarin website as well as from homebrew. Both the MBP and IMac have the latest stable release of El Capitan. On this same MacBook DNX has always restored and built everything just fine. Kestrel runs, starts, and stops just fine as well. The DesignTimeHost process however seems to get orphaned every time this happens and multiple instances will just get ""stuck""."
2933|@chrisdias FYI that Beta banner does **not** appear on mobile version of the website. It is on the Licence page though.
2934|@chrisdias Thanks for explaining.   It would be good to ensure any differences other than Branding / telemetry are clearly documented. At least we don't need to be concerned that this is a 'bait and switch' manoeuvre as the branded version is free :)
2935|Aha!
2936|@dbaeumer do you think that feature will be accepted if I implemented it as a pull request?
2937|@weinand There is a good documentation about the VS Code debugger protocol and a tutorial about how to get the mock debugger up and running. But the mock debugger itself (the classes in the common folder) are, besides inline comments, not documented at all. There's just all these methods that somehow get called and it's not clear to me when and what parameters are important.  I'm (and I think many others are) interested in Java and PHP debugging support. Thank you for your offer to help, maybe we can talk on the VS Code Gitter? https://gitter.im/Microsoft/vscode
2938|Hooray Open Source! So you were digging around in the code...roughly where were you looking? I'm curious if you saw anything about increased logging level or anything like that. Maybe we can turn up the logging level to see what else it might be doing. Or, we could custom build something for ourselves with lots of extra logging to see what's up...or maybe link this issue to the OmniSharp team? See if they can help?
2939|@felixfbecker thanks for the feedback. I'll try to improve the class documentation next week. The classes in common are actually not that important because they are just an implementation detail of the server side framework. Debug adapter implementers are just expected to implement the 'xxxxRequest' methods of their subclass of DebugSession. I think it will help if I copy the high level documentation from https://code.visualstudio.com/docs/extensionAPI/api-debugging into the individual methods of the mock debugger and the DebugSession class.
2940|Strange, On OSX El Capitan (0.11.1 (15B42)) it does not work, see my attached screenshot above. Only a hardlink works.
2941|Hi, I am also facing the same issue if I turn off the wifi. I hope internet is not required to debug the source code. Please guide me.
2942|@dotnetCarpenter the fix for the unreadable error message will appear in the December release
2943|@natarajanmca11 If you see this problem on Windows then you are probably running into this node.js on Windows bug: node-inspector/node-inspector#645
2944|Hi,  it would be great to have a fixed Download-Link with a version in it. I [bundled vscode](https://github.com/ulrichSchreiner/vschttps://github.com/ulrichSchreiner/vsc) with docker and some go-tools and with every release i have to change the whole downloadlink in the Dockerfile.  i'd like to have one link with a version spec or something comparable ...  thx </usc>
2945|Have you tried to configure a task https://code.visualstudio.com/docs/editor/tasks, then you can trigger make using a short cut, and navigate from errors shown in the output window inside Code, back to your code
2946|> I would like to see an option to see the REPL window on the bottom  agreed and this is on our backlog.
2947|Yes, I can confirm that one of the code processes did consume 800+ MB of memory just before crashing.
2948|> Actually, wouldn't it be better to implement this as an extension  yes, this was our thinking as well
2949|Since the work on Python will happen in another repository than `vscode` I will close this issue.
2950|You can customize the key bindings, pls see https://code.visualstudio.com/docs/customization/keybindings
2951|Closing for now, pls reopen with more information.
2952|Can we get a config hook to make it only prefix match?
2953|"I was looking at the code in the Omnisharp-Roslyn project inside the file DesignTimeHostManager.cs inside the OmniSharp.Dnx folder. Beginning at line 100 we have this routine:  // Wait a little bit for it to conncet before firing the callback                 using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))                 {                     var t1 = DateTime.UtcNow;                     var dthTimeout = TimeSpan.FromSeconds(30);                     while (!socket.Connected && DateTime.UtcNow - t1 < dthTimeout)                     {                         Thread.Sleep(500);                         try                         {                             socket.Connect(new IPEndPoint(IPAddress.Loopback, port));                         }                         catch (SocketException)                         {                             // this happens when the DTH isn't listening yet                         }                     }  ```                 if (!socket.Connected)                 {                     // reached timeout                     _logger.LogError(""Failed to launch DesignTimeHost in a timely fashion."");                     return;                 }             } ```  Here is my console output for when I try to run OmniSharp directly from source:  Jesses-MacBook-Pro:omnisharp-roslyn jessebennett$ ./scripts/Omnisharp -s /Users/jessebennett/Documents/vnext/yeoman/WebApplication/ -p 48971 info    : [OmniSharp.Startup] Omnisharp server running on port '48971' at location '/Users/jessebennett/Documents/vnext/yeoman/WebApplication/' on host -1. info    : [OmniSharp.Dnx.DnxPaths] Using runtime '/Users/jessebennett/.dnx/runtimes/dnx-mono.1.0.0-beta4'. info    : [OmniSharp.Dnx.DnxProjectSystem] Scanning '/Users/jessebennett/Documents/vnext/yeoman/WebApplication/' for DNX projects info    : [OmniSharp.Dnx.DnxProjectSystem] Found project '/Users/jessebennett/Documents/vnext/yeoman/WebApplication/project.json'. info    : [OmniSharp.Dnx.DesignTimeHostManager] Listening on port 49517 error   : [OmniSharp.Dnx.DesignTimeHostManager] Failed to launch DesignTimeHost in a timely fashion.  What you can see here is the issue is replicated on the OmniSharp side and even their script selects the Beta4 runtime correctly but yet we see the same error. The socket is created from a reference in System.Net.Sockets which is pretty low level in the stack compared to the other vnext features. This I suspect may be an issue with Mono creating sockets so it may be a good test to create some code that simply opens a socket in this manner using something like Xamarin studio. If that works (and there is a good possibility that it would) then absolutely it would be OmniSharp but on their issues list they have closed out multiple DesignTimeHost issues indicating that mitigating this involves building OmniSharp from source and getting VSCode to pick it up. Obviously, that didn't work for me and I'll just warn you the monolithic build script which goes into their Test suite has always had problems completing the tests. So what I'm saying is if your try and build it- it takes a little while but you will get a working OmniSharp out of it even if the CSharp tests don't complete 100% just give it a try to see if it did get built. I tried extending the timeout to 100 seconds and rebuilt it but still got the same problem."
2954|I just packaged vscode. Can you help me test it? @romu70  https://copr.fedoraproject.org/coprs/mosquito/vscode/
2955|thanks @moostad for the clarification and the list of files. The update rate and the size of files seems reasonable to me, writing 3 small files a minute should not be a problem. Now that IO is less likely to have caused this, I will work on producing the case with network and without internet to see what might be going wrong here.   You english is great btw, we really appreciate working with us to get this issue fixed.
2956|Visual Studio Online is now called [Visual Studio Team Services](https://www.visualstudio.com/products/visual-studio-team-services-vs) and would be a good way to do development on Chrome OS.  It uses the same text editor under the covers as VS Code.  It is not just a code editor but also hosted version control, continuous integration, work item tracking (bugs, kanban board), etc, so it's not exactly comparable, but if I were developing on Chrome OS that's where I'd start.  Disclaimer that I work on the VSTS team.
2957|"Ok, I managed to get this to work by killing the conditional statement for awaiting the socket connection and binding to 127.0.0.1 instead of using the loopback adapter. I would only suggest this if you don't mind getting your hands a little dirty and _desperate_ to get this to work. Also, not really sure why this works so that in itself is problematic- I'll try to do some more testing later to see where this is going wrong.   Here is a gist of my updated Design Time Host Manager file: https://gist.github.com/wolfspider/79512b40a9dd25035420   Once you rebuild omnisharp edit your ~/.bash_profile script with an export statement like so to change where VSCode runs omnisharp from:  export OMNISHARP=""/Users/jessebennett/Documents/omnisharp-roslyn/scripts/Omnisharp""  After you do that you should see VSCode come up with the modified path in the log for Omnisharp, just like in the attached screenshot I included.   ![dthsocket](https://cloud.githubusercontent.com/assets/4861700/11610832/c550870e-9b7c-11e5-9df3-86dddb5f4d25.png)"
2958|There is a workaround for high DPI blurriness in 0.10.3. Do a max zoom-in (ctrl+=) and max zoom out (ctrl+-).
2959|I use symlinks for my settings.json on both OS X (10.11.1) and Windows (10 1511); no problems here either.
2960|Hmmm...you're a better coder than I...so basically, explicitly spelling out the loopback works, rather than what should be the constant (string). So maybe that's failing somehow. `socket.connected` thinks it's not connected. I wonder if the Mac OS is returning something in a way that is different than what Windows might return. Totally guessing here.
2961|"@rhires That is definitely possible, nowadays the loop back adapter is a reference to IPv6 local address. Specifying an IPv4 address like 127.0.0.1 keeps it from binding there. That change alone didn't do it so then I had to remove the requirement to wait for a socket to be open. There is also the possibility that the omnisharp build process generates unreliable results on my MacBook and I just built it so many times that something finally hooked up right- eventually I did get one passing build but most of the time it would fail with the ""too many files open"" error during csharp tests and I already have the mono filesystemwatcher fix in my bash profile. The answer is between those two issues somewhere and when I can look at it again I can help narrow this down.  On Saturday, December 5, 2015, rhires notifications@github.com wrote:  > Hmmm...you're a better coder than I...so basically, explicitly spelling > out the loopback works, rather than what should be the constant (string). > So maybe that's failing somehow. socket.connected thinks it's not > connected. I wonder if the Mac OS is returning something in a way that is > different than what Windows might return. Totally guessing here. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/395#issuecomment-162262059."
2962|Can you provide more info? Mac OS version, which version of Code you have...I'm sure there's more...
2963|Have this problem too since the beginning. https://github.com/Microsoft/vscode/issues/254 may be related
2964|"tsconfig.json:  ``` json {   ""compilerOptions"": {     ""target"": ""ES5"",     ""module"": ""commonjs"",     ""sourceMap"": true,     ""outDir"": ""bin""   } } ```  launch.json:  ``` json {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""lib/index.ts"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""."",             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""preLaunchTask"": """",             ""sourceMaps"": true,             ""outDir"": ""bin""         }     ] } ```"
2965|I am sorry for not replying earlier. I have checked console tab as well, there is no message/error printed. I  checked it on my colleague's machine as well and he is also having same issue. This happens only for .ts and .tsx files, I downloaded latest version today as well and it had same issue. Please let me know, if there is anything that I can do to help you.
2966|@ClockworkPirate thanks! Strange why it's not working here. I'll give it another try... will keep thread posted.
2967|@dbaeumer Is there a working example anywhere that works with a continuous watching build script?  I just can't get this to work.
2968|Looks like a duplicate of https://github.com/Microsoft/vscode/issues/379, should be fixed in the next version.
2969|Good point  - I'll add to https://github.com/Microsoft/vscode/issues/1028 For some reason this comment is not appearing there  Steve Lee OpenDirective http://opendirective.com  On 5 December 2015 at 23:36, Angel Leon notifications@github.com wrote:  > care to show some code on how you're trying to do it? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1028#issuecomment-162257053.
2970|"So I set up a new task and commented out all the others (the docs dont say this but it seems what is needed). There **is** a good reason I'm using bash but even so other commands can have similar options. The `ls -a' is just something easy to test. The point is the arg is the switch -`c` followed by a quoted value string with spaces in it.  <pre> {     ""version"": ""0.1.0"",     ""command"": ""C:\\Program Files\\Git\\bin\\bash.exe"",     ""isShellCommand"": true,     ""showOutput"": ""always"",     ""args"": [""-c "",""ls a""],     ""problemMatcher"": ""$tsc"" } </pre>  I realise the problem matcher is not right but for now need to ge the command to run Here's the various options I tried for `args` - As `-c ""ls a""` is a single arge we try it as a array element and escape the quotes- `[""-c \""ls -l\""""]` This is difficult as code keep adding extra `""` characters. Had to copy and paste a single `""` Get error       <pre>   '""C:\Program Files\Git\bin\bash.exe"""" -c  ""ls' is not recognized as an internal or external command,   operable program or batch file.</pre>      It seems to be missing every following the space after `ls`. Also the double `""` indicates the parsing is getting confused. - Ok, so how about making it 2 strings incase the arge parsing is a little borked  `[""-c"",""\""ls -a\""""]` but get error      <pre>   '""C:\Program Files\Git\bin\bash.exe"""" -c ""ls' is not recognized as an internal or external command,   operable program or batch file.   </pre>      Again it seems to break at that space - lets try 2nd string without quotes in case they get added.`[""-c"",""ls -a""]` again get error      <pre>   '""C:\Program Files\Git\bin\bash.exe"""" -c   ""ls' is not recognized as an internal or external command,   operable program or batch file.</pre>  I tried even more esoteric options like trying to escape the space, but could find nothing that works.  For what it's worth thing rings a vague bell. Many moons ago I did a lot of 'system' OS programming for developer tools involving launching command sub shell processes and handling env and args etc.. in C. I seem to recall there were to APIs for running the cmd shell; one with an array of args and one taking a string for all args. I also seem to recall similar problems handling all possible args.   If I get time in coming weeks I'll take a look at the source"
2971|Works great @1dot75cm , thanks a lot!
2972|Awesome, thanks for the headsup.
2973|"I tryed.  I have typings/extjs/ExtJS.d.ts. I have created a jsconfig.json at root level of my Sencha ExtJS 6 project folder:  ``` {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""ES5"",         ""outDir"": ""out"",         ""noLib"": true,         ""sourceMap"": true     },     ""exclude"": [         ""node_modules"",         ""ext"",         ""overrides"",         ""resources"",         ""sass"",         ""build"",         ""packages"",         ""help""     ] } ```  When I open any js file I just get a popdown Warning saying:  ``` Sorry, but there are too many JavaScript source files for VS Code. Consider using the exclude-property in jsconfig.json. ```  And no IntelliSense.  I have another web project that is not a Sencha MVC project, but uses ExtJS 4 on js files. In this project I get no warnings, but I get no IntelliSense as well."
2974|"Let me suggest a simple example to implementation  (tasks.json) ....  ``` {         // ROOT WITHOUT COMMAND     ""version"": ""0.1.0"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [],      ""tasks"": [         {              //CHILDREN WITH COMMAND ;)             ""taskName"": ""Build Type Script"",             ""suppressTaskName"": true,             ""isBuildCommand"": true,             ""command"": ""tsc"",             ""args"": [""tsc -p .""]         },         {             ""taskName"": ""Open Browser"",             ""suppressTaskName"": true,             ""command"": ""live-server"",             ""args"": [""--open public_html""]         }     ] } ```  AND CTRL+SHIFT+B:  ``` { ""key"": ""ctrl+shift+b"",          ""command"": ""workbench.action.tasks.runTask"" } ```"
2975|@rhires Alright mang, I wrote a simple socket tester with the internals of DTH you can find here:  https://github.com/wolfspider/ConsoleSocketTest  It _does_ fail to bind so we can rule out the build weirdness. Here is my console output from this little experiment:  Jesses-MacBook-Pro:ConsoleApplication jessebennett$ cd '/Users/jessebennett/Documents/vnext/yeoman/ConsoleApplication' ; /Users/jessebennett/.dnx/runtimes/dnx-mono.1.0.0-beta8/bin/dnx ConsoleApplication Port Created at: 49432 Now trying to bind... Socket not Connected!  I think this may in fact be a Mono problem and not necessarily an OmniSharp issue but don't know enough to say why it works on some computers and not others.
2976|// Note: Related #981
2977|"Hi, I need the feature too :+1: But, priority is low. Because, we can multiple command with the trick: http://qiita.com/usagi/items/5a0f4edc99420173abb3 ( Sorry, its wrote in Japanese. )  The abstract of the trick are: - Use the top-level command to `sh` or `cmd.exe` or `powershell.exe` or any other common shell program. - Set the top-level args to `-c` ( with `sh`) or `/c` ( with `cmd.exe` ) or `-Command` ( with `powershell.exe` ). - Set sub-level args to any your command with `\""` quoted. ( eg. : `""args"" : ""\""your-command arg1 arg2 arg3\""""` )  Example `tasks.json`:  ``` json { ""version"": ""0.1.0"" , ""command"": ""sh"" , ""isShellCommand"": true , ""showOutput"": ""always"" , ""args"": [ ""-c"" ] , ""tasks"":   [ { ""taskName"": ""la""     , ""suppressTaskName"": true     , ""args"": [ ""\""ls -la\"""" ]     }   , { ""taskName"": ""hoge""     , ""suppressTaskName"": true     , ""args"": [ ""\""echo hoge\"""" ]     }   , { ""taskName"": ""build""     , ""suppressTaskName"": true     , ""args"": [ ""\""mkdir -k build; cd build; cmake ..; make\"""" ]     }   , { ""taskName"": ""debug""     , ""suppressTaskName"": true     , ""args"": [ ""\""cd build; gdb bin/my-executable\"""" ]     }   ] } ```  Its can run in the current release version ( 0.10.3 ). :rabbit:"
2978|// Note: Related #981
2979|"Nice @usagi , this is my solution:  ``` {     ""version"": ""0.1.0"",     ""command"": ""cmd"",      ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""/C""],      ""tasks"": [         {         ""taskName"": ""Build Type Script"",         ""suppressTaskName"": true,         ""isBuildCommand"": true,         ""args"": [""tsc -p .""]         },         {         ""taskName"": ""Open Browser"",         ""suppressTaskName"": true,         ""isBuildCommand"": true,         ""args"": [""live-server --open=public_html""]         }     ] } ```  **tip:  cmd for windows, sh for linux**  shortcut: (override default build command)  ``` { ""key"": ""ctrl+shift+b"",          ""command"": ""workbench.action.tasks.runTask"" }  ```  when i hit ctrl+shift+b, subtasks show up:  ![05](https://cloud.githubusercontent.com/assets/1509692/11614653/3edac0ea-9c30-11e5-985c-ff3594364d24.png)  Bonus:  you can define your own shortcut:  ``` { ""key"": ""ctrl+shift+alt+o"",          ""command"": ""workbench.action.tasks.runTask/taskName"" }  ```"
2980|Hi **@spellizzari**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
2981|**@spellizzari**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
2982|I thought I should share this knowledge with you as well. Taking an screenshot from the hover popup was impossible with the regular <b><code>⌘+⇧+4</code></b> key combination won't work since pressing those keys will make the popup disappear. I found out I can schedule a screenshot using `screencapture` command with `-T` flag in OSX:  ``` shell screencapture -T 5 -C ~/Desktop/cap.png ```
2983|Seems like it. So I'm closing this issue. Thanks.
2984|+1; opening markdown files by clicking a (relative) link in the preview would be a very powerful feature both for _writing_ developer documentation (split into individual files by topic) for a project, but also for _viewing_ that documentation.
2985|I am having this same issue. Highlighting some Python code and hitting the quote character now replaces the text instead of quoting it. This didn't start happening until recently.  I'm running VS Code 0.10.3.
2986|I have add the comment that what i want as following: ![testaaa](https://cloud.githubusercontent.com/assets/15098626/11617653/e7d586f2-9ccc-11e5-8f8c-b1cbd5dba27b.png)
2987|Another place I was noticing there was an incosistency with TypeScript suggestions, where if I didn't have the proper capitalization, results would disappear.  I'm not sure if that should be a new issue or not.  Most atom plugins, for example `atom-typescript` and `omnisharp-atom`, also use the same fuzzy searching so their filtering behavior is very very similar to the behavior in the rest of atom.  It would be great if there was a common api/module for `code` as well, to keep things consistent.
2988|@weinand  can you repro this problem?
2989|:+1:
2990|@SteveALee You can look at the `product.json` that is installed with the Visual Studio Code product to see what we configure.
2991|@bgashler1 can you look at this?
2992|Hah, of course. Thanks.
2993|@jrieken there is a test `commands.test.ts` which asserts this behavior and still fails. The test is checked in but disabled.   ``` typescript test('calling command completes with the extension host updated properly', () => {     return workspace.openTextDocument(join(workspace.rootPath, './far.js')).then(doc => {         return window.showTextDocument(doc).then(editor => {             assert.equal(window.visibleTextEditors.length, 1);             return commands.executeCommand('workbench.action.closeAllEditors').then(() => {                 assert.equal(window.visibleTextEditors.length, 0);             });         });     }); }); ```  When the command has executed, the visibleTextEditors is still 1. When I open `CloseAllEditorsAction` in `triggerEditorActions.ts` I can make the following change to assert that indeed the promise is waiting until the editors are 0:  ``` typescript public run(): Promise {     return this.editorService.closeEditors().then(() => {         console.log(this.editorService.getVisibleEditors().length);          return true;     }); } ```
2994|:+1:
2995|By pressing esc key it is possible to continue to use the for loop template, still it would be a nice feature.  So +1 for this.
2996|If no one else is working on this, I'll take it.
2997|@yevk Can you try to exclude the jspm_packages? Due to the fact that the JS language service doesn't run full isolation we have a cap on the amount of resources we load. We exclude certain folders (like node_modules) by default but we don't filter jspm_packages. Cos of that you might run into a limit which then manifests in us not loading `test.js`
2998|It is a good point that we have more places in the UI where fuzzy matching can apply and just introducing a new quick open provider for fuzzy matching file matches is not enough in that case. Given that, having a global option to enable fuzzy matching for all places (file search, goto symbol, intellisense) is probably the better option.
2999|:+1:
3000|It isn't on the December plan #917
