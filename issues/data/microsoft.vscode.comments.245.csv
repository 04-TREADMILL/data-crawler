24401|@eknkc Is it possible that you still have the mouse button pressed at the time when you press Delete?
24402|IMHO this behaviour is useful by default, but I agree, we should add a new command that always goes to column 1, such that it can be easily replaced via keybindings.  Some editors distinguish and call this a **soft** start of line vs a **hard** start of line.
24403|What an amazing job you are doing, I wasn't aware of the alm suite. Can't wait it to use in on vscode. tks.
24404|This should now be straight-forward to implement as I've added offset <-> position conversion in the IModel.
24405|Duplicate of #2882
24406|We use [Inno Setup](http://www.jrsoftware.org/isinfo.php) as a setup framework, which seem to be pretty awesome at compressing. üëç
24407|This is terrible! And I finally got what the fuss was all about, thanks @CGreenburg!
24408|@jrieken added an option to disable word completion (coming in 1.2.0, `editor.wordBasedSuggestions`). You can also disable auto suggestion via `editor.quickSuggestions`.  I also cannot reproduce the initial report of `E` being inserted automatically. Does this happen with other software on your machine (e.g. Chrome?).
24409|Are you behind a proxy?  If you open the `Developer tools` inside Code (<kbd>Ctrl Shift P</kbd>, `developer`) do you see any errors in the console while the busy icon in the bottom left shimmers indefinitely?
24410|Unsure about that. The [docs](https://github.com/xavi-/node-copy-paste#the-api) about `copy` says  > Takes either a string, array, object, or readable stream.  The last (readable stream) sounds interesting to me
24411|@farfromrefug Because Squirrel.Windows uses old ZIP instead of lzma. In the electron-builder we will get rid of Squirrel.Windows soon.
24412|Excellent, thanks!
24413|@joaomoreno If possible, could you please explain why you decided to use Inno instead of NSIS?
24414|Just caught our attention first and worked.
24415|@dnear `editor.insertSpaces` and `editor.tabSize` are overwritten based on the file contents if a third option `editor.detectIndentation` is set to `true` (it is `true` by default):  So if you create a new json file (where there is no indentation to detect, it will use what you have put in `editor.insertSpaces` and in `editor.tabSize`). If you open an existing json file (that contains indentation), its indentation will be used.  I agree that this is pretty nasty, as there is a third setting that overrides the other two. Do you think this would be better if I improve the comments on `editor.tabSize` and `editor.insertSpaces` to explicitly mention `editor.detectIndentation`?  ![image](https://cloud.githubusercontent.com/assets/5047891/15815769/684f6ca8-2bcf-11e6-808a-b63b707c04d4.png)
24416|@githubhero Does `Format` appear as an action when you right click in the file? What file type are you using? Not all the languages have formatting support out of the box (you might need to install an extension that adds it).
24417|@Anjmao I cannot reproduce in 1.2.0. I have pushed a couple of fixes to target long lines in 1.2.0. Would you mind trying out [the insiders build](https://code.visualstudio.com/insiders) and checking if it reproduces there?
24418|"I am using VSCode out of the box, without any additional installed typescript. Therefore I have searched all installed programs and globally installed npm packages for ""typescript"", but did not get a hit elsewhere. Should I search in other places, e.g. Registry? Search term?"
24419|By analyzing the blame information on this pull request, we identified @isidorn and @alexandrudima to be potential reviewers
24420|@alexandrudima   No, I have only the following menu items: - Change all occurrences; - Cut; - Copy; - Paste;  The file is a PHP file. Same issue with CSS files. No issue with JS.  But why this common feature needs an extension?
24421|@joaomoreno you don't apply any transformation to the electron.exe (which becomes vscode.exe) to reduce its size?
24422|https://github.com/featherJ/vscode-testmime This is a test language extension to define a new mime in package.json.  In the MainThreadModeServiceImpl, the `text/testxml` mimetypes has been registered to the ModesRegistry. ![](https://github.com/featherJ/vscode-testmime/blob/master/testxml/1.png?raw=true) But the registration process is ran after the FileController initialization. So in the `openEditor` of `FileController`, vscode can not get the right mimetypes in `stat`: ![](https://github.com/featherJ/vscode-testmime/blob/master/testxml/2.png?raw=true)  Only if I register a languageExtensionPoint again in vscode: ![](https://github.com/featherJ/vscode-testmime/blob/master/testxml/3.png?raw=true),i can get the right mimetypes.  **First:** I think it's not necessary to repeat the definition for a same mimetypes both in extensions and vscode.  **Second:** `MainThreadModeServiceImpl` has registered the language extensions.  Then it should play a bigger role.
24423|@adred Both `Working files` (now called `Open editors`) and `Tabs` are going to be optional as far as I can tell.
24424|@featherJ can you take your comment and report it as a bug? I would always expect that extensions are being honoured when finding out which mode to pick up.  I would believe this should be fixable without changing the way the explorer works.
24425|"I also sometimes see it, though would expect the killing strategy to take place. I believe this can happen when starting an invalid electron application (debugging an extension ""out of dev"" without specifying the path to vs code for this case)."
24426|I think it is a matter of time -- we did not implement formatting for php, but there seems to be an extension that does that in the marketplace. https://marketplace.visualstudio.com/search?term=format&target=VSCode&sortBy=Relevance  Weird, I see @aeschli created a separate extension to do css formatting. @aeschli why not css formatting out of the box and only through an extension?
24427|None.
24428|"I did not want to make that a `string|number` where it would accept ""auto"" and a number. Given `0` makes no sense for a line height, I use that as an indicator that it should be computed as a ratio from the `fontSize`. I can update the description to explain what `0` actually does."
24429|Probably not worth doing due to the drop shadow, but an `@2x` png would work.
24430|@joaomoreno we do have a @2x version afaik, at least there are multiple PNGs.
24431|If you inspect the DOM, aren't we using it, then?
24432|@joaomoreno we do, it just seems bad when you zoom in. I was not aware of the issue with the shadow, so if we cannot get this with the SVG, then we can close this.
24433|@bpasero   Can you _please_ lock this thread and open a new one with the important bits of this one copied into it? There are still comments coming in daily from people who can't read it all (should tell you it's too long), and asking the same question over and over again, and once the release of tabs hits the public builds we're going to see even more spam in this thread.  I want to stay up-to-date on tab-related happenings, and this thread is currently the place to do that, but it's super annoying to get spammy emails multiple times a day for the same comments over and over again.  Apologies for tone & thanks.
24434|:+1: on a PR. You can add a new editor option and use it in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/wordHighlighter/common/wordHighlighter.ts#L120 -- that is where we do the call to do semantic word highlighting to language servers.
24435|Oh I see what you mean! It might be [possible](http://stackoverflow.com/a/6094674/261019), so let's just let @bgashler1 decide.
24436|"@erfannoury I don't think we did any changes in this area.  Is it possible that your `keybindings.json` got lost? i.e. when you open `File > Preferences > Keyboard Shortcuts` do you still see these rules:  ``` // Place your key bindings in this file to overwrite the defaults [     { ""key"": ""ctrl+shift+1"", ""when"": ""editorTextFocus"" },     { ""key"": ""ctrl+shift+2"", ""when"": ""editorTextFocus"" },     { ""key"": ""ctrl+shift+3"", ""when"": ""editorTextFocus"" } ] ```  Is it possible that you have a syntax error in `keybindings.json`? That might cause them not to be applied."
24437|@options We have merged in PR #5615 for 1.2.0. Would you mind [trying it out](https://code.visualstudio.com/insiders) and if there is still a problem please don't hesitate to open a new issue with detailed steps.
24438|@younky-yang With 1.2.0 we have merged in PR #5615. Would you mind [trying it out](https://code.visualstudio.com/insiders)
24439|I think we should change the scoring wrt document filters. It should not be the sum but the max of each attribute whereas each value must be greater than zero.
24440|Will investigate. Very likely the tsserver not cleaning up correctly.
24441|@johnf76 VS Code alpha has the fix now.
24442|"@ChazyTheBest It's complicated :). Over the years, I've added a lot of guards in the editor to protect against freezes (things taking too long). We have virtual vertical rendering (meaning if a line is outside the viewport, it incurs 0 cost on ""painting""), but we don't have virtual horizontal rendering (meaning if a line is in the viewport, it gets fully ""painted""). The reason is that we don't want to re-implement text layouting (with all the corner cases of bi-di, ligatures, etc.) in JavaScript, since the browsers do already such a good job.  So, if a line is really really long, we end up rendering the whole thing (creating thousands of dom nodes and giving these to the browser). At one point, things get very very slow. That's why we ship with a default `wrappingColumn: 300` (to avoid ""painting"" using thousands of dom nodes).  There is an internal option `editor.stopRenderingLineAfter` that kicks in. (https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/editorCommon.ts#L325).  ``` /**  * Performance guard: Stop rendering a line after x characters.  * Defaults to 10000 if wrappingColumn is -1. Defaults to -1 if wrappingColumn is >= 0.  * Use -1 to never stop rendering  */ stopRenderingLineAfter?:number; ```  Maybe I should remove all these guards, but my concern is then I'd see a plethora of VS Code freezes issues. I will think about it some more."
24443|@nitinbansal1989 These two settings get overwritten when opening a file with existing indentation and `editor.detectIndentation` is true. I will improve the description on these two settings to make that clear:  ![image](https://cloud.githubusercontent.com/assets/5047891/15818286/ddf87208-2bdc-11e6-808c-ee986e38a212.png)
24444|This is ESLint.
24445|This issue was moved to Microsoft/vscode-eslint#84
24446|"@Dharmoslap It looks like ‚áß‚å•F brings us in composition mode on your machine. What keyboard layout have you configured? What does ‚áß‚å•F do in other programs? You can always rebind the shortcut via `Preferences > Keyboard Shortcuts`. Here is how the default is defined:  ``` { ""key"": ""shift+alt+f"", ""command"": ""editor.action.format"",  ""when"": ""editorTextFocus"" } ```"
24447|It is hard to pick a default that makes everybody happy, given some of our users come from an IDE brackground, some come from other text editors, and some are by now used to our default.  I suggest to leave the default as it is, and point to the alternatives in documentation.
24448|I am starting to believe that this is an issue caused by node/electron on your system (Window 7 and bitlocker). Will try to code up an extension that simulates the tsserver file traversing / scanning code in a simple extension.
24449|"There are so many +1s that it is a bit much.  On Mon, Jun 6, 2016 at 2:16 AM -0700, ""anyong"" notifications@github.com wrote:  @bpasero  Can you _please_ lock this thread and open a new one with the important bits of this one copied into it? There are still comments coming in daily from people who can't read it all (should tell you it's too long), and asking the same question over and over again, and once the release of tabs hits the public builds we're going to see even more spam in this thread.  I want to stay up-to-date on tab-related happenings, and this thread is currently the place to do that, but it's super annoying to get spammy emails multiple times a day for the same comments over and over again.  Apologies for tone & thanks.  ---  You are receiving this because you commented. Reply to this email directly or view it on GitHub: https://github.com/Microsoft/vscode/issues/224#issuecomment-223906131"
24450|@joaomoreno yes. `getModel()` can be `null`.
24451|@startewho snippets work in markdown and they have always worked. They simply do not show up automatically. They are one `ctrl+space` away.
24452|@joaomoreno others suggested that I should add a flag the Ctrl+Shift+B restarts if already started. They don't want to learn a new short cut. Would that solve your problem ?
24453|@bpasero Why not use `ctrl+tab` and `ctrl+shift+tab`. Everybody knows those and they are the same over all OSes?  ![image](https://cloud.githubusercontent.com/assets/5047891/15818635/d11f4a00-2bde-11e6-856e-d3ca9f5a0d83.png)
24454|"I've just encountered this on 1.1.1. Is there any workaround? The editor actually appears to work just fine, but the ""Where is Electron?"" dialog keeps reappearing every time it's dismissed."
24455|Most likely due to PR #5615
24456|Moving to TS since VS Code relies on the tsserver provided by the TS team. Quickly looking at it I think this is caused by the fact that the tsconfig states moduleResolution node and to my knowledge node would not resolve 'folder2/file2' either since it has not the concept of a base path. But I leave the final answer up to the TS team.
24457|This issue was moved to Microsoft/TypeScript#8977
24458|Sounds great.
24459|@kmindi For 1.2.0 I've pushed two changes that target minified code files (very long lines). Would you mind [trying it out](https://code.visualstudio.com/insiders). For me, `bootstrap.min.css` opens fine -- interacting with it is not as smooth as with a non-minified file, but it causes no freezes for me anymore.
24460|@alexandrudima Seems to work now with the mentioned kind of files, thanks:) (referencing the pull request/commit to see what the cause/fix was would be interesting)
24461|@bpasero what is expected if a file has many markers (say more than 10) after applying find text? In general, files are collapsed if they have many markers just like in Search view
24462|Sure, it was ca2ca08c63c88f7c0bc2735a37a97ff3b8f600fc that targets all languages and 9326b1406b935d3188cb7afaec5ee78390b6d76a for JavaScript specific fix
24463|Yep!
24464|Since the mentioned behavior in the description is not user friendly due to issues like - Hard to see the selected problem in the file on single click  - Editor would be clumsy with too many selectors when both search and problems views are opened  I am not in favor of implementing this until we get UX input.  @bpasero @bgashler1 Consider this during UX discussion.  Thanks
24465|I think this is implemented already :)
24466|Imo with the integrated terminal this can be easily done now without leaving VS Code.
24467|I also have tasks like `build-admin`, `build-main`, `build-server`. It would be nice if <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F5</kbd> would trigger the right build task based on a glob that is matched on the currently opened file (could set the folder in there).
24468|"@alexandrudima this is for navigating across multiple tab groups. within one group we already have Ctrl+Tab.  In Sublime this maps to ""Goto Next File"" and ""Goto Previous File"": <img width=""776"" alt=""screen shot 2016-06-06 at 13 20 38"" src=""https://cloud.githubusercontent.com/assets/900690/15820402/80bbc1e6-2be9-11e6-86ec-4425d8f28e75.png"">"
24469|Well in this case the node just had 1. I am fine still keeping nodes with > 10 elements collapsed.
24470|@sandy081 can you please clarify where exactly you see issues?
24471|Is there any other editor / IDE / ... though that behaves as VS Code?
24472|@bpasero Mainly for following reason - When I am navigating the results/problems using single click, It is not clear in the file at what line the currently selected result/problem is in
24473|No proxy, both computers have the same network configuration, with the exception of different IP addresses; on is DHCP and the other is static, both have the same DNS information.  Nothing displays in the console.  No significant change in network traffic in/out of the computer.
24474|@sandy081 so you would argue that due to this you move focus into the editor?
24475|@alexandrudima I don't think so. I captured the gif while using my notebooks touchpad so I was lifting my hand from it to hit backspace. Thought about trying a mouse instead to make sure it's not some hardware / physical issue but could not find one yet :).   However, after setting `scrollBeyondLastLine` back to true, this never happened again so it's gotta be the editor doing something weird.
24476|@bpasero No, what I am saying is implementing this behavior with above issue is not giving good user experience. Hence suggesting to get a solution for that before implementing.
24477|Hi @aeschli, this is how it looks to me using the default theme:  ![rust-where-not-highlight-modified](https://cloud.githubusercontent.com/assets/1286674/15821103/5d332b92-2c20-11e6-928f-7ff538f17e55.png)  I've install `Rusty Code` only for Rust. The problem is still there, no matter whether I install the extension or not.
24478|Thanks!
24479|@joaomoreno I can access all of these domains with Firefox, because the Firefox user agent is whitelisted in my work enviroment (they even customized the user agent string for Firefox, so a default installation wouldn't work).  I tried a npm install with a custom user agent (`npm config set user_agent <string>`) and got the same `getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443` (can access the url in Firefox).  So I logged my network traffic while triggering an install in Sublime Text. The network interface receives `HTTP CONNECT packagecontrol.io:443 HTTP/1.0` and the answer from the proxy server is `HTTP/1.1 407 Proxy Authentication Required (text/html)`. With the default user agent it is followed by `HTTP/1.1 403 Forbidden (text/html)` but with the custom user agent there is `HTTP/1.1 200 Connection Established`.  So this means that the custom user agent really does the trick for me there.  Then I also logged a `npm install` and I noticed that there is no direct HTTP CONNECT request to the `registry.npmjs.org` domain, but instead there is a HTTP GET request to a local `secars.dll`. After some searching it seems that in my work environment each connection that comes from `cmd.exe` goes through the Symantec Endpoint Protection firewall. It seems that no connection is allowed in the firewall settings, because the request doesn't get answered. I can't even ping any domain/ip address using `cmd.exe` (`could not find host` with domain, `request timed out` with ip address). Also tried `wget` and that doesn't work either. I guess it is the same problem with VS Code.  I don't have any insight on how Node.js does HTTP requests via the network interface, but it seems to be done differently than in Sublime Text/Package Control.  Edit: #5816 is not really a duplicate, I think.
24480|"The extension attempts to download and untar OmniSharp to ~/.vscode/extensions/ms-vscode.csharp.0.3.7/.omnisharp and launches the OmniSharp process from there.  For the debugger, the extension generates a project.json file in ~/.vscode/extensions/ms-vscode.csharp.0.3.7/coreclr-debug. It then launches ""dotnet restore"" with the generated project.json to acquire the debugger bits.  However, the extension creates two OutputChannels during this installation process: one for the debugger (""coreclr-debug"") and one for OmniSharp (""OmniSharp Log""). I find it strange that neither of these appear as @acastaner reported above. This happens very early in the extension activation. I also find it strange that the Go extension fails as well.  @jrieken, @joaomoreno, any ideas?"
24481|Wd do support this with the hover. I'll add support for the `F8` feature, unsure what to do with the new error list.
24482|Oh, I read `while`, but you meant `where`. Sorry for that.
24483|I'm having a similar issue. I'm just editing markdown files that are shared through dropbox. However, I'm the only one with access to that dropbox directory. I did some digging and figured out that autosave was not happening, which meant that if I left VSCode open on my home desktop by mistake and then later attempted to edit the same files on my laptop, when I returned and closed VSCode on the desktop, that I would get this message. For my case, if the autosave works properly and the changes are merged in, I think it will probably work for me.  Is it possible that your autosave actually is working, but for some reason VSCode is not recognizing that it is the one that saved last?
24484|If you do not see the dirty indication in the editor it means the file is saved by VS Code if it was dirty before. However we use the modification timestamp of the file to find out if the contents on disk are newer. It looks like we might have to change this strategy and use a content hash instead (https://github.com/Microsoft/vscode/issues/919). Maybe the mtimes are not working properly in some cases.
24485|@alexandrudima I made the changes we discussed: - only one call to `deltaDecorations` - `beforeContentClassName` & `afterContentClassName` on `IModelDecorationOptions`, creating extra decorations in `viewModelDecorations.ts` - add 'border', 'outline', 'contentText', 'contextIconPath' to API  Still not sure if to enable SVG content. At the moment it is text and file path to an icon. We should maybe also allow URL to remote servers.
24486|I'm still testing around on it this morning. I've not gotten autosave working. I opened a folder to edit a bunch of markdown files. Nothing special. I'm doing the same on the laptop sitting right next to me. I can see when changes get pushed from the one computer to the other if a save actually happens. So my issue may be some sort of weird crossover issue from a config problem or something.  Any suggestions on stuff I can try to get more useful data for you? I'm stuck at home with a stomach bug, so....
24487|Moving to @isidorn for checking if our output spam protection kicks in. But I think it does.
24488|@williamwgant how does your Code settings look like? Do you see a dirty indicator?
24489|"I see a dirty indicator on the file itself. The settings.json for the workspace and the settings.json in my user directory both are as follows:  {     ""editor.wrappingColumn"": 0,     ""editor.selectionHighlight"": false,     ""files.autosave"": ""afterDelay"",     ""files.autoSaveDelay"": 1000 }  Umm. Something I just thought of. Is the specified delay in milliseconds? Or seconds? Cause the latter would explain some things."
24490|+1 on this issue, although the workaround suggested by @egamma works for me
24491|@williamwgant there is a typo in your setting, it should be `files.autoSave` and not `files.autosave`
24492|Aww man. That's embarrassing.  So I've tried since and can't replicate the issue. I don't seem to be able to move fast enough to cause it. I even tried disconnecting the laptop from wireless and doing the changes. I'm not getting burnt now at all.  My podcast partner (on complete developer podcast) is going to give me a hard time for screwing up casing like that. We've also been burned on show notes because I didn't have the config setting named properly, so his stuff autosaves and mine doesn't. That's a huge pain point you just fixed for me, sir.  I presume the issue still exists, but probably needs a larger change set to actually manifest itself. I'm not sure of a good way to prove it though.
24493|@alexandrudima see https://github.com/Microsoft/vscode/issues/6470, indent guides are essentially done by [vscode-guides](https://github.com/spywhere/vscode-guides) with the exception of this issue https://github.com/spywhere/vscode-guides/issues/1 which we could tweak the API to cover.
24494|@bpasero any ideas?
24495|@joaomoreno yeah, I believe the community libs like yargs size the column dynamically but keep formatting similar to what it was like before.
24496|I ran into the same issue while writing an indent-enabled extension for the Julia language. It's quite common to write:  ``` julia function foo() end ```  with a manual `[enter]` after `foo()`, followed by `end[enter]`. But because of the way this issue works out, I instead end up with:  ``` julia function foo()     end ```  With the current API it seems somewhat difficult to get the intended behavior, while, for example, Atom automatically unindents the `end` with the same `RegExp` (even before pressing `[enter]`).
24497|No worries, I filed https://github.com/Microsoft/vscode/issues/7252 to warn when this happens in the editor.
24498|If I open any minified javascript file (34kb for example), VSCode crashes here.  And I have a powerful machine, Win10 i7 6th gen 8mb cache, 16gb ram 2133mhz, ssd etc.
24499|No, never seen this.
24500|@buzinas please report that as separate issue with the file in question attached if possible. Thanks.
