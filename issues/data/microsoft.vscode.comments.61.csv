6001|Opening the parent folder solves it. I created a folder then put the file in there and opened the folder in code. Now it updates immediately with external changes. My G: drive is a physical drive. So it doesn't work with single files, right?
6002|Thanks for actioning this!  Fixed link: https://github.com/Microsoft/vscode-docs/commit/a2a1d3e8e208fdb06e36f75b0748b7adb5312b5d
6003|What do you mean by prefix? I'd like to be able to map file extensions to a language, ie map `.foo` to `HTML`.
6004|@bgashler1 Of course, happy to help. I'm not aware of any others that I'm currently having trouble with. I'm sure I'll discover any other challenges over time, and will report them accordingly.  Cheers, Trevor Sullivan Microsoft MVP: PowerShell
6005|@matthewp this is another issue #334, let's keep these issues separate.
6006|@AndrewNatoli I've tried to reproduce your setup with VSCode 0.10.6 but I'm not seeing the lower case paths: ![2016-01-11 23-04-31](https://cloud.githubusercontent.com/assets/1898161/12248175/f258a666-b8b7-11e5-9026-2b35534dfb87.png) The only difference in my setup: I did not install anything php related (so I don't have xdebug) and I don't have Apache.  But I found this: http://stackoverflow.com/questions/7699412/case-inconsistency-of-php-file-paths-on-mac-mamp   Is the problem introduced by Apache/MAMP?
6007|"Hi @weinand,  It seems to be isolated to using a virtual host with Apache. By that I mean configuring Apache to route custom hostnames like `mygreatsite.com/testproject/app.php` instead of `localhost/testproject/app.php`. I'm not sure how this could possibly have an effect on what VSCode is seeing but the difference is there.  When using XDebug, XDebug sends an ""init"" message that includes the server-side path of the file you are running. So it will say, ""Hey, Apache and I are serving up /Users/andrew/test.php.""  The adapter will then say ""Hey, that's cool XDebug. Listen, my guy set a breakpoint on /users/andrew/test.php. Could you stop there if you open that file?""  So in short, the Apache side of things seem fine while VSCode's output is incorrect.   I'll try testing with a remote host in a moment.  ---  I checked the bug report linked on that Stack Overflow post. Running their [sample code](https://bugs.php.net/bug.php?id=60017) did not produce the same result; the proper case is presented in paths."
6008|Ok, this seems to reproduce the slowly climbing memory usage, if on a smaller scale: [VSCodeTest.zip](https://github.com/Microsoft/vscode/files/86499/VSCodeTest.zip). I had `/ext/build/ext-all-debug.js` opened.  (Yes, it's a 7z inside a zip... GitHub won't let me upload a 7z or xz directly, and zip and gzip are too big)
6009|@AndrewNatoli How can Apache affect VSCode? I could only imagine that some URL conversion that VSCode uses internally is affected by something like the virtual host feature of Apache. If this is the case, it will affect all debug adapters. Could you try whether you see the same issue with vscode-mock-debug?
6010|@isidorn what code are you using to convert VSCode's internal URLs to the absolute pathnames sent to the debug adapter? Could you please help @AndrewNatoli to debug the client side of this so that we understand where paths become broken.
6011|+1
6012|+1
6013|I think the simple solution is best, just remember when a user selects a language for a particular file type.
6014|I would consider this a a feature request, not a bug ;)
6015|@SofianHn and @Tyriar.  I took Sofian's work of adding the h4 hierarchy and added some margin on top of each h4.  Do you think the hierarchy is more clear now?  This isn't live on the site yet (wanted to get feedback first based on this test screenshot).    #   ![image](https://cloud.githubusercontent.com/assets/11839736/12252160/99140c18-b889-11e5-9800-2abad94189bd.png)
6016|I would not exclude the possibility of me screwing up the paths while converting them to URIs, so the XDebug logs are not 100% credible. But the screenshots @AndrewNatoli provided indicate that the arguments from VS Code (`args.source.path`) are indeed lowercased. @AndrewNatoli When you debug the adapter, all communications between Code and the adapter are logged to the console, are the paths lowercased there? That would be evidence for me.  And what file system are you using?
6017|@aeschli  Sorry, i do not known the status about PHP command, actually i don't known what is this mean.  I'm new on PHP.
6018|@Penryn no a restart is fine too. This is weird, even if the file is locked by some other process, asking its parent folder for its children should return it. Any ideas what could go on? Something in the console (from Help menu) maybe?
6019|I can reproduce, this only seems to happen for files that are on the root of the disk: https://github.com/nodejs/node/issues/4643
6020|":+1:   I suggest to rename ""Source Code Control"" to either ""Git"" or ""Source Control"". I also suggest to find a keybinding for git that is free (Cmd+Shift+G seems not) and assign it."
6021|[getUserEnvironment()](https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/env.ts#L22) exists for the specific purpose that Code cannot rely on inheriting the environment from its parent process. It spawns a shell and reads the environment from it.  In Linux, what do you get when you run `$SHELL -ilc env`? This should print out the correct `PATH`, one that points to gulp.
6022|@massimocode I actually think that is an acceptable behaviour. You could either 1. Provide a **Restart all** button 2. Provide a **Restart** button (current solution) 3. Provide both  Given them all, I still think 2 is a fair option, as I often want to leave my other windows intact.
6023|The only way to call additional task is to use F1 > Run Task > .... We currently don't support to bind arbitrary keyboard shortcuts to tasks.  If you want to call all three tasks with on short cut all I can recommend is to have a task entry all which calls a script that runs all three tasks.
6024|Ok that's fine, I just wanted to bring the issue to your attention in case it wasn't desirable behaviour
6025|The map syntax is not yet supported. Duplicate of #1758
6026|@darktutu What does the OmniSharp log read (press Cmd+L, L)?
6027|@bleggett Thanks for the explanation. Sorry for all the ping-pong with the builds and all, but I just can't seem to reproduce your scenario, so we'll have to try to catch it this way.  I've noticed that we can also set `rejectUnauthorized` to `false` when making a non-proxied HTTPS request. [Here's a new build](https://ticino.blob.core.windows.net/build/20ff90c932596961c710ae7d0441705694e2b0a9/VSCode-win32.zip?st=2016-01-11T08%3A46%3A00Z&se=2016-01-18T08%3A46%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=i0EWsjejoKGWGrQdKkA9TLH%2Fm7b5XC9wO7EBuXIaZEc%3D) that does that, do you mind giving it a try? Don't forget to set `http.proxyStrictSSL` to `false`.
6028|Can you please share the file for which you see this? What windows version?
6029|Please create a pull request https://github.com/Microsoft/vscode/pulls
6030|@FloMaetschke moved your issue to #1942
6031|First: we don't have the setting `https.proxy`. Only `http.proxy`, that will be enough. Also, make sure `http.proxyStrictSSL` stays `false`.  It won't probably fix the whole issue but please try out [this build](https://ticino.blob.core.windows.net/build/20ff90c932596961c710ae7d0441705694e2b0a9/VSCode-win32.zip?st=2016-01-11T08%3A46%3A00Z&se=2016-01-18T08%3A46%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=i0EWsjejoKGWGrQdKkA9TLH%2Fm7b5XC9wO7EBuXIaZEc%3D). Let me know if you still see the `ERROR Unable to verify the first certificate`.
6032|Excellent, I can now reproduce, thanks for the sample!
6033|I can not reproduce this. Do you see it all the time for any .css file? Can you share the .css file for which you can repro this?
6034|Any estimation on when this will be supported? Thanks.
6035|@isidorn  windows 10 The file is from https://github.com/Microsoft/TSJS-lib-generator/blob/master/baselines/dom.generated.d.ts
6036|This is something which we have explored in the past but it did not feel good to us so we reverted it after a week. We are very reluctant to automtically change UI for the user, when the user starts debugging it means he actually wants to be focussed on debugging and thus revealing the viewlet makes sense, however when the user stops debugging it does not mean he wants to go back to editing, he might want to add some breakpoints / inspect repl and then start debugging again thus staying in the debug viewlet might be a correct choice sometimes.  @bpasero @stevencl opinons more than welcome
6037|Fixed
6038|I tried with the file provided and could not reproduce both for Win 10 and OS el capitan Will reopen if more users see this issue
6039|Here is the output formatted (according to http://superuser.com/a/117921):  ``` USER    PID   %CPU   %MEM      VSZ      RSS TTY  STAT  START    TIME     COMMAND martin  987  115,7   13,1  4206388  1099208 ??    R    10:09am  2:16.77  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=watcherService martin  988    0,0    0,0  2464436     3184 ??    S    10:09am  0:00.01  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=59 martin  981    0,0    0,7  3203928    54996 ??    S    10:09am  0:00.60  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=pluginHost martin  980    0,0    1,7  4519136   145132 ??    S    10:09am  0:03.12  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper --type=renderer --no-sandbox --lang=en-US --node-integration=true --enable-delegated-renderer --num-raster-threads=2 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --channel=974.1.633953805 martin  979    0,0    0,5  3194512    39524 ??    S    10:09am  0:00.30  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=SharedProcess martin  975    0,0    0,5  2711288    40136 ??    S    10:09am  0:00.25  /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper --type=gpu-process --channel=974.0.1109795083 --no-sandbox --supports-dual-gpus=false --gpu-driver-bug-workarounds=13,24,29,32,41,45,52,58 --gpu-vendor-id=0x8086 --gpu-device-id=0x0166 --gpu-driver-vendor --gpu-driver-version martin  974    0,0    0,8  3395268    65068 ??    S    10:09am  0:01.38  /Applications/Visual Studio Code.app/Contents/MacOS/Electron martin 1060    0,0    0,0  2432788      588 s001  R+   10:11am  0:00.00  grep Electro ```  Here is the output trimmed:  ```    %CPU   %MEM      VSZ      RSS  STAT   TIME     COMMAND   115,7   13,1  4206388  1099208   R    2:16.77  [watcherService]     0,0    0,0  2464436     3184   S    0:00.01  [crashHandler]     0,0    0,7  3203928    54996   S    0:00.60  [extensionHost]     0,0    1,7  4519136   145132   S    0:03.12  [renderer]     0,0    0,5  3194512    39524   S    0:00.30  [sharedProcess]     0,0    0,5  2711288    40136   S    0:00.25  [gpuProcess]     0,0    0,8  3395268    65068   S    0:01.38  [mainProcess?] ```  @bpasero Looks like the file watcher?
6040|Something is wrong in your setup, since in my machine the url `node-gyp` requests is `https://atom.io/download/atom-shell/v0.35.6/node-v0.35.6.tar.gz`.  Yours seems to be `https://atom.io/download/atom-shell/v4.2.2/ node-v4.2.2-headers.tar.gz`.  This means that the [automatic Electron version detection](https://github.com/Microsoft/vscode/blob/master/scripts/npm.bat#L5) isn't working in your system. Do you have PowerShell installed?
6041|@jpoon In case more people hit it. Still not sure what happened there, though... You don't happen to have a snapshot of that folder before deletion...? :smile_cat:
6042|@chrisdias ping
6043|Absolutely. :+1:
6044|:+1:
6045|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/40 (JavaScript and TypeScript use the same tokenizer)
6046|"@joaomoreno  Work fine for me !   For proxy i use ""http.proxyStrictSSL"": false  Thanks all !"
6047|duplicate of #1217
6048|As @weinand mentions, VSCode (through Electron) embeds a certain node version.   ![image](https://cloud.githubusercontent.com/assets/5047891/12259937/32996718-b919-11e5-8812-96deeff6d5d3.png)  I think the documentation around debug adapters should be made more clear to signal than an extension author should try to setup the same node version as the VSCode it is targeting when using server mode for a debug adapter (which is only a development time mode for a debug adapter, once users install a debug adapter it doesn't run in server mode, right?).  @weinand  Perhaps we can document a command that uses Electron in node mode for server mode debug adapters (i.e. make even the server mode runtime of debug adapters use the same node version as VSCode)?  @felixfbecker Such a check on our side would not really help you. Imagine you would ask for `node >= 5`, we ship with `node` `v4.1.1`, so your extension will be disabled at startup and no users of VSCode would ever get to use your extension.
6049|@FelixNeilc Are you sure you don't have any custom keybindings in your `keybindings.json` user file? Did you install extensions that perhaps bind `cmd+c` to show the command palette?  @joaomoreno @jrieken @bpasero Is copying a word on the mac really not working?
6050|Works for me.
6051|Also @chrisdias
6052|@planetexpress69 does CPU ever go down, is it only initially?
6053|CC @aeschli
6054|cc @egamma   @bpasero Looking at atom/electron#3349 looks like we still have a blurry font issue on windows until we adopt an Electron version with Chrome 47 -- the patch of Electron v0.34.4 only covers Linux.
6055|"Ok, I checked `PATH` again:  ``` shell starman@blue3:~$ $SHELL -ilc env   :   : SHELL=/bin/bash   :   : PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games   :   : NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist NVM_IOJS_ORG_MIRROR=https://iojs.org/dist   :   : starman@blue3:~$ printenv PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games starman@blue3:~$ echo $0 /bin/bash ```  Of course `PATH` does not include a path to Gulp, as I said repeatedly. Because Node Version Manager such as [nvm](https://github.com/creationix/nvm) adds these paths to the `PATH`. It in Windows also do the same.  ``` shell starman@blue3:~$ nvm use v4.2.1 Now using node v4.2.1 (npm v2.14.7) starman@blue3:~$ gulp -v [18:06:56] CLI version 3.9.0 starman@blue3:~$ printenv PATH /home/starman/.nvm/versions/node/v4.2.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games ```  `gulp -v` above works correctly because the `PATH` includes `/home/starman/.nvm/versions/node/v4.2.1/bin` that includes `gulp` after `nvm use`. We can avoid this issue temporarily in Windows rather than Linux, by using `bin/code.js` (in some cases).  So, the point of this issue is **NOT** that these paths are not already added to `PATH`, it is that we have no way to do it when VS Code starts. For example, VS Code sets environment variables a user specified when it starts, or it gives a chance such as ""Startup Script(or Command)"" to do something. (This Startup Script(or Command) makes nvm run, or it adds these paths to `PATH`.) https://github.com/Microsoft/vscode/issues/1895#issue-125768845"
6056|Works for me
6057|"@pcgeek86 Can you please share your `keybindings.json` ?  The following works for me on Windows:  ``` // Place your key bindings in this file to overwrite the defaults [     { ""key"": ""ctrl+k down"",                ""command"": ""actions.find"" } ] ```  For OS X that would be `""cmd+k down""`."
6058|Hi Benjamin, CPU goes down after allocation approx 1,25 GB of RAM. Takes around four minutes on my „101“ (MacBook Pro (13 Zoll, Mitte 2012), 2.9 GHz Core i7). Regards, Martin  > Am 12.01.2016 um 10:56 schrieb Benjamin Pasero notifications@github.com: >  > @planetexpress69 https://github.com/planetexpress69 does CPU ever go down, is it only initially? >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/1009#issuecomment-170857183.
6059|Thanks for checking! :+1:
6060|> ...Currently the code locked to amd  Since the code is all in TS we can easily switch to another module system and we have done this in the past.
6061|@ccimage Can you please share the file with me or point me to a similar file that reproduces the problem?
6062|Now here's what I don't understand. `getUserEnvironment()` was implemented to fix exactly this issue. By calling  `$SHELL -ilc env`, it should've picked up `.bash_profile` or `.bashrc` which contains the call to nvm, which would set the variables correctly. I can confirm that works because I also use nvm every day on OS X. It works for me. And many others.  We just have to figure out what is different in your system that makes it not work. Where did nvm configure itself in your system? `.bash_profile`, `.bashrc`, some other config file?
6063|Me 2.
6064|@alexandrudima yup
6065|I also think that switching back to the prior viewlet after stopping the debug session would be the right thing to do, but we need to think carefully and be clear about the actions that are interpreted as stopping a debug session. Pressing the stop button on the debug toolbar is one (obviously :-) ) but we would need to think about whether or not closing the application being debugged should also be interpreted as stopping the debug session.
6066|@egamma it works perfectly.
6067|This was just fixed yesterday and will be available with the January release cc19a2d @alexandrudima fyi :smile:
6068|@bpasero fyi
6069|The mechanics to create a virtual document are in, the preview/render html command is tracked in #1946
6070|a gif  ![1](https://cloud.githubusercontent.com/assets/7639395/12260926/fea107c8-b958-11e5-9f79-6ca5d2484b3f.gif)
6071|Thanks! @alexandrudima can you please also try to repro?
6072|@bpasero Are there events when editors get rearranged et al?
6073|Yes I've got it and I've tried to execute the scripts\npm install command (instead of doing this with the command prompt), still the same error!
6074|Delivered PR, thanks @dstorey, an amazing contribution!
6075|@jrieken currently not, but I can add such an event to the collection of editor events.
6076|"In the Command Prompt, what do you get when running the following snippet from the `vscode` directory?  `powershell -Command ""(Get-Content -Raw package.json | ConvertFrom-Json).electronVersion""`"
6077|:+1:   I think there is something missing currently to make this work from the workbench. The base input is `iFrameEditorInput` with subclasses for `HTMLFrameEditorInput` (which works by showing a URL) and `MarkdownEditorInput` (which works by just setting the content directly to the iframe).  For this it seems to me we have the content to show as a string (from the code editor model) and we do not have a URL to show.   If we follow a similar model as with `ResourceInput`, then we can create an input (`ResourceFrameEditorInput` ?) for the iframe editor that gets its contents from the code editor model that the user provided before hand.  Another thing is how to update the iframe from changes to the code editor model. The input could register to changes on the code editor model and just refresh an opened editor with the input when this happens. This is somewhat we do for markdown today.
6078|@egamma I do this to not get into the business of trying to find the right place of putting the comma. someone could have typed a complicated comment after a line, so I do not want to scan for the real end of the JSON part of the line.
6079|Good points, thanks Brad, Steven. Let me know once you hear back from the VS people and then I can update our breakpoint from orange to whatever we decide here.
6080|:+1:
6081|On the other side, if we chose to go with red then we should choose a different color for our breakpoints widget which is currently orange. If I put that to red then it feels weird to me and all seems like an error box so suggestions are welcome.  But as noted last sprint I also dislike red breakpoints since they feel as errors and would much rather go with blue since they seems to solve this issue and the swiss flag problem among other things.  ![screen shot 2016-01-12 at 12 15 47](https://cloud.githubusercontent.com/assets/1926584/12262152/469d3138-b926-11e5-8627-41363f412b90.png)
6082|@alexandrudima I see. I guess I have to limit this to a `vscode` version constraint - that means when you update Electron with a new major Node version, there has to be a new major VS Code version.
6083|Thanks for reporting and sorry about it slipping through! :+1:
6084|@bpasero Just tried in the default electron app in a textarea, no context menu shows.
6085|@felixfbecker That is correct, a new major node version should force a new major VS Code version. However, I'm not sure how we're really going to handle that given a new major VS Code version would invalidate all published extensions.  fyi @egamma
6086|@alexandrudima Also to note, while Code is on 0.x it is technically not under semver. But the convention is on 0.x to treat minor versions like breaking changes, so semver (the NPM package) will match a constraint like `^0.10.6` to `0.10.7`, but not `0.11.0`. So every extension that uses a caret on vscode constraint is invalidated for each new minor 0.x version of Code atm.
6087|Yes, `.bashrc` loads nvm in my system. And it seems that `nvm.sh` was done correctly.  I think that you might set `nvm alias default` before?, or you wrote `.nvmrc`? That is, in your system, the paths were already added to `PATH` before you run `nvm use`, right? `nvm use` was already called automatically in some way.  Anyway, `nvm default` is not set in my system, and `nvm use` doesn't run automatically in my system. Also, some managers such as nvmw (for Windows) do not have an option that makes it run automatically, as default.  The paths may be already added to `PATH` when VS Code runs if a manager was called automatically in some way, otherwise these are not.
6088|Maybe, does your system have a default node? (node that was installed without nvm)
6089|"@plantain-00 That looks most annoying, sorry about that. I cannot repro either. To help us track this down, can you please try the following:  Here I'm doing it: http://recordit.co/MVsleuKLan or gif: http://g.recordit.co/MVsleuKLan.gif - `F1` > `Developer: Toggle Developer Tools` - Select magnifying glass (Inspect Element) and click somewhere on the text in the editor - Collapse the `<div linenumber=""...` and select the parent `<div class=""view-lines"" ...` - Hit `Escape` - Go to the Rendering tab - Check Show paint rectangles and Show composited layer borders - Scroll  The reason I'm asking is because at one point in long files (when the accumulated line heights get to more than 500k pixels), we wrap the positions, so you might be hitting that case -- the `top` properties changing on line divs should show if that is the case. In my example, I am scrolling intentionally around that limit.  If that is not the case, can you please check if you see any correlation between the black lines and the composited layer borders? (the grid lines appearing).  Do you use any Windows zoom? What version of Windows are you on? Are you zoomed in in VSCode (from the View menu) or from the settings? And finally, does this repro if you run Code.exe from the command line with the `--disable-gpu` flag?"
6090|@alexandrudima since you have tried it, can you report this to electron and link the issue here?
6091|@alexandrudima That's cool, I'm just happy to have contributed something to the project.
6092|I have got the code for these, I'll create a PR for them.
6093|"I dont see anything. I just get an error logged in console: showing  Your credentials could not be authenticated: ""Credentials are missing."". You will not be permitted access until your credentials can be verified. <BR> This is typically caused by an incorrect username and/or password.  But username/password is correct.  ---> The html page, that is returned from the proxy To verfiy this, i also tried it with fiddler2 using proxy auto authentication and using fiddler localhost proxy as proxy. same result. using chrome or any other app, it works fine."
6094|"@alexandrudima I tried these: 1. If I opened `Developer: Toggle Developer Tools`, I can not repro the black lines any more, and if closed the tool window, I can repro the black lines again. 2. If I opened `Developer: Toggle Developer Tools` and Check Show paint rectangles and Show composited layer borders, I can see the lines, but actually invisible if didn't check the two options.    <img width=""372"" alt=""1"" src=""https://cloud.githubusercontent.com/assets/7639395/12263879/921a6274-b96d-11e5-845e-b381d4a4ef03.PNG"">    <img width=""254"" alt=""2"" src=""https://cloud.githubusercontent.com/assets/7639395/12263861/74ad27a8-b96d-11e5-99b9-8b50d65e8d43.PNG"">    <img width=""228"" alt=""3"" src=""https://cloud.githubusercontent.com/assets/7639395/12263862/76ae2778-b96d-11e5-8d80-7f6e5f16ded8.PNG""> 3. I didn't follow the `the top properties` part 4. It's a Windows 10, It's 150% in `Settings->System->Display` 5. I forget whether I zoomed in in VSCode, but now, if clicked `zoomed out`, it doesn't change the view, I can repro the black lines, then if I clicked `zoomed in`, the view changes, and I cannot repro the black lines. Then if I clicked `zoomed in` again, I can repro the black lines again."
6095|1. My vscode settings only changed `typescript.tsdk`, no `zoomed in` 2. I cannot repro the black lines when I run `code --disable-gpu`
6096|-> 0.35.5
6097|Awesome, thanks @markrendle =)
6098|CC @jrieken
6099|@AndrewNatoli can you please confirm that VSCode passes lower-cased paths to the php debug adapter even if XDebug is not running and Apache was not used to hit the code. This would be case if you open a php file in VSCode and set a breakpoint.
6100|I see. So, when you spawn a shell in your system you don't have a `node` in the `PATH`? You always need to run `nvm use` every time you want to use Node?
