1501|I created an extension that does this when vscode was open sourced https://marketplace.visualstudio.com/items/Tyriar.sort-lines  The repo is here for issues/PRs https://github.com/Tyriar/vscode-sort-lines
1502|@alexandrudima `alt+shift+down/up` is the default on Atom and Sublime, makes sense to follow suite.
1503|@jpoon @Tyriar maybe I closed this too early. What you can now do is run tests from the command line but only if code is not already running. This should however be good enough for running extension tests as part of Travis CI. We are actually able to run some of our API tests on Mac and Linux through Travis even though the tests require a real code instance to spawn.
1504|+1. Use this lot on Sublime.
1505|@bpasero will that constraint go away when `launchNewInstance` (or whatever it will be)  is set to true? https://github.com/Microsoft/vscode/issues/48
1506|"Quite by accident, while trying to solve another problem, I found that hitting ""/"" in the file open dialog brings up a little popup where I could give it a dotfile. Sorry for the noise. And thanks for accidentally teaching me this One Simple Trick."
1507|"I'd second this. It is so slow as to be unusable for me in Kyrgyzstan, though it only took me a few minutes to download the 61 meg distro. I type ""ext install"", then get a sliding blue bar and nothing else. Can't find any way to see what's happening. Wireshark says there is a long slow HTTPS session happening to marketplace.visualstudio.com."
1508|"Thanks for confirming. That's great news!  I gave it a try for around 4 hours yesterday, but ran into the issues:  1) cross-dependencies from the git module into the `vs` codebase. As a quick and dirty approach, I tried to make the whole `vs` folder a node-module, but that's a lot of work for me to maintain and really doesn't solve the modularity problem.   2) troubleshooting dependencies in the git codebase on vscode UI libraries `vs/base/browser/keyboardEvent.ts`. Unfortunately, the TypeScript compiler didn't tell me where the dependency was coming from so after going in circles for around an hour, I gave up and submitted this issue. Ideally, the git module would be split between client and server code in separate modules (or perhaps the client code can stay within the vs folder) so consumers of the API can choose which pieces to use.  3) absolute paths within the application. I did a lot of search-and-replacing to make them relative within the git modules, but because TypeScript's turn around time on builds was very slow for me and with the debugging message problems in 2), I had to stop as well.   4) unfamiliarity with TypeScript. I spent 3 hours trying different approaches to compile the TypeScript to JavaScript (two webpack loaders, the typescript CLI, walking the typescript tree to compile all files, etc), but had to give up due to time constraints.  I really think the refactoring, tooling, and testing should be done by the vscode team since they will be able to structure things that way they believe is best. Also, I would like to see the libraries distributed as compiled JavaScript so that those of us who do not use TypeScript, do not need to add it to ""hack it"" into our tool chains when we run into these types of tooling problems.  There's no urgency on this for me and definitely agree on the evolutionary approach you propose, but I'll monitor this issue for progress so if you can re-open this issue so that it remains as a feature request, I would appreciate it.   PS. You might want to use git-server as a pilot for next step in your evolution :wink:"
1509|@joaomoreno do we need a separate issue to track this requirement:  https://twitter.com/jchannon/status/667283133318889472  i.e. to get a notification about available updates for extensions?
1510|There is one:  https://github.com/Microsoft/vscode/issues/268
1511|> @daviwil said... > There is one:  Ah, perfect :+1:
1512|I have no idea what changed but after `npm run compile` my `Ctrl+Shift+B` command seems to be working too. I deleted my out folder and I see that it gets created when I build it.
1513|@bpasero Assuming it is Github Atom, it doesn't crash when I replicate the same situation. I am trying to get the logs for VSCode, but I don't know where they are located.
1514|@Tyriar unfortunately not.
1515|my version is: git version 1.7.9.5
1516|You need to install the mono runtime, for some reason on osx vscode ominicharp does not run without it, even if you default coreclr as I have. I have both installed, coreclr darwin as my default and vscode look anyways for mono runtime.  Hope it helps
1517|Do you have installed the mono runtime?, at least on OSX is the way to do it. core clr as my defualt, mono runtime for vscode
1518|"For features that are in the works, can I request that we NOT close issues/requests until the feature is shipped?   It'll likely help save a lot of repeated ""Does VSCode support ASP.NET 5"" questions."
1519|Hi, you have to read #160 :)
1520|"@jrieken What dependencies though? The only components being used are System.Console and System.Convert (of which I cannot find a package for on nuGet). The closest thing I found for System.Convert is this: https://www.nuget.org/packages/runtime.osx.10.10.System.Runtime.Extensions/4.0.11-beta-23516 - After adding the package, Intellisense still can't see Convert as a valid symbol, and I don't understand why Console.Clear() isn't in the System.Console package.  EDIT: Adding `""Microsoft.CSharp"": ""4.0.1-beta-*""` to my project.json seems to have resolved ""Convert"", no idea where I'm supposed to obtain ""Clear"" from"
1521|In general, yes. But, this feature will come from another team and the work will be done in another repository, as an extension.  Ideally we could link to that but it doesn't exist yet.
1522|_From @jrieken on November 18, 2015 13:53_  not really, we should support animated gif or even some css-animatations...
1523|_From @SamVerschueren on November 18, 2015 13:55_  @jrieken Thanks! Is it possible to provide me a small sample of the statusbar api? The documentation is empty.
1524|_From @SamVerschueren on November 18, 2015 14:13_  Found an example in [wordcount](https://github.com/Microsoft/vscode-wordcount/blob/master/extension.ts).
1525|_From @SamVerschueren on November 18, 2015 14:31_  Nothing we can't solve with [elegant-spinner](https://github.com/sindresorhus/elegant-spinner) ;)  ![progress](https://cloud.githubusercontent.com/assets/1913805/11243643/6fc2cdc2-8e09-11e5-8754-1f4f08570419.gif)  PS: It's a lot smoother then on the gif...
1526|_From @jrieken on November 19, 2015 10:19_  :+1:
1527|Very fair request - we have been adding more to the debug console so this also makes sense @bpasero are you the right guy to think about this.
1528|@ArtemGovorov how is Wallaby going I've not yet seen a publish Zurich will be online soon let us know if you need help.  For publishing @joaomoreno is your guy.
1529|_From @ArtemGovorov on November 18, 2015 5:45_  @seanmcbreen Thanks, it's getting there, most of the functionality is working. I do need to do a few more things before publishing it though.
1530|_From @SamVerschueren on November 18, 2015 7:54_  ANSI color codes (chalk) will be supported in the future. See https://github.com/Microsoft/vscode-extensionbuilders/issues/69.
1531|_From @ArtemGovorov on November 18, 2015 8:12_  I'd rather use some higher level abstractions than using any specific colors. For example, it may be better to specify CSS classes (like `error` or `info`), that VS Code is using everywhere else, and to avoid specifying a fixed color that may not look good in a user theme.  I like how it's done in Atom:  you may use LESS variables (that may be changed by a theme) to define classes in your extension LESS file and you can later apply these classes in your HTML. But Atom allows to work with HTML/DOM while VS Code doesn't.
1532|_From @SamVerschueren on November 18, 2015 8:16_  I would rather see that as a separate component then and keep the `OutputChannel` as is. I see the `OutputChannel` more like a cli that prints information to the screen.
1533|_From @ArtemGovorov on November 18, 2015 8:38_  A separate  component with full HTML/JavaScript support [would be nice to have as well](https://github.com/Microsoft/vscode-extensionbuilders/issues/19), but for now all I need is theme friendly colours and enhanced links in the `OutputChannel`, I don't think it will make it less `cli`-ish.
1534|_From @jrieken on November 18, 2015 13:16_  I like. Idea is to make the underlying command we already have so that it can accept an uri `executeCommand`
1535|_From @ArtemGovorov on November 16, 2015 7:34_  Here's the workaround I use for now for OSX:  ``` JavaScript   process.on('SIGTERM', function () {     // extension deactivation code   }); ```
1536|_From @bpasero on November 16, 2015 7:38_  @ArtemGovorov is this only during extension development? Not when having the extension installed and closing the window?
1537|_From @ArtemGovorov on November 16, 2015 7:39_  @bpasero Same for the installed extension (on OSX)
1538|_From @bpasero on November 16, 2015 8:2_  @jrieken fyi that would be pretty bad, is the PH connected to the lifecycle service somehow?
1539|_From @egamma on November 16, 2015 8:7_  @dbaeumer you shut down the language server on shutdown and it works correct?
1540|_From @dbaeumer on November 16, 2015 9:29_  @egamma no, I currently fix this on the server side by observing the streams and exit the server is the input stream closes.
1541|Yes we will need to improve the styling I agree.  I think this will however happen a little later in the process.  So we probably need to work with what we have today.    Thanks!
1542|_From @SamVerschueren on November 17, 2015 10:34_  Just to share for when this will ever get fixed :).  The `kbd` tag is not working as well. <kbd>esc</kbd> just shows up as raw html.
1543|_From @mikiest on November 17, 2015 11:27_  The styles have been improved a bit isn't it?
1544|Yes we improved the styles based on your feedback - agree the <kbd> one is not working.  Our work around is `quotes`.
1545|_From @SamVerschueren on November 17, 2015 15:42_  Good enough :).
1546|It's interesting I can;t manage to repo that in Edge.  Could I ask you to try again (I'm on a pretty recent Windows build though and perhaps that is why).
1547|_From @roblourens on November 13, 2015 20:10_  This is Win 10 RTM, I tried it on a second computer and saw the same thing. It's only on some extension pages though. Sounds like it could be an Edge bug.
1548|Doh lets hope so - I'll keep checking as well - thanks!
1549|![image](https://cloud.githubusercontent.com/assets/1051190/11160549/1b0d0c1c-8a20-11e5-9e40-6298792ca6d6.png)  second report :(
1550|also repros on IE11 for SVG icons
1551|_From @Tyriar on November 13, 2015 6:38_  I was looking into the same thing you were and I think this is the case because you cannot currently have more than 1 instance of Code open at once. At least on Windows 10, shift+clicking on the app icon or running `code` again in command prompt doesn't do anything.
1552|_From @bpasero on November 13, 2015 7:53_  No thats ok, we detect this case with a socket and communicate to the first instance.
1553|"_From @alefragnani on November 13, 2015 9:38_  @Tyriar in fact you can, but you have to pass a new _folder / file_ via parameter, while running in **Command Prompt**. - Running `Code ""a_folder""` will open **Code** with **a_folder**  - Running `Code` _(with no parameter)_ will reactivate the last focused/active **Code** instance  - Running `Code .` _(with a dot)_ will open **Code** on the current folder.  This issue is while running **Code** via `child_process.exec`, inside a **Code** extension."
1554|_From @mikiest on November 13, 2015 9:43_  As mentioned earlier, I think a **supported way** to open a new instance and/or in the same window, with a folder/file target would be better instead of having to use `child_process.exec`.  Maybe something like `vscode.open(path:string, newWindow:boolean))`?  I confirm I can reproduce the initial issue on my Windows 10, by the way.
1555|_From @bpasero on October 30, 2015 7:16_  Yes, this is on the plan for post November.
1556|_From @SamVerschueren on October 30, 2015 7:16_  Awesome, great job!
1557|Yes we will need to improve the styling I agree.  I think this will however happen a little later in the process.  So we probably need to work with what we have today.    Thanks!
1558|_From @SamVerschueren on November 17, 2015 10:34_  Just to share for when this will ever get fixed :).  The `kbd` tag is not working as well. <kbd>esc</kbd> just shows up as raw html.
1559|_From @mikiest on November 17, 2015 11:27_  The styles have been improved a bit isn't it?
1560|Yes we improved the styles based on your feedback - agree the <kbd> one is not working.  Our work around is `quotes`.
1561|_From @SamVerschueren on November 17, 2015 15:42_  Good enough :).
1562|This issue was moved to Microsoft/vscode#568
1563|_From @jrieken on November 12, 2015 15:0_  You cannot change a completion item someone else created but you can provide your own set of completion items using the `CompletionItemProvider`.
1564|_From @BleyChen on November 13, 2015 3:40_  do you know which API can let me get the information of completion item provided by someone else ?  How to populate the Javascript auto-complete list in my own code? How to get the function name list in my plugin, and populate them in my own intellisense provider?  the following steps is what i want to implement: step 1. when user write js code in VSCode , it will popup Completion list UI. ![vscode](https://cloud.githubusercontent.com/assets/15098626/11137979/c52ac9c4-89f7-11e5-8bd7-d36aa7331d5f.png)  step 2. when user switch completion item , i can get the item information that current user select , and  use the completion item information to get some useful samples and show it in UI.  ![vscode-next](https://cloud.githubusercontent.com/assets/15098626/11138128/7a06bb7c-89f9-11e5-9223-01f5066311fb.png)  i don't know whether it can be implemented  or not? can you help me ,thank you !
1565|_From @jrieken on November 13, 2015 7:51_  Sorry, that isn't possible right now
1566|_From @guillermooo on November 8, 2015 18:12_  You can check the default `keybindings.json` file to see more available commands. But that isn't a substitute for docs, though. :)
1567|_From @alefragnani on November 8, 2015 19:4_  Yes :+1:   It was in `keybindings.json` that I discovered the command, and it _appears to be the right one_. But `keybindings.json` doesn't say _how to use it_ (input parameters, expected result, etc).   I think it will be available only on API Documentation.
1568|"Passing args to commands is something we don;t have a great story on.  To get a full list of commands this code can be used:  ``` TypeScript         let oCommands:vscode.OutputChannel = vscode.window.createOutputChannel(""List Commands"");         oCommands.show;          let a = vscode.commands.getCommands().then( results => {             results.forEach(i=>oCommands.appendLine(i));          }); ```  Then `F1` and open the output window and select the right channel.  @jrieken - any additional thoughts?"
1569|_From @jrieken on November 10, 2015 14:56_  Not really, tho we have a list of commands, which you either get via the `getCommands`-call or via the keybindings trick, it's not documented what parameters etc they require. Sorry, it will be past 0.10 for this..
1570|_From @alefragnani on November 10, 2015 15:9_  Ok, No problem :)  But what about this `openFolder`  command?  It would be great to be able to use it on my extension.  Thanks
1571|_From @jrieken on November 11, 2015 8:27_  @bpasero Anything low hanging there?
1572|_From @bpasero on November 11, 2015 9:13_  This action is not meant to have parameters as it really goes to the main side to bring up a open folder dialog.  @alefragnani may I ask what list of folders you would show to the user? Is it recently opened folders?
1573|"_From @alefragnani on November 11, 2015 23:26_  Sure @bpasero ,  I want to open another **Code** instance, with an specific folder. This is part of my extension **project-manager** where the user can _save projects_ (folders) that he thinks to be important.  ![vscode-package-manager-list-projects](https://cloud.githubusercontent.com/assets/3781424/11105823/ac78396a-88b8-11e5-8ebc-cc1cb4be27bd.png)  I tried to use `child_process.exec`, but I don't understand why it isn't working. I was thinking that I was doing something wrong, but the same code works for another applications.  ```    exec('start \""open ui\"" ""C:\\Program Files\\Microsoft VS Code\\Code.exe"" ""C:\\Program Files\\Winmerge\\Files.txt""'). ```  I decided to try out `vscode.commands.executeCommand(""workbench.action.files.openFolder"", ""c:\somefolder\somesubfolder"")`, first as an alternative for this problem, and second as an alternative for the user to use _the same_ or _a new_ Code instance.   Do you have any idea?"
1574|_From @bpasero on November 12, 2015 11:20_  @alefragnani it should work to spawn another instance of code but it is also quite ugly to be honest because in all cases you need to know the location of code, across platforms.  Can you rename this issue to the actual thing you want: A parameterized action to open a file or folder that you can use? We can look into it, but likely post November.
1575|_From @alefragnani on November 12, 2015 14:43_  @bpasero too ugly, and I don't even think to use that code :smile: It was just a sample to show how the `path` was being used. I thought two alternatives: - Try to detect across platforms (effectively) - A `contributes-configuration` where the user defines the path  Wouldn´t be bettter to close this issue and open another one to check why it is not spawning another Code instance via `child_process.exec`? Because when VS Code becomes Open Source, I could check how **Open Recent** works, right?
1576|"_From @bpasero on November 12, 2015 14:53_  Yeah feel free to file a bug on the spawn issue if you want. ""Open Recent"" is not implemented as an extension but rather uses some internal ""API"" for this. I would even think that opening another folder might qualify for real API on the vscode API surface."
1577|_From @alefragnani on November 12, 2015 15:48_  Thanks @bpasero.  I renamed this issue as you suggested, since you consider it a good addition for the API and also created the issue #101 about spawning.
1578|Adding @alexandrudima to this thread as our Key Bindings guru.
1579|_From @vilic on November 9, 2015 1:42_  @seanmcbreen Any comment on this?
1580|_From @jrieken on November 9, 2015 8:55_  @alexandrudima  will know
1581|@vilic just mailed Alex to ensure he has seen this.
1582|_From @alexandrudima on November 14, 2015 0:49_  @vilic Yeah, the edits are not allowed to touch. As a workaround, why not do a single edit instead?  ``` javascript edit.delete(new Range(1, 1, 1, 3)); ```
1583|_From @vilic on November 14, 2015 1:32_  @alexandrudima The ranges are results of other code, transforming these edits to a single one means for every series of edits I'll need to ensure they do not touch, and if so, merge them properly. Which could be non-trivial work.  Is there a reason why edits of adjacent ranges are not allowed?
1584|_From @alexandrudima on November 16, 2015 17:18_  @vilic It is some debt left over from how multiple cursors were implemented. I still need to migrate some internal code that I think still depends on this limitation, then I can relax the touching check.
1585|_From @vilic on November 17, 2015 1:30_  @alexandrudima Thanks for clarification~ Feel free to close this issue if you want it closed for now. :)
1586|_From @jrieken on November 10, 2015 14:48_  unsure if i have understood your question correctly, but wrt `provideCompletionItems` and `resolveCompletionItem` note the following: 1. VS Code will always call `provideCompletionItems` to get a list of all completions available at a position. 2. If the provider implements the _optional_ method `resolveCompletionItem` it will be invoked when a completion is selected in the completion list UI. You should fill in detail and documentation if it was too expensive to fill in for each item during step #1.  so, to just get completions it's enough to return an array of completion items from `provideCompletionItems`
1587|_From @BleyChen on November 11, 2015 2:54_  sorry ,maybe my description is not very clear ,as we know , when we write JavaScript Code in JS File ,it will pop up completion list,  what I want to know is that whether I can get completion list provided by the VSCode itself  in provideCompletionItems.
1588|_From @BleyChen on November 13, 2015 3:53_  jrieken,  i have two questions as following 1# .i just want to know whether has an variable stored completion items that provided by the VSCode itself that i can use in  method provideCompletionItems . (my extension need use completion item to get additional information) ,   2#. i found that resolveCompletionItem will be triggered only when completion item which is provided by myself  was selected ,so i want to know whether resolveCompletionItem  can be called when user select someone else completion item in completion list UI, thank you!
1589|_From @jrieken on November 13, 2015 12:11_  Sorry, you cannot do either. The item someone else provided, including those VSCode provides, cannot be access by someone at that time, also resolveCompletionItem will be called with items your provider created.
1590|"_From @BleyChen on November 17, 2015 8:27_  jrieken, thanks your replay , and I want to ask your some questions as following:  class CompletionItem {         label: string;         kind: CompletionItemKind;         detail: string;         //          documentation: string;  //          sortText: string;       //          filterText: string;     //          insertText: string;         textEdit: TextEdit;     //          constructor(label: string);     } 1. CompletionItem has one property named textEdit ,do you know what's the function of this property? 2. do you know whether the words in documentation property  of completionitem can wrap , the following code that I write can't wrap in the UI and only show in one line ,if words is more longer it will be clipped.        ```             provideCompletionItems(document: vscode.TextDocument, position: vscode.Position,          token: vscode.CancellationToken): Promise<vscode.CompletionItem[]>     {        return new Promise((resolve, reject) => {             var completionItems:vscode.CompletionItem[] = [];        var completionItem:vscode.CompletionItem = new vscode.CompletionItem(""id"");        completionItem.detail = ""test javascript detail"";        completionItem.documentation = ""mde\r\nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf nadfdsf"";        completionItem.filterText = ""test"";        completionItem.insertText = ""bb"";        completionItem.label = ""test"";    ```        })    }    ![image](https://cloud.githubusercontent.com/assets/15098626/11206130/01d4f630-8d48-11e5-8245-3fa5d89006f9.png)"
1591|We also ave this issue and it's something we need to work on - but for now the message is cropped at one line.  This hits people in the VSCode API a lot as well.
1592|`F8` hitting `F8` should give you more space if that works for your users?
1593|Actually sorry I lie that's for a diagnostic not a completion :(
1594|_From @vilic on November 1, 2015 15:19_  :+1:
1595|_From @egamma on November 2, 2015 8:16_  Exposing the scope names in the API is on the backlog, but will not make it into the November update.
1596|_From @jrieken on November 2, 2015 18:16_  @billti despite the lack of access to scopes you can define your a custom word definition such that it will be picked up by `document.getWordRangeAtPosition`. You can register a `ITokenTypeClassificationSupport` which can contribute a regex to classify words.
1597|_From @billti on November 2, 2015 19:3_  Thanks @jrieken , I spotted that, and it may be a useful interim solution. But generally for now, if I want to know the classification accurately for a position in a CFG, seems I'll need to `document.getText()` and run my own parser over it - is that right?
1598|_From @jrieken on November 3, 2015 9:59_  unfortunately yes
1599|_From @egamma on November 10, 2015 12:15_  As part of the unifying the colorizers to textmate grammars, we have lost smart bracket matching which was supported in 0.9.2. We work on filling this gap for the final 0.10.0.
1600|_From @egamma on November 11, 2015 17:13_  Just an update on this one, we will fill this gap, but it will not make for the November update. Sorry about that.
