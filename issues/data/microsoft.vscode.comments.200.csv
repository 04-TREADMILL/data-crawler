19901|I think not. @joaomoreno ?
19902|@danwey did you try this extension? https://marketplace.visualstudio.com/items?itemName=Kasik96.swift
19903|I cannot understand how this can happen. This code executes all the time (any time you resize an editor) and `changeCallback` is never written to except in the ctor and the `ElementSizeObserver` is constructed from a single place with a valid callback.
19904|@isidorn @weinand fyi
19905|@liust2014 sorry I am having trouble to understand what you mean
19906|@lake-fall please report C# issues against the omnisharp repository.
19907|Not sure if this is bug report or feature request.
19908|nuke it
19909|Argh, thats another reason for ditching the mime types, I think we only use that to find out if a file is binary or not. Anyhow, its hard to understand whats going on, lets talk about it in person when I am back...
19910|@pkeuter VS Code node debugging hasn't been verified for node 6.x. Many of our node debug tests fail with node 6.x. I will investigate after my vacation next week.
19911|@alexandrudima would love to offer a setting to change the font for the workbench, but unfortunately we just don't have one place where we set the font. For example, all editor widgets have to define their own fonts (see https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/find/browser/findWidget.css#L78) because otherwise they would inherit the editor font.  This makes it very hard to just flip the CSS in one place for good.
19912|> Well, never means never, no matter whether a language service exists or otherwise. I think it covers it pretty well.  That's my point. It's a difference to get textual completions in places where a language service didn't compute any (like discussed here) and not getting any suggestions ever in files that lack a language service. The settings must differentiate these two cases, otherwise we simply move textual completions into an extension and tell people to uninstall it.
19913|This issue was moved to OmniSharp/omnisharp-roslyn#542
19914|I think such a setting should be applied per-file, not just glibally. As far as I know, Emacs always uses tab size of 8, there is no way to change that. I'm less familiar with VIM. In my opinion  a separate indent size and tab size would provide a more generalized solution to the problem. This way you can set indent size to 4 and tab size to 8, for example.
19915|Not really, unfortunately. Maybe communicate with the extension's authors and try to get it fixed for everyone?
19916|Do you have any suggestion how?  To give some context, it provides a way to render anything on an overlaid rectangle, given coordinates. It is instantiated with an `HTMLElement` which happens to be the shell's container.
19917|I'm so happy that tabs are finally going to make it into VSCode. Adding the horizontal split pane would be a huge benefit and, at least in my use case, complete all of the necessary features for the type of product development I do daily. I commented on split panes in the tabs discussion so I'll also include it here:  > This allows you to have two files opened side by side at the top and one or two opened below them. While this is a not a critical feature, I do find myself missing this quite often while developing front end web apps & mobile apps. The reason is most of what I work on is MVC or derivations thereof so having a model, view, controller and some UI file (css, Js, etc) open at the same time is a huge benefit.  Thanks for all of your hard work. This is truly one of the greatest code editors on the market and it has been a pleasure to use.
19918|Could we use the <kbd>Alt</kbd>+<kbd>‚Üê</kbd> (respectively <kbd>Alt</kbd>+<kbd>‚Üí</kbd>) as the keyboard shortcut? That would match perfectly the actions to move lines up or down.
19919|Yeah, by removing all references that actually do nothing and then see what's left. It seems like nothing talks about that service interface but if they talk about [this](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/ui/contextview/contextview.ts#L41) abstraction in `browser/ui/contextview`. I am not saying it must be removed but the existence of the service seems somewhat artificial
19920|I introduced a limit to 5000 and can no longer reproduce this on my win machine, let me know if you still see it.
19921|@alexandrudima that's what I did temporarily. Syntax highlighting actually makes harder for me to read. When I started coding long ago I didn't have syntax highlighting. It feels cluttered and unwieldy. OTHO, it felt wrong that I had to hack the editor to support such trivial feature.
19922|Well, that's what the `default` would be for.
19923|That's as simple as its gets. Before, we returned an array of arrays but now it's an array of suggest results. We need the latter to have a back reference to the provider/support that computed the individual suggestions when we ask for details and when asking again in case of incomplete results.   see https://github.com/Microsoft/vscode/commit/5723a2d97f7db963d417a552c83d91808c5d9c8b#diff-518e736f78c3288400a5d064bb875c59
19924|IMO that's an oversimplification that let's just agree to disagree.
19925|Alright, thanks. I thought we hadn't go through it yet, I was waiting on it.
19926|@hsyn it was my understanding that the tabs will not shrink, and overflow tabs will be available from the chevron overflow button. The close button shouldnt be an issue.
19927|The issue was that we changed when the debug controls show, I changed that back that they are shown also if you are in the initalizing state. So in you scenario you will be able to stop debug more easily.  As for showing the debug console, we have tuned that this sprint, and we are only revealing the console on the first debug launch since users were complaing the console was too distracting and spammy.
19928|No need to throw hands in the air. I don't disagree with you, I'm just having problems with the arguments against the setting. In fact, I would be willing to bet that I am the one that is missing some detail(s) here.  Remember that my approach was laid out in my first comment: I think about textual suggestions as an exception to the rule. Given that viewpoint, the three possible values seem to fit every use case, don't they? You are either `never` interested in textual suggestions, `always` interested in them or only interested in them if no one else has anything better to present, hence the `default` case. What am I missing here?  Yes, you can implement the same behaviour by putting textual completions into an extension and tell people to disable them. But what good would that do?
19929|@bpasero I now have a theory that this was always happening because of the casing. I am always navigating back and forth using `open recent`, and if the wrong case path once gets in your history you are **doomed** as some might say. So I believe this is a dupe of wrong casing makes file watching broken on mac
19930|Steps: - open json file - click on a comment - within 300 ms, press ctrl+w
19931|To verify please wait for translations to come in - start of next week I believe (just mailed them to check status)
19932|>  What am I missing here?  IMO this: Someone doesn't like [textual suggestions in JSON](https://github.com/Microsoft/vscode/issues/5574#issue-149878974) and turns the setting to `never`. He then opens a _XYZ_ file and doesn't get any completions because there is no language service and textual completions are disabled. User is unhappy.
19933|"Hey off work currently. Well reply next week. On Apr 28, 2016 16:11, ""Johannes Rieken"" notifications@github.com wrote:  > @agrabhi https://github.com/agrabhi ping >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5689#issuecomment-215382681"
19934|@bpasero This is actually now trivial to implement, given the new cli launcher. We can simply prevent doing this when launching from it. üéÜ
19935|Could we put this into Q&A of VS Code, just wasted hours on this annoying problem
19936|fyi @alexandrudima as the only consumer of `setStatusMessage`
19937|Just found #4558...
19938|Yeah, but isn't that just **settings scoped by language**, for which we are long due?  Editorconfig solves a lot of that, but not everything. For instance, I also dislike auto suggestions in some languages, and would like to disable them, although I do like it in others.
19939|Sister issue #5949
19940|Sister issue #5948
19941|> I think `editor.selectionHighlight` does not stop semantic highlighting  Right, it shouldn't. But an additional option to disable this would be very welcome.
19942|"Strangely enough I can't seem to reproduce it now. If I miss the alert it is still ineractable near the bottom of the accessibility tree. What I do notice is that I press ctrl to shut up speech after I've gone into the picker because it says 'multiline edit press alt+f1 if you are using a screenreader"". It would be good if that message wouldn't come up every time you focus on the edit field since it will trigger pretty much anyone who wants to be efficient to hit ctrl to shut up speech, muting the alert. Does that make sense?"
19943|It seems [this](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHostDocuments.ts#L611) check fails...
19944|To verify on OS X: - Launch Code from the command line (e.g. `code`). - Open dev tools and type `process.env`. Take note of one of the env variables that was set up in your `.bashrc`, for example `NVM_BIN`, in case you have it. - Close Code. - Launch Code again, overwriting that variable: `NVM_BIN=awesome code` - Inspect `process.env` again, the variable should be overwritten.
19945|This extension implements this: https://marketplace.visualstudio.com/items?itemName=samverschueren.final-newline  I still think this should be available in VS Code itself and enabled by default :)
19946|We also introduced a 5000 character limit in the hover, so I believe this should behave better now
19947|It would be nice if the integrated terminal could be configured, e.g. to ZSH
19948|I am also facing the same problems. Running with `--disable-gpu` doesn't help in my case too. It is a really strange bug, as the blurryness only occurs in special situations and files. For example I just pasted something into a perfectly sharp looking editor tab which then turned blurry. Other editor tabs/files remained sharp. Closing and reopening the file as well as restarting VS Code didn't help. The blurryness is somehow file-related. I also tried to start VS Code with the compatibility option 'Disable Display Scaling On High DPI Settings', because scaling is a known issue on Windows 10 with small screens and high resolutions, without any success.
19949|Yeah, that's one option
19950|By analyzing the blame information on this pull request, we identified @aeschli and @egamma to be potential reviewers
19951|Hi **@otgerrogla**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
19952|I do no longer see a milestone, but the set-up in https://github.com/Microsoft/vscode-smoketest-express.git still doesn't make sense to me?  - Why do have a files section on the `jsconfig.json`?  - Why isn't `app.js` in the `files` section?  I'll reopen the issue. @jrieken any idea why we have this setup?
19953|verified that the generated `jsconfig.json` now includes `module: commonjs`.
19954|& the status bar highlighting is distracting, too.
19955|@jrieken is this for workspace settings? Because I do not get 'languages' as a suggestion
19956|@shardulm94 Thank you for the great repro!
19957|@bpasero works great! Love that this got fixed
19958|@isidorn when adding a language as extension
19959|Looks like @jrieken fixed this test.
19960|No clue why that is. I closed cos the previous setup was even more broken using `wwww`
19961|Thanks @jrieken
19962|This is caused because we have markers at runtime that have a `source` set but have no `message`. `message` is a required property on the `IMarker` interface and I think we should not allow markers into the system if they don't have a message.
19963|Verified by code review, translations will arrive tomorrow
19964|It's a dupe, @isidorn, you could've just added the verified tag. :/
19965|> Tabs open to the right of the active tab. If there is not enough room to show all of the tabs in a tab group we overflow the tabs. We do not truncate the name of the file inside the tab to make more room for more tabs.  I don't agree with that. If the screen is split into 2-3 columns, you will then be showing 1-2 tabs at most and overflowing the rest. Please, please do what browsers do, we use them every day and it's intuitive and we are used to it. I encourage you to use established patterns, some of them have been evolving for over a decade now. Don't go against the grain.
19966|I just noticed that it also shows results from editor\node_modules\css-select\index.js although node_modules folder should be excluded.
19967|> I don't agree with that. If the screen is split into 2-3 columns, you will then be showing 1-2 tabs at most and overflowing the rest. Please, please do what browsers do, we use them every day and it's intuitive and we are used to it. I encourage you to use established patterns, some of them have been evolving for over a decade now. Don't go against the grain.  Some browsers do a combination of shrinking tabs but then overflowing them beyond a certain threshold.  Firefox does it; pretty sure iOS Safari does (or did) it too.  When enough tabs are open that you can barely see a few letters in each one (though in practice I normally don't have that many open), it's not particularly more usable than overflow would be.
19968|Having the same problem here with 1.0.0 fa6d0f0381. Indeed the debugger is connected (console works), but no breakpoints hit. Can you give me a version where it worked?
19969|"@alexgorbatchev I definitely get where you're coming from, but this was something they explained in the conference call the other day - from the other perspective, having a ton of opened tabs and not being able to read the names of any of them is not a good solution either. The ""overflow"" is sort of a compromise between no tabs at all and standard ""Chrome style"" tabs that shrink into oblivion. Forcing the tabs to at least display the filenames means that the visible tabs will at least be useful.  But you did give me an idea though for the devs - I think the real issue here is that, while we know we cant use 20 tabs when all the filenames are hidden, at least we _know_ that there are 20 tabs open and it provides us a certain feeling of ""I know where my files are if I need them, they didn't just disappear."" All it would take to fix that is an indicator showing the _number_ of currently hidden tabs, the indicator could just be a little circle above the overflow chevron so as not to take up any extra horizontal space."
19970|Dup of #5325
19971|Same root cause as #5457
19972|Dup of #5457
19973|"I had a short look with Wireshark and I can see that the actual commands to set a breakpoint are being sent, but paths look wrong (target host is running Linux):  ``` > {""command"":""setbreakpoint"",""arguments"":{""line"":5,""column"":0,""type"":""scriptRegExp"",""target"":""^(.*[\\/\\\\])?[cC]:\\\\Users\\\\simon\\\\git\\\\test\\\\js\\\\routes\\\\entity\\.js$""},""type"":""request"",""seq"":24} < {""seq"":69,""request_seq"":24,""type"":""response"",""command"":""setbreakpoint"",""success"":true,""body"":{""type"":""scriptRegExp"",""breakpoint"":8,""script_regexp"":""^(.*[\\/\\\\])?[cC]:\\\\Users\\\\simon\\\\git\\\\test\\\\js\\\\routes\\\\entity\\.js$"",""line"":5,""column"":0,""actual_locations"":[]},""refs"":[],""running"":true} ```"
19974|Oh awesome! My apologies for missing it in the release notes -- thanks for taking the time to add the link, I appreciate it.
19975|@ccirello No hacks required, you can create an extension that contributes a theme (here is an example - https://github.com/vlad-saling/VSCode-Wombatish-Theme), maybe call it minimalist and publish it to the gallery such that @iyee can immediately pick it up.
19976|@MannikJ Can you please try our insiders build https://code.visualstudio.com/download?insiders=true where we have already adopted Electron v0.37.6 which includes Chromium 49 and try if things improved.
19977|Thanks everyone. We didn't show it in the mockups but our intention is that when required, we will shrink the tabs so that only the name of the file and the close button are visible. For the reasons @anyong mentions, we don't think we want to shrink to the point where filenames aren't distinguishable from one another. We think that it is probably more common for multiple tabs in a code editor to have similar names than it is for browser tabs to have similar names (e.g., there could be many filenames with the same prefix). Thus we think that shrinking tabs in a code editor has different consequences than in a browser.  We intend to show when tabs are in the overflow control with the double chevron but placing a badge with the number of overflowing tabs is an interesting idea too. Is the intent that the number simply indicates that there are overflow tabs or is the actual number of overflow tabs important?
19978|"The ""multiline edit press alt+f1 if you are using a screenreader"" is the aria label of the editor, it is not an aria alert. When you open a file the aria label contains text such as ""findController.ts. Text file editor.Press Alt+F1 if you are using a screen reader.""  Should we take out the ""Press Alt+F1 if you are using a screenreader"" part given it becomes so quickly so annoying?"
19979|Well ...if I remember correctly doing this the first time toggles screenreader features to true, right? Maybe only show it when screenreader is false. This seems counter-intuitive but walk with me here. A user who is using a screenreader will want these features enabled, and after that its very unlikely they will need the hotkey again since it just tells you screenreader support is on. So, when this flag is already toggled on there's no need to read out that label. Does that make sense?
19980|:+1: I can happily call into any service
19981|This has been fixed in latest and should be availbe next week in the insiders channel
19982|@zersiax The entire Alt+F1 is probably not needed any more except to communicate that Ctrl+M can escape the Tab trapping in the editor. The experimental screen reader support is since 1.0 enabled by default.
19983|#5412 tracks that I should remove the out-of-date text
19984|Thanks for clearing it up @stevencl.   One edge case to keep in mind with file names in tabs is multiple files with the same name opened from different folders (index.js, README, LICENSE, package.json, etc).
19985|@bpasero Isn't this about `font-size`. i.e. not about `font-family` ?
19986|Hi,  I think the control+m thing might be better stowed somewhere in a documentation page, this is not something people would need to be reminded about every time the editor gains focus I think. I liked your suggestion about the statusbar thing, btw :) I just did some checking and it doesn't seem to come up with this message when you for example accept an autoComplete suggestion, thats good at least :) Speaking of, that bug you ran into on that front should be fixed in latest chromium :)
19987|I probably won't be using tabs at all, but I think it's also worth pointing out that browsers usually display the favicon for a site in the tab which makes it easier to identify even when the tab shrinks beyond the point that it's readable. Source files would not have a favicon to disambiguate them, and, as Steven points out, file names are often similar in source code.  On Thu, Apr 28, 2016 at 12:16 PM, Steven Clarke notifications@github.com wrote:  > Thanks everyone. We didn't show it in the mockups but our intention is > that when required, we will shrink the tabs so that only the name of the > file and the close button are visible. For the reasons @anyong > https://github.com/anyong mentions, we don't think we want to shrink to > the point where filenames aren't distinguishable from one another. We think > that it is probably more common for multiple tabs in a code editor to have > similar names than it is for browser tabs to have similar names (e.g., > there could be many filenames with the same prefix). Thus we think that > shrinking tabs in a code editor has different consequences than in a > browser. >  > We intend to show when tabs are in the overflow control with the double > chevron but placing a badge with the number of overflowing tabs is an > interesting idea too. Is the intent that the number simply indicates that > there are overflow tabs or is the actual number of overflow tabs important? >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-215481474
19988|Thanks @alexgorbatchev. We have a few ideas for how to show the path to a file to be able to disambiguate in these cases. In the high fidelity mockup shown above for example we show the path to the file underneath the file name. This is just one idea though and might not work when the path is long. Another would be to put the path in the status bar. Lots of things to explore...
19989|@alexandrudima Thanks for information. I had a hunch that it could be Chromium issue, but I didn't had time to investigate deeper.
19990|"I feel there's real value in being able to display results and other items like documentation on the same editor surface. I suspect this sort of ""same surface"" in line results will require core editor support.  > more visual representations with arbitrary HTML would be much more valuable and obviously flexible.  Completely agree with @andrewshand, having the results be html with their own css would make it possible to for instance display exceptions in smaller red font contained in a box, or display docs just below a function/method name. While smaller/shorter items go well at the end of a row of text, larger inline results/errors/docs/etc need to be below and not overlay the lines below, just move lines down."
19991|Looks like the same issue happens with the insider build. I downloaded and used it for a day, and left it running before leaving the office. This morning it is no longer responding.
19992|+1 same here -- really surprised this isn't working. All I needed to do was add some text at beginning / end of lines.  My regex didn't work: `^.*$`
19993|I tried on windows and if I use a smaller data array I can not reproduce. With a larger data array it reproduces seldomly. As @bpasero noticed electron's node 5.1.0.0 and barebone node 5.1.0.0 are different in one aspect, first uses chromium 49 and the former 47. This might have an impact on debugging. We might as well update in may to a new electron version which should take care of this 'incompatibility'. Due to the reasons above I propose to move this to May  I will also drill deeper tomorrow to check if there is something we can do, though since it is not reprodcuing constantly for me I am having a hard time doing that.
19994|"@stevencl   > Is the intent that the number simply indicates that there are overflow tabs or is the actual number of overflow tabs important?  I would think showing the actual number of tabs open (but hidden from view) would solve the problem. Essentially, people are used to seeing this (well, speaking for myself at least):  ![image](https://cloud.githubusercontent.com/assets/6260469/14895571/e558100c-0dab-11e6-8981-53cc0b9a3094.png)  so they intuitively have some idea of ""I've got a lot of tabs open"" vs. ""I've got 2 or 3 tabs open""  A badge showing ""20"" is a lot smaller (no extra real estate, essentially) than showing 20 tiny/useless shrunken tabs, but it still allows me to know immediately that (a) the hidden tabs are there and (b) exactly how many there are."
19995|I have recently re-coded the problematic part of the extension and it now seems to behave correctly. There were multiple occasions of logical errors.  Thanks for the replies. Unfortunately I don't have access to OSX machine. However it would be useful if the crash dump seen above could be made available on other platforms as well.
19996|https://github.com/Microsoft/TypeScript/issues/8360  so closing.
19997|Yup, pretty much what I found, too. The behavior of VSCode doesn't make much sense in this way. It accepts the wrong key combination if it starts up with the user having set a non-English keyboard layout. Maybe this is also related to me having set English as my system language.
19998|https://github.com/PowerShell/vscode-powershell/issues/163
19999|"In developer tools I'm getting this some seconds after pressing enter on ""ext install {whatever}"":  ![bildschirmfoto von 2016-04-28 22-07-31](https://cloud.githubusercontent.com/assets/1142765/14899733/bba29b42-0d8d-11e6-8f5b-ed251b1c7ae8.png)"
20000|Virtualbox is NATted, if that matters (some weeks ago with 0.10.xx it worked with the same settings), no proxy.  I'll try to switch to bridged network.
