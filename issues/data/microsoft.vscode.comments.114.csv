11301|Haha ok sounds good.
11302|@isidorn Please reconsider. This will be hit by **all extension developers**.
11303|Wasn't aware of `.tsx` but I tried it and didn't work either. Looks like a fix (or docs) is in the works from what I can gather from the other issues related to this...  Thanks!
11304|@isidorn says: _what I mean is that the screenshot does not reflect what will be released on February, that change came after in the `master` branch_
11305|There hasn't been any changes on the themes and colors lately. Looks like two independent issues. For OmniPascal, it seems that the first bracket gets the `token keyword objectpascal' scope, the second one 'token objectpascal'. I suggest moving this issue to OmniPascal
11306|"@bbenoist I don't know. Does `Reload Window` do the same thing as ""restart"" Visual Studio Code, after an update has been applied? If so, the inconsistency is causing some confusion. :)"
11307|A large branch list is precisely the scenario where recency is useful. You probably didn't commit to ALL those branches, right? Probably only a couple? Well, now they'd be at the top.
11308|"Maybe go even further?  Personally, I'd love to have some kind of indication if the issue/feature-request will be handled internally by Microsoft people (in the near future) or if it is something that is encouraged to be handled by public contributors.  Especially for things that might not exactly be a ""good first bug"", one might want some indication if the time they invest is likely to be in vain as there is already someone working on it internally and that solution will take precedence."
11309|Not for February
11310|Hi **@phillipj**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
11311|:+1:
11312|"The react-native extension does not have the property enableBreakpointsFor defined in its package.json, if I define it and set ""languageIds"" then the exception is no longer thrown.  According to @weinand we are setting this in the node debugger and the extension should not have to set these property values and we shouldn't be throwing.  I see the same exception being thrown in the Jan2016 stable release, so this is not a regression from last month, meaning it is not a ship-stopper for Feb2016.  I believe the exception is being thrown in src/vs/workbench/parts/debug/node, in the registerListeners method."
11313|@pesho Exactly!
11314|"I have pushed changes to greatly reduce use of remote in the renderer. One of the few things I left out for now is the context menu which I extracted into https://github.com/Microsoft/vscode/issues/3638. I pushed a change though to use a timeout of 0 to make sure that we are not using remote from event handlers.  Areas to verify: - most importantly: the bug with pressing ""Tab"" getting wrong is not happening anymore - toggle dev tools - reload window - mac: shows ""represented"" file name in window title area when opening files and removes it when closing last editor - mac: window shows as ""dirty"" when having dirty files by drawing a black dot in the close button of the window and removes this dot when no more dirty files are present - save dialog still works and shows up for dirty files when closing workbench or closing the working file - going full screen, leaving full screen - toggling menu bar visibility - context menu still works (in trees, editor, dropdown ""..."")"
11315|@chrisdias nice investigation, I'll fix it right away. I agree it is not a stable-candadate
11316|@kuechlerm Is that what you tried? - have a large XML document - set the cursor inside - fold the top node
11317|Greatly appreciate the attention to this issue (and all of the team's hard work), but the solution suggested is NOT quite what was originally asked for on UserVoice.  The request stated clicking-and-dragging with the mouse, which can result in selecting space after a line has ended.  I believe the desired functionality is like so:  ![blockselection](https://cloud.githubusercontent.com/assets/2546626/13466388/8f28d9d0-e04e-11e5-8ff7-10df486bc9a0.gif)  Any chance of re-reviewing this issue?  Or should I post a new one?
11318|Same behaviour when using the latest Code Insider build with TS 1.8.2.   Moving to TypeScript.
11319|This issue was moved to Microsoft/TypeScript#7343
11320|pls see #1515
11321|"@joaomoreno   Since you have installed tslint locally inside the vscode repository the vsode-tslint extension doesn't find tslint in the other workspaces. Workarounds: - install tslint globally - in the user settings disable tslint and in the vscode workspace settings enable tslint  ``` json ""tslint.enable"": false ```  @dbaeumer this issue shows up across all our linters when a user prefers to install a linter locally."
11322|"@egamma, thank you for being so attentive to this issue.  I saw your post on 1060 referring to this post as well :-)  I wholeheartedly agree that the multiple cursors are more powerful...but sometimes ""simpler"" is what's needed.  Is that not the heart and soul of Code in the first place?  The current behavior, using ""Insert Cursor Above/Below"" yields ok-but-not-perfect results:  ![blockselectioncurrent](https://cloud.githubusercontent.com/assets/2546626/13467678/26495880-e054-11e5-9bbc-d3fb14574d3a.gif)  While I believe the desired behavior, some key combination (Alt seems traditional) and a mouse-drag is more flexible.  EditPlus, like the several editors above, also displays this:  ![blockselectiondesired](https://cloud.githubusercontent.com/assets/2546626/13467708/47ad6b92-e054-11e5-8942-4e221223dc33.gif)  I'd sure love to see this idea revisited as it's one of the hold-ups for my adoption of Code as well.  Thank you again for all your hard work!"
11323|+1 for using Alt+Drag to select a rectangular area.  Plus, using multiple cursors is powerful in some situations, but the behaviour is very dependent on Codes word boundaries, which are odd imho.  At the very least, the selection crosses lines as demonstrated above in e.g. the @egamma post and I don't see how that would ever be useful or intended.  And I'm using Visual Studio Code along full Visual Studio most of the time. The key combinations are absolutely alien to me. I'm wondering why Visual Studio Code doesn't align with full Visual Studio - possibly after (or before) selecting a(nother) (built-in) keyboard configuration.
11324|Are you sure that ruby debugging is supported on Windows 7? I suppose you are working with this extension https://github.com/rebornix/vscode-ruby I would first file an issue there, because it sounds like there is an issue with the ruby extension, not vscode iteself
11325|"@isidorn I've added 'Run' support to node-debug by introducing a `noDebug` launch config attribute. So you can now 'run' a program by adding `""noDebug"": true` to the launch config. VS Code will have a debug session while the program is running. This makes it possible to terminate the program. Trying to use 'Pause' or the REPL results in timeouts (which is bogus because there is no connection), but overall 'Run' works.  Now we need a few UI tweaks. My proposal is this: - We introduce a 'Run' action that is basically the 'Debug: Start' but passes a `""noDebug"": true` when calling the `launchRequest` (We have to decide whether to disable 'Run' when the debug adapter does not support this). - The 'Pause' button needs to be disabled in this mode. The 'step' buttons are already correctly disabled because there never will be a stop event. - The REPL should not be available.  What do you think? Is this feasible?"
11326|@bgse that's what the help wanted label is supposed to be for, I don't see it getting used much though. Due to the way issues are assigned based on ownership and not who's working on it currently, I can see the issue you're bringing up.
11327|Closing on our side, full explanation in Pure-D/code-d#29.
11328|@weinand great! Here's my first impression, I can provide more details once I have looked deeper into the code. 1. sounds good. Not sure how to disable this action since we will only know if the debug adapter supports it on the first debug - when we get the capabilites. So I propose a simple solution, it is always enabled, and if the debugger does not support run it just debugs 2. Makes sense 3. REPL is always available, no matter if you are in a session or not. I propose that we just do not open it if the user does a 'Run'  Thoughts?
11329|@bpasero would joining with cwd because normalizing fix the issue?  ``` js path = path.join(process.cwd(), path) ```
11330|@bbenoist that probably works for my use case (reloading themes, extensions, etc.), thanks.
11331|@felixfbecker thanks for your feedback!  We made the console horizontal so that long output could be seen without being clipped at the end.  Since you prefer the vertical console, I'm interested in how you made the vertical console work when the output was wider than could be displayed.  Could you share what you did in situations like that?  When we made the debug console horizontal we wanted to make sure it would not be confused with same functionality of a text editor that has focus—thus avoiding making users think that clicking on a file in the Explorer viewlet will focused on the console can replace the console with the open file.  This was a problem previously—the vertical debug console was often replaced with a file when opened because it had focus.  We are exploring making it possible to split text editors horizontally and vertically, as well as allowing the console to be either horizontally or vertically.  We also want to keep a distinction between the console and editors to avoid people thinking that it can be replaced with a text editor.  Does this sound like it will resolve your concerns?
11332|@isidorn all three make sense for an initial version. If we want to enable Run only for DAs that support this, we could add a flag to the debbugers extensionpoint. That info would be available without running the DA. For the REPL I will improve the error message.
11333|Now that code folding is out this is the top issue in User Voice. We are weighing a number of options internally as we continue to weigh community feedback, user experience testing, etc. Thank you all for the discussion here. Very helpful.
11334|"@zevero use `""editor.action.indentLines""` and `""editor.action.outdentLines""` for this"
11335|Well it might but you can only do so if the path is relative.
11336|Great, so I will start on it as proposed in the previous comment. The problem with the flag to the debuggers is that a user can have a Mono debugger which supports run, a node which does not support run. And he has a node workspace. Should we enable the run action now? We would have to look iinside the launch.json for a chosen configuration and enable / disable the action based on the chosen configuration. Which might make sense, but can also be weird for the user.  Would we keep this action only as a global workbench action for starters, or we would surface it in the viewlet. For start, I propose to only have a global workbench action since it does not belong in the debug viewlet, since it is run, not debug.
11337|I've also noticed a lag in Code after some time using it, and eventual crashes.  I've noticed that when it gets laggy, I am able to get it to run smoother if I press `F1` and type in 'Reload Window'.  That seems to clear up the issue for the moment and then I am able to work around it for now.  I'm definitely interested to see this fixed.  From reading through this thread, I'm also guessing it's due to the render process, though I haven't done any testing with it, and it seems to happen regardless of the amount of working files in the list in the explorer panel, whether or not a file is open when Code is loaded, perhaps the sizes of the files currently being worked on, and I'm not sure if it has anything to do with the git diff checker or not, but I doubt it would be the culprit.  I'm also on Mac OS X El Capitan 10.11.3 and hadn't really seen the issue on Windows when I've used it at home, but I don't have a humongous working tree for any projects at home, only the massive folder I work from at work.
11338|@weinand @isidorn I think the whole feature only really adds true benefit if - It can be triggered by a shortcut like <kbd>Ctrl</kbd>+<kbd>F5</kbd> instead of having to duplicate essentially the whole debug configuration and then selecting the `noDebug` config from the select box - It allows to run scripts without a debug adapter (Java for example)  I actually even thought about creating a debug adapter that doesn't debug but simply runs whatever is thrown at it. I opened the feature request because I thought this should be a core feature rather. If   you do not plan to do this, I would go at creating that adapter ;)
11339|I would hope that both issues are related but I fear that they might not: Most people here see Code crashing when leaving it running without any user interaction, which seems very suspicious. Getting Code to eventually crash with an out of memory exception while using it for a long time might be caused by other memory leaks though. Ideally both issues are the same :)
11340|@joaomoreno after our discussion, it would be nice if the tree could just move focus to its tree DIV when it detects that a tree item gets removed from the DOM that contains the document.activeElement.
11341|"@bgashler1   **TL;DR** highlight the currently focused window better, make all windows behave the same  I'm a bit on the fence wether I prefer vertical or horizontal. But many use 16:9 monitors, and I certainly notice that editing files with the horizontal console open is not fun because there is not enough space for the editor. I catch myself closing the console as soon as I scroll through some file while debugging so my eyes can scan it more easily.  > We made the console horizontal so that long output could be seen without being clipped at the end. Since you prefer the vertical console, I'm interested in how you made the vertical console work when the output was wider than could be displayed. Could you share what you did in situations like that?  When the console output did not fit, I just resized the window or even closed the open file so I had a full-width debug console. I then went back to the file with <kbd>Ctrl</kbd>+<kbd>Tab</kbd>. One thing I would like to see is a button in the console to toggle wrapping of long lines, because sometimes it is beneficial (for ultra-long string outputs) and sometimes it is annoying and breaks formatting (for stack traces). Being able to disable wrapping in certain cases would also reduce the need for a horizontal console.  > When we made the debug console horizontal we wanted to make sure it would not be confused with same functionality of a text editor that has focus—thus avoiding making users think that clicking on a file in the Explorer viewlet will focused on the console can replace the console with the open file. This was a problem previously—the vertical debug console was often replaced with a file when opened because it had focus.  Yes, that was sometimes confusing, but I think the reason was that there are not many visual indicators what window has focus. In the January release there was a lot of work for accessibility. For example, the debug section now has slick blue outlines that indicate when a panel is focused:  ![screenshot 22](https://cloud.githubusercontent.com/assets/10532611/13470159/20518ce8-e0ab-11e5-9bb0-92a055a335f9.png)  Maybe you could add a similar outline around the current window so it is clear what window gets replaced when a file is opened?  > We are exploring making it possible to split text editors horizontally and vertically, as well as allowing the console to be either horizontally or vertically. We also want to keep a distinction between the console and editors to avoid people thinking that it can be replaced with a text editor.  Im definitely +1 for ""universal"" window management, where every window can get docked vertically or horizontally - as a bonus I would even like to see undocking of windows to drag the console on a second monitor. But I have the feeling that this distinction would get messy. How will you make that distinction visible if the windows have the same features and buttons? I think all windows should behave the same."
11342|Might be related to #1569
11343|Technically, it seems to slow and crash even if I am not using it, too, but I'm not sure if they also experience the same, in that case.  Either way, the symptoms seem similar at the least.  If it's found that my issue isn't related, I could create a separate issue instead.
11344|@cwadrupldijjit if you see the issue with crashing overnight it would be helpful to get access to the workspace if possible.
11345|I'll see what I can do.  I usually put the mac to sleep at night, so nothing happens during that time.  I'll try keeping it on at night and let you know in the morning if something happens.  I'll also keep you posted on if you can access my workspace.
11346|"Great!!! I should have looked better at the documentation at https://code.visualstudio.com/Docs/customization/keybindings  Hey, why not give a reference link in keybinding.json ? Or in the default table (examples are already given) but a link might be very helpful.  2016-03-02 18:44 GMT+01:00 Daniel Imms notifications@github.com:  > @zevero https://github.com/zevero use ""editor.action.indentLines"" and > ""editor.action.outdentLines"" for this >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3637#issuecomment-191345067."
11347|@egamma the OS X VSCode version is `0.10.9` I believe I'm on the stable channel, as it's a fresh install from the main site.  Just to test it out, I tried downloading VSCode on my Windows machine. I get the exact same behavior as described above. Version is `0.10.8`
11348|You are correct, function breakpoints currently can not have a condition. We will add this in the future to the UI
11349|"probably its the only reason why I opened  for the first time vscode  almost a year ago and closed it right after few minutes play. and you still do not have tabs. Hope it will appear soon, so I can use it. Its Open source, and people from Microsoft need to change their minds (thats what they are tring to do now, isnt it?) and listen to community, not simply ""we are using this tool internally and we dont need tabs bla bla"""
11350|:information_source: **Tip** TIL you can sort git branches by most recent commit date with:  ``` git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)' ```  > A large branch list is precisely the scenario where recency is useful.  Having a large amout of local branches is not a scenario. It is a common consequence of multiple and different use-cases.  My own use-case is that I not only have to make commits but I also need to review and merge branches into other ones. Sometimes, I have dozens of local branches whose work is in progress and subject to last multiple weeks of frequent updates. **Local** branches I need to checkout are nearly never the most recent and it even tends to be the opposite. Thus, ordering them by recency would be less convenient for me than alphabetically.  > You probably didn't commit to ALL those branches, right? Probably only a couple? Well, now they'd be at the top.  Why would you need local branches if you do not need to commit on them?  I mean, apart from `master` and `develop`, the only branches I keep locally are work in progress.  Once one of my local branch gets reintegrated into our team's repository, I just `git branch -D` it.
11351|Thanks for the confirmation!  Glad to hear it is a planned feature.
11352|Thanks!
11353|I think it's ok to add comments to files that we (VSCode) own: tasks.json, launch.json, settings.json and keybinding.json. In all others (tsconfig.json, package.json) we can not and must not add comments.  Your suggestion of having a separate file suffix makes sense, it would prevent some confusion. It wouldn't help with GitHub tough. But we should have thought about this earlier.
11354|Hi **@phillipj**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
11355|Here's a template for the download URL of an extension:   ``` https://${ publisher }.gallery.vsassets.io/_apis/public/gallery/publisher/${ publisher }/extension/${ extension name }/${ version }/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage ```  For example:  ``` https://gerane.gallery.vsassets.io/_apis/public/gallery/publisher/gerane/extension/Theme-azure/0.0.1/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage ```  You can sideload them by opening the file with Code itself.
11356|Awesome, thanks! :+1:
11357|Sounds good, thanks!
11358|+1
11359|"@AngelosP we just talked about this issue today in a UX meeting.  Would your concern be resolved if any time you mouse is hovered over this pane, it will reveal the controls immediately—no need to hover specifically over the grey header that says ""Watch"" (we would also apply this behavior to other panes)? <img width=""212"" alt=""screen shot 2016-03-02 at 12 34 44 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/13474516/2f8c5900-e073-11e5-8f7f-8ecd0cbafe38.png"">  @isidorn suggested this, and he is planning on implementing the change soon."
11360|We have around 25k lines of Typescript with hundreds of Typescript modules, and we use CommonJS style module imports.  Not having Intellisense for module import as described here is the main reason why we don't use VS Code. Would be really nice if you can add this (or push the Typescript team to provide it on a language service level :) )
11361|> is there a better way than having to manually find out how to navigate to the file and typing in the import statement by hand?  We are really interested in that question as well. I have scoured the web and tried various IDEs but seems like Webstorm is the only one that supports this. Would be really nice if VSCode supported it.  How do folks at Microsoft writing lots of Typescript code manage their imports?
11362|I've updated our code to handle receiving the `configurationDone` and `launch` requests in non-deterministic order.  That said, I agree with this:  > We might want to consider to call  launchRequest  (or  attachRequest ) only after receiving the response from the  configurationDoneRequest    but I worry it could break existing debug extensions.
11363|"{   ""name"": ""= == ="",   ""version"": ""1.0.0"",   ""description"": ""= ="",   ""main"": ""index.js"",   ""scripts"": {     ""test"": ""node index.js""   },   ""author"": ""Shihao Xia"",   ""license"": ""ISC"",   ""dependencies"": {     ""body-parser"": ""^1.15.0"",     ""express"": ""^4.13.4"",     ""mongoose"": ""^4.4.4""   } } @isidorn Does the scripts in package.json have some problems?"
11364|"> Tip  Yeah, I have something similar as an alias in my gitconfig  > etc  All your comments boil down to ""I don't personally find this useful"" which is totally okay, but also not really a good reason to prohibit this feature.  I'm perfectly content to have branch sorting as a configuration option that defaults to today's behavior. But it is the kind of thing power users could take advantage of if it was possible."
11365|Same issue, can I have the build that works?
11366|@felixfbecker it was never the idea to copy launch configs or to let the user add the 'noDebug' attribute. Just read my proposal from above: there will be a 'Run' action (which of course has a shortcut), that adds the 'noDebug' option into the args passed to launch behind the scene.  Running arbitrary programs (e.g. Java) is (or soon will be) possible with tasks. We are not going to copy this functionality in debug land.  Please feel free to to write an debug adapter that simply runs whatever is thrown at it. ;-)
11367|Yep! That's probably the best compromise. Having watermark text would be adding visual noise for very little gain, IMHO. On Wed, Mar 2, 2016 at 12:37 PM Brad Gashler notifications@github.com wrote:  > @AngelosP https://github.com/AngelosP we just talked about this issue > today in a UX meeting. Would your concern be resolved if any time you mouse > is hovered over this pane, it will reveal the controls immediately—no need > to hover specifically over the header (we would also apply this behavior to > other panes). > [image: screen shot 2016-03-02 at 12 34 44 pm] > https://cloud.githubusercontent.com/assets/11839736/13474516/2f8c5900-e073-11e5-8f7f-8ecd0cbafe38.png >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3066#issuecomment-191418090.
11368|"@isidorn the 'Run' action operates only on the currently selected launch config (like ""Debug""). If the adapter doesn't support 'Run', it will fall back to Debug. This is ok for the first version.  If we want to enable 'Run' only for DAs that support Run, we could either use a flag in the DA's package.json or a flag returned from the Initialize request. In the former case we could disable 'Run' early because we have the necessary information when a launch config is selected in the drop down. In the latter case 'Run' would be always enabled but it would aborted as soon as Initialize returns the flag."
11369|@nadeem-aslam This is already fixed in 0.10.8.
11370|I got the same error message. I'm running 0.10.9 on Mac Yosemite. When I ran git in terminal I got prompted to re-run as sudo and accept Xcode licence. I did and the error messages stopped. Earlier today I noticed that my Xcode was updated.
11371|I have a Promise wrapper for [glob](https://www.npmjs.com/package/glob) that has the same problem:  ``` js 'use strict';  const glob = require('glob');  function globp (pattern, options) {   return new Promise((resolve, reject) => {     glob(pattern, options, (err, matches) => { // error highlight for this whole line and down       if (err) {         reject(err);         return;       }       resolve(matches);     }); // error highlight for this whole line and stops here   }); }  module.exports = { glob: globp }; ```  > Cannot invoke an expression whoe type lacks a call signature
11372|Updated and works great!
11373|"@jacdavis instead of introducing a mode we could add some attribute to the stopped event that lets the UI know that all threads are stopped (or a missing `threadId` attribute in the stopped event could imply this).   Limiting ""callstack walking"" could be done with this approach: - Initially no thread is expanded on the first stop event (or only a single thread mentioned in the event is expanded). - Expanding a thread by the user will request the callstack for it. - Continuing will collapse all threads (but we would remember what threads were expanded). - On the next stop, we would expand the threads that were expanded before. - If user collapses a thread, no callstack will be requested on next stop.  CC @isidorn"
11374|"> It wouldn't help with GitHub tough.   It would, if '.tson' would be established as a new file type and you can easily use `js` as renderer, because JSON and TSON is legal JavaScript:  ``` js {     ""version"": ""0.1.0"",     ""configurations"": [         {             // path to VSCode executable             ""runtimeExecutable"": ""${execPath}"",         }     ] } ```  Alternatively, I guess it should not be that hard to add a new parser to [`rouge`](https://github.com/jneen/rouge), see for example [`json-doc`](https://github.com/jneen/rouge/blob/14d95cf5c4811da384092499defa05925b9e13fc/lib/rouge/lexers/javascript.rb#L269-L293)  > But we should have thought about this earlier.  Hmm, I should have reported this earlier -- when I first tried VSCode I stumbled over this a few months ago (after the official announcement)...."
11375|see also  - [Using syntax highlighting on GitHub Pages](https://help.github.com/articles/using-syntax-highlighting-on-github-pages/)
11376|That proposal sounds great.
11377|"I've changed the comment to this:  ```     /** Response to ""setBreakpoints"" request.         Returned is information about each breakpoint created by this request.         This includes the actual code location and whether the breakpoint could be verified.         The breakpoints returned are in the same order as the elements of the 'breakpoints'         (or the deprecated 'lines') in the SetBreakpointsArguments.     */ ```"
11378|:+1:
11379|"@aeschli Kinda torn on this one tbh, while it is definitely convenient in the vscode-owned files to know what all the settings are for, this still has the potential to teach bad habits and dilute standards.  A junior developer starting out with vscode might not even realize that it is against specification, and telling people ""you can do it here, but generally it is not ok to do"" leaves a bad taste in my mouth.  Still, 50/50 on leaving it as it is for the vscode-owned files."
11380|In debug land we dropped comments in json files for all the reasons mentioned here and elsewhere (and we only introduce them by accident because VSCode is not complaining about them).
11381|@alexandrudima The gif of your VSCode master example looks fantastic! Maybe perfect, depending on whether or not cursors should be placed on empty lines. I've never really thought about it before, to be honest, but I've never come across any issues when using editors that skip the empty lines when using column selection.  I would love to see Middle Click Drag without any key modifiers as one of the shortcuts (or the option to rebind to mouse buttons -- is this available?) for column selection so I can select columns without my keyboard. This matches one of the shortcuts [sublime provides](https://www.sublimetext.com/docs/3/column_selection.html).  _edit:_ Removed comments about multi cursor, they belong somewhere else.
11382|"> @kurehajime does it work with ""C:\C#\user.css""  It was the same.  ---  OK  ``` {     ""markdown.styles"": [""C:/CSharp/user.css""] } ```  ``` {     ""markdown.styles"": [""C:\\CSharp\\user.css""] } ```  NG (net::ERR_FILE_NOT_FOUND)  ``` {     ""markdown.styles"": [""C:/C#/user.css""] } ```  ``` {     ""markdown.styles"": [""C:\\C#\\user.css""] } ```  OK  ``` {     ""markdown.styles"": [""C:/C%23/user.css""] } ```  ``` {     ""markdown.styles"": [""C:\\C%23\\user.css""] } ```"
11383|I think ALT and click dragging should be implemented in the same way as VS. For this to work, VSCode needs to support virtual space, the idea is that you should be able to hold ALT and click anywhere in space and start typing. This will automatically insert spaces up to the cursor. Once this is supported it should make sense to be able to drag a box selection anywhere which will allow you to type characters all aligned to the same column position - regardless of what the lengths of the lines are.
11384|"This is slightly different behavior than I initially reported, but it's likely the same thing. I expect the act of opening a new file from the group of files on the left would update the list, but it may only do that if I explicitly open using the ""Open"" command.   On a separate note, what screen capture software should I be using to make reports? I use vscode on both Mac and PC (the recording here is on Windows 10 - I got upgraded at my job) so that would be helpful to know.   ![vscode_screencap](https://cloud.githubusercontent.com/assets/12577765/13481351/f13d2d10-e0b2-11e5-9b10-28cfb581677f.gif)"
11385|@rhires I use https://screentogif.codeplex.com/ on Windows 10
11386|Yes I am using OSX, vscode Version 0.10.9 (0.10.9). I tried to reproduce it. It seems to happen when I change from vscode to the browser and go back on JSX files mostly. Unfortunately , I do not have any steps or scenarios to reproduce it.   It just feels like it is refreshing the redo/undo stack when something happens internally when using JSX files.
11387|Did you replace `/path/to/vscode/Code` with the actual path? Did you get any error at all? If not, can you let me know where you installed it and what exact `ln` command you ran?
11388|"@Tyriar @bbenoist Seems like maybe we need an alias for that command. The notification for VS Code updates asks if you want to ""restart"" VS Code, so naturally I looked for a ""restart"" command. Can an alias be added, to close this out?"
11389|ya nevermind the error i cannot reproduce it either but i think it came because i changed the file type a couple times before i ended up on yaml. because each time i open the project i have to reselect yaml type for each file thanks
11390|@weinand  I found it only took 85ms for `variableRequest()`，is it too long?
11391|It took 81ms to get variable properties from remote, i can not reduce this part too much.
11392|can you describe more your scenario? The easiest way would be dropping a configured user setting file for each new user on provisioning the machine.
11393|I found if i return empty array after receive data from remote(which costs about 81ms), then there is not spinner.   What reasons will cause the spinner except taking too much time?
11394|That's my experience too, restart and reload wording is not consistent so I didn't even bother looking for reload. If you want to make a new issue to that effect or rename this one that would be good.
11395|@pleerock You not even going to try an IDE because it doesnt have tabs ?! (O.o) weeeweweweweeeww . They dont want to add tabs because tabs are pointless , verbose they generally add no value while adding top wieght on the windows chromes space. The alternatives provide more metadata, ease of use and quicker navigation.
11396|"With tabs I choose which files remain open. Whether it's CTRL+tab or ""Working files"", if I open a file to look up some code into it, switch to another one to use said code, I have no ways of going back to my first file short of having to re-navigate to the file in the explorer.  I know I have 3 editors, but sometimes I don't want to override the other 2 with my look-up code-only file.  If when I open a file it stays in the different file histories, then I'm fine without tab. Maybe if a file has been open more than 5s it deserve an entry in CTRL+Tab."
11397|"@4tron yes it is for me, because I want to use IDE which is convenient to me. for someone loosing tabs is pointless and safe their space (probably they are using netbooks and don't have enough space for really few extra pixels =)), for others its convenient and increase their productivity. Any good software should be customizable and have ability to hide/show panels. ""save a space"" is not argue. Introduce tabs + add ability to show/hide them (if its really needed for someone=)) they best way to go. No need to open a new America or go with wrong innovations, need to learn from best IDEs here which made UX for years better and better, like intellij, visual studio and others"
11398|It's really simple- just make it a Preference- tabs or no tabs.  When tabs are on, no Working Files, when Tabs are off, Working Files. That was Genius !  ;)  Me, I'm a tabs guy. I find Working Files very limited and non intuitive, as well as taking up vertical space on the Project Tree. But it hardly matters if we can't have more than 1 Project open.  :(
11399|Something like this is the holy grail of vim binding:  https://github.com/carlosdcastillo/vim-mode  It's pretty buggy though. But that would be a nice direction. Let neovim do all the work but still have intellisense, etc with the editor.
11400|"""Open Recent"" is not updated with making a file a working file within the workbench and I do not think it should."
