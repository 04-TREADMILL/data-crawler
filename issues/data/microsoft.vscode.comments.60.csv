5901|@robbaman @plogen ignore the slash, it has nothing to do with the problem  When you guys test this, do you get the [authentication dialog](https://cloud.githubusercontent.com/assets/22350/11739560/b8ad5832-9fec-11e5-8545-4d40e0bc6a20.png)? Which OS are you on?  @robbaman Confirm this please: the issue goes away by running `git config push.default matching`?
5902|#1871
5903|This action is the thing that runs on Cmd+3 (Ctrl+3) and is used to bring up a third editor or focus it if 2 are open. This works as designed.
5904|@Penryn in those cases where tsconfig.json is not showing up, does a refresh of the explorer help?
5905|Yes, and env variables declared without an OS should merge with the OS specific ones.
5906|Yes I did get the authentication dialog, but it always failed with the authentication failed message. Since I copy the credentials from a password store I am certain that there were no typos.  When I pushed from the git command line the push succeeded with a warning regarding the push matching method. I set it to _matching_ per my preferences. After this, pushing from VS Code worked (and continues to work).  The way I see it either the fact that I pushed once from command line, or the changed matching setting caused the error to disappear. Since this all happened in a period of a few minutes it is unlikely anything else changed in the meantime.  I'm working on Windows 10 Pro
5907|@bpasero Yes, even the smallest sized file
5908|Maybe you can then inspect git exit code?
5909|@aeschli this should be done now. There is more to do to get various at-rules accepted in syntax highlighting (they are not a simple list like property/values, and need regexp and more understanding of the format of cSS.plist) and the linter, and some of the CSS functions like gradients could be made smart like the colour functions, but it is a good base to work from.  Changes to the css-scheme and resulting browsers.js should be straightforward and don't need too deep a review. Only thing I added beyond spec and browser support updates is that I added a bunch of suggested unicode-range ranges from the Unicode spec, updated font-feature-settings values to include all the OpenType features from that spec, along with the friendly name as a description, and included a bunch of cubic-bezier values that are commonly used based on the Penner algorithms. These make those three properties easier to understand as the values are rather cryptic and usually need to be looked up.  Might want to check intelliSense.ts more as I'm not a TypeScript developer. I just copied how the other reductions were done for the various reductions I added. They could probably be combined in one method to save code, rather than a bunch of copy/pasted code.  I added new restrictions if a collection of values were defined as a data type in CSS and were used by multiple specs. It adds quite a bit more code to languageFacts.ts but saves a bunch from browsers.js. The main drawback I see, except splitting the definitions into multiple files is that they lose their browser support information. Most of that can't be seen anyway as the descriptions are clipped to one line.  The other thing that should be checked is the css.plist. Beyond expanding the values and properties, I added a few more blocks to handle @viewport and a number of CSS functions like the various filter and transform functions. I copied the regexp for highlighting numbers within the functions from elsewhere in the file. I also removed the \b surrounding the property name regexp as it was stopping the prefixes from being highlighted with the name. I'm not sure if there is any performance impact as I'm not a regexp expert.  The only other changed files should be the test file that previously tested for old flex box syntax.
5910|@boxHiccup can you start a profile from developer tools before pressing ctrl+s and stop if after it is done to see where time is spend. let me know if you need help how to start it.
5911|> Another thing that made me sad today is that we have: IResourceInput, ITextInput, IEditorInput, IFileInput which all equal but also different.  I got rid of ITextInput and IFileInput. The remaining difference between IResourceInput and IEditorInput is expected because the one is the lightweight URI only input and the other the more heavy typed EditorInput from the workbench.
5912|I will then close this issue, since there is a way to preserve the state upon restart.
5913|Actually this is the VS icon for conditional breakpoints. For example: ![conditional](https://cloud.githubusercontent.com/assets/1704059/12231350/b48aa848-b84e-11e5-83c6-11aa726dc919.png)  Like you, we also thought that the + might suggest that something new is being added so we checked with the VS team first to see what feedback they had. We asked the VS debugger UX team about any positive or negative feedback they have had about this icon and apparently they have had no feedback one way or another about it in all of the studies they have done.  A quick look here too doesn't bring up anything about the icon: https://visualstudio.uservoice.com/forums/121579-visual-studio-2015?query=conditional%20breakpoint%20icon  We considered ? and ! but didn't go with those as we thought that those might suggest that there is something wrong with the breakpoint.   In the absence of any significant negative customer feedback, we felt that the best option was to be consistent with VS. Hence the suggestion to use the VS icon.
5914|I can do it, but I'm out the city by now, tomorrow I'll be available to post a screenshot. Thanks for your availability to resolve the issue
5915|Thank you for reporting and being patient with me :+1:
5916|:+1:
5917|@boxHiccup thanks!
5918|I fixed the problem with not echoing 42. Will be available in the next release.
5919|![image](https://cloud.githubusercontent.com/assets/900690/12231588/11e31f34-b859-11e5-8380-7b5a36ad3d84.png)  Seems to exist, closing.
5920|This issue occurred in Ubuntu also. I think that it occurs regardless of which OS. Paths to node and CLI commands such as gulp are not added to PATH until nvm do it. VS Code can't find out these.
5921|I'd like to reopen this issue. I think we got a little distracted with the whole window.reopenFolders setting, which is just a heads-up to help you guys fix the real issue.  The real issue was described as follows:  > ... clicking the restart button only restarts the active VS Code window, not all of them. So you might still have other CS Code windows that do not get the extension until they are manually restarted.
5922|"One of problems is that a command can't know that a passed argument means ""no-file"".  A task script such as `gulpfile.js` that is customized easily by user can check that, for example `arg !== '${file}'`. Others can't, and the command throws an error ""${file} is not found"".  If we can write `tasks` that are listed depending on the situation, it might be solved. For example, I want to do `compass compile` only a file I am editing now:  ``` {   ""version"": ""0.1.0"",   ""command"": ""compass"",   ""isShellCommand"": true,   ""args"": [""compile"", ""${workspaceRoot}""],   ""tasks"": [     {       ""context"": ""edit"",          // This task is shown in list when a file is opened.       ""taskName"": ""compile this file"",       ""args"": [""${file}""],       ""suppressTaskName"": true     },     {       ""context"": ""no-open"",       // This task is shown in list when a file is not opened.       ""taskName"": ""compile all scss files"",       ""args"": [],       ""suppressTaskName"": true     }   ] } ```"
5923|@borgdylan Sorry about the nuisance, I did it to address #51.  It is a bit difficult to spot, but the release notes contains the change: https://code.visualstudio.com/Updates#_changed-defaults-and-key-bindings
5924|Correct, the extension host API is documented here: https://code.visualstudio.com/docs/extensionAPI/vscode-api. You want take a look at registering an editor command which allows you to modify a document.
5925|:+1:
5926|@iamzhout Awesome, many thanks for the confirmation!  @bleggett You're absolutely right, I didn't realise these options could be used independently. I assume you set your proxy address via the `HTTP_PROXY` and `HTTPS_PROXY` environment variables? Give [this build](https://ticino.blob.core.windows.net/build/e48215776341e68c6f15a9319fcfa514fdb09532/VSCode-win32.zip?st=2016-01-10T11%3A55%3A00Z&se=2016-01-17T11%3A55%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=dZCkPenX5lP7f2nvXq11Uj5NWHvBwsL7r5%2B3Z8nU93c%3D) a try and let me know if it solves the issue for you.
5927|"Ah! I don't have Xcode installed actually! I was going to install it today actually so I can use FileMerge. I'll follow up again once I do.Â   ---Sent from Boxer | http://getboxer.com  On January 11, 2016 at 12:35:09 AM EST, WisonYe notifications@github.com wrote:@jaminroe I have the same issue with you, but I solved it, I have git installed, but when you type ""git --version"" in the terminal, it will prompt this:  Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.   And then you need to use ""sudo git --version"", the purpose it that show the license and you need to pull down( press space/enter ) to the end and type ""agree"" to end this:  By typing 'agree' you are agreeing to the terms of the software license agreements. Type 'print' to print them or anything else to cancel, [agree, print, cancel] agree You can view the license agreements in Xcode's About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf   After that, reopen visual studio code, your git and works fine( even you don't use it, it won't report error ) :)  I know more problems on MacOSX version for the ""code"", but ...I also keep using it right now, at least it's not bad, just sometimes the ""intellisense not working""( not working perfect like their video show us, I have not idea on this, hope them can fix this ), and make a try on MacOSX, from open a Empty folder to setup Node.js/Nativescript project( add the tsconfig.js etc, ), otherwise ""intellisense not working"" IS VERY VERY VERY VERY SAD for Mac User ....:(  âReply to this email directly or view it on GitHub."
5928|Ok, thanks, but then how are the other build tasks get invoked?  Are we supposed to have multiple files instead or something?  I don't get it.
5929|Thanks @egamma and @aeschli. I did mean Visual Studio Code.  > built-in css linting (which is a custom linter)  Is the built-in linter not CSSLint? It certainly seems to be.  Since there's already a VS Code extension for stylelint, this issue is about the built-in linting. If that's not up for reconsideration, feel free to close the issue.
5930|https://github.com/Microsoft/vscode-chrome-debug/issues/79
5931|Hi @weinand, Thanks for checking. I'm still getting lowercase paths so I'll try digging further and trying out other debug adapters then get back to you on this.
5932|I'll do that.  Thanks for your time and input :+1:
5933|"@AndrewNatoli Are you saying that if you set a breakpoint in a file ""/Developer/Project/File.php"" VSCode sends you the path ""/developer/project/file.php"" in the SetBreakpointsRequest?"
5934|Let's tackle the other suggested styles in a new issue. I have merged this change in with some edits to simplify it in 82f2a8afb224bda94f3b94dd73718aa3eb370f42
5935|@bpasero focus**Third**Editor is the one that is bound to <kbd>ctrl</kbd>+<kbd>3</kbd>, it does seem to act exactly the same as focus**Right**Editor though.  Given that <kbd>ctrl</kbd>+<kbd>3</kbd> already acts like this, this keybinding doesn't seem to provide much utility at all? A user could use <kbd>ctrl</kbd>+<kbd>1</kbd>/<kbd>2</kbd>/<kbd>3</kbd> to focus all 3 editors or <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>alt</kbd>+<kbd>left</kbd> or <kbd>right</kbd> to only focus the left most or right most?
5936|@weinand Yes, that's what's happening
5937|I tried over the weekend with the following setup: 1. Launch with `Code --disable-extensions` 2. Open a ~1300 line JavaScript file  Memory and CPU were approximately the same Friday night and Monday morning.
5938|Hmm, I tried setting `taskSelector` but it doesn't appear to work and just dumps npm help (what you'd get either typing just `npm` or `npm invalidscriptname`)  ``` Usage: npm <command> where <command> is one of:     access, add-user, adduser, apihelp, author, bin, bugs, c,     cache, completion, config, ddp, dedupe, deprecate, dist-tag,     dist-tags, docs, edit, explore, faq, find, find-dupes, get,     help, help-search, home, i, info, init, install, issues, la,     link, list, ll, ln, login, logout, ls, outdated, owner,     pack, ping, prefix, prune, publish, r, rb, rebuild, remove,     repo, restart, rm, root, run-script, s, se, search, set,     show, shrinkwrap, star, stars, start, stop, t, tag, team,     test, tst, un, uninstall, unlink, unpublish, unstar, up,     update, upgrade, v, verison, version, view, whoami npm <cmd> -h     quick help on <cmd> npm -l           display full usage info npm faq          commonly asked questions npm help <term>  search for help on <term> npm help npm     involved overview Specify configs in the ini-formatted file:     /Users/smlynch/.npmrc or on the command line via: npm <command> --key value Config info can be viewed via: npm help config npm@3.3.12 /usr/local/lib/node_modules/npm ```
5939|[Code does find these in Linux and OS X](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L246). Please try it one more time in Linux and confirm that it doesn't work. If that's the case, it's a separate issue.
5940|Let's track the other styles in #1929
5941|@markrendle Sorry this appears in github as not merged, I had to manually merge it due to some bad commits in your PR, but your commit did make it in.
5942|@Tyriar was this just opening an empty workspace with one file or opening a folder first and then a file from it?
5943|> Is the built-in linter not CSSLint? It certainly seems to be.  It provides similar rules as CSSLint but it is a custom implementation. There now also is an extension for CSSLint.  Closing this issue, we currently have no plans to replace the built-in linter.
5944|@bpasero Opening empty workspace, I didn't open a folder and no folder was open when I launched
5945|@isidorn Is this possible?
5946|This issue was moved to textmate/sql.tmbundle#12
5947|Lots of vs icons did not get negative customer feedback but we are still not using them, like the step next, step in... So I would not take that as an argument.  What about the equality character = What about just using a different colour like the current orange? The first and thirds point from my previous post are my biggest concerns and are the reason I do not think this issue should be closed.  @weinand @egamma opinions welcome
5948|Duplicate of #140
5949|"@Tyriar sorry I confused the actions, ""Focus into Next Editor on the Right"" is distinct from Cmd+3. For me it works like this: - 0 editor open: opens a first editor - 1 editor open: opens a second editor and focus it - 2 editor open: opens a third editor and focus it - 3 editors open: nothing  What puzzles me is why no editor opens for you when 1 is open?  Btw in your example the second editor already has focus when you call the split action. That is why a third editor opens. If you give focus to the first editor and then invoke the action, it works as expected."
5950|Ok, good to know. So this seems to be related to having a (potentially large) folder open. Still to find out if just opening this folder is enough or having a file open only triggers it.
5951|I do not see that on the latest vscode on my mac  ![screen shot 2016-01-11 at 15 52 19](https://cloud.githubusercontent.com/assets/1926584/12236659/67543422-b87b-11e5-8db4-79660245dbd5.png)
5952|@bpasero I had a large folder open with no files open over the weekend, with no noticeable increase in memory usage. I'll have the results of a large-folder-and-file-open test with hopefully a reproducible/shareable workspace in about 7 hours.
5953|"@bpasero It appears I got a little confused too, I just looked again and I think I was indeed running `focusThirdEditor` because I was running it through the command palette. While this issue seems fine now, my confusion was due to 2 problems: - `focusRightEditor` conflicts with Ubuntu's default OS hotkeys, this is captured in https://github.com/Microsoft/vscode/issues/509 - I was using the command palette with the search string ""focus right"" which was only matching ""Focus into Right Hand Editor"", even if I waited ""Focus into Next Editor on the Right"" was not matching. I think this is a legitimate bug with the command palette's fuzzy search. Not sure if an issue exists yet."
5954|@bpasero the folder in which I experienced crashs before would have been 13000-14000 files strong, this includes the git repo which was around 2000 by itself.  I guess I'll double check that the crash still happens in the latest version next as it's been a while since I've seen it (due to testing).
5955|@joaomoreno That build doesn't work either, sadly.  No, those variables are not set on my box. Since I'm in a corporate setting I have an IT department that apparently doesn't expect me to have to know the proxy URL because they route all traffic through it, so with other node-based stuff I've not had to set a proxy http/https URL to get things working, I've just disabled strict SSL.   I assume the reason this has worked with other node-based stuff is because strictSSL = false has been  treated as a global flag that disables strict cert checking regardless of the other proxy settings.
5956|This is a feature that for instance sublime text supports, but we do not have it yet. I noticed that sublime text inserts multi cursors
5957|I can't really reproduce the 10 second hang on a 20k suggestion filter, but I do see some slowness. More like 1-2 seconds here.
5958|Not sure if we support C# formating, joh?
5959|I can reproduce in typescript  ``` typescript interface TestInterface {   testvar: string;   testfunc(): string; } ```  ![image](https://cloud.githubusercontent.com/assets/6461412/12236972/ad24bffc-b87c-11e5-8e12-82054fb74949.png)  The problem is that the `interface` and the first `string` both get the `storage.type.ts` scope. We would like to color type names with a different color from the keyword. Maybe give `interface` `keyword` scope instead?
5960|Yes, that explains it. Fuzzy find is not enabled in anything but the file picker (opt in).
5961|And I assume it is a JS workspace?
5962|This issue was moved to Microsoft/TypeScript-TmLanguage#44
5963|"@bpasero it did do a fuzzy match though on ""**Focus** into **Right** Hand Editor"""
5964|@benkaiser We kept `ctrl+up/down` intentionally free, with the December update `ctrl+up/down` do scroll line up/down. Please see https://code.visualstudio.com/docs/customization/keybindings
5965|@bpasero py, cpp, js, html, css
5966|We've discussed this in the team and decided to close it since we don't have guidelines for import statements so each developer has his style of importing and this might force an unwanted style somewhere since the PR touches a lot of different code areas.
5967|This issue was moved to textmate/java.tmbundle#40
5968|@erichocean @mathiasvr Sorry about that!  This might be caused by our code that work arounds Chromium's implementing a w3c section only on Mac: https://github.com/Microsoft/vscode/blob/39602b3adbb50945fd8fe70017a2ffbd3000a477/src/vs/workbench/services/keybinding/electron-browser/nativeKeymap.ts#L204  How can I try to reproduce on a qwerty keyboard? is there a dvorak kb layout setting on the mac (I'm not usually working on a mac)?
5969|I can't exactly reproduce the shown example, but I see other issues with Cyrillic characters in the identifier.  ![image](https://cloud.githubusercontent.com/assets/6461412/12238144/d1f06bc8-b882-11e5-9a2e-e5b7ac62105f.png)
5970|This issue was moved to Microsoft/TypeScript-TmLanguage#45
5971|"Yes, I confirmed it again, and I got same result. For example, I did `Tasks: Run Task`, and VS Code said ""Gulp is not installed on your system"". Of course Gulp is already installed.  I think that [`getUserEnvironment()`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/main.ts#L246) makes the process take over environment variables from parent process. But path to Gulp is not added to `PATH` yet. VS Code can't find out these because `PATH` does not include Gulp. The cause of this issue is unrelated to `getUserEnvironment()`. The cause is that necessary paths are not added to PATH when VS Code starts."
5972|Actually the step into and step out icons are now consistent. When we designed the VS Code icons we worked with the VS team to introduce these icons into VS too as it was felt that they were significantly better than the existing VS icons.  It was in this spirit that we talked to the VS team last week to see if there was an opportunity to improve the conditional breakpoint icon in both VS and VS Code. But we weren't in a position to be able to do so because there has been zero feedback about the current icon and, in my opinion, the options we are considering are not significantly better such that a change in VS would be justified.  Like you, we have some reservations about the + sign too but we are constrained a bit by what we can do. For example, a badge in the corner of the icon won't work because the icon is too small for the badge to be clearly visible. We feel that the orange colour is too similar to the red for a regular breakpoint.  Consistency with VS works both ways and works in our favour. We can encourage changes in VS based on what we do and we can adopt some of the best practices that VS has figured out over time. That does not mean that we will become an IDE. But when appropriate, consistency between the tools can work well for each tool. So hence the decision to adopt a consistent icon.
5973|tho, there are cases where an editor is embedded inside a 'large' editor - the find reference et al experience. unsure how to handle those...
5974|"@joaomoreno I have set http.proxy, https.proxy and http.proxyStrictSSL = false,  I want to install extensions: CTRL + P: enter: > inst .. wait a moment, select ""Extensions: Install Extensions"".  With the latest decembe release: I get a blue loading bar after a few seconds it says:  ""ERROR Unable to verify the first certificate""  With your first build you posted here:  https://github.com/Microsoft/vscode/issues/155#issuecomment-169963541  I just get an endless loading bar and nothing happens.  With your second build you posted here: https://github.com/Microsoft/vscode/issues/155#issuecomment-170519605  I just happens nothing, it instantly closes the prompt without any result.  Any idea?  UPDATE:  I have had a look into the developer console. With both of your builds, vs code tries to load the extensions stuff. But our enterprise proxy returns  a   ---    Access Denied (authentication_failed)</big>   <BR>   <BR>   Your credentials could not be authenticated: ""Credentials are missing."". You will not be permitted    access until your credentials can be verified.   <BR>   This is typically caused by an incorrect username and/or password.   </FONT>  ---  My settings.json looks like this:  // Place your settings in this file to overwrite default and user settings. {         //-------- HTTP configuration --------  ``` // The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables ""http.proxy"": ""http://myusername:mypassword@123.123.123.123:8080"", ""https.proxy"": ""http://myusername:mypassword@123.123.123.123:8080"",  // Whether the proxy server certificate should be verified against the list of supplied CAs. ""http.proxyStrictSSL"": false, ```  }  The thing is, i am acutally using the same source of the http.proxy value in my git, npm and bower proxy config. I Also set this up for HTTP_PROXY and HTTPS_PROXY. Thats where i copy/pasted it from. And well, it just works fine there."
5975|Still denied :(   I'm getting this error since 3 days
5976|Although the `src` structure is very well maintained, imports has been messed up. Currently the code locked to `amd`, but I was able to build the whole project using es2015 module kind using this PR. We all know that `amd` was a hack like temporary solution and will be deprecated. Regardless of what happens to this PR, having a guideline for imports as really important.
5977|Yes i'm actually on a physical qwerty keyboard as well, in keyboard settings you can add dvorak as input source.
5978|That is actually a conicidence from our camel case matcher :)
5979|However, having said all that, I will check with the VS debugger UX team one more time to see what scope they have for changing. I'll see what they think about the Swiss flag thing.
5980|"May be it has something to do with the camel case smart search? I face the slowdowns with OmniPascal (case insensitive language and all symbols use PascalCase or UPPER_CASE).  With JavaScript I can reproduce it with a hang of ~5 seconds using the following file: https://gist.github.com/Wosi/0487f72965a26de07c92   See the instructions in the comments. The speed of filtering depends strongly on the typed characters. Filtering for ""2"" is very slow in this case."
5981|Ah, well no issue apart from #509 then :) thanks for looking into it.
5982|@fernandomalmeida Did you try the workaround given by @joaomoreno ?  I had the same error as you, and that workaround fixed it.
5983|"Are the breakpoints usually sent through any custom code before `setBreakPointsRequest`?   Here's my `source.path` immediately after setting into `setBreakPointsRequest`.  ![screen shot 2016-01-11 at 11 04 12 am](https://cloud.githubusercontent.com/assets/4162073/12238660/1d9cb2aa-b853-11e5-8402-60b86c24d717.png)  My first directory should be ""Developer,"" not ""developer"" and I also have an extra slash at the start..."
5984|Temporary solution: If the tasks in both file have same name, this issue does not occur.  BTW, I want to use `tasks.json` to specify `args` for Gulp.
5985|:+1:
5986|@SkaterDad Great! That workaround worked for me. Thanks!
5987|@AndrewNatoli this doesn't look like an OS X path since it starts with two slashes. What is your VS Code setup? Is this some shared drive? How did you launch VS Code?  @isidorn any ideas?
5988|@weinand VS Code is installed on my primary (and only) drive at `/Applications/Visual Studio Code.app`
5989|If it's a possible, I hope that tasks are listed depending on the name of opened file also. For example, a `context` property above accept `file:/\.md$/`. That is, this task is shown in the list only when markdown file is opened.  I wrote a small script to convert specified file to HTML and pass it to web browser. We need previewing markdown, but we don't need HTML files (i.e. we don't need to save HTML files after checking these. and we don't need converting all markdown files at one time). Therefore converting only a current opened markdown is useful.
5990|@AndrewNatoli and you've launched VS Code by double clicking the app in /Applications? And what is /Developer? This looks non-standard. I don't have such a root level folder. Could you try to use a php project that lives in your home directory? Does this makes a difference?
5991|@AndrewNatoli your primary drive is not case-sensitive, right?
5992|"Thanks for explaining the thought process, Steven.  @isidorn: I completely agree with you that this ""+"" icon is not an ideal icon for conditional breakpoints.  Going with Visual Studio's precedent was not a decision we made lightly.  I tried to convince the VS team that the ""+"" icon was confusing and that the diamond logo (pictured below and indicated by the green star above it) would be the more ideal solution, since it represents a decision or condition on flow diagrams (a great metaphor).  Unfortunately and unbeknownst to me, a very similar icon was being used already for tracepoints.  So using our top pick would not work, as it would be confusing difference between both products that usually are visually similar.  **_Pictured below are the various designs we explored**_ ![untitled-1](https://cloud.githubusercontent.com/assets/11839736/12239921/e3a6966e-b83f-11e5-818c-3d1b8718f035.png)  Your point that it looks much like the Swiss flag is also completely understandable.  I think we should continue to have a dialogue with VS and perhaps do some studies that involve users deciding which icon is more intuitive against a control of the existing icon in VS.  If we could prove a significant improvement, I think we could get VS to change it, as there was no visual design validation that users like the ""+"" except that no one has complained about it, according to Karl Melder, one of their researchers."
5993|@weinand Right, my primary drive it not case-sensitive.  /Developer is a leftover artifact from before XCode 4.3. I moved in and made it my document root when I was starting off.  I moved the project to my home directory.  I'm running VS Code by opening the app in /Application then testing the adapter by running  `[path to vscode.app]/Contents/MacOS/Electron /Users/andrew/vscode-php-debug/testproject --extensionDevelopmentPath=/Users/andrew/vscode-php-debug/`  Where /testproject is a sample php application.   Here's an interesting development. When I add a breakpoint to the PHP project, `setBreakPointsRequest` is hit with the lowercase and double-slashed path (//users/andrew...).  In Apache (I'm using MAMP in this scenario), if I make the default host's document root `/Users/andrew/vscode-php-debug/` and run a script with a breakpoint in my testproject directory, `setBreakPointsRequest` is hit again but this time with the correct path.  If I use an Apache virtual host and instead of accessing my app via `localhost` I use something like `test.mygreatapp.com` (which is what I do and have been doing), when I run the script I get the lowercase, double-slashed path.  ![screen shot 2016-01-11 at 11 58 33 am](https://cloud.githubusercontent.com/assets/4162073/12240418/4810adb8-b85b-11e5-8077-7057591c25c2.png)  Below is what the adapter is sending out to XDebug (top line)  ![screen shot 2016-01-11 at 12 07 27 pm](https://cloud.githubusercontent.com/assets/4162073/12240523/eab3ef62-b85b-11e5-9ddf-64eb16349d11.png)  With the virtual host the wrong path is sent. With the default host the proper path is sent.   This occurs both in my home directory and my /Developer directory.   So it seems that in a nutshell to reproduce this you need to be running OSX, Apache 2 with virtual hosts (and accessing one), with PHP <= 5.3, and XCode < 2.3.
5994|![screenshot 25 2](https://cloud.githubusercontent.com/assets/11838212/12241282/24f3ea80-b8b4-11e5-8e6f-4ad948a1015a.png)
5995|@joaomoreno: Haha. Nice and simple.
5996|@bpasero: I actually never tried refreshing VSCode's file list, but I did restart VSCode which still did not list `tsconfig.json`. To be clear, `tsconfig.json` was present on the file system this entire time.  If this happens again I'll try refreshing the file list instead.
5997|I would like to support mountain lion, VSCODE is a text editor, it is not an IDE. I think it is very important support old machines.  How I can help about this issue?
5998|@pcgeek86 Thanks for bringing this to our attention.  Are there any other colors that you are having trouble with?
5999|@bgashler1 see the change in  https://github.com/Microsoft/vscode-docs/commit/a2a1d3e8e208fdb06e36f75b0748b7adb5312b5d  this should introduce h4, assigning this to you for some css love.
6000|This is resolved in #1217
