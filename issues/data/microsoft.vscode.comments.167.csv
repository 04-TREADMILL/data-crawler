16601|Good morning Today I went to open the Visual Studio Code and it only works if I run sudo/Applications/Visual\ Studio \ -\ Insiders.app Code/Contents/MacOS/Electron  When I try to click the icon in the dock, the problem continues, is there any permanent solution that works by clicking on the icon of the vscode insiders?
16602|Hi **@senayar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
16603|I was just going to report this. I felt this was the single most significant and disturbing bug on VS code. Anyway, at least for future reference, here's an animated screen capture I've made for it (note I'm using Windows 10 x64 so this is definitely not a Mac-only issue):  ![vs code bug](https://cloud.githubusercontent.com/assets/17719551/14317023/dd22f2e8-fc0e-11e5-8672-dbe07378678a.gif)  Edit: This was recorded using version `0.10.11`
16604|Yeah, we would _really_ like this too...  Obviously it makes no sense to talk about adding syntax support for PostCSS, as that is nothing more than a task runner and could theoretically support any syntax, but it would be really great to have an option to at least enable support for the subset of future css syntax supported by CSSNext (http://cssnext.io/features).  Our design/css/html guys work in Sublime Text and they absolutely insist on using PostCSS with CSSNext - which is fine, except that the mess of red squiggles the rest of us see in VS Code is really getting in the way of collaboration. Is this something you would consider supporting in the near future?
16605|You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
16606|fixed by 1e955490e80f3f2d63aabd6cb3b93e2bc37cd23b
16607|"You might wanna delete the whole `~/Library/""Application Support""/Code - Insiders` directory and never start Code with `sudo` again."
16608|"I get a lot of errors for ""@apply"" with polymer"
16609|@pflannery Accessing the JSONParser as shown is not supported. These are internal classes of the JSON language service designed to run in a separate process.
16610|"@aeschli I am on latest and still see it when running  ""out of dev"""
16611|"@sgtoj wait, are you saying it works with latest stable but not with insiders? or with a previous version?  I suggest to not kill code processes while one is running this might easily bring the other done.  Best would be a setup where one instance runs clean (no other instance) with ""--verbose"" and when you open the second instance see if anything is being output to the console for the second instance.  Here is what you should get if the second instance is successfully talking to the first:  First Instance  ``` (4:03:16 PM) Received data from other instance { pathArguments: [ '/Users/bpasero/Development/monaco' ],   programStart: 0,   enablePerformance: false,   verboseLogging: true,   debugExtensionHostPort: 5870,   logExtensionHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   diffMode: false,   disableExtensions: false,   waitForWindowClose: false }  ```  Second Instance  ``` (4:03:16 PM) Sending env to running instance... (4:03:17 PM) Sent env to running instance. Terminating... ```"
16612|Hm looks like this flashing was already previously so your change might not be related...
16613|"Two options: - you configure VS Code to open files in the same window: window.openFilesInNewWindow = true - you start with ""-r"" option to reuse last active instance"
16614|I'm working on an extension
16615|@bpasero We do open `c:\Users\Some.User\src\gittest\` in VSCode. I guess that might be a tradeoff we have to make, given the way the company sets up our computers.. Unless there is not a better solution/fix, that is.
16616|Thanks @TurkeyMan, great chatting with you earlier today.  For everyone else who hasn't been able to participate we will be running these on a regular basis so there will be opportunities to participate at a later date.  The conversations we are having this week are all 1:1 conversations during which we discuss the details of the problems that each individual has experienced. This allows us to get a deeper understanding of the problems that we need to solve.  In subsequent weeks when we will be reviewing design mockups we will look for ways to have group discussions as well as 1:1 discussions. We will also look into how we can record and post videos of meetings afterwards.
16617|It is working great! Thank you!
16618|Fixed, please trigger new build.
16619|@stevencl is it possible to post a summary of the sessions (or even better, recordings) for those of us who are unable to participate, but are still interested in providing feedback.
16620|What puzzles me is how you manage to get the DELETE event on that folder, I am not able to reproduce this. A workaround on my end might be to just ignore such an event because I should not react on a DELETE on workspace root.  Do you ever see this issue in sub folders of the workspace?
16621|@bpasero Yes, we do. If I have a file like this: `c:\Users\Some.User\src\gittest\src\services\someFile.ts`, I can get VSCode to react the same (delete event + closed document in editor) with that file. Would it be possible to keep the files open, if the file still exists on disk - even if you receive a delete event?
16622|Ok so I assume some tool on your machine is firing delete events for folders. It is unclear to me what tool this could be but the way VS Code reacts to this is not good in your case.   Best you can do in that case is to completly disable file events (by using a pattern like `files.watcherExclude: <path to workspace>/**: true`).  This will have drawbacks though but prevent the closing of editors.  For the future we might revisit this decision to close editors on file events, so I keep this issue open.
16623|+1 On Wed, Apr 6, 2016 at 7:36 AM Peter Petrov notifications@github.com wrote:  > @stevencl https://github.com/stevencl is it possible to post a summary > of the sessions (or even better, recordings) for those of us who are unable > to participate, but are still interested in providing feedback. >  > — > You are receiving this because you were mentioned. >  > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-206405009
16624|"I would like to chip in on my expectations of file navigation within a code editor. I've been trying to get used to VScode for weeks now and keep going back to Sublime. Here is what I expect: 1. mouse-less navigation 2. ability to navigate forward and back within the set of open files 3. easily close files  So far I found VScode to unfortunately fail for me on all three. The workspace is unintuitive because when I close a file, it's doesn't really close, it's simply no longer editable. Closing the file is a mental activity of removing it from the set of files I'm working with.   In VScode, when I navigate within the files that are opened _in my head_ I keep encountering ""garbage"" that I thought was previously thrown away. This is exceptionally distracting and I end up having 20-ish files opened in workspace and eventually can no longer keep track of it and just close them all.  I'm unable to use the keyboard to quickly switch between opened files, that _in my head_ form a linked list. The order that I open them in is just as significant as the order that I close them in. I find Ctrl+Tab useless because I have to read file names one by one in that list and then figure out which one to tab to. I can much faster to flip through 5-8 opened files to the right one by simply recognizing content while it's flashing by or by just knowing where in ""the list"" my desired file is in.  I hope that makes some sense. I try to optimize my workflow as much as possible, use keyboard and avoid the mouse because it slows everything down tremendously. I struggle with this in VScode more than I have previously in any other editor (textmate, vim, sublime, flash, eclipse, etc...)"
16625|I don't see that @bpasero Can you inspect how large the web view is drawn? And also how large the iframe is?
16626|I've add experimental support for this. You can enable this feature by adding an attribute `smartStep` with a value of `true` to your launch config.
16627|@jrieken I verified that the webview itself is as large as the editor, so it must be the content within. Can you share with me how to show dev tools for the web view?
16628|"My extension btw:  ``` typescript /*---------------------------------------------------------  * Copyright (C) Microsoft Corporation. All rights reserved.  *--------------------------------------------------------*/ 'use strict';  import * as vscode from 'vscode';  export function activate(context: vscode.ExtensionContext) {      let previewUri = vscode.Uri.parse('css-preview://authority/css-preview');      class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {         private _onDidChange = new vscode.EventEmitter<vscode.Uri>();          public provideTextDocumentContent(uri: vscode.Uri): string {             // return `<html>             //     <body>             //         <div>Preview of the CSS properties</dev>             //         <hr>             //         <div id=""el"">Lorem ipsum dolor sit amet, mi et mauris nec ac luctus lorem, proin leo nulla integer metus vestibulum lobortis, eget</div>             //     </body>             //     </html>`;             return ""hello world""         }          get onDidChange(): vscode.Event<vscode.Uri> {             return this._onDidChange.event;         }          public update(uri: vscode.Uri) {             this._onDidChange.fire(uri);         }     }      let provider = new TextDocumentContentProvider();     let registration = vscode.workspace.registerTextDocumentContentProvider('css-preview', provider);      vscode.workspace.onDidChangeTextDocument((e: vscode.TextDocumentChangeEvent) => {         if (e.document === vscode.window.activeTextEditor.document) {             provider.update(previewUri);         }     });      vscode.window.onDidChangeTextEditorSelection((e: vscode.TextEditorSelectionChangeEvent) => {         if (e.textEditor === vscode.window.activeTextEditor) {             provider.update(previewUri);         }     })      let disposable = vscode.commands.registerCommand('extension.showCssPropertyPreview', () => {         return vscode.commands.executeCommand('vscode.previewHtml', previewUri, vscode.ViewColumn.Two).then((success) => {         }, (reason) => {             vscode.window.showErrorMessage(reason);         });      });     context.subscriptions.push(disposable, registration); }  export function deactivate() { } ```"
16629|@bpasero @joaomoreno have you two seen the issue before that @mariusa has been experiencing?
16630|Is VS Code running out of memory after starting and causing it to crash?
16631|I'm on Windows 10, both at home and at work - on two very different systems with different software installed on each system.  I haven't installed any extensions, I assume just the standard ones are installed.  I'm editing Typescript files - it's possible the Typescript extensions are doing something iffy, perhaps when auto-completing or displaying pop-up information, on-the-fly code inspections, etc.?  I have VS Code 0.10.11 here, and probably the same at work - I install updates when prompted.  > I had the Ctrl still pressed when doing arrow up/down, which caused the editor to scroll one line up/down instead of moving the cursor when doing these steps quickly. Is it possible that is what you are running into?  Doubt it. As said, I don't have this problem in other editors.
16632|"Because I am not getting expected output. Here I am expecting error message in the output window but it is showing up like: https://cloud.githubusercontent.com/assets/17735796/14301299/8966e38a-fb4b-11e5-9e3b-421c93e508d1.png  Expected: https://cloud.githubusercontent.com/assets/17735796/14301320/a7e2f0c4-fb4b-11e5-8862-2e1edfdf1ac1.png  Also while going further from line number 104 the debugger is closing suddenly and it is also closing open file in editor. (I am expecting it should go one step further when I am pressing ""Step info (F11)"")."
16633|This would be a super nice feature to have! I would love to be able to modify the document tree a little bit so as to filter out some files that are junking up my view but I have to keep.
16634|@mzt wow weird, I cannot reproduce. Do you run with extensions?  Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions`
16635|Just to reiterate, any recordings of meetings that happen this week won't be made available as each meeting is a 1:1 conversation where each person discusses the details of how they work and the specific problems that they have with VS Code. During these conversations we won't be going into great detail on any designs.  In subsequent weeks though we will look for opportunities to record and make available meetings where we discuss designs for improving document management in VS Code. Look for another invite from me some time next week to participate in the next round of design discussions.  Thanks for all the feedback and the details of how VS Code does or does not work for you.
16636|There is something to uncomment in `ManagedWebview` in _htmlPreviewPart.ts_
16637|Plan is to encourage using `extensionPath`
16638|@johnliu2016  ![untranslatedshift](https://cloud.githubusercontent.com/assets/12900364/14329410/14004c62-fbf0-11e5-8eb3-7c713f856444.JPG)  ![untranslatedshift2](https://cloud.githubusercontent.com/assets/12900364/14329463/4e5d7ad8-fbf0-11e5-8cb2-2e7d6967f2f3.JPG)  ![untranslatedshift3](https://cloud.githubusercontent.com/assets/12900364/14329469/548aaf16-fbf0-11e5-8cff-91daf62e0c9b.JPG)  ![untranslatedshift4](https://cloud.githubusercontent.com/assets/12900364/14329473/581d4652-fbf0-11e5-8c26-142075167fa7.JPG)
16639|`^$` and `^\s+$` will only match the contents of a line, not the new line character. More specifically they are zero width tokens. `$` will match just before the end of a line which is usually defined as a `\n`. You could normally use `\n` to match a new line but VS Code doesn't actually support matching across lines yet (https://github.com/Microsoft/vscode/issues/313) so that wouldn't work either
16640|@bpasero My bad, it was the Instant Markdown extension.
16641|I've managed to get it working fairly nicely being run with sudo using a custom user data dir, however it hangs unless run as the normal user at least once.  This is how it I can get around it currently:  ``` bash # First launch, code will create the data dir then hang with no errors in console sudo ../VSCode-linux-x64/code-oss --user-data-dir=/home/daniel/data-dir . # Give daniel access to ~/data-dir sudo chmod -R 777 /home/daniel/data-dir/ # Launches fine as regular user now ../VSCode-linux-x64/code-oss --user-data-dir=/home/daniel/data-dir . # Remove daniel access sudo chmod -R 700 /home/daniel/data-dir/ # Launches fine as root user now sudo ../VSCode-linux-x64/code-oss --user-data-dir=/home/daniel/data-dir . ```
16642|@bpasero fixed, right?
16643|No code changes happened in the area of intellisense and salsa. So I doubt that this has to do with 0.10.14 but it is a more general problem. I also don't full understand the problem you are seeing.  Can you pls add an animated gif that illustrates the problem you are seeing together with the snippet.
16644|I tried with sudo. It didn't work.
16645|Repro's on OSX as well.
16646|Both are great bugs -- could you please file over in https://github.com/omnisharp/omnisharp-vscode/issues rather than on VS Code itself?
16647|"Looks like the issue is with build indicator icon in the task bar. It is keep moving all the time and no clue to the user when build task gets over.  Can you try with the project placed at https://github.com/v-pavanp/ForTestingCode/blob/master/TypeScript.zip  and follow the below repro steps:  Steps: 1. Update the tasks.json with below args value: {     // See http://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""args"": [""app.ts""],     ""showOutput"": ""silent"",     //""cwd"":""${workspaceRoot}/TypeScriptTypes/"",     ""problemMatcher"": ""$tsc"" } 1. Now build it and verify error message in oup-put window.    error TS5007: Cannot resolve referenced file: 'app.ts'. 2. Now update tasks.json again for args value as below and build it.    {    // See http://go.microsoft.com/fwlink/?LinkId=733558    // for the documentation about the tasks.json format    ""version"": ""0.1.0"",    ""command"": ""tsc"",    ""isShellCommand"": true,    ""args"": [""${workspaceRoot}/TypeScriptTypes/app.ts""],    ""showOutput"": ""silent"",    //""cwd"":""${workspaceRoot}/TypeScriptTypes/"",    ""problemMatcher"": ""$tsc""    }  I could see the build icon is keep moving all the time. No clue when it is going to stop.  ![image](https://cloud.githubusercontent.com/assets/17735796/14332023/a38ffd62-fbfc-11e5-9685-7ee0de7e7d4f.png)"
16648|All files seem to be created correctly.  ``` $ sudo tree ~/data-dir/ /home/daniel/data-dir/ ├── DevTools Extensions ├── GPUCache │   ├── data_0 │   ├── data_1 │   ├── data_2 │   ├── data_3 │   └── index ├── Local Storage │   ├── file__0.localstorage │   └── file__0.localstorage-journal ├── storage.json └── User     └── snippets ```  The welcome page never comes up though, and the menu bar hangs when I try to open the license.
16649|If there's any data I could provide next time (please see previous console output), I'd be glad to, just let me know exactly what/how please.
16650|"After your comment, I took a look again, and found that the problem is occuring inside _any_ file within my project (there is a jsconfig.json file at the root of this project). If I create a new Untitled file, set the Language Mode to javascript, and type, then intellisense and snippets are working properly.  I've set `""javascript.validate.enable""` to `false`. but even setting it to `true` doesn't help."
16651|Here is a gif showing the autocomplete not triggering:  ![test](https://cloud.githubusercontent.com/assets/760112/14333244/50aaf6d2-fc6b-11e5-9fd0-f51c6df3039c.gif)
16652|@alexandrudima  This is a very useful feature, which I love in atom, makes editing all those camelCases in JS code a breeze.
16653|Seems like #1085 does exactly this. Can we move ahead in polishing that PR so that it can be added to  code soon?
16654|"Removing the jsconfig.json file fixed the issue (but it also took away all the benefits ;) )  FYI, my jsconfig file looks like this:  ``` {   ""compilerOptions"": {     ""target"": ""ES6"",     ""module"": ""es2015"",     ""experimentalDecorators"": true   },   exclude: []   // removing this also doesn't help - this same config used to work in 0.10.12 AFAICT } ```"
16655|Migrated to https://github.com/OmniSharp/omnisharp-vscode/issues/154, but leaving this open since it repro's with languages other than C# (specifically tested with JavaScript)
16656|"Commit https://github.com/Microsoft/vscode/commit/0787cde294d5eadf12dfd1ad38f2996241021f0c with `electron 0.36.11` is work fine on Fedora 23.  RPMS: https://copr.fedorainfracloud.org/coprs/mosquito/vscode/build/173746/  The `electron 0.37.4` with https://github.com/Microsoft/vscode/commit/0787cde294d5eadf12dfd1ad38f2996241021f0c still crashes. @bpasero  RPMS without node-weak by [disable-weak.patch](http://copr-dist-git.fedorainfracloud.org/cgit/mosquito/test/vscode.git/tree/disable-weak.patch): https://copr.fedorainfracloud.org/coprs/mosquito/test/build/173751/  Update: I removed the value of `aiConfig` from `product.json` file. It can work properly.  ``` version 0.10.14 commit 0787cde294d5eadf12dfd1ad38f2996241021f0c date 2016-04-06T20:54:31.495Z Shell 0.37.4 renderer 49.0.2623.75 Node 6.0.0-pre $ vim product.json ... ""aiConfig"": {     ""key"": """",     ""asimovKey"": """" }, ... ```"
16657|on a related note, if salsa can indeed be disabled by setting `javascript.validate.enable: true` then why does the use of decorators still say:  ``` [js] Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option to remove this warning. ```  when the jsconfig file is removed, or the `experimentalDecorators` key removed?
16658|I am also getting crashing overnight and during the day.  It  doesn't seem to be particularly related to just a workspace, extremely small workspaces 3-20 files or huge workspaces, predominantly noticed when  having multiple windows open.  Repos I have used that crashed. 1500+ asp,js,.inc(asp) files 70 + files asp.net core, js,cshtml This repo (https://github.com/gogits/gogs)
16659|Related: https://github.com/electron/electron/issues/1348 https://github.com/electron/electron/issues/4916
16660|The issue is with `xdg-open`, notice how the non-`sudo` call exits with 0 but the `sudo` call errors and hangs.  ``` ~ ❯ xdg-open http://www.google.com  ~ ❯ Created new window in existing browser session. echo $? 0  ~ ❯ sudo xdg-open http://www.google.com [0406/161820:ERROR:nss_util.cc(98)] Failed to create /home/daniel/.pki/nssdb directory. ```
16661|http://linux.die.net/man/1/xdg-open  > xdg-open is for use inside a desktop session only. It is not recommended to use xdg-open as root.
16662|"I'd either like it to be resizable with the mouse or a corresponding `""explorer.workingFiles.minVisible""` get added. So, for example, I could set `""explorer.workingFiles.dynamicHeight""` to `true`, `minVisible` to `10`, `maxVisible` to `20`. - From 0-10 files, I'd have buffer (empty space) between working files and the folder explorer - From 11-20 files, it'd dynamically grow - At 20+ files, I'd see a scrollbar"
16663|I have verified that static member completion now works with the alpha channel build 2016-04-06.  And yeah, we have some work to do on the `$env:` case.
16664|@alexandrudima I've had it turned on for a while now and haven't had any issues. I don't use it often, I've probably used it around 4-5 times spread out across that time. Do you think it's safe to turn on by default?
16665|Duplicate of https://github.com/Microsoft/vscode/issues/3353
16666|`ATOM_SHELL_INTERNAL_RUN_AS_NODE=1` is set purely for the CLI so that electron does not need to initialize before basic args are dealt with. Electron is then launched without `ATOM_SHELL_INTERNAL_RUN_AS_NODE=1` as a detached process to start vscode [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/cli.ts).  What do you think is the issue with that env var?
16667|@bpasero  batch file :) [文件命名操作.zip](https://github.com/Microsoft/vscode/files/207697/default.zip)
16668|@iHuahua 谢谢了，目前我是几个编辑器混着用的，可以解决一些问题，千万不要用sublime text编辑这种GBK编码格式的文件！我写批处理，几百行代码后，ST突然一个auto encoding 把我代码中文部分全乱码了！而且是撤销不了的乱码。
16669|Can't reproduce, anymore details on a repro?
16670|"Obviously I don't know about the inner working of electron and vscode. :smile:  What I did is empirically determine that this env var is the cause. I compare the env between a normal terminal and the one spawned from vscode and saw that variable is set.  Once I remove it things started working again.  In https://github.com/remcoros/vscode-startanyshell/blob/master/src/extension.ts#L46 It is simply starting the `cmder` (or other shells) using `child_process.exec`. The config is:  ``` js     ""startanyshell.shells"": [         {             ""description"": ""Cmder"",             ""command"": ""start \""%description%\"" \""%HOMEDRIVE%\\Program Files (x86)\\cmder\\Cmder.exe\"" /START %path%""         }     ] ```  Given that, I don't see why the env var should be set and cause the issue I experienced.  On the other hand, when I use `Open new command prompt`, I don't see that flag being set."
16671|CC /@remcoros  @remcoros, I tried with `open new command prompt` and that env var is not set.  @Tyriar , I do what vscode is running, `process.env[]` does not have that env var set. i.e. the code you pointed out is working correctly.  Really have no idea why when `child_process.exec()` called by @remcoros the env var is still there / added back in.
16672|this looks like a good place to start off, is this something I can help with?
16673|We do not recommend to build VS Code with newer Electron version until VS Code itself moved forward!
16674|Weird, now I don't see it at home. Will check tomorrow at work...
16675|:+1:  #5004
16676|Just dig in a bit and here is my finding: If I run `require('child_process').exec('start cmder.exe /start e:\\')` **directly in vscode developer tool, it is working correctly (i.e. the var is not set). If I run `start any shell` to run the same thing (through its command), it is not working correctly (i.e. the var is set).  vscode runs extensions in difference process(es). In those process(es) the `process.env` still have that var set. I confirm with directly modifying the `extension.js`:  ``` js vscode_1.window.showErrorMessage(process.env['ATOM_SHELL_INTERNAL_RUN_AS_NODE'].toString()); ```  And it prints out ![image](https://cloud.githubusercontent.com/assets/3254987/14341357/0d304d5a-fc46-11e5-961e-e26b303d6c05.png)
16677|Another idea if you want to try it out: Can you run VS Code from sources? See https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source
16678|To clarify: The freeze only happens when you open VS Code on a folder that prompts for git credentials?
16679|Thank you Zombie. It seems we still have to wait for a while. I did try \n and as you've said it's not working either. At least not at the moment.
16680|That is correct in my case. (some others sound like they may be having other issues?)  I've had git support disabled to get around this though.
16681|I tried to reproduce on Ubuntu 15 and I am not even getting the git login dialog there, but VS Code otherwise works fine. @joaomoreno what is needed to get the dialog on Linux?
16682|Doesn't GitHub's authentication basically do the same thing, since you need to auth with GitHub to push to repos you have access to?
16683|@dbaeumer can you help understand the shortcut accelerator of key combination display on such main menu, we found no single matching case in loc files
16684|One way this could be done is to split the base name from the extension and sort with that first.  I'm not particularly for or against this. I typically pad with 0's in the rare case I have files like this.
16685|Now doing the same as when deleting a folder with dirty files, not asking for confirmation. But keeping the file dirty in the editor.
16686|@eklavyamirani :+1: it's marked help wanted which probably means @joaomoreno won't get to it any time soon.
16687|@bpasero is there some place where general wrappers around electron calls can go? The ideal solution for this is to wrap all calls to `shell.openExternal`.
16688|Loc fix's in.
16689|You could add it into https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/window/electron-browser/windowService.ts
16690|@saneyuki We went ahead to fix the jpn string as suggested, feel free to verify on update.
16691|@bpasero The whole thing is flashing :). But I notice the glyph margin takes a while to react, is that what you mean?
16692|> > The freeze only happens when you open VS Code on a folder that prompts for git credentials? > > I have .git folders in the workspace, but it never asks me for credentials, and I use git only from command line. The freeze seems random to me, and unrelated to git.
16693|@eklavyamirani Go for it, this is a great issue to start contributing to Code. Let me know if you need any help.
16694|Forwarding to @dbaeumer due to  > specifically tested with JavaScript
16695|Fixed yesterday.
16696|Fixed yesterday.
16697|Fixed yesterday.
16698|@aeschli knows, we talked.   @alexandrudima so it seems the glyph margin is not updating as live as the other parts. is there a reason?
16699|Instead of using `<pre>`, the CSS `white-space` property can probably be set to `pre-wrap`.  `<pre>` version which doesn't wrap: http://codepen.io/anon/pen/KzZzpg  `white-space: pre-wrap` version with wrapping and respects whitespace: http://codepen.io/anon/pen/EKoKjQ
16700|@bpasero #1796
