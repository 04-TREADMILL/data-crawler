17701|I've almost the same issue with intellisense. On a big project autocomplition becomes sluggish and loading suggestions list takes a while.
17702|As far as I know the Microsoft-branded build (the one which has the Visual Studio logo and such) does have the extra terms, while the opensource vscode-oss build (the one you get when building from this repo, and has the vscode-oss logo) has MIT.  Basically, there is an officially packaged and branded version by Microsoft, and there is the opensource version everyone can build from the sources.  Disclaimer: This might be completely wrong, just is how I understand it.
17703|yeah, that might be something... How do you start vscode? just clicking the icon or via the `code`-command shell from terminal and iff so do you pass on the file to open? In that case we might infer the wrong casing, meaning file path.  Another case would be special characters in path names, we know that on mac characters sometime differ in how they are encoded. Anything non-ascii in your paths?
17704|@ricardobeat is your repo open source by any chance? Since you can repro consistently, I would love to give it a try. Which git are you on?
17705|With latest changes from Ben regarding #5313 I can no longer repro this on OS X. @dbaeumer will also try on windows with latest @egamma let me know if you still see it with latest
17706|@ashwinaj is this from an extension? can you attach a screenshot?
17707|@be5invis does it work adding those other fonts you mentioned in your comment?
17708|@tristian2 is referring to #3790
17709|@cheizer @alapolloni @dspork @yoeun What are the contents of `/Applications/Visual\ Studio\ Code.app/Contents/Info.plist` in your case?  I believe this all comes from people that had a _very_ old version of Code (in which the executable was `Atom`) and got upgraded to a more recent one (in which the executable is `Electron`) and the update framework failed to do the move properly.
17710|Very good points.
17711|@bpasero fixed?
17712|@bpasero If I manually add fonts to `.monaco-shell` using the dev tool then yes, it works. ![image](https://cloud.githubusercontent.com/assets/240091/14563091/ae2cce1e-0352-11e6-8e9b-7e029bf5d2f9.png) ![image](https://cloud.githubusercontent.com/assets/240091/14563106/bfb1f9fc-0352-11e6-8a1a-d0634e254fd4.png)
17713|@egamma yes my environment is 1.0
17714|@bpasero I think it is still properly used since I see the links are nicely computed in the output. I also see it properly registered [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/browser/output.contribution.ts#L24)
17715|This is the strange part, it is hit and miss for me. Sometimes I hear the alert, sometimes I don't. I use NVDA as well. Even if the alert is heard though, are there actionable controls in these alerts sometimes? A link or button one can click? If so, those won't be clickable properly even if the role=alert gets fired...
17716|If there is another way to color the output, I'd love to do it that way versus wrapping my lines with [Error ...] and [Warning ..] etc :smile:
17717|"@zunama It's not arrogance to try look for a better alternative. ""Not broken"" is no valid argument against looking for new stuff. It's pretty much an argument for it (maybe there's something better?). Though I noticed in this discussion that **if** VS Code wants to be fully used **today** it should aim to please the current 'old mindset' user-base and innovate later. Because people aren't very good at waiting and it saves you time trying to argue why this or that is better.  Back to your comment: If you want to do something right, you don't spend 3 minutes and quit. You enumerate your viewpoint on useful critique and look for possible improvements. A viewpoint of 3 minutes is useless - and dangerous - for your design because it's biased.  A poll doesn't work when you want to innovate. Example:  ---  **Which of these nagivation styles would be the most productive for you?** - Something. (Try something new that might be better) - Tabs. (Good old workstyle you learned to love).  ---  Of course tabs would win. But possibly the other idea could pave ways to a new standard navigation UI."
17718|Any updates? I can't fix project structure (it's too big and old) so this issue is a real joykill.
17719|Also here:  https://github.com/Microsoft/vscode/issues/5333
17720|I am making this ticket not because I don't understand the thing they have done with that separate build, but simply to remark that it seems like a bad idea to have such an extra build. As I said, it drives people to make their own unofficial build just to avoid that.  Personally I sure lost interest in the branded one once I saw that lengthy page of legal stuff _for an MIT open-source project_ I was supposed to agree to. No thanks. Does Microsoft want people to make extra unofficial builds because theirs sucks/is overly corporate legalese for no good reason? That seems like a bad thing. It seems like asking for future confusion caused by separate spawned forks created just to provide proper end-user builds that don't suck due to unnecessary complicated legal terms slapped on top.
17721|I just click the icon and open my project folder via `File -> Open`. Project path is: `/Users/boo/vscode-intellisense-test`, tried also `/tmp/vscode-intellisense-test`
17722|:+1:
17723|"Yes, sometimes the alert does have controls embedded. Do you have a suggestion how to handle those in the alert? The actions are accessible with tab keyboard navigation and announce itself when they get focus.  Still, it seems to me there is a general issue of alerts sometimes not being read and sometimes they are? If so, this sounds like an issue with the screen reader and how it handles the ARIA ROLE alert.  We fill an element like this:  `<div role=""alert"" aria-atomic=""true"">the alert message</div>`"
17724|One thing that is worth mentioning is that we seem to abuse the use of alert a little bit for workarounds for other accessibility reason. E.g. I see that suggestions from intellisense also end up in there. I wonder if the flood of alerts in the system cause the screen reader to throttle this.  @alexandrudima maybe you can comment how often the alert is being triggered from the editor?
17725|@joaomoreno  the modified date/time is from when I ran the workaround...I didn't save a copy of the eariler one.  (in fact, it could be that I had an old version as this wasn't on my main work machine). As requested: [Info.zip](https://github.com/Microsoft/vscode/files/221162/Info.zip)
17726|I can reproduce. @aeschli could this be a regression from theme work? The output mode applies tokens like `token error-token output Log` and these do not get coloured anymore.
17727|More tokens are outlined here: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/common/outputMode.ts#L32
17728|@be5invis ok thanks!
17729|+1
17730|@otbe: from the error message however it is clear that the file we are opening in the tsserver doesn't match the file name when asking for code complete. That is why the server response with no project info.  You can debug the tsserver by setting the env variable TSS_DEBUG to a port number. For example TSS_DEBUG=5859. Then you can attached a debugger like node inspector to the running server. I will think about what could cause this on Mac. I also will test you workspace on Linux which is case sensitive as well.
17731|"`fileName` and `path` differ and `defaultProject` is undefined...  <img width=""1213"" alt=""bildschirmfoto 2016-04-15 um 16 50 37"" src=""https://cloud.githubusercontent.com/assets/3391052/14565201/3b8febe8-032a-11e6-88e1-33ca40bdc059.png"">  This may be the root cause: <img width=""954"" alt=""bildschirmfoto 2016-04-15 um 17 02 07"" src=""https://cloud.githubusercontent.com/assets/3391052/14565525/d5632202-032b-11e6-9ffb-22a92cd8dcbb.png"">  And [this](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/sys.ts#L415) is a bit optimistic in my opinion :)  ``` const useCaseSensitiveFileNames = platform !== ""win32"" && platform !== ""win64"" && platform !== ""darwin""; ```"
17732|VS code is great editor. But no one want this localization feature.  First of all, VS code should just stop localize command names.
17733|The suggestions for intelliSense being an alert was actually a bit of a hack because of a chromium bug that in the last few days has seen a few improvements, so we may be able to take those out soon. When I was in Redmond last week I did a demo for some of the on-sight folks and ran into the general issue of sometimes losing track of where I am in the program. Does this toolbar belong to the explorer or the editor? Is this treeview attached to toolbar A or toolbar B?  How do I quickly go to the working files list?  This led me to the idea of making regions you can cycle between using a hotkey. For example, using the f6 hotkey in Windows Explorer jumps you from the address bar, to the treeview of folders, to the searchbox etc. I think this will be a very welcome addition to Code's accessibility layer as well, and it would solve the alert problem too. You can just jump to the region that holds the alert and get the keyboard focus to go there. This way a user can read the alert whenever they want to (the disadvantage of role-alert is that once it's spoken once you can't really get it back unless you trigger it again), get to the actionable controls and you make Code about 3 times easier to navigate as well. I realize this is a separate thing altogether but it does solve this particular issue as well once implemented I think. Any thoughts?
17734|This works in 1.0.0
17735|Well but how do you get aware of the fact that there is an alert?
17736|That is a trickier one. As I said, the alert only really shows up once. I guess the only thing we can do if we go with the idea I just came up with is notify the alert is there and get the user to manually move to its region once they need it. The problem with that approach is that a user might miss the notification and won't know the alert is there ...I briefly considered a small 'blip' sound to let a user know an alert has popped up but I'not sure how spammy that would be with the amount of alerts we are currently using. Do any of you have ideas for this one? :)
17737|@bpasero I'm also doing all my development with `sshfs` on Mac OS X and I can confirm it does not support the system-wide Trash feature (I don't know why and I've never really needed it.)  In Sublime it works similarly as VSCode:  1. Dialog to confirm delete operation 2. Dialog to confirm permanent delete  The **_crucial**_ difference is that in Sublime both dialogs are modal, meaning that you can confirm with Enter and cancel with Esc.   In VSCode only 1. is modal, while 2. is a notification bar, with no obvious way to confirm or cancel the operation from the keyboard.  It would be better if 2. was modal too, because there's no reason to postpone the choice whether to really delete or not (it's not like the Trash might magically reappear) and one should to be able to do so with Enter / Esc.  Moreover, if you could add an option to skip dialog 2. when Trash is not available, that would be helpful for those of us who regularly use filesystems that don't support trash.
17738|@mohsen1 Have you done any work in this regard yet?
17739|Ok so the issue is that the alert is there but then another thing triggers another alert and so our alert gets lost. We could maybe introduce more than one alert container but I am not sure what this means.  Until then I suggest to not abuse the alert as we do it now. @alexandrudima what do you think?
17740|"Here is the contents of my Info.plist. I should note that this was recent download, like 2 weeks ago.  ``` <?xml version=""1.0"" encoding=""UTF-8""?> <!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""> <plist version=""1.0"">   <dict>     <key>BuildMachineOSBuild</key>     <string>14B25</string>     <key>CFBundleDisplayName</key>     <string>Code</string>     <key>CFBundleExecutable</key>     <string>Electron</string>     <key>CFBundleIconFile</key>     <string>Code.icns</string>     <key>CFBundleIdentifier</key>     <string>com.microsoft.VSCode</string>     <key>CFBundleInfoDictionaryVersion</key>     <string>6.0</string>     <key>CFBundleName</key>     <string>Code</string>     <key>CFBundlePackageType</key>     <string>APPL</string>     <key>CFBundleShortVersionString</key>     <string>0.10.11</string>     <key>CFBundleVersion</key>     <string>0.10.11</string>     <key>DTSDKBuild</key>     <string>14D125</string>     <key>DTSDKName</key>     <string>macosx10.10</string>     <key>DTXcode</key>     <string>0640</string>     <key>DTXcodeBuild</key>     <string>6E35b</string>     <key>LSApplicationCategoryType</key>     <string>public.app-category.developer-tools</string>     <key>LSMinimumSystemVersion</key>     <string>10.8.0</string>     <key>NSHighResolutionCapable</key>     <true/>     <key>NSMainNibFile</key>     <string>MainMenu</string>     <key>NSPrincipalClass</key>     <string>AtomApplication</string>     <key>NSSupportsAutomaticGraphicsSwitching</key>     <true/>     <key>NSHumanReadableCopyright</key>     <string>Copyright (C) 2015 Microsoft. All rights reserved</string>     <key>CFBundleDocumentTypes</key>     <array>       <dict>         <key>CFBundleTypeName</key>         <string>Visual Studio Code document</string>         <key>CFBundleTypeRole</key>         <string>Editor</string>         <key>CFBundleTypeOSTypes</key>         <array>           <string>TEXT</string>           <string>utxt</string>           <string>TUTX</string>           <string>****</string>         </array>         <key>CFBundleTypeExtensions</key>         <array>           <string>ascx</string>           <string>asp</string>           <string>aspx</string>           <string>bash</string>           <string>bash_login</string>           <string>bash_logout</string>           <string>bash_profile</string>           <string>bashrc</string>           <string>bat</string>           <string>bowerrc</string>           <string>c</string>           <string>cc</string>           <string>clj</string>           <string>cljs</string>           <string>cljx</string>           <string>clojure</string>           <string>cmd</string>           <string>coffee</string>           <string>config</string>           <string>cpp</string>           <string>cs</string>           <string>cshtml</string>           <string>csproj</string>           <string>css</string>           <string>csx</string>           <string>ctp</string>           <string>cxx</string>           <string>dockerfile</string>           <string>dot</string>           <string>dtd</string>           <string>editorconfig</string>           <string>edn</string>           <string>eyaml</string>           <string>eyml</string>           <string>fs</string>           <string>fsi</string>           <string>fsscript</string>           <string>fsx</string>           <string>gemspec</string>           <string>gitattributes</string>           <string>gitconfig</string>           <string>gitignore</string>           <string>go</string>           <string>h</string>           <string>handlebars</string>           <string>hbs</string>           <string>hh</string>           <string>hpp</string>           <string>htm</string>           <string>html</string>           <string>hxx</string>           <string>ini</string>           <string>jade</string>           <string>jav</string>           <string>java</string>           <string>js</string>           <string>jscsrc</string>           <string>jshintrc</string>           <string>jshtm</string>           <string>json</string>           <string>jsp</string>           <string>less</string>           <string>lua</string>           <string>m</string>           <string>makefile</string>           <string>markdown</string>           <string>md</string>           <string>mdoc</string>           <string>mdown</string>           <string>mdtext</string>           <string>mdtxt</string>           <string>mdwn</string>           <string>mkd</string>           <string>mkdn</string>           <string>ml</string>           <string>mli</string>           <string>nqp</string>           <string>p6</string>           <string>php</string>           <string>phtml</string>           <string>pl</string>           <string>pl6</string>           <string>pm</string>           <string>pm6</string>           <string>pod</string>           <string>pp</string>           <string>profile</string>           <string>properties</string>           <string>ps1</string>           <string>psd1</string>           <string>psgi</string>           <string>psm1</string>           <string>py</string>           <string>r</string>           <string>rb</string>           <string>rhistory</string>           <string>rprofile</string>           <string>rs</string>           <string>rt</string>           <string>scss</string>           <string>sh</string>           <string>shtml</string>           <string>sql</string>           <string>svg</string>           <string>svgz</string>           <string>t</string>           <string>ts</string>           <string>txt</string>           <string>vb</string>           <string>wxi</string>           <string>wxl</string>           <string>wxs</string>           <string>xaml</string>           <string>xml</string>           <string>yaml</string>           <string>yml</string>           <string>zsh</string>         </array>         <key>CFBundleTypeIconFile</key>         <string>code_file.icns</string>       </dict>     </array>   </dict> </plist> ```"
17741|Thank you @d4rkr00t for that PR! :heart: This has been bugging me for a long time and is the only remaining reason VS Code is not my main editor yet. I tried to articulate this in #2343 as well.  I really hope this gets merged soon.
17742|Upon further review I think my note belongs as a new issue.
17743|The problem went away on its own after upgrading to 1.0
17744|Hi **@bshokeen**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
17745|I love this idea. Lack of template coloring is one of the main reasons I kept using `WebStorm` over `Visual Studio Code` for some projects.
17746|@djabraham no. Never found the time to do this
17747|VSCode is getting an empty callstack from node debug, forwarding to @weinand   I can also debug our nodeDebug next week to drill deeper.
17748|@isidorn I verified them on commit [8ca1f811dff7e2120b58c29463483b7f5a00b81a](https://github.com/Microsoft/vscode/commit/8ca1f811dff7e2120b58c29463483b7f5a00b81a)  Should I run through them again today?
17749|+1
17750|No, we should not test them more now. When we create `testplan-item` our intention is to test them in the endgame week so we are sure the feature works as expected once we shipe them to the user. More details about our development process can be found [here](https://github.com/Microsoft/vscode/blob/master/wiki/project-management/development-process.md)
17751|"@isidorn that's weird, I even checked [code.visualstudio.com](//code.visualstudio.com), but somehow I totally overlooked the ""Tab and Space Indentation"" section."
17752|"@bpasero do you think this should be called ""Reopen closed working file"" instead to clarify how it works?"
17753|Apparently the flag works, but not documented in https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md
17754|Thanks @mquandalle, I've been wanting this for a while! :fireworks:
17755|"I agree that a read-only mode that can be toggled would be super useful, though I would prefer it to be a temporary state, and apply just to the current open document. So maybe it could work as haibison says when applied at a folder level, but be a temporary state when applied at an individual file level?  For me, something like an ""editor.action.ToggleReadOnly"" shortcut would be great. That would disable edits, and prevent saving of the currently open file. Ideally it would have some sort of obvious visual indicator as well, so if it's toggled accidentally the user will understand why they can't make changes."
17756|Related https://github.com/Microsoft/vscode/issues/4679
17757|@dbaeumer is `lang` on `html` going to be set to the correct language in https://github.com/Microsoft/vscode/issues/3841 ? It would be nice to utilize the `:lang` pseudo-class for this as mentioned in https://github.com/Microsoft/vscode/issues/5260#issue-148417433
17758|Uploaded project at https://github.com/v-pavanp/ForTestingCode/commit/551ea09f84ac6ce9af2770271d362d413faa34c0   Setup instruction: 1. Follow instruction from http://expressjs.com/en/starter/installing.html 2. Open app.ts and add break point at LN 10, 13, 14 and start debugging. 3. Verify app behavior.
17759|Yes @bgse you're correct, you can see https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005 for a detailed write up on the issue.
17760|"Thank you @coe-jeubanks   I often review code, so I think making that option persistent across restarts is useful. But you and other people might like it as a temporary switch. So my idea to dev team is maybe we could have an option to switch between ""persistent"" and ""temporary"" modes?  One scenario is when opening multiple files at a time: read-only option should be ""remembered"", or the code reviewer will have to manually mark those files read only one by one. It sounds simple, but I used to work with [Geany](http://geany.org) -- which has read only mode. When doing so (opening multiple files, then switching to each tab to mark the file read-only), and doing so every day, it feels that a switch would help me a lot."
17761|Yes, the error-token rules got removed. Feel free to add it again to token.css
17762|Looks like it's actually https://github.com/Microsoft/TypeScript-TmLanguage/issues/81, just on a worse scale because of the brackets. Closing as duplicate.
17763|This issue was moved to Microsoft/vscode-docs#272
17764|So, this was a silly question. My logging mechanism also failed due to the null value and so was not able to capture it. It returns null when the editor is closed.
17765|I am also facing the same problem
17766|"So when you're in ""code review mode,"" you don't need to have any other files open for editing at the same time (taking notes, etc.)? That was why I thought a read-only at the folder level would work for you--you could put all of your files you are reviewing into one folder, and open that folder in Code, marking it (perhaps permanently) read-only. Then you'd still be able to create and save documents into other folders at the same time you are reviewing the read-only files. Below is a mock-up of what I mean. In my example, all of the folders except Notes are toggled to read-only, and you could individually set files in Notes temporarily to read-only if you want to review them. Yet you would still retain the ability to create and update other files in Notes.  ![vs_ro_mockup](https://cloud.githubusercontent.com/assets/10637809/14572774/9ff4937e-0305-11e6-8693-fb6e1cec27e6.png)  My typical use for read-only is when I'm editing one file and need to have a second one open for comparison or reference, but I don't want to inadvertently make any changes to the reference file. I used to use [UltraEdit](http://ultraedit.com/), which has a toggle-able read-only option for an open file.  I do hope they can create an enhancement that meets both of our needs!"
17767|To be honest, one of the defining features of VS Code for me was an absence of tabs. I didn't even realise (at first) that they were missing! It was a very interesting point of view.  Whenever I use tabs, they always get clattered and impossible to find. When I can't see a certain file immediately in the list of tabs, my first reaction is to reopen it. . . and then I would find out that it was already opened. Of course the order of tabs gets seriously messed up in the process. This is what happens to me in Visual Studio 2015.  In the world of everything being the same, it feels refreshing to have an identity.  PS. I am not very impressed with the working files section, however. I mostly use it for quickly viewing which files require saving.  PSS. An idea - if there are tabs in vs code one day, then maybe it will be the best to limit the maximum number of opened tabs, i.e. close oldest tabs automatically when new are opened?
17768|nice catch!  I have to find the URLs for each language...
17769|Just encountered this also. The code runs fine on `tsc` but error on vscode (`ts language service`). Here is how to reproduce:  ``` ts // s.ts export class Foo {}  // m.ts import { Foo } from './s'; declare namespace Foo { }; export = Foo;  // c.ts import * as Foo from './m';  console.log(Foo); ```  ![image](https://cloud.githubusercontent.com/assets/3254987/14574542/1a0e1bca-0311-11e6-9dc9-27838f267675.png)
17770|Reference:  https://github.com/typed-typings/npm-any-promise/pull/1
17771|I tested this on Windows.  Code: 1.0  :tada:  Also tested with TypeScript@next using `settings.json/typescript.tsdk`: `1.9.0-dev.20160415`
17772|Tried running from sources. Still the same problem.  Is it related to https://github.com/atom/atom/issues/11147
17773|I'm not sure whether other race conditions exist. I would expect the handler for the `STOPPED` event to wait if there are any pending thread updates.  I guess the `STOPPED` event could query for all the threads and update the model.  ---  Why is the `THREAD` event required, and not just have VSCode query for all the threads and update its model on a `STOPPED` event? I don't see the threads being used other than when the VSCode is in break mode.
17774|+1
17775|@bpasero I apologize, I should've mentioned, it's using the following extension from Microsoft: https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools  Attached is a screenshot of this, highlighted in red at the bottom.  ![vs_code](https://cloud.githubusercontent.com/assets/7064045/14576321/ea90d7b4-031c-11e6-8667-05aae5dc4f93.png)
17776|@joaomoreno not open-source unfortunately. The repo has >50k files, git v2.7.1 on OSX.
17777|+1
17778|ES: https://www.visualstudio.com/es-es/dn948229 FR: https://www.visualstudio.com/fr-fr/dn948229 DE: https://www.visualstudio.com/de-de/dn948229 RU: https://www.visualstudio.com/ru-ru/dn948229 ZH-CN: https://www.visualstudio.com/zh-cn/dn948229 ZH-TW: https://www.visualstudio.com/zh-tw/dn948229 JP: https://www.visualstudio.com/ja-jp/dn948229 KO: https://www.visualstudio.com/ko-kr/dn948229 IT: https://www.visualstudio.com/it-it/dn948229
17779|@jrieken Thanks for your suggestion  I will be using it, until the new API be available.
17780|+1
17781|Hi **@nadako**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
17782|Hmm, it can be improved by adding endLine and endColumn, I'll close this for now.
17783|"@RussBaz I don't think that limiting the number of tabs is a good idea because that number can change from user to user but maybe this can be an option something like this:  tabs.autoClose = ""not-visible"", ""off"", ""time"", x where x is a number"
17784|Hi **@nadako**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
17785|That's a weird idea. If I like 16 tabs and you like 4, it's simple. YOU use 4 tabs and I'll use 16!  Why say your way is better than mine, or vice versa. What is this about anyway? Even the conversation about tabs is kind of pointless as long as tabs are activated/deactivated in Options/Preferences. Those who don't want tabs, GREAT!  Those who want them, check the little checkbox! Really, it does not have to be that your way is better than mine, or that I know better than you. +1   ;)
17786|Use case example: I currently switch between 6 tabs constantly in atom.   That grows to around 10 when I need to work on deeper sections. I use them all! So closing and reopening would be a pain. I could have massive files in its place but that would be far far more painful to deal with as then it would balloon to 6k lines in a file if I included every part of a module into a single file.
17787|The internal console doesn't show color set by the popular `colors` package.    https://www.npmjs.com/package/colors    It works on the external console.  Is there a way to make this work?
17788|Oh, and while we're at it, Haxe reports 1-based lines, however characters are 0-based byte offsets (it doesn't deal with file encodings at the moment). I know it's a little crazy, but would it make sense for VS Code to support setting whether line/column numbers are zero-based or 1-based in problem matchers? I wouldn't be surprised if other compilers/tools are reporting differently too.
17789|+1  OS Version: Windows 10
17790|@bpasero ,  I noticed in the video where you were trying to reproduce it that you were using a dos window.  both @dchw and I are using a git bash window.  There are several of us here that experience this problem and we are all using git bash (or some other bash shell) on Windows.  The bash environment is likely a factor.
17791|@Measuring I agree and disagree with you. There are somethings that need innovating but first one has to ask, what about the workflow can we make better by removing tabs. Well for me, every single editor I use for development has a tab interface because it is common for a develops to work between 5-10 files at a time without remembering the exact name of the files nor the order they are opened them in. So I have to ask, how did this new interface make it any better? How is it innovative? First ask, how do they they use it, then ask, how can I make it better.   As for the three minute issue, I am going to assume that Code is not that much different then Sublime (my preferred choice) or Atom (what I am trying out), but if right from the start I struggle to work with it or show someone efficiently what they need to do between files to make something work, then I will use something that works better for my needs now and look into Code a few versions down the road when it is ready. It's not 'old-school' mind set but rather efficiency with my work.
17792|"Asking those of us who prefer tabs to switch to no tabs is just as good as asking those who prefer no tabs to switch to tabs. We both don't want to switch to the other method.  Can we stop now with the 'Mac vs Windows',  'Android vs IPhone' type of debates as to which way is better: 'Tabs vs No Tabs'? They are both good and different people have their own preference.  I think the best solution is to add tabs as a preference that can be enabled optionally.  Then both crowds are pleased.  Is anyone against having both methods as options that you can turn on or off depending on your preference?  I think it comes down to these two options:  1) Add tabs as a preference. On for those who like it and off for those who don't.  2) Don't add tabs at all, even if I have the option to turn them off.  Why would you even vote for option 2 when you have the option to turn them off? On Apr 15, 2016 7:32 PM, ""James McLaughlin"" notifications@github.com wrote:  > @Measuring https://github.com/Measuring I agree and disagree with you. > There are somethings that need innovating but first one has to ask, what > about the workflow can we make better by removing tabs. Well for me, every > single editor I use for development has a tab interface because it is > common for a develops to work between 5-10 files at a time without > remembering the exact name of the files nor the order they are opened them > in. So I have to ask, how did this new interface make it any better? How is > it innovative? First ask, how do they they use it, then ask, how can I make > it better. As for the three minute issue, I am going to assume that Code is > not that much different then Sublime or Atom and if right from the start I > struggle to work with it or show someone efficiently what they need to do > between files to make something work, then I will use something that works > better for my needs now and look into Code a few versions down the road > when it is ready. >  > — > You are receiving this because you commented. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-210705545"
17793|@tones411 Some people will pick option 2 just because they think that the addition of tabs will somehow ruin their experience with the working files.  _I can't stress it enough_ but in my opinion the discussion shouldn't be about just adding tabs and call it a day but getting the workflow right and I said it many times, meaning, it needs the right options for customization, it needs to feel integrated and not alienated and still optional! same goes for the working files.  Some people may want to have something like Vim buffers and wouldn't want to have neither tabs nor working files at all.  Maybe something like Vim buffers can be used as the surface for VSCode where we can use commands to manage files and then on top of that lay the foundations for each workflow whether it's tabs, working files or another thing tomorrow.
17794|"Well said. This has turned into a religious debate. It is obvious from this long thread that there are many people here that are passionate about having tabs and believe they are needed / facilitate their workflow. There are others who do not believe tabs are necessary and that they are an impediment.  Let's just agree to disagree, that's fine. As long as tabs are optional than those who don't want them don't have to use them.  I personally believe they are useful, but I am not going to stop someone from using working files if that works for them. It doesn't work for me. On Fri, Apr 15, 2016 at 10:07 PM tones411 notifications@github.com wrote:  > Asking those of us who prefer tabs to switch to no tabs is just as good as > asking those who prefer no tabs to switch to tabs. We both don't want to > switch to the other method. >  > Can we stop now with the 'Mac vs Windows', 'Android vs IPhone' type of > debates as to which way is better: 'Tabs vs No Tabs'? They are both good > and different people have their own preference. >  > I think the best solution is to add tabs as a preference that can be > enabled optionally. Then both crowds are pleased. >  > Is anyone against having both methods as options that you can turn on or > off depending on your preference? >  > I think it comes down to these two options: >  > 1) Add tabs as a preference. On for those who like it and off for those who > don't. >  > 2) Don't add tabs at all, even if I have the option to turn them off. >  > Why would you even vote for option 2 when you have the option to turn them > off? > On Apr 15, 2016 7:32 PM, ""James McLaughlin"" notifications@github.com > wrote: >  > > @Measuring https://github.com/Measuring I agree and disagree with you. > > There are somethings that need innovating but first one has to ask, what > > about the workflow can we make better by removing tabs. Well for me, > > every > > single editor I use for development has a tab interface because it is > > common for a develops to work between 5-10 files at a time without > > remembering the exact name of the files nor the order they are opened > > them > > in. So I have to ask, how did this new interface make it any better? How > > is > > it innovative? First ask, how do they they use it, then ask, how can I > > make > > it better. As for the three minute issue, I am going to assume that Code > > is > > not that much different then Sublime or Atom and if right from the start > > I > > struggle to work with it or show someone efficiently what they need to do > > between files to make something work, then I will use something that > > works > > better for my needs now and look into Code a few versions down the road > > when it is ready. > >  > > — > > You are receiving this because you commented. > > Reply to this email directly or view it on GitHub > > https://github.com/Microsoft/vscode/issues/224#issuecomment-210705545 >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-210712143"
17795|+1
17796|Hi **@outcoldman**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
17797|Any news on this matter?
17798|"I have been following this thread for the last ~month or so since I switched to Code as my main editor and am continually annoyed by the file navigation behavior. I have spent time _trying_ to get used to the Working Files section, which you admit is more-or-less an afterthought anyway, and Ctrl+Tab, and Ctrl+P. I am super happy with Code and it's easily my favorite editor, but these file navigation options are so poorly conceived it's hard to understand how they were thought up in the first place.  Most of these have been mentioned, but here are my gripes:  The WF list is essentially useless, as closing an editor window does not actually close the file from WF. I need to actually close a file _twice_, and use the mouse to do so (Ctrl+W _and_ close the file from WF panel). If I wanted to leave the file open, I wouldn't have pressed Ctrl+W - how does it make any sense to press Ctrl+W and leave a file ""open"" (visible in WF). Yes this can be reassigned, but I'm talking about the default behavior of WF).  Clicking a file in WF or tree view opens a file into an undesired editor window at least half of the time. If you have a two-panel editor with active left panel, ""open to the side"" opens it in the _right_ panel, not a _new_ panel, and with 3 columns it will always open in an existing panel. The problem here is that ""things don't stay where I put them."" I expect to tell my editor where I want things to be, not for my editor to decide where things should be based on the current UI state and then change them as the UI state changes in other parts of the application. Getting _back_ to a previously opened file is **such a PITA**.  Single-clicking and double-clicking files has _completely different_ behavior with _exactly the same_ UI. A single click opens the file preview temporarily (for when I dont want to load it into WF because then it will require two closes to get rid of later), but loading a ""previewing"" editor with another file (unavoidable with current implementation as mentioned above) will jump the folder tree to a new spot, and loading the previous ""preview"" file means I must again navigate to the folder in the tree view. I don't even want to admit how much time I have spent navigating to the _exact same folder_ 6 times in a row because of this behavior.  In my opinion, single or double clicking a file should give me the _exact same behavior_, but if you really want a single click ""preview"" that doesn't show up in WF / Ctrl+Tab, there should be an _obvious UI marker_ that the active editor window is a preview and will be gone when you replace it.  The folder tree should _not_ jump to the location of every file I click into, or when I am debugging, jump through every folder in my library folder. If I wanted to navigate to a particular folder, I would navigate to it, and once I've done that I expect it to stay that way. This might seem like its not so relevant in the tabs thread, but indeed it is.,  The only reason these absolutely ridiculous editor panel, WF and folder view behaviors exist is _because there are no tabs_. If you add tabs (docked to a particular panel if the editor panels are split), and default to the normal editor behavior which is to _always open everything in a new tab_, none of that behavior is necessary. Just let me decide how I want to navigate my tree and how I want to stack my tabs, and stop trying to show me a ""better way"" (unless you actually _have_ a better way - after ~6 months of daily work, I can say with absolute certainty that the current way is _not_ better for me).  And while you're at it, for the love of God **PLEASE** let me view files from the same directory in more than one window! There is a simple and elegant solution, which every other tab-based software has had for years - drag the tabs off into a new window - seriously folks this is not revolutionary stuff. If you want to maintain the ""one folder only gets one instance"" behavior, then have the panels float into a new window (that is still controlled by / attached to the main window).  You guys have done an awesome job with this editor and I will continue to use it. If we can see: 1. Tabs 2. Disable WF 3. Stop auto-navigating folder tree 4. Ripoff tabs into floating editor panel (that shares all same behavior as other editor panel in main interface)  Then I think VS Code will go far, far, far. Great editor, and I'm willing to put up with the downsides to take advantage of the rest, but many, many others are just waiting for these few basic features.  I would love to help with UI/UX testing or whatever it is you do for user feedback/input. Let me know if I can be of service.  Thank you!"
17799|Related #4679   Chinese solution is written #5298
17800|Yes, this is reproducible after restarting. Yes, this is a brand new install. No, the disk is not full, 30 GB free.  Thank you, --Stephen  On Fri, Apr 15, 2016 at 12:08 AM, João Moreno notifications@github.com wrote:  > Does this repro after a restart? Are you installing it brand new or on top > of an existing installation? Is your disk full or close to full? >  > — > You are receiving this because you authored the thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5285#issuecomment-210319390
