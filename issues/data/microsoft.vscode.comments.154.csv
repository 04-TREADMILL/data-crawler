15301|Browsing the source without having any idea how it is organized, https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/env.ts looks really suspicious (run `$SHELL -ilc env`, split output by lines).
15302|"I think I've found the underlying issue. I reproduced this on Ubuntu: 1. Export a multi-line environment variable  ``` ❯ export TEST_ENV_VAR=""multi-line string"" ``` 1. Launch code and inspect `process.env` in dev tools: `TEST_ENV_VAR=""multi-line""`"
15303|@mtrmac that looks like it's it! I was suspecting somewhere `env` was being split by `\n`.
15304|This is some nice coincidence, I noticed this today as well and fixed for post-GA release: https://github.com/Microsoft/vscode/issues/4643
15305|@bpasero: Great minds think alike :+1:
15306|Got a fix working on Ubuntu & Fedora! Thanks @mtrmac @pflannery for the help :fireworks:
15307|@bpasero I haven't been on samba in a while editing stuff. Let me try again and then I'll upload the log I find.
15308|@egamma @seanmcbreen, I think we might need this to be picked into the GA release
15309|"@PeterMtj Seriously? that's how you approach things? curse people? if you don't have respect for him then have some respect for yourself!  @jon64digital He can vote down or say his personal opinion and that's fine! we don't need to get personal and certainly not curse people for their opinions!  I disagree with his initial response too, saying ""No"" is not professional and quite rude in my opinion but I think that the community can do better and stay civilized regardless to people's opinion.   > People use Microsoft software mostly because they have to , rarely because they like it, and when you see that Microsoft staff have attitudes like his it just goes to show why they can't design a decent piece of software like Sublime Text. I have tried my hardest with VS Code but I am very close to uninstalling it.  **Edit:** People don't have to use Microsoft products! I certainly do not have to do that and saying that people do that rarely because they like it, it's just trash talking! Microsoft make some great products and great technologies and I'm far from being a fan of everything they do but they certainly do some things right! no one forces anyone to use VSCode and if someone forces you to use VSCode then he/she should be fired because you need to choose your own tools! the only thing an employer should care about is your job not how it's done!  Let's not turn this into a flame war and keep it constructive, please!"
15310|"@joaomoreno   I was not able to get the prompt.  I'm heading out on vacation, can you please ask someone else to verify?  Sorry about this.  Here is what I did. - Downloaded the current released Insiders release (commit ef2a) - Started it, set updateChannel to ""none"", closed it down - Downloaded the latest Insiders build (commit ba06) - Edited Contents/Resources/app/package.json:   ``` json ""version"": ""1.0.0-insider"", ``` - Started this version of Insiders and was warned by the OS that the app was corrupted - Deleted the app, extracted it again - Ran it one time, closed it down - Edited package.json (as above) - Ran it again  Result -> No prompt"
15311|Hi **@JonathanMEdwards**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
15312|"If Windows had a great terminal and shell, would this be an issue?  I suspect those who posted above saying ""I don't need this"" might be Mac and Linux users :-)"
15313|"Tried adding `Icon: <icon>.xpm` to the spec file as per http://www.rpm.org/max-rpm/s1-rpm-inside-tags.html but it didn't seem to show the icon in Fedora or CentOS' ""Software Installer"". I also looked through some other applications rpm files and they didn't seem to have the Icon tag."
15314|"It would be great if we could give a json config directly, something like this:  ``` js workbench.action.debug.start('{             ""name"": ""LaunchCustom"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/index.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": null,             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null         } '); ```  And some events like:  ``` workbench.action.debug.onDidStart((launchName)=>{}); ```  ##   ``` workbench.action.debug.onDidStop((launchName)=>{}); ```"
15315|@TimTheTinker it is possible on windows to vertically split a console (of choice) with most apps (including vscode) using [conemu](http://conemu.github.io/) on windows  ![image](https://cloud.githubusercontent.com/assets/1727302/14034904/d72de508-f21f-11e5-9d06-bc74b69a824b.png)  I personally use Windows 10 but don't really need an integrated terminal. `ctrl+shift+c` is currently my preference
15316|I am already reinstall windows, and the problem is resolved
15317|We definitely need this. I'd like to copy / paste formatted code into PowerPoint presentations.
15318|Guys I'm still having the same problem. I've tried all the answer you gave and still can't run dnx:restore from VScode.  this is what i got from **dnvm list -detailed**  ``` Active Version              Runtime Architecture OperatingSystem Alias Location       * 1.0.0-rc1-update1    coreclr x64          darwin          default ~/.dnx/runtimes        1.0.0-rc1-update1    mono                 linux/osx             ~/.dnx/runtimes ```
15319|"I'm having a similar problem, but it's with brackets inside of quotation marks. In my file, I have fprintf(fp, ""some stuff""); It doesn't highlight the string at all. But if I put fprintf(fp, ""{some stuff}""); then it highlights starting at the closing quotation mark down through the rest of the file. Shown in the attached screenshot. It happens with any of an opening, closing, or matching brackets. ![vscodebug](https://cloud.githubusercontent.com/assets/3268813/14035605/8b22e460-f1ed-11e5-866e-50c58cf8d959.PNG)"
15320|"@eyalsk   I wasn't trying to start a flame war, or talking trash, but I 100% stand by what I said. MS have historically tied their own products to their OS and to each other to force people to use their software because they know it's not good enough to stand on it's own. I know plenty of people who have to use MS Office at work, I've had to use Visual Studio before because I had no other choice and I could count the number of people who would voluntarily use Internet Explorer on the fingers of one hand. They've even been the subject of anti-trust suits because of these practices, so to say that nobody is making anybody use MS software is naive.  Things have moved in the right direction recently and they're becoming more platform agnostic and trying to make their software interop better with others. I'm sure there are good people at MS trying to make great software and giving people what they want, but bpasero clearly isn't one of them. His closed minded attitude is not a credit to them and I thought it was funny that @PeterMtj called him out in that way. We're all adults here and nobody should be offended by the odd swear word. It's just a word.  You've got a long thread here with hundreds of people telling MS EXACTLY what they want out of a code editor. It's not as if they don't know what we want. Then we have an MS employee on here saying ""no, you're basically all wrong"". Doesn't that paint a picture of a company not exactly in tune with their audience?  Just my 2c."
15321|Sometimes I need to open several windows of my IDE with different project and instances of terminal. Having a lot of additional instances of terminal and set a proper path for each of them is a wasting time. Manually position OS terminals(Linux and Mac) is also wasting time compare to simple Ctrl+F12 switching on/off, for example.  Not everyone got used to that, so it can be as a separated package, but it should definitely be there.
15322|@pflannery - interesting, thanks for sharing. Conemu notwithstanding, I wonder if the above feature requesters are all on Windows, and if so, whether they would be content without a VSCode-integrated terminal if (the UX equivalents of) iTerm2 and gnu bash were available on Windows.
15323|"@jon64digital   > I wasn't trying to start a flame war, or talking trash, but I 100% stand by what I said. MS have historically tied their own products to their OS and to each other to force people to use their software because they know it's not good enough to stand on it's own.   That's just your bias assumption and I respect that but we can say the exact same thing about any other corporation in the world to name a few Apple, Oracle and Google...  > I know plenty of people who have to use MS Office at work,   People aren't forced to use MS Office, that's the decision of the employer, Libre office is a great product and it's quite good alternative.  > I've had to use Visual Studio before because I had no other choice  I don't know _why_ you had no choice but you definitely have choices today! I always had a choice even when people used Visual Studio heavily for .NET development I used SharpDevelop, Vim and Notepad++, I never had problems using multiple editors, I'm not a fan of designers anyway...  For C/++ you have even more support from editors and IDEs unless you use VC++ :)  Besides, I never understood why some people are locking themselves to a specific stack of technologies made by X, there are many technologies out there beyond say Microsoft.  >  I could count the number of people who would voluntarily use Internet Explorer on the fingers of one hand.  You're right Internet Explorer was very bad up to version 9 but they have improved quite a lot since then and even though I'm a FireFox user, I don't judge Microsoft for their past, I judge them for who they are at the present and it looks good!  > They've even been the subject of anti-trust suits because of these practices, so to say that nobody is making anybody use MS software is naive.  No one is making anybody use anything and I don't know about most people but I'm far from naive, I'm just reasonable.  If your employer makes the choice to use MS technologies, then you are certainly _forced_ but again it's not Microsoft's fault, if you made the choice to use MS technologies then you chose it and complaining about it is a bit silly, there are equivalent technologies that are as good as Microsoft ones so people certainly have choices.  > Things have moved in the right direction recently and they're becoming more platform agnostic and trying to make their software interop better with others. I'm sure there are good people at MS trying to make great software and giving people what they want,  Exactly! even though I don't think that giving people what they want is good from a design standpoint. :)  >  but bpasero clearly isn't one of them. His closed minded attitude is not a credit to them and I thought it was funny that @PeterMtj called him out in that way. We're all adults here and nobody should be offended by the odd swear word. It's just a word.  I don't think we need to define people based on their opinions, certainly not these kind of opinions and being an adult doesn't make people vulnerable to personal attacks of any kind, swearing a person isn't pleasant and should be discouraged, acting as an adult means you can control your rage and write your opinion about someone or something without being offensive.  > You've got a long thread here with hundreds of people telling MS EXACTLY what they want out of a code editor. It's not as if they don't know what we want. Then we have an MS employee on here saying ""no, you're basically all wrong"". Doesn't that paint a picture of a company not exactly in tune with their audience?  That's a fair point and complaint, I'm not saying otherwise! but @bpasero already stated that once they will work on the UX they will tackle this problem too ""_Once we start the UX discussion in the team we would like to involve the community too and we would then also discuss flaws we see in our current design and what we plan to improve._"""
15324|@Tyriar  just the error message. vscode was still running, but just repeatedly dropping the error down. Definitely similar if not a dupe of [#4438 ](https://github.com/Microsoft/vscode/issues/4438)
15325|@Tyriar To clarify. If I hit the reload button, it just happens again. Can't type, or do anything in the app.
15326|Having this would be really nice. Another thing I would suggest, if possible, is to add options to display the error message on the bottom bar (Sublime works that way and it's quite helpful) or maybe activate the tooltip when on the error line or when cursor is over the offending code.  Also, is there any keyboard shortcut to activate the tooltip for these errors? I'm using esLint and I can only see the error when hovering over the text with the mouse (HoverProvider?). I wish I could also activate this via keyboard shortcut.
15327|@rtkhanas You can do all of that now on Windows when running vscode inside [conemu](http://conemu.github.io/) it lets you spawn multiple tabbed terminals along with multiple vscode ide's. Then using the `Open in Command Prompt` command from inside vscode spawns a new tabbed terminal at the current directory of the vscode project.  @TimTheTinker    > I wonder if the above feature requesters are all on Windows, and if so, whether they would be content without a VSCode-integrated terminal if (the UX equivalents of) iTerm2 and gnu bash were available on Windows  Probably. Gnu bash is also available on Windows though not sure how close this comes to the gnu bash that you use. I've not really used iTerm2 I will have to try it out. When I used Dolphin on kde plasma 5 I was very impressed with how the explorer and terminal can be combined together, they even change directory with one another which is super cool.  Would be nice if people that up vote this feature also mention their OS as there could be alternatives that can be used whilst waiting for this extension.
15328|@pflannery I use Mac, not sure there are similar tools for that. Maybe there are, but there are always alternative solutions. However, this one is simple, without installing additional software, specific for each platform.  I think everyone will be satisfied if this feature will look like an additional package.
15329|@eyalsk Yes, that's exactly how I approach this and I won't take it back. I did not offend him as a person. I offended his opinion on this and his crappy alternative to tabs. That's a big difference. If you don't see it, think again.  @jon64digital is right about @bpasero attitude. I don't know what to think about him. Maybe he just want to get rid of work by saying you are wrong and it is not needed. In either way @bpasero probably should not be communicating with community with his attitude. That's my opinion.  Try to realize that Microsoft is not helping us. We are helping Microsoft by using his products and by giving feedback so they can make decent product. This should not be a discussion about defending tabs, but about how tabs should work so it is in nature with vscode. Vscode is for community, that's us and in extreme case if we all would want red dinosaur in the middle of screen they should do it without questioning reasons. We all have our own reasons. Otherwise vscode is useless for community. That's how I see it.
15330|I cannot reproduce, see attached gif of what I see when following the steps.  ![untitled](https://cloud.githubusercontent.com/assets/900690/14040299/50102d50-f266-11e5-979f-736a6f63c75c.gif)
15331|The only issue I do see is that the background window is not coming to the foreground.
15332|@PeterMtj I guess we'll have to agree to disagree. :)
15333|It is needed to have console per open project basic, I have alwasy several projects open and find such terminal in JetBrains webstorm I would say indispensable: ![image](https://cloud.githubusercontent.com/assets/736697/14042737/95f7ac52-f29e-11e5-8467-bb4a421ea729.png)  You may always have several tasks runining related to project (backend server, front dev server, builder/watcher, etc) and it is nice to have it in one window tight together.
15334|"@isidorn It actually became worse. I am testing with 0.10.12-insider and latest 1.5.1 of my extension (same as last demo). - once the new thread comes in, the stack trace for the first disappears - running _one_ thread to the end makes all stack traces disappear as if all threads ended  ![animation](https://cloud.githubusercontent.com/assets/10532611/14044151/623f9692-f28d-11e5-9035-51735bafe19c.gif)  I did the work to get the log again for you:  ``` js <- launchResponse Response {   seq: 0,   type: 'response',   request_seq: 2,   command: 'launch',   success: true } new connection 1 <- threadEvent ThreadEvent {   seq: 0,   type: 'event',   event: 'thread',   body: { reason: 'started', threadId: 1 } } -> threadsRequest { type: 'request', seq: 3, command: 'threads' } <- threadsResponse Response {   seq: 0,   type: 'response',   request_seq: 3,   command: 'threads',   success: true,   body: { threads: [ Thread { id: 1, name: 'Request 1 (1:23:19 PM)' } ] } } <- initializedEvent InitializedEvent { seq: 0, type: 'event', event: 'initialized' } -> setBreakpointsRequest { type: 'request',   seq: 4,   command: 'setBreakpoints',   arguments:     { source: { path: 'c:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\variables.php' },      lines: [ 10 ],      breakpoints: [ { line: 10 } ] } } -> setBreakpointsRequest { type: 'request',   seq: 5,   command: 'setBreakpoints',   arguments:     { source: { path: 'c:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\hello_world.php' },      lines: [ 4 ],      breakpoints: [ { line: 4 } ] } } <- setBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 4,   command: 'setBreakpoints',   success: true,   body: { breakpoints: [ { verified: true, line: 10, id: 51480001 } ] } } <- setBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 5,   command: 'setBreakpoints',   success: true,   body: { breakpoints: [ { verified: true, line: 4, id: 51480002 } ] } } -> setFunctionBreakpointsRequest { type: 'request',   seq: 6,   command: 'setFunctionBreakpoints',   arguments: { breakpoints: [] } } <- setFunctionBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 6,   command: 'setFunctionBreakpoints',   success: true,   body: { breakpoints: [] } } -> setExceptionBreakpointsRequest { type: 'request',   seq: 7,   command: 'setExceptionBreakpoints',   arguments: { filters: [] } } <- setExceptionBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 7,   command: 'setExceptionBreakpoints',   success: true } -> configurationDoneRequest { type: 'request', seq: 8, command: 'configurationDone' } <- configurationDoneResponse Response {   seq: 0,   type: 'response',   request_seq: 8,   command: 'configurationDone',   success: true } <- stoppedEvent StoppedEvent {   seq: 0,   type: 'event',   event: 'stopped',   body: { reason: 'breakpoint', threadId: 1 } } -> stackTraceRequest { type: 'request',   seq: 9,   command: 'stackTrace',   arguments: { threadId: 1, levels: 20 } } <- stackTraceResponse Response {   seq: 0,   type: 'response',   request_seq: 9,   command: 'stackTrace',   success: true,   body:     { stackFrames:        [ StackFrame {           id: 1,           source:             Source {              name: 'variables.php',              path: 'C:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\variables.php',              sourceReference: 0 },           line: 10,           column: 1,           name: '{main}' } ] } } -> scopesRequest { type: 'request',   seq: 10,   command: 'scopes',   arguments: { frameId: 1 } } <- scopesResponse Response {   seq: 0,   type: 'response',   request_seq: 10,   command: 'scopes',   success: true,   body:     { scopes:        [ Scope { name: 'Locals', variablesReference: 1, expensive: false },         Scope { name: 'Superglobals', variablesReference: 2, expensive: false },         Scope {           name: 'User defined constants',           variablesReference: 3,           expensive: false } ] } } -> variablesRequest { type: 'request',   seq: 11,   command: 'variables',   arguments: { variablesReference: 1 } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 11,   command: 'variables',   success: true,   body:     { variables:        [ Variable {           name: '$aBoolean',           value: 'uninitialized',           variablesReference: 0 },         Variable { name: '$aFloat', value: '1.23', variablesReference: 0 },         Variable {           name: '$aLargeArray',           value: 'uninitialized',           variablesReference: 0 },         Variable { name: '$aString', value: '""123""', variablesReference: 0 },         Variable { name: '$anArray', value: 'array(2)', variablesReference: 4 },         Variable { name: '$anEmptyString', value: '""""', variablesReference: 0 },         Variable { name: '$anInt', value: '123', variablesReference: 0 },         Variable {           name: '$nullValue',           value: 'uninitialized',           variablesReference: 0 },         Variable {           name: '$variableThatsNotSet',           value: 'uninitialized',           variablesReference: 0 } ] } } -> variablesRequest { type: 'request',   seq: 12,   command: 'variables',   arguments: { variablesReference: 2 } } -> variablesRequest { type: 'request',   seq: 13,   command: 'variables',   arguments: { variablesReference: 3 } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 12,   command: 'variables',   success: true,   body:     { variables:        [ Variable { name: '$_COOKIE', value: 'array(0)', variablesReference: 5 },         Variable { name: '$_ENV', value: 'array(0)', variablesReference: 6 },         Variable { name: '$_FILES', value: 'array(0)', variablesReference: 7 },         Variable { name: '$_GET', value: 'array(0)', variablesReference: 8 },         Variable { name: '$_POST', value: 'array(0)', variablesReference: 9 },         Variable { name: '$_REQUEST', value: 'array(0)', variablesReference: 10 },         Variable { name: '$_SERVER', value: 'array(61)', variablesReference: 11 } ] } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 13,   command: 'variables',   success: true,   body: { variables: [ Variable { name: 'TEST_CONSTANT', value: '123', variablesReference: 0 } ] } } new connection 2 <- threadEvent ThreadEvent {   seq: 0,   type: 'event',   event: 'thread',   body: { reason: 'started', threadId: 2 } } -> threadsRequest { type: 'request', seq: 14, command: 'threads' } <- threadsResponse Response {   seq: 0,   type: 'response',   request_seq: 14,   command: 'threads',   success: true,   body:     { threads:        [ Thread { id: 1, name: 'Request 1 (1:23:19 PM)' },         Thread { id: 2, name: 'Request 2 (1:23:27 PM)' } ] } } <- initializedEvent InitializedEvent { seq: 0, type: 'event', event: 'initialized' } -> setBreakpointsRequest { type: 'request',   seq: 15,   command: 'setBreakpoints',   arguments:     { source: { path: 'c:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\variables.php' },      lines: [ 10 ],      breakpoints: [ { line: 10 } ] } } -> setBreakpointsRequest { type: 'request',   seq: 16,   command: 'setBreakpoints',   arguments:     { source: { path: 'c:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\hello_world.php' },      lines: [ 4 ],      breakpoints: [ { line: 4 } ] } } <- setBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 15,   command: 'setBreakpoints',   success: true,   body: { breakpoints: [ { verified: true, line: 10, id: 51480003 } ] } } <- setBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 16,   command: 'setBreakpoints',   success: true,   body: { breakpoints: [ { verified: true, line: 4, id: 51480004 } ] } } -> setFunctionBreakpointsRequest { type: 'request',   seq: 17,   command: 'setFunctionBreakpoints',   arguments: { breakpoints: [] } } <- setFunctionBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 17,   command: 'setFunctionBreakpoints',   success: true,   body: { breakpoints: [] } } -> setExceptionBreakpointsRequest { type: 'request',   seq: 18,   command: 'setExceptionBreakpoints',   arguments: { filters: [] } } <- setExceptionBreakpointsResponse Response {   seq: 0,   type: 'response',   request_seq: 18,   command: 'setExceptionBreakpoints',   success: true } -> configurationDoneRequest { type: 'request', seq: 19, command: 'configurationDone' } <- configurationDoneResponse Response {   seq: 0,   type: 'response',   request_seq: 19,   command: 'configurationDone',   success: true } <- stoppedEvent StoppedEvent {   seq: 0,   type: 'event',   event: 'stopped',   body: { reason: 'breakpoint', threadId: 2 } } -> stackTraceRequest { type: 'request',   seq: 20,   command: 'stackTrace',   arguments: { threadId: 2, levels: 20 } } <- stackTraceResponse Response {   seq: 0,   type: 'response',   request_seq: 20,   command: 'stackTrace',  success: true,   body:     { stackFrames:        [ StackFrame {           id: 2,           source:             Source {              name: 'hello_world.php',              path: 'C:\\Users\\felix\\git\\opensource\\vscode-php-debug\\testproject\\hello_world.php',              sourceReference: 0 },           line: 4,           column: 1,           name: '{main}' } ] } } -> scopesRequest { type: 'request',   seq: 21,   command: 'scopes',   arguments: { frameId: 2 } } <- scopesResponse Response {   seq: 0,   type: 'response',   request_seq: 21,   command: 'scopes',   success: true,   body:     { scopes:        [ Scope { name: 'Locals', variablesReference: 12, expensive: false },         Scope {           name: 'Superglobals',           variablesReference: 13,           expensive: false },         Scope {           name: 'User defined constants',           variablesReference: 14,           expensive: false } ] } } -> variablesRequest { type: 'request',   seq: 22,   command: 'variables',   arguments: { variablesReference: 12 } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 22,   command: 'variables',   success: true,   body: { variables: [] } } -> variablesRequest { type: 'request',   seq: 23,   command: 'variables',   arguments: { variablesReference: 13 } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 23,   command: 'variables',   success: true,   body:     { variables:        [ Variable { name: '$_COOKIE', value: 'array(0)', variablesReference: 15 },         Variable { name: '$_ENV', value: 'array(0)', variablesReference: 16 },         Variable { name: '$_FILES', value: 'array(0)', variablesReference: 17 },         Variable { name: '$_GET', value: 'array(0)', variablesReference: 18 },         Variable { name: '$_POST', value: 'array(0)', variablesReference: 19 },         Variable { name: '$_REQUEST', value: 'array(0)', variablesReference: 20 },         Variable { name: '$_SERVER', value: 'array(61)', variablesReference: 21 } ] } } -> variablesRequest { type: 'request',   seq: 24,   command: 'variables',   arguments: { variablesReference: 21 } } <- variablesResponse Response {   seq: 0,   type: 'response',   request_seq: 24,   command: 'variables',   success: true,   body:     { variables:        [ I omit these here because they are not important ] } } -> continueRequest { type: 'request',   seq: 25,   command: 'continue',   arguments: { threadId: 2 } } <- continueResponse Response {   seq: 0,   type: 'response',   request_seq: 25,   command: 'continue',   success: true } <- threadEvent ThreadEvent {   seq: 0,   type: 'event',   event: 'thread',   body: { reason: 'exited', threadId: 2 } } ```"
15335|@weinand Could you tell me when do you plan to release the debugger features you added ? I'm very interested in virtual file sourcemap support.
15336|@Alphapage it will be in an alpha build in the next couple of days. And the final thing in the April build.
15337|Thanks for reverting @weinand, looking at this now.
15338|"The problem with not using `--null` is that multi-line vars can always break the system. Consider the following:  ``` export TEST_ENV_VAR=""Multi LINE=string"" ```  Which is output in `env` or `printenv` as:  ``` TEST_ENV_VAR=Multi LINE=string ```"
15339|Lists all environment variables _names_: `compgen -A variable`  It seems to include additional ones on top of `env` though.
15340|i really need a workaround for this.
15341|"Would you guys expect a confirmation dialog of any kind for this command? Like, ""Are you sure you want to delete this file?"" or no?"
15342|@rhires, what other things do you think would be useful on a right-click there?
15343|@martellaj With destructive operations like delete, I'd say a confirmation dialog should be there.
15344|Good question. Maybe other git info, such as files changed/staged/unstaged. I hadn't thought about it too much. There are a lot of other places I think that right-clicking should produce a useful context menu, but mainly my interest here is to be able to simply copy the name of the branch, since I need that for other tools in other places.
15345|I think it's a good idea. I was just trying to think of what else could be added there. I think including Git file status would be redundant since there's the nice Git tab that shows all of that already.
15346|Sorry thought it was just vscode issue, thanks for your support :bow:
15347|Hard to say ... on one hand, yeah I'd expect to have one, but on the other hand, modal dialogs are evil.
15348|No confirmation but an undo popup might be a nicer UX, especially if it's difficult to trigger the delete by accident. Would probably have to move the file to a tmp directory in order to do this.
15349|This is the only thing keeping me from using VS Code. I'm a bit sad to see this backlogged, but it's irritating enough that I hope it will be a priority.
15350|More simply, it appears that including a trailing space turns off regex matching in all (?) cases.
15351|@weinand This is a great news, I can't wwait. I'm very excited too on how you will give the ability to open the test.js!transpiled because there is no files tree explorer in debug window as far as I know. If the sourcemap redirects to test.js, we need a way to spy test.js!transpiled as in chrome devtools.
15352|:+1:
15353|I am running into this as well. Any guidance?   ``` [Window Title] Visual Studio Code  [Main Instruction] Visual Studio Code  [Content]  Version 0.10.11 Commit f291f4ad600767626b24a4b15816b04bee9a3049 Date 2016-03-11T17:10:35.304Z Shell 0.35.6 Renderer 45.0.2454.85 Node 4.1.1  [OK] ```  ``` node --version v4.3.0 ```
15354|@mholt we have looked into this and found that a root cause of the frustration of intellisense inside comments is that textual completions are accepted to eagerly when you type RETURN. In the [insider build](https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build) we have therefore added support so that you can configure that completions are only accepted on TAB.  https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#intellisense-on-tab-only  Can you please give this a try?
15355|This looks like a problem with one of your installed extensions. I cannot reproduce this error and I get the message that this key combination doesn't bind to a command.  To run without extensions launch code with `--disable-extensions`
15356|OK can you please tell me how to remove the extensions.... i will remove one by one and see where the issue stops
15357|This is fixed in insiders, the advice to create the symlink will be removed as the bin command will be installed via deb/rpm packages.
15358|This could be related If there is any VS Code window is open, new instance resets window size to default. Still there as of 0.10.11.
15359|This should also be implemented to resize the editor panes in the split view. In that case double-clicking would make to panes of equal width.
15360|I wanted to jump in and provide some additional background for this issue. We are just about the wrap-up a major milestone of Code. A key focus for us in the last 6 months was support for accessibility and localization. This has left us no cycles in the UI area to actively work on the Tabs feedback. Now that most of the check boxes on the March plan (#3555) are checked, we are slowly starting to look up again. In April we will ramp up on this topic. @bpasero played a key role in the development of our UX and this will be the next major evolution.  Thanks everyone for your passion and feedback, helping us make VS Code the best product it can be.
15361|TIA for the accessibility additions - will make a big difference for us half-blind  On Sat, 26 Mar 2016, 01:38 Erich Gamma, notifications@github.com wrote:  > I wanted to jump in and provide some additional background for this issue. > We are just about the wrap-up a major milestone of Code. A key focus for us > in the last 6 months was support for accessibility and localization. This > has left us no cycles in the UI area to actively work on the Tabs feedback. > Now that most of the check boxes on the March plan (#3555 > https://github.com/Microsoft/vscode/issues/3555) are checked, we are > slowly starting to look up again. In April we will ramp up on this topic. > @bpasero https://github.com/bpasero played a key role in the > development of our UX and this will be the next major evolution. >  > Thanks everyone for your passion and feedback, helping us make VS Code the > best product it can be. >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-201618115
15362|"@egamma I really thank you and your team for everything, i think you're doing a great job! but I feel like the first response made by @bpasero got people irritated and this could have been avoided if he gave insights to why he thinks tabs shouldn't be an option instead of just saying ""No"".  Anyway, let's focus on the present, is there any new build before the //build/ event? :D"
15363|Accidentally I closed this issue. Re-opened now.
15364|"@eyalsk I believe the ""No"" comment was actually referring to the first reply from @inakianduaga, in that it's not possible to implement tabs using the current extension API. I think this was misunderstood as saying that tabs will never happen, however the issue probably would have been closed if that was the case."
15365|This is probably a question for [Microsoft/TypeScript](https://github.com/Microsoft/TypeScript) rather than vscode.
15366|@Tyriar, gotcha thanks! :)
15367|"Regarding @ginty's reference, the un-rendered multi-line comes from the sending an EvaluateResponse back to VS Code with a muti-line string in an `evaluateRequest` rather than using SendEvent(new OutputEvent(...))  ``` response.body = {     result: ""-------------------\n| Custom | Output |\n-------------------"",     variablesReference: 0 } ```  shows the `\n` rather than inserting the new line.  Sending an OutputEvent with the same string inserts the line breaks, the response from evaluateRequest does not."
15368|Posted @ https://github.com/Microsoft/TypeScript/issues/7695  Closing it here.
15369|![vc-bug](https://cloud.githubusercontent.com/assets/2075006/14057991/16968754-f34c-11e5-9ecd-cfff4f649270.png)  re or wait or exit , can't fix~
15370|kill vc process, change folder or file name~  remove some extensions~
15371|@Tyriar does it mean we still have no support for RHEL 6?
15372|@rebornix yes < RHEL7 isn't supported, due to issues with GLIBC and GLIBCXX. It might be possible to build it on a RHEL6 box, I was having a bit of difficulty though.
15373|@Tyriar got it. I'll have a try to see whether it can be solved as there are companies/users of my ruby debugger plugin asking if we can have RHEL6 support.
15374|@rebornix if you have any luck, post it on https://github.com/Microsoft/vscode/issues/1056 or [https://github.com/Microsoft/vscode/issues/3603](https://github.com/Microsoft/vscode/issues/3603). Also read these issues if you're going to give it a shot as it contains a few of my notes.
15375|> Anyway, let's focus on the present, is there any new build before the //build/ event?  :D  The bits for the new build are already waiting for you on the [insider channel](https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build) ([release notes](https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md)) please use it and give us feedback.
15376|it's 2016 and that issue still happens.   Uninstall and install both runtimes does not make it. Following @peterblazejewicz tips using -y works like charm.   Looks like uninstall using -y does not ask for confirmation.  Thanks a lot.
15377|Hi there,  I sorted the issue out, i removed all the extensions and then installed them one by one...  Thanks
15378|@egamma thanks! ;)
15379|@isidorn works great!
15380|![image](https://cloud.githubusercontent.com/assets/10532611/14059539/96315de8-f344-11e5-9ac9-3cfdb7b29e42.png)
15381|Install GCC 4.8 in RHEL6 per http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos . But still get problems with `oniguruma@6.0.1` installation.
15382|@chuckries does this happen all the time?
15383|"I found that the incremental search anyway does not work for IME composed texts. If I correctly type ""Git: プル"" it is highlighted, but ""git pull"" does not find anything.  ![animation](https://cloud.githubusercontent.com/assets/1311400/14060227/eea0c49e-f3a0-11e5-9726-32dff53190f6.gif)"
15384|changed my proxy it worked. so the link is not working in west asia
15385|I experienced this issue on a Windows 10 machine. I installed VSC while logged-in to a user account (which prompted for Admin credentials). While all of the registry settings seem to have been added, the Windows Explorer context menu doesn't list the VSC entries. I hacked the registry on my Windows 7 machine at work using [these settings](https://gist.githubusercontent.com/CalvinDale/93ddc87c8f329d9048ff/raw/6a92519164fe3f0d0ddca43ebc7017952566ccc7/gistfile1.txt). And it worked, however that machine runs under an Admin account.
15386|"Related to this, it would be good to introduce aliases to some commands in the command palette. For example ""Reload Window"" could have the alias ""Restart Window"" to improve discoverability."
15387|@espresso3389 which IME are you using? And which version of Windows?
15388|didnt realize i was running such an old version! working fine in 0.10.11
15389|Command palette > `Extensions: Show installed Extensions` lists the installed extensions and you can uninstall them by selecting the 'x' button.  Since it looks like the culprit is the `extension.viewInDefaultApp` command you can search in `HOME_DIR\.vscode\extensions in the`package.json` for this string.
15390|OK - happy end :smile:   Now you have to tell me which extension has caused this, you should consider to file an issue against it.
15391|// fyi @DustinCampbell
15392|"I'm on Windows 10 and the IME is ATOK; a Japanese thirdparty IME. Even with MS-IME, the behavior is same. Typing ""git: プル"" correctly works but doing ""git プル"" does not work. The search function does not seem to work with Japanese characters."
15393|"I totally agree with @Tyriar. What we really need is ""command alias"" in the case. With such aliases, I don't want to stop Japanese localization."
15394|"I think ultimately the best thing would be it if this API just ditched the half-open intervals and use all closed intervals, all the time.  E.g., for  ``` foo   bar ``` - For any position inside ""foo"", it returns [0, 2] - For any position over one of the spaces, it returns [3, 5] - For any position inside ""bar"", it returns [6, 8]  Alternatively: - For the first space, it returns [3, 3] - For the second space, it returns [4, 4] - For the third space, it returns [5, 5]  Or: - For any position over one of the spaces, it returns undefined, unless a second optional argument is passed to `getWordRangeAtPosition`, in which case it returns [3, 5]"
15395|If this something that can be done as a first PR? Would be great if you could indicate issues that would be easy wins for an outsider to contribute. I really really really really want git diffing to work on the right side. I will buy you a coffee/beer if you fix this :stuck_out_tongue_winking_eye:
15396|@egamma Hey this is great, I think it'll do quite nicely! Thanks.
15397|@egamma I think I finally figured out what was going wrong with my project. I had a user setting that pointed to my global the tsserver in node_modules/typescript/lib. Suddenly an error message popped up saying the path doesn't point to a valid tsserver install. When I removed the user setting it started working again. Just in case anyone has this issue.
15398|@expresso3389 I moved the IME bug over to https://github.com/Microsoft/vscode/issues/4691, this issue can discuss whether or not the command palette should be translated and to what extent.
15399|Git integration is on its way and is available now in the insiders build which can be [downloaded here](code.visualstudio.com/Download). See https://github.com/Microsoft/vscode/issues/4006 for more information
15400|@mattn thanks for figuring this out, you may want to open a self-answered question on [Stack Overflow](http://stackoverflow.com/) to help other people who search for it.
