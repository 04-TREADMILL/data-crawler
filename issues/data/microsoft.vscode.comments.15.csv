1401|"@egamma I'm assuming you can break apart an application into modules using an AMD-style loader since the main purpose of module loaders is to support modular code, right? Putting the module system choice aside for a moment..  By closing this, I would like to confirm that are you are making a definitive statement on behalf of the vscode team (not just a personal or single issue-focussed decision) that vsocde will not be open sourcing the various services and libraries as separate libraries. This is one of those questions that informs the community of the intentions of the vscode team regarding their recent open sourcing strategy.  Please consider this carefully since the benefits of modular code are enormous. What it would allow is that the open source community can use those ""internal"" modules to write plugins / extensions for vscode using the same libraries that you are using. By bundling modules into vscode in a monolithic pattern, you will be decreasing the ""hackability"" of vscode (using the Atom term).  PS. I'd like to write a GIT-based extension to vscode so I'd like this door to be open if possible. PPS. I totally understand that a change like this will require a large amount of non-trivial refactoring which is why in my initial request, I focussed on whether this is a long term goal or not."
1402|Closing as this is not a editor issue. For suggestion or bug reports against Visual Studio check out https://msdn.microsoft.com/en-us/library/b8akas30.aspx
1403|@bpasero In this case I saw it while accessing a Samba share running on Linux from vscode 0.10.1 running on Win 7 x64.  > And can you reproduce the issue repeatadly?  Not sure yet -- I just tried vscode for the first time recently. And I was getting inexplicably high CPU usage (total usage much higher than the sum of the values in the CPU column in Task Manager) that I think was at least partially attributable to vscode, so I closed it for the time being. I've had nothing but problems with file watching in Atom, so I suspect I'll see this issue again in vscode.  In any case, although it would obviously be good for it to always be in sync, there's a refresh button that I can activate with the mouse to work around when it happens, but I'd like something keyboard activated as well.
1404|"I'd also say that getting rid of them entirely wouldn't be a bad thing.  Making it a setting on the debug adapter seems a little ""messy"" but on the other hand it would be a little painful to have to coach users to edit their settings to turn that off.  I suppose it's easier to just remove them :)"
1405|I just published 0.0.1 on the gallery, which implements the very basic feature set,  https://marketplace.visualstudio.com/items/lextudio.restructuredtext  The code and config files are hosted at,  https://github.com/lextm/vscode-restructuredtext
1406|Sure.
1407|Probably will not fix since we will move the repl to use the editor not the tree.
1408|@bpasero Ok, I still had higher CPU usage than I should've after closing vscode, then Atom crashed and I still had high CPU usage. I traced some of it to the Program Compatibility Assistant Service via an `svchost.exe` instance. With Atom not running I started vscode again and I can repro immediately: open a folder on the Samba share, go to the shell and `$ touch newfile` and it doesn't show up in Explore. Collapse, expand the subtree doesn't make it appear either. I have to click the Refresh button.
1409|Makes sense, we will remove the lines in the future - when we move our repl to be a real editor.
1410|+1 for open sourcing the packaging scripts for all platforms.  Open sourcing the code for incremental build and debug of a Typescript Electron apps is awesome. It would be equally great to see which way you decided to do release builds!
1411|I think there is the workaround today we can all use to turn it off. (set `editor.autoClosingBrackets` to `false`)  When it's on, it does have some rough edges, but we need to find them and improve such that the experience is pleasing. Can we nail down a list of concrete rough edges?  ccing @weinand @isidorn who also hit some rough edges for examples/input.
1412|"@eugen-v   What if you use the 24"" monitor and resize the VSCode window to be smaller? What if you open 3 editors side-by-side in VSCode in the 24"" monitor, and type in one of them... (i.e. is the problem one of the viewport size and the size of the GPU layers?)  How does it work when opening Chrome (you can also help by mentioning the Chrome version you try with) and typing in the editor at http://www.typescriptlang.org/Playground . Do you see such strange differences between the 15"" / 24"" or the window size?"
1413|Thanks @chrisdias. Somebody else had let me know that too. I was trying to help direct people to the dedicated uservoice to help keep the git issue tracker from overflowing since it suddenly became open source with a pretty big following.
1414|Indeed, the find is executed on a line by line basis. To implement multi-line search we need to do the following: - maintain a fast [offset] <-> [line number, column] mapping data-structure in the model. I think PrefixSumComputer can handle this easily, as long as it's updated correctly on edits. - when searching, we need to get the entire text inside the search range as one string - run the regex on the one string - get back offsets - use the above data-structure to convert back to [line number, column] coordinates.  It is a little bit of work to get all of this done.
1415|This is quite difficult to improve. The current strategy is the following: - we use a hidden textarea for editor input - when we received IME events from the textarea, there is no way to get from the DOM the current string being built until the string is finished. - therefore, we reveal the textarea at precisely the right location in the editor such that it appears the editor is getting the input, when in fact it doesn't - it is a cheap trick and we need to recheck if browsers have evolved or if the trick can be further improved.
1416|@lzantal   Would love to get more steps here. Did you open a text file before trying to replace in it? Other folks at the office use mac and it works for them.
1417|Hi **@bpasero**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Benjamin Pasero). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1418|General :+1: to feature. Would be really cool to get such feature (especially when Debugging Console practically implements everything we would need)  For sure it would be useful for many languages (nowadays even C# has REPL ;) ). As David said, in F# and Elm we just allows user to send line / selection / file to REPL and we print output to Output Channel - that's how it looks more or less: ![repl](https://cloud.githubusercontent.com/assets/5427083/11370070/48c09584-92c2-11e5-9de4-017437628d71.gif)  While for F# it's my decision to have such style REPL (we've implemented exactly same functionality [read-only REPL window] in Atom even though we could get more traditional style) other languages and their communities prefers to use REPL by just typing code into it and plugins supporting those languages would really benefit from adding this.
1419|@Tyriar Again, would love your input to find better out of the box defaults
1420|"> Well what about people that double click to select a word and then want to Ctrl+click to goto definition?  Translates to  ``` mousedown > mouseup > mousedown > mouseup > ctrl down > mousedown > mouseup ```  That's perfectly fine and should always go to definition.  What I'm referring to is for example this sequence:   ``` mousedown > mousemove > ctrl down > mouseup ```  Notice that I haven't completed the text selection before I press ctrl down. This immediately causes a ""go to definition"" on mouseup when in my opinion it should not.  My issue with copy/pasting for example was just how I regularly run into this issue. In practice any action performed after the mouseup will be executed in the definition instead of where you had your text selection.  Of course it works fine if you do it the normal way:  ``` mousedown > mousemove > mouseup > ctrl down > whatever action you want ```  But since copy/pasting for example is often a very quick action, I often fail it."
1421|Yes, Typescript uses textmate tokenization for a while now. You can file issues against the grammar at https://github.com/Microsoft/TypeScript-TmLanguage
1422|Hm, maybe the path uses characters we fail to decode. If you delete a file in the windows explorer, does the explorer in VSCode update?
1423|616b9ad
1424|I'm ok with changing the fallback values, I especially like the reasoning that all compilers support spaces.  So the action out of this issue is to change the fallback defaults to `insertSpaces: true, tabSize: 4`
1425|Yeah, our watcher might not work reliably for network shares.
1426|This issue only tracks the problem that there is no more auto complete for languages which only support tokenization using a textmate grammar. Issues with PHP, TypeScript are separate issues.
1427|I do not see the `extension.js` file in the src folder - only see the `.ts` file. I do get the following error when I `Ctrl+Shift+B` though:  ``` 'npm' is not recognized as an internal or external command, operable program or batch file. ```  Node and NPM are both in my path. I primarily work on node so am not sure if VS Code needs to know something about Node and maybe I did not configure that.  Just an FYI: The tutorial works just fine on my mac.
1428|Indeed, it most likely runs OOM because the file is being sent over to the two web workers. I most likely introduced a regression in this area, where before files above a certain size wouldn't travel to the web workers at all. Let's track this either in #139 or #177,
1429|This will be supported in the next release with the following syntax: `code --extensionDevelopmentPath=<path to extension> --extensionTestsPath=<path to compiled tests>`  The output goes directly to console and the exit code is set properly.  Note: in order for the exit code to function properly you will need vscode@0.10.6 at least as dependency from your extension.
1430|Thank you for the kind words. Will look into adding this
1431|It seems vscode is not able to run npm, so I am not sure if npm is really on the path. Can you run npm from a windows command prompt?
1432|"@74th the nasty problem here is that we do the keybinding dispatching in the browser ""keydown"" event which doesn't hint whatsoever to what a follow-up ""keypress"" would produce. It literally only gives the key code in the form of a number (numbers which of course vary across browsers and OSes :)).   That is what makes supporting `:` and `""` very difficult.   Will try all the other combos you mention, most likely there's some issues with the tables in https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/keyboardEvent.ts . I will check them and follow up"
1433|Thanks for fixing this!
1434|It was an oversight that we didn't add the a `language.configuration.json` definition for .jsx files.
1435|:heart:
1436|Hi **@jrieken**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Johannes Rieken). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1437|`npm` was missing from my path. I use powershell primarily so did not realize that it was missing from the path and my profile had the node path set up. Adding npm to the path still did not fix the issue though. I still do not see an `out` folder with the transpiled files.
1438|Ok, that seems to be the issue. Big thanks for your help :+1:
1439|Indeed, let's track this in #105
1440|"Just to be sure I do the right thing:  The change should be: ""middle click should be bound to paste in Linux"" (i.e. what Ctrl-V does)"
1441|Indeed, we need a HistoryService or NavigationService that each interested party can participate in (e.g. the find widget, the go to definition contrib)
1442|On the long term, I think we should recover from extension host process crashes
1443|"That would be a nice feature, would also be cool to have right click on the line numbers to toggle ""show line numbers"""
1444|We need to revisit how this feature is implemented and maybe add support for it through the language configuration file linked to from package.json
1445|@thewhitetulip   The find widget only highlights the first 1K hits, but I am confident Replace All replaces all occurences. It is something I changed rather recently. Can you please help with additional steps -- and are you seeing this in 0.10.1 ?
1446|The current file model normalizes the line endings as soon as the file is read (i.e. each line does not keep track of its EOL), the model only keeps track of one EOL for the entire file (which is computed on file open as the predominantely used EOL character).  @miqid Before we invest a lot into supporting this, when is it desirable to have a file with code that uses mixed EOL sequences? (i.e. why would you want to have a mixed EOL file at all)
1447|This might be a mac only issue, I cannot reproduce it under windows
1448|Hi **@jrieken**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Johannes Rieken). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1449|Duplicate of #84 (and #412).
1450|Thank you. I will make sure make the doc more clear
1451|+1
1452|duplicate of #23
1453|Hi **@gluck**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
1454|**@gluck**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
1455|Our colorizer doesn't support ES6 / ES7 yet. I will look for a text mate grammar that does that.
1456|duplicate of #133
1457|I have reviewed the change set and it looks good to me. I would verify that no other place in php might be affected by going from 1 base to 0 base line numbers.
1458|We don't use text mate to colorize JSON yet, that's why you didn't find it.  I now added the JSON text mate grammar so your reference should work.
1459|@aeschli I thought for sure ES6 template strings were handled fairly well in the previous version of VSCode.
1460|Excellent, good to hear that there is a fix on it's way. Is this something that we could work around by changing a configuration locally until the fix is officially released? I'm looking through the changes now and trying to figure out how that maps to the installed product on Windows.
1461|These are no code changes and only configuration changes, so you can patch your installation with these changes.   In the installed product the corresponding folder is `resources\app\extensions\javascript`.
1462|"Can you run ""npm run compile"" from the root of the workspace in a command prompt."
1463|Looking at your code example we need to get ES6 back to work. duplicate of #133
1464|@alexandrudima My bad... I forgot to mention my platform: Mac OS X 10.10.5 + Visual Studio Code 0.10.1 (df352367df2efcfa9d602d471e4e2f42140a0f05)
1465|Thanks!
1466|:+1:   @dbaeumer fyi
1467|:+1:
1468|:+1:
1469|duplicate of #133
1470|fixed
1471|Wow fast, I guess I'll send another batch then :)
1472|You can now find links to older builds in [Previous Releases](https://github.com/Microsoft/vscode/wiki/Previous-Releases).
1473|@aeschli no, it's not. As @a-type said,  > #52 seems to indicate this problem is with all interpolation strings, even beyond ES6 JS.
1474|Hi **@gluck**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
1475|I'd rather we close this all encompassing one and just file specific issues for each rough edge.
1476|This issue was moved to Microsoft/TypeScript#5775
1477|Makes sense, will add.
1478|@niemyjski @ardacetinkaya Can you guys please attach the omnisharp log (Cmd+L,L)
1479|While VS Code also builds on electron the layer on top is different and we use a fundamentally different approach to extensibliity see https://code.visualstudio.com/docs/extensions/our-approach. Making a ship of the Atom API on top of the VS Code one is therefore no realistic.
1480|duplicate of #133
1481|duplicate of #133
1482|That's great! Thanks @egamma, it has bother me for few days.
1483|Keep em' coming :santa:
1484|I have to add my weight to this ticket as well. When copy and pasting code I often end up at the definition and replace completely the wrong things. (Often in framework files) This is extremely annoying.
1485|Notice we are already making several node modules available that were extracted from VS Code for extenders (e.g. https://www.npmjs.com/package/run-in-terminal). We will continue to do so I agree this is a good thing. However, we will do it on a case by case basis in an evolutionary way driven by scenarios.  I think it is a good idea to try to make some of the git services we provide as a node module. Please go ahead and give it a try.
1486|:+1: That did it. Any reason why it would not automatically run when I hit F5?
1487|"Sure here you go  ``` [INFO] Starting OmniSharp at '/Users/blake/Code/aspnet5app/src/Sample'... [INFO] Started OmniSharp from '/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/csharp-o/bin/omnisharp' with process id 3145... [INFORMATION:OmniSharp.Startup] Omnisharp server running using stdio at location '/Users/blake/Code/aspnet5app/src/Sample' on host 3138. [INFORMATION:OmniSharp.Dnx.DnxPaths] Using runtime '/Users/blake/.dnx/runtimes/dnx-coreclr-darwin-x64.1.0.0-rc1-final'. [INFORMATION:OmniSharp.Dnx.DnxProjectSystem] Scanning '/Users/blake/Code/aspnet5app/src/Sample' for DNX projects [INFORMATION:OmniSharp.Dnx.DnxProjectSystem] Found project '/Users/blake/Code/aspnet5app/src/Sample/project.json'. [INFORMATION:OmniSharp.Dnx.DesignTimeHostManager] Using '/Users/blake/.dnx/runtimes/dnx-mono.1.0.0-rc1-final' for design time host. [ERROR:OmniSharp.Startup] The project system 'DnxProjectSystem' threw an exception. System.InvalidOperationException: File name has not been set   at System.Diagnostics.Process.Start_common (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) <0x110317d50 + 0x00149> in <filename unknown>:0    at System.Diagnostics.Process.Start (System.Diagnostics.ProcessStartInfo startInfo) <0x1103178f0 + 0x0007d> in <filename unknown>:0    at OmniSharp.Dnx.DesignTimeHostManager.Start (System.String hostId, System.Action`1 onConnected) <0x10ffc7580 + 0x00a2f> in <filename unknown>:0    at OmniSharp.Dnx.DnxProjectSystem.Initalize () <0x10ffc5440 + 0x00299> in <filename unknown>:0    at OmniSharp.Startup.Configure (IApplicationBuilder app, ILoggerFactory loggerFactory, IOmnisharpEnvironment env, ISharedTextWriter writer) <0x10fe1b520 + 0x00481> in <filename unknown>:0  [INFORMATION:OmniSharp.MSBuild.MSBuildProjectSystem] No solution files found in '/Users/blake/Code/aspnet5app/src/Sample' [INFORMATION:OmniSharp.ScriptCs.ScriptCsProjectSystem] Detecting CSX files in '/Users/blake/Code/aspnet5app/src/Sample'. [INFORMATION:OmniSharp.ScriptCs.ScriptCsProjectSystem] Could not find any CSX files [INFORMATION:OmniSharp.Startup] Solution has finished loading ```  <img width=""588"" alt=""screen shot 2015-11-24 at 11 32 20 am"" src=""https://cloud.githubusercontent.com/assets/1020579/11375132/2746649c-929f-11e5-9ed1-0c8c1760d45f.png"">"
1488|Yeah, I get the same issue.
1489|Ok I think I found an elegant fix, thanks to the comments! Now, when you press and hold the mouse button without pressing Ctrl/Cmd, releasing the mouse button will not trigger the navigation even when Ctrl/Cmd are still pressed.  In other words, goto definition with mouse will only work if you first press Ctrl/Cmd and then mouse down. We will do some selfhosting on the change to see if it is causing regressions, but I think its fine.
1490|@mithun-daa it should, what happens when you run Ctrl+Shift+B? Check the output window (from View menu).
1491|@jnystrom  Yes, it's a regression, we switched from our own tokenizer to a JavaScript text mate grammar.
1492|:tada: Thanks!
1493|Hi,  I checked it on another mac and it works there. So I deleted it and reinstalled it and now it works. Not sure what was going on, but it appears to be working now, including the shortcut.
1494|Nope.  Linux, via XWindows, has multiple clipboards. One called CLIPBOARD is used for Windows style ctrl+c, ctrl-v copy & paste. One called PRIMARY is used to do middle click paste. This works like this: - You select some text somewhere. This selection is automatically copied to the PRIMARY clipboard, live, as you're selecting it. This just happens without the user doing anything, other than selecting text. - When you middle click somewhere, the contents of the PRIMARY clipboard are inserted at the cursor.  You just have to implement/support the second step.  Like I said, [Atom](http://atom.io), which is also based on electron and is open source - supports this correctly; so I might be possible to look at their implementation? They're also MIT licensed I think, so that shouldn't be a problem.
1495|+1
1496|yes, 0.10.1  I have a huge file, 50MB they were sql statements and i had to change the database name, i had to hit replace all 100times before it was done
1497|Electron 0.34.4 and 0.35.1 are out, and both include the fix for Linux. I rebuilt VS Code with 0.34.4 on Arch Linux and the text rendering is crystal clear again.
1498|@bpasero I am new to VSCode, so just double checking, you mean Github Atom, correct?
1499|If Ruby also has problems with interpolated strings we need to look at this separately. Please file an issue just for Ruby. The issue with JavaScript is that we switched from our own tokenizer to a Text Mate tokenizer that doesn't support ES6.
1500|I also hit this and gave up because it wasn't worth the effort for the change.
