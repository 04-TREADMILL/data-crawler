19001|Regarding the transform position request: yes sounds reasonable however it would case a round trip. For the node implementation of the server we implemented a text document that can do basic transformation. Would this be too complicated in your case?
19002|@arixse could you please try to provide the description in English. We don't speak the language you used.
19003|Hi, when I do open the file it do not goes to ISO-8859-1.  ![utf-8](https://cloud.githubusercontent.com/assets/18600109/14745638/953c15ce-0882-11e6-8e69-e3e897bf962d.PNG)
19004|Would be greate to set a default char codification.
19005|@gilboa23 I assume you have format on type. Could you provide a screen cast showing the problem (animated gif) or better the project with steps how to reproduce this. I am asking since I can't reproduce this:  ![bug](https://cloud.githubusercontent.com/assets/1931590/14745782/2ab066f8-08ad-11e6-8661-063c5e21b842.gif)
19006|"You can: the setting is ""files.encoding"" and it defaults to utf8. What does the status line say about the encoding of the file ![capture](https://cloud.githubusercontent.com/assets/1931590/14745914/971d3c3a-08ad-11e6-90cf-fb28419e15c2.png)"
19007|Accepted :-)
19008|to clarify: we want a command that fetches and applies all code actions UI-less? not another entry in the code action UI, correct?
19009|Unfortunately, a [proxy requires manual configuration](https://code.visualstudio.com/docs/supporting/faq#_proxy-server-support).
19010|@d4rkr00t can you partition the project by adding jsconfig.json files in subfolders and opening code on the subfolders?
19011|Agreed, but wouldn't auto configuring it according to the user, be a better idea ?
19012|Actually this isn't simple. The problem is that our `CodeActions` are just commands, not necessarily text edits. That mean we cannot run them all at once we because the change on which they have been computed might be different already. We have to do this: 1. ask for all code actions 2. run the first code actions 3. if there is another code action, repeat at #1  Then the challenge is to know when to stop. Because it doesn't mean that running that command make the code action go away...
19013|Yeah... [everyone's](http://jjasonclark.com/how-to-setup-node-behind-web-proxy/) [just waiting](https://github.com/atom/apm#using-a-proxy) [for someone to fix it](https://discuss.atom.io/t/how-to-install-an-atom-package-on-windows-8-behind-a-proxy-server/12520/11).
19014|I could leave this open, but I'd argue this is an idea for a node module in itself. If someone ends up building it, we'd use it!
19015|@bpasero I'm quite happy already. There are no more static managers and static env exported functions. Giving it to you for quick review.
19016|Using it now. Haven't had a crash since yesterday.
19017|See screencast below (vscode 1.0.0, editor.formatOnType==true).   As can be seen, when creating a new line, the cursor is initially placed at column 0 instead of the column that corresponds to the current nesting level. The indentation is fixed only when the line is completed (by entering the semi-colon).  ![indentation-issue](https://cloud.githubusercontent.com/assets/18614824/14748098/8bf7904a-08c0-11e6-88ad-22d9a57060f1.gif)
19018|+1
19019|@dbaeumer quick translation, may help you a bit.   the file created by 3rd party tools (e.g. gulp, grunt) cannot be shown automatically, he has to refresh manually to see the files.
19020|Thanks. I fear there is not much we can do if file system operations are taking so long. We might be able to let the UI look better but after all if the network share does not respond fast, the experience will not be good with any tool out there.
19021|@joaloez when you open this share with the windows explorer, is it any faster?
19022|I find it surprising that every call to telemetry gets send to the appenders right away. I would have at least expected some kind of buffering and batching. Adding some way of buffering with timeouts at the point where we collect these events seems like a good thing to do anyway.  Still, for the actual network access I think we should just turn off network access when we detect we are [offline](https://github.com/electron/electron/blob/master/docs/tutorial/online-offline-events.md).
19023|Can you, in the Extension Host window, open the dev tools (F1 > Toggle Developer Tools)? In the dev tools, go to Console and see if there is anything interesting there?
19024|@joeaudette I believe the latest insiders build was upgraded to Electron 0.37.6 (https://github.com/Microsoft/vscode/pull/5378) 2 days ago.
19025|> I find it surprising that every call to telemetry gets send to the appenders right away.  I think that's fair. The appenders are the ones that know what debouncing strategy to apply. However, the telemetry service should guard itself against evil/slow appenders.
19026|@NikosEfthias I've been using the feature for a month or so with no issues on Ubuntu 15.10 and most recently 16.04. Did you try restarting after the setting was modified?  Also what version of VSCode are you on? We're only up to v1.0.1 so far.
19027|:+1: for making this configurable
19028|"@aeschli  I get this: <img width=""754"" alt=""screen shot 2016-04-22 at 1 17 36 pm"" src=""https://cloud.githubusercontent.com/assets/9057680/14749288/a700343e-088c-11e6-865f-8cbac29502cd.png"">"
19029|@weinand I'm having the same issue. My breakpoints in nodejs get reached, the execution stops but I don't see anything in the debugger window (but if I press F5 the execution continues). Strangely, when the code throws an exception and the debugger is set to capture all uncaught exceptions I can see the variables, call stack. etc. If I set the debugger to break on entry it works as expected until I continue the execution to stop on a breakpoint.  This has also happened to other teammates in different times and versions but we've never found out how to reproduce it consistently (although once it happens doesn't seem to get fixed).  I'm currently running node 5.11.0 (was also happening with 5.10.1), Windows 10 14316 and the latest stable and insider versions of vs code (happens in both).  My alias is antonmo in case you want more information over Skype or follow up internally to get more info.  Thanks!
19030|if I open it with Windows Explorer is immediate. Also if I make a network drive is immediate. Only happens slowly opening direction from the vscode
19031|+1 https://atom.io/packages/terminal-panel
19032|+1 https://atom.io/packages/terminal-panel
19033|+1 https://atom.io/packages/terminal-panel
19034|This also happens with: - U+2712 (Black Nib) ✒️ - U+1F5D2 (Spiral Note Pad) 🗒    Version: 1.0.0 Commit: fa6d0f03813dfb9df4589c30121e9fcffa8a8ec8 Date: 2016-04-13T14:08:36.599Z Shell: 0.35.6 Renderer: 45.0.2454.85 Node: 4.1.1
19035|@stevencl Configuration sounds great!
19036|@waderyan assigning to you. ChrisS designed the High Contrast theme. I don't know what the rules are in terms of decorations and high contrast. Is it a must that they are showing?
19037|@ups216 thanks for the translation.  @arixse this should work. Is the folder the grunt or gulp file ignored in the settings?
19038|@trevorscharf Are you talking about the language selection list. You need to install the C# extension:  ![capture](https://cloud.githubusercontent.com/assets/1931590/14752373/41cd672e-08cf-11e6-9c56-c0e20a7f5312.png)
19039|@ddieppa do you have the eslint extension installed? Looks like the extension can't load the react plugin?
19040|Thanks @dbaeumer. I believe @bgashler1 did some work here. Maybe he can give us some help?
19041|Thanks. That was it!  On Fri, Apr 22, 2016 at 3:15 PM, Dirk Bäumer notifications@github.com wrote:  > @trevorscharf https://github.com/trevorscharf Are you talking about the > language selection list. You need to install the C# extension: >  > [image: capture] > https://cloud.githubusercontent.com/assets/1931590/14752373/41cd672e-08cf-11e6-9c56-c0e20a7f5312.png >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5666#issuecomment-213558463  ##   Trevor Scharf  trevo andrew@2gtech.comrscharf@gmail.com
19042|@gilboa23 I still can't reproduce. Could you share your workspace. May be it is another settings that needs to be different. What kind of line ending do you use? Did you tweak the typescript formatter options?
19043|Or do you have any additional plugins installed?
19044|Closing.
19045|the version says 1.8.2 ![](http://i.imgur.com/WeKISZU.png)
19046|I can't remember, but I think it happend in out repository. It suggested to exclude /vs/ folder.
19047|that's my point, I just installed VS Code 1.0 from scratch, and installed eslint plugin for VS Code, but I don't have to install the eslint-plugin-react, I am just trying to open a .js file, not working on any react project or anything related to react  this is what I have globally installed in my pc: ![image](https://cloud.githubusercontent.com/assets/10607192/14752769/34467d32-089f-11e6-8a6d-4610a3faafb3.png)  and this are my installed extension in VS Code: ![image](https://cloud.githubusercontent.com/assets/10607192/14752800/5e868d1c-089f-11e6-8ba8-cc85d7ef8472.png)
19048|i installed through deb package now it works
19049|will i get updates automatically on ubuntu now through package manager
19050|I like the second better.
19051|I have the same problem with JavaScript files. Using v1.0.1-insider on Mac OSX. My plugins installed are eslint, tslint and editorconfig.
19052|@joaomoreno the default path from that code you linked is where my git is at.
19053|"Hi all, I've started work on the integrated terminal and have a prototype up and running ([branch](https://github.com/Microsoft/vscode/tree/tyriar/integrated_terminal)), this will likely be integrated into the product in the May release.  ### Prototype  Here's what it looks like so far:  ![image](https://cloud.githubusercontent.com/assets/2193314/14754041/b923a0e6-088d-11e6-928b-2f897407fe29.png)  Some things to call out: - `.bashrc` is parsed and auto-complete works as you would expect - A default set of colors will be provided for light and dark modes - <kbd>ctrl</kbd>+<kbd>`</kbd> will probably be the default toggle terminal keybinding - The terminal is a ""panel"", meaning it can only be shown on the bottom of the editor currently (like the Output panel) - The initial version uses platformio/pty.js and platformio/term.js  ### Initial milestone  Here is a rough todo list for the initial milestone, not all of these will necessarily make it in for the May release:  **Features** - [x] Customize shell, tested bash and zsh (cmd may have issues, see https://github.com/jeremyramin/terminal-plus/issues/15) - [x] Customize ANSI colors via settings.json - [x] Customize font via settings.json - [x] Selection within terminal - [x] Middle click to paste on Linux - [x] Open the terminal in the root open folder when available - [ ] ~~Customize background and foreground colors~~ #6450 - [ ] ~~Copy and paste~~ #6451 - [ ] ~~Add toggle terminal to menu~~ #6452 - [x] Create default light theme color set - [ ] ~~Support and test on Windows~~ #6453 #6454 - [x] Support and test on OS X  **Bugs** - [x] Have terminal characters cover height of line - [x] Focus the terminal input when anywhere inside the terminal panel is clicked - [x] Handle the terminal process being killed (`exit`) - [x] Propagate focus from panel focus to terminal - [ ] ~~Prevent certain keybindings from triggering while in terminal?~~ #6455 - [ ] ~~Determine terminal character size in a font-agnostic way~~ #6456 - [ ] ~~Custom colors can be overridden in some cases (open and close `vim`)~~ #6457 - [x] Fix npm shrinkwrap  ### Beyond  Here are some of the ideas that will eventually be turned into issues/feature requests later on: - Multiple terminals #6458   - Handle title change, visualize in UI #6459   - Do something smart when a terminal is `exit`ed? #6460 - Clicking a file path in terminal should open a file https://github.com/Microsoft/vscode/issues/1037 - Extension API?"
19054|Awesome!
19055|Really nice! :+1:
19056|Being pushed to May.
19057|@typekpb https://github.com/Microsoft/vscode/issues/229 is tracking the rpm/yum repo.
19058|Signing the repo pushed to May.
19059|"Cool!!!  On Friday, 22 April 2016, Daniel Imms notifications@github.com wrote:  > Hi all, I've started work on the integrated terminal and have a prototype > up and running, this will likely be integrated into the product in the May > release. > Prototype >  > Here's what it looks like so far: >  > [image: image] > https://cloud.githubusercontent.com/assets/2193314/14754041/b923a0e6-088d-11e6-928b-2f897407fe29.png >  > Some things to call out: > - .bashrc is parsed and auto-complete works as you would expect > - A default set of colors will be provided for light and dark modes > - ctrl+` will probably be the default toggle terminal keybinding > - The terminal is a ""panel"", meaning it can only be shown on the >   bottom of the editor currently (like the Output panel) >  > Initial milestone >  > Here is a rough todo for the initial milestone, not all of these will > necessarily make it in for the May release: >  > _Features_ > - Customize colors via settings.json > - Customize font via settings.json > - Handle title change, visualize in UI > - Terminal selection, copy and paste > - Open the terminal in the root open folder when available > - Add toggle terminal to menu > - Create default light theme color set >  > _Bugs_ > - Focus the terminal input when anywhere inside the terminal panel is >   clicked > - Propagate focus from panel focus to terminal > - Prevent certain keybindings from triggering while in terminal > - Determine terminal char font in a font-agnostic way > - Set background color on Terminal object instead of using !important >   css rule >  > Beyond >  > Here are some of the ideas that will eventually be turned into > issues/feature requests later on: > - Multiple terminals > - zsh support > - Clicking a file path in terminal should open a file #1037 >   https://github.com/Microsoft/vscode/issues/1037 >  > — > You are receiving this because you commented. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/143#issuecomment-213581854  ##   Marius Cristea"
19060|@NikosEfthias good to hear!  No updates won't happen until probably the May release now, we're blocked on another team for signing unfortunately. See https://github.com/Microsoft/vscode/issues/2973 for updates.
19061|"Moved comment from https://github.com/Microsoft/vscode/issues/4951 by @joewood:  Hi @weinand, I did a bit of investigation.  I tried node-inspector and didn't see the issue. But, I did see the problem when I added my data structure to the watch window. Background here is that this module that I'm debugging has a large data structure loaded into memory. If I add this structure explicitly to node-inspector I see similar timeouts.   However, in VSCode I see the problem consistently, even with an empty watch window.  So I assume the issue is related to what VSCode is watching by default (locals and context scope etc..) and what it's transferring each time I step through the debugger.  With that in mind I did a quick repro:  ``` javascript const faker = require(""faker"");  let data = {};  console.log(""Running"");  for(let n=0; n<100000; n++) {     data[""1"" +n] = faker.name.firstName(); } ```"
19062|@joewood thanks for your investigation. Since this is a test plan item which is unrelated to your problem, I do not want to confuse the test of a new feature unnecessarily and I have moved your comment to https://github.com/Microsoft/vscode/issues/5645. I think it is good practice to only comment on test plan items, if you are involved in the test of the specific feature.
19063|+1 on this feature  (REPL, interactive console)
19064|Looking at Sublime Text implementation again, double-clicking on a sash of a split editor doesn’t actually resize the two editors around the sash to half of the available width. Instead it will consider the entire “workbench” width and put the sash as its default position. So if you have a split editors with 3 panes, clicking on the first sash will put it at one third of the available space, and clicking on the second one will put it at two thirds. (Note that the resizing behavior is identical for 2-panes split editors).  I may need to think about this a bit more, but I believe this is a better behavior than the one I implemented because it makes the sash repositioning idempotent—double clicking on the sash will always put it at the same position— instead on depending on the size of the panes around it. And it would also fixes the current issue in a clean way: instead of introducing a new feature that will almost certainly be very hard to discover (pressing <kbd>Ctrl</kbd> + double click isn’t an intuitive interaction) you would basically reposition sashes one by one.  Any thought?
19065|"Please, everyone: use GitHub's new ""Reactions"" feature. Please don't crowd out the discussion with ""+1"", ""Cool"", ""Awesome"", or ""Nice"".  GitHub doesn't show the grey smiley face icon for Reactions on mobile browsers. On iOS, you can tap the share arrow then ""Request Desktop Site"" to see them."
19066|I wonder, would anyone ever want a single sash in its idempotent position and leave the other sashes alone? Or should we reset all sashes when any one is double clicked?
19067|Yes, this would still be supported.  ---  From: Maxime Quandallemailto:notifications@github.com Sent: ‎22/‎04/‎2016 23:09 To: Microsoft/vscodemailto:vscode@noreply.github.com Cc: Steven Clarkemailto:steven_clarke@hotmail.com; Mentionmailto:mention@noreply.github.com Subject: Re: [Microsoft/vscode] Proper tabs for open files (#224)  Would panes repositioning by drag&drop would still be possible under the @stevencl proposal?  ---  You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub: https://github.com/Microsoft/vscode/issues/224#issuecomment-213605667
19068|"@ctaggart haven't seen this before. I'm curious who owns files/folders, what the permissions are on them and whether they actually exist. Can you pass along the output of these commands?  ``` bash whoami ls -la ~ | grep .config ls -la ~/.config | grep Code ls -la ~/.config/Code ```"
19069|@Tyriar I assume the shell will be configurable? This branch should try to be shell & os neutral as possible, I hope...
19070|@factormystic that's the plan; configurable and work on all OS'. The feature branch currently is only tested on Linux but I expect it to work on OS X as well.
19071|the .bashrc thing worries me. it worries me because on windows, i still want my plain old (but recently upgraded in w10) cmd.exe used instead. all my system vars and such that i've setup for my dev environment on windows, etc.
19072|Atom's terminal-panel package that @willin linked also works on Windows, so maybe look there for inspiration
19073|Awesome! thanks On Fri, Apr 22, 2016 at 7:41 PM Bob Majdak Jr notifications@github.com wrote:  > the .bashrc thing worries me. it worries me because on windows, i still > want my plain old (but recently upgraded in w10) cmd.exe used instead. >  > — > You are receiving this because you commented. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/143#issuecomment-213627296
19074|Thanks for your reply.  Yes, I do change, but it does not save this option for the next time, I look out for change settings but do not found where do I set default encoding.
19075|not worried about it working /on/ windows. i am worried about it working /with/ windows.
19076|"@Tyriar here is the output:  ``` root@937050988adf:~# whoami root root@937050988adf:~# ls -la ~ | grep .config drwx------  3 root root  4096 Apr 22 22:37 .config root@937050988adf:~# ls -la ~/.config | grep Code drwx------  3 root root 4096 Apr 22 22:51 Code root@937050988adf:~# ls -la ~/.config/Code total 16 drwx------ 3 root root 4096 Apr 22 22:51 . drwx------ 3 root root 4096 Apr 22 22:37 .. -rw-r--r-- 1 root root    2 Apr 22 22:58 DevTools Extensions drwxr-xr-x 2 root root 4096 Apr 22 22:37 User ```"
19077|@factormystic @bobmajdakjr I clarified that Windows support is indeed the plan in the main comment. It uses pty.js and term.js which I believe play nicely with cmd.
19078|Multiple terminals per opened project will be needed. And npm/gulp/other task runers should be integrated with it.
19079|@bpasero I'll upgrade now and leave it running overnight and see how we go! Cheers :)
19080|I don't think this is really the same as #68. I'm trying to find how to use VSCode to do a merge, but that's not the same as history.
19081|You mentioned this will be implemented as a panel.  +1 Split panels for the terminals and also for debug and console panels. Anyone know if there's an issue for split panels at the bottom?
19082|@GJSmith3rd This is the closest I can find https://github.com/Microsoft/vscode/issues/2806 - making panel positions configurable.
19083|Awesome!
19084|"This is great news! Obviously, integrating a terminal emulator is like endeavoring to create a completely new product. It's not _just_ a feature. I'm curious about where we should set our expectations, long-term.  Some specific things: I use tabs in iterm2 to run multiple processes. Is a feature like this planned or will we have to use screen/tmux tabs? Will there be any integration with the editor itself? ""Open terminal from here"", ""Run file in terminal"", access from extensions, etc.?"
19085|Weird, I would expect it to work provided the user has `rw` access to `~/.config`. It might be an issue with Electron. The only things I can recommend are to try with a non-root user or installing via a package (though the latter probably won't make a difference).
19086|Cannot act on this with more information - closing, pls reopen when there is more information.
19087|@Someguy123 yes this was intentional. For C# there is much more support than just coloring and you really want to use the full extension.  We will provide more guidance to install recommended extensions in the future.
19088|@jvandyke the libs being used allow the system shell to be leveraged so there is no reinventing of the wheel going on at the moment. The kitchen sink metaphor that @joaomoreno used is spot on and I don't think we would be pursuing this if we had to implement everything from scratch.  Multiple terminals/tabs are definitely a feature I would expect, it's in the beyond section. Integration/extensions certainly seem to have some compelling use cases, it's probably a bit far out to speculate on when that would come and in what form.
19089|This was suppressed last time I checked it, might just be on Windows.
19090|Now, that feature is gonna make it the best ide on linux. Awesome, thanks
19091|Finally. +1
19092|I got the same situation when I execute C# console application, any recommend?
19093|@joaomoreno @bpasero I can reproduce this without the Parinfer extension. 1. Open a file 2. Press space 3. Remove space  => File still marked as dirty 1. Open a file 2. Press space 3. Press Ctrl+Z  => File no longer dirty
19094|@AlaaShaker make sure you are using C:/Program Files/VS Code/bin/code and not the code.exe in the folder above.
19095|👍 , one less setXYService() call for untitled editor service
19096|It appears to be an issue when running as root. The GUI came up when I ran as a user.
19097|Also extracted https://github.com/Microsoft/vscode/issues/5688 for the message-service <=> statusbar-service cycle.
19098|I think throwing an exception when you use the instantiation service on a thing that declares a service as dependency that does not exist yet is what I would expect and would solve this issue for me because what I want is an indication that my service dependencies are not met. I would not want to find this out later via a NPE because I am using a service too early.  I see the issue with creating services in 3 different places (before shell, inside shell, inside workbench). Though if you take the editor, it also creates services only later after the workbench is already there. If I had a service that needed the IModeService or IModelService from the workbench, I could not get to it until the editor widget is created.  If we want to move services closer together I think they would have to be created all inside workbench.ts because that is where some of the services are created that need the parts to be there (viewlets, editors, status bar).
19099|#4870
19100|@egamma fair enough, I noticed that later versions of winreg seem to have fixed the bad error reporting. they did not install an error handling when spawning reg.exe and this resulted in an uncaught error exception that bubbled all the way up to us. My fix is to update to winreg 1.2.0. I will also add test plan items for all Windows versions we support to ensure that this is not a breaking change for us.
