22301|Thanks for extra info, do you know any extension that implements fully this feature?
22302|@isidorn I fixed this by activating the group before opening the editor (https://github.com/Microsoft/vscode/commit/bb3354ff0ae59e9a9b9954664c91804873733990). it is a bit of a workaround but should not have any drawbacks.
22303|Need to verify whether this is still an issue after 3b0df36 on my home PC
22304|:+1:
22305|I uninstalled all third party extensions and keep no user preference, add big large json content to javascript files as template literals, open with `code .` 1. Put the cursor in anywhere but json content. Scrolling works perfectly. 2. Put the cursor in json content, try to scroll and the window will start to lag. 3. Restart VS Code, the window freezes (the file containing json content is already in the workspace, but there is still no colorization) and few minutes later, a pop window shows up, saying `The window is no longer responding`  If we run vs code by `code --disable-extensions .`, everything works as charm. So my suspicion is, `--disable-extensions` will disable internal extensions as well and the internal json tokenization is the root cause. Correct me if there is anything wrong.
22306|There are many ways to make a file durable, e.g. double click. With the work on tabs there are even more ways (e.g. double click on the title). Would you expect other ways?
22307|Good to see this newly added api then we may diff PR in VS Code.
22308|"@jhaberstro I assume that this would be solved if you had a way to navigate in the history ""per split"" (or editor group as we name it)?"
22309|@stevencl it would be interesting in your study to find out if people are happy with a setting.
22310|"It's likely a ExecutionPolicy restriction issue (not quite sure), you can give cmder's default setting a try to see if it helps.  ``` PowerShell -ExecutionPolicy Bypass -NoLogo -NoExit -Command ""Invoke-Expression '. ''%ConEmuDir%\..\profile.ps1'''"" -new_console:d:""%USERPROFILE%"" ```"
22311|"For our tabs work we will have ""Close Others to the Left"" and ""Close Others to the Right"". I do not think we need above/below as separate actions to that."
22312|For June we plan to provide an action that clears: - the editor navigation history (Cmd+P) - the history of recently closed tabs - the forward/backward history
22313|This is planned for June.
22314|"In June you can ""pin"" any kind of editor to make it durable."
22315|This is on plan for June with our tabs work.
22316|This is on plan with our tabs work.
22317|That `Acme` extension is just an example I took to make it easier to understand (it is not a reference to real extension version though).  To put it simply of what I wrote, I wonder how VSCode install the extension which has been written with the latest API (let's say this API came out with VSCode 1.1.0) while the user is using an earlier version of VSCode (let's say this user is using VSCode 1.0.0). Do VSCode 1.0.0 install an extension that compatible with itself (the one that wrote without that new API) or it just install the latest one (the one that wrote with that new API)?  Since the latest extension use a new API, I do not know if VSCode that not have a new API yet would crash or not.  Hope it clear things up for you. But if it is not, feels free to ask more. :)
22318|@alexandrudima There's no such color in standard textmate themes.
22319|@Tyriar given the tabs work would you expect all your tabs to go away on a restart if some files are gone? maybe they are only briefly gone because you did a branch switch. I think it would be harsh to force this onto the user (e.g. destroy his careful tab layout).  I think we should not tamper with the tabs arrangement the user did.
22320|We will not change this given our tab work.
22321|@stevencl this is another interesting one regarding making pinned editors configurable.
22322|I think we are good here given our work. The working files picker is not that important anymore.
22323|We will not change this.
22324|Not planning.
22325|So running vscode with --disable-extensions does appear to fix the problem.  And it appears that the culprit was the EditorConfig for VS Studio extension.   Thank you for the suggestion.
22326|"Yes, if I'm understanding you correctly :). When I navigate history, I want the history kept separate for every split and to thus only affect the editor split I'm currently typing in.  And to clarify, what I call ""editor split"" is basically a single view into a source file; these splits are created by clicking the UI button in the top right corner whose hover text says ""Split Editor"". I'm not sure they're the same as what you're referring to as ""editor groups"" as they're not grouping anything. What precisely is an editor group?"
22327|It works on Windows 10 if the legacy cmd is enabled and the setting is set to `cmd.exe`
22328|"Hi all, here is an update on the current state of the terminal and next steps.  The terminal can be triggered using <kbd>ctrl</kbd>+<kbd>&#96;</kbd> or by triggering the `View: Toggle Terminal` command in the command palette. It should work on all platforms, there are a few caveats on Windows though.  ### Windows  #### Powershell  Windows defaults to use powershell, the reason for this is that `cmd` on  Windows 10 does not work out of the box.  ![ps1](https://cloud.githubusercontent.com/assets/2193314/15479422/ecfb6516-20d4-11e6-9daa-920deee69e4a.png)  #### cmd  To get `cmd` to work on Windows 10 you need to open `cmd`, go to properties and check ""Use legacy console"".  ![cmd1](https://cloud.githubusercontent.com/assets/2193314/15479443/0d058e18-20d5-11e6-9e33-5e6373ad0b54.png)  ![cmd2](https://cloud.githubusercontent.com/assets/2193314/15479445/0fc36134-20d5-11e6-8644-8409571bf252.png)  Then add the settings value in VSCode:  ``` json ""terminal.integrated.shell.windows"": ""cmd.exe"" ```  ![cmd](https://cloud.githubusercontent.com/assets/2193314/15479462/2add8c06-20d5-11e6-926b-12e5bb898466.png)  The new Windows 10 cmd and by extension Windows 10 bash is not currently supported.  ### Linux & Mac  `$SHELL` is the default terminal on Linux and Mac, bash and zsh should both work, you can explicitly set this using the `""terminal.integrated.shell.unixLike""` configuration value.  ![linux_bash](https://cloud.githubusercontent.com/assets/2193314/15479618/daee2ae2-20d5-11e6-9ac2-16c585c67936.png)  ![linux_zsh](https://cloud.githubusercontent.com/assets/2193314/15479532/774be6a0-20d5-11e6-9549-373fd696ee3c.png)  ### Version 1.2.0 and Insiders  The plan is to test and fix the bigger issues before this lands in the stable May release  (v1.2.0), the issues big enough to be considered blockers are [marked with integrated-terminal and important](https://github.com/Microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aintegrated-terminal+label%3Aimportant). It should land in the next insiders build.  If you find an issue once you start playing with the terminal, if you could do a cursory search on the [integrated terminal tag](https://github.com/Microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3Aintegrated-terminal) first to help prevent duplicates that would be great. :+1: reactions on issues you experience and want fixed are also very useful!  ### Next steps  After the terminal lands and the major problems are ironed out, the next big thing I'd like to focus on is allowing multiple terminals at a time (#6458).  Thanks for your patience everyone, I'm going to close this issue as the basic terminal has landed :fireworks:"
22329|@bpasero that's good news! Any idea when this will reach insiders build ?
22330|Tricky, quick open is keen on bringing focus to the editor whenever it closes and I think that is good. But in this case it collides with the find widget wanting to get focus. I am sure there are other actions where this issue would show up, not just find.  Could play around with running editor focus from a timeout and checking if focus is somewhere in the editor but currently I see no API to find out if focus is within the editor in the find widget.  @alexandrudima ideas?
22331|"@bgashler1 there is ""Show Active File in Explorer""."
22332|"@bgashler1 or maybe you clarify, this is a global action and you want it on an entry in the ""Opened Editors"" view? If you click the file it should get revealed automatically in the explorer."
22333|I see, thank you for the pointer!  I still think that running batch file shim to discard output is pretty hacky way to achive the desired behavior. I.e. flash of a black cmd screen doesn't look particularly right.  BTW, where command line flags for code can be found?
22334|"FWLink to the blog post: http://go.microsoft.com/fwlink/?LinkID=798816  ""Insider builds are becoming daily builds! Please see our [blog post](http://go.microsoft.com/fwlink/?LinkID=798816) for more information."""
22335|"@bpasero whoops, completely forgot about the auto reveal behavior.  I think why I was confused was there was a weird glitch I ran into (that I cannot reproduce now) where everything in a particular folder was an odd color.  When I'm selecting ""Styles.scss"" I cannot see that it's selected because it's so faint against this background.  I cannot reproduce this state after I closed VS Code and reopened (I'll open an issue if I can figure it out).  <img width=""640"" alt=""screen shot 2016-05-23 at 11 53 12 am"" src=""https://cloud.githubusercontent.com/assets/11839736/15481007/4167427a-20dd-11e6-8472-3192e6f20252.png"">"
22336|@alexandrudima note that this is not a Chromium thing, Ctrl+Alt is simply the same shift state as AltGr.
22337|"I wonder if this could be somehow connected with https://github.com/Microsoft/vscode/issues/143 - with terminal support we basically get ""output"" window where we can type stuff in... which is basically what we need for REPL.   On the other hand we can just start REPL from terminal and additional extension point for this is not required any more."
22338|"> Then add the settings value in VSCode: > ""integratedTerminal.shell.windows"": ""cmd.exe""  How to do that?"
22339|I would say if quick open closes in this case due to blur, perhaps it is good to leave the focus alone.
22340|The other possibility in 1.2.0 is to use the new `vscode.startDebug` API so that you can allow the user to use the Debug Console.  It'd require your debug adapter to be able to run without a specific file, basically just dropping them into a prompt.  However, I'd much prefer to use the Terminal UI if I could provide the output for it.  I'm not really a fan of having a separate input box :)
22341|"@whitecolor <kbd>F1</kbd>, type ""settings"", <kbd>enter</kbd> should open your user settings.json file, you add it there."
22342|"It should be working, here's what it looks like for me (Ubuntu 16.04):  ![image](https://cloud.githubusercontent.com/assets/2193314/15482427/66a464d0-20e4-11e6-8538-3b051b8be7bd.png)  The image it references should be in `/usr/share/pixmaps`:  ``` ❯ ls /usr/share/pixmaps/ | grep code code-alpha.png code-insiders.png code.png ```  Can you check to see if that exists for you?"
22343|Cool, just look in your system for an `.editorconfig` file somewhere in your parent directories or in your user folder, most likely settings are being picked up from there.
22344|This sounds like you would want some sort of format on paste.
22345|@wyozi What would be the use-case?  The purpose of `TextDocumentContentChangeEvent` is to allow an interested party to correctly maintain a replica of the original document by applying the same edits described in it. We don't include an `oldText` because that would not be needed to maintain a replica.
22346|@Poorchop I have cloned the repository at https://github.com/TingPing/plugins and opened `HexChat/highlight.lua`. The indentation is guessed as Tabs@4.  Can you please check your user settings if you change `editor.detectIndentation` to `false` or if this reproduces when running VS Code with `code --disable-extensions`?
22347|@RajatBanerjee Can you please provide more detailed steps, I am not sure what the issue is?
22348|"@kumarharsh Thank you! Oh, now I see what you mean, after the `ctrl+c` the clipboard contains:  ```       <FormattedMessage         id=""Phases.aPhase.label""         defaultMessage=""a""         description=""Text for the 'a' state of a object""       />       <FormattedMessage         id=""Phases.aPhase.label""         defaultMessage=""a""         description=""Text for the 'a' state of a object""       />       <FormattedMessage         id=""Phases.aPhase.label""         defaultMessage=""a""         description=""Text for the 'a' state of a object""       /> ```  Now when pasting, since there are 3 cursors and the clipboard contains 15 lines, all the text goes to all the cursors. I definitely need to think how to improve this, but thank you for clearing it up!"
22349|I absolutely had no idea about double click.  May be a contextual tooltip?  Why not add the files to working files on a single click? Like sublime ?  On Monday, May 23, 2016, Benjamin Pasero notifications@github.com wrote:  > There are many ways to make a file durable, e.g. double click. With the > work on tabs there are even more ways (e.g. double click on the title). > Would you expect other ways? >  > — > You are receiving this because you authored the thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/6507#issuecomment-221042577
22350|Hm I added setting, mark use legacy terminal in cmd settings.  I press `ctrl+` `but it just jumps next tab. An I have no`view` menu at all in the UI.
22351|@json-Li That is most weird. Here is me doing it. I press and hold `Backspace` and then type:  ![8apt4usofc](https://cloud.githubusercontent.com/assets/5047891/15483404/ce7e71fe-2134-11e6-925b-d8645c18c583.gif)  Is it possible you have installed some extension that completes things (i.e. does this reproduce when running `code --disable-extensions`) or is it possible you have installed some text-expansion utility in the OS that expands `func` to `this is a test`?  What input method do you have configured, maybe that is the root cause that stops me from reproducing?
22352|@alexandrudima my use-case is recreating [smart backspace](http://blog.jetbrains.com/idea/2014/07/the-backspace-key-gets-smarter-in-intellij-idea-14-eap/) in vscode. It should only trigger if you press backspace, delete only whitespace within that edit action and there is only whitespace on the left side of the cursor. I would need `oldText` support for checking that only whitespace was removed in the edit.
22353|"Another one: ""Définition de l'apercu"" should be ""Apercu de la définition"".  Steps to reproduce: - open a file (typescript in my case) - right-click on a class or function _usage_  Observed: second entry of the context menu is ""Définition de l'apercu (Ctrl+Shift+F10)""  Expected: same entry should be ""Apercu de la définition"""
22354|@AlanWalk @startewho Can you please give me more details?  ![98ohzmz4yr](https://cloud.githubusercontent.com/assets/5047891/15483584/b646245a-2135-11e6-8512-32773cfc7226.gif)  Do you have this problem when launching VSCode with `code --disable-extensions` ?
22355|@CryZe First thanks a lot for the nice contribution. We were discussing in the team and realized that the snippets wouldn't better be contributed through an extension. That would give you more freedom of making changes, and gives others the opportunity to select if they want these snippets or not. Maybe we should remove our default snippets, so they don't interfere with snippets from extension. What do you think?
22356|"@wyozi You could simply **take** the backspace key. e.g. taking the key in java files  ``` ""contributes"": {   ""keybindings"": [     { ""key"": ""backspace"",       ""command"":""myBetterBackspace"",       ""when"":""editorTextFocus && editorLangId==\""java\""""     }   ] } ```  And then you would activate your extension `onCommand:myBetterBackspace` and you would register `myBetterBackspace` and implement it better via `activeTextEditor.edit`.  You can also invoke the original backspace command in certain cases."
22357|@whitecolor it will land in stable in early June and in the Insiders build in a few days.
22358|Ooh, I see. That's definitely a nicer way to do it. I guess that solves at least my need for this feature.
22359|Forking term.js would also be necessary if we wanted to do any improvements to the UX inside the terminal. For example improving the selection experience (related to this), adding links or something to terminal for tighter integration with editor (#1037), making the cursor blink without breaking selection, etc.
22360|> Perhaps a solution could be to have a command that you can invoke to clear the cache? > :+1:
22361|I'm not fully sure, but the developer of the RustyCode extension might have some opinions on that @saviorisdead (I hope mentioning works if he's not involved in this repo).
22362|:+1: Nice. I will close then this issue for now, if the need arises in the future we can create a new one or reopen it.
22363|@vors it's done that way to avoid launching Electron when not necessary and to suppress its output once launched, plus the different platforms launch in slightly different ways (plus .sh and .cmd are required just for Windows).  `code --help` will give you the command line flags, provided the `bin/` dir is in your `PATH`. Also see https://code.visualstudio.com/Docs/editor/codebasics#_additional-command-line-arguments
22364|@bpasero seems reasonable to keep this behavior then.  It's not too big of an issue for me anymore since I can just clear them up using <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>w</kbd> then <kbd>esc</kbd> to dismiss the errors. It was a pain before I discovered `workbench.files.action.closeAllFiles` which is probably the default now?
22365|I think it would better move this to `RustyCode`, as @aeschli said, cause it would be easier to support/change it. But again it may force user to install `RustyCode` just for snippets.
22366|FWIW, I also find this to be super annoying.  I've never seen another editor suggest random words from the file when typing comments.  It's distracting and unhelpful.  I'm fine with having to set a value to turn it off, but please give me that ability... and I mean turning off suggestions in comments entirely.  I'm not sure why this issue is marked as closed... unless I'm missing something, there's been no proposed workaround for the problem of showing suggestions, only for turning off autocomplete on enter, which is more of a symptom than the actual disease.
22367|ok, will it support multiple terminals per opened project?
22368|great, thank you!
22369|Seems fixed now, removing important.
22370|@whitecolor only a single terminal per vscode windows in Stable, #6458 tracks multiple terminals.
22371|Still waiting on signing.
22372|Still waiting on signing.
22373|"You can now contribute injection grammars using the regular 'grammar' contribution point:  ``` json ""grammars"": [             {                 ""scopeName"": ""source.todo"",                 ""path"": ""./syntaxes/todo.json"",                 ""injectTo"": [  ""source.js"", ""source.ts"" ]             }, ```  Check out https://github.com/Microsoft/vscode-textmate/blob/master/test-cases/first-mate/fixtures/todo.json for an example of an injection grammar.  We don't have much experience with this type of grammars, but we hope they can provide a solution for language additions such as highlighting Angular templates.  Feedback is highly welcome."
22374|This is the default behavior of Markdown, if you are going to escape `<` or `>`, use `&lt;` or `&gt;`. See https://daringfireball.net/projects/markdown/syntax#autoescape for more info.
22375|"i changed it to:  ``` { ""key"": ""ctrl+k ctrl+0"",         ""command"": ""editor.foldAll"",                                      ""when"": ""editorFocus"" }, { ""key"": ""ctrl+k ctrl+j"",         ""command"": ""editor.unfoldAll"",                                      ""when"": ""editorFocus"" }, ```"
22376|![image](https://cloud.githubusercontent.com/assets/86080/15484713/74e1f58e-218f-11e6-9273-b1dec3cc435a.png)  here's a sample piece of code,  line 19 got the wrong comments, its a .jsx and says JavaScript React
22377|Ok, now I think I understand. The inline react html section does not recognize `//` as a comment. Thanks for clarifying!
22378|yeah, // is not a comment, it has to be commented out with {/\*  */}
22379|"So is the idea here to basically be able to launch a powershell instance from an extension (or python, ruby, etc.)? #143 pretty much covers this entirely doesn't it?  @daviwil what do you mean exactly by ""if I could provide the output for it""?"
22380|@Tyriar I think the powershell (or python, ruby, etc) instance runs in debug mode and interacts with the VS Code debugger UI. This applies to the REPL as well, so it should be possible to use the debugger UI to inspect the objects returned from the REPL eval.
22381|At least in the case of the PowerShell extension, I am hosting a PowerShell session in my language server (not as a separate instance of powershell.exe).  This allows the user to write and evaluate PowerShell code and then have their session be affected by what's executed (new commands show up in IntelliSense results, etc).  In the case of the terminal control, it means that VS Code wouldn't be performing console emulation for powershell.exe. Instead you'd be sending my extension the text that the user enters and then allowing me to write output back to the terminal.  If you check out the PowerShell ISE editor that ships with Windows (powershell_ise.exe), you'll see what I'm trying to achieve.  Andre's right, currently we expose a PowerShell console via the VS Code debugger and that works pretty well.  The dream setup would be using the Terminal UI with my debug adapter backend since that would provide the exact experience PowerShell users expect.
22382|@nojvek sublime does not add files to working files on single click, you need a double click or edit.
22383|Probably next week after the May release is wrapped up.
22384|An editor group is the thing that opens when you split, it has a stack on its own (in the future with the work of tabs). You can navigate between tabs in that group.  To be clear, we will still have a linear history of any editor open in the past but on top of that you can navigate between tabs per group that you opened.
22385|This feature should definitely be built. I was debugging some ruby code and I had to interact with the terminal to enter some input that the program needs and bam! No terminal for me to interact with.
22386|Most likely PowerShell is running as a 32 bit process - PSReadline is not installed in Program Files (x86).
22387|I am getting EPIPE error with alpha build when I set shell to powershell. Once I get this error I am not able to edit content from editor window. I need to forcefully close VSCode to get rid of this error. The weird thing is my mouse pointer is keep blinking with loading icon. ![image](https://cloud.githubusercontent.com/assets/17735796/15485706/ab19694c-20f5-11e6-851c-eb49f95d3f30.png) ![terminalissue](https://cloud.githubusercontent.com/assets/17735796/15487873/a8d850fc-2105-11e6-9681-74d2ec665a7f.gif)
22388|In version 1.0 this worked great (on Mac). In 1.1x it is once again broken. This the most compelling feature for me to use VSCode over Sublime and without it I gotta go back to Sublime. Any chance for a fix?
22389|Hi **@grazies**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
22390|Hi, The problem remains with `code --disable-extensions`. @alexandrudima  - I type `bold`, no any tip display to. - I add a snippet to `User Snippets`, and I type it, no any tip.  ![gif](https://cloud.githubusercontent.com/assets/4654826/15489877/0d7ba8de-2196-11e6-8003-c6158803fc39.gif)
22391|Maybe you can try to do like this.  ``` let editor = vscode.window.activeTextEditor; let range = editor.document.lineAt(lineNumber-1).range; editor.selection =  new vscode.Selection(range.start, range.end); editor.revealRange(range); ```
22392|This is not .ts file, it is .js file.
22393|"@lukaschal string location is [goToDeclaration.nls.resx.lcl](https://monacotools.visualstudio.com/Monaco/_git/MonacoLocalization#path=%2FLocalize%2Ffra%2Fvscode%2Fsrc%2Fvs%2Feditor%2Fcontrib%2FgoToDeclaration%2Fbrowser%2FgoToDeclaration.nls.resx.lcl&version=GBmaster&_a=contents)  ```   <Item ItemId="";actions.previewDecl.label"" ItemType=""0;.resx"" PsrId=""211"" Leaf=""true"">     <Str Cat=""Text"">       <Val><![CDATA[Peek Definition]]></Val>       <Tgt Cat=""Text"" Stat=""Loc"" Appr=""PreApproved"" Orig=""New"">         <Val><![CDATA[Définition de l'aperçu]]></Val>       </Tgt>       <Prev Cat=""Text"">         <Val><![CDATA[Peek definition]]></Val>       </Prev>     </Str> ```"
22394|thanks
22395|@groone Thanks. it worked.
22396|Thanks, I see.
22397|@v-pavanp can you retry this on latest alpha? This is fixed on the machine I was reproducing consistently on now.
22398|@lzybkr is `\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe` the correct executable?
22399|"@isidorn it seems the ""Opened Editors"" view is listening to model change events even if the viewlet is not visible? The view should rather ignore events when not visible and once becoming visible do the refresh and reveal."
22400|Well that's weird! I'm using it on both my Ubuntu 15.10 laptop and 16.04 desktop, and the icon is missing as I described on both machines.  The icon is present in /usr/share/pixmaps as it should be.  I just changed the line Icon=/usr/share/code/resources/app/resources/linux/code.png back to: Icon=code  And it still shows the correct icon. So the icon is ok. However renaming the file from vscode.desktop to code.desktop, I get the weird icon without title back.  Before the .deb-installation file was available, I installed it manually - perhaps that could be of any significance?
