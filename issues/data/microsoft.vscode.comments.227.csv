22601|Yes, our css/less/sass supports are single file only.
22602|@mattdufeu You maybe want to ask this question on stackoverflow.
22603|It works if you type slowly...
22604|I was able figure out how to use the debug tools to trace through the code and I think I understand what is going on.    It looks like my problem is in the following section of code: https://github.com/Microsoft/vscode/blob/889fe706989a52613d5698c72252a4e1a0f67b0d/src/vs/workbench/parts/git/electron-browser/electronGitService.ts#L47-L84  I tested opening vscode using my automator script and for some reason the `which git` command run by vscode is getting the value `/usr/bin/git` which is different from the value I get when running the same command in a terminal.  Because of the value returned from the `which git` command the `xcode-select -p` command gets run by vscode.  On my machine this results in the following error which has an error code of 2:  ``` xcode-select: error: unable to get active developer directory, use `xcode-select --switch` to set one (or see `man xcode-select`) ```  Because the `xcode-select -p` command failed it returns the `git not found` error even though the failure appears to be unrelated to the presence of git.  I'm guessing I can work around this by making changes in either my automator script or in the xcode configuration on my machine.
22605|More insights: - it does reproduce on Windows only for me - it does reproduce in our shipped release already - it seems to be related to the fact that we spam the output panel with lots of output (thousands) in short time
22606|"For verification.  Ways to remove the emmet for example:  ```     // { ""key"": ""tab"", ""command"": ""-editor.emmet.action.expandAbbreviation"", ""when"": ""editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !editorTabMovesFocus && config.emmet.triggerExpansionOnTab"" }     // { ""key"": ""tab"", ""command"": ""-editor.emmet.action.expandAbbreviation"" }     // { ""command"": ""-editor.emmet.action.expandAbbreviation"" } ```"
22607|Good catch. That still doesn't explain why it works _sometimes_ though...  Also, what do you get when running `$SHELL -ilc env`? We run this on startup to get the correct environment in Code, which should make it pick up `/usr/local/bin/git` as the right `git` to use.
22608|"@bgashler1 @stevencl when @joaomoreno tested this today (i looked over his shoulder) we also wondered if there should be a ""Close All Editors"" on the overflow menu of a group because people might misunderstand it as a way to close all editors of the group. Maybe we should not have the other close actions in there?"
22609|@sandy081 What editor font setting do you use? It looks very small
22610|I may not be able to provide a sample repo because we are using GitHub enterprise and I'm not allowed. I will, however, try to find time to reproduce it today and hopefully offer more details.
22611|It is not as much _moving_ it as it is _placing_ it.  I wouldn't find it so weird if _any_ new editor would always open at the end of its group.
22612|sort of by design
22613|"Following are my custom user settings:  // Place your settings in this file to overwrite the default settings {     ""editor.fontSize"": 10,     ""files.autoSave"": ""afterDelay"",     ""editor.renderWhitespace"": true }"
22614|> MRU order across all editors  Well, Cmd+P is showing that, right? I am not saying we need all of those. I am aiming for an inventory and then we might have different ideas.
22615|> I wouldn't find it so weird if any new editor would always open at the end of its group.  that
22616|@joaomoreno Not sure how to phrase this... I can make the blog post to be more clear about this, and that is a more durable document.
22617|Verification, search by `cpptools`, it should show the C++ extension.
22618|@jrieken Cmd+P is yet another source of navigation which does not match any of the ones we have for stacks/tabs because it is is a history of any editor you ever opened regardless of the editor being closed or not. Ctrl+Tab and Cmd+Alt+Tab get their items removed when you close an editor.  So, I think we end up having three: MRU in group, spatial across all groups and MRU in general editor history.
22619|"@joaomoreno @jrieken maybe you could comment on https://github.com/Microsoft/vscode/issues/6812  I am wondering if we should remove the whole idea of showing the preview entry under ""opened editors"". I think it would fix some issues."
22620|This is true for SASS variable declarations, hence removed CSS tag.
22621|"That is **not** OK! The product version is useless. Imagine, I have thousands of PE files in folder, and as I've said, file manager is able to show **file version**. What meaning has **product** version if I'm browsing **files**? Don't you suggest to open properties of each file to realize what is it? Instead of take a look in column ""file ver""? So..."
22622|"I just noticed that ""Ctrl + click to follow link"" on a URL still uses the old behavior, so the behavior is now inconsistent between Go to Definition and URLs."
22623|VSCode stop working after I intalled VS2015 updates
22624|It works but very very slow
22625|Using linux.  ``` sh > which vscode /home/saml/bin/vscode > file /home/saml/bin/vscode /home/saml/bin/vscode: symbolic link to `/home/saml/opt/VSCode-linux-x64/code'  ```  Just noticed there's  `/home/saml/opt/VSCode-linux-x64/bin/code`  bash script as well. Using that does _not_ set VSCODE_CLI=1 either.  It feels like executing login shell behavior could be inverted: by default login shell isn't executed. But Mac OSX app launcher(?) would execute login shell if needed envvars aren't set.
22626|Any update when this will be available?
22627|![2016-05-24_18-43-08](https://cloud.githubusercontent.com/assets/1222388/15510350/9e4212a6-21df-11e6-87e2-4e6617e6b488.png)  Even within Explorer. I just do not want to have spare column to see the version.
22628|Are you a wizard?! (aka: yes, that worked ... thanks)
22629|"I get the following from my terminal after running the command:  ``` TERM_PROGRAM=Apple_Terminal TERM=xterm-256color SHELL=/bin/bash TMPDIR=/var/folders/nt/dpqjbhc10jj3sc0_qcrdz1v80000gn/T/ Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHMWKWftqG/Render TERM_PROGRAM_VERSION=343 TERM_SESSION_ID=C2E458F3-510E-4E3D-A8F6-0C34F6D13B51 USER=natewallace http_proxy=http://10.215.109.16:8080/ SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.6q4G4QCEXe/Listeners __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin PWD=/Users/natewallace LANG=en_US.UTF-8 XPC_FLAGS=0x0 https_proxy=http://10.215.109.16:8080/ XPC_SERVICE_NAME=0 HOME=/Users/natewallace SHLVL=2 no_proxy=localhost,*.local LOGNAME=natewallace _=/usr/bin/env ```  I get the following when running the command using the exec function within a running instance of vscode that doesn't recognize git being installed:  ``` VSCODE_CLI=1 SHELL=/bin/bash TMPDIR=/var/folders/nt/dpqjbhc10jj3sc0_qcrdz1v80000gn/T/ Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHMWKWftqG/Render http_proxy=http://10.215.109.16:8080/ USER=natewallace SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.6q4G4QCEXe/Listeners __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 GOOGLE_API_KEY=AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin PWD=/Users/natewallace ELECTRON_NO_ATTACH_CONSOLE=1 XPC_FLAGS=0x0 https_proxy=http://10.215.109.16:8080/ XPC_SERVICE_NAME=0 HOME=/Users/natewallace SHLVL=4 VSCODE_NLS_CONFIG={""locale"":""en-us"",""availableLanguages"":{}} no_proxy=localhost,*.local VSCODE_SHARED_IPC_HOOK=/var/folders/nt/dpqjbhc10jj3sc0_qcrdz1v80000gn/T/Code-e5f2ec-shared.sock LOGNAME=natewallace VSCODE_IPC_HOOK=/var/folders/nt/dpqjbhc10jj3sc0_qcrdz1v80000gn/T/Code-e5f2ec.sock VSCODE_PID=1663 _=/usr/bin/env ```"
22630|Hello. I made video for this problem. https://www.dropbox.com/s/e07m581qicygpnk/Untitled.mp4?dl=0
22631|I've noticed this as well even after doing `code-insiders --disable-extensions`. - VSCode Version 1.1.1-insider - OS Version: OS X 10.11.5
22632|I wanna contribute to project. how can I start? if you give me small tasks, like bugs fixing i can resolve  it.
22633|Yes.  See my stackoverflow answer if you want to run the 64 bit version of PowerShell:   http://stackoverflow.com/questions/19055924/how-to-launch-64-bit-powershell-from-32-bit-cmd-exe
22634|I'm using it with JavaScript. Intellisense and everything else are pretty much fine and even error checking works at normal level. Just the format stopped working. Only other noteworthy thing  is that VS Code seems to be bit off with indentation also at some points. Like when adding a curly bracket at the end of the line and then the cursor is between the curly brackets and I press enter it indents the bracket even though it kind of should not. But this does not seem to happen always.   Is the error message any related? Could there be some debug flag or something that I could enable and see some explanation why nothing is happening when I try to format the code?
22635|I cannot repro the issue after the latest VS Code updates. Can you assign this back to me, without closing it?
22636|"Again, I am using a Mac.. and using El Capitan (since I did not mention that before). The keyboard layout is ANSI US. I speculate the layout is correct though, as VMWare and Parallels both handle the keyboard properly. Actual keyboard is a Logitech Wave.  Oddly enough, Numpad + and - are fine (numpad_add and numpad_subtract). It's the numbers that are not correct. In the capture window, they report 0, 1, 2... rather than numpad0, numpad1, etc.  Here are a couple of the bindings I had set up and were working on the Mac on 1.0 that no longer work with 1.1.x. My primary goal is identical behavior between VS and VSC on PC and Mac.  ``` {     ""key"": ""numpad9"",     ""command"": ""cursorPageUp"",     ""when"": ""editorTextFocus"" }, {     ""key"": ""shift+numpad8"",     ""command"": ""cursorUpSelect"",     ""when"": ""editorTextFocus"" }, ```"
22637|"**Why it might be good to remove them:** - I also haven't been loving the italicized text in Open Editors now that I've been using it.  I didn't feel like it was strong enough of an indicator to help me find a preview editor that was buried somewhere in a group (it's like a needle in a haystack--I ).  I didn't notice that the preview editor was moving in the group, but after seeing @jrieken's gif, I see why this is confusing. - Sublime also does not show preview tabs in their Open Files pane, but they do get their own temporary tab, and personally that makes sense to me for the most part.  **Why it might be bad to do so:** - With tabs disabled, it may be confusing after closing a file that a mysterious preview file that was hiding in the stack shows up instead of the file shown above in working files. - It may be less obvious how to pin a ""Diff view"" or some other kind of special editor, because it does not have something you can double click (perhaps we could allow double clicking the editor's title shown at the top of the group).  **Ideas on making it work as is:**  I thought about how we might solve this without eliminating preview editors completely from the list. 1. Use smooth motion _transitions_ (like Chrome and Sublime do with tabs) 2. Always leave a _dedicated space_ at the end of each group's list in Open Editors so that opening/closing a preview editor will never shift the Explorer files up or down.  Look at this crude prototype that demonstrates how smooth motion transitions might make it more clear what's going on in the stack.  ![previeweditorsinopeneditors_5_24_2016](https://cloud.githubusercontent.com/assets/11839736/15514019/ec2177e4-219b-11e6-8374-eea6ddb6706c.gif)  Thoughts?"
22638|Duplicate of https://github.com/Microsoft/vscode/issues/6455, I'm interested in your thoughts on this @joaomoreno if you want to comment. <kbd>esc</kbd> to dismiss would certainly be useful to close the terminal, and vim is the only example I could think of. Not sure if it should be a setting or what.
22639|:+1:
22640|It's wobbly when there is not enough content to fill up the panel. I made it bottom aligned to prevent the wobbliness when the terminal had content.  Not sure there is a way around this unless we fork term.js and change the way that the terminal is represented. Doing so would also enable improvements to selection and enable scroll bars (#6602).
22641|Opps, it works when I use the right syntax (`var(...)`)
22642|Related to this, when `var(` is types, intellisense should pop up.
22643|Yes the plan was to remove this after adding it to stable (which I did yesterday). Thanks for the reminder :)
22644|"I think we need to look at the long term of where this is going.  We introduced the single vs. double arrow because of tabs.  Having two different types of arrows for Open Editors isn't necessary with tabs disabled, but it can be helpful for tabs.  To be consistent we used them in both.  **Single Arrow** Single arrow does not mean disabled.  It means that none of your editors are overflowing.  You can click on it to show you all editors in the list.  This is a convention in many text editors.  **Double Arrow** Double arrow is the same as a single arrow, except that it means that one or more editors are overflowing.  This is particularly helpful for tabs, since we don't truncate tabs like other editors.  So someone will know immediately that not all of his/her tabs are in view in case she/he is wondering where something is.  #### Isn't a single arrow useless for tabs-disabled scenarios?  Obviously, using single and double arrows isn't necessary with tabs disabled, because by definition we can only show one ""tab"" at a time (i.e. if you have tabs disabled and more than one editor in any group, then that group will always be overflowing).  However, we decided to be consistent for reasons explained below.  #### Why do we care about consistency if some of this only benefits tabs-enabled?  Users have expressed many different preferences.  Some want no tabs, some want no working files, some want neither, and it's possible some will want both.  We needed to make our design and UI not break no matter what preference users elect.  So, we left it consistent so that meanings never change and so all workflows are possible.  #### What could we do to improve this while still remaining consistent?  We could remove single arrows in all cases when only one file is open.  This would benefit all workflows.  In tabs-disabled scenarios, this would mean you would only ever see a double arrow (for more than one file open) or nothing (for one file open or less).  Then we don't even need a disabled button, which keeps the experience lighter."
22645|See my comment at https://github.com/Microsoft/vscode/issues/6812#issuecomment-221348884
22646|"Fix is here: https://2buntu.com/articles/1529/visual-studio-code-comes-to-linux/  > The keyboard shortcut for doing this is Alt+Click, which by default will move the window instead of adding another cursor. To fix this, we need to change a setting:  `gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier ""<Super>""`"
22647|Code was definitely not running prior to starting from the GUI (this happened immediately after a cold boot).  The output of `$SHELL -ilc env` is at https://gist.github.com/nwgh/78e8db860bc09e4d9278b463eadce79e (I wasn't sure whether you wanted output if it's run from a terminal or as a task within code, so I added both, as well as the tasks.json used to run the command).  Looking at the output, there is no discernable difference. I haven't yet updated to the latest build on this machine, so I'll double-check to make sure the problem still exists with my real tasks.json
22648|Just tried it on my Ubuntu 15.10 laptop. Renaming the code.desktop to vscode.desktop gives me both title and icon.  I have no clue why, but the same problem was on both systems
22649|@isidorn I couldn't figure out how to debug the C++ program. I did the following: - Install cpptools - Create `vscode-repro.cpp` - Tried to debug, I need to compile first - After some experimenting I landed on this to compile: `g++ -Wall -Wextra -Werror -std=c++11 -c vscode-repro.cpp -o vscode-repro.out` - Tried to debug, hit this:      ![image](https://cloud.githubusercontent.com/assets/2193314/15515941/4d05bcf6-21a5-11e6-81e8-be250e486295.png)      ![image](https://cloud.githubusercontent.com/assets/2193314/15516121/37a162ba-21a6-11e6-9fb6-6b375feb1d16.png) - Because of the permission error I thought I'd add +x to the .out file but it didn't work.
22650|@alexandrudima restart and checking processes does not seem to show anything related to vscode.  @joaomoreno nope this is my laptop - a MacBook Pro (15-inch, Early 2011) 2.2 GHz Intel Core i7 - 8 GB 1333 MHz DDR3 running OS X version 10.11.4 (15E65)
22651|@joaomoreno In that case #6588 should fix the problem as you're not meant to run electron directly.
22652|Instead of another setting, how about a generic command line args setting? `--disable-gpu` is another common one people want.
22653|@joaomoreno ditto
22654|Recursive peeking is useful in a lot of situations. However, I'd expect it to reuse the existing window and on ESC or close box to take down only the most topmost one.
22655|@alexandrudima Please have a look :)
22656|@kieferrm please close item after setting last checkbox.
22657|@vaishnav4226 the official steps (including running the sh script) did the trick for me as well. Thanks @jasonmm
22658|I've created #6833 to track this.
22659|Any repro steps would be welcome, I am very interested in tracking this down. You can also open Developer tools to see if there's any exception in there...
22660|Try pointing the symlink at `/home/saml/opt/VSCode-linux-x64/bin/code`
22661|Not sure, but seems more like an issue with Unity to me based on what your comments.
22662|I can't repro this, perhaps something in your prompt script is causing it? I use bash and don't have a custom setup for zsh so I'm on the default.
22663|@isidorn thanks, I'll take it.
22664|Panel no longer breaks, it just relaunches. However that caused this issue #6683
22665|Good suggestion, that would also work around the problem of it not repainting correctly. Not super high priority so moving to June.
22666|After Windows reboot I can't repro the bug, seems it can only be triggered by some special kind of json content. Need more info from @xenoputtss , otherwise I think we can close it and reopen if we can repro it constantly.
22667|I believe I've reproduced this before, but I think it's one in the category of bugs that would require forking term.js.
22668|I could not reproduce it a second time :(
22669|Curious, from all my reading `#!/usr/bin/env bash` is superior and more portable than `#!/bin/bash`.
22670|I am still getting EPIPE error though pop-up is not showing up. But in developer tool. Look at bug #6834
22671|Duplicate of https://github.com/Microsoft/vscode/issues/6683
22672|Duplicate https://github.com/Microsoft/vscode/issues/6455
22673|Oh yeah :+1:
22674|Dup of #6739
22675|also happens in html
22676|It wouldn't make sense to pull the values from themes. tmThemes, while not very strict, simply would not have these new values when migrating from other editors, so the majority of themes would not have the values we desire. Also, currently 2 themes cannot be applied at once.  This situation, while not ideal, allows the user to customize the colors in isolation on their theme.  Possible steps forward: - UI themes #1231 - Terminal themes/extensions that set these values?  There is also more customization that may be added in the future, I believe it's possible to set a 255 color palette for the terminal as well.
22677|@joaomoreno ignore this, I opened it based on someone comments but I don't think it's actually a problem.  What I meant what `code.cmd --wait` should wait until the process stops before returning.
22678|Duplicate of https://github.com/Microsoft/vscode/issues/6458
22679|From @bpasero in #6708  > I think pretty early on we will get the feature request to support multiple terminals. As soon as you run a program from the terminal, you cannot use it anymore. >  > Maybe we just allow to create new terminals with an action from the terminal panel and show all opened terminals from a dropdown similar to output channels? >  > We did this in Monaco on Azure: >  > ![e747b8e8-2180-11e6-999f-0e6a822cb5c3](https://cloud.githubusercontent.com/assets/2193314/15519907/906b854e-21b8-11e6-8453-9cc0bade1abe.png)
22680|It is a problem in the UI code.  `ReferenceWidget.setModel` returns undefined in some cases.  ``` TypeError: Cannot read property 'then' of undefined     at file:///C:/Alex/src/vscode/out/vs/editor/contrib/referenceSearch/browser/referencesController.js:120:60     at Object.notifySuccess [as _notify] (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1440:59)     at Object.state_success_notify.enter (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1127:30)     at Promise_ctor.WinJS.Class.define._run (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1343:29)     at Promise_ctor.WinJS.Class.define._completed (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1311:18)     at argDone (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:2072:37)     at Promise.then.errors.(anonymous function) (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:2097:78)     at Object.notifySuccess [as _notify] (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1440:59)     at Object.state_success_notify.enter (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1127:30)     at Promise_ctor.WinJS.Class.define._run (file:///C:/Alex/src/vscode/out/vs/base/common/winjs.base.raw.js:1343:29) ```
22681|Right now we don't mess with any input/output at all, it's all deferred to the shell. This works perfectly for bash, just how it works via `gnome-terminal`.  ``` $ history ...  1981  npm init  1982  npm install open  1983  node  1984  history  1985  ls  1986  history  1987  exit  1988  history ```  What platform/shell did you have in mind specifically?
22682|This one is related to limitations of xterm.js
22683|This is intentional, closing in favor of #6683 and #6762
22684|We could make it a boolean flag and all other args are the extensions?
22685|Reopening as we should be able to improve the experience over adding --install/uninstall-extension multiple times
22686|I verified I could install and remove after 096221c, @dbaeumer might be good for you to also do a quick verification to make sure.
22687|I'll look into this.  Do you have any input on what you would be expecting instead of an ellipses icon?
22688|That's odd, I can't reproduce.  Maybe it was just a weird glitch I got into.  I'll reopen if I can reproduce it again later.
22689|Here's the issue where NTVS is tracking this problem: https://github.com/Microsoft/nodejstools/issues/934  The behavior we seeing is nondeterministic, sometime debugging works and sometimes it doesn't. I first noticed it in node 6.1, but also see it in 6.2 and suspect 6.0 is also effected.  This Node-inspector issue may be related too: https://github.com/node-inspector/node-inspector/issues/864
22690|"@kieferrm VS Code should not have the same issue as NTVS (our code injection should work around the ""illegal access"" issue in callbacks). I think you are seeing a different issue, but I'll try to reproduce tomorrow."
22691|Hello @ayatokura ,  At present we don't have documentation localization scheduled. What languages would you be interested in seeing localized?  Also which topics do you think would be more useful?  - @gregvanl
22692|I took this as a given personally, I guess the CLI could ping the instances to show the popup, not sure it's worth it though.
22693|For some extensions, for example C/C++, a warning is displayed on Windows saying debugging is not supported. It will not show this message until Code is restarted.
22694|Thanks @joaomoreno. Fair enough.
22695|In windows cmd, when i run same app, it prints: ![image](https://cloud.githubusercontent.com/assets/13858505/15523433/f2b31b9e-2222-11e6-9439-1e3182646500.png)
22696|Fixed https://github.com/Microsoft/vscode/commit/8fc7a0974317188faf8906097940b72b1537360c
22697|Also items added on the lower status bar do not show until restarting.
22698|~~Toggling the terminal continually puts zsh in a weird state too:~~ (this problem seems fixed with switch to xterm.js)  ![image](https://cloud.githubusercontent.com/assets/2193314/15524184/ed10a2a4-21d4-11e6-85cd-f7e896d7dcbd.png)
22699|Thanks Andre for the details on the proposal. I have a few questions:  I don't think this is possible, but is there a way of passing arguments to the action being launched by VSCode? Something that would be useful might be to pass the `launch.json` entry that is being launched. It would be useful if we want to implement multiple configurations for attaching, e.g., remote machine and locally. If passing arguments to the action is not possible, two options are: 1. Have multiple Quick Pick dialogs every single time the action is triggered, e.g., the first level would be the type of attach (local vs remote). This seems inconvenient given that some users will always do local and some will always do remote. 2. Have multiple actions that serve as entry points for the different types of attach, and offer multiple entries in the `launch.json` file, each with a different action. This has the disadvantage of having multiple entry points, and depending on the attach permutations, may not scale nicely.  Do you have any other suggestions? I think option 2 is more user friendly.  Some questions about the behavior of this feature: 1. What happens if there is more than one action in the active `launch.json` entry? Will each action be called sequentially? In this case, it seems to me that passing the `launch.json` entry to each action might be useful. 2. What happens if the provided action is launched via the command palette? 3. How is the result string communicated from the debug adapter to VSCode?
22700|@kieferrm are you on a VM?
