14601|This issue was moved to jakob101/RelativePath#4
14602|With latest alpha this seems not to happen
14603|I found the code intellisence can not work well , This maybe a big bug
14604|While it is some work for the user to copy/paste the snippets to the other languages, it gives the user full control over what snippets show up.  One issue I see is that you don't always want JavaScript snippets show up in TypeScript, where you rather want snippets that include types.
14605|Revisit in April
14606|Dups #3841
14607|@gregvanl @egamma difference is that `tsd` installs dependencies recursively, that is for _express_ `serve-static` and `express-serve-static-core`. Once I run the `typing i --ambient` command for them things work.  ![screen shot 2016-03-21 at 11 32 12](https://cloud.githubusercontent.com/assets/1794099/13916059/94100068-ef58-11e5-9d22-d89437db1c38.png)
14608|this is the call to rule them all: `typings install node express serve-static express-serve-static-core --ambient`
14609|I still see the freeze on latest. @isidorn, @bpasero  I though the output window throttles.
14610|as outlined by @pflannery [here](https://github.com/Microsoft/vscode/issues/4467#issuecomment-198968898), what you trying to do isn't valid C# so you should not expect IntelliSense
14611|@bpasero Any repro steps? Did you have extensions installed that provide documents?
14612|@jrieken This is most weird. - the `_uri` on `ExtHostDocumentData` is set only in the ctor. - it is accessed in `_acceptModelAdd` so we know that this document was not created with an undefined uri:  ``` typescript let data = new ExtHostDocumentData(this._proxy, initData.url, initData.value.lines, initData.value.EOL, initData.modeId, initData.versionId, initData.isDirty); let key = data.document.uri.toString(); ``` - the `_acceptModelRemoved` only works if there is an `ExtHostDocumentData`
14613|@dbaeumer @chrisdias   Summary from the stand-up discussion: 1. Finding the `Configure Locale` action in the Command Palette when you do not understand the display language doesn't work.  2. Configuring the locale command should have a fixed slot in the UI so that the user can always find it independent of the currently used display language. 3. Users do not know which display languages are available  4. Users do not know what the abbreviations for a particular display language is.  This can be addressed by a command in the UI, that shows the user the list of available locales e.g., in the quick box and the user can select from this list as suggest above https://github.com/Microsoft/vscode/issues/4170#issuecomment-199182447. With this approach it becomes an implementation detail where the locale information is stored. Since we do not modify the user's settings  file programmatically, the locale information should **not** be stored in the .settings file.  Adding the quick box locale UI is not in scope given that we are frozen Adding a menu item as an intermediate step that opens the file is a small improvement, but I'd rather do nothing than making an intermediate solution so popular in the current UI.  @cdias what do you think?
14614|I profiled it and the time is still spent mostly in the Output Window (see attached screen shot, self time)  ![capture](https://cloud.githubusercontent.com/assets/1931590/13916747/b2f9e562-ef5c-11e5-8000-6cf674d1d004.png)
14615|This issue was moved to textmate/c.tmbundle#41
14616|yeah, that's why I am so puzzled
14617|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/121
14618|The screenshot seems to be for a different issue, can you confirm?
14619|The only funny business in there is that the document is returned via `weak.get`. I am not sure... maybe something is broken inside `weak` ?
14620|In the setup below the above scenario works, see the screenshot. So I wonder what the difference is between yours an my setup. Do the setup below work for you?  ![image](https://cloud.githubusercontent.com/assets/172399/13916854/64573d28-ef5d-11e5-85a3-8cef50f89f8e.png)  The ${workspaceRoot} setting is separate from the JavaScript language service.
14621|Maybe it is near death (whatever that means) and accessing any methods/members on the proxy returns undefined?  https://github.com/TooTallNate/node-weak/blob/master/src/weakref.cc#L280  ```     get isDocumentReferenced(): boolean {         return this._documentRef && !weak.isDead(this._documentRef);     } ```
14622|Looks like if the proxy is dead, the return value for a getter is undefined:  https://github.com/TooTallNate/node-weak/blob/master/src/weakref.cc#L74  ``` NAN_PROPERTY_GETTER(WeakNamedPropertyGetter) {   UNWRAP   info.GetReturnValue().Set(dead ? Local<Value>() : Nan::Get(obj, property).ToLocalChecked()); } ```  I think `Local<Value>()` is undefined.
14623|In the sleep 1 seconds case the child process managed by node never receives any output data. I have no idea right now why this is the case.
14624|Their example at https://github.com/TooTallNate/node-weak#example mentions that a GC`d proxy acts as an empty object:   ``` // `callback()` above is called, and `ref` now acts like an empty object. typeof ref.foo === 'undefined' ```  which is sort of what we're seeing with `document.uri`
14625|![screenshot 47](https://cloud.githubusercontent.com/assets/11838212/13917088/77580e20-ef80-11e5-9ce0-75a9ec4a9fb0.png)  this is no work also
14626|![screen shot 2016-03-21 at 12 16 30](https://cloud.githubusercontent.com/assets/1794099/13917069/c5c412ce-ef5e-11e5-8c0a-cb3418c1fdb7.png)  Over the course of 90 seconds more and more instances of `t` have been accumulated. Since `app.js` roughly prints 10 messages per second, I assume that I have reached the max already
14627|"@jrieken   I think there could be a theoretical ""data race"" with the GC in this code:  If a Garbage Collection runs between the if stmt and the return value, then `_documentRef` is dead and we don't create a new one.  ```     get document(): vscode.TextDocument {         // dereferences or creates the actual document for this         // document data. keeps a weak reference only such that         // we later when a document isn't needed anymore          if (!this.isDocumentReferenced) {             const data = this;             const doc = {                 get uri() { return data._uri; },                 get fileName() { return data._uri.fsPath; },                 get isUntitled() { return data._uri.scheme !== 'file'; },                 get languageId() { return data._languageId; },                 get version() { return data._versionId; },                 get isDirty() { return data._isDirty; },                 save() { return data._proxy._trySaveDocument(data._uri); },                 getText(range?) { return range ? data._getTextInRange(range) : data.getText(); },                 get lineCount() { return data._lines.length; },                 lineAt(lineOrPos) { return data.lineAt(lineOrPos); },                 offsetAt(pos) { return data.offsetAt(pos); },                 positionAt(offset) { return data.positionAt(offset); },                 validateRange(ran) { return data.validateRange(ran); },                 validatePosition(pos) { return data.validatePosition(pos); },                 getWordRangeAtPosition(pos) { return data.getWordRangeAtPosition(pos); }             };             this._documentRef = weak(doc);         }  // ---> GC happens here          return weak.get(this._documentRef);     }      get isDocumentReferenced(): boolean {         return this._documentRef && !weak.isDead(this._documentRef);     } ```"
14628|![screen shot 2016-03-21 at 12 21 23](https://cloud.githubusercontent.com/assets/1794099/13917168/715dcb20-ef5f-11e5-9344-974de7f0aa53.png)  Running for 120 seconds with 100 messages printed per second.
14629|There seems to be some buffering involved. In data comes in 8KB chunks. If only written every second then it takes a while until 8K are full.
14630|If I do the same in node the text appears immediately. So it looks like the buffering happens somehow on the python side. The node code is:  ``` javascript setInterval(function() {     console.log('Freeze'); }, 1000); ```
14631|![screen shot 2016-03-21 at 12 26 35](https://cloud.githubusercontent.com/assets/1794099/13917301/2c31744c-ef60-11e5-9ed8-5a05e2384b07.png)
14632|Given the complexity of this I will investigate more for April.
14633|nothing in the light theme
14634|The fix is to have the selection height === decoration height if there is just one selection.
14635|It doesn't matter where you put the code, there's no intellisense.   VSCode, no intellisense ![Image of aaa](http://d.pr/i/FgnW.gif)  VS 2015, same file, here's the intellisense.  ![Image of aaa](http://d.pr/i/1emfN.gif)
14636|interesting. we should probably hold on to `_documentRef` with a local variable during the execution of that function. I'll will try if I can repo this manually with manual GC invocations
14637|@egamma one additional note: we should still allow to open the file for cases where people work on translations which are not part of the UI yet. But this is considered to be the expert mode.
14638|@joaomoreno pls verify.
14639|Yes. I get that the command to turn the file from *.md to *.html is separate from vscode. But I also figure that if vscode can turn markdown into a pretty preview within the editor itself, turning it into html should not be that much more difficult. I do wonder if it's outside of the scope of the project, though, which would make the whole question moot.
14640|Steps to verify:  - Linux - start code from a shell and pass --locale=zh-tw - ensure locale is NOT picked up - start code from a shell and pass --locale=zh-TW - ensure locale is picked up.
14641|@isidorn can you please verify since debugger was mostly affected.
14642|Verified that nothing can be done here.
14643|Some comments on the experience - I was pleasantly surprised when I got autocomplete for ionic elements inside an html file. I didn't do anything special to set that up. But it set up some expectation that I might get intellisense and autocomplete in my javascript too, which wasn't the case. - When I opened a js file, I saw a green lightbulb in the status bar which indicated that I should create a jsconfig.json to get richer intellisense. Clicking on it opened a prompt at the top of the window with a button to create a jsconfig.json file. I clicked it and it created the new file for me. However, the new file replaced the file that I had been looking at in the editor meaning I had to go back to the explorer to find the file. We should consider opening newly generated files inside another editor if one is available. Opened bug https://github.com/Microsoft/vscode/issues/4499 - I went back to the file and started typing some angular code. I didn't get intellisense although the previous step I took implied that I might get intellisense. Perhaps the jsconfig.json file should include a comment directing people to install the typings file for whatever frameworks they are using. Opened bug: https://github.com/Microsoft/vscode/issues/4498 - After tsd init and tsd install angularjs/ I have great intellisense in my js - Whenever I specify the ng-controller directive inside an html element I do not get any autocomplete for the name of the controller. In Atom, I get string autocompletion as soon as I start typing the name of the controller. This is very helpful. Opened bug: https://github.com/Microsoft/vscode/issues/4500
14644|In the screen-shot, 'last_mouse' variable should have been highlighted same as 'mouse' var.   Edit: Yes, this is same as previous issue.
14645|@joaomoreno can you please verify.
14646|Marking as verified since the story got obsolete.
14647|@joaomoreno pls close as verified if you accept the reason.
14648|@joaomoreno the snippets got obsolete. Please close as verified if the new template story works for you.
14649|@isidorn the snippet story got replaced with the template story. Please verify that the new story is OK in this regard.
14650|"@bpasero  Repeated to a file rename, it will appear this problem    <img width=""317"" alt=""error"" src=""https://cloud.githubusercontent.com/assets/1432335/13918256/faac582e-efa0-11e5-8b2a-fa73adcc1dca.png"">  If you continue to rename operations, such as the following error  <img width=""295"" alt=""err2"" src=""https://cloud.githubusercontent.com/assets/1432335/13918443/55c26a54-efa2-11e5-9036-f9cc76f84445.png"">  This text box will not disappear."
14651|@isidorn let me know if you are more happy with the new implementation.
14652|@isidorn please close as verified. The new story doesn't have snippets anymore.
14653|"@alexandrudima I think these extensions run as part of ""out of dev"" for me:  ![image](https://cloud.githubusercontent.com/assets/900690/13918573/a0f76de2-ef68-11e5-8214-9090c42504d0.png)"
14654|Now seeing:  ``` Cannot read property '_acceptIsDirty' of undefined: TypeError: Cannot read property '_acceptIsDirty' of undefined     at e._acceptModelDirty (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:18:26540)     at t.e.handle (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:15:12687)     at c (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:11:16222)     at h (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:11:16882)     at doNTCallback0 (node.js:420:9)     at process._tickCallback (node.js:349:13) ```
14655|@dbaeumer can you attach the CPU snapshot so that we can drill into the output editor input?
14656|Ok this has been fixed for March!
14657|@rhires yeah it is a bit outside the scope of VS Code. Maybe an extension could provide this but the intent of VS Code (core) is not to convert from MD to HTML and save the file. I encourage to write an extension for this!
14658|woot
14659|"For verification: - create empty file - configure `editor.rulers` - create many more lines - Rulers should never ""end"""
14660|LGTM
14661|Thank you!
14662|To verify, please look at the commit or try resizing a lot...
14663|I am seeing the same behavior. My snippets variables are all self-contained and not embedded within each other (per the above example with ${4} being part of ${3}.
14664|It's a mess. All method dealing with _save_, _revert_, and _dirty_ are affected: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHostDocuments.ts#L496
14665|![screen shot 2016-03-21 at 14 02 30](https://cloud.githubusercontent.com/assets/1794099/13919411/99fc271c-ef6d-11e5-8d9c-29cb53e4e09d.png)  Still happens for me (18ebb4a4f5491af7b16e91e42fc36410bbb2e4d7)  > create many more lines  using copy line down command
14666|@alexandrudima I end up with this after the first Ctrl+Delete:  ``` public void Add( int x,                          int y ) {     // some code } ```  Please reopen if your fix wanted to get me to this as suggested by the issuer:  ``` public void Add( int x, int y ) {     // some code } ```
14667|If the goal is to keep the top line number stable, I still see it jumping. Note that I do not have Hack installed on my system but I took your settings:  ![untitled](https://cloud.githubusercontent.com/assets/900690/13919807/e78b3156-ef6f-11e5-9619-e1ffe239d592.gif)  The file opened in diff is fileActions.ts converted to spaces.
14668|i am not a strong enough user of this feature, lets see what community says
14669|Hm, we call `weak.get` which should return `undefined`(not an empty proxy) in case that GC data race happens: https://github.com/TooTallNate/node-weak#object-weakgetweakref-ref, https://github.com/TooTallNate/node-weak/blob/master/src/weakref.cc#L207
14670|:+1:   ![image](https://cloud.githubusercontent.com/assets/900690/13920034/1b959a44-ef71-11e5-9431-ab6e3541befc.png)
14671|"I have the same problem but as the OP didn't give any detail, let me describe it: - VS shows the notification that there is an update available - I click ""update"" and get asked for admin credentials - VS quits itself and does not open again - When I manually open it, no update was installed - There is no error message or any feedback  My console logs are full with hundreds of this entry: `21/03/16 14:34:13,422 com.apple.xpc.launchd[1]: (com.microsoft.VSCode.ShipIt) Service only ran for 0 seconds. Pushing respawn out by 2 seconds. 21/03/16 14:34:15,452 com.apple.xpc.launchd[1]: (com.microsoft.VSCode.ShipIt[1455]) Service exited with abnormal code: 1`  I'm having this issue for months with every version of VS. I always manually download VS from the website. I am on and English El Capitan, MacBook Pro 2012."
14672|@stevencl great observations.   Could you make your repository with the final tour available on github somewhere?
14673|"@chenxizhang you seem to see lots of debug output from the code launch, where does ""code"" point to in your case? when you use the installer it should put ""code"" on the path and you will not get this output."
14674|The headers are using the standard red from the light theme
14675|@waderyan mentioned to remove the typescript.tsdk in the March release noes.
14676|@jrieken I think you did this last Friday.   Any interesting findings to share?  Suggest to do it in the comments as is done here https://github.com/Microsoft/vscode/issues/3715#issuecomment-199242987
14677|related to https://github.com/Microsoft/vscode/issues/4133
14678|:+1:
14679|No big surprises tbh. Editing features work well and also debugging is possible (tho it asks from admin rights). I have targeted a core clr app which the extension doesn't officially support yet (I know it is being worked on) so that on restore/run dnx comes into play.
14680|The code I wrote is here: https://github.com/stevencl/footballapp  It's a simple app for keeping track of the amount of playing time for players in the soccer team I coach at the weekend.
14681|Any suggestions for how to troubleshoot the keyboard shortcuts CTRL-ALT-UP and CTRL-ALT-DOWN on Windows? (Or key presses in general?)  Add Cursor works fine from Command Palette so I probably have some weird keyboard thing going on.
14682|This issue was moved to Microsoft/TypeScript-TmLanguage#131
14683|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/96
14684|@bpasero I don't think that would work, because the charset should be used when creating the model, it would be too late to have it as a setting on a model.
14685|We have a fwd link to a website which should explain all of that.
14686|@egamma Is the link you gave me already live?
14687|@alexandrudima @dbaeumer You guys have experience with this, right?
14688|@alexandrudima while verifying this I discovered the following problems: - Alt cursor down now moves the line in the editor and doesn't select the next entry in the list anymore - Shift Escape doesn't close the code complete window.
14689|And nothing thing I noticed. When using arrow down and up in the code complete window to navigate and closing the windows with escape NVDA doesn't get into 'Browsing' mode. It says in focus mode. So may be the Alt+Down / Up triggers something as well which puts NVDA in browsing mode.
14690|Mac insiders build doesn't seem to have this feature? Am I missing something? (using alt drag)  Sorry, worked it out, alt+shift drag... Can I change this to alt+drag?
14691|Just to clarify, the standalone tokenizer is not used for C# syntax highlighting of VS Code. I you want to make changes there, make a pull request to https://github.com/atom/language-csharp
14692|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/96
14693|Maybe we should track that in a different issue?
14694|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/40. Fix will be in the March release.
14695|To verify: any platform can be used, this is not platform specific
14696|@Alphapage why are you using `debugger;` statements instead of real breakpoints?
14697|You can get the insiders build here: https://code.visualstudio.com/insiders
14698|@alexandrudima hold back. It looks like the insider build didn't update for me. I will close and retest.
14699|@jamesqo Thanks for the PR! I believe extensions need to be added to the contributions section of the [extension's package.json](https://github.com/Microsoft/vscode/blob/master/extensions/shellscript/package.json#L10) in order to take effect.
14700|OK. Retested on latest insider from today and here is what I see: - Alt+Up/Down works as expected in code complete - Shift+Escape closes the code complete Window, but NVDA still ends in Browsing mode (no focus in the editor anymore).   What is interesting is: when using arrow down and up in the code complete window to navigate and closing the windows with escape or shift escape NVDA DOESNOT get into 'Browsing' mode. It stays in focus mode. So may be the Alt+Down / Up triggers something which puts NVDA in browsing mode.
