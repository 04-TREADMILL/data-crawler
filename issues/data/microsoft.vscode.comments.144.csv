14301|@artsjedi Please start a new issue, in dealing with Chromium I learned that not all blurriness has the same root cause. I'd love to get the VSCode version, OS version, theme and settings you use so I can try to reproduce.
14302|Ok, I was able to reproduce your behavior in that particular file. If I close VS code, open and do the particular changes you are making without touching the rest of the code, then it reproduces your behavior.  However, if I go to code that I'm working on right now in test/common/thing/thingexpression/thingexpress-tests.ts and add a trycatch inside of some non-trivial code (e.g. line 256), then it reproduces the lag. If I then go back to routes.ts that you chose (chats) and do the same edits, it will produce the lag.
14303|@alexandrudima default dark theme. using windows 10, febury updated,  on surface pro 3. 2016-02 build.
14304|I have just pushed the changes that get you at the exact same line that I'm working on, so you will need to pull again if you aren't able to get the behavior. You can also try it pretty much anywhere in one of those tests (EDIT: in the thingexpress-tests file). For example, I get it when I try at line 149 just after `let logContext = `TEST should seed ThingExpression Metaish transforms`;`.
14305|Why don't you add vscode.d.ts to DefinitelyTyped?
14306|![trycatchlag_processhacker_2](https://cloud.githubusercontent.com/assets/1253349/13864219/ba41bf80-ec6d-11e5-8c97-9889a5fa9bd2.PNG)
14307|And to show that it happens elsewhere, I decided to test elsewhere. I also got the behavior at common/thing/thing.expression.ts in the constructor. However, when I closed and restarted again and tried in the constructor again, it did not produce the lag.   If I then go back into the thingexpress-tests.ts file and make a change there and return to the constructor, the lag is still there (and continues to be there until I restart VS code it appears after a little testing). So there is something about the thingexpress-tests.ts file (and possibly others) that is initiating the lag.   Both of these files (thingexpress-tests.ts and thing.expression.ts) have import statements from rxjs and lodash, as well as multiple local file imports. The only substantive difference (insofar as the imports go) is that I have the chai imports at the top:  ``` import chai = require('chai'); let assert = chai.assert; let expect = chai.expect; let should = chai.should(); ```  Also, that tests file does have a lot of nested callbacks, as it is a mocha unit testing file and I use asynchronous rxjs (v5) quite a bit. So I'm thinking either the complexity of the structure is frying the TS brains or the chai import is mucking things up somehow. I would lean toward the complexity part but I think you will be able to reproduce at this point and have a better idea than me.
14308|Ok, last comment for now: I tried just making changes to the thing.expression.ts constructor (line 54) and I am able to reproduce the lag if I just have the thingexpress-tests.ts open in the second window column (ctrl+2) _and don't even edit it_. If I just have it open, then the lag is produced while only editing in the thing.expression.ts constructor (line 54). The lag is also reproduced while making the edits you were making in chat routes.ts, as long as the thingexpress-tests.ts file is open in the second window.  Ok, that's it for me for now. Thanks for your help @dbaeumer.
14309|Works on Windows 10.
14310|@nub340 VSCode isn't based on Atom but Electron which was made by the same group that is working on Atom.
14311|Agreed, especially on the HC theme, i can't tell what has focus in the above picture.  I would love to have something more subtle near the editor title where the name is.
14312|i was able to get focus to the message bar on Windows (didn't try OSX yet) but i can't move between the buttons. Tab moves me off the message bar, left and right arrow don't do anything.  ![image](https://cloud.githubusercontent.com/assets/1487073/13865009/e91e06b0-ec63-11e5-8105-d3ca9b7f419d.png)  opened 4396 on this.
14313|"OK, but it is not obvious that we do this and in many cases it looks like a bug.  If i have a grunt/gulp file and do ""task "" from the command palette i see all of the tasks found in the file. As a user, my expectation is that we scaffold out a wrapper for each of those tasks.    So, i'm reopening this but moving it to the backlog."
14314|"anyway I think I speak for everyone who sets `""externalConsole""` to true that unless there is something to output the internal console should remain hidden. Because (externalConsole===true) == (internalConsole===false).  I use externalConsole to maximize my editing area. It's also one of the most defining features of VSC - the interface isn't littered with all sorts of palettes, miniwindows, panels, popus, dialogs and such like in the major IDE's - only the essentials. So when an empty console view pops up when I explicitly said I want an external one - I kinda get the feeling I'm again using eclipse or MVS.  So maybe before (if at all) a new setting is added we can get a hotfix for internal console appearing only after a line was actually output (in case of `externalConsole===true`)?"
14315|Similar set up to BryanConradHart getting the error
14316|@bpasero: good call to delay (I don't want to break anything)  @bpasero and @chrisdias: I would love to discuss this with you all in a later UX sync.  The reason I did it this way is because focus tends to show the entire bounds of what can be interacted with at the current tab position.  Putting focus on the title/header of the editor may suggest that keyboard action will open the **recent files** palette to allow switching to a different file in that editor (after all, that's what clicking on the header does).  I felt it was important for users to know that they are currently tabbed into the text-editable area of the editor (not any other part of the editor).  This is also how this very editor is while I'm using it on GitHub.  IMHO, If my focus were on the the header or anywhere out of bounds where I'm typing, I feel I'm interacting out of bounds or that there was a glitch.  I do agree that the high-contrast theme instance could be improved.  The current line and the outline of the focused editor are indeed confusing, now that I'm looking at it again.  I was trying to be consistent with focus colors on this, but I think this deserves an exception.  If we continued with the editor outline approach, I think we should make the editor outline a different color and perhaps `1px` instead of the current `2px` size.
14317|@Beatusvir  It doesn't support custom keybindings now. So you might be a little disappointed. The most wanted features are issued [here](https://github.com/aioutecism/amVim-for-VSCode/issues). I'm trying my best to make them happen as fast as possible. And I really need your help!
14318|It's still not working in the Feb release.
14319|I just started having this issue, randomly (as far as I can tell) - I'm on Version 0.10.11 but updated several days ago and only just started having the issue tonight. If this is a duplicate of another issue could you please link to it so that I can follow along?
14320|So I did some sleuthing to try and figure out what was going on.   TL;DR this seems to be an issue in [marked](https://github.com/chjj/marked), not in VSCode.  The results of my tests are [here](https://github.com/golf1052/markdown-testing)   I tried three different markdown parsers, [John Gruber's implementation](https://daringfireball.net/projects/markdown/), [GitHub's markup](https://github.com/github/markup), and [marked](https://github.com/chjj/marked) (v0.3.5 where VSCode is using v0.3.2)  README.md is your original file cut down to the part that was breaking. README-mod.md removes a space your first powershell code block. Tildes represent one whitespace character (space).  `````` markdown ~2. Run ~ ```powershell ~[HueBridge]::FindHueBridge() ~``` ~3. ``````  README-1.md adds the one that you added when you were testing.   .html files are the outputs from each parser. -mod.html indicates that file was generated from README-mod.md and -1.html indicates that file was generated from README-1.md. ref.html files were generated by John Gruber's implementation, github.html files were generated by GitHub's markup, and marked.html files were generated by marked.  None of the 3 parse README.md correctly. Only marked parses README-mod.md correctly. All 3 parse README-1.md correctly. (When I mean parse correctly `[HueBridge]::FindHueBridge()` appears after `2. Run`. Online GitHub parses all 3 files correctly. I also tried [CommonMark's implementation](http://spec.commonmark.org/dingus/) since I guess Gruber's implementation isn't really the reference implementation and it also parses all 3 files correctly.  ¯\_(ツ)_/¯
14321|"Hi,  So I think it's possible I'm having an issue that is related to this. Seems that it affects TypeScript versions greater than 1.8.*. Basically VS Code fails for me on all `import` statements that use non-relative paths (i.e. paths that necessitate traversing up the file tree to locate a folder). As a result, I get ""module not found"" errors and my auto-completion breaks completely.  If I downgrade typescript in my node_modules to 1.7.5, and set the following in my settings.json the problem goes away:  `""typescript.tsdk"": ""node_modules/typescript/lib""`  I don't know for sure if it's the same issue, but if it's related hopefully it might provide a clue!"
14322|Because it does not support versioning...
14323|![untitled](https://cloud.githubusercontent.com/assets/900690/13869808/d9df91da-ecd8-11e5-98b6-52cdda418e66.gif)  Works for me. I am on Mac though. Can you chrome inspect the 3 buttons all have a tabindex attribute?
14324|Same thing works for me on Windows too.
14325|"i see a tabstop=""0"" for all three buttons, but now i see what the problem is.  Shift+Tab moves me right to left and tab moves me left to right.  since focus landed on the left most button, pressing tab again jumped out of the message.    Here's what I did.  I put focus in the explorer and started pressing Shift+Tab to get to the message bar.  Focus went to the left most button. Now, i think to move from left to right I should press Tab (not shift+tab) and when I do focus moves away from the message bar.    I expect that Shift Tab to move me right to left through the buttons, just like it does in the explorer buttons (e.g. new folder, new file). Also, when focus reaches the message bar i would expect focus to be on the right most button.  So, when i press Shift tab it moves right to left through the three buttons and pressing tab would move me left to right."
14326|@rafaelmaiolla lets try to make the d.ts file complete. If you open a PR on https://github.com/Microsoft/vscode-extension-vscode I can merge it in.
14327|Ah so you see an issue with the ordering. That I can maybe fix.
14328|Alright, I'll see if this version solve this problem.  2016年3月17日星期四，Benjamin Pasero notifications@github.com 写道：  > @AndyYSWoo https://github.com/AndyYSWoo we just released a new insiders > build, maybe you could try with that: > http://code.visualstudio.com/insiders >  > It shows up as green logo in the taskbar as opposed to the blue one. >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-197895609
14329|This issue was moved to hoovercj/vscode-ruby-linter#1
14330|It's Ctrl+k, Ctrl+ **2** (or any number from 1 to 5)  It collapses all regions of the given nesting level in the whole document, except for the region that cursor is in (it stays unchanged). Repeating the same action does not make a difference.
14331|We must with this until the extension is available in the market place as a preview. Otherwise we recommend something that doesn't exist.  The extension can be published as a preview once https://github.com/Microsoft/vscode-vsce/issues/82 is available.  // @joaomoreno
14332|:+1:
14333|#3771
14334|Setting to March to investigate
14335|I like the points you are making. I will address this issue for our april release, that is I will look into it next week.
14336|// @chrisdias
14337|"> If i have a grunt/gulp file and do ""task "" from the command palette i see all of the tasks found in the file. As a user, my expectation is that we scaffold out a wrapper for each of those tasks.  @chrisdias The Tasks integration understands grunt, gulp, jake tasks and therefore doesn't need a scaffolding for each task. What the task integration cannot know is 1) which of these tasks is the `build` or `test` tasks. It can also not know which `problem matcher` should be used. This additional information needs to be defined in the tasks.json."
14338|Correct me if I'm wrong, @bpasero, but there is nothing we can do.
14339|@chrisdias please verify across all OS.
14340|What is VSCodePortable? We don't ship that.
14341|This has been addressed in TypeScript 1.8.9 and we have integrated 1.8.9 yesterday.   Verified that the scenario from @ElCondor1969 is properly handled.  We will push an update with this changes to the [insider channel](https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build) next Monday.
14342|@aeschli how about the code intelligence problem in the last reply? It was fine in v0.10.6 and get lost since v0.10.8.
14343|@joaomoreno how do you open the browser window?
14344|Great catch!
14345|[`shell.openExternal`](https://github.com/atom/electron/blob/master/docs/api/shell.md#shellopenexternalurl-options) - there is an `activate` option, but seems to only work for OS X.
14346|pls file against the Ruby extension.
14347|@waderyan fyi are there other ruby extension that should be added to the extension list.
14348|@joaomoreno that option might have been added later, not sure it exists for our version. But yeah, if so this is an Electron issue and not VS Code.
14349|This is not a regression, but a dupe of #3666. Setting that one to April to fix it for the April release
14350|The RawDebugSession needs to remember all the promises it fired, and on disconnect just cancel them all.
14351|pls see this comment https://github.com/Microsoft/vscode-node-debug/issues/56#issuecomment-197209183
14352|@bingzheyuan You need to adjust this little setting to make it work again: https://github.com/Microsoft/vscode/issues/4355#issuecomment-197921835
14353|@weinand great idea, but let's not forget that we want to lock down on string changes.
14354|@weinand sorry the plan was that the this gets adapted to VS Code //@mousetrap
14355|disagree - just make the cache have an upper limit say 10000.
14356|@stasku I need some steps to try to reproduce.
14357|@AdamAndersonFalafelSoftware   > I wonder if my TypeScript config is correct. Here are my default settings. Is the tsdk supposed to be null?  This is the default value that gets inserted, it is treated as the setting is not defined. So I would just delete it.  We have updated to a new version of salsa/typescript 1.8.9 which has additional fixes.  We will make this available on the insider channel next Monday.  I suggest to retest there again.
14358|"With the March release, it will be under a setting called `""editor.selectionClipboard""`, which is off by default until we better understand the perf implications of writing to the clipboard on every selection change."
14359|@LittleBrainz same here I suggest to retest on the latest with TypeScript 1.8.9.
14360|@isidorn yes, that's probably necessary. Today this issue is the biggest obstacle for a smooth debug adapter development experience: whenever you debug the debug adapter code that returns data for the tree, and you have to abort the debugging, the VS Code UI is in a broken state.
14361|I made an easy to edit file for this here: `vs/workbench/parts/extensions/electron-browser/extensionTips.json`
14362|This was introduced with the adoption of rendering templates.  Fixed in 7f5a4582091feabf3111aa7f34a9d90256d15d67
14363|No sorry, but it is a valid feature request.
14364|@bingzheyuan The variables intellisense issue is #3815. It will be fixed in the March release.
14365|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/29
14366|Do vs code has this feature in python？ or，some ext. can do it？
14367|The default VS Code build does not have any support for 'go to definition' for Python. Are you using the [Python](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python) extension? If yes and you see this bug there, please file it directly against the extension (https://github.com/DonJayamanne/pythonVSCode)
14368|@cherchyk @mohsen1 ping
14369|Got already fixed.
14370|@egamma I am not on the insider channel. How do I join?
14371|Verified by code review
14372|"It crashed again this morning   <img width=""895"" alt=""screen shot 2016-03-18 at 7 24 17 am"" src=""https://cloud.githubusercontent.com/assets/10361685/13877693/7f19289a-ecda-11e5-884a-13f65c371066.png"">  workspace: https://gist.github.com/sahas-/88c6cafd675e699d66d4  I've enabled this new extension too (after restarting vscode)"
14373|A restart of the machine made no difference. I still got the same error. Is there some sort of setup log file I can provide?
14374|That would be most awesome!
14375|Regression from introducing the html formatting options. The default of `preserveNewLines` used to be true, now false. Changing this back. Thanks @4kochi !
14376|I have gone through the discussion on https://github.com/Microsoft/vscode/issues/224 to create a list of suggestions for improving document management:  ### Tabs - Move a tab out into it's own section or window (creating a new section or window in the process) - Ctrl + Tab supports two options:   - only lists tabs that are currently open. Cycle through list of open tabs in chronological order   - only list tabs that are currently open. Cycle through list in tab order from left to right - Actions for   - Close a tab   - Close tabs to the right   - Close tabs to the left   - Close all but this tab - Reposition/reorder tabs   - Especially into their own sections or windows - Linked tabs -> associate two or more files such that opening one file opens associated files in a group of tabs - Remove working files list - Dynamic sizing of tabs optimised to ensure file name is visible - Preview tab   - Single click opens file in preview   - Editing and double click opens file in permanent tab - Dynamic tab cleanup when document well becomes overloaded (e.g., consider removing tabs that have not been viewed or edited for some length of time) - Open new file to the right or left of current tab - Option to hide tab UI - Show path name in tab but not at the expense of showing the file name - Clear indication of currently active tab - Prompt to save changes on closing tab containing file with unsaved changes (no working files)  ### Stacked editors - Each editor maintains a stack of files that have been opened (pushed onto the stack) and closed (popped off the stack). Closing a file pops it off the stack, making the next file on the stack visible - Ctrl+Tab lists all files that have been opened in chronological order  ### Document management - Multiple sections contain stacked editors or multiple tabs - Sections can be split horizontally and vertically - Ctrl-n to focus on section n
14377|"@enzoaeneas Windows does not have a ""Segmentation Fault: 11"" error. If you want to have your issue investigated, please create a new issue with full details."
14378|@gunjpan What version of node are you using? Is the problem reproducible if you install a different version of node (e.g. 4.x -> 5.x or 5.x -> 4.x, or 0.12.x)?  If a different version of node makes no difference could you please provide a code snippet that shows the issue?
14379|@narf the node version makes no difference in this case because the extension host is always using the node that is included in electron.
14380|Also quickFixWidget.  I would postpone this to April
14381|Also filePut
14382|Ah now I realise that the numbers got cut await from your description.  The actions are only supposed to fold, not unfold. To unfold you would use Unfold all (Ctrl+K, Ctrl+J)
14383|Yeah, that's what I had in mind. I just tried to change it out of despair.
14384|This has to do with #3008
14385|Example diff:  ``` patch index 4f6f6e7..8f7b248 100644 (file) --- a/src/backend/commands/vacuumlazy.c +++ b/src/backend/commands/vacuumlazy.c @@ -157,7 +157,7 @@ static void lazy_record_dead_tuple(LVRelStats *vacrelstats,  static bool lazy_tid_reaped(ItemPointer itemptr, void *state);  static int vac_cmp_itemptr(const void *left, const void *right);  static bool heap_page_is_all_visible(Relation rel, Buffer buf, -                        TransactionId *visibility_cutoff_xid); +                        TransactionId *visibility_cutoff_xid, bool *all_frozen);    /* @@ -295,7 +295,7 @@ lazy_vacuum_rel(Relation onerel, int options, VacuumParams *params,         new_rel_tuples = vacrelstats->old_rel_tuples;     }  -   new_rel_allvisible = visibilitymap_count(onerel); +   visibilitymap_count(onerel, &new_rel_allvisible, NULL);     if (new_rel_allvisible > new_rel_pages)         new_rel_allvisible = new_rel_pages;  @@ -496,7 +496,7 @@ lazy_scan_heap(Relation onerel, LVRelStats *vacrelstats,      * maintain next_not_all_visible_block anyway, so as to set up the      * all_visible_according_to_vm flag correctly for each page.      * -    * Note: The value returned by visibilitymap_test could be slightly +    * Note: The value returned by visibilitymap_get_status could be slightly      * out-of-date, since we make this test before reading the corresponding      * heap page or locking the buffer.  This is OK.  If we mistakenly think      * that the page is all-visible when in fact the flag's just been cleared, @@ -518,7 +518,7 @@ lazy_scan_heap(Relation onerel, LVRelStats *vacrelstats,          next_not_all_visible_block < nblocks;          next_not_all_visible_block++)     { -       if (!visibilitymap_test(onerel, next_not_all_visible_block, &vmbuffer)) +       if (!VM_ALL_VISIBLE(onerel, next_not_all_visible_block, &vmbuffer))             break;         vacuum_delay_point();     } @@ -540,6 +540,7 @@ lazy_scan_heap(Relation onerel, LVRelStats *vacrelstats,         Size        freespace;         bool        all_visible_according_to_vm;         bool        all_visible; +       bool        all_frozen = true;  /* provided all_visible is also true */         bool        has_dead_tuples;         TransactionId visibility_cutoff_xid = InvalidTransactionId;  @@ -554,8 +555,7 @@ lazy_scan_heap(Relation onerel, LVRelStats *vacrelstats,                  next_not_all_visible_block < nblocks;                  next_not_all_visible_block++)             { -               if (!visibilitymap_test(onerel, next_not_all_visible_block, -                                       &vmbuffer)) +               if (!VM_ALL_VISIBLE(onerel, next_not_all_visible_block, &vmbuffer))                     break;                 vacuum_delay_point();             } ```
14386|@vsccarl you are stepping into node's shutdown code by doing the 40 steps. The last step will not return so VS Code is running into a timeout. This is expected. Node-inspector will not return either but they are not even showing the timeout message.
14387|+1 Please add!!!
14388|@ArtemGovorov fyi we have added support to label an extension with `preview` https://github.com/Microsoft/vscode-vsce/issues/82#issuecomment-198320259
14389|Moved to https://github.com/ionide/ionide-fsharp/issues/213
14390|Filed against the Jade grammar as https://github.com/davidrios/jade-tmbundle/issues/74
14391|To verify: Verify colors for SASS. Less still has some issues caused by the inconsistent grammar. Eventually we will have to look for a better grammar.
14392|Does this mean the SASS colors should be the same as in the last stable release?
14393|This is indeed strange. Can you check whether there are some git processes laying around?
14394|I tried a simple python script which I could successfully debug with minimal configuration, however my limited python skills did not allow me to go too crazy on this tour.
14395|Verification: when having git <= 2.0.0 users should get a warning to update git.
14396|To add to what others have said. I really miss :reg to view the registers. Also, though not part of the core Vim I think surround with should be core when there is so much html now a days. but perhaps a pluginsystem that would allow vundle or patogen directly? dreaming...
14397|No SASS value are now consistent to what CSS shows: - red in Dark Plus - white in Dark VS
14398|Thanks it is now working good 😊
14399|Yup, looks like that now
14400|Verification: When having the old alias, Code should advise to update to the new symlink. It should report in which file the alias is described, which line within the file and should ignore the line if it is commented out.
