2801|@Stanzilla thanks for reviewing, request makes sense, but let's do the _sneaking_ once all the other work is done.
2802|Update from @weinand   We have finished the restructuring work on ExtensionHost (EH) debugging and I've verified that it works on OS X, Windows, and Linux. It feels snappier and the VS Code debugger no longer waits 5 seconds after the user has closed the EH window.   The only remaining issue I've seen so far is that on Windows pressing the red debug Stop button, doesn't close the EH window. So you have to close the EH window manually. This seems to be a timing issue and I'll investigate right after this mail (It is a Heisenbug that does not occur when trying to  debug the problem...).
2803|Needs more thinking...
2804|Also we should have a simple log API where an extender can post an extension error in the case that no error dialog can be posted or it doesn't make sense to post a dialog.
2805|@dbaeumer The owner is exposed indirectly via the `DiagnosticsCollection#name` [property](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2269). Since that's the only way from the API to post diagnostics and because having owners on the diagnostic maps very badly to our main thread model. Also what does it mean when you post a diagnostic with owner `foo` to a collection with owner `bar`. Is this something where the protocol and the API are different?
2806|sorry I noticed the problem after I posted this, it was definitely my bad.
2807|@bpasero I don't see any problem in CPU profile (or most likely I'm not qualified to read it) but I can send it to you if it can help. the only thing I noticed is every time that's happening two error will print in console.  1: Error: getaddrinfo ENOTFOUND vortex.data.microsoft.com vortex.data.microsoft.com:443 at errnoException (dns.js:25:10) at GetAddrInfoReqWrap.onlookup [as oncomplete](dns.js:76:26)  2: Error: getaddrinfo ENOTFOUND dc.services.visualstudio.com dc.services.visualstudio.com:80 at errnoException (dns.js:25:10) at GetAddrInfoReqWrap.onlookup [as oncomplete](dns.js:76:26)
2808|@dbaeumer Or is the `source` property more or less a view model property independent of the owner/name concept we internally use. Just like a secondary label?
2809|no worries
2810|The query has been improved and it will be significantly faster in the December update.
2811|this code has changed at lot since the last 3 years ;-)
2812|Thanks for the pointer - closing.
2813|> (as an aside, I tried doing that in the hope I could find a global, project-wide replace - since a global search is there, I was hoping a global replace would have been there)  Sorry not yet, but it is on our Roadmap.
2814|Here are my latest findings:  We could avoid calling `git status` since that writes to the index. There are a few commands which would give us the same results: - `git ls-files --others --exclude-standard`, for untracked files - `git diff-index HEAD`, for the changes between the working tree and `HEAD` - `git diff-index --cached HEAD`, for the changes between the index and `HEAD`  The reason why `git status` writes to the index, though, is **very** important: if you touch a file without modifying its contents, `git status` will hash the file, cache it in the index and not report it as modified.  `git diff-index HEAD` will incorrectly report it as modified since it doesn't hash the file but merely looks at the last modified timestamp. The consequence would be that _touched_ files would appear in the git viewlet, unless VSCode does the hashing itself or calls `git` to do it. This can get very expensive since on every git view refresh these hashes would be recomputed... because they don't get cached in the git index.  It's a pickle.
2815|+1 this is really needed
2816|btw - this is issue #1000 :tada:
2817|@moostad if you are able to capture a CPU profile when the explorer shows the spinning progress you can send it to me.  I think the ENOTFOUND is from our telemetry reporting. @SofianHn any chance this could slowdown operations? We don't send telemetry sync do we?
2818|This issue was moved to Microsoft/TypeScript#5925
2819|This issue was moved to Microsoft/TypeScript#5926
2820|Closing as duplicate of #455.
2821|Actually, now that I think about it... won't fix. These are very rare and it's good they jump in our faces since it's an opportunity for us to communicate the issue back to TypeScript.
2822|duplicate of #703
2823|Making this a duplicate of #703. There are a few things off when it comes to jsconfig.json and I trying to tackle them for Dec15
2824|We have this check because the editor (without VS Code) ships in other products with different memory/perf constraints. Making it configurable is an option (you should have access to a config service somewhere) but once we adopt project salsa VS Code will not hit by this anymore.
2825|"+1 Also, not sure if it's related to the same problem, but some shortcuts can be matched by several combinations, and sometimes only one, or worse, none work.  For example: `ctrl + *` to split the editor  There are two `'*'` keys on a French keyboard: one above the right shift key, and another one on the keypad, above '9'.  Pressing `ctrl+'*'` using the keypad `'*'` key won't work, while using `'*'` key found above the right shift key will work.  More on that: all shorcuts containing ""\"" won't work on a French keyboard where the ""\"" character cannot be typed directly, but can only be triggered with `alt-gr+""\""`."
2826|"This particular project has ~30 JS files. There's also quite a few JS files in `web/node_modules`, but I'm excluding them with a `jsconfig.json` file:  ``` {     ""compilerOptions"": {         ""target"": ""ES6"",         ""module"": ""amd""     },     ""exclude"": [         ""node_modules""     ] } ```"
2827|@schinaider I see your point. I added a setting php.validate.enable. If set to false VSCode will not validate php files at all and therefore will not show a message if it can't find the php executable. To not break things the setting is true by default.
2828|@isidorn Don't think this ever worked, please try with 0.10.3. I dont think the tree gives me a mouse down with Ctrl clicked.
2829|You are right, just checked - also not working with 0.10.3 I confused it with my workflow with regular quick open + click. Though this would still be nice to have if possible.
2830|@skovmand For you specific case, can you check if the full path of your files (_bpm.js, bpmController.js, ..._) contains `js`, like in `/users/me/coding/js-stuff/app/bpm` etc? I am asking because I have found an issue if our file event processing loop. It's a little complex but basically when a file is added/deleted we check if that is of interest the JS language service and the check seems flawed
2831|Assigning to @lukehoban  so he reads my comment
2832|No, there should be no restrictions. We do some grouping of output which might have caused an issue. A testcase extension would be great so we could investigate on our side.  Thanks
2833|If you manually create a `launch.json` file does that work? Do you see some errors in the console - `command palette` > `developer: toggle developer tools`  Do you see a list of debug environments in the quick open, and once you pick the file does not get created?  I do not think we officialy support centos 7 gnome setup https://code.visualstudio.com/docs/supporting/requirements
2834|Yes this is a current limitation because the debug hover does not have language specific knowledge. This should be fixed in the future as part of a larger debug hover improvement work when the hover should talk to the language service for getting tokens that the user is hovering over.  Closing for now
2835|@nrkn I have a fix for the `temp`-prefix issue.
2836|@yevk About the 4th level directory. Is it that they either start with `temp` or contain the string `js`?
2837|yeah, we also won't go into those folders for perf reasons... can reproduce and take a look at the process tree. one of the child processes should go crazy (CPU, mem) before the crash happens
2838|How can I do this on Windows? What info do you need?
2839|We talked about this at lunch and have an idea how we could make some progress here and get feedback: - [ ] if you use slash or backslash in your query, we always match on the full path because that is a good indicator for wanting to match on folder names - [ ] we introduce a new quick open provider for fuzzy searching that enables all of the features (fuzzy match, match on full path) while not changing the existing behavior of quick open. we add a keybinding for it and so you can override the normal quick open with the fuzzy one easily
2840|just themes. flatland, monokai, batman
2841|Before `0.10.1`, it works fine, after that, it's broken. Obviously, it's either a bug or an intention (reason?). @aeschli  could you help to look at it?
2842|the best tool is this: https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx
2843|"@alexandrudima I did some tests and found out this phenomenon seems to be related a special code.  ``` javascript fs.writeFile(""record.js"", ""module.exports = "" + JSON.stringify(javaScriptObject), function (err) {     if (err) {         throw err;     } }); ```  And I can reproduce this phenomenon every time using https://raw.githubusercontent.com/slayerxj/anicraw2/socket/record/result.js This file can be correctly loaded by Node.js.  Now after the tests I no longer think this file is common, so it's OK if you don't see it as an issue."
2844|"Just a post mortem for anyone who happens to have the same issue.. the problem is config as well as issues with `gulp-sourcemaps`. Everything worked for me in other debuggers because they support inline source maps. When switching to external sources, `gulp-sourcemaps` has two issues 1. It defaults `sourceRoot` to ""/sources/"" which of course breaks everthing unless you happen to have your source in some file system rooted path ""sources"" 2. If all your source files are in the same level of a folder heirarchy, you can fix things by setting `""sourceRoot"": ""../src""` (or whatever) but this won't work for child folders, e.g.  ``` javascript src      util          helper.js dist     util         helper.js ```  .. the source map for `dist/util/helper.js` won't be found because its relative path is different than the single `sourceRoot`.  There seem to be some idle pull requests in `gulp-sourcemaps` related to this but the repo owner has not acknowledged or merged them, so there may be no good public solution right now to using this structure & gulp-babel with external source references."
2845|This also seems to be the case with shebang scripts. A file at `~/project/bin/server` with the node shebang header `#!/usr/bin/env node` is not recognized. As soon as the file name is changed to `~/project/bin/server.js` it is fine.
2846|@areijngoudt Did you intend to provide a screenshot? Can you please provide the code snippet that has issues?
2847|@q42jaap Can you please provide additional details.  Does this happen when opening a specific folder? Does this happen when opening VSCode without a folder (`Cmd+Shift+N`)? Anything you can add to help us reproduce
2848|@Bigous can you provide the code snippet please. @dbaeumer this might be an upstream issue in the TypeScript TM grammar
2849|to investigate if this is a dup of #94 (long line containing multi byte characters)
2850|@bpasero Looks like this is the global zoom. I remember you mentioned you added a config setting to go below 100%
2851|@azumikav The right think to do here is for VSCode to call `deactivate` on extensions on shutdown and for extensions to clean up on shutdown.
2852|This is either an issue with the TypeScript compiler or specified as that. See TS playground for reference: http://www.typescriptlang.org/Playground#src=%2F%2F%20errors%0D%0Aimport%20blah%20from%20'blah'%0D%0A(function%20(a)%20%7B%20return%201%20%7D%20())%0D%0A
2853|This issue was moved to Microsoft/TypeScript#5931
2854|Yes, the december release will have a new setting `window.zoomLevel`
2855|This is a limitation with our rewriter. Behind the scenes we transform the code to this  ``` import * as _$steroids$_67_75 from './test'; declare var exports:any; declare var module:any; declare var require:any; var _var_0 = function(env) {     env.deciders = []     (<typeof _$steroids$_67_75>require('./test'))(env) }  export = _var_0; ```
2856|The issue is that Ctrl+click on Mac seems to trigger the context menu. I am overriding this now in quick open so that you can Ctrl+click to pick an entry from the editor history. I was missing this feature a lot too, so I am happy this seems to work now!
2857|@janders223 Yeah, at that point in time we cannot look into each and every file...
2858|Ah ha, I think I found the issue by looking at my log with `less` - my compiler outputs ANSI color sequences, and I was passing this directly through to the console:  ![image](https://cloud.githubusercontent.com/assets/2192439/11592176/20f3b186-9a5a-11e5-8ec8-9b226d9cf8b8.png)  I stripped the color codes with by replacing `/\x1b\[[0-9;]*m/g` with `''` and I'm now getting the output I expect.  I've edited the issue title to indicate the problem. I'm unblocked -- feel free to do what you like with this issue -- you could strip them, implement them, or close as won't fix.
2859|@bpasero ANSI color sequences should work, right?
2860|This is likely the old shortcut from before `0.8.0` that an update failed to remove. You can remove it by opening the Registry (`regedit.exe`) and deleting the following keys:  ``` HKEY_CURRENT_USER\Software\Classes\*\shell\Ticino HKEY_CURRENT_USER\Software\Classes\directory\shell\Ticino HKEY_CURRENT_USER\Software\Classes\directory\background\shell\Ticino ```
2861|Numbers seem to be words...
2862|Yes, color codes from the target to the repl should show up as expected. You can see this from mocha tests that use coloring. We might not support the full set though. So we need to know what sequences are used here.
2863|:+1:
2864|Thanks for your reply.  So it's Electron's job. Since Chromium itself can see those temporary fonts, There has to be a way.
2865|I just found out, by looking at the process tree on my machine, that IntelliJ IDEA has a similar process for Linux file watching and they made in open source (Apache license): https://github.com/JetBrains/intellij-community/tree/master/native/fsNotifier/linux . You can just reuse it for VS Code.
2866|The above messages, when output to a terminal, look something like this:  ![image](https://cloud.githubusercontent.com/assets/2192439/11593408/6dd4db0e-9a61-11e5-8c7d-476163e41c54.png)  In the sequence above I see `[33;1m`, `[33m`, `[1m`, and `[0m` (bright yellow, yellow, bright, and off/normal) -- nothing too fancy. The only oddity I notice in the sequence above is that the off code `[0m` is sometimes repeatedly called even when a color is not currently active, e.g.:  ![image](https://cloud.githubusercontent.com/assets/2192439/11593564/395ff272-9a62-11e5-98b5-8ba13b615146.png)
2867|Sorry - missed your reply earlier.  > Do you send a 'thread' event (with the reason 'started') once a new thread gets created in your adapter. This event notifies VSCode that there is a new thread and in the mono case I can see new threads even though no breakpoints got hit on those threads  No, I don't do this yet, and that is likely the root problem.  I see how this is done in the Mono debugger and that makes sense.    Unfortunately, this won't map as easily to the Go debugger as it does in the Mono case.  The Delve debugger does not provide any events, only host-initiated RPC commands.  I think that's reasonably common for a class of debuggers primarily used through a command line interface.    So to implement this, we will need to get all the threads and compute which are new or stopped to send the events.  It feels like the vscode debugger could just be doing that itself since we already provide the ability to list threads.    Is there any reason why you need these events vs. just computing the threads to show based on the `ThreadsRequest`, just as you do for `scopes` and `variables` today (I don't need to fire an event to tell you that the scope changed or that new variables were introduced to a scope)?  > The current implemenation will only call the stackTrace request for the stopped thread, not for all the threads, which I believe is correct behavior. If you stop on Thread A I do not think it is necessery to check the state of thread B, since you have to report first that something changed in B  Okay - that makes sense. I think I was just confused because I was seeing multiple threads show stack traces at once in some cases - but probably that was because of not sending the right thread events.
2868|@jrieken for this scenario it would make sense when 7x24 intellisense only pops-up when there is a prefix match.
2869|selectionHighlighter
2870|Since the blog post we have changed the coloring to textmate grammar and in December we are now switching to the TypeScript grammar.  Assigning to @aeschli to verify whether this now working properly.
2871|"Im using the following line in .bash_profile: `code () { VSCODE_CWD=""$PWD"" open -n -b ""com.microsoft.VSCode"" --args $* ;}`  I use that to `code .` in the directory. I leave the editor open voor a long time. And then I notice my Mac is running low on power. It's also getting hot, CPU is high on the Electron Helper subprocess.  It's difficult to say how to repro, I can't always get that to happen (fortunately).  `tree | wc -l` gives 25876 (406 of my own files/dirs, the rest are node_modules, I'm using npm 3)"
2872|@egamma Cool!
2873|@q42jaap what workspace do you open with code?
2874|I'm opening a directory in which I've checked out our private git repo. Not a particularly big project. We use nodejs 5 for backend and babel ES6 code for the frontend.  Are there steps (suchs as logs or dumps) I can take and submit (privately) to Microsoft?
2875|Yes, if would be even more strict and say the current word never matching anything if its just numbers
2876|@q42jaap well it would be interesting if this happen on a different folder too, maybe you could give it a try. Does the CPU go to 100% right after you open the folder?
2877|It does not always happen, and it does not happen immediately. I'm currently in the process of reinstalling vscode, which is going to take a while due to slow connection.
2878|"Just pushed a new npm module [native-keymap](https://www.npmjs.com/package/native-keymap) and adopted it in VSCode. It doesn't do anything yet for mac, but it already works for windows and linux.  It kicks in when rendering keybinding labels:  Here is `Split Lines` when the keyboard layout is set to German (Swiss): ![image](https://cloud.githubusercontent.com/assets/5047891/11594417/38f75d1e-9aaa-11e5-928d-98f6fc43bb08.png)  Here is `Split Lines` when the keyboard layout is set to French (France): ![image](https://cloud.githubusercontent.com/assets/5047891/11594888/cba8ed42-9aac-11e5-8527-5510a37ac547.png)  @warpdesign This new rendering (screenshot above) will come out in December and it means ""Press `Ctrl` and the key that when pressed on its own produces `*`"""
2879|Oh, I don't have access to the code right now. It's something like:  link href='~/Content/bootstrap.css' type=...  Etc
2880|Sure... This is not colored  ``` typescript app.get('/test/', (req, res) => { }); ```  This is colored correctly  ``` typescript app.get('/test/', function (req, res) { }); ```  Just like here in github :D  []s
2881|awesome :fist:
2882|Yes I could do something like you proposed. @weinand what is your take on this. Should we change how we handle threads in the protocol so we support more adapters?
2883|@romu70 The download starts for me automatically when I access https://code.visualstudio.com/Docs/?dv=linux64 in Chrome for example. Here it is: http://go.microsoft.com/fwlink/?LinkID=620884  @bgashler1 Maybe we should render a direct download link on the download confirmation page in case download does not auto-start. ![image](https://cloud.githubusercontent.com/assets/5047891/11596152/b3771ce2-9ab3-11e5-9a8a-48ed1b14c037.png)
2884|@Protectator Looks great! Thank you for this and apologies for taking so long to merge it in. :heart:
2885|cursor blinking can now be disabled thanks to #500 from @Protectator   @anothergituser Please create a new issue for the other half (font size of explorer) or use zoom in.
2886|It would be great if extensions could hook into this too to provide configurations and a custom tasks.json. The same goes with the launch.json too.
2887|Not sure I agree with this as the default behavior, in JS and more functional languages in particular it is quite common to use functions as references such as passing them in as arguments. Something like this could irritate developers when they're used to typing `()` anyhow. An example of where this would get annoying:  ``` js var func = function (a, b) { /*...*/ } if (func) {   someFunction(func);   someOtherFunction(func.bind(null, x, y)); } ```  Do you know any editors/IDEs that use this as the default?
2888|Related? https://github.com/Microsoft/vscode/issues/993
2889|@osjn do you mean to have the closing tag be a higher priority than other tag auto-completions? Enabling this: - Type `<div>` - Type `<` - Press enter to auto-complete `/div>`  Related: https://github.com/Microsoft/vscode/issues/877
2890|Mono here...a fairly up-to-date version, too. I'll have to come back and say which version.
2891|@bpasero we don't send telemetry sync, those errors are expected to be on the console. I just tried to reproduce it with no luck.   @moostad please try disable telemetry as described [here](https://code.visualstudio.com/Docs/supporting/FAQ#_how-to-disable-crash-reporting) and let us know if you see any difference.
2892|Calling methods is common than passing them as arguments. Many IDEs like WebStorm, IntelliJ Idea and Android Studio use this as default behaviour and it really helps in coding faster.  I understand that this could irritate developers who are accustomed to typing parenthesis but for other developers who come from the JetBrains world, it becomes an extra effort. A simple option to enable this behaviour in settings would really help.
2893|Or someone can assign it to me - my team will be working on Python support over the next 12 months to bring as much from https://github.com/Microsoft/PTVS as possible and also to give VS Code its own unique spin (since the needs and uses are different from VS).  Incidentally, if you're _really_ keen to see this happen and like the sound of living in Washington (state), drop me an email (on my profile) with a resume and let's chat.
2894|I've been using a symlink for my settings.json and keybindings.json on Ubuntu for a week or two now with no problems.
2895|Found https://github.com/Microsoft/vscode-docs and will move the issue over there.
2896|@jrieken Yes, my file path contains js. The file path to the site root is `/Users/skovmand/Code/beat-ninja-frontend/site/resources/assets/js`
2897|If you add this, please support the (not-yet-standard) `compileOnSave` tsconfig option.  See https://github.com/Microsoft/TypeScript/issues/2326 and https://github.com/TypeStrong/atom-typescript/blob/master/docs/faq.md#i-dont-want-atom-typescript-compiling-my-js.
2898|Has this fix been tested successfully?  I'm running version 0.10.3 of the app which appears would contain the fix applied in c3094f3 but I still get the undefined error described in this issue when calling the OutputChannel.hide function.
2899|"Actually, wouldn't it be better to implement this as an extension, in support of ""[Don't create a monster, please!](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/8792656-don-t-create-a-monster-please)""?"
2900|in all the dark themes is difficult to see the cursor, and the other themes make you blind  :) can we change the cursor to anything else other than black? how about the default Visual Studio Theme? (Blue/White)
