13101|This issue was moved to OmniSharp/omnisharp-vscode#88
13102|"How can you change the configation to ""Launch configuration 2"" while debugging? While debugging is running the select dropdown in debug pane is disabled for me - so it should be unable to change launch configurations  What version of vscode are you using? What OS are you using?"
13103|Thank you for spotting this. Dup of #3984
13104|So after installing the old build, I launched an app from command prompt with cmd > code-alpha. I could remember I did that 2-3 times as I was expecting it should launch multiple instances for me, but it was just highlighting the active window and keep adding the instances in background that I could see in the windows Task manager. After all this exercise I closed the active window and started installing new build and finally got the warning in installation for those active sessions which are left abandoned. Let me know if you need more info on this.
13105|This is the loading time of emmet.  fyi @egamma
13106|This is by design. Ctrl+C without selection will place current line in clipboard. If you are on an empty line, it will place a newline character in clipboard.
13107|Cool, thanks for that. We gotta find out why Code instances stay alive after delegating to an already running instance. cc @bpasero
13108|Please don't mix issues for different languages, the grammars that are used to power the syntax highlighting are different, managed even by different teams. As the original description talked mainly about PHP I made this a PHP bug. Please file a new issue for JavaScipt, best with a JavaScript sample.
13109|@brennanMKE What language are you formatting in?
13110|"Sublime Text 3 has the feature to paste text with automatic indentation (`Ctrl`+`Shift`+`V`), which basically adds or removes levels and adjusts the first line to match the current block indentation.  **UPD:** This behavior can be default for `Ctrl`+`V` (like in IntelliJ IDEA, afaik), and have `Ctrl`+`Shift`+`V` for HTML previews as it is right now.  **UPD 2:** There is an [extension](https://github.com/spoeken/pasteandformat) that adds an `extension.pasteAndFormat` command, which can be used in `keybindings.json` (combination of `editor.action.clipboardPasteAction` and `editor.action.format`).  I thought why not allowing users to define keybindings with multiple commands using the array syntax, like this?  ```   ...   {     ""key"": ""ctrl+shift+v"",     ""command"": [       ""editor.action.clipboardPasteAction"",       ""editor.action.format""     ]   }   ... ```  This would solve the problem and add a possibility to create mini-macros, sort of! :smiley:"
13111|@joaomoreno could it be that this is due to our launcher script? first thing to test is if this reproduces when using code.exe or by double click on the shortcut.
13112|Tested again on version 0.10.10,  local variables are not shown in code intelligence. ![0 10 10](https://cloud.githubusercontent.com/assets/5099742/13739558/2177025e-e9cc-11e5-98a9-f3f48e9d58ce.gif)
13113|No, It goes away only when we perform refresh on explorer.
13114|duplicate of #3903
13115|This issue was moved to Microsoft/TypeScript-TmLanguage#124
13116|@vsccarl Format is not implemented for .php files. Did you install an extension? Or is this in a .html file?
13117|This issue was moved to Microsoft/TypeScript-TmLanguage#125
13118|@tinganho Can you give me some more information: - What version are you? - What theme are you using? - Are you sure this is with TypeScript (not JavaScript). - Can you add the code snippet here?
13119|This issue was moved to OmniSharp/omnisharp-vscode#89
13120|@ianwesterfield I agree that some of what Atom does could be tuned, and hear both you and @eyalsk. I understand completely that many people prefer to update JSON settings, and can see why.  I'd never propose doing something that alienates part of the community, but I believe that the current approach is alienating some users. It would be great to find a strong compromise here.  There are advantages to both approaches. JSON is fast, explicit, searchable, and easy to manage/share. The GUI allow for intuitive controls, understanding without reading documentation or comments, and the ability for some magic (i.e. automatically disabling setting y as it relies on setting x to be enabled).  The right approach might be that the first time you open the settings JSON, you're prompted and asked if you'd prefer to use the GUI. We could keep data on usage of each, and if the GUI becomes more widely used, we'd default to that instead - but keep the first-time prompt in place.  Again, I'm trying to finds a solution that impacts both parties the least - let me know if you have any better thoughts here, it'd be great to keep this discussion going.
13121|I also see some 'evaluate' exception in the console so this might be related to the changes you mentioned in the standup - being able to evaluate `Promise`
13122|This is a problem with the TS formatter we use. Moving the issue.
13123|This issue was moved to Microsoft/TypeScript#7503
13124|@alexandrudima To solve that, commenting probably needs to be done by the language mode As to correctly parse the commented region. But I'd say to close. Limitation as designed
13125|This works for me in the latest build target for end of March. Please ping if you still see the issue in the upcoming next build.
13126|This should go in the defaults VS theme -> `extensions/theme-defaults/themes/dark_vs.json` & `extensions/theme-defaults/themes/light_vs.json`
13127|I very much like that :+1:
13128|I can take that.
13129|I have fixed the issue that our default coloring interferes with the colors of the themes. We now look similar to your sublime screenshot, although Sublime doesn't seem to use 'bold' for the modifiers as it says in the Solarized light theme. Atom seems to use a different grammar, that's why the colorizing also looks different.
13130|The icon is still visible, just overlaid in an animation the same way the install and uninstall buttons are.
13131|I didn't think so. I think it would be a mighty fine goal for extensions. If we reached a point where we could load regular VS solutions (and/or develop other application specific project systems), that would be quite amazing.
13132|_go back_ means a wiggle animation. I personally think it would fit even worse than the current animation.  Forwarding to @bgashler1 who can figure out a better animation for installing extensions.  Also, notice that this won't survive long, once we move this into a viewlet.
13133|Won't fix. The status bar contribution will not last.
13134|"@RANUX the problem with your setup is that as soon as you start using a files section only the files listed there are parts of the project. So in your case the project only consists of  ""typings/meteor/meteor.d.ts"" and no other files. Hence you don't get intellisense in any of the others. Either remove the files sections or list all files you want to have part of the project."
13135|But it doesn't show you _extension updates_. It shows you the extensions that are out of date.
13136|Might your workspace be on a shared drive? What OS are you using?  Is it possible to share your workspace or create a simple reproducable case for us to investigate? Since I can not reproduce this on my machine.
13137|![screen shot 2016-03-14 at 11 34 35](https://cloud.githubusercontent.com/assets/1794099/13741843/bffabe6e-e9d8-11e5-8b28-e43107a91f84.png)  drilling to the heap show that suggestions are referenced via the focused item of the suggest widget
13138|Closing in favour of https://github.com/Microsoft/vscode/issues/4019. Created https://github.com/Microsoft/vscode/issues/4115 for the npm request.
13139|there is a typo in the grunt description (it says jake file)
13140|before/after snapshots [Archive 3.zip](https://github.com/Microsoft/vscode/files/171760/Archive.3.zip)
13141|This is by design, the guessing code only guesses 2, 4, 6 or 8. Updated the test plan to reflect this.
13142|One example: The typescript project uses spaces and does not configure indentation.
13143|@bpasero Any suggestions? We have usually communicated breaking changes in the release notes.  For the TypeScript project the guessing should guess spaces, does it not do so?
13144|@mastazi I guess that's why it was made to appear PHP only. If only the contribution guidelines had clarified this, @aeschli wouldn't have had to ;)
13145|I did not test detecting the OS setting. Erich mentioned that it worked for him in the stand-up, as he got VS Code in German.
13146|All we could do is a setting. But it can't be our settings store since this comes in to late.
13147|The command, as designed, inserts /\* before the selection and */ after the selection. It does not examine the selected text in any way. e.g. a follow up feature request could be to comment in such a way as to not introduce syntax errors, which is outside of the scope of such a command.
13148|@felixfbecker thanks. Fixed the typo.
13149|"I think putting on the backlog is a bit too optimistic, since this is a ""breaking change"".  If I have Windows locale set to German, VS Code always started up in English.  Starting with the March release, VS Code will start in German and it has no way to durably disable this behaviour."
13150|"This is by design. Pressing Tab on an empty line is implemented ""smart"". We do not have a setting to turn this off.  It brings indentation to the previous indented line or if the previous indented line ends with `{`, it brings indentation to the previous indented line + 1 indent, etc."
13151|could not reproduce.
13152|"In this case specifically, the previous indent was 6 spaces. The ""smart"" indent picks up that it should add 6 spaces, but since it is configured with tabs, it turns as many of those into tabs as possible, hence the 1 tab + 2 spaces."
13153|@bpasero  Sorry, wrong explanation on my end. When trying to implement that I noticed that the code for the main menu window is only executed once. So I don't honor the setting in the browser since that would result in mixed UI. Is this still correct?
13154|It has to do mixed whitespace because of the JSDoc case, e.g.:  ![image](https://cloud.githubusercontent.com/assets/5047891/13742793/520f32a8-e9de-11e5-8040-46d01a5d37d6.png)  Where pressing Enter inserts 1 tab and 1 space. Then the language regex rules kick in and append a `*`
13155|@mrmckeb I agree, I think some discussion should happen whenever there is a possible user gap.  I vote for @mrmckeb's idea for a prompt when first opening the settings.  I also agree that whatever the gui looks like, it should be generated automatically by the default JSON, and it's settings persist to the user's JSON as they reside today.  @felixbecker had two great points earlier in this thread.  I assume the same would go for keybindings to keep things consistent?
13156|@codyrigney92 the internal debug console is not only a console but a REPL too. This does not change if you enable the external console: the internal console is still used as the REPL. So having it open still makes sense. But I agree, that there are situations where you do not want to see the internal debug console at all. (BTW, this behavior hasn't changed in 0.10.10, it was always like that.)  @isidorn maybe we should consider to introduce a setting for this.
13157|@bpasero I could make it so that pressing tab never inserts mixed whitespace, but as shown above, this might break other use-cases (such as JSDoc) where mixed whitespace is desired.  So if you have any ideas...
13158|@alexandrudima sure it does, but not for new files, so you end up polluting the workspace with partial tab partial whitespace files.  Why did we decide to change the defaults?
13159|@dbaeumer if the locale needs to be set on the main side, then yes, a second instance would not change it. However, anything that happens within a window can be changed by passing in CLI args.
13160|@alexandrudima did you not start this?
13161|"@Tyriar if you can give me steps for the broken case please file a separate issue.  We actually close any file that is opened when you invoke ""Close File"". I add this to the list of UX issues we have around ""Close File"" vs ""Close Editor""."
13162|Maybe we should buffer applying the theme with a timeout.
13163|@Tyriar is the idea that this only works when you install from deb to get the script? should we do something for the Linux zips to get this too?
13164|I do not work on a shared drive, everything is located in my C drive. I'm using Windows 7 Professionnal x64.  As for sharing the workspace I cannot since it's what we are doing at my job, but if I have some spare time this week, I'll try to reproduce it on something else and post it.
13165|@weinand I see.  Makes sense.  Yes I think a setting for that would be useful.
13166|The intention was _to use_ the changelog, if existed. So, the developers that create it, would take advantage of it.  Thanks for your help
13167|I could argue that it is a feature that was missing :-). I understand your point but I think for the majority of the users the new behavior is correct. The reasons is: - either your native language in non English and you configured your OS to your native language. Then you prefer the native language over English and VSCode will honor that with the March release - your native language is non English but you configured the OS to English. Then VSCode starts in English.  I don't really see why a German would configure the OS to German and want to have VSCode in English. If his English is good enough for VSCode then I guess he would run the OS in English.  We can discuss tomorrow in the standup. Given that fixing this requires additional work/features I moved it to the backlog given the 'minor' value I see.
13168|@bpasero but that would mean the menu bar for example is in English and the window content is in German. I wanted to avoid this since I am pretty sure I would get a bug on this which I couldn't fix.
13169|@MKHenson no, VSCode doesn't use the globally install tsc. It ships with its own version. If you want to use the globally installed version of tsc then you need to set the typescript.tsdk setting.  However I think the problem is a configuration one. The gulp-typescript compiler is configured on the src folder. Where does your tsconfig.json file sit. And were do the typings sit (e.g. the node.d.ts file for the typings for 'http').  Could you share your project. That would ease tracking down the problem.
13170|@dbaeumer good point, I forgot about the menu. I think under this condition we should not do anything and I would not assume this to work with multiple windows and different languages.
13171|It's a good idea, and we do appreciate the feedback.  I've changed my mind, let's keep this around for when we improve the extensions UI.
13172|this actually happens whenever I start with just `code-alpha` and not have a file/folder identifier, like `code-alpha .`  unsure if this is for @bpasero or @Tyriar
13173|Trying to reproduce it on something else would be great. Also do you see this on all of your repos or on only one? Also if you open a file in vscode, and change that file outside vscode does vscode immediatly pick up that change?
13174|@weinand I would introduce a setting if more users ask for it
13175|node doesn't seam to use proxy settings from environment variables. I get:  ``` c:\PRJ\Temp>node script.js Got error: getaddrinfo EAI_AGAIN www.google.com:80 ```
13176|I have hidden Menu Bar，but I do not konwn how to show it？keyboard shortcut？
13177|@bpasero I tried 20 times but I cannot reproduce this. Or does this problem occur less often?
13178|@isidorn works good, I believe the editor hover hides quicker than it shows, maybe you want to do the same for the debug hover.
13179|Thanks for the update, the animated GIF looks nice and the appearance looks snappy.   > I haven't tried if there would be a good way to share information back from the extension-ui electron process to the vscode extension process. Maybe some kind of ipc / http channel could work, but might also degrade the startup time of the UI further.  You could  use stdin/stdout and a JSON payload. This how the extension process takes to language server processes for typescript.   > introduced problems since the process could keep running also after vscode was already closed.  When Code shuts down the the `deactivate` method of your extension is called and you should be able to clean up.  > the current vsix package of the extension weighs in at around ~70+mb   This is a lot, I'm not aware of this limit. One option would be to fetch the code from nuget on first `activate`. However, this is getting complicated for your scenario so we should look into exposing `BrowserWindow.getAllWindows()` API.  An another challenge is how to align the themes between Code and your UI process.
13180|Dup of #4105
13181|Hover still behaves somewhat different to me compared to editor hover, but I believe you :)
13182|@mrmckeb I don't mind to have a GUI as long as it's a separate application and in fact I think it should be, someone can just pick it up and write a GUI application for VSCode and a simple extension to launch it via tasks. :)  If you are really **serious** about making a GUI that **people will actually use** then generating it automagically from the JSON file is not only a bad idea but you turn a simple problem to a much larger one that I'm not sure you understand.  P.S. I'm all for discussing it, sorry if I _hijacked_ the post with my objection to it.
13183|+1 for ext console in that case.
13184|"@jrieken can you check if your ""current workspace"" is /dev/null? I think I have seen this on Mac already before."
13185|@LiZhenNet you can press the Alt key to bring it back briefly or F1 to find the command to toggle the setting back.
13186|In my case I had a simple extension (Hello World) that would create a output channel and append output to it when the command is invoked. Not sure if it makes any difference but I had the window with the extension on top of the debugger and clicked right onto the stop button even though the extension host window had focus. It should not make a difference though...
13187|Without reading this entire thread I give a big :+1: on this.  I have been using for Sublime for years and love the tabs. I see that working files fills some of the gap, but not completely. I can't explain fully why, but please give me my tabs!
13188|@bpasero On OS X if you have the EH window on top of the debugger and press the stop button, the first click does not stop the EH because it only brings the window to front. Only the second click kills the EH. Could that be the effect that you are seeing?
13189|Hi @dbaeumer, I can't seem to isolate the problem... Sometimes it works after a while and other times not. I can't figure out what the deciding factors are :/   If I can get a repeatable set of steps then I'll reopen the issue and explain in more detail. But thanks for your response.
13190|don't think so. I was running the git difftool command from a folder on my desktop and then ran code-alpha from inside that dir
13191|@egamma Nice to see you here :) Thanks for looking into these features. Regarding decorators, it's actually broken on my VSCode instance with the latest release.
13192|`EAI_AGAIN` is also [not an error related to proxying](https://github.com/npm/npm/issues/7348)... Try that snippet again later.
13193|Well that page shows the release notes for _all_ versions.
13194|You know there is no notifications while quick open is open.  Closing as won't fix, cause I wanna move away from quick open.
13195|This doesn't happen often, I doubt that it will be an issue.
13196|Assigning to March and flagging as important for discussion.
13197|I am just saying that action should just close quick open, this way the experience is not very nice.
13198|No, it does not, it only shows the latest version for me. There are links for other versions, but the user is taken directly to the latest
13199|It is in its current state because others feel that it shouldn't close, since you might want to uninstall other extensions. I got a bug and made it this way. Not gonna revert.
13200|Ok, just my 2 cents that the current uninstall experience is bad and making it work for the most common case is more important (uninstalling one extension). If a user wants to uninstall multiple extensions he can open quick open multiple times, he has more work to do but nothing feels broken. The current state with no uninstall feedback feels broken, especially now that we have introduced install feedback.
