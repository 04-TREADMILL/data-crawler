7301|Oh I get it, I was trying to run multiple instances in the same login session with different privileges. Thanks for the pointer, I'd suggest this could use a little documentation at least.
7302|Re: page load times - do we really want the first-run experience to be so tightly dependent on internet connection quality or network configuration?  Re: context-switching - full-screen or not, popping up a whole new window without explicit action by the user is an altogether jarring experience because it makes users feel [less in control](http://www.uxbooth.com/articles/the-perception-of-control/). It's fine if there's a link that a user clicks to trigger the action, though. Have we considered providing some basic UI within VSCode, and just populating it with a feed? This would result in a smoother first-run experience, instant load time of some predefined set of content, while keeping the benefit of being able to update it more frequently.
7303|Sure, drag a file from the desktop over the explorer and press <kbd>Escape</kbd>. ðŸ˜‰
7304|![you got it](https://media.giphy.com/media/l41lZxzroU33typuU/200.gif)
7305|It was a long and difficult conversation that made us go with this design, we are aware of the downsides of it but hoping that the upside is bigger. Being on the website will allow us to provide tailored getting started content, as well as running experiments and improving our measurement. We will be listening for feedback, and again if this turns to be an issue we can always pull it out.
7306|You are a hacker, man.  ![hackerman](https://media3.giphy.com/media/QbumCX9HFFDQA/200.gif)
7307|I completly agree with @jahewson , the current behavior doesn't make sense and is counter productive. +1 for a fix and not an extension
7308|+1
7309|Looking good so far :) I think screenreader support can be broken up into points like the following: - Make main edit area focusable - Enable screenreaders to receive useful information using UIA when simply arrowing through existing input and creating input  (yes, yes, I know that is easier said then done with this app) - Add UIA events for things like autocomplete suggestions, debugger warnings etc. - See what can be reused in the initial UIA implementation for the editor to make things like preferences screens and other such dialogs speak  The action bar and its actions are already sort of usable if you know how to get to them, so those only need some minimal work to be keyboard-accessible, no additional screenreader support should be required.
7310|"@bpasero yes, I had problems with the code generator. After two hours of investigation and removing npm modules from various locations I've learned the following: On OS X and linux do not install npm modules globally (""-g"") by using ""sudo"". Instead use the shell script available here: https://github.com/glenpike/npm-g_nosudo to configure npm so that it stores global modules in your home directory (without requiring ""sudo"")."
7311|I managed to get a repro today. I just crashed before I was going to pull up Developer tools console to take a memory snapshot.  http://i.imgur.com/rirFul1.png  It seems the typescript server is taking about 200MB. The renderer consumed about 800MB and then crashed.  When I get about 500MB of usage, I'll attempt to take a memory snapshot. The --renderer process is the webkit process right?   This was after two days since I last saw a crash. It seems using the tool for a 8 hour period editing lots of TS files adds up to usage faster.
7312|Gotcha, makes sense! :+1: I agree - there's certainly plenty of benefit for very little engineering cost, and it'll also help us quickly experiment with and iterate on the content, and ultimately provide the best on-boarding experience.   In the meantime, we should at least consider checking that the the user is connected to the internet before attempting to load the page. see #2400
7313|cool. Closing this for now.
7314|#### Windows  ###### Japanese  ![image](https://cloud.githubusercontent.com/assets/1487073/12599036/6fd31de2-c443-11e5-9fc4-d6fb75920595.png)  ###### Vietnamese  I could not get UniKey to do anything when it was on.  I followed the instructions above and make sure my settings looked identical.  I did however change the keyboard to Vietnamese QWERTY and i was able to see additional characters in the editor.  ###### Chinese  I think it worked for simplified Chinese?  ![image](https://cloud.githubusercontent.com/assets/1487073/12599438/b89de1c6-c446-11e5-8d23-b36b3ebaada9.png)  (picture also includes the Vietnamese text i was trying to type)
7315|@isidorn can you verify
7316|"Well, yes, I can focus on the Working Files area (is that ""Workbench""?), but that's only half the solution. The other part is, how do I tell cmd-1 to open the top-most item in the list, and cmd-2 the 2nd item from the top? If there isn't, I would like to see this added."
7317|:+1:
7318|Strange on the autocomplete issue. I've seen something similar related to the default open-file limits in Mac & Linux. Can you post the results of this cmd: `ulimit -a`
7319|Here are some related issues: #1081 and #703
7320|I hit this issue as well, suggest a more descriptive error would be helpful. It's extremely confusing that vscode obviously opens the file and even highlights the correct line before reverting all that work with such a generic message.
7321|+1
7322|mac->windows windows->mac mac->docker windows->docker
7323|"user1@ubuntu-webdev:~$ ulimit -a core file size          (blocks, -c) 0 data seg size           (kbytes, -d) unlimited scheduling priority             (-e) 0 file size               (blocks, -f) unlimited pending signals                 (-i) 7922 max locked memory       (kbytes, -l) 64 max memory size         (kbytes, -m) unlimited open files                      (-n) 1024 pipe size            (512 bytes, -p) 8 POSIX message queues     (bytes, -q) 819200 real-time priority              (-r) 0 stack size              (kbytes, -s) 8192 cpu time               (seconds, -t) unlimited max user processes              (-u) 7922 virtual memory          (kbytes, -v) unlimited file locks                      (-x) unlimited  This is on Ubuntu 14.04.  The issues you linked seem related to large amount of files in the project, or the name of directories in the path containing ""js"". I can reproduce it with nothing but a single app.js file in the root directory."
7324|And extending selection hierarchically up the element tree.
7325|I can confirm that the same code on Mac work but on Windows it doesn't.
7326|Nice one, the renderer process is the main process for the editor. If you can do a memory snapshot there it would bring us further. Unfortunately the snapshot would not work for any other of the processes, but those seem to be ok'ish.
7327|@rhires so you want cmd+1 to open explorer, cmd+2 to open search, cmd+3 to open git and cmd+4 to open debug?
7328|@martypdx this seems to be https://github.com/nodejs/node/issues/1184  as a workaround, do not cd into the folder but instead open the folder from its parent directory.
7329|Is it normal for tscse (typescript server) to consume 200MB though?  On Tue, Jan 26, 2016 at 9:29 PM, Benjamin Pasero notifications@github.com wrote:  > Nice one, the renderer process is the main process for the editor. If you > can do a memory snapshot there it would bring us further. Unfortunately the > snapshot would not work for any other of the processes, but those seem to > be ok'ish. >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-175408302.
7330|@SofianHn yup I can, you just close it and assign it back to me if you want a bug to be verified :)
7331|@zersiax thanks the feedback. In the January update we will have some first rough support for accessibility including the editor (needs to be enabled through a setting). I would much appreciate if you can give it a try. I'll follow-up with more details in this issue once the update is available.
7332|+1 I can find files much faster with the icons!  ![bildschirmfoto 2016-01-27 um 09 09 45](https://cloud.githubusercontent.com/assets/5446019/12607547/21a3b10c-c4d6-11e5-9f54-4c0e80c98c67.png)
7333|I checkout the same code, but there is nothing wrong with this~~~
7334|Yeah, very easily.
7335|@aeschli @chrisdias Thank you!
7336|@joaomoreno Example, please?
7337|duplicate of #2344
7338|@bpasero Good idea!
7339|:+1: I'll add an editor option
7340|We are not aware of such an extension, sorry.
7341|@joaomoreno Nice job!
7342|![bug](https://cloud.githubusercontent.com/assets/22350/12608137/59f6795a-c4da-11e5-9ab7-c69c22935cd5.gif)
7343|Duplicate of #1928
7344|VSCode ships with tsc 1.7.x. Your compiler is 1.9-dev.... This is why you see the mismatch in errors. You can make VSCode use a different tsc version as well by using the typescript.tsdk setting (see https://code.visualstudio.com/updates/vNovember)
7345|It's fixed in the latest
7346|@jrieken can you please comment. It is 'your' GitHub repository.
7347|Sorry I wasn't clear. This is what I mean:  ``` css your dom node::-webkit-scrollbar-button {     width: 0;     height: 0;     display: none; } ```
7348|Cmd+Tab is the way to go.
7349|Thanks @pjmeyer . Dup of #2338
7350|@alexandrudima I think registering a declarative support should but the description into a registry. When the mode get instantiated the first time the supports should be put onto the mode. Otherwise registering a support will trigger creating the mode which leads to early extension activation. But nothing for January.
7351|I show these events as they come from the adapter, thus forwarding to @weinand
7352|Yeap, I remember we have a duplicate for this one somewhere on the backlog.
7353|"@gregvanl when this happens, you can open the console and type ""document.activeElement"" to print where focus is, in this case I speculate focus is on the body element (the whole window) and we fail to indicate this. Assigning back to you to confirm."
7354|It is too subtle, when the good inferred proposal is a property. See below, the `title` suggestion is an inferred one and not distinguishable from the `global identifiers`.  We should find a more distinct icon for the `global identifiers`. ![icons-intellisense](https://cloud.githubusercontent.com/assets/172399/12608332/e317292c-c4db-11e5-9b66-175b2cbafe35.png)
7355|@greybax Does the other file also contain a `Node` type? Or you are including all of `lib.d.ts` such that this collides with the DOM Node
7356|Disagree
7357|This is not what the generator produces when you pick the next version.
7358|This issue was moved to OmniSharp/omnisharp-vscode#21
7359|duplicate of #2169
7360|@SofianHn yes, that's expected. There is no guaranteed order for data travelling on different communication channels (e.g. pipes).
7361|There are two reasons: First is that we tried out a design with full horizontal width and compared that to a design that is as wide as the editor area. In our studies, nobody expressed a preference for the full width panel.  Secondly, one of the main ways we achieve flow in the product is by maintaining a horizontal order, or flow. For example, in the standard layout it starts with the activity bar on the left - the user clicks on an icon and a viewlet appears to the right of the activity bar.  From within the viewlet, the user chooses an item and, if that item contains any content, the content is viewed in the editor area to the right of the viewlet.  For all of the content that we considered that might show up in the horizontal panel they were all related to content inside a viewlet. Details about the running program for example or details about git commands or running tasks. All of which have a 'parent' inside a viewlet.  We also considered other items that might show up in here in the future such as errors and warnings and also believe that those are related to content inside a viewlet.  So a combination of maintaining the sense of flow through the product, the relationship between different components and our experiment comparing different designs led us to this requirement.
7362|Thanks. We should spend some time thinking about how best to indicate that an editor has focus. I don't know yet if it should involve the title area or the editor. @bpasero - did you have any specific ideas?
7363|We discussed this quite a bit before deciding to proceed with the design as it is. We understand the concern you have raised but we aren't sure how significant the consequences are. Is there something about the colour that you think will cause the user to misinterpret the output they are reading and cause them to take an incorrect action?  One thing I wonder about is whether or not the blue colour might be interpreted as indicating that focus is inside the panel. Now that we are doing this work to indicate focus, this might be another reason to rethink this design.  The main aim remains the same - we need to ensure that the horizontal panel can be distinguished from an editor.
7364|Thanks!  Is there any way we can assist in debugging this? Can you replicate it somehow?  I face this problem while sitting behind a corporate proxy that requires a custom root cert to be installed.
7365|Not much, I guess the editor title area is a good start to add some indicator.
7366|I filed a bug today that the scrollbar is lagging behind when resizing a single editor, I wonder if there is a delay somewhere in the layout call of the editor that would cause this @alexandrudima
7367|@joaomoreno the problem is that the debug adapter does not have a notion of 'workspace root'... For now I will let the debug produce an error if only one of localRoot or remoteRoot is specified.
7368|@alexandrudima please note my change in your land: https://github.com/Microsoft/vscode/commit/a93b4065ade5ca9256881d6c1bcc6695eb7b7cbb#diff-d327a8b1ceb558fef39f36164c644cb4R779
7369|"We usually don't use strong contour lines but separation by extensive backgrounds (see sidebar & editor). That's why I am irritated by the harsh line being drawn between editor and bottom panel. I would suggest to continue using the background stylings to separate editable from non-editable (primary/secondary) content.   I didn't think of focus indication but you do make a point there  <img width=""454"" alt=""screen shot 2016-01-27 at 11 06 04"" src=""https://cloud.githubusercontent.com/assets/1794099/12610166/84c60950-c4e6-11e5-9804-4849aef0dd46.png"">"
7370|@maritz Just to confirm, did you try [this build](https://ticino.blob.core.windows.net/build/0e17d138ca2e7f5a342e049836a2b2b0beb54685/VSCode-win32.zip?st=2016-01-20T08%3A28%3A00Z&se=2016-01-26T08%3A28%3A00Z&sp=r&sv=2015-02-21&sr=b&sig=Xit%2Bxckw2%2BoMzH%2FNjkiBWOLzP5Th%2Ba21mE7hBTGEdYU%3D)?
7371|@bpasero Ok, I will also put it in the internal config options computation such that all readOnly editors get it, not just the diff and output
7372|I'm not a big fan of a confirmation dialog here. Would it help to know what would be pushed when you hover the action?
7373|Indeed, I always paint at the next animation frame. Maybe on layout I should paint synchronously?
7374|Is there maybe a way for the adapter to get this information via some mechanism?
7375|:+1:
7376|Worth a try :+1:
7377|This manifests in [my extension](https://github.com/hoovercj/vscode-haskell-linter/blob/master/src/features/hlintProvider.ts) line 144 `provideCodeActions`, line 270 `runCodeAction`.  The precise steps as a user would be: 1. Make a change to a file that will cause an actionable diagnostic to be provided. 2. Switch to the git diff view 3. Notice the diagnostic on the right side of the diff view 4. Highlight the code and see a lightbulb 5. Click the lightbulb to trigger the code action 6. Wonder why nothing happened  The `uri` being provided to the `provideCodeActions` via the `vscode.TextDocument` object is simply the normal path. `file:///path/to/file.hs`, no right or left or anything.
7378|Yes, we will revisit this.
7379|Giving to Brad so he is aware of feedback. Once we collect all the feedback we can revisit what exactly to do here.
7380|Nice catch man.
7381|:+1:
7382|@jrieken Can't repro. Reopen if you still can.
7383|@joaomoreno sure, a new parameter (`workspaceRoot`) in the launch config ;-) But this would not really improve the user experience because it would just require the user to pass a `workspaceRoot` instead of a `localRoot`.  Alternatively we could start to pass the `workspaceRoot` as an environment variable but I'm not a fan of this because it is not a transparent mechanism...  @isidorn your opinion?
7384|Forwarding to Brad so he gets the feedback and thinks about the solution
7385|Dup of #2299
7386|Thanks, good catch, snippet mode is not useful here.
7387|@bpasero the problem here is that the editor is also a panel. So I can only make this an option in the constructor which makes it a bit ugly ( so the output has it, and editor not) I think that repl and output implementing it is a better solution. Thoughts?
7388|Also doesn't work with `if(1)` or `if(0)` -- it appears to be hard coded for true or false
7389|I'm also behind corporate proxy with authentication. It works at home, but no luck with installing any extensions on work PC.  Couldn't download the linked build
7390|What if we just decided to delay showing the dirty indicators until 1 second has passed? Adding another setting to control the visibility of dirty indicators makes me feel a little uneasy. I think I would prefer that we fine tune the experience so that it works well without needing the user to configure whether or not they show up.  So if the user has autosave set to onfocuschange or ondelay and the file is dirty for more than 1 second we would show the dirty indicator.  What do you think?
7391|This issue was moved to OmniSharp/omnisharp-vscode#22
7392|Or if the delay is set to 1 second or less we don't show the dirty indicator. If it is set to more than 1 second we show it immediately. So in Alex's case above where he has it set to 10 seconds the dirty indicator would show up as soon as the file is changed. But in the case where the delay is set to 1 second, it wouldn't show up.
7393|@isidorn you gotta listen on the panelPart BRO
7394|@stevencl I am happy to avoid another setting! I am fine with not showing it for a delay of 1s and below, but what about showing it always for then it is configured to save on focus change? Imho we need to be consistent and then show the indicator always in that case.
7395|To verify use test case from comment https://github.com/Microsoft/vscode/issues/1622#issuecomment-168746059
7396|from #2423: IMO there's too much margin above the 'OUTPUT' label. Maybe the title should be vertically centered, and the header made more compact so less space is lost.
7397|Yes, I agree. That was what I meant in my last comment, that we would only not show it if set to ondelay and the delay is set to 1 second or lower. If it is set to onfocuschange we always show the indicator.
7398|@joaomoreno I have not. I would need a linux x64 build to test it, though.
7399|The dark theme does not configure any of the selection colors, what you see are our default colors that haven't changed recently. Assigning to Brad to tune, but it's a complicated matter:  3 things interfere here: - selection (.selectedtext), either in a focused editor (blue) or not focused (gray) - selection highlight (.selectionHighlight): applied to all the same substrings in the document - mark occurrences write access (.wordHighlightStrong) and read access (.wordHighlight) if in a word.  selection without focus: #3a3d41; (first screenshot) selection: #284f78; (second screenshot) selectionHighlight rgba(173,214,255,.15); read occurrence (grey): rgba(87,87,87,.72); write occurrence (blue): rgba(14,99,156,.72);   ![image](https://cloud.githubusercontent.com/assets/6461412/12611265/18973d0c-c4ec-11e5-873e-5b7997858f23.png)  ![image](https://cloud.githubusercontent.com/assets/6461412/12611540/617aec98-c4ed-11e5-8609-748817061afb.png)  ![image](https://cloud.githubusercontent.com/assets/6461412/12611221/e6a8a646-c4eb-11e5-834c-d79859e56ae2.png)
7400|@alexandrudima FYI
