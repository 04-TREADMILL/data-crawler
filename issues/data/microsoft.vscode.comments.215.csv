21401|My first reaction is that perhaps we shouldn't be showing all these indicators all the time and perhaps we should only make indicators visible for a field that is selected? Consider also the case when there could be more than one indicator for the field (references, change history, etc).  For example, imagine selecting the symbol and seeing something like this:  ![image](https://cloud.githubusercontent.com/assets/1704059/15217278/b6a7b472-1852-11e6-9a76-607b3541cd37.png)
21402|So, the 90% user scenario (I guess) is that all threads should continue.  Can we revert to that behavior until a mechanism to support single vs. all is put into place & supported?
21403|OK good to know it's being worked on! Thanks.
21404|This sounds like an issue with the C# extension. Can you please file this issue in their repo? https://github.com/OmniSharp/omnisharp-vscode
21405|Do you have the C# extension installed? If yes and you still see the issue please file an issue against the C# extension here https://github.com/OmniSharp/omnisharp-vscode  You can get the extension here https://marketplace.visualstudio.com/items/ms-vscode.csharp
21406|@acastaner Just to be clear. This happens only and as soon as you open a C# file? Like you are happily working in a TypeScript file (with IntelliSense et al) and then when you open a C# file it crashes?
21407|@isidorn, @jacdavis I think that the understanding of how Visual Studio works here is incorrect. The converse of your statement is actually the case. VS does _not_ support pause/continue _one_. That is, VS is pause/continue all by default, and the AD7 based debuggers are all this way. For the C# debugger and C++ debugger, I think the request is really that the debugger makes the determination about how it will pause/continue debugging.
21408|"unsure how that would work for things that aren't single line/word, like so when showing function metrics:  <img width=""291"" alt=""screen shot 2016-05-12 at 17 53 12"" src=""https://cloud.githubusercontent.com/assets/1794099/15221130/75cd7122-186a-11e6-9f3f-da00bcab3eb1.png"">"
21409|I added this additional comment in #5643:  @isidorn, @jacdavis I think that the understanding of how Visual Studio works here is incorrect. The converse of your statement is actually the case. VS does not support pause/continue one. That is, VS is pause/continue all by default, and the AD7 based debuggers are all this way. For the C# debugger and C++ debugger, I think the request is really that the debugger makes the determination about how it will pause/continue debugging.  @edumunoz tested the original change, and didn't find an issue. Possibly, we missed this specific case, or it is harder to repro in C++ than it is in C#.
21410|(Note -- I've looped.NET Core War as a potential release blocker; we haven't assessed yet.)
21411|@23min Can you share your snippet with us? Trying this with the `class` snippet in JavaScript doesn't allow me to repo  ![may-12-2016 17-57-13](https://cloud.githubusercontent.com/assets/1794099/15221275/1bce3ebc-186b-11e6-89f0-b5c3e59bc53f.gif)
21412|All vs debuggers (and any debugger on windows using the win32 debug api) use the Stop All model. That is the native debuggers (visual studio, windbg) and the Clr debugger. That is, when a break event occurs, all threads are stopped by the OS before the debugger ever sees the event. A continue continues all threads in the process.   The only way to get into stop one mode on windows is for a user, to go to the threads window in break mode and pause the one thread they want stopped in break mode and then continue. While it would be nice to support a stop one model, it is _not_ something we have ever received feedback from users as necessary. Doing this automatically would introduces huge changes in the way our debuggers would work since new debug events can now arrive while we're in break mode. This is especially heinous when we are performing function evaluations implicitly like we do in managed code.   What diag wants is this: if the stopping event has all threads stopped set to true, continue all threads on continue. That is the behavior we wanted when we added the new flag to the stopped event.
21413|The OSS build does not specify the extensions marketplace is the issue. I think the reasoning behind this is to do with licensing. Leaving open for @joaomoreno for further comment when he's back.
21414|I guess it doesn't hurt as long as it doesn't interfere when the user explicitly installs https://github.com/LiuJi-Jim/vscode-vue
21415|Repost from the other thread.  All Visual Studio debuggers (and any debugger on windows using the win32 debug api) use the Stop All model. That is the native debuggers (visual studio, windbg) and the Clr debugger. That is, when a break event occurs, all threads are stopped by the OS before the debugger ever sees the event. A continue continues all threads in the process.   The only way to get into stop one mode on windows is for a user, to go to the threads window in break mode and pause the one thread they want stopped in break mode and then continue. While it would be nice to support a stop one model, it is not something we have ever received feedback from users as necessary. Doing this automatically would introduces huge changes in the way our debuggers would work since new debug events can now arrive while we're in break mode. This is especially heinous when we are performing function evaluations implicitly like we do in managed code.   What vsdiag wants is this: if the stopping event has all threads stopped set to true, continue all threads on continue. That is the behavior we implemented when we added the new flag to the stopped event that all threads are stopped.
21416|Confirmed that this is a blocker for .NET Core scenarios & we will need a quick resolution, please.
21417|@jacdavis Just making a clarification, you said:  All Visual Studio debuggers (and any debugger on windows using the win32 debug api) use the **Stop One**  I think you meant:  All Visual Studio debuggers (and any debugger on windows using the win32 debug api) use the **Stop All**
21418|Yes, I edited the text in both threads.
21419|There is an extension for VS that shows code metrics like so:  ![image](https://cloud.githubusercontent.com/assets/1704059/15222922/c306048c-1869-11e6-98f3-98d97d18b524.png)
21420|We have changed the behavior such that the stop one / continue one is a special case for php. This is a temporary workaround, in the future we plan to let adapters specify what model they support.  I have triggered VSCode alpha builds and they should be out of the oven in around 20mins, please verify this fix solves the issue described.  Thanks
21421|@jrieken I'm having this issue as well. My OmniSharp log is empty.
21422|@dbaeumer I wonder if this rather should be a setting instead. are you always wanting to open the folder in a new window if you pick it from the recent list?
21423|Not that I know of.  I've seen this on several different machines including CDias' OS X machine. I'll see how widespread the repro is on the team here in Redmond.
21424|"Can you see if anyone else in Zurich can repro the issue?  It's a simple repro.  I think the issue is worth investigating since it could happen when a newbie is trying out VS Code or JavaScript or Node.js for the first time.  They create a simple ""Hello World"" app and then decide to start over recreating the empty file."
21425|+1 I just discovered VS Code and I'm loving it, but as a long time Sublime Text user on Linux, I'm missing the ctrl + click ability.  Would love to be able to customize mouse shortcuts.
21426|"> Unless ConEmu can somehow work with the processes launched by the process, the workaround is how you will need to do it.  I suggest an alternative which might do the job. I would call it the ""Yo dawg!"" technique ¬ÆÔ∏è   ![image](https://cloud.githubusercontent.com/assets/2091902/15226591/a6c180b6-1883-11e6-8814-319afb0dac7d.png)  Let's say you do not use a batch file anymore but a .exe ""GUI"" wrapper which would: 1. To simplify things for end-users. Rename current `code.exe` into something else (`code-runtime.exe` in this post). That's our wrapper which will benefit from the `code.exe` name now. 2. Do the equivalent of `code.cmd` but in a native Win32 GUI executable named `code.exe`:         set VSCODE_DEV=       set ATOM_SHELL_INTERNAL_RUN_AS_NODE=1       call ""%~dp0..\code-core.exe"" ""%~dp0..\resources\app\out\cli.js"" %* 3. Wrap the `code-runtime.exe` GUI into `code.exe` (same technique than for ConEmu tabs).  With this technique, I suppose that ConEmu would be able to get the window inside it because first process is a GUI and remains running.  üé®  Depending on how _current_ `code.exe` is built, it might even be possible to use a single executable which would wrap a new instance of itself. I don't know if it's actually feasible however."
21427|Just repro'd on Wade's OS X machine as well.
21428|Not sure who contributes the highlighting, if it is the extension then this should be moved to  https://github.com/OmniSharp/omnisharp-vscode @aeschli can clarify
21429|fyi @bpasero
21430|Asigning to may to try to reporduce
21431|Created as issue 316 over there, but I would swear it behaved the same before I installed that extension.
21432|Related: https://github.com/Microsoft/vscode/issues/5223, https://github.com/atom/language-sql/issues/13
21433|**@saml**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
21434|Temporary trick in case others are suffering from the same issue:  ``` typescript function getTextEditorViewColumn(textEditor:any) : number {   return textEditor._viewColumn; } ```
21435|"The ""Ctrl+P"" and then ""ext install csharp"" is not working...  Can't get C# support for editor whose name starting with ""Visual Studio"" really did amaze me :("
21436|I'm looking forward to this feature
21437|"@bpasero same problem here, my process information:  ``` 09:45 $ ps aux | grep Electron tang            74428 100.0  0.5  3386340  89256   ??  R    11:03AM 439:29.28 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Users/tang/.vscode/extensions/ms-vscode.jscs-0.1.5/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/tang/.vscode/extensions/ms-vscode.jscs-0.1.5/server/server.js tang            14645   0.0  0.2  3252420  37760   ??  S     9:35AM   0:00.90 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=watcherService tang            14610   0.0  0.0  2489644   3244   ??  S     9:35AM   0:00.01 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=61 tang            43263   0.0  0.0  2545816   2752   ??  S    Wed05PM   0:00.40 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=61 tang            11187   0.0  0.0  3220200   1124   ??  S    Wed11AM   0:01.02 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Resources/app/out/bootstrap /usr/local/bin/git /Users/tang/Git Repositories/rakr-widget utf8 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/MacOS/Electron 2.8.2 tang             7897   0.0  0.0  2518316    500   ??  S    Wed11AM   0:00.03 /opt/homebrew-cask/Caskroom/visual-studio-code/1.1.0,c212f0908f3d29933317bbc3233568fbca7944b1/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=61 ```"
21438|@tan9 that looks like the JSCS linter given the path of the 100% CPU. Please report to https://github.com/Microsoft/vscode-jscs  @rockymontana  A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21439|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21440|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21441|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21442|"Can you please provide more details as to why ""ext install csharp"" is not working. Do you get any errors? Are you connected to the internet when doing this? Are you behind a firewall?"
21443|Yes, this is as designed. Do you find it confuzing? Why would you expect to see the same message on hover. We tried to show the meta-info on hover, because the actual error is sometimes not as clear as in this case
21444|But why would we do that for the built product and our users? This is not something a user should typically do. And when you run out of the source code, we do assign a default keybinding. @v-pavanp please clarify and I suggest to close this one.
21445|"Internet connection seems fine, and I manually added VSCode to the Windows Firewall approval list. When I typed ""Ctrl+P"" then entered ""ext install csharp"", the progress bar below turns out running, then nothing happened, the C# support did not show up No error popped up"
21446|@fantasyKing Do you have any extensions installed? Does this reproduce when closing all instances of VSCode and launching it from the command line with `code --disable-extensions` ? Did you customize any keybindings via `File > Preferences > Keyboard Shortcuts` ?
21447|@aleksey-pastuhov That looks like a Chromium or graphics drivers bug... Does this happen if you run VS Code with `code --disable-gpu` ?
21448|@andy-dev We don't play any sounds. Maybe the OS is doing this? Does this sound occur when you are in other programs and press the same key combo?
21449|OK. We have a trace and @gregvanl can easily repro. I will forward to the TS team then. The are in Redmond as well and can easily drop by. The issue is like the trace shows in the tsserver (might be timing related).
21450|This issue was moved to Microsoft/TypeScript#8587
21451|Yes, I almost always want to open a new window.
21452|It does exist as ['TextEditor.viewColumn'](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L772)  @bbenoist Aure you sure you are using a recent version of vscode.d.ts?
21453|fyi - we have moved the omnisharp bits to it's own repo: https://github.com/OmniSharp/omnisharp-vscode.
21454|And the lens shows because I am in the body of `Start` or always?
21455|@magnasteyr do the machine that work fine in terms of TS show the 'endless' gulp behavior as well?   The trace from a working machine indeed looks much better. There hover takes ~41 ms. I suspect that the following is happening: - something process saves files to which gulp and the tsserver reacts. In the case of the tsserver the change is processed and on hover some parts of type checking are run again. That is why the request take ~1 sec.  We need to understand what is triggering the save on your machine. Since auto save is disabled in vscode this must very likely be something different.  Do you have additional plugins installed. Can you start code from a command line with --disable-extensions and see if it shows the same behavior?
21456|@archer884  I agree that the set of auto-closing characters should be configurable, sometime the quotes are annoying me as well.  In the short term, maybe this is a bug in the Rust configuration we ship with? [https://github.com/Microsoft/vscode/blob/master/extensions/rust/rust.configuration.json] - I am sorry I don't know Rust's syntax.
21457|"The problem matcher would look like this:   ``` json ""problemMatcher"": {         ""owner"": ""python"",         ""fileLocation"": [""relative"", ""${workspaceRoot}""],         ""kind"": ""file"",         ""pattern"": {                 ""regexp"": ""([^\\s=]+) \\.*F\\.*"",                 ""file"": 1         } } ```  If you need both a file and a location based problem matcher you would define two. The problemMatcher property takes an array of problem matchers as well."
21458|No, the machine that works fine has no problem with the parallel running gulp task.  Except of the ts code snippets plugin I've no additional plugins installed. Starting vscode from the commandline with option --disable-extension doesn't make any difference, - same behaviour.
21459|+1
21460|This is the plan: - F12 on a symbol with multiple definitions - _new_ show the peek window at the first definition instead of the usage - _new_ when pressing Enter or double clicking a reference the peek window closes and reveals that location
21461|Agreed, this is a bug, I was just explaining where the code goes wrong.
21462|@realitylord It will take a while, but the fix will definitely come. We need to wait first for Electron to pick up a new version of Chromium that contains this fix and then we're pretty quick on our side in picking up new Electron versions.  I cannot say precisely when this would happen.
21463|Yes you are correct. I have tried with the reStructuredText and PowerShell extensions and they don't crash the window. Only the C# extension does.
21464|@alexandrudima thanks for answer
21465|The most ideal scenario for this is that anything that starts with the same text as a parent file, minus the extension gets nested, like this;  ``` File1.cs --- File1.File2.cs --- File1.File3.cs ------ File1.File3.File4.cs ```
21466|always happens to me, I've never been able to update automatically, ofc, if you upgrade manually it works just fine(I'm on 8.1 x64) thanks
21467|Could you at least mention what setting will restore the old 1.0.0 behavior (which seemed to be to reveal upon launch)?  I do not like the new default behavior in 1.1.0 (which does not reveal the console).  Btw, the new `internalConsoleOptions` setting, nor its possible values, seem to be documented by the intellisense within the launch.json file.  In fact, the intellisense there seems to be pretty messed up and incomplete in version 1.1.0, vesus what it was in 1.0.0 -- I would not known of the existence of `internalConsoleOptions` were it not for this issue.
21468|"I agree with @CherryDT . I don't like the space between `function` and `()` (i.e. `function (a, b) {...}`) and would like to modify this behavier.  Sorry, found the options: `""javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions""` does the job."
21469|Hi @mattflix thanks for constantly providing useful feedback. However this is not documented because it is in the may - release which means it will be made public early June (yeah the naming is a bit confusing). Thus you should get nice inteli-sense and be able to configure debug console behavior with the next vscode release 1.2. If you want to get this behavior before I think we will anounce our alpha channel soon, so stay tuned for that.
21470|Okay thanks, will look forward to that.  Am I crazy, or did the debug console reveal behavior change between 1.0.0 and 1.1.0?  (I swear I didn't have to constantly manually bring back the console on every launch, and now I do.)  Btw, I would love the ability to simply hit the Escape key to _toggle_ the console shown/hidden state (like it works in Chorme DevTools).  I tried, but could not make a VS Code key mapping do this for me.
21471|Yeah it changed, let me search for the issue... Here it is https://github.com/Microsoft/vscode/issues/4045 Yeah I also wanted that esc behavior and was fighting for it, but we have too many things binded to esc at the moment. So what works for me is esc when console has focus - closes it And ctrl + J always toggles it - which is what I use in the end for my day to day development
21472|"@isidorn I'm sorry but on further investigation I think this is a false alarm. The files not clearing is definitely being caused by the hidden CRLF characters which are not marked in the vscode diff.  Should I raise a separate bug for that, or can we convert this one to read ""vscode doesn't visualize changed newline characters in diffs"" or something along those lines?"
21473|I believe there is already a feature request for that - please search for it, and if you can not find it please file a new issue - thanks!
21474|May to investigate
21475|This issue seems to be intermittent for me.  It appears that vscode recognizes git installed sometimes and sometimes it doesn't.  When it is working it seems to work up until I restart my machine and then it may or may not work the next time I start up.  Sorry I can't give more specific details.
21476|Seems like this has been added in vscode 1.1.0
21477|@bpasero I understand. Well then, hope this feature comes out soon, would contribute a lot to users with multi-monitor setups
21478|"> show the peek window at the first definition instead of the usage  @jrieken What does that mean? Is that by alphabetical file order? E.g. now when I press F12 I often get a hit in another file in the ""out"" folder as my source files are in the ""src"" folder. Kind of annoying."
21479|This is because the installation takes quite some time and there is no progress.
21480|@HookyQR Thank you very much for the heads up, we will be including this fix in 1.1.1
21481|I cannot reproduce. Moving to @alexandrudima to see if there are some concerns with this approach.
21482|The only thing I notice is that when the editor does not have focus, Cmd+W still closes the window so adding another rule to unbind the key should do it.
21483|with the current or the new behaviour? today the order is compare(directories), compare(filenames). I think that's reasonable, but actually my _new_ pick of the first one might be incorrect. I guess it should be the next based on the current location and the afore mentioned sort-order
21484|"``` {      // Place your snippets for Elixir here. Each snippet is defined under a snippet name and has a prefix, body and      // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:     // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.     // Example:     ""Print to console"": {         ""prefix"": ""log"",         ""body"": [             ""console.log('$1');"",             ""$2""         ],         ""description"": ""Log output to console""     },          ""Print to Somethjing"": {         ""prefix"": ""Lassa"",         ""body"": [             ""console.log('$1');"",             ""$2""         ],         ""description"": ""Log output to console""     },      ""Supervisor Template"": {         ""prefix"": ""sup"",         ""body"": [             ""defmodule $1.Supervisor do"",                 ""\tuse Supervisor"",                 """",                 ""\tdef start_link do"",                     ""\t\tSupervisor.start_link(__MODULE__, [])"",                 ""\tend"",                 """",                 ""\tdef init(_) do"",                     ""\t\tchildren = ["",                         ""\t\t\tworker($1.Server, [])"",                     ""\t\t]"",                     """",                     ""\t\tsupervise(children, strategy: :one_for_one)"",                 ""\tend"",                 """",             ""end"",             ""$2""         ],         ""description"": ""Creates a skeleton supervisor""     },      ""GenServer Template"": {         ""prefix"": ""gens"",         ""body"": [             ""defmodule $1 do"",                 ""\tuse GenServer"",                 """",                  ""\tdef start_link do"",                     ""\t\tGenServer.start_link(__MODULE__, :ok, [name: __MODULE__])"",                 ""\tend"",             """",               ""end"",             ""$2""         ],         ""description"": ""Creates a minimal skeleton genserver""     }    } ```"
21485|By analyzing the blame information on this pull request, we identified @dbaeumer to be a potential reviewer
21486|Hi **@CryZe**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
21487|same Issue.
21488|I am very sorry to hear you are having issues with VS Code. I wonder if this issue is being caused by an installed extension. Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions` and try your steps again to see if it reproduces. If you see it is an issue with the extension, please file it against the extension repository itself.
21489|Those particular indicators show always because they are on the method signature.
21490|"Hi @liuww111,   VS Code is written in TypeScript/JavaScript/HTML so ""out of the box"" we only include deep support for these languages. For any other language you must install and extension to get the support. We do this to allow languages to ship on their own schedule and to keep the core VS Code editor download as small as possible.  We are constantly trying to improve the experience for how you discover and install extensions into VS Code (see [here](https://code.visualstudio.com/updates/vFebruary#_workbench) and [here](https://code.visualstudio.com/updates/vMarch#_workbench)), so hopefully you will find this less inconvenient over time. For now, please see the [C# documentation](https://code.visualstudio.com/Docs/languages/csharp) on how to install the extension and what types of projects are supported.    Thank you, Chris"
21491|@dbaeumer I see, sure that will work too
21492|@DustinCampbell anything special you guys do on activate which might cause trouble on win7?
21493|yeah, challenge for us is that extensions are free to put lenses anywhere. most are nice and use method/functions scope but anything is possible - as C# does with lenses on enum elements. Maybe we should talk to them about this...
21494|On activation, the C# extension tries to acquire OmniSharp
21495|Hi @bpasero, can you clarify your question?  I'm not sure what you're asking regarding the developer console.
21496|@weinand any comment on why the debuggers don't work in oss?
21497|@emmby Help > Toggle Developer Tools > Console is what I was referring to.
21498|Do users need to see these references all the time or just for what's in scope based on their selection?  I think they would only need to see it for what's in scope of where they are, and thus I like what @stevencl suggested about minimizing the clutter of these pieces of information (seems the most scalable).  One thought, is putting this inline annotation necessary?  I know it's not part of the code, but a subconscious part of us might feel anxiety that we may inadvertently select this information because it's inline with the code.  Perhaps a hover event over signatures and variables could show everything contributed by extensions with no inline annotations.  (some keybinding could give more info on what everything is as well perhaps). ![image](https://cloud.githubusercontent.com/assets/11839736/15256990/0c79e2a2-18f9-11e6-83af-aa4389805aa0.png)
21499|@joaomoreno have you had any experience with modules not installing correctly as part of vscode npm install but working fine later? It also seems to install fine when running `npm install https://github.com/platformio/pty.js/tarball/22e84bd6ef177c7c211a767564ffe64426cb8a69`, just not with `./scripts/npm.sh install`
21500|The problem is with the '<' operator.  ![image](https://cloud.githubusercontent.com/assets/6461412/15257611/716c60c4-1947-11e6-96b4-f351bd759fd3.png)
