11401|"Pushed a change that makes ""Close File"" close any active editor. After march we will revisit the confusing subtle difference between ""Close Editor"" and ""Close File""."
11402|@isidorn  @weinand  I resolved it.  There are two reasons that cause the issue: - response.body contains null element, for example  ``` javascript protected variablesRequest(response: DebugProtocol.VariablesResponse, args: DebugProtocol.VariablesArguments): void {      response.body = [         new Variable('name1', 'value1'),         null,  // null variable         new Value('name2', 'value2')     ] }     ... ``` - Variable's value is empty but it has a valid `ref`, for example  ``` javascript protected variablesRequest(response: DebugProtocol.VariablesResponse, args: DebugProtocol.VariablesArguments): void {      response.body = [         new Variable('name1', 'value1'),         new Value('name2', '', 1000),  // empty value, and its ref is 1000         new Variable('name3', 'value3'),     ] }     ... ```  I think VSCode should shoot these information instead of just show a spinner. Or it should handle these exceptions and shoot some warning information.
11403|In our company we would like to deploy for about 20 users VS Code, but we don't want to go to each PC and set for example the telemetry, or to hide js and js.map files, when there is a .ts file etc. ofc it's relatively short in terms of time, but it accumulates from time to time, new apps come, so there we got to run again etc. So therefor it would be handy to have the possibility to set propertys through Group policy or registry
11404|Also, there's not much value in them fading away. For file lists, you don't really know if a file has been removed or it's just that there's a hidden scroll bar to see more. #annoying
11405|i think the issue should be fixed by electron, Chrome has no problem.  so, u can set the monitor's scaling to 100%, and font size 20+, it‘s very clear, just look like MAC retina.
11406|+1
11407|@iHuahua that is definitely **not** a workaround. Having a Windows 10 installation on a 4k monitor without scaling is absolutely tedious to say the least (I'd like to preserve my eyesight for the next years...).
11408|Yeah. I extracted VSCode-linux-x64.zip to /root/VSCode-linux-x64,and  typed command(BTW,I am a root user.) : ln -s /root/VSCode-linux-x64/Code /usr/local/bin/code. I also have a question，dose vscode can only run on Ubuntu with desktop ?
11409|Pushed a change that allows to set a new setting `files.bom` to one of: - `preserve` (default): keep any existing UTF-8 BOM, but not add it - `insert`: always add a UTF-8 BOM - `remove`: always remove any found UTF-8 BOM
11410|I would expect that to work if you downloaded the stable build from the code.visualstudio.com homepage (the insiders build works a little different). Do you get any output from the program at all, any errors, or just nothing?  You can also try just directly calling `/root/VSCode-linux-x64/Code`, as all /usr/local/bin/code is suppose to be is a symlink to it.  RE your question: Do you mean other Linux distros? It works generally on Debain-based distros, I'm currently going through support on Red Hat now in #3603.
11411|"Installed RHEL6 and ran in to some issues. - Hit the issue described here https://github.com/Microsoft/vscode/issues/1056 and did a little research, it looks like building on a RHEL machine will fix this. - Installed prereqs:      ```   curl --silent --location https://rpm.nodesource.com/setup_4.x | bash -   yum install nodejs   npm install -g mocha gulp   yum install gcc-c++   yum install libX11-devel.x86_64   # and install python2.7   ```  Currently hitting an issue when installing npm deps"
11412|@tacho87 Is it possible that the files are changed on disk outside of VSCode? When a file changes on disk, we reload the file and drop the undo stack.
11413|And on what version of vscode do you see this, I can not reproduce with the latest vscode. I think this is already fixed in the march release - you could try it out in the march insiders release
11414|:+1:
11415|Nice!!
11416|If an extension enters an infinite loop, AFAIK we have no graceful way to terminate it besides killing the extension host process.
11417|This is expected with the current behavior of the indentation, we show how the editor is configured, not what is the predominant indentation. Hit an enter on any line and you will see that a tab will be inserted  This will be fixed as a part of https://github.com/Microsoft/vscode/issues/3590  so I feel like closing this
11418|@minggo yes I agree that we should handle this case more gracefully, I can improve that experience
11419|@isidorn Thanks. And could you please reopen this issue or create a new one.
11420|It is still not clear to me how this should work.  Currently it behaves this way: - The statusbar widget appears as soon as a new extension tip comes up - Once clicked, all extensions that are suggested will be remembered for 28 days. During that period, suggestions of those same extensions would **not** make the widget appear. - Only new suggestions for other extensions would trigger the appearance of the widget. - It has a global scope, irrelevant to workspace.  Now, I can take that _28-days-memento_ out, but still... what would happen to the widget when clicked? Would it go away? Why, and when would it come back?  @egamma @chrisdias
11421|I am marking this important because of https://github.com/Microsoft/vscode/issues/3656 which is very confusing otherwise.
11422|"Fine, I will move the ""Important"" label.  My reasoning is that the editor status should always show the state of the file you are in. I also show the encoding as it is detected in the status bar even though the workspace setting might be different."
11423|I will investigate if buffering the output service is something that helps here but it would not help in all cases of abuse.
11424|Makes sense to me, we just did not design it like that for the previous release. This will be fixed as part of #3259, #3590  Closing
11425|FIX IT asap
11426|On the vscode side we are not doing anything special with the variable names since VSCode is language agnostic. What adapter are you using, do you use something on top of node-debug? Assigning to @weinand since he might have an idea
11427|First thing to improve is that the adapter should give VSCode 'Function Breakpoint' as the reason for the stop event.The reason is shown next to the CALL STACK, currently it says 'Paused on Breakpoint.  Not a big fan of adding temporary breakopint decorations. So I suggest to start with changing the reason and then see if we get user feedback that it is unclear why vscode stopped. Opinions?
11428|"This is my own adapter, and the view is the client view. The `launch.json` of the client view is  ``` javascript {     ""version"": ""0.2.0"",     ""debugServer"": 4711,      ""configurations"": [{         ""name"": ""mock test"",         ""request"": ""launch"",         ""type"": ""node"",         ""request"": ""attach"",         ""port"": ""5086"",         ""stopOnEntry"": false     } } ```"
11429|:+1:
11430|:+1: Thanks!
11431|"@isidorn I can easily reproduce. Since the response object is OK, I suspect that somewhere in the UI the variable name 'constructor' is stored as an object property which collides with the JavaScript reserved name 'constructor'. I remember we had this issue already with the variable name ""**prototype**"". IIRC you had to prefix variable name to avoid the clash.  ![2016-03-03 10-04-03](https://cloud.githubusercontent.com/assets/1898161/13489525/d485707c-e127-11e5-88d8-87eb5d396a5b.png)  If this analysis is correct I suggest that we replace plain objects used as dictionaries by ES6 map and sets."
11432|From unit tests, I could find a reproducible case. It happens when the last line in a model is folded (hidden). Have a javascript file:  ``` something {   asd   asd   asd   asd } ``` - Place cursor at the end of the first line (such that you get bracket matching) - Fold the region - Observe error:  ``` Not supported: Error: Not supported     at IdentitySplitLine.getOutputLineMaxColumn (file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/splitLinesCollection.js:41:23)     at SplitLinesCollection.getOutputLineMaxColumn (file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/splitLinesCollection.js:482:42)     at ViewModel.getLineMaxColumn (file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/viewModel.js:312:31)     at View.getCenteredRangeInViewport (file:///C:/Alex/src/vscode/out/vs/editor/browser/view/viewImpl.js:454:107)     at CodeEditorWidget.getCenteredRangeInViewport (file:///C:/Alex/src/vscode/out/vs/editor/browser/widget/codeEditorWidget.js:87:31)     at ViewModel.getCurrentCenteredModelRange (file:///C:/Alex/src/vscode/out/vs/editor/common/commonCodeEditor.js:539:146)     at file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/viewModel.js:125:56     at ViewModel.EventEmitter.deferredEmit (file:///C:/Alex/src/vscode/out/vs/base/common/eventEmitter.js:230:26)     at ViewModel.onEvents (file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/viewModel.js:121:18)     at Array.<anonymous> (file:///C:/Alex/src/vscode/out/vs/editor/common/viewModel/viewModel.js:117:102) ```
11433|@aeschli Yes, but so be more specific: - have a XML doc with a large node (more then 3000 elements) and a small node (place for cursor movement) - place cursor inside large node - use shortcut or mouse to fold node   Result: - no cursor movement for a while (~2 seconds) - overall slower cursor movement in the rest of the file from here on  Placing the cursor outside the node and then closing the large node with a mouse click sometimes seemed to have less or no lag, but I cannot reproduce that with certainty.   Unfolding restores normal cursor speed.
11434|It's already part of the [`registerCompetionItemProvider` signature](https://code.visualstudio.com/Docs/extensionAPI/vscode-api#1036).
11435|@isidorn variables with the name `__proto__` don't work either.
11436|"@egamma It can also happen when the first line is collapsed. It is not clear to me how you got in this state, but it looks like your first line was collapsed in the editor view state:  ``` ""contributionsState"": {     ""editor.contrib.folding"": [         {             ""startLineNumber"": 1,             ""endLineNumber"": 5,             ""indent"": 0,             ""isCollapsed"": true         }, ```"
11437|@weinand  Yep, it also met `__proto__` issue too.
11438|Nice turnaround, thanks!
11439|fyi @aeschli
11440|"I think a preference should be fine too.  I also minded a way to enhance working files system. You should use tab line as historic. For exemple, if you open 4 files in left window, and then open a fifth making the oldest modified file out of the tab line, it should vanish and return as only ""modified file"" in working files.  You could also make it smart, the system could also prioritize vanishing first saved and so unmodified files.  The fact is that tabs are sooo practical, even if tabs bloating is a problem. You should think about a way to use tabs but limiting the number of them.  Usually i keep open tabs that i haven't edited for days. this is generally that who make it bloating."
11441|@isidorn the 'null' issue is pretty bad because the UI does not recover from it without a window reload. So even a new debug session does not help. I suggest that you log null variable to the console so that DA developer can see them in dev tools.
11442|"@weinand  +1 for proposal. Need to specify a different ""runtimeExecutable"" when on osx vs. win32"
11443|@minggo I cannot reproduce the problem with the empty variable value. You are using a class 'Value' in your example above. Since I don't have this I tried with `new Variable('name2', '', 1000)` but this works fine for me.
11444|@weinand  `Value` is a typo.  I will try it again if i have time.
11445|I've discovered (on Windows) it no longer handles paths with spaces correctly. When removing the spaces in the path, breakpoints are hit again.
11446|@joaomoreno Could you elaborate? Can't find anything on this.  Just so we're talking about the same thing. Yes, `triggerCharacters` are in the signature. But the issue is about  > When a completionItemProvider is called upon and a suggestion widget is presented, which keys (default Tab and Enter) are allowed as confirmation of a suggestion. Would be preferable to disable Enter as this can interfere.
11447|This is on Mac without spaces.
11448|"We could use Assignee to show that the issue has been picked up by someone on the team. If it isn't assigned it hasn't been picked up. Would that be clear enough?   help-wanted could be changed to something more clear. Here are a few proposals.  - ""help wanted from community"" - ""community help here"" - ""good for community help""  For issues that are good for someone to start with we could label them one of the following: - ""good first bug"" - ""good for first time contributor"" - ""start here"" - ""community start here""  We want to add something to the [How to Contribute wiki](https://github.com/Microsoft/vscode/wiki/How-to-Contribute) and possibly to the [README](https://github.com/Microsoft/vscode/blob/master/README.md) to help folks know how to get started."
11449|This feedback is excellent. Vim support is gaining momentum on the feature request list and with some of the essentials near completion (accessibility, localization), we can spend more time here. We're looking at rolling out a holistic strategy to improve Vim support and involve the community. Keep the feedback coming!   @aioutecism I'll talk to the team to get #1432 higher on the priority list. Specific requests like this are excellent to feed into the backlog.
11450|I can reproduce it - moving to TypeScript
11451|This issue was moved to Microsoft/TypeScript#7364
11452|@digeff I am not able to reproduce with a simple example, is it possible to share the extension with me to reproduce?
11453|Oh! Apologies, I confused the two features!
11454|Removing <kbd>Enter</kbd> from the acceptance keys would make the whole interaction rather strange, though. I'm not sure that would be such a good idea.  You'd type `person->` get it triggered and you wouldn't be able to use <kbd>Enter</kdb>?  There are other possibilities here: - delay the popup of the Intellisense box when automatically triggered - disable `>` as a trigger character; not a nice solution as well - improve the suggestion results to not return anything in some cases; not a nice solution either
11455|@waderyan   > We could use Assignee to show that the issue has been picked up by someone on the team. If it isn't assigned it hasn't been picked up. Would that be clear enough?   I see you have never been the inbox tracker :smile:  Pls see https://github.com/Microsoft/vscode/wiki/Issue-Tracking. We can always change how we do things, but we should preserve thins what work OK. The two-step inbox triage has worked OK, so we should preserve this one way or the other.  @bgse   > Personally, I'd love to have some kind of indication if the issue/feature-request will be handled internally by Microsoft people (in the near future) or if it is something that is encouraged to be handled by public contributors.  We plan one milestone ahead and we have the roadmap, so you can use the milestone label as good indicator for this. If in doubt then asking a question in the issue seems appropriate to me.
11456|goodness!
11457|@aioutecism there other other [issues labeled vim](https://github.com/Microsoft/vscode/labels/VIM) in our backlog. What ones of these are critical to your development?   @jpoon, @guillermooo, @74th, @mattn you are also developing a vim extension. Can you address the question above?  What other issues are you facing with working with the current extension api?
11458|"Ha yeah maybe I could take on that role one week to feel the pain :smile: Seems like a solid approach.   @egamma feedback on changing ""help-wanted"" label change?"
11459|@waderyan I prefer shorter labels and to document how we use the labels in the CONTRIBUTING.md. So `help-wanted` works still better for me but we should document and agree on how we use it.  A new label for `beginner bugs` makes sense to me.
11460|@digeff What language are you working with? JavaScript, C#...
11461|@silverbucket just did a fresh install of `0.10.9` and emmet is expanded.   But now I read your description again:  > Hit enter and nothing happens  The emmet expansion key is TAB and not ENTER.  Also if TAB doesn't work can you execute the 'Emmet: Expand Abbreviation' from the command palette.
11462|I agree that the convention of Enter might not be so popular to remove.  ``` template <typename Type> Type max(Type a, Type b) {     return a > b ? a : b; } ```  is perhaps a more valid example for e.g. C++. Other languages have for sure syntaxes which could collide with completion trigger characters. It depends on the coding style of the programmer in this instance. It might also come in play when you do an anonymous function calls (lambda abstraction):  ``` context.subscriptions.push(vscode.workspace.onDidSaveTextDocument(d =>      ...     yourMagicCode();     ... )); ``` - Delay is dubious since one will suspect that no completions are available if it's set to more than a second. - Disable the offender is a ugly workaround IMO. It removes functionality. - Agreed. Sounds complicated as it's no longer language agnostic.  That is why I'm suggesting that each provider with trigger characters should be able to override the default mapped keys for `acceptQuickFixSuggestion`.
11463|Makes sense.
11464|Ping @hamenon
11465|I think we should remove the 28days memento, but let's go through a scenario:  > The user opens a JS file. - Code finds a list of extension suggestions for the user, e.g., `vscode-eslint`, `vscode-jshint`.  - Code notifies the user that there are candidate extensions, by showing the extension tips notification in the statusbar  > The user discovers the notification, clicks it, the list of extension appears in the quick box. The user reviews the extensions and installs `eslint`. Doesn't install `jshint` since he doesn't use `jshint` _it would be nice if there was  a message above the quick box that explains that these are popular extension when editing files of this type._ - Since the user has reviewed the extensions, the notification that there are interesting extensions goes away.  > The user opens a PHP file - Code finds new suggestions for the user's working set. - The extension tips notification shows up again to inform the user that there are new extensions to review.  > The user clicks on the notification and sees the PHP debugger in the list of suggestion. Installs it - Is `jshint` still shown in the list at this point? I'd say no, since the user has removed it. - The extension tips notification disappears.
11466|"Regarding:  > ""Parsing error: Illegal import declaration (undefined)""  This looks like an error message from ESLint and it shows up when you do not have `sourcetype modules` configured in your `eslintrc` configuration file (see below). The latest version of the ESLint extension now prefixes such errors from ESLint with `[eslint]`.   ``` json {     ""parserOptions"": {         ""sourceType"": ""module""     }, } ```  @Jaans Can you please update your vscode-eslint extension to verify whether my theory is correct."
11467|"> a fix for ES7 Class properties being seen as a ""Duplicate identifier""  This looks like a duplicate of Microsoft/TypeScript#6997"
11468|Thank you very much @waderyan. I'm looking forward to the new API.  Another problem I'm encountering is the need to deal with different keyboard layout. I opened an issue #3671.  In my extension's case, other [issues labeled vim](https://github.com/Microsoft/vscode/labels/VIM) are not critical or can be solved perfectly if #1432 is done.
11469|@spywhere can you pls try [vscode-editorconfig extension](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig) and see whether it covers your needs.
11470|"Also, the [dead key problem](https://github.com/aioutecism/amVim-for-VSCode/issues/23#issuecomment-191720007) will be solved too if ""real key"" binding is possible."
11471|This issue was moved to Microsoft/TypeScript#7365
11472|"I don't like the idea of the notification in the status bar coming and going. I end up playing games trying to figure out how to make it come back again. What if i pressed Enter to install one of the four extensions listed (instead of clicking the download button) and now I want to install another one? If the status bar indicator is gone how do I get it back? I don't know that i can go to the command palette and choose ""Extension Tips""... if I did I wouldn't need this status bar indicator at all!  Related, if we remove items from the list because I didn't install them the first time I saw them, how would I get them back?  Here is how I see the scenario:  > I open a **workspace** with JavaScript, TypeScript, CSS, HTML, and C# files present  Assume there are 5 extensions recommended for this workspace (jshint, jscs, tslint, omnisharp, and can i use).  Also assume the suggestion icon is always in the status bar given my concerns about trying to figure out how to make it come up again.  The user clicks on the icon, gets a list of extensions they could install, and presses Enter on TSLint. The list goes away, the extension is installed, and I restart VSCode.    Now, I want to install jshint because i saw that in the list. I go back to the status bar indicator, click on it, and I see 4 items in the list now because I installed TSLint already.  I repeat the process, installing jshint and omnisharp.  > A few days later I add a .php file to the workspace    Knowing that Code gave me extension suggestions before, I can click on the status bar and a list shows up that now includes a PHP extension.  I follow the same workflow as above and I install the PHP extension.    Ideally we would show a number/badge in the status bar indicating how many extensions are suggested. Maybe in a week a new extension list comes out and there are new opportunities. I could see the badge change to say ""1"" or ""2"" and I would click on it to see what's new.  If there are updated extensions I could imagine the update extension icon having a badge telling me how many are available. Same with errors.  CC @waderyan"
11473|Thanks for the feedback. I actually don't have the ESLint extension installed. Are you saying I should install it to fix the issue?  ![image](https://cloud.githubusercontent.com/assets/3510981/13493713/62516074-e18b-11e5-87d9-063ec1e0bc09.png)  FYI: Running VSCode 0.10.8 And I can confirm the original issue from the ticket `Parsing error: Illegal import declaration (undefined)` has been fixed.
11474|Looks like the only disagreement is whether the `extension tips` notification comes and goes. Since we  have a setting to disable 'extension tips'  I'm fine with having it always in the status bar.   I would still like to have an info message in the quick box, that explains what this list is about.  The `extension tips` should be visually aligned with 'outdated' extensions and it should also be visually more compact than what the message is today (same as we do with errors).
11475|I've just tried it on a Mac as well, breakpoints do get hit here, on both path with and without spaces.
11476|Thanks @egamma - I had a fealing it was something simple like that! Just checked and it's working for me!
11477|"I do reproduce the issue. Could that be why my js highlighting is down ? I have no extensions installed whatsoever. <img width=""979"" alt=""screen shot 2016-03-03 at 8 14 07 am"" src=""https://cloud.githubusercontent.com/assets/6368237/13495333/148ae806-e118-11e5-9893-9f746b20408a.png""> edit: also tested with a bare project, just a simple js file, same problem."
11478|+OVER9000  Where's HG support, guys?
11479|We can technically transfer ownership of an extension, but just be aware that moving the extension under a different publisher will change the extension’s fully-qualified identifier. This could impact clients, like VS Code, that try to look up the extension by its old ID.  If the extension doesn’t have a lot of downloads, it might be easier to just remove from the old publisher and re-publish under the new publisher.  Following is an example shared by Erich Gamma where a change publisher was done by creating a new extension under the new publisher and deprecating the old one.  https://github.com/Microsoft/vscode-editorconfig/issues/23#issuecomment-184427296.
11480|Suggestion from standup was to use `beginner task` to be more generic.
11481|@isidorn even if the configuration service would react synchronously to the file getting saved, there is still a delay until the configuration service would read the file from disk and emit the configuration change event.  If you can suggest how this would work, let me know. Should we have a method on the configuration service to always fetch the config from disk and bypass the cache?
11482|Will get back to you soon on adding multiple users to the same publisher account.
11483|"Ok. @chrisdias and I decided to go with `effort easy`. It is concise, avoids bad connotation we feel with ""beginner"", and explains the difficulty of the issue clearly.   We can easily iterate on this, so please suggest a new name if you have improvements. I will update the wikis."
11484|@bpasero having a method that bypasses the cache would work for me in this scenario, not sure if you want to add it though. Tasks might also benefit from this, run task would also need to bypass the cache for similar reasons. But where do we draw a line between using a configuration service and the file service to just read the content of the file?
11485|Typescript. This is the project https://github.com/Microsoft/vscode-react-native although I wasn't on master when it happened.
11486|@gep13 see above.
11487|@waderyan thanks! I have set up a subscription on this issue now, and will follow along with it.  Let me know if there is something you want me to test out.
11488|The extension in question is this one:  https://marketplace.visualstudio.com/items?itemName=cake-build.cake-vscode  The publisher ID is what we want, i.e. cake-build, however, the publisher exists under @patriksvensson own account.  Ideally, we would want to move the publisher under an account that we (the Cake development team) all have access to.  Thanks!
11489|@jumpinjackie sorry for this regression. The workaround is to set `outDir` to the path where the source maps exist, e.g. for the project from above `${workspaceRoot}/plugins`.  You can find the stacktrace for the error in the dev tools console of VS Code.
11490|can't it be png based now? even the windows ico can be. then the insides could just be 99% transparent to retain clicking. but...  also I have never experienced any os making the transparent parts unclickable. ever. in the history of icons. they are bounded boxes the code to make the alpha channel unclickable would be a dumbtarded waste of resources.  ![capture](https://cloud.githubusercontent.com/assets/881944/13497643/20663f96-e11c-11e5-84c6-d478ddedec69.PNG)
11491|No it would always go through the configuration service and never the file service. I agree that tasks should use it as well then.
11492|What OS are you on? Which Code version?
11493|So a C++ user could never use the <kbd>Enter</kbd> key to accept a suggestion? I'm not sure that is OK.  I do recognise the problem though.  @stevencl any thoughts?
11494|@egamma That's cover my need. However, I didn't see it working on my project. I hope I'm not configured it wrong.
11495|Yes, removing the 28 day memento easily comes to the conclusion that that thing is **always** in your status bar and never goes away...  Will just do that for GA: if there are tips, just always show it. Not happy about it though. We definitely need extensions to be a core workbench concept, UI-wise.
11496|@Tyriar Done! :smile:
11497|Delivered to 0.10.11 branch
11498|duplicate of #3204
11499|:+1:
11500|+1 the same problem of lodash and _.  Intellisense doesn't work.
