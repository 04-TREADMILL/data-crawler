4201|@Clivar  thanks. So to clarify, you commit within vscode, but do execute other git functions via git bash right?
4202|Another plus one - and in my case, I can't use the workaround since I need a per OS switch and I can't rely on sh or cmd.
4203|"I have the same issue of `tsconfig.json` file is locked and after exiting VS code the `tsconfig.json` file is deleted.  I use Git Extensions on Windows for all git commands (commit, push, pull).  I had 2 windows open of VS Code and saw that it had an open file handle to the tsconfig.json file. Here's the results from handle and procexp.  ``` C:\Apps>handle tsconfig.json  Handle v4.0 Copyright (C) 1997-2014 Mark Russinovich Sysinternals - www.sysinternals.com  code.exe           pid: 16764  type: File           260: C:\Source\Modus\client\tsconfig.json code.exe           pid: 12804  type: File           260: C:\Source\VSS.UI.Utilities\tsconfig.json ```  PID 12804:  ``` ""C:\Program Files (x86)\Microsoft VS Code\Code.exe"" ""c:\Program Files (x86)\Microsoft VS Code\resources\app\extensions\typescript\out\utils\electronForkStart"" ""c:\Program Files (x86)\Microsoft VS Code\resources\app\extensions\typescript\server\typescript\lib\tsserver.js"" ```  PID 16764:  ``` ""C:\Program Files (x86)\Microsoft VS Code\Code.exe"" ""c:\Program Files (x86)\Microsoft VS Code\resources\app\extensions\typescript\out\utils\electronForkStart"" ""c:\Program Files (x86)\Microsoft VS Code\resources\app\extensions\typescript\server\typescript\lib\tsserver.js"" ```"
4204|@cfjedimaster Why can't you use the workaround exactly?
4205|Because my top level command would be start on Windows and open on OSX. So I can't use _just_ cmd or _just_ start and pass different args.
4206|"@bpasero Will this (removing the extension dropdown) also fix the editor ignoring quotes and adding another extension? Today I was working on a new batch file and habit always makes me put the filename in quotes when saving, ie: `""convert.bat""` (loyal notepad user I guess :) ). However, the file will still get saved as convert.bat.txt which is a bit annoying; And also completely different to all other save dialogs I know (working with the Windows version)."
4207|+1. It's the main blocking issue for me, in conjunction with the Go To Symbol issue I posted earlier.
4208|"@cfjedimaster You mean like this?  ``` json {   ""version"": ""0.1.0"",   ""isShellCommand"": true,   ""osx"": {     ""command"": ""sh"",     ""args"": [""-c""],     ""tasks"": [       {""name"": ""run"", ""args"": [""open mysuperawesomefile.txt""]}     ]   },   ""windows"": {     ""command"": ""cmd"",     ""args"": [""/C""],     ""tasks"": [       {""name"": ""run"", ""args"": [""start mysuperawesomefile.txt""]}     ]   } } ```"
4209|Yes. But to be clear, I wouldn't want to replicate all the tasks for both. Basically, I want to be able to do N tasks per file as the original requestor suggested. For me, 9 of the 10 tasks I want can all be in one definition. _One_ of them is different though and needs to do X for Windows and Y for OSX.
4210|Yeah I know it _is_ a lot of code duplication, which is why they should really implement this feature. But for the time being, it's what works.
4211|I was coming here to report the same thing.  Definitely should be the other way around.
4212|adding to system environment works, but VScode by default add to user path, which don't work for me.  Thank for the support anyway.
4213|Filed the issue with the correct repository:  https://github.com/Microsoft/TypeScript-TmLanguage/issues/31
4214|The PowerShell extension has added a deactivate() method but I don't see it getting called when attempting to upgrade my extension in 0.10.4.  With PowerShell@0.3.0 installed, I attempted to upgrade to PowerShell@0.3.1 and didn't see my language server get a shutdown request (which should be caused by the deactivate method).  Here's my main.ts file's deactivate method:  https://github.com/PowerShell/vscode-powershell/blob/master/src/main.ts#L106  Did I implement this incorrectly?  Should I instead create a disposable that calls the necessary shutdown method?  Thanks!
4215|cc @dbaeumer since I'm using vscode-languageclient
4216|adding @alexandrudima
4217|This is currently supported by calling this method:  ``` typescript vscode.commands.getCommands(filterInternal?: boolean): Thenable<string[]>; ```  Does this unblock you?
4218|Not quite. From what I can tell in the docs, this function will return a list of commands. What I want is to listen to commands as they happen.   My specific use case is: - Listen for commands - When command occurs, determine if their is a key binding for that command - Display in the status bar (or some UI element) the key binding for the command the user just executed.
4219|Hi **@takumif**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
4220|Thanks @jrieken. I'll look into that in the meantime. Are you considering allowing extensions to write settings or is using extension state the better approach for this kind of setting?
4221|@jrieken @egamma I still see the problem with 0.10.5.   if you fully remove dnx from your machine (`rm -rf ~/.dnx`) and run setup from https://get.asp.net it will install the runtime globally into `/usr/local/lib/dnx/runtimes`.  Create a new Web App using the aspnet generator, run `dnu restore`, and then open code on the folder.    If you follow the [work around from stack overflow](http://stackoverflow.com/questions/33976187/omnisharp-dnx-dnxpaths-the-specified-runtime-path-default-does-not-exist) (ensure you set the default alias too) it starts to work again.
4222|"There already are some keyboard shortcuts for navigating working files:  ``` javascript Default Keyboard Shortcuts  { ""key"": ""cmd+k enter"",           ""command"": ""workbench.files.action.addToWorkingFiles"" },  // removes all files from Working Files { ""key"": ""cmd+k cmd+w"",           ""command"": ""workbench.files.action.closeAllFiles"" },  // removes the current file from Working Files { ""key"": ""cmd+k w"",               ""command"": ""workbench.files.action.closeFile"" },  { ""key"": ""cmd+k down"",            ""command"": ""workbench.files.action.openNextWorkingFile"" }, { ""key"": ""cmd+k up"",              ""command"": ""workbench.files.action.openPreviousWorkingFile"" }, ```  And there's some more discussion at #435."
4223|@dbaeumer I changed the path of TEST and still got the error.   **Error** Unable to open 'HelloWorld.ts': File not found (f:\TEST\F:\TEST\HelloWorld.ts). **Create File** **Cancel**  (I failed to attach image. Github show: _Something went really wrong, and we can't process that file._)  I installed tsc using **npm install -g typescript**, here is my tsc path and tsc version.  And I can run tsc from cmd to provide the output.  ``` F:\TEST>npm list -g C:\Users\liandaoacc\AppData\Roaming\npm └── typescript@1.7.3  F:\TEST>tsc -V Version 1.0.3.0  F:\TEST>tsc HelloWorld.ts  F:\TEST>tsc HelloWorld.ts F:\TEST\HelloWorld.ts(3,17): error TS2094: The property 'logg' does not exist on value of type 'Console'. ```
4224|I believe this is a duplicate of #1168.
4225|"> > ``` js > > Default Keyboard Shortcuts > > { ""key"": ""cmd+k enter"",           ""command"": ""workbench.files.action.addToWorkingFiles"" }, > > // removes all files from Working Files > > { ""key"": ""cmd+k cmd+w"",           ""command"": ""workbench.files.action.closeAllFiles"" }, > > // removes the current file from Working Files > > { ""key"": ""cmd+k w"",               ""command"": ""workbench.files.action.closeFile"" }, > > { ""key"": ""cmd+k down"",            ""command"": ""workbench.files.action.openNextWorkingFile"" }, > > { ""key"": ""cmd+k up"",              ""command"": ""workbench.files.action.openPreviousWorkingFile"" }, > > ```  I am aware of the suggested key bindings, they are also specified at [Key Bindings for Visual Studio Code - File Management](https://code.visualstudio.com/Docs/customization/keybindings#_file-management).  I am looking for more specific key bindings / commands for `Working files`, management.  For example, navigating the `Working files` just as you can navigate the `Explorer`. With `⇧⌘E`/`workbench.view.explorer` followed by `↑↓←→` keys, one can easily navigate the `Explorer` and then with `⌘↓` open the highlighted file in editor. I have requested for similar features/functionality for `Working files`"
4226|Once the `Working Files view` is focused, will it respect the `↑↓` down key for highlighting/choosing a file?
4227|"@dbaeumer  I have config.js  ``` javascript module.exports = {     ""season"": 1 }; ```  and config.json  ``` json {     ""season"": 1 } ```  As you can see. require js file got the intellisense loaded. But json file cannot  ![image](https://cloud.githubusercontent.com/assets/1042507/11888354/0f4732d0-a56f-11e5-810c-557adcec94b4.png)"
4228|Ok. I will follow #1168 Thanks you!
4229|the code of es6 project: [vsc.bug.zip](https://github.com/Microsoft/vscode/files/66198/vsc.bug.zip)
4230|+1 I am getting the same error on ubuntu. I am using node 5.3.0.
4231|Hi **@iamchenxin**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
4232|**@iamchenxin**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
4233|@DerTolleEmil yes I think so, you can switch to the insiders channel to try it out: https://code.visualstudio.com/Docs/supporting/FAQ#_why-does-visual-studio-code-have-a-different-license-than-the-vscode-github-repository
4234|We have gaps when it comes to managing many projects and sharing among them and the answer to your question is currently not supported, sorry, but we have it on the backlog to improve this.  Are your tasks/problem matchers mostly for supporting build tasks for a particular language?   Having support for workspace - extension dependencies is on our radar.  When it comes to sharing across projects you can consider something similar as we do for extensions. A yeoman generator generates the initial setup and shared tooling code comes from a node module in our case the vscode node module.
4235|@alexandrudima fyi
4236|Got it, this is currently not supported.  @jrieken fyi.
4237|This is high on our backlog. @bpasero fyi.
4238|@jrieken fyi
4239|:+1:
4240|Has been fixed for our december drop!
4241|> Are your tasks/problem matchers mostly for supporting build tasks for a particular language?  Yeah - currently we've got `ESLint`, `TAP` problem matchers - the thing is that we're running them via a custom gulp task that wraps each task and only runs a subset of checks at a time.  It necessitates somewhat heavy `watching.beginsPattern`/`watching.endsPattern` and other settings.  (using off the shelf problem matchers doesn't save much)   > Having support for workspace - extension dependencies is on our radar  Awesome!
4242|What is`TAP`?  CC @dbaeumer   Currently you cannot contribute problem matchers through an extension, so if the problem matchers are generally useful we could add them to set. Could you consider a PR?
4243|@DerTolleEmil the link is off by one, pls see: https://code.visualstudio.com/Docs/supporting/FAQ#_how-can-i-test-prerelease-versions-of-vs-code
4244|Ah sorry :)
4245|Not a blocker for the Dec update, since there is a work around.
4246|@daviwil your implementation looks fine  > I don't see it getting called when attempting to upgrade my extension in 0.10.4  Currently deactivate is only called when VS Code exits, it isn't called when you upgrade/reload. Can you verify that `deactivate` is called when you shutdown Code.
4247|No worries :) It's working as expected in 0.10.4, thank you!
4248|@aeschli is covered by the fix you did with Dirk yesterday for 0.10.5?
4249|@egamma No, that fix was not related to paths.
4250|:+1:
4251|Sorry, this is not supposed to work. VS Code currently only supports JSON schema based intellisense/validation.
4252|I added Cmd+K E as keybinding.
4253|@takumif thanks much, I was already working on this and just pushed it: https://github.com/Microsoft/vscode/commit/3db22b0377e2398c83522f65e6b299da5e4c874f
4254|Thanks @egamma! Is there an extension point or services where we can possibly contribute in order to enable this?
4255|I agree, but this very likely an issue on the TypeScript server side. I will wait for@dbaeumer to confirm.
4256|Not decided yet. The model of today is that only the user can modify settings and there is lot of good about that, but also see some shortcomings... The extension state is meant for remembering a user choice, store some installing path etc. This also includes your use-case. Since it's a little touchy (collecting telemetry data) I can understand that you want a more prominent option to unset something like that.
4257|Thanks
4258|This is a duplicate of #703
4259|Will move to TypeScript since they to the math for us.
4260|This issue was moved to Microsoft/TypeScript#6145
4261|@valentinstoychev absolutely and extension with XML support would be highly welcome.   Pls see the [extension docs](https://code.visualstudio.com/docs/extensions/overview) and there in particular the [language API](https://code.visualstudio.com/docs/extensionAPI/vscode-api#_languages).
4262|I installed rc1 yesterday and the bit ended up in ~/.dnx. I will move this issue to OmniSharp because the lookup happens there.
4263|This issue was moved to OmniSharp/omnisharp-roslyn#369
4264|Giving more thought, this is something we cannot do because of the afore mentioned restriction. I will change to doc to not only mentioned `undefined` but also how that happens
4265|:+1: @aeschli some pointers on how to do this would be appreciated - how can my .css rule come from a theme?
4266|So, the `provideSignatureHelp` message came form an issue with the php language service. That also caused some unresponsiveness.
4267|We made it being ES6 for the Dec release
4268|We have now API Commands for this
4269|There is still an issue with how we handle files in the workbench: Since the workbench is treating files with different casing as individual files, you end up having potentially the same file open twice. The road to solve this is to make the workbench fully agnostic of file path casing which is a larger task.
4270|We have made ES6 the default. It should address the wish addressed in this issue.
4271|When making the viewlet horizontally small `file name: line number` get hidden if there is not enough space so I went with `0.8em` since `1.2em` felt like too much
4272|@kitsonk Thanks, that would be: https://github.com/Microsoft/vscode/blob/master/src/vs/languages/markdown/common/markdown.ts#L56
4273|@tonyeung Exactly, Pull and Push sometimes from UI aswell but most of the time I use GIT Bash for repo actions
4274|[js-is-jsx extension](https://marketplace.visualstudio.com/items/eg2.js-is-jsx) + [eslint extension](https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint) looks like the best combo for now, as you will get both syntax highlight and hinting.
4275|@z2xlong Please provide the OmniSharp log. Only then I can reopen this
4276|Applying the colors from a thTheme file to css happens in `src/vs/workbench/services/themes/node/themeService.ts`  in `_processThemeObject` Besides colors for syntax elements, each tmTheme has some keys for general colors. Of course you can also add your own keys, but so far we have not done any customization of tmThemes.
4277|3db22b0377e2398c83522f65e6b299da5e4c874f added keyboard shortcuts for focusing on working files, so this issue should be closed now.
4278|Could this be a duplicate of #1285?
4279|Yes, it is Cmd+K E as keybinding.
4280|Hi **@HammyHavoc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
4281|@jrieken thank you.
4282|At least with 0.10.4 I cannot reproduce this. However, the behavior of ctrl+a varies between various editors. All tested on Windows.  VSCode places the cursor at the end of the selection and only scrolls to the cursor again after selecting an item in the context menu.  Notepad, too, places the cursor at the end of the selection but scrolls down immediately after pressing ctrl+a.  Notepad++ places the cursor at the beginning of the selection and and doesn't scroll to the cursor even after selecting copy in the context menu.  Sublime (v3 beta) puts the cursor at the end of the selection and doesn't scroll anywhere either.  Basically out of the four editors I tried every single one behaves slightly different.   I have no idea which one is the correct behavior but VSCode's behavior doesn't seem wrong to me. There is one inconsistency though: When you choose Edit -> Copy the view won't scroll to the cursor but it does if you right click a selection and choose copy.
4283|Yes makes sense, thanks (updated my comment above).
4284|@bpasero I think we always read the entire file content again when the file changes on disk, right?  We need to investigate if we have any memory leaks that cause this OOM
4285|@npandrei is this file open all the time in the editor?
4286|:+1:
4287|Indeed, this is a bug, on Mac the clipboard always gets LF as a separator in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/controller/keyboardHandler.ts#L656
4288|@egamma Yes, we are aware of these. We thought you guys might've provided somewhat tighter setup for validation. XML is not a strict language, hence the language API is not an exact fit...
4289|@bpasero Yes, the file is opened all the time in the editor.
4290|@egamma By the way, the [autocomplete-plus package](https://github.com/atom/autocomplete-plus) atom.io provide is exactly what we need. Can it get built for Visual Studio Code? As far as I found, the API is not rich enough, but I hope I might've been mistaken...  EDIT: With it we will be able to do something like [autocomplete-xml](https://github.com/pleonex/atom-autocomplete-xml)
4291|Andre I just verified this does not break anything, but did not verify the arguments get nicely passed to the debugger - can you just verify that please.
4292|@alexandrudima in that case, yes the file is being read from disk everytime there is a change. I am not sure how this could be optimized and yeah there is a chance of leakage during this process. It should be easy to capture this from the profile tab in the inspector actually.
4293|That's really a huge tradeoff between form (highlighting) and function (intellisense), which IMO is the distinguishing feature of Code. Sublime Text otherwise has an excellent highlighting support for JSX already.  Here's my +1 to a quick and full native JSX support in Code.
4294|Nice!
4295|@stevencl I fixed the issue, assigning it to you know so you can verify. Once you do that just add a **verified** tag to this bug.
4296|+1
4297|This landed in similar fashion, please see https://github.com/Microsoft/vscode/commit/c34d2e771bb3e372e912e081a8bd8879a92a8c91
4298|For me it's painfully slow at over 1 minute every time on my 8 Mbps line, which I don't think is all that bad by itself. After trying several times over the past few weeks I thought extensions is broken and started googling for help. But today I let `ext install` do its thing while I went away from the computer for a bit and came back to see the extensions list load up for the first time. I've since verified this on both my Macs with the same result.  @sijad's `curl` is pretty quick for me though, just in case that makes any sense.
4299|This is Windows only.
4300|@BleyChen do you have the extension host running as part of a seperate app outside of VSCode? How I usually do this is run `scripts/code.sh` and then attach from VSCode. Does runnings `scripts/code.sh` say that it is listening on `port 5870` - the one specified in your `launch.json`
