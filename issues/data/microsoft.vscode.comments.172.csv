17101|duplicate of #4769
17102|Alright, thanks!
17103|@isidorn - hmm, trying this on another machine and seeing different results.  I'm beginning to wonder if the PowerShell extension debugger has an issue with pause/continue.  Let's keep this closed for now and I'll get back to you if I still think it's a VSCode issue.
17104|OMG @stkb you are my personal hero. This was my number one pain point when switching from Sublime. Thanks so much!
17105|whether it is because it happens, the problem is that when you return to the previous window, the program places the window so that shows the position of the cursor, NOT far as I surfed, say I'm with the cursor on the line 1, I navigate to line 1000 but failed to place the cursor on that line but just needed to see it, then I click on another file, when I go the screen is located so that shows me the line 1 and not the line 1000 which is I am analyzing.  Now, the solution would then click there and ready, not where it comes from that philosophy (policy, directive or whatever) but is the first editor I see doing that.  I used sublime, notepad ++, and brackets.
17106|Yes, looks like this got fixed in the grammar. It's in the coming release (preview available at https://code.visualstudio.com/insiders)
17107|+1 I also have the same problem, but only on my home PC, which is Windows 10 ... if that helps!  Working around it by pausing Dropbox sync and [hopefully remembering to] turn it back on when I'm done ... which kinda defeats the point ;-)
17108|"One oddity is that it seems to leave wrapped text selected if my cursor was in the text that got wrapped, which means I end up overwriting the text if I wrap in the middle of typing.  So like, if I write ""abc 123 456"" and my cursor is after the 6, and the wrapping point is between the letters and numbers.  When I wrap, all the text that gets moved to the next line (the numbers) will be selected (with my cursor at the end of the selection)."
17109|@egamma @bpasero could you share your concerns?
17110|i am trying to install commonjs for typings but it says theres no such module so anyway it doesnt work i already installed node through typings @egamma  and typings doesnt create anything called .d.ts
17111|"This is only part of the OSX launch script, a small Python script is used I think to get the current directory. We really don't want to rely on Python unless we absolutely have to. This might be happening due to a [super old Python version](https://docs.python.org/2/library/os.path.html#os.path.realpath) or something, not really a problem we want to bother figuring out.  @joaomoreno was the purpose of this to get the actual hard link for the file? [I needed to do this for the Linux one too](https://github.com/Microsoft/vscode/blob/master/resources/linux/bin/code.sh#L23) when I moved the CLI to the program directory. Should probably do something similar `readlink` seems like it's available on OSX. Here's the Linux code:  ``` if [ ! -L $0 ]; then     # if path is not a symlink, find relatively     VSCODE_PATH=""$(dirname $0)/.."" else     if which readlink >/dev/null; then         # if readlink exists, follow the symlink and find relatively         VSCODE_PATH=""$(dirname $(readlink $0))/..""     else         # else use the standard install location         VSCODE_PATH=""/usr/share/@@NAME@@""     fi fi ```"
17112|It could be _super new Python version_ also :wink: . What I have is `Python 3.5.1 :: Anaconda custom (x86_64)`.
17113|@vedanshujain Thanks a lot for the fix suggestion. I uses a slightly different approach (with a look ahead). See issue #499. Thanks anyway for your help.
17114|Hooray!
17115|+1, hopefully PSReadline support.
17116|@aeschli thanks.. looks good
17117|"Hey, minor thing... this is still breaking at one point in my project which reduces to <img width=""121"" alt=""screen shot 2016-04-12 at 2 00 51 am"" src=""https://cloud.githubusercontent.com/assets/7571618/14441679/8e6e3f24-0053-11e6-9b5f-a6d21ae471d9.png"">"
17118|This error should no longer happen https://github.com/OmniSharp/omnisharp-vscode/issues/116#issuecomment-208520820
17119|heads up peeps :) It seems the chromium bug being referenced here is seeing some activity. @alexandrudima you might want to keep an eye out, I think you'll be able to uncomment the proper ARIA semantics soon
17120|"I can run it twice from the command line, but after running it the first time, I can't open another instance by double-clicking a file or dragging a file onto the running instance. Sometimes it works but not always.  Here's the log, but nothing shows up when I double click another file.  ``` E:\dv2\inetcore\devtoolbar\v4>""C:\Program Files (x86)\Microsoft VS Code\Code.exe"" --verbose .  E:\dv2\inetcore\devtoolbar\v4> ### VSCode main.js ### c:\Program Files (x86)\Microsoft VS Code\resources\app { pathArguments: [ 'E:\\dv2\\inetcore\\devtoolbar\\v4' ],   programStart: 0,   workers: -1,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   pluginHomePath: undefined,   pluginDevelopmentPath: undefined,   pluginTestsPath: undefined,   disablePlugins: false,   locale: undefined } Lifecycle#unload() 1 [6572:11528:0411/161230:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] [6572:11528:0411/161230:VERBOSE1:crash_service.cc(142)] window handle is 007211D8 [6572:11528:0411/161230:VERBOSE1:crash_service.cc(290)] pipe name is \\.\pipe\VSCode Crash Service dumps at C:\Users\roblou\AppData\Local\Temp\edv2\VSCode Crashes [6572:11528:0411/161230:VERBOSE1:crash_service.cc(294)] checkpoint is C:\Users\roblou\AppData\Local\Temp\edv2\VSCode Crashes\crash_checkpoint.txt server is https://ticinocrashreporter.azurewebsites.net/crash maximum 128 reports/day reporter is electron-crash-service [6572:11528:0411/161230:VERBOSE1:crash_service_main.cc(84)] Ready to process crash requests [6572:10760:0411/161230:VERBOSE1:crash_service.cc(323)] client start. pid = 11044 [6572:10760:0411/161230:VERBOSE1:crash_service.cc(323)] client start. pid = 37716 [19640:12880:0411/161230:VERBOSE1:crash_service_main.cc(68)] Session start. cmdline is [--reporter-url=https://ticinocrashreporter.azurewebsites.net/crash --application-name=VSCode --v=1] [19640:12880:0411/161230:VERBOSE1:crash_service.cc(142)] window handle is 00221392 [19640:12880:0411/161230:VERBOSE1:crash_service.cc(290)] pipe name is \\.\pipe\VSCode Crash Service dumps at C:\Users\roblou\AppData\Local\Temp\edv2\VSCode Crashes [19640:12880:0411/161230:VERBOSE1:crash_service.cc(294)] checkpoint is C:\Users\roblou\AppData\Local\Temp\edv2\VSCode Crashes\crash_checkpoint.txt server is https://ticinocrashreporter.azurewebsites.net/crash maximum 128 reports/day reporter is electron-crash-service [19640:12880:0411/161230:ERROR:crash_service.cc(301)] could not start dumper IPC#vscode-workbenchLoaded ```"
17121|Good point...  I think the bottom is ok - my assumption is that is the list is long they already know how to add them in and we probably have space for it on most screen sizes (as our initial list is pretty long as well).  If however they filter the list could be cool to ensure it's still in view.
17122|@glen-84 that could cause issues and massive incompatibilities between plugins. Sure; it would open up the potential for a lot of awesome things, but I get the feeling the VSCode dev team wants to keep things as locked down as possible to ensure a consistent and usable experience.
17123|My bad, I misinterpreted the `range` values :disappointed: It is working perfectly :+1:   Being so, I assume I only need the range formatter code, and could remove the document formatter.  Thanks
17124|This reproduces for me as well on Windows 10. Pretty much the same repo steps, except I don't think it matters what program you dock to the other side. 1. Open VS Code. 2. Press Windows + Left Arrow 3. Pick another window to dock to the right by hitting enter, in my case Microsoft Edge. 4. Click back into the VS Code document editing window to give it focus. 5. Type some text; nothing shows up. 6. Maximize the window, everything you entered suddenly appears.  I originally looked into this because someone else complained to me about it, so I think that's at least 3 repros. :)
17125|More useful - trying to open the second instance from the command prompt  ``` PS C:\Users\roblou\.vscode\extensions\vscode-webkit-debug> code .\testapp\ --verbose PS C:\Users\roblou\.vscode\extensions\vscode-webkit-debug> & 'C:\Program Files (x86)\Microsoft VS Code\Code.exe' --verbo se .\testapp\ PS C:\Users\roblou\.vscode\extensions\vscode-webkit-debug> Error: connect EPERM \\.\pipe\Code-ec7481-sock     at Object.exports._errnoException (util.js:837:11)     at exports._exceptionWithHostPort (util.js:860:20)     at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1060:14) ```
17126|@gilberto389 are you switching windows with Alt+Tab or something else? I am still not sure I understand.
17127|Can you guys check if insiders release fixed this somehow?  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
17128|Closing as duplicate of #4578
17129|@stephenmartindale Recordit is great for its simplicity but it's capped at really low FPS (I think 10fps). For most bug reports, that's fine. However, I prefer recording clips with [OBS](https://obsproject.com/) and then either just using the `.mp4` directly (60+fps) or finding an online service to convert to `.gif` (usually capped to 30fps).
17130|Duplicate of https://github.com/Microsoft/vscode/issues/4620
17131|ðŸ‘Ž  Please don't do this, or at least make it optional. The clean tab-free UI is one of my most loved things about VS code.
17132|Duplicate of #3790, fixed by 70ab81b95eebca26dd5465b3d0b8e094140b5a4b  @Tyriar `readlink` is not the same on OS X. It's a rollercoaster of _doesn't works_.
17133|@tobico It doesn't have to be all or nothing... you know, as far as I concerned I want both the working files and tabs to be optional and yet integral to people that want to have that experience.
17134|http://www.cockos.com/licecap/ is multi platform and is very straight forward. On my laptop I recorded in 20 fps which seems to be the limit in my case.
17135|Correct - we figure that a range formatting provider is the harder problem than a document formatting provider. And champions league is formatting on type - which in effect just mean find a _good_ formatting range while typing happens, like format on `}` find the `{}`-bock and formats that.
17136|I am very eager to figure out what's happening here. Despite that I checked the whys and hows of weak being in our code base and why it's a good feature it not a _must_. We can get rid of it without breaking API or the need of adding API. Basically, today it's used like this: Periodically we check if virtual documents are still open in any editor, iff not we check if there still usages/references in the extension host, iff not we dispose. IMO this is the nicer and more correct behaviour, but we can employ the same tactics as we do for _real_-documents and just dispose them as we think it's a good time - ignoring any extension host usage.  fyi @egamma
17137|I would like to second that Ctrl+W should close not only the current editor, but the corresponding open working file. For me that's the biggest drawback in the current implementation. That and the fact that Ctrl+Tab lists **all** recently files, not just the ones in working files. On second thought, a third caveat would would be that single click doesn't open a file as a working file, but editing it does.
17138|Yes, I know. The '/' character is both used for division and the start of a regex.  I can try to do some more tricks but from what I understand, only a context sensitive parser can get it 100% right.
17139|We currently do not format code inside HTML
17140|This issue was moved to Microsoft/TypeScript-TmLanguage#142
17141|This issue was moved to OmniSharp/omnisharp-vscode#174
17142|This go fixed for the coming 'March' release. (Preview available at https://code.visualstudio.com/insiders)
17143|It would be great if an extension could add that behavior. Extensions can already participate on code completions. They would have to do the same parsing as the HTML language mode to figure out at what location the user wants to complete.
17144|Hi **@Ikuyadeu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
17145|This is happening because electron 'freezes' our renderer when he is showing the context menu. As soon as the context menu is closed the renderer is 'unfrozen' and the debug hover is hiden. You can notice that even the cursor stops blinking when the context menu is shown.  Nothing we can do here and I do not find it as a big limitation.
17146|@Anjmao I'd need more information....
17147|"I tried the following example:  ``` typescript import {Component, HostListener, Directive} from 'angular2/core';  @Directive({selector: 'button[counting]'}) class CountClicks {   numberOfClicks = 0;   @HostListener('click', ['$event.target']) onClick(btn) {     console.log(""button"", btn, ""number of clicks:"", this.numberOfClicks++);   } } @Component({   selector: 'my-app',   template: `<button counting>Increment</button>`,   directives: [CountClicks] }) export class AppComponent {   constructor() { console.clear(); } } ```  I get more colors than in the screenshots above, but things seem out of order. E.g. string don't get the 'string' scope."
17148|This issue was moved to Microsoft/TypeScript-TmLanguage#143
17149|Thanks! So if I understand correctly, it should not be locked. Correct?
17150|Also seems to happen in Win:  ``` TypeError: Cannot read property 'forEach' of undefined   at C:\Users\a123\.vscode-insiders\extensions\Zignd.html-css-class-completion-0.0.2\extension.js:17:17   at Object.p [as _notify] (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:5:12448)   at Object.__dirname.undefined.L.enter (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:5:15610)   at __dirname.undefined.t.Class.define._run (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:5:17436)   at __dirname.undefined.t.Class.define._completed (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:5:16877)   at h (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\node\pluginHostProcess.js:11:16675)   at doNTCallback0 (node.js:420:9)   at process._tickCallback (node.js:349:13) ```
17151|38 hits on 20 machines, all 0.10.15, on Linux, Windows and Mac
17152|```  Error: Canceled   at /Users/a123/.vscode-insiders/extensions/ms-vscode.csharp-0.3.7/out/omnisharpServer.js:235:31   at e.invoke (/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/out/vs/workbench/node/pluginHostProcess.js:7:14035)   at e.fire (/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/out/vs/workbench/node/pluginHostProcess.js:7:15488)   at e.cancel (/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/out/vs/workbench/node/pluginHostProcess.js:7:16809)   at e.cancel (/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/out/vs/workbench/node/pluginHostProcess.js:7:17419)   at DiagnosticsProvider._validateProject (/Users/a123/.vscode-insiders/extensions/ms-vscode.csharp-0.3.7/out/features/diagnosticsProvider.js:149:37)   at DiagnosticsProvider._onDocumentAddOrChange (/Users/a123/.vscode-insiders/extensions/ms-vscode.csharp-0.3.7/out/features/diagnosticsProvider.js:102:18)   at DiagnosticsProvider.<anony  ```
17153|1106 hits on 107 machines  Is the exception expected? Any chance we can avoid logging?
17154|I'm having a similar problem, but I do get a warning message:   > The Typescript language service died unexpectedly 5 times in the last 5 Minutes. Please consider to open a bug report.
17155|Deleted the directory and downloaded again the Code Insiders, but the problem continues.
17156|Looks like it is in the terminal related code that @weinand worked with an intern. @Tyriar can you take a look since he is on vacation.
17157|Moving to TypeScript for investigation.
17158|This issue was moved to Microsoft/TypeScript#8023
17159|// FYI @bpasero
17160|This is consistent with how the side bar behaves and this should not be made inconsistently unless there is a good reason.
17161|Thanks @kumarharsh closing as duplicate.
17162|CC @seanmcbreen
17163|Dup of https://github.com/Microsoft/vscode/issues/478
17164|- The .d.ts files where installed using `typings --ambient install node` - create a jsconfig.json  Then you get Intellisense  ![image](https://cloud.githubusercontent.com/assets/172399/14462045/860d4dd0-00c5-11e6-89e0-9cc35ea33e40.png)
17165|See also #5189
17166|I get Intellisense ![image](https://cloud.githubusercontent.com/assets/172399/14462342/e331461e-00c6-11e6-9c84-8eab89984840.png)  And Peek Definition works as well ![image](https://cloud.githubusercontent.com/assets/172399/14462384/14255710-00c7-11e6-8617-d1f72f4c8bef.png)  In your code you write `let s = Person()`, this should be flagged as an error ![image](https://cloud.githubusercontent.com/assets/172399/14462414/3f9b2eb0-00c7-11e6-9c45-e4fec6ece0f7.png)  What version are you using (bit this has already worked in ancient versions). What I see in the screen shot is that the tsconfig.json isn't saved. Can you try to save and to execute the command `Reload TypeScript` project.
17167|Now when debug starts we are sending an activation event 'onDebug:${type}', e.g 'onDebug:node'
17168|"Hi @egamma   your screenshots show how it works on my colleagues mac. Im using the latest stable version and insiders (0.10.15-insider | 0.10.11). `tsconfig.json` was not saved only during screen recording :). A fresh clone of this repo did not work either.  Is it possible to activate verbose logging in vscode/tsc? Maybe vscode isn't communicating with the TS compiler API properly!?  EDIT: On a windows VM on my mac it works as expected :)"
17169|What do you mean by _locked_?
17170|@egamma  thank you now it works though still it is a bit complicated without help i dont think anybody can get this
17171|@markbaillie can you pass in `-n` to the Code launch to force opening a new instance? Did you maybe configure the setting `window.openFilesInNewWindow` to true?
17172|+1
17173|+1
17174|Weird. They don't seem to be parsing the textile markdown correctly. I moved the links to inline and it works now.
17175|Can we at least change it to match only one line.. regexp with single '/' will always be in single line as opposed to a regexp block
17176|@joaomoreno checkout my fix, I am just adding maring-right to the x icon to make it nicely aligned - seems to work well for me.
17177|We process line by line, so the lookahead can only match on the current line. Did I miss anything?
17178|I can not reproduce this with latest VSCode alpha. What I did 1. View > Toggle Render Whitespace 2. Status bar click on Tab Size: 4 > convert indentation to spaces 3. Save 4. Render whitespace is still turned on  I tryed this with multiple combinations of the steps and failed to repro. Let me know if you can still repro and a gif would be useful
17179|As far as I understand there is no real bug on the vscode side, @weinand just plans to update the docs.  Let me know if I am mistaken and I will reopen
17180|Yeah lookahead will only match the current line, however tokeniser definition currently have `begin` and `end` block which matches multiple line, as opposed to `match` block which block single line (see my change for reference). Now this will not solve the problem I commented above, however it will keep the erroneous colorising only to that line instead of expanding it to all the lines below it until it finds an `/`  For egs: currently if we have  ``` a = b/c + d/e someOtherStuff ```  The text `someOtherStuff` will also be incorrectly coloured in current case. However, since regexp starting with `/` would always be single liner, we can change the tokeniser definition to user `match` instead of `begin` and `end` block which prevent incorrect colouring in `someOtherStuff` even though d/e is coloured incorrectly. Let me know if I have not explained clearly...
17181|This is just the way that electron renders hover on windows since this is the native hover, not our custom VSCode one. This also works nicely on Mac, and probably on linux.  Closing as can not fix, since this is electron behavior
17182|It still repros for me with the latest Code insiders build. However, I just tried it on a machine running an insiders Windows 10 build, and I can't seem to repro it there at all. So it may be something they've changed/fixed in more recent Windows 10 builds.
17183|Correct.  We are getting the configurationDone message when there are no breakpoints set.  I think this started working when I changed the order of the initialized event to be sent after the initialize request response.
17184|This does not seem to come from node-debug because there we verify that /usr/bin/gnome-terminal exists before we spawn it.
17185|@aeschli what OS is this? should only occur on linux.
17186|@isidorn I've updated the doc already but there is still the ordering issue from above (please read my first comment): https://github.com/Microsoft/vscode/issues/4902
17187|I think this would be nice, but I understand why they would want to keep it separate.
17188|@natefinch Thanks for the compliment :)  And yeah the selection and text cursor position after wrapping is something I've never been happy with, just haven't got round to fully investigating yet. Sometimes vscode seems to do one thing, sometimes another. I've created an issue for it in the repo: stkb/vscode-rewrap#4
17189|Ok guys @bpasero @joaomoreno, I suggest to reopen this.  Version: 0.10.11 (0.10.11) Build: f291f4ad600767626b24a4b15816b04bee9a3049  In order to cancel search, you need to focus input (which is not really clear, ESC is not working in area below the input) and also if you search and project has many files, its hard to cancel search since search will take too many resources and its almost impossible to focus input.
17190|Interesting :+1:
17191|If I open a file in the editor (double click), it is added to the working files list. This is the case with or without AutoSave enabled.
17192|In v0.10.10 `gnome-terminal` was used in the `LinuxExecutionService` here https://github.com/Microsoft/vscode/blob/0.10.10/src/vs/workbench/parts/execution/electron-browser/executionService.ts#L137  This is no longer registered in `execution.contribution.ts`, removed by @jrieken in b1ba4f83fa6c45359a65e33b9f949f49dc1d8ff7 for https://github.com/Microsoft/vscode/issues/4503  @jrieken can this safely be closed off? Isn't this the code launches the task runner, are you sure it's no longer needed?
17193|@v-pavanp this is currently the intended behavior, but I want to make sure I understand your concern fully.  Is there a need for you to have the Output / Console at a smaller size than is presently allowed?  We try to be helpful in hiding it completely when a user drags it very close to the status bar, but if this is causing any trouble, please let me know more about how it's affecting your workflow so we can look into it.
17194|@csholmq you can do that now, see the custom keybindings in https://github.com/Microsoft/vscode/issues/224#issuecomment-207507479
17195|Great in any language for quotes/brackets/parens. User expects to be able to overwrite text by highlighting and typing, so @hashhar's suggestion is on the right track. Alt might not work right on Mac, since it's already used by the system to insert special characters (like Ã·Â«â€œâ€˜ÂªÂº). But other modifier(s) should.
17196|@huttarichard while you are performing a long search, where are you usually focused?  (Are you opening files that come up while you're searching, for instance?)  @bpasero if we made <kbd>ESC</kbd> a global keybinding to cancel searching while Search is running, is that doable?  If the user is focused on element that would normally have behavior associated with the ESC key (e.g. ESC key while focused on the Output would close the Output), could we first cause the ESC key to cancel the search and then afterward return it to its default behavior for whatever you are focused on?
17197|If this is indeed about running from a drive that does not have read access, this can be fixed with the `--user-data-dir` command line arg coming in the April release (see https://github.com/Microsoft/vscode/issues/3068).  ``` code --user-data-dir /some/dir/with/write/access ```  Reopen if I misunderstood, thanks.
17198|@bgashler1   > Are you opening files that come up while you're searching, for instance?  exactly! usually got results before search is done. So for me almost every time I start typing and searching is still in progress...
17199|@huttarichard I believe using the <kbd>ESC</kbd> as a global hotkey to cancel search (only while search is running) may address your issue.  Do you have any reservations about that?
17200|@bgashler1 not at all! Great idea.
