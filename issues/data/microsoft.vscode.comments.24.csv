2301|How's this for bizarre - I'm getting this same issue in my project, but only in a handful of files that start with the word 'template', like `template-controller.js` etc. - however, not with `templates.js`  The affected files are:  ``` /controllers/template-controller.js /controllers/template-create-controller.js /controllers/template-edit-controller.js /api/template-api.js /template-engine.js ```  There are maybe ~100 other `.js` files where the red underlines don't appear when using ES6 syntax  My colleague had the same issue, but it went away when he restarted VSCode - that doesn't work for me, makes no difference, nor does editing and resaving the `jsconfig.json`.
2302|It looks like this is a dupe of:  https://github.com/Microsoft/vscode/issues/818
2303|Good point.    I was more commenting on what should be done for `vscode-go`, where in fact it is likely more correct to factor out the symbol logic than to rely on potentially getting results from other providers.
2304|+1
2305|"@Ivan171 I had the same issue initially. Just override the other to empty:  ``` json [     {""key"": ""ctrl+shift+s"", ""command"": ""workbench.action.files.saveAll""}     { ""key"": """",          ""command"": ""workbench.action.files.saveAs"" }, ] ```"
2306|I know, but when value is 120, it is not worked just like pictures in this topic.
2307|This can be anything, from a plugin eating lots of CPU to the file watcher. Can you share more about the environment and project.
2308|Planned for next release and we make sure its documented!
2309|@RWeigelt I cannot repro on my Windows, can you share this project with me please so that I have the exact same environment?
2310|"Issue fixed adding // Place your settings in this file to overwrite default and user settings. {     ""php.validate.executablePath"" : ""E:\Program Files (x86)\VSRes\php\php.exe"",     ""php.validate.run"": ""onType""  }  to the config file works"
2311|"@bpasero At first I was confused by the ""share this _project_"", then it dawned on me - that's exactly the problem: - If I open the _folder_ that contains the markdown file, the image will be displayed in the preview. - If I open just the single markdown _file_, then the image will not be displayed.  Interesting: In both cases the same HTML is generated (e.g. `<img src=""/d%3A/Temp/example.jpg"" ...` for the image that's in the same folder as the markdown file).  The fact that - when opening a folder - the image file is ""known"" to vscode (it appears in the list of files of the folder) does not seem to be the vital point. I just tested to open a folder `D:\Temp\` with the following markdown file:  ``` md ![](example.jpg)  ![](..\example2.jpg) ```  I copied the file `D:\Temp\example.jpg` to `D:\example2.jpg` (i.e. _outside_ the folder opened in vscode) and the image is still displayed correctly in the preview.  So there's something happening in vscode when opening a folder that lets the preview know some kind of ""base"". The same needs to happen when opening a single file, too."
2312|@bzuillsmith thanks! @alexandrudima assigning to you, I cannot reproduce on Windows though. I see the file opens fine after some delay and my mem usage goes up to 600 MB.
2313|"@DickvdBrink thanks, this is however not enough. You will need to set the data directory very early, see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/bootstrap.js#L24 for an example how we set it for development.  I think we should check what Atom is doing here for being portable (https://github.com/atom/atom/issues/2939) and do something similar. At the very minimum, there should be a command line argument to set the data location and extensions location. Currently they are split but at some point we want to merge them into one. I would also think a good fallback is to put the directories next to code.exe if you run with something like ""--portable""."
2314|:+1:
2315|@alexandrudima not sure why I am assigned, I think the marshalling code is yours?
2316|@joaomoreno the stacktrace at the end looks suspicious, maybe the service lib needs some protection against the parent being dead or not.
2317|Also seems to be a very recent issue, I did not see these last week.
2318|"@alexandrudima To further refine what I'd like to be able to do: - instead of a hover text, be able to be able to define a html string, e.g. `""<div class='jumpy label'>aa</div>""` - be able to define the `jumpy` and `label` CSS classes - also allow inline styles on the `div` element - be able to position the `div` element relative to the decorated range, i.e. horizontal and vertical offset - should also work with ranges of zero length, i.e. `Range(new Position(0, 3), new Position(0,3))` (this currently works with `hoverString`) - be able to programatically define whether the hover element can be displayed or not (possibly via inline style? or by setting the string property to `undefined`?)  Any feedback on the likelihood of this being implemented would be appreciated."
2319|Duplicate of #300
2320|There are already two plugins with limited functionality https://marketplace.visualstudio.com/items/vscodevim.vim https://marketplace.visualstudio.com/items/74th.vimStyle
2321|@Tyriar Good additions, thanks!
2322|:+1:
2323|Thanks
2324|@Tyriar I'm afraid we need nls.localize around each string, in the source code. There is a post compile step that looks for all occurrences of that function call, extracts the translatable string into a separate file and replaces the nls.localize call with a dictionary lookup.  The separate file is the input for the translation teams. So far we don't provide translated versions of VS code, but this is planned.
2325|@thedobbles Can you please add a screenshot, I'm not really sure what you mean
2326|@jrieken I think the hovers coming from extensions now always produce < pre >, which prevents DOM wrapping
2327|Error messages are not rendered with < pre > . Looks like rendering with < pre > prevents wrapping, while rendering without < pre > looses whitespace...
2328|:+1: I am also not happy with our error list
2329|@DracotMolver Can you outline what your `provideCompletionItem` function looks like?   I have understood the following steps: - type `>`, completion is requested - type `>` another time, no completion request happens  Is it possible that you return a promise that isn't ever resolved?
2330|@bpasero the marshalling code is indeed authored by me, but this code is called with invalid arguments (circular data structure). The question is where do the invalid arguments come from, which the stack fails IMHO to show.
2331|Added error list improvements to our roadmap
2332|@abstrus can you provide the log on the npm install run? Also, try running npm install inside the `extensions/csharp-o` folder
2333|:-)
2334|You can change the default encoding in settings.
2335|unsure, will investigate
2336|This issue was moved to OmniSharp/omnisharp-roslyn#355
2337|@bzuillsmith @bpasero Also tried the file on master and it opens fine. The work I did for #177 seems to make opening this file reliable as well.
2338|@alexandrudima maybe we could add code that prints a stacktrace (actually would need to send this via telemetry) when we detect a circular JSON structure?
2339|Cool :+1:
2340|@Tyriar I will take care of the copyright attribution.
2341|@bpasero The initial issue description contains the stacktrace: it starts at: [/vs/platform/plugins/common/ipcRemoteCom.ts#L114:4 (create)](https://github.com/microsoft/vscode/blob/df352367df2efcfa9d602d471e4e2f42140a0f05/src/vs/platform/plugins/common/ipcRemoteCom.ts#L114:4 %28create%29)  which I think means something was invoked on the extension host, `then` a result got produced and the result got sent back to the main process. The result could not be serialized for sending back to the main process.  The stacktrace does not show what was invoked. The marshalling code, if it would try to capture the stacktrace would produce the same stacktrace... I think the question is where is the full stacktrace
2342|ok i see. i test your story.  set encoding euckr   ok first solved  but i have new problem  save utf-8 -> load file -> txt is crash  why? vs code load default encoding.  utf-8 , euckr 2 file load only default encoding. (now euckr)  i think this is problem.  vs code must support identify file encoding.  will be more useful tool.
2343|Assigning to Andre to read the comment ðŸ˜‡
2344|@SiriusGuo   Here I am using `editor.wrappingColumn = 120`. Please notice how the long line which consists of numbers for easy counting wrapps after the 120th character. Also look at the indicator in the bottom right that shows the (line;column)  ![image](https://cloud.githubusercontent.com/assets/5047891/11496672/ced47e96-9813-11e5-8382-7137340f5190.png)
2345|Closing until more info is provided
2346|Having cntlm installed, I can search and list extensions gallery, but download fails with `connect ECONNREFUSED 191.238.172.191:443` error. Looks like proxy settings ignored for downloads
2347|@alexandrudima I should have started here: https://msdn.microsoft.com/en-us/library/windows/desktop/ms646267(v=vs.85).aspx  So need to answer to this. Also, I see better support for Vim emu is a VSC Team target for Dec.
2348|All timeouts are a result of debugging large data structures on versions of node.js that do not support code injection. Resolved as a duplicate of Microsoft/vscode-node-debug#11
2349|But that can take forever and then I never launch debug, right? I am a bit reluctant to add that.
2350|duplicate of #30
2351|we do support detecting the encoding when you use a BOM for UTF-8, 16 LE and 16 BE.
2352|Another thing I noticed is that deleted items are moved to the Trash bin (on win 7). That's also not portable, as it means deleted items will be left on the current machine when moving to another one.
2353|Nice catch :)
2354|Thanks ;) Maybe you can have a look at #851. It's somehow related in that it deals where Code data is stored.  Cheers
2355|These things are workspace related settings so they are stored in the workspace folder with the intent to share them to other people (e.g. a launch configuration is typically OS and path independent).  You don't have to create workspace settings, there is also user level settings. For launching and tasks however, these files are stored within the workspace.
2356|I get your point. Indeed making that workspace specific settings live inside the folder makes it shareable. But it does mean I cannot use workspace-specific settings and launch configuration on repos I don't control.  Intelij IDEA stores that meta data either in the workspace folder or in a separate, IDE-owned, folder so that repos are kept clean.  Cheers
2357|Thank you for letting me reply.  i afraid..my answer make you tired.  run save file and open file. ( set default encoding - euckr ) 1. utf-16 le - is ok 2. utf-16 be - is ok 3. utf-8 crash  loaded utf-8 txt read encoding  = euc-kr  all txt saved vs code .  Not a lie.  It was not found. save with encoding option utf-8 bom.  only utf-8
2358|Thats true, we don't offer a way to save UTF-8 with BOM, but see #751
2359|I'd rather have html.ts not reference htmlTags.ts. Sorry, all this is not document, but HTML is still one of the legacy modes that are not running in the extension host. HTML is instead run part in the browser and HTML worker. The browser part does the colorization and editor smartness such as indent/unindent and bracket matching. The worker does the more expensive stuff like parsing, validation and intellisense. Because it is a worker it can do all that without blocking the renderer. A build time we create two packages for each language mode, one for the browser main thread, one for the worker. html.ts is the root for the main, htmlWorker.ts is the root for the worker. htmlTags is mainly used by intellisense and will end up in the worker package. We avoid any references to from the main files so it doesn't end up in the main files as well, increasing the memory footprint. We could separate out the empty tags in something like htmlTagsShared.ts to solve this, or duplicate the lists.
2360|@aeschli would creating an emptyTagsShared.ts module be best for clarity? I was under the impression there were additional steps needed to introduce new files (#730)?  For future reference, Is it documented somewhere what the common directory name means? In Chromium there are the directories browser and renderer with a common directory containing shared code (this is all C++ though since node is introduced in Electron).
2361|I've hit another problem that I'm not sure if it's related to it being a native module or if it's another bug, the native module is being reported as not found by VSCode's editor and the TypeScript compiler (when running the `package` step).  If I run from the debugger it works just fine, the native module is loaded, executed, etc, so I know it's there, but `tsc` doesn't seem to locate it. I _think_ it's a TypeScript issue than a VSCode issue, but I can't find any info on it. Is it known at the VSCode end?
2362|Hi **@thomasmichaelwallace**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
2363|Thanks for response. Atom is also based on Electron and with Atom [it's possible](https://help.github.com/articles/associating-text-editors-with-git). So I thought it should be posible to use vscode the same way.  I look forward to the implementation.
2364|@thomas-jeepe Thank you for getting back to us. I can reproduce, I also get squigglies when the semicolon is missing.
2365|#751 and #844 would probably be helped by this as well. At least #751 would be solvable if working with BOM were better and my issues would completely go away if there was a way to, per editor extension, set the encoding and other stuff. So :+1:
2366|I have no additional plugins installed. Installed version of code: 7cc0c602a2b802b09a3f56b68a1a61ee9e8f0066 in a default state.  AutoSave is turned off.   OSX10.11   GIT is enabled for the current project.   The next time it triggers again, i'll make sure to log what i'm doing.
2367|> joaomoreno nope if i could fix that i wouldn't be here
2368|It usually starts around line 25, but in the images below it started on line 36... It is an imgur ablum to show that this bug happens with more then one theme. http://imgur.com/a/fvCmG  On Tue, Dec 1, 2015 at 12:48 AM Alexandru Dima notifications@github.com wrote:  > @thedobbles https://github.com/thedobbles Can you please add a > screenshot, I'm not really sure what you mean >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/841#issuecomment-160896494.
2369|Yeah the size and kind of workspace you open also plays a role.
2370|@Tyriar 'common' refers to the minimal JS execution environment needed. For all language services, common is enough (no node, no browser). We created that to be able at compilation stage to make sure there are no node or browser dependencies. Maybe an environment 'worker' would have been a good idea as well, but it's not up for discussion now. We want to move away from the workers into extensions. About the separate file, I have to find out what's the story there with the copyrights. Is it going to be Microsoft, or is it the committer that creates the file ( @chrisdias  ?). To avoid any wait I suggested to keep all in the files we already have. For this fix, add the Microsoft copyright until we have an answer.
2371|I honestly don't know if we support this setup.
2372|Maybe the dialog blocks because it tries to restore the connection?
2373|I have exposed the raw attach in my debug api, Ben will try it out and we see if something else is needed.
2374|This issue was moved to Microsoft/vscode-go#135
2375|I will merge this from by electron branch, thanks!
2376|Is it constantly happening then? I mean the cycle of 1. Code reports there is an update. 2. You press Update Now 3. Editor closes. 4. Nothing happens. 5. You launch Code. 6. Code reports there is an update...
2377|It seems that you just need TypeScript typings to go along your native module. Try placing a file in your extension similar to this:  `mylib.d.ts`  ``` typescript declare module 'mylib' {     export function foo(arg: number): void; } ```  Then, both VSCode and TypeScript would drop the errors when you'd import the module:  ``` typescript import * as mylib from 'mylib'; ```
2378|@chrisdias blurry font fix on Linux is https://codereview.chromium.org/1324513002
2379|> joaomoreno yep, it works perfectly, i could download and install but i don't wanna do it over and over.
2380|Change delivered, thanks!
2381|+1
2382|The current project I'm working on is 100MB with 7,163 files mainly PHP. I have about 20 open in the `working files`
2383|I wonder if the PHP process we spawn for linting could have an impact, @aeschli is there a way to trace this?
2384|@weeblr Here is a nice trick I use for this :wink:   Edit `.git/info/exclude` and add `.vscode`  Hint: works like a `.gitgnore` file sitting in the root of the repo, but that is not checked in the repo
2385|That looks so empowering
2386|@xxMUROxx Not sure what you mean.  VSCode is built on top of [Electron](http://electron.atom.io/).  `version` in `package.json` represents the VSCode version (at `0.10.3` for now). `electronVersion` in `package.json` represents the [version of Electron we build on](https://github.com/atom/electron/releases) (at `0.34.1` for now)
2387|Fixed.
2388|Fixed.
2389|I think this is fixed with latest Electron we use.
2390|We will update to Electron 0.34.5 which includes a fix for this.
2391|Would be nice if you could track further ;)
2392|Might be fixed with Electron update.
2393|+1 also have this issue - it appears not only in light theme, but in Monokai and some others. To reproduce: - open any file - add 30 empty newlines to the end of the file (press Enter 30 times)  ![image](https://cloud.githubusercontent.com/assets/2758540/11505788/d8fd041a-9854-11e5-8ad8-a7e27085ea02.png)  ![image](https://cloud.githubusercontent.com/assets/2758540/11505803/e630acb8-9854-11e5-9d0f-deac98691600.png)  ![image](https://cloud.githubusercontent.com/assets/2758540/11505817/f3bf2c9c-9854-11e5-81e4-cf0fe2e146a3.png)
2394|@thedobbles thank you for the extra details, I can now reproduce!
2395|Contributions and activation events are separate concepts that cannot always be tied together as you suggest. For example, a contribution wants to be activated when a markdown file is opened, but it didn't contribute the markdown language. This contribution will only register an activation event.  We had implicit activation registration for commands, but this was inconsistent with other contributions, that do not implicitly register an activation event. In the end we have decided to go for consistency and to always require activation event declarations.   I agree that we should improve the error message, created a separate issue to track this.
2396|I agree that these concepts can't be combined into a single concept.  But I still think one of the 2 options I mentioned makes sense.    Right now, every command I add will be shown to the user but will fail by default unless I also add it to the activationEvents.    It never makes sense for me to add a command but _not_ want that command to require activating my extension - since the handler for that command must live in my extension and will fail if executed before my extension is activated.
2397|@alexandrudima  if I need more than one same HTML element,  I'll type only the first one and then press ctrl + d on keyboard to duplicate that element as many times as needed. for example: I write once li element in vsc `<li></li>` but I need that same element five times. Now wanna do it with ctrl + d shortcut not to copy paste nor type five times. `<li></li>` `<li></li>` `<li></li>` `<li></li>` `<li></li>`
2398|On Windows VSCode can see jsconfig.json and work properly. But when open project from network drive, VSCode can't see jsconfig.json and show errors on ES6 code.  I have project on VM centos and map a Windows network drive to projects folder. All right, except ES6 errors. When I copied project to Windows local folder - everything seems Ok with ES6 speling.
2399|Are you on 0.10.2? In 0.10.1 PHP has bug #160.
2400|Currently 0.10.2 I can't be sure at which point I upgraded (unhelpful). It may have been recently. I can keep working to see if the issue returns.   While I didn't check the CPU, as the editor still worked absolutely fine it couldn't have been maxing out.  The only reason I noticed a problem was because the battery drained more rapidly than usual. I then checked and it had been running at 99.9 energy impact.   The editor itself was very responsive.
