17301|@SetTrend the first lookup is using a more lenient lookup that I wrote which only works for files (not locations within a file). The second is using the standard source map npm module which I cannot configure to become 'lenient'.
17302|"Sorry to hear that. Since recent we do have an option to turn off validation for JavaScript - `""javascript.validate.enable"": false`. That setting and a linter extension that supports object spread (like [eslint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)) should  bring you in a more comfortable spot."
17303|@daviwil @Krzysztof-Cieslak @mat-mcloughlin  In VS Code a debug adapter is only launched when a debug session is started. And the debug adapter is stopped when the session ends. At any point in time only a single debug adapter is connected to the debug console and can use it as a REPL. - How should this work if the REPL could be used at any time? - Is the debug adapter running all the time? So a 'terminate' does not kill the adapter but only kills the session? - When is the debug adapter started? 'Launch' is probably too late because the REPL should work at any time.   - Is this a new lifecycle option of a debug adapter (contributed in the package.json)? With this option set VS Code would start the debugger early and not kill the adapter at the end of the session but reuse it as long as possible? - What happens if I'm using more than one debug adapter with this behaviour? Will only a new session of a different adapter terminate the previous adapter?  Please provide input/insights/ideas in how we could improve the current architecture to support your use cases. Thanks!  /cc @isidorn
17304|"@jrieken  `// Place your settings in this file to overwrite the default settings` `{     ""javascript.validate.enable"": false }` Doesn't seem to effect the red ~  for me... Am I doing it wrong?  ![image](https://cloud.githubusercontent.com/assets/1340410/14499972/31b55e5e-016e-11e6-93ad-49906b926477.png)"
17305|There is a minimize other editors command (`workbench.action.minimizeOtherEditors`), in addition to an even editors width command (`workbench.action.evenEditorWidths`). Adding keybindings for these in your keybinding.json will probably help accomplish what you want.
17306|Resizing a pane horizontally (instead of dragging the gutter) – cf. https://atom.io/packages/resize-panes
17307|two questions: - what version of vs code are you running? - this is a JavaScript file, not TypeScript?
17308|Closed via a big output refactoring that just got pushed to master. @bpasero I would appreciate a quick code review, at least the interface structure in [output.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/common/output.ts#L88)
17309|This is a .js file (not .jsx or .ts)...  ![image](https://cloud.githubusercontent.com/assets/1340410/14501024/6783a668-0172-11e6-9d5b-e5978947934c.png)
17310|I was having this same issue. When i checked my path, I had `C:\Program Files (x86)\Visual Studio Code\` instead of `C:\Program Files (x86)\Visual Studio Code\bin\`. Adding `\bin` to the path resolved the issue for me. Thanks for the help!
17311|Will do, thanks!
17312|@bpasero If you want to close this, feel free to do so. Although I haven't used Code as much as I normally since updating to the latest Windows Insider fast build, I haven't seen the issue since upgrading. If the issue occurs again, I will create a new issue.
17313|@dbaeumer is this before or after the electron update?
17314|"> There are new commands to focus either working files or explorer.  Could you share the new commands or point to the new key bindings?  https://code.visualstudio.com/Docs/customization/keybindings still suggests <img width=""754"" alt=""screen shot 2016-04-13 at 10 33 11 am"" src=""https://cloud.githubusercontent.com/assets/949380/14503052/2bdd0172-0163-11e6-8a96-2bfa1e780f0d.png"">"
17315|[Window Title] Visual Studio Code  [Main Instruction] Visual Studio Code  [Content]  Version 0.10.11 Commit f291f4ad600767626b24a4b15816b04bee9a3049 Date 2016-03-11T17:10:35.304Z Shell 0.35.6 Renderer 45.0.2454.85 Node 4.1.1  [OK]  2016-04-13 2:47 GMT-05:00 Benjamin Pasero notifications@github.com:  > Which VS Code version do you use? >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5124#issuecomment-209286947  ##   Gilberto Fandiño Barbosa Desarrollador de videojuegos en HTML5 Diseño 2D (Inkscape /gimp ) Programador BackEnd (php/mysql)
17316|@weinand The trace option is very useful for debugging! Thanks! :)
17317|This is fixed when installed via .deb package. This is available in the current insiders but is coming to stable very soon too.  ![image](https://cloud.githubusercontent.com/assets/2193314/14503484/26ad5f06-0165-11e6-98ea-6462af03cbc0.png)
17318|Duplicate of https://github.com/Microsoft/vscode/issues/3091
17319|I like it @Tyriar
17320|"That's an interesting idea, actually.  If the debug adapter contribution could opt in to being launched when the extension gets activated and then persist across multiple debug sessions, that would work for my needs.  Here are some general thoughts: - If the debug console is now active at all times even if the debugger isn't running, could you make the debug console control also available in the editing workspace?  I think it'd be limiting if the user could only see the console if they switch to the debug workspace. - Do you think it might be time to consider allowing multiple debug adapters to be connected to VS Code at the same time?  What if I'm a web application developer and I want to attach to both a client (JavaScript/Node) and server application (C#) and debug the requests as they travel between the two processes?  To simplify the UI you could just allow the user to select the ""active"" process (at any time) so that only the details of that single process (breakpoints, variables, call stack, debug console) are shown in the UI.  This would allow a persistent PowerShell debug adapter to be connected even if the user is also debugging some other type of application.  I've got a few more requirements to make this experience smooth for PowerShell but I'll send those separately in an e-mail because they require discussion that would just be extra noise on this issue."
17321|Moving to  omnisharp-vscode for investigation.
17322|This issue was moved to OmniSharp/omnisharp-vscode#183
17323|Duplicate of Microsoft/TypeScript#6566
17324|I cannot reproduce this  ![image](https://cloud.githubusercontent.com/assets/172399/14504657/f9292046-01b5-11e6-809c-492305d20a32.png)  Can you please add a screenshot of what you are seeing.
17325|@admmasters ping?
17326|Fair enough.  Closing.
17327|Works for me: ![image](https://cloud.githubusercontent.com/assets/172399/14504943/3cf12584-01b7-11e6-9872-ab80a1669f00.png)  I suspect entered `>ext install azure`?  ![image](https://cloud.githubusercontent.com/assets/172399/14504890/f93e9fba-01b6-11e6-9900-2ee2485a4ad0.png)
17328|This is still an issue. Any plans to fix this?
17329|Looks like there are some issues with my VSCode installed version. Closing it as of now and will reopen if required.
17330|I saw this before the electron update.
17331|@jrieken Do you remember in which version we switched to Salsa. The tsserver doesn't validate unsaved files :-(.   @wassimoo do you have any linter extension installed (e.g. eslint or jshint)
17332|"@bpasero  I agree. I'm sorry that I missed some details in my issue's title that rendered it incomprehensible.  Given the example screencast depicted above, here are the steps to fully reproduce the issue: - Open a folder in Visual Studio Code - If no file is listed in the ""Working Files"" section of Files Explorer, edit any file listed in the folder browser (the lower section) of Files Explorer in order to add it to the ""Working Files"" section of Files Explorer. - Provided that you have now at least one file listed in the ""Working Files"" section of Files Explorer, click any of the file names listed in the ""Working Files"" section of Files Explorer by using the mouse in order to open it in the editor on the right. - Hit `<CTRL>+<1>` to give focus to the editor panel. - Hit `<SHIFT>+<CTRL>+<E>` to move focus from the editor on the right to the Files Explorer panel on the left. _(The highlighted line should be the file name in the ""Working Files"" section of Files Explorer.)_ - Hit `<ARROW DOWN>` - Hit `<ARROW DOWN>` again - Hit `<ARROW DOWN>` again - Hit `<ARROW DOWN>` again  => You will notice that you will not be able to enter the lower section of the File Explorer panel using the `<ARROW DOWN>` key on the keyboard.  That's what I'm complaining about: There is no keyboard navigation available in Visual Studio Code allowing me to navigate between the Working Files section and the folder section of Files Explorer."
17333|@otbe when the tsserver crashes we show a Message Box in the UI that informs you about this. Did you saw such a message box.  The error shown in the last comment is indeed related to editing JS files.  @jrieken: can you please look at this and may be create a separate issue.
17334|Hm, I would expect that to be colored. The closing `#`s are completely optional and won't stop text from rendering as a header AFAIK.
17335|I tried to reproduce this on the insider 0.10.15 without any luck. And the project is more than trivial. So I doubt that this is a tsserver issue at all. @otbe can you think of any difference between the Macs with the different behaviour. Are you using nvm ?
17336|Dups #5015
17337|I migrated all the main pages, I left a few that either aren't linked to ([Releases and Branches](https://github.com/Microsoft/vscode/wiki/Releases-and-Branches)) or ones that can probably be deleted (2015 Dec/Nov planning).  I wrote over the wiki pages that were migrated with a message redirecting to the new page, the pages/wiki can probably be removed once we're sure we don't need them anymore.  See the new wiki here https://github.com/Microsoft/vscode/tree/master/wiki
17338|Yes you can, but that is equally complicated as providing a second completion provider for JS or TS. I think the complexity in your case is building the AST, computing the right bindings, ... And there is currently no support to ease that.
17339|@dbaeumer  Saw no such message box ever, but typescript has never worked for me in vscode. :)  But how I said, this problem is not only related to typescript. Simple JS files (see screenshot) did not work either.  Both macs using nvm (node 4 & 5).   Whats unique to my mac: - ~~brew is installed~~ - docker & docker related tools are installed  What I tried so far: - installed typescript globally - different node versions - different vscode versions (insiders and stable) - different user accounts (also newly created ones)  Did I miss something @donaldpipowitch?  Is there anything I can do to provide more information? Start vscode in another mode or something like this.
17340|Glad to hear and see that this is fixed. Are you able to pin the VSCode icon to the Dock and run it from there though?
17341|Yeah, the package adds a [desktop entry](https://github.com/Microsoft/vscode/blob/master/resources/linux/code.desktop) which is what enables that :+1:
17342|So I tried stable version once I was home.  I did the same method of updating the extension c# and not getting any intellisense at all.  Based on your criteria even if I opened a ticket for the regular version it'd be immediately invalid since it definitely works for someone else.
17343|@daviwil multiple debug sessions are already possible: just open another VS Code window on a sub- or super folder. I'm using this setup all the time to debug my (client) tests and the debug adapter (server) at the same time. We are planning to lift this limitation (a single 'if' statement) soon. Then it will be possible to open multiple windows on the same (project) folder.
17344|Possibly related: https://github.com/atom/language-sql/issues/13 (probably using the same grammars?). Whoever fixes it first should send a patch to the other, if so.
17345|Thought maybe .NET framework but doesn't look like it's out for Linux, or it's built in to the editor.  GLIB latest version, other items from FAQ all covered.  Not sure.
17346|It actually also deletes the { when there is only one space: `<cursor><space>{`  I've edited the original post, sorry for my mistake.
17347|Cool!  If you can open the same folder in two separate windows then that could simplify the multiple debug adapter situation.
17348|yes actually i had one called ' HTML hint' but even after uninstalling the ext and updating my vs code to 0.10.11 version the problem still exists .. so i think it has nothing to do with the extension
17349|Got it, thanks.
17350|@bpasero any recommendations on how to ensure that the previously active entry is the one that is opened? `WorkingFilesModel` doesn't know about which file is active currently.
17351|Nice find, I think using the HTML entity `&#35;` might be better than introducing the tag.  ``` markdown ### C&#35; ```  ### C&#35;
17352|Duplicate of https://github.com/Microsoft/vscode/issues/313
17353|I like that much better. Should I just make another commit or can I amend this commit?
17354|Whichever way is easier
17355|"I'm using Node v4.2.3.  Is there any way VS Code can mitigate the issue? It's really annoying that the compiled script is opened. It really disrupts the normal workflow of a user. Especially since the compiled script then shows up in the quick open view (`ctrl p`) despite being listed in the ""files.exclude"" setting."
17356|Unchecking the `Uncaught Exceptions` checkbox is not a good option since I do want the debugger to break on actual _uncaught_ errors.
17357|After some more investigation, I realized the issue only occurs when the error is thrown before any `await` statement in the function.  This will work as expected because the error is thrown _after_ the `await` statement:  ``` typescript //index.ts 'use strict';  async function someAsyncFunction() {   await Promise.resolve();   throw new Error('Could not perform this async operation'); }  someAsyncFunction()   .then(() => {})   .catch(function(err) {     // caught the error without VS Code breaking into the compiled script due to the thrown error     process.exit(1);   });  ```  Could it be a Typescript compiler optimization gone wrong?
17358|@NikosEfthias can you attach a screenshot?
17359|@Tyriar can you clarify what you try to achieve?
17360|Understood, but I am really questioning that you would be able to arrow down from one tree to the other, I can see people complain about this if we would add it. It is usually not typical tree behaviour on any OS to navigate to the next tree on arrow down. Instead, you eventually just reach the end of the tree and thats it.
17361|Weird. Does it reproduce from our insiders release?  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
17362|workbench.files.action.focusWorkingFiles is the new command.
17363|:+1:
17364|Well, not if you have to see, initially I was using brackets.io so the working folder does not believe from scratch in Vs Code.  I opened the entire folder:  File-> Open-> folder
17365|**ok, very well, many thanks**  When you select a code snippet if repositions the focus, that if it makes sense (at least to me)  [Window Title] Visual Studio Code - Insiders  [Main Instruction] Visual Studio Code - Insiders  [Content]  Versión 0.10.15-insider Confirmación 67567498285c2081312077cc24370d97676fc20a Fecha 2016-04-11T10:56:21.409Z Shell 0.35.6 Representador 45.0.2454.85 Node 4.1.1  [Aceptar]
17366|@bpasero close all files and then open them via new command. Ideally the previously active file would be the new active file.
17367|I also use brew and nvm (but no docker tools). @otbe and I share a lot of projects and tools. We can't spot the difference in our setup. vscode works great for me.
17368|Should be relatively easy to ad a method to working files model to find out which working file is currently opened and focused using the editor service to get the active editor and checking its resource input.
17369|![](http://i.imgur.com/rJleGnd.png) here as you can see (or cannot see :)) theres no actual source file like main.js or index.js just 3rd party modules and images
17370|@dbaeumer The error message is triggered by the status info call but it hint towards us not yet have done a single `openFile` request. That's the reason why the call fails. Now I wonder why that it...  @otbe At the bottom of the editor it says JavaScript, TypeScript respectively?
17371|@dbaeumer Should be since 0.10.10: https://code.visualstudio.com/Updates
17372|@dbaeumer Do you have ideas why that is?
17373|@gilberto389 sorry, having issues understanding, you say this is good now with insiders?
17374|@NikosEfthias I meant to show more information how you think in VS Code there is a bug. I am not sure I understand the issue you raise.
17375|@bpasero as i mention above this isnt a bug i just ask because of curiosity i dont know whether you have a kinda user forum and simply i couldnt think somewhere else to ask my question rather then here
17376|with insider works very well, thanks
17377|"@isidorn some feedback: - there are many places now where you do getOutputChannel().doSomething(). I suggest instead to put the output channel as a variable of the object where it is used and just use it from there. this prevents having to get the output channel all the time - instead of getContents() on the output channel I suggest to have a get property (not a function) ""output"" or ""contents"" that returns the contents of the channel - wherever we show the output channel to the user you seem to use the ID of the channel and not the label. I think the idea was to always use the label (e.g. ARIA label, dropdown label)"
17378|@NikosEfthias ok I see, we do not have a forum, I really suggest you forward this question to the Electron forum: https://discuss.atom.io/c/electron  As for VS Code we have a step in our build process that bundles all our JS files into one large JS file. But still, we do have all our resources under the resources folder of Electron, I am not sure how this is different from other Electron applications.
17379|Great :+1:
17380|Ping me on Lync please if you need further help :)
17381|Changing the to front slash works Fine
17382|@jrieken  Yes it recognizes JS/TS properly.
17383|Anything special about the file paths? Like ümlauts, network-share, sym links etc?
17384|I will handle this as a duplicate of #3676
17385|Tasks - [x] support virtual document, file document, and commands - [x] support to jump to a line in a file document
17386|"I am closing this issue as I realized that I didn't add the reference in .ts file for external modules.  /// <reference path=""Scripts/typings/node/node.d.ts"" /> /// <reference path=""Scripts/typings/stylus/stylus.d.ts"" /> /// <reference path=""Scripts/typings/express/express.d.ts"" />  After adding above references there is no error in my .ts file."
17387|@marc314 Try using the `0.10.15-insider` build, and see if it changes... That same code seems to be working fine for me.
17388|- [x] Injection, services, and service identifier - [ ] editor/contrib and workbench/parts
17389|@jrieken the setting in not available in 0.10.11 (intellisense doesn't propose it either in that build)
17390|@otbe Just for clarification: the tsserver powers both TS and JS. That is why both don't work in your setup.
17391|"thx, @bpasero , @egamma , iHuahua he said the vs code support dom document encoding detection, he said he is developing a plug-in to solve the problem is not dom document coding, such as .txt .bat .reg files. because of the vs code interface restrictions, at present can only be achieved ""Change File Encoding"" by manual switching, can't auto encoding. some problems because windows code pages (ANSI) by locale select the encoding, such as chinese simplified gbk, korean euc-kr,  japanese cp932 and so on.  maybe these questions no solution."
17392|New translations implemented.  JPN:  再起動後にフォルダーを再度開く方法を制御します。'none' を選択するとフォルダーを再度開くことはありません。'one' を選択すると最後に作業したフォルダーを再度開きます。'all' を選択すると前回のセッションのフォルダーすべてを再度開きます。  KOR:  다시 시작한 이후에 폴더를 다시 여는 방법을 제어합니다. 폴더를 다시 열지 않으려면 'none'을 선택하고, 마지막으로 작업한 폴더를 다시 열려면 'one'을 선택하고, 마지막 세션의 모든 폴더를 다시 열려면 'all'을 선택합니다.  CHS:  控制重启后重新打开文件夹的方式。选择“none”表示永不重新打开文件夹，选择“one”表示重新打开最后使用的一个文件夹，或选择“all”表示打开上次会话的所有文件夹。  CHT:  控制重新啟動後重新開啟資料夾的方式。選取 [none] 永不重新開啟資料夾，選取 [one] 重新開啟最近一個使用的資料夾，或選取 [all] 重新開啟上一個工作階段的所有資料夾。
17393|Sorry for late answer. I might have overreacted, its not that bad, I run search again on MacBook Pro, it took about 40% CPU during the search. Its alright if you don't have open any other development tools (not my case). Anyway, I still believe that, area below should work with ESC.
17394|@otbe can you please try the following:  - set the global environment variable TSS_TRACE to 1 (in a shell) - start VSCode from that shell - in VSCode open the Developer Tools by pressing F1 and typing developer tools. Select Developer: Toggle Developer Tools - open a TS file  You should see something like this in the console:  ![capture](https://cloud.githubusercontent.com/assets/1931590/14521901/185837d8-022c-11e6-91cf-a239a3f70b68.png)
17395|@jrieken can you help with the env and starting from a shell on the Mac please.
17396|On the mac that would be `export TSS_TRACE=1 && code`
17397|Ok. mystery solved - @marc314 You got two options: Try out the `0.10.15-insider` or wait for the next stable build is coming out very, very soon.
17398|I can't reproduce this anymore with the next stable build. Although not with the latest insider. I am not sure but when enabling Salsa I know that we left the old JS worker based code in. I am pretty sure the errors came from there.  @wassimoo please reopen if you still see the problem on the latest insider or the next stable.  ![capture](https://cloud.githubusercontent.com/assets/1931590/14522368/86144cb0-022e-11e6-8552-b9995425c7d9.png)
17399|I pushed that change.
17400|Duplicate of #4620
