26501|+1 here.   Working from Costa now and VS Code starts to download newest version automatically. But unfortunately the file downloaded was somewhat corrupted. The first idea came into my mind was opening VS Code and triggered the check for update button again, but unfortunately I had to download the bits only from site.
26502|I think we should have to show the number once we have Replace functionality.   If it is only count, How about showing in the title bar just like in Problems view? Side bar is already narrow and compressing the search bar by adding more info / details make it more cumbersome.
26503|Also Badge like in Git view?
26504|I appreciate the ideas around introducing git URIs. The UX issue I have is that I see warnings for resources I cannot edit. Whatever we decide on doing, please do not show me warnings for resources that I cannot edit. I might be able to open them if we do all the things talked about here but I can still not fix the warnings.  I am not sure how to express myself better, sorry :)
26505|> IDs we use in the opened editors view are not truly unique  @bpasero What is the algorithms that defines the ID? This is where we create the input for the html preview: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/html/browser/html.contribution.ts#L35
26506|That will be fixed with the June release as we have moved out markdown into an extension
26507|"@jrieken this is about IDs for tree items in the ""opened editors"" viewer. I would think that taking an inputs resource is a good ID (@isidorn you should use it if you have it together with the position of the editor in the groups).  Editor inputs do not need an ID but the idea is that an editor input gets identified by its resource e.g. to find out if an editor is already opened or not. Some editor inputs do not have a resource associated but I consider that debt to change in the future."
26508|We need to think about this holistically. For example, we need to think about navigation between file tabs and (potentially) terminal tabs (e.g., what does ctrl-tab do when focus is in the terminal, how do I navigate to a terminal tab when focus is in the editor)  There is the question of tabs or no tabs, what the tabs look like, can we show progress, status badges etc on the tabs.  I can definitely see the value of tabs especially if we can use some kind of indicator to show when a process is complete, when new output is available etc. That provides for a glanceable UI and UX which allows the user to focus on what is important.  Whenever we are introducing new UI we always have to make sure that whatever we do helps us maintain the lightweight nature of the product. Any piece of new UI that we introduce into the product always has the potential to make VS Code more heavy in look and feel. So we just need to take our time and consider multiple options.  Let's make sure we discuss this at our next UX meeting.
26509|This is on my relatively new macbook, I have Chrome and Code Insiders installed, I was expecting to view the image not the code when I opened it. I'm pretty sure I haven't touched anything to do with file associations.
26510|Is `ctrl+k ctrl+i` what you're looking for? I'm on the insiders build so it could be a new shortcut.
26511|"@ventis07 I'll see to give some more info for you here once I'm at my personal workstation, don't have access to my bookmarks or projects right now.  Probably the easiest way to get started with Ionic2 TypeScript projects is to use Chrome developer tools for debugging them, just develop in vscode and debug in chrome, there is no additional setup needed for this.  You'd just ""ionic serve"" your project, and go to ""sources"" in the chrome developer tools after connecting to the local server, it should automatically have the souremaps already so you can simply navigate your typescript code (and use breakpoints etc) that is sitting in /app.  For more integration into vscode, you might want to look into these extensions, in my experience there is some fiddling required to get started though:  https://github.com/Microsoft/vscode-cordova https://github.com/Microsoft/vscode-chrome-debug"
26512|Exactly, thanks! Do you know the name of the command?  On Fri, 17 Jun 2016 at 12:16 Thomas Townsend notifications@github.com wrote:  > Is ctrl+k ctrl+i what you're looking for? I'm on the insiders build so it > could be a new shortcut. >  > — > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7805#issuecomment-226744072, > or mute the thread > https://github.com/notifications/unsubscribe/AA4QCZbM-vAnPUhiU45ezpCqKAqwMg_vks5qMoIegaJpZM4I4LRP > .
26513|`editor.action.showHover`
26514|@bgse, Thanks. Will get into the links and await further for any other ones. Hope that with the resources, i can get this challenge over with. Many Thanks
26515|@sandy081 Thanks for the pointers.  I took a look and realize it would take longer than I thought so I may have to delay this.  In the meantime if anyone with more experience with the code could add this change, I think many keyboard users would appreciate it.
26516|"Can confirm it effects on a new installation of v1.2.1 and on windows. Folders causing this for me is when opened as ""root"" and containing swedish letters (åäö). Also if folders above ""root"" contains special characters."
26517|@Tyriar then you'll have to make Chrome the default viewer for *.svg
26518|"Hi. i wanted to add a very modest idea : could be nice to have a line padding preference, defining the space between each line like in sublime text. at the moment we can only define line height, it also change caret and line hightlight size, even if font size remain the same, that is not really nice to read. it could be nice to have an option to change the margin beween each line.  Also, the availability to toggle visibility of line hightlight could be good.  ""editor.LinePadding"" : _float value_ ""editor.ShowHighlightCurrentLine"" : _boolean_  for exemple"
26519|Windows7 Start > cmd > cd c:\gitportable-209-x64\bin > bash.exe  user@host MING64 /bin $ ast   (backspace becomes space)  This problem is probably due to using incompatible versions of the cygwin DLL. Search for cygwin1.dll using the Windows Start->Find/Search facility and delete all but the most recent version.  The most recent version _should_ reside in x:\cygwin\bin, where 'x' is the drive on which you have installed the cygwin distribution.  Rebooting is also suggested if you are unable to find another cygwin DLL. Segmentation fault
26520|![untitled](https://cloud.githubusercontent.com/assets/900690/16152842/fff98322-34a3-11e6-8593-3ff111a3af34.gif)
26521|Thanks @alexandrudima !
26522|@aruneshchandra welcome. Is the chakra debug adapter extension published - I could not find it? Is there some way we can try this out - since we woudl ike to add it to our test plan.
26523|I have pushed a change to restore Cmd+1/2/3 functionality and instead add CtrlWin+[1-9] to navigate to the index independent of if tabs are enabled or not.   We still have to decide about the default. However I already got a very surprising @Tyriar when he had tabs disabled and Cmd+1/2/3 was not doing what it used to do.  A user can always change these keybindings to match what he wants.
26524|duplicate of #7777
26525|@agarwal-sandeep can tell you more about this.  cc:@curtisman
26526|+1
26527|Forwarded to Marketplace team.
26528|well, how can a language service extension recognize read-only resources. Are all the inMemory read only resources?
26529|Thanks! confirming that http://code.visualstudio.com/Download#insiders is fixed
26530|@bpasero I fully agree that I don't want to see errors for read-only resource. Having a git-\* schema would allow all validators to exclude those.
26531|Demo and doc: http://docs.emmet.io/actions/wrap-with-abbreviation/
26532|@alexandrudima as of today you cannot edit and save any resource in the editor that has a different schema than `file` or `untitled`. That seems like a good start to filter...  Are we planning to allow extensions to open editors with other schemas and making those writeable? If not, we should start simple and only validate `file` and `untitled`.  Nevertheless, +1 for using domain-specific schemas if possible and not the default.
26533|Yes, since we updated to the newer electron version, Chromium always shows ligatures, even without our enabling them.
26534|This issue was moved to Microsoft/TypeScript#9228
26535|I don't think I understand. You have a `gulp watch` that you started on commit A and you want the same version of gulp watch from commit A to be able to compile arbitrary commit B from the past?
26536|+1 for all inputs having a resource associated. Tho, it might still be the same resource for different inputs
26537|Outcome of discussion is to come up with a new schema say private and do not send to extension host at all just like large files. - Left hand side of diff-editor uses this private schema.  I think for in memory files, markers owners should be responsible for cleaning / removing the markers when the file is closed. This would  - Let the user know if there are real problems (just like the case in Default Settings) - Let the user not to worry about seeing them always and not able to take any immediate action
26538|any update on it?
26539|@jrieken any input is free to override the `EditorInput.matches()` method to make further distinction, I would not just blindly trust the resource.
26540|Also, usually we do an instance of check too, so that 2 inputs can have the same associated resource but are considered different.
26541|Not sure if this is still an issue, forwaring to @weinand to decide
26542|@isidorn did it happen?
26543|"The action is now available in the context menu anywhere if you right click in the title area:  <img width=""701"" alt=""screen shot 2016-06-17 at 17 50 44"" src=""https://cloud.githubusercontent.com/assets/900690/16156330/09e45cb2-34b4-11e6-85a9-8e0d2bcaf741.png"">  I am still not sure if we should expose it as primary action though given the close button is already there."
26544|Fill out the OS version/vscode version as well - it really helps the devs out.
26545|The error was caused by lack of permission in the folder /Users/youruser/Library/Application Support  With the command -> sudo chmod 775  Was solved
26546|@cindoum Sorry, no, we currently have no plans adding this. I recommend you using the emmet expansion enter `script`, press tab. This expand to `<script></script>`
26547|It is working now on the insiders drop after a reinstall. I think the problem is the link http://code.visualstudio.com/Download#insiders still points to the released build unless you click the little link to get the insiders, so I most likely just re-downloaded the released bits.
26548|And yes, this looks like what I was hoping for. Thanks!
26549|@bpasero not today
26550|Agreed.  Steven and I will be meeting next week to discuss.
26551|"try `{ ""key"": ""ctrl+[mouse button]"",   ""command"": ""-cursorWordLeft"" }`"
26552|Still doesn't work @tills13
26553|Yes I've become used to using <kbd>ctrl</kbd>+num to split as well as focus, instead of remembering a new keybinding.  <kbd>ctrl</kbd>+`num` makes more sense to focus tab number `num` when <kbd>ctrl</kbd>+<kbd>tab</kbd> is not a most recently used list, like in browsers. When it is a MRU list, if <kbd>ctrl</kbd>+`num` opens tab at `num` there are 2 different models for navigating your tabs; most recently used and the order in which they were created. Not sure about other people but trying to use both at the same time would be disorienting for me and slow me down.
26554|I had a look at this and it appears to be an upstream issue, moving to backlog.
26555|@lnicola https://github.com/Microsoft/vscode/pull/7350 is the PR that fixed the bin command.
26556|@bpasero, forgot to contribute the actual configuration option... fixed in #7832. Scenario still needs to be retested.
26557|@Tyriar no, I meant the extra newline in the temporary path.
26558|@NCC1701M does the command not stop on the integrated terminal or the external (system) terminal?
26559|This is a duplicate of https://github.com/Microsoft/vscode/issues/7554, it is somewhat fixed but still needs https://github.com/sourcelair/xterm.js/issues/134 to be looked at for better performance.
26560|@forethoughtde could there be an operating system override that captures <kbd>ctrl</kbd>+<kbd>`</kbd> before it reaches vscode?
26561|No idea on that one
26562|Oh Powershell too? I found Clink completely unusable because of this.
26563|@isidorn Node-ChakraCore is supposed to work with vscode-node-debug adapter as Node-ChakraCore will support the debugging protocol without extensibility.   @roblourens had added a 'back' stepaction to 'continue' command in the vscode-node-debug adapter prototype. https://github.com/roblourens/vscode-node-debug/commit/fdc0ea24d08b5e0213642d048791ce2fd920216d that change needs to be in adapter if UI says stepback.
26564|"@dbaeumer, with Version 1.2.1 installed, I'm getting different behavior, but still seems buggy, and blocks repro.    Starting a fresh project, I create a tasks.json using the template for grunt.   But now when I press Ctrl+Shift+B, I get a message saying ""No build task configured"".   Once the template has been used, pressing the ""Configure Task Runner"" button seems to do nothing.   `tasks.json` currently has:  ``` {     // See https://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format     ""version"": ""0.1.0"",     ""command"": ""grunt"",     ""isShellCommand"": true,     ""tasks"": [] } ```  This may be something wrong with the above, e.g. an empty 'tasks' array.   But to be clear, this is exactly what was generated by my pressing the ""Configure Task Runner"" button and choosing 'grunt'.  Do you want a new bug for this, or should we repurpose this one?  [files.zip](https://github.com/Microsoft/vscode/files/321116/files.zip)"
26565|I do not think so
26566|"Installed for local development but now I can't install the chrome debug extension-- there's no ""`ext install`"" option in the version I run with `./scripts/code.sh`  ![jsonschema-vscode](https://cloud.githubusercontent.com/assets/317498/16161410/593ad1ce-349b-11e6-8397-f2187969161d.gif)"
26567|I'm out of ideas, you might want to just use a different keybinding since you can rebind it without issues. If I was to guess I think something outside of VSCode is swallowing the key event before it reaches the app. Going to close this off for now, please comment if you find out more.
26568|P.S. the root cause of this is that the docs at https://go.microsoft.com/fwlink/?LinkId=733558 are too complex.  I'm really new with node, swamped to too many new concepts and complex dependencies.
26569|Cannot reproduce running vscode via local `./scripts/vscode.sh` debug install 😦
26570|@agarwal-sandeep are you saying that the current VSCode implementation for stepBack functionality is not complete ?
26571|node.exe (Chakracore) needs to know that step back is requested and it is not in debugging protocol so adapter needs to send a different action in continue command and I don't see it in https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/nodeDebug.ts  @roblourens @weinand how will adapter notify the process?
26572|Forgot to contribute the actual configuration option...  fixed in #7832.
26573|It would be great if we could split terminal windows like the editor windows
26574|@orrybaram I created an issue for that and eventually closed it since tools like tmux and screens exist.
26575|@agarwal-sandeep we have implemented the UI as requested in https://github.com/Microsoft/vscode-node-debug/issues/72. Currently the UI can be controlled by a capability returned from the debug adapter. Our assumption was that Chakra would have its own debug adapter and that would enable the capability and implement a 'step back' request. https://github.com/Microsoft/vscode-node-debug/issues/72 did not mention that we have to implement the 'step back' request in vscode-node-debug.  Please create another feature request for vscode-node-debug so that we can enable the capability and implement the 'step back'. For the latter we need to know what the value for the `stepaction`of the `continue` request is.  I see one problem with this feature request: the debug-adapter has to return the 'step-back' capability from the 'initialise' request. But there we do not know whether the used node version supports 'step back' or not. This information is only available when the runtime is launched. But this is too late for returning the capabilities. We can address this sequence problem is the future, but for this release we have to find another way to determine early that chakra is used and supports 'step back'.
26576|@Tyriar rad, i didn't know about those!
26577|I've been working on a PHP code-completion plugin called Crane. It's still in the early stages, but already it's a huge improvement over the built-in intellisense.  https://github.com/HvyIndustries/crane
26578|Hey Tyriar,  That's interesting I have the latest builds, I get them every night. I didn't modify the Default Keyboard Shortcuts file, plus it's readonly.  ![my screenshot](https://s31.postimg.org/f1p5xa8nf/launcher_terminal.jpg)
26579|"I'm keen to help with implementing a fix for this ""bug"" (more of a feature IMHO ;-).  It would be great if we could nail down requirements for this.  My suggestion, based on looking at this ticket's history and some of the linked ones, would be: - By default, suggestion and parameter hints inherit editor fontSize and lineHeight. - If suggest.fontFamily exists, override suggest fontFamily with that value, same for lineHeight. - Same set of overridable values for parameterHints.  I think this should satisfy most people, and not introduce extra granular settings unless someone specifically wants them."
26580|"@WayneKoorts I would think this would be a necessity considering they pushed ""Accessibility"", which this clearly is. Also, I feel it would be easier (and suite more people) if we could control the font Size of the tooltips/IntelliSense separate from the font size / line-height of the editor.  What do you think @joaomoreno?"
26581|"@bgse @weinand Thanks for your update. I managed to get the vscode chrome debuggin method but now though its able to attach to google chrome but am stucked at this error anytime i fire my debug process   ""Failed to load resource: net::ERR_FILE_NOT_FOUND    file:///C:/IONIC2/TRIALS/testblank/www/cordova.js""  ""XMLHttpRequest cannot load file:///C:/IONIC2/TRIALS/testblank/www/build/pages/home/home.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource."",   ""Native: tried calling StatusBar.styleDefault, but Cordova is not available. Make sure to include cordova.js or run in a device/simulator""  where file:///C:/IONIC2/TRIALS/testblank is my {$webspaceRoot}. Any ideas???"
26582|@bpasero I just verified that the fix for this is to add `font-weight:300` to the `.monaco-shell`.  This should fix it for all exiting fonts.  Would you like me to push the change up myself?
26583|"@bgse @weinand Guys, thanks i eventually solved these problems. I stopped all processes running Google Chrome and then from my cmd executed ""C:\Program Files (x86)\Google\Chrome\Application>chrome.exe --remote-debugging-p ort=9222 --allow-file-access-from-files"". Just that now my breakpoints are not hit. If you think you might know why this is hapenning pls let me know otherwise, i will keep googling on it as well."
26584|"Not really a solution, but `""git.autofetch"": false` in your `settings.json` might help."
26585|I can confirm that scrolling works correctly in Chrome on Windows so it should be possible to fix this in VSCode.
26586|OK, now I see, duplicate of: #5840 (#7791)
26587|Setting name changed to `workbench.editor.showTabs`
26588|@jacdavis can you explain where you clicked and got the stable bits? we should fix that.
26589|"@Tyriar well I am not sure we can make people happy without having support for `Ctrl+<Number>` support to open a tab at index. You are quite right that there are different ways of navigating tabs. The complete list is: - `Ctrl+Tab`: navigate in MRU order - `Ctrl+PageUp/Down`: navigate in spatial order across all tabs in all groups - `Ctrl+<Number>`: navigate in spatial order to tab in index in one group  A user is now free to change the keybindings to map `Ctrl+<Number>` back to navigating the index. We did not have these commands before.  Still, with tabs disabled, `Ctrl+<Number>` for focussing tabs in one group does not make so much sense to me because you do not see tabs. On the other hand, if you have ""Opened Editors"" view visible, one could argue that it is useful to be able to open a specific editor from that list with one keybinding."
26590|Great, thanks.
26591|@bgashler1 if you do a PR I can have a look at it. Thanks.
26592|"This is not the extension host process staying around, but a process spawned from the extension host that does not terminate. I just had this issue again and noticed 2 ts-server processes running even though no other VS Code was running (+ many git processes which I think @joaomoreno fixed recently).  <img width=""1572"" alt=""screen shot 2016-06-18 at 08 38 06"" src=""https://cloud.githubusercontent.com/assets/900690/16169477/783b5e5a-3530-11e6-9b47-c6a8f886bdde.png"">  After killing the ts-server process, things worked again in terms of debugging.  @dbaeumer does the ts-server have protection to terminate itself when its parent dies?"
26593|@reactivize It appears to be the https://github.com/ilich/vscode-launcher extension causing the conflict.
26594|"@BurtHarris Give it some time to get familiarized with all the ""new"" tooling. I get frustrated too some times but acquiring knowledge takes time, unfortunately."
26595|Good catch Tyriar, I guess the take-home lesson here is that an installed extension may cause unintended behavioral changes by overriding existing IDE shortcuts.
26596|@reactivize in the future you can run `code --disable-extensions` to help prevent this sort of confusion :)
26597|@maxshutyak, Today I will add an extension that solves this problem.  Update: try this extension: https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-emmet-fix
26598|+1 looking forward to get the full Javascript solution of vscode. This is exciting!
26599|"@aeschli Could you please re-consider? I'm working on a linting extension that supports both `sass` and `scss` syntax, and I'd like to do something like:  ``` json   ""activationEvents"": [     ""onLanguage:sass"",     ""onLanguage:sass-indented""   ] ```"
26600|Duplicate of #1477.
