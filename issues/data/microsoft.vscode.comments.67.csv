6601|@weinand the current issue under investigation is #2054.
6602|@DelvarWorld we are moving from running language services in web workers into separate processes. I've checked and there we indicate the state when the server crashes to the user (also support to restart).  Given the move of the JS webworker into a server, we will no longer invest a lot into the webworker based language services.
6603|@egamma since you seem to oversee the individual issues behind this feature request, I'll assign it to you.
6604|@bpasero you are totally right, I am beginning to think I dreamed up the behaviour I initially described. But in looking at the code I am wondering if it wouldn't be too difficult to enhance the minimized editors concept. I can see in [sideBySideEditorControl.ts](https://github.com/Microsoft/vscode/blob/f44a183bd5cb6510ad668fa5a3fc963eabd02973/src/vs/workbench/browser/parts/editor/sideBySideEditorControl.ts) that MIN_EDITOR_WIDTH = 170.   Maybe it would be nice to be able to adjust this setting in settings.json? So on larger displays minimized editors could be more useful as open references for the editor you have in focus? Perhaps the MIN_EDITOR_WIDTH could be a percentage rather than a fixed value?   I know this is a non-issue for many people so I understand if there are way more important features/improvements that need attention, but I have been thinking about how useful minimized editors could be if there was a little bit more control over them. Either way, thanks for replying to my previous posts.
6605|Same issue here with GitHub account. Credentials work fine with cmd / TortoiseGit. VS Code fails. Installed VS code just today on Win 10 Home.
6606|@larsw i cannot reproduce, I have a Window docked to the left and open a file in there and the window remains stable.
6607|Colleague of mine can reproduce;  Dock VS Code to the right and dock another application to the left. Open file... and choose an arbitrary file. VS Code restores its original position. (Same thing happens if you dock it vice versa).
6608|Many Thanks @joaomoreno ! That was it! Finally i can download extensions!!!!
6609|I really need this encoding type too. Is it planned in a future release?
6610|We can add a `~/.vscode/extensions/.obsolete` file indicating which extensions should be gone. We shouldn't load an extension listed in there. We should try to delete them at startup.
6611|"I just installed version 0.10.6, commit a80232bb, and parameters are still gray. Does commit a80232bb contain this fix?  I opened tokens.css in C:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\languages\markdown\common and searched for "".token.meta.parameter"", and it's not there, so it seems the fix is in this commit, but the monokai theme is still broken."
6612|npm was in better shape today and I could run `npm install`.   After the `npm install` I can reproduce the crash: - start code - open `src/containers/Game/game.js`.  Here is a **work around**. Move the `jsconfig.json` into the `src` folder.  The `jsconfig.json` file defines the root of a JS project and you can have more than one project context inside a workspace. I don't understand your source structure well enough yet, whether there should be another `jsconfig.json` inside another folder.  There is still a bug. I speculate that a top-level JS file refers to as JS file in a node module which results in a loop in the import graph, that makes the ImportAndExportRewriter recurse. We will replace the entire JS infrastructure with Salsa (see Microsoft/TypeScript#4789) (preview Jan, default Feb). We will investigate whether it is worthwhile to fix this issue in the soon to be deprecated code base.   We will add more guidance on where to put the jsconfig.json to the doc (microsoft/vscode-docs#119).  On a topic unrelated to this issue. I notice, that you do not add any typings files `*.d.ts` files to get Intellisense for libraries like React. This is documented here https://code.visualstudio.com/docs/languages/javascript#_intellisense-support.
6613|Thanks Rob!
6614|I'm not sure when it disappeared, but I no longer have the issue on OS X with Keyboard Maestro.  But I still have the same issue on Windows with AutoHotkey.
6615|Hello, I have kind of the same problem with formatting javascript: Nothing happens if I format it.  How can I add a project.json file or set a csproj/sln file so that formatting works. (as a suggestion: would be great if you wouldn't need to create files to format code)
6616|"@BleyChen Please run ""npm install"" from the scripts folder, e.g. `./scripts/npm install`"
6617|Let's track this in #313
6618|I was seeing something similar when having a network share mapped as a drive and switching networks (mapped drive not available -- hostname cannot be resolved). But the open dialog was showing late on every application on Windows.
6619|I was doing the extra JSON stringify/parse intentionally back when the extension host was using electron's IPC which had bugs around serializing the same object twice. e.g.:  ``` var obj1 = { hello: 'world' } var arr = [obj1, obj1]; ```  it would arrive on the other side as `[obj1, null]`.  But I think this is no longer mandatory given @bpasero 's refactoring it to a forked process.
6620|@madcampos I am not sure I've seen this, can you please give a more detailed description. Would this action do exactly what a `Ctrl+C` followed by a `Ctrl+V` would do?
6621|OS behavior.
6622|@lcrespom  0.10.6 is the December release. You will see this in the January release due January 29. See https://github.com/Microsoft/vscode/issues/1826
6623|yeah, actually TypeScript provides a non-clever `sortText` breaking this...
6624|Duplicate of #1969
6625|I tried the workaround from @aeschli, restarted Code, but still keywords like `yield` are not highlighted. This is 0.10.6 on Ubuntu.
6626|Thank you, I eagerly wait for that release :-)
6627|@FaicSilier JavaScript is independent of that. If you see issue with formatting JS please file a separate bug
6628|"I've tried to reproduce the problem in VS Code 0.10.6 (but couldn't). Here is what worked for me (on OS X).  From a command line:  ``` bash git clone https://github.com/atom/electron-quick-start cd electron-quick-start npm install ./node_modules/electron-prebuilt/dist/Electron.app/Contents/MacOS/Electron --debug-brk main.js ```  My VS Code launch config looks like this:  ``` json {     ""name"": ""Attach"",     ""type"": ""node"",     ""request"": ""attach"",     ""port"": 5858 } ```  Then I set a breakpoint in main.js:18 and and started the ""Attach"" session. I first stopped in init.js:1 and after a single ""continue"" I hit the breakpoint in main.js.  **Please note:** I'm starting electron with ""--debug-brk"" to make sure that breakpoints in startup code get properly registered. When starting electron with ""--debug""only, it will run over the main.js code before VS Code has a chance to register the breakpoint in main.js.  BTW, here is the ""launch"" config for electron:  ``` json {     ""name"": ""Launch"",     ""type"": ""node"",     ""request"": ""launch"",     ""program"": ""${workspaceRoot}/main.js"",     ""stopOnEntry"": false,     ""args"": [],     ""cwd"": ""${workspaceRoot}"",     ""runtimeExecutable"": ""${workspaceRoot}/node_modules/electron-prebuilt/dist/Electron.app/Contents/MacOS/Electron"",     ""runtimeArgs"": [         ""--nolazy""     ],     ""env"": {         ""NODE_ENV"": ""development""     } } ```  Here it is not necessary to set `stopOnEntry` to true in order to get the breakpoint in main.js hit because VS Code behind the scenes always launches the debugger with ""--debug-brk""."
6629|@othebe That is really horrible! It should really not be like that. To help me track the root cause, would you please be willing to do the following: - `F1` > `Developer: Toggle Developer Tools` - Go to the `Profiles` tab - Choose `Collect JavaScript CPU Profile` - Target: `Main` > `Start` - type in the editor (basically what you do in the above video) - Hit `Stop` - Next to Profile 1 hit `Save` - Share the file with me  Here is me doing it: ![cpu-profiling](https://cloud.githubusercontent.com/assets/5047891/12416392/efa94478-bea9-11e5-98d7-0b8bb7ab56fd.gif)
6630|@konrad-garus `yield` is still not colored due to bug https://github.com/Microsoft/TypeScript-TmLanguage/issues/29
6631|"If breakpoints in your startup code are not hit in ""attach"" mode, but they work in ""launch"" mode please try to start your target with the ""--debug-brk"" option instead of the ""--debug"" option.  The ""--debug-brk"" option makes sure that the target stops on entry and that VS Code gets a chance to  properly register the breakpoints. When starting with ""--debug"" only, the debugger runs over the startup code before VS Code has a chance to register the breakpoints.  In ""launch"" mode it is not necessary to set `stopOnEntry` to true in order to get the breakpoint in startup code hit because VS Code behind the scenes always launches the debugger with ""--debug-brk"" (but hides the break on entry event to the user)."
6632|@bartvanderwal I've created this feature-request for the automatic reattach:  https://github.com/Microsoft/vscode/issues/2103
6633|@larsw any chance for a video of this? I still cannot reproduce.
6634|That looks great @weinand! I'll try it out shortly.
6635|Looks like this is caused by a malformed git.path when using cygwin's git.  Disabling git integration causes this error to disappear.
6636|@joaomoreno fyi
6637|Code doesn't support cygwin git. Either install [Git for Windows](https://git-scm.com/download/win) or disable git integration.
6638|"I did exactly what you said and it's still not working. The debugger stop on the first line but never stop on any breakpoint after hitting ""Continue"". The only difference with you that i can see is that i'm on Windows 7."
6639|@lpproulx what exact command are you using to launch electron in debug mode?
6640|"I'm not using electron. I have a simple http server starting an express app. I'm using nodemon with this command: ""nodemon --debug-brk"".  I also tried with a more traditional ""node local.js --debug-brk"".  What is strange is that the same command was working fine in 0.10.3.   Edited: I don't know if it can make a difference but i'm using node v4.2.3"
6641|@lpproulx what version of node are you using?
6642|4.2.3
6643|"@lpproulx and if you try to ""launch"" your express app from VS Code instead of ""attach"" does it make a difference?"
6644|"Yes it's working fine with the ""launch"" config"
6645|"@simonvizzini Thank you for filing! This is definitely a new kind of blurry I haven't seen before. I think it is caused because the font gives the arrow character we use to render leading whitespace (`→`) a width of `15.0313px`, while all other characters get a width of `7px` and because this font is so ""thin"". Perhaps the font doesn't even contain the arrow (`→`) and an arrow from a fallback font is used.  This makes `HelloWorld` sit at different offsets depending on the number of tabs: - line with 1 tab: `36.0313px` - line with 2 tabs: `72.0625px` - line with 3 tabs: `108.094px` - line with 4 tabs: `144.125px` - etc.  These non-round numbers causes the text to be mis-aligned w.r.t. actual screen pixels. Chromium correctly uses screen pixels antialising, but of course it uses different shades as the text becomes more and more mis-aligned, until the text is aligned again. This theory is backed by the fact that one point the text ""feels"" sharp again, as lines get more and more indentation:  ![image](https://cloud.githubusercontent.com/assets/5047891/12420229/1127b19c-bec4-11e5-81e5-a5d601896309.png)  Here is the zoomed in transition at 4 tabs: ![image](https://cloud.githubusercontent.com/assets/5047891/12420385/fc7790e0-bec4-11e5-876a-b9c071271594.png)  And the zoomed in transition at 20 tabs: ![image](https://cloud.githubusercontent.com/assets/5047891/12420415/1f0a26c2-bec5-11e5-8e7d-d5e5dad7cc16.png)  The only thing I can imagine us doing on our side is to render the arrow (`→`) on top or behind the actual text to prevent such mis-alignments.  For now, the only workarounds are to disable `editor.renderWhitespace` or change the font family settings to force Chrome to fall back to a different font for the arrow (`→`). I have tried the following and could notice an improvement in the font rendering, but the arrow becomes more blurry:  ``` ""editor.fontFamily"": ""ProggyCleanTT, Arial"" ```  This gives each tab indent a width of `37px`:  ![image](https://cloud.githubusercontent.com/assets/5047891/12420499/b0a10254-bec5-11e5-941d-e5d11fd4b555.png)"
6646|I reinstalled the 0.10.3 version and attach seem to be working fine
6647|this is actually because of #2107
6648|to reproduce: - set a breakpoint in the unhandledRejection [handler](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/node/pluginHostProcess.ts#L50) - execute the snippet(*) below in an extension (as command for instance)  when it breaks `promise` is shown as undefined  *snippet  ```       const rejectedPromise = new Promise((resolve, reject) => {             reject('foo');         });          setTimeout(() => {             rejectedPromise.catch(() => {                 console.log('handing error now');             });         }, 2000);  ```
6649|@jrieken this is a limitation of the node v8 debugging protocol. **node-inspector** shows the same behavior: ![2016-01-19 15-29-08](https://cloud.githubusercontent.com/assets/1898161/12421280/be86cbf0-bec1-11e5-91a9-1e4f696642fa.png)
6650|@lpproulx I can reproduce this problem on Windows 7. I don't know yet what the culprit is, but I've already verified that it will be fixed in the upcoming January drop.
6651|thank you!
6652|It seems to recurse forever here `/some-game/static/dist/main-9b9280d716fd487e103f.js@1096`
6653|The expression at that offset is so long and complex (~450.000 characters) that we shouldn't use recursion.
6654|+1.  I guess this is Salsa? https://github.com/Microsoft/TypeScript/issues/4789
6655|This isn't the behavior I experience. When I run Code from the command line, it always opens a new window, at least using the recommended way to start it from the command line on Mac OS X.
6656|I can make the `ImportExportRewriter` not use recursion anymore (while-loop ftw) but then the TypeScript compiler runs into the same issue during type binding. Once we have adopted project [Salsa](TypeScript#4789) it will be good again because in recent version of TS this is fixed.  @DelvarWorld A different workaround is to also exclude `static/dist` from `jsconfig.json`.
6657|Yes - that Salsa it is. We plan to ship the Jan release with a sneak peak of it and make it GA for Feb
6658|Maybe file a separate issue for this if you think it is a bug.
6659|There was an open issue for it (#159), which you closed for being a duplicate of this one...
6660|As noted in #167, I don't believe this is a duplicate and suggest to reopen it.
6661|Well this is about Windows 10
6662|@elad please explain exactly what you see going on and think is wrong
6663|Right. Issue #159 is a cross-platform issue that happened to be reported on Windows 7. You closed it as a duplicate of this one, which you say is for Windows 10. I'm sure you can see the inconsistency here.
6664|@alexandrudima I am not feeling comfortable making any changes to marshalling.ts, I did not touch this when I created the forked process. please go ahead and see what happens when you just take out the serialization.
6665|"The issue title is more generic than the issue description.  Basically, I want Code to behave exactly like Sublime. If I have an open window, and I type in the command line ""code file,"" I want the existing Code window to be brought to the front and the file opened in it. Right now, it always opens a new window."
6666|@elad this issue is a general issue on Windows, I would expect it to happen in 7 and 8 too.
6667|@elad try `window.openFilesInNewWindow: false` in settings.
6668|Thanks for this, sorry for the delay.
6669|Hi **@EgorMatirov**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
6670|I'll take on the challenge
6671|Very cool to fix the ordering and I like the download image.  However I prefer having the version number right after the extension name.  How about we move the version number back to the left and put the download count and image below the author on the right.  The download could be hidden when the extension has focus and the README and download button are visible.
6672|"Hey, I ran it with `code --disableExtensions` then I am not seeing that error, but if I start with `./code` then I see the error again.     $ ./Code      Gtk-Message: Failed to load module ""pantheon-filechooser-module""     Gtk-Message: Failed to load module ""canberra-gtk-module""     bash: cannot set terminal process group (-1): Inappropriate ioctl for device     bash: no job control in this shell  I don't see the spawn error printed on the commandline `Error: Error: spawn EACCES` ![screenshot from 2016-01-19 23 04 43](https://cloud.githubusercontent.com/assets/6261877/12426702/0b82e350-bf01-11e5-96df-d420263c72a3.png)"
6673|Those are good suggestions. It does make sense to have the version number next to the product name.
6674|Related https://github.com/Microsoft/vscode/issues/1749 (horizontal editor splitting)
6675|Sounds good to me. Thanks
6676|Looking forward to test it ;)
6677|"@alexandrudima if there is text selected, yes, it behaves just like a `Ctrl+C` followed by a `Ctrl+V` at the text cursor's position, if there is no text selected it duplicates the whole line, like `copyLinesDownAction`. For example the [Brackets](http://brackets.io/) shortcut for this is `Ctrl+D`. Atom offers just the `copyLinesDownAction` behavior with the `Ctl+Shift+D` shortcut.  As an example:  > this line of text|  After the action has taken turns to:  > this line of text| > this line of text  The selection (represented by bold):  > this **line**| of text  After the action becomes:  > this **line**|line of text"
6678|I experience this too on only one of my Ubuntu machines. Not sure what causes it, but it happens on Atom?  The work around until this is fixed is to launch via command line:  ``` bash cd my-project Code . ```  The machine in question happens to be Ubuntu 12.04 LTS as well, so maybe it's an Ubuntu or Electron bug?
6679|I just hit this same issue.  This is due to NPMv3 not installing peer dependencies by default, which gulp-tslint uses to install tslint itself. See https://github.com/panuhorsmalahti/gulp-tslint/blob/master/package.json#L40 . Another example of this breaking a project is at https://github.com/yeoman/yeoman/issues/1488 .  If you take a direct dependency on tslint and typescript, then this seems to work with NPMv3 (tslint itself has typescript as a peer dependency also :confused: ).
6680|Thanks! :) First search result pointed to this issue, so I thought it wasn't implemented yet. Sorry for the noise!
6681|Sorry for the noise, my bad!
6682|Thanks @jrieken and @egamma, adding `static/dist` to ignore looks like it gives me a little bit of intellisense, however...  Because most of my files use the [ES7 spread operator](https://github.com/Microsoft/TypeScript/issues/2103), it now thinks that my entire file is in error. Unfortunately, every time I find a workaround to a show-stopping bug in vscode (of which there have been many), I hit another. I can no longer afford time contributing to this project. Good luck!
6683|Duplicate of Microsoft/vsce#52
6684|@gregvanl Can you file an issue for milestone January so I have this under my radar?
6685|I created an Atom issue for this a few months ago, no attention though https://github.com/atom/atom/issues/9320
6686|:icecream:
6687|Keywords like function, let, const, var are colored wrong (like interfaces/classes) in latest update in JS files. TS files are not affected. This is so ugly I wish it was possible to revert extension versions xD  ![image](https://cloud.githubusercontent.com/assets/10532611/12435392/9015b000-bf0d-11e5-8836-d7b2d786b5e1.png)
6688|This is definitely an improvement! In JS, however, when declaring multiple var's, only the first one is colorized (`testSource` in the example below):  ![image](https://cloud.githubusercontent.com/assets/8230981/12436299/dbe33a88-bec8-11e5-833a-6f34dfbe45be.png)
6689|@jrieken  I open a solution. but  it didn't work。is vscode support c# format ?
6690|Hi **@f111fei**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
6691|@thewhitetulip this indicates one of your extensions is causing this error, can you find out which one and please report it to the extension writer.
6692|:+1:
6693|http://g.recordit.co/fow5Wti7dt.gif
6694|Maybe this should be reported to Electron instead.
6695|"@larsw thanks, this is weird :|"
6696|@Tyriar well the process you are showing is our file watching service and on Linux/Mac we use Chokidar for it (https://github.com/paulmillr/chokidar). This would indicate that they have a leak when watching files. Is there some build task constantly running and changing files?  @gushie was this without opening a folder?
6697|"I found so many useful vscode base and common classes to use in my projects.  Tried to compile using ES6 module type (to provide to webpack & babel). Here is what TS complains about require style module imports (thousands of lines). `error TS1202: Import assignment cannot be used when targeting ECMAScript 6 modules. Consider using 'import * as ns from ""mod""', 'import {a} from ""mod""', 'import d from ""mod""', or another module format instead.`  PR compiles with no issues to any TS module type and the most important thing is that when module type is `amd` output is %100 identical."
6698|> Tried to compile using ES6 module type   I'm really sorry but this is not a scenario that is currently high on our backlog. We will not get to investigate into using ES6 module types in the next couple of iterations.
6699|Weird, and damn annoying. Let me know if there's any config/diagnostic dump I should append to this issue.
6700|It might be worth mentioning that I use the new Virtual Desktop feature in Windows 10; E.g. I've created an additional desktop by first flipping up the applications with Win-Tab, and on that screen, I've added an extra desktop that hosts some of the applications.
