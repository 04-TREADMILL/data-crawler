11901|@Tyriar that makes a lot more sense to me compared to having a fixed timeout :)
11902|Even more interesting would be in that mode to maybe not push the editor to the right, but rather overlay the contents, since it is getting dismissed quickly after when moving focus out.
11903|No they should not!
11904|where in the source is this set? perhaps i can change it, or even add it to the prefs?
11905|From the install script, it seems like if I put the `*` it'll download latest from master so it'll avoid this querying for releases which might also prevent this rate limiting issue.  I've added the `GITHUB_TOKEN`, but curious as to not using an existing framework (`typings`/`tsd`) to grab the typings file.  Don't mind me -- consider this resolved/closed.
11906|@msg7086 Im not sure about point one but for point two could you not `ctrl + p` and then type `.md` leaving you with the two options and then just `ctrl + tab` to choose the one you want? Not sure i am understand the issue correctly
11907|I'm assuming @Tyriar that you're referring to the production VS Code, not just the Dev _about box_.  We could definitely improve on the look of this.  I would be in favor of sticking with a native dialogue but putting HTML in it, if that's possible (or any other means that would allow us to style it nicer).  I'll work on some mockups here.
11908|That's right. Maybe I have badly explained.
11909|Just looking through the code, this best approach seems to be using the existing `SystemVariables` (or extracting its functionality) class since  `SystemVariables::resolve` takes a string and substitutes in environment variables for any `${VAR}` occurrences (see `AbstractSystemVariables::__resolveString`).  Another approach may be to update `newConfigFile()` from `platform/configuration/model.ts` to resolve the environment variables when setting the config values, but this would not pick up changes to environment variables after the config is saved.
11910|"Indeed. Maybe borrow some colors from the TypeScript syntax highlight.  <img width=""592"" alt=""screen shot 2016-03-07 at 17 25 54"" src=""https://cloud.githubusercontent.com/assets/3427344/13582204/c8dda5fe-e489-11e5-9be2-61f56c1cf8d7.png"">"
11911|"There's still some broken things with PHP 7, like type hinting (`function xxxx(): array {}`) and null coalescing operator, as shown below:  <img width=""428"" alt=""screen shot 2016-03-07 at 17 31 08"" src=""https://cloud.githubusercontent.com/assets/3427344/13582302/69562376-e48a-11e5-9301-32d6f704b62b.png"">"
11912|@rkirov FYI
11913|@Pajn the setup in your description is supported and is also a setup we use in the VS Code source code https://github.com/Microsoft/vscode. What makes you believe that this isn't supported?
11914|Before when I opened the complete project I got errors on for example async/await that I must target ES6 to use it, which we are. However those were gone when I opened sub-projects so the tsconfig.json i in the root. However, when I open it now it seems to work so I can't really say what happened before :/  Feel free to ignore that, if I see it again I will try to track it down better. Should I close this and open a new issue for the feature request in the comment?
11915|I'll close this one, pls reopen if you run into the behavour you described above again.  Please open a separate issue against microsoft/typescript about the go-to definition behaviour mentioned above. The TypeScript language server implements the go-to-definition behaviour.
11916|Great to see this feature!! Thanks
11917|@4tron Thanks for the reply. However, your method only works if I have only 2 files with that type. In reality people will probably be working with bunch of those files in a single directory. Imaging I'm writing a blog that has 50 posts in markdown format, with different characters in Chinese or Korean or Arabian etc as the file names. The real scenario I was hitting was actually some subtitle files with CJK names, where all of them are `*.ass`, thus Ctrl+P by extension doesn't work quite well.
11918|+1
11919|"This is likely because you're on the (Visual Studio) version of the theme, try changing the theme to the new defaults Light+ or Dark+ (or another theme): - <kbd>F1</kbd> - Type ""theme"" - <kbd>enter</kbd> - Select another theme  Reopen this issue if that doesn't fix your issue."
11920|I had some busy weeks at work, so I didn't have much of a spirit to develop the prototype any further yet. Maybe I'll find some hours this week to make a version that would be worth a release. I will let you know when I continue work on this.
11921|"@bpasero hitting breakpoints in TypeScript test just works fine. The problem is with the tests in `service.test.ts`. They both create a server listening on the same port which results in EADDRINUSE error you are showing above. This prevents your `fileService.test.ts` to run.  If I uncomment the 'createService' test in `service.test.ts` the breakpoint in `fileService.test.ts#421` is hit.  It helps to let Mocha show what test are running by adding something like ""-R"", ""spec""."
11922|Is there any update on this, https://github.com/Microsoft/TypeScript/issues/4789 has been fixed.
11923|@jpierson please let me know if you have more info and I will reopen this issue.
11924|No info after 7 days -> closing.
11925|After update to latest version of VSCode (0.10.10) i found that folding doesn't work for recommended C# comment tags. ( https://msdn.microsoft.com/en-us/library/5ast78ax.aspx )
11926|"Just looking into this bug a little, it looks like some languages (css, php, html) are correctly syntax highlighted in the preview, while most others are not:  <img width=""1098"" alt=""screen shot 2016-03-07 at 3 13 57 pm"" src=""https://cloud.githubusercontent.com/assets/12821956/13586683/50f16844-e477-11e5-8da0-46fb1fab9378.png"">  Syntax highlighting in the preview and the editor also do not always match. For example, php gets highlighted in the preview but not the editor, and python gets highlighted in the editor but not the preview (this may be expected behavior)."
11927|Really appreciate if this can be implemented
11928|Here are some first-pass ideas...  The gray squares would be the GitHub profile photos of our contributors. ![vs-code-about-box](https://cloud.githubusercontent.com/assets/11839736/13587497/92af25f4-e47d-11e5-889d-4181574b664a.gif) ![vs-code-about-box-dark-02](https://cloud.githubusercontent.com/assets/11839736/13587498/92af581c-e47d-11e5-822b-5111a09ca8a3.gif)
11929|I had a quick look. The css for current-line includes both background and a border. tmTheme files have control over the background color via lineHighlight. There appears to be no way to control the border width or color.   Base css is in src/vs/editor/browser/widget/media/editor.css  Monokai which is based on vs-dark:  ``` Monokai-tmTheme .current-line {     background-color: rgba(62, 61, 50, 1); } .monaco-editor.vs-dark .current-line {     background: none;     border: 2px solid #282828;     box-sizing: border-box; } ```  Border might be important for high-contrast based themes, but maybe it can be set to none for the others.
11930|"+1 Same here...  ![image](https://cloud.githubusercontent.com/assets/3085122/13589623/0fa8b2fe-e48e-11e5-9b1d-766b04d5abf3.png)  ![image](https://cloud.githubusercontent.com/assets/3085122/13589637/3c18c2de-e48e-11e5-8eb0-b6754882f981.png)  `{     ""version"": ""0.1.0"",     // ""debugServer"": ""4712"",     ""configurations"": [         {             ""name"": ""test chrome"",             ""type"": ""chrome"",             ""request"": ""launch"",             ""url"": ""http://localhost:8080/index.html"",             ""sourceMaps"": true,             ""diagnosticLogging"": true,             ""webRoot"": ""wwwroot""         },         {             ""name"": ""launch for file"",             ""type"": ""chrome"",             ""request"": ""launch"",             ""file"": ""wwwroot/index.html"",             ""sourceMaps"": true,             ""diagnosticLogging"": true,             ""webRoot"": ""wwwroot/out/client with space""         },         {             ""name"": ""attach to chrome"",             ""type"": ""chrome"",             ""port"": 9222,             ""request"": ""attach"",             ""sourceMaps"": true,             ""diagnosticLogging"": true,             ""webRoot"": ""./wwwroot""         }     ] } `  Stack from developer tools:  `messageService.ts:147 [webkit-debug-adapter] Path must be a string. Received undefined: Error: [webkit-debug-adapter] Path must be a string. Received undefined     at Object.E [as create] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:27:15793)     at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:98:24744     at Object.p [as _notify] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:17245)     at Object.n.undefined.F.enter (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:20573)     at n.undefined.t.Class.define._run (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:21894)     at n.undefined.t.Class.define._chainedError (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:21253)     at n (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:19081)     at Object.p [as _notify] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:17245)     at Object.n.undefined.F.enter (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:20573)     at n.undefined.t.Class.define._run (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:21894)e.doShow @ messageService.ts:147e.show @ messageService.ts:131(anonymous function) @ compositePart.ts:294e._emitToSpecificTypeListeners @ eventEmitter.ts:241e._emitEvents @ eventEmitter.ts:267e.emit @ eventEmitter.ts:285(anonymous function) @ actions.ts:288p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012n.undefined.t.Class.define.then @ winjs.base.raw.js:1694n.undefined.O.enter @ winjs.base.raw.js:1023n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._setCompleteValue @ winjs.base.raw.js:1327p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._chainedError @ winjs.base.raw.js:1306n @ winjs.base.raw.js:1012n.undefined.t.Class.define.then @ winjs.base.raw.js:1694n.undefined.O.enter @ winjs.base.raw.js:1023n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._setCompleteValue @ winjs.base.raw.js:1327p @ winjs.base.raw.js:1470n.undefined.F.enter @ winjs.base.raw.js:1176n.undefined.t.Class.define._run @ winjs.base.raw.js:1343n.undefined.t.Class.define._error @ winjs.base.raw.js:1316(anonymous function) @ v8Protocol.ts:79t.dispatch @ v8Protocol.ts:147t.handleData @ v8Protocol.ts:114(anonymous function) @ v8Protocol.ts:69emitOne @ events.js:77emit @ events.js:169readableAddChunk @ _stream_readable.js:146Readable.push @ _stream_readable.js:110onread @ net.js:523`"
11931|I want it too, if can add settings to make the folding icon always visible?
11932|Just now, I try to update electron to `0.36.10`. It seems to work fine. How to conduct a comprehensive test? @bgse   ``` Version 0.10.10 Commit 97d4ad1c55a82369f65078406ed770e8a34055fc Date 2016-03-07T21:55:23.885Z Shell 0.36.10 Renderer 47.0.2526.110 Node 5.1.1 ```  https://copr.fedorainfracloud.org/coprs/mosquito/vscode/build/166475/
11933|"I remove follows content from product.json. It work fine. Where can I find the manual for these parameters?  ``` ""extensionsGallery"": {     ""serviceUrl"": ""https://marketplace.visualstudio.com/_apis/public/gallery"",     ""itemUrl"": ""https://marketplace.visualstudio.com/items"" }, ```"
11934|very nice :+1:
11935|same for me
11936|Developers are used to with it, please make this a **priority**.
11937|"According to the [release notes](https://code.visualstudio.com/Updates):  > The folding regions are evaluated solely based on the indentation of each line. This first version does not yet support language agnostic folding regions, or folding markers. This is in discussion for an upcoming release (see issue #3422).  So for now I'd say for now it ""intended"" behavior."
11938|Looks cool :+1:
11939|https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/history/browser/history.ts#L29
11940|Yes, we have some inconsistency. Plan to fix this when markdown gets moved to its own extension.
11941|+1 for tabs. Please implement tabs.
11942|+1. Not sure if this can be solved by theming. But if not, then definitely something the team should look at
11943|This error shows up on `.ts` files just now after VSCode update to 0.10.10  Update: On a specific project. Looking into why.
11944|"I have the same issue, intellisense seems to be completely missing as of 0.10.10 in javascript files. I tried introducing a skeleton jsconfig.json file:  {     ""compilerOptions"": {         ""target"": ""ES6"",         ""module"": ""commonjs""     } }  This doesn't help. I'm also using typings from tsd.  For reference, I tried the exact same setup but changed my file to .ts and tsconfig.json and intellisense worked properly as before the update."
11945|@ronnieoverby @TheLevenCreations if you could share your workspace with me for me to reproduce? I analysed the attached dumps and they indicate an out of memory situation.
11946|@weinand thanks! I disable the test now when run from within VS Code and now all tests run to the end and can be debugged.
11947|I uninstalled extension and reinstalled, same thing. Version 0.10.10 seems to break something
11948|~~Same as https://github.com/Microsoft/vscode/issues/3484?~~  Complement to https://github.com/Microsoft/vscode/issues/3484.  This behavior should apply if the cursor has moved.
11949|Thanks for the 0.10.10 release and a better wrapped command line, but this feature is still missing which of course means it is not possible to use VSCode as an editor for command line git and I am afraid, no matter how much you try, you can't break me of my love of the command line!
11950|Yep got the same problem!  EDIT: Same with Light (Visual Studio)
11951|cc @egamma
11952|Yeah I keep trying to double check that my code doesn't have extra spaces. It's mildly irritating. Before the text was close enough to the line numbers that it was obvious where the code area was.
11953|Fixed.
11954|> I find ctrl+shift+c is doing the job ok for now (minus the part that I cant choose which terminal program it launches)  @pflannery That's a problem too, and I think it should be solved in first place. In Xfce there is no `gnome-terminal`, and I could be probably using better terminals even on Windows/OSX (hypothetically), so having a config option to select which terminal I want to launch would be good enough for me. Built-in terminal = reinventing the wheel.
11955|@sarbbottam yes, Code is now using Salsa. Currently Salsa still requires that you install .d.ts files.  @abhilashsajeev Once you do `tsd install express node` then you get nice Intellisense:  ![image](https://cloud.githubusercontent.com/assets/172399/13596087/6eb5374a-e510-11e5-97f6-fe3ff418f4f7.png)
11956|@drywolf thanks for the update, please no stress, I was just curious.
11957|@MingningShao Root directory has no read permissions for non-root users, it means that symlink won't work. I suggest to unpack it into `/opt` directory instead.
11958|@zersiax we are currently investigating into making auto complete accessiblity aware.
11959|@bpasero can you add how such an error now looks like. Makes me wonder whether the error comes from tslint or from ts. We now show the source of the error in the prefix, e.g., `[tslint] message`.
11960|"One of those inconsistencies is PHP only working when there is an open tag. It's not required for markdown highlighting:  ``` php // Does not have ""<?php"" tag. if (1 + 2) {   $x = 3; } ```"
11961|Thanks @egamma. Is there no way to get intellisense with out `tsd` files? If I have to depend on `tsd` I did not require `salsa`. Not sure what benefit `salsa` has brought with this regard.
11962|>  a variable missing in the variables view is a clear enough signal for the developer to check his outgoing variables response imho  @isidorn I think it is not clear if an object has many properties, such as more than 100 properties.
11963|// Offtopic [tsd](https://github.com/DefinitelyTyped/tsd) is deprecated in favor of [typings](https://github.com/typings/typings).
11964|My issue seems to be related to this as well. [https://github.com/Microsoft/vscode/issues/3813](https://github.com/Microsoft/vscode/issues/3813)
11965|@SamVerschueren correct, and we have already updated our docs.
11966|I have same problem. Javascript intellisense stopped working after update in HTML files. In javascript files it's working fine
11967|@egamma nice :+1:
11968|@konrad147 Yours is expected behavior. From the patch notes: There is no longer support for IntelliSense in script sections inside HTML documents.
11969|I hope something good happens here. cause the way things are going. pretty much saying microsoft has lost all control of windows
11970|Not sure if you fixed or created an issue for it.
11971|"VS Code has been updates to v0.10.10 but there is still the same behaviour.  After reflection, I figured out that VS Code was not able to map remote files to those of the Explorer view. I investigated the vscode-debug-node project and I have found the localRoot and remoteRoot parameters of attach configuration: [https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/nodeDebug.ts#L146](url)  And there is a short description about them on January release page, below ""Remote Debugging"": [https://code.visualstudio.com/updates/vJanuary#_nodejs-debugging](url)  These 2 parameters fix the issue. Here is a launch.json configuration sample:  ``` json {     ""name"": ""Attach to my.remote.linux.box"",     ""type"": ""node"",     ""request"": ""attach"",     ""address"": ""my.remote.linux.box"",     ""port"": 5858,     ""localRoot"": ""${workspaceRoot}"",     ""remoteRoot"": ""/path/to/project/root/on/remote/host"" } ```  I hope this can help."
11972|I see some issue here 1. Create two new files test1, test2 with some simple content  2. select them for comparison and change the language to javascript 3. notice that the language changed for only one for them (which might be fine) but you show that language indicator no matter what diff editor is focused - which is confusing 4. it is also a bit cryptic which file will get the mode changed once you change it in the diff view
11973|@sarbbottam   > Thanks @egamma. Is there no way to get intellisense with out tsd files?  Pls see https://code.visualstudio.com/Updates#_languages-javascript for scenarios where you do not need `.d.ts` files, but the type information that isn't in JS has to come from somewhere, e.g. JSDoc comments.
11974|I think the real issue is that 24x7 IntelliSense shouldn't be active in all cases, esp when a 'smart' completion provider is there but didn't produce a result. In such cases the textual provider should only become active if explicitly invoked (Cmd+Space).
11975|"I'm writing [debugger](https://github.com/rebornix/vscode-ruby) for ruby and using the same `Run Test` config as Mock Debug as below  ``` {     ""name"": ""Run Tests"",     ""type"": ""node"",     ""request"": ""launch"",     ""program"": ""${workspaceRoot}/node_modules/mocha/bin/_mocha"",     ""runtimeArgs"": [ ""--nolazy"" ],     ""args"": [         ""-u"", ""tdd"",         ""--timeout"", ""999999"",         ""--colors"",         ""./out/tests/""     ],     ""sourceMaps"": true,     ""outDir"": ""${workspaceRoot}/out"",     ""cwd"": ""${workspaceRoot}"" } ```  But breakpoints on my debug adapter never gets hit, whether it's set on TS or JS files. Using the latest VS Code on Mac."
11976|Not fixed, post GA I might replace the scorer with something that works.
11977|:+1:
11978|@isidorn the whole point of this fix is to change the language mode for both sides of the diff, if that does not work please show me.
11979|:+1: it is frustrating to always close the default settings buffer, when you do not need it.   We could provide an action/link that opens all the settings on the side.  Should we do the same for the keybindings?
11980|:+1: and this should be the default behaviour.   We could still provide a setting 'always include textual completions' for users that like the current behaviour.
11981|agreed
11982|@konrad147   > I have same problem. Javascript intellisense stopped working after update in HTML files. In javascript files it's working fine  Sorry, but this is a know limitation that is documented in release notes. We will work with the TypeScript team to bring this back.
11983|"ou should find the ""Hello World"" command in the Command Palette (press F1) , but when press f1 ,howerver  it cant show the command window ,  ![6ad8 tm](https://cloud.githubusercontent.com/assets/12759554/13597286/acfb73c4-e552-11e5-8ae6-a98d587d0c18.png)"
11984|Yeah why not.
11985|@ADCJustinH yes, for now this is the intended behavior.
11986|Yeah, looking good! The date format could be a little nicer though.
11987|@sghung this works for me, pls see below. Do you have a `jsconfig.json` defined? Can you compare the setup in the screenshot with your setup  ![image](https://cloud.githubusercontent.com/assets/172399/13597403/b61b8906-e518-11e5-904b-0f018365a4c6.png)
11988|This happens only on OSx. On windows 10 highlighter works fine.
11989|@richardzeng1985 this seems to be an issue of the C++ extension you are using. Let me know what extension you are using and I will move the issue over.
11990|This issue was moved to Microsoft/vscode-chrome-debug#117
11991|@Daynil do you have a setup that allows me to reproduce the problem.
11992|@richardzeng1985 let me know what C++ extension you are using and I will move this issue over.
11993|const, let, class are also not highlighted.  This is happening for me on Windows 7
11994|@isidorn  most likely a bug in the C++ extension...
11995|No, this is designed.  Deactivate is a global concept and only all breakpoints can be activated, not a part of the breakpoints. You should use the disable all breakpoints instead of deactivate for this scenario to work.  Adding a new breakpoint is a clear signal to the UI that you are again interested in breakpoints. Also, google chrome does the same.
11996|> 1. If there are compile errors (resulting in make returning an error value), Code doesn't stop. It tries to run the program anyway.  Does the problem matcher work and return the errors properly. You can test this by opening `View > Show Errors and Warnings`.  @isidorn @dbaeumer  any other ideas?
11997|IMO #3484 makes sense. There, from how I understand it, we only move the cursor on unfold if the cursor has not moved since folding. But always move the cursor on unfold to the next folding region doesn't make sense to me. The next folding region could be far down in the unfolded region.  Let me know if I misunderstood your request.
11998|Assigning to @bgashler1. @alexandrudima FYI
11999|1. Works with the VSCode February release, thus if a task returns an error code we will not launch the program. If the task is a watch task there was an issue that is fixed and will be availbe in the March release  Here are the related issues which are fixed: https://github.com/Microsoft/vscode/issues/2370 https://github.com/Microsoft/vscode/issues/3626
12000|"Yeah, it's missing the `cacheUrl`.  Two fixes here: - you can add `""cacheUrl"": ""https://vscode.blob.core.windows.net/gallery/index""` to that object; - I pushed 0ef0a43 which fixes the exception in your log, in case `cacheUrl` is missing."
