11201|I cannot reproduce when I assign Cmd+4 to be navigate previous and Cmd+5 to be navigate next.   @alexandrudima can you check if in your english keyboard and locale the keybindings show up in the menu reliably?
11202|#2951
11203|Close = Done?
11204|Done/duplicate?
11205|:+1:
11206|Missing essentials: - Numeric arguments (3dd, 2x, ...) - support for combining commands (`ci[`, `cW`, `ggVG`, ...) - visual commands - window interaction support, split windows, close windows, switch windows, ...  Nice to have: - Cursor customization: Give me the possibility to customize the form (block or line) and color of the cursor, e.g. for Normal Mode, I'd like to have a green Block cursor, in insert mode a red line cursor. - vim leader support.  For Editors with good VIM support look at Emacs with [Evil](https://bitbucket.org/lyro/evil/wiki/Home) or IntelliJ's IdeaVim.
11207|"I had zero cognitive discomfort getting used to Working Files. I love them much more than tabs. VSCode's UI is on the right track. I'm not against opt-in tabs, but would throw a fit at opt-out tabs.  Working Files are tabs in a better layout (more scroll space). They are missing ""tear off"" and drag features, which can be added in the future."
11208|+1 for  > support for combining commands (ci[, cW, ggVG, ...) > visual commands
11209|Thanks a lot for enlightening me! You are absolutely right.  The Chalk documentation didn't get clear about this. Many examples there just say `chalk()` instead of `console.log(chalk())` or similar.
11210|"As a mvim user, I have multiple sets of TDD files open, and tab between them.  For instance, I angular + tests, server + tests, cucumber or behave + scripts.  I don't want to tab to access a single file, but a combination of open files.  I switched to VSCode for 3 months for a Typescript project, because it really had best-in-class / amazing Typescript support.  However, as soon as I moved to a non-Typescript project, I found I compared its general purpose search, navigation and substitution capabilities directly to mvim and am sorry to say I rapidly (i.e., instantly) reverted to my former editor.  I have a 27"" Apple Cinema display and would get a larger display if possible.  I have plenty of room for plenty of tabs and and file-pairs, and don't have a compelling reason to be limited in using that space by my editor.  I don't want to deal with just one file at a time - I want to open many, and to track the flow from tab to tab."
11211|Maybe if a plugin would take advantage of the [Neovim](https://neovim.io/) api to bring in full power of Vim instead of trying to merely emulate vim key bindings. It could be possibly game changing, allowing to tap full potential of vim ecosystem and configuration.
11212|"None of the plugins yet support the ""dot"" `.` command, which repeats the last action. That is **really** important. VsVim is excelent, it works as expected. That should be the goal."
11213|yeah `.` and `;` are important to me too
11214|i believe so with #1228
11215|I'm not sure why we want to tie it to the HC theme.  We show a nice, light focus indicator (in blue in the dark theme at least) everywhere else without the HC theme.  When i look at this I really have to study the screen to tell which editor has focus (I know which editor has focus :):  ![image](https://cloud.githubusercontent.com/assets/1487073/13441662/b6539c12-dff8-11e5-9366-1c4de8367000.png)  something subtle like this would be nice (picture B more than picture A):  ![image](https://cloud.githubusercontent.com/assets/1487073/13441765/3c91a1f2-dff9-11e5-92eb-2bd616fc2f21.png)
11216|Nice, maybe we can talk through some UX ideas on this in the next meeting?
11217|"@isidorn Do I have this about right - excuse my incorrect use of sync calls below but this message order is what I see in our extension's log file and it reflects ""when"" we send the `initialized` event:  ![vscodedebugprotocolseq](https://cloud.githubusercontent.com/assets/5177512/13442034/9d54600c-dfb7-11e5-8225-20a8264c8717.png)  NOTE: in the log file I examined the debug scenario had no line breakpoints configured.  If I look at a log file of a debug session that does have a line breakpoint configured, the `setBreakpoints` request/response is in the same spot as `setFunctionBreakpoints` is in the diagram above and the `setFunctionBreakpoints` request/response has shifted down to the same spot as `setExceptionBreakpoints` (bumping it down).  So right now, we see `configurationDone` arrive after the `launch` request msg and we've shifted code to configurationDone that **requires** that we received the `launch` request already as it contains launch parameters.    My worry is that when the issue with the `setExceptionBreakpoints` request message is fixed i.e. we will no longer get that message because we don't support that feature and the order of `launch` and `configurationDone` request messages could change due to the async processing nature of dbg protocol messages.  Is that correct?  If so, I can guard against this but I didn't want to ""complicate"" the code if the scenario of `launch` received after `configurationDone` is not possible give that we send the `initialized` before we send the `initialize` response.  Thanks.  cc @daviwil"
11218|Actually it is quite sad that now the VSCode icon drawn as something in between Edge' icon (no outline) and old VS2015 (with filled background). Both approaches separately look cool (especially on dark background), but not this one (without a white outline but with a white background/fill). ![syvcrld](https://cloud.githubusercontent.com/assets/1770529/13442937/483b1a66-e007-11e5-9a83-c1bf0c08930b.png)
11219|"There is already an option for that, open your user preferences and add  ```     ""editor.formatOnType"": true ```"
11220|This is fixed in the march release of vscode, console is not so spammy and only reveals itself on new debug launch. From what the user described his main problem is that the console pops up when not needed. Not that he needs to look at console and output at the same time  @mredbishop or did I understand wrongly? You can tryout the march insiders vscode, or the march update next week and let us know if this behavior improved for you  Let me know what you guys think and I can reopen
11221|Adding important label since @chrisdias decided to put this to feb milestone  Assigning to @chrisdias since I can not reproduce this with just opening the insiders release. Please provide detailed steps on how to get this
11222|I believe this is an issue with the plugin. Let's wait for response on this issue before we make any further action here https://github.com/Pure-D/code-d/issues/29  ping @joaomoreno
11223|This is great news! This is the only feature stopping me from switching to VSCode. For me a critical feature is the ability to remap the ESC key (exit input mode). It would also be great if macros were considered at this stage, few implementations of vim mode in other editors support this due to the limited API accessible, and looking into it now could make it possible in VSCode, together with `.` and `;`
11224|@waderyan what is strange here? You are launching another instance of the extension host. It runs the same extensions that you have installed (e.g. the 'Spell and Grammar checker) plus your extension under development. So this looks quite normal to me.  CC @bpasero do you agree?
11225|@silverbucket what version of VS Code are you using (see the About Box), are you on the insider or the stable channel?
11226|"I gave Visual Studio Code another try two weeks ago. I was actually pleasantly surprised when just mucking about with a few files. But when I started working on an actual (large) project with more than a handful of files opened, the lack of tabs became very annoying. _Working Files_ just didn't suit me and it slowed me down. After 3 days I was so annoyed with it that I went back to Sublime Text. I have two 24"" screens at work (Windows), a 27"" Mac at home and can easily have 20 tabs open and still distinguish which file is which. Plenty of screen real estate for tabs in my case. _You_ are already showing the file name of the file that is opened in the editor. All the space to the right of the file name is unused (except for the icons to the right of the window) and could be filled with tabs (which is what Sublime Text does too). I say give users the option to work with _Working Files_ and/or file tabs. For now, I am switching back to a combo of Sublime Text and Visual Studio Enterprise. When tabs are added I will reconsider."
11227|@rkeithhill thanks for the diagram. I have not yet analysed it in detail but here is just a piece of information that might be helpful:  If you return `supportsConfigurationDoneRequest = true` in the `InitializeRequest`, VS Code will call `configurationDoneRequest` right after the (now optional) `setExceptionBreakpointRequest`. So if you are not interested in implementing the `setExceptionBreakpointRequest`, just ignore it but implement the `configurationDoneRequest` instead. So `configurationDoneRequest` is basically the official replacement for the `setExceptionBreakpointRequest` if you do not have to set any exception breakpoints at all but just need a reliable request after all configuration has been done. There should be no timing difference between `setExceptionBreakpointRequest` and `configurationDoneRequest`.  We might want to consider to call `launchRequest` (or `attachRequest`) only after receiving the response from the `configurationDoneRequest` (or the `setExceptionBreakpointRequest` for old clients). This would ensure that no configuration requests occur after the  `launchRequest`.
11228|@Den-dp: thanks for sharing the feedback.  We are addressing the comments we've received on our icon in an upcoming release.
11229|As @bpasero suggested now we are removing ANSI codes from repl output. However I could not find the [2k thing in the [ansi escpae codes](https://en.wikipedia.org/wiki/ANSI_escape_code) so I did not add it. What is the format of these [2k escape codes - are they speced somewhere?  Also as @weinand suggested, please use the external console as a workaround since we do not handle all ansi escape codes.
11230|<kbd>enter</kbd> already navigates to that breakpoint. So I decided to use <kbd>space</kbd> instead. I think it is common practice to use <kbd>space</kbd> for toggling state. Let me know how you feel about it.
11231|@JonathanMEdwards thanks for reporting this.  Can you clarify on the flashing block cursor.  What steps did you take to enter the block cursor mode?  Could show a screenshot of what you're seeing?
11232|"settings.json editor.cursorStyle: ""block""  https://vimeo.com/157368124  On Tue, Mar 1, 2016 at 7:06 PM, Brad Gashler notifications@github.com wrote:  > @JonathanMEdwards https://github.com/JonathanMEdwards thanks for > reporting this. Can you clarify on the flashing block cursor. What steps > did you take to enter the block cursor mode? Could show a screenshot of > what you're seeing? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3605#issuecomment-190980251."
11233|I echo the above comments. A single, high fidelity vim mode is key to adoption.  I've briefly tried the available plugins, but they are both too far short of usable for me to put any time into them, so back to Atom for now.   Specificaly I rely on full mode support (https://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes) including ex-mode, so imho, vim support is more than just a bunch of key bindings.
11234|I got the fix and I forgot to add the solution here :) Open Control panel Open Appearance and Personalization Open Personalization Finally – click Change mouse pointers. That will open this window: mouse color scheme Select the Scheme called – Windows Black (system scheme)
11235|pinging @74th
11236|+1 for VsVim as the initial goal.  I use Visual Studio with VsVim full time and am very satisfied.  I use the various numbered repeat commands, yank and paste buffers, s/find/replace, dot (repeat last whatever), and q record/replay macros. Also J to merge lines, and the various keys that jump to positions within the current line or file.  I would like to start writing C# apps on my personal Macbook Pro for deployment to Linux webservers, and VS Code looks like a great tool for it, but I really need something very close to the feature set in VsVim before I switch away from command line Vim.
11237|Why is this bug still in backlog?
11238|:+1:
11239|@bpasero I cannot replicate this bug anymore. Maybe it is fixed? I can report if I see it again.
11240|@scastaldi that seems like a windows-specific fix, I'm on osx. I think something like the above mentioned fix for atom might be a better way to go
11241|For `Working Files` option, I have to toggle side bar (as I keep it hidden for expanded view of code) to select file. And the `Ctrl+P` and `Ctrl+tab` options also not user friendly.  I know you guys are trying something different for that, but the options you already provided not user friendly. Sorry.
11242|+1 with @mswift42 on essentials. You should provide something that helps VsCode-Vim integrate better.  Atom has a good enough Vim implementation. For me IdeaVim and VsVim work fine, so the feature sets that they support should be what VsCode offers as well.
11243|Yes, console.log goes to the repl from the extension!
11244|dupe of #2883
11245|:+1:
11246|please provide an extension for this, so users have a chance to use tabs  instead of being force to use the working list. I very hate the working files feature, it causes me switch files slowly and stole my productivity
11247|"@Tyriar with your change, opening ""."" or "".."" on windows will result in the unexpected behaviour as before because path.normalize() will not change ""."" or "".."" to anything."
11248|I would look at VsVim (Vim extension for Visual Studio) as an ideal initial goal.
11249|I'm making this plugin and use VSCode with it everyday.  https://github.com/74th/vscode-vim/  It supports numeric arguments and visual mode. I like VsVim too. But I think there is no need for command line mode, like VsVim.
11250|"I agree with mswift42, but I would like to add:  The ability to bind keys in a fairly flexible manner is (in my opinion) critical for usable vim support. Many users designate a key called leader,  often ','-key, and then bind <leader>gt or <leader>a to whatever.   I' ve personally grown attached to ,gt for ""go to (c)tag at cursor"" (go to definition) and ,gf for ""go to file whose name is at cursor""."
11251|On what version of vscode are you seeing this? This should be fixed in the march release which will be out next week.  Can you share the `package.json` of your workspace?
11252|"What version of vscode are you running? Have you actually set `""explorer.workingFiles.maxVisible"": 20` in settings? Or you just mean when you open more than 20 files? Do you see this for all workspaces, or only for one? Is it possible to share that workspace?"
11253|Really appreciate your effort. Hope we can use it in RHEL6 recently.  Regards, Simon  2016-03-02 3:39 GMT+08:00 Daniel Imms notifications@github.com:  > Closing in favor of #3603 > https://github.com/Microsoft/vscode/issues/3603 >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1056#issuecomment-190867872.  ##   Simon Yi-Hung Chen
11254|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/96
11255|@rakkarage I can't reproduce the error you get on the first line. Do you have any extensions installed that might have an impact on Yaml?
11256|ok, i figured out what is causing this - the [react-native tools](https://marketplace.visualstudio.com/items?itemName=vsmobile.vscode-react-native). With this extension installed, i get these console errors.   The question then are these errors coming from the extension or is there an issue in vs code itself.  I'll try debugging the extension (https://github.com/Microsoft/vscode-react-native.git) to see if there is anything obvious.
11257|Then please file the bug against this repo https://github.com/Microsoft/vscode-react-native
11258|@weinand I don't understand how I installed the Spell and Grammar checker extension. Shouldn't I only see the console.log from the extension I am currently debugging? Why do I see another installed extension?
11259|Actually,  for me it's the reverse.  My debug is pretty spammy,  so when I'm running a task and viewing the output window for the details it keeps jumping back to the debug window. I would really like to be able to see both as they are both important but failing that I would like an option to turn off bringing debug and/or output to the front when they updates.
11260|@isidorn The errors show up in the console before any line of code is hit in the extension - its throwing from VSCode, not the extension as far as I can tell.  So, I don't know if this is an issue with VS Code or the extension.
11261|As all formatters are different and configured separately, we'd need a issue per formatter. Ok if I use this issue for html?
11262|P. S. I'll try the insider update anyway and see how that differs.
11263|No problem. As I looked through the code, I suspected as much.
11264|Actually we do not distinguish console.log from your extension or any other extension which is somewhat odd. Maybe we should not load any extension BUT the one you are debugging?
11265|@waderyan you are really debugging the extension host and not only your extension. And the extension host has access to all extensions plus your additional extension.
11266|"@shadow-cs are those in the ""files and symbols"" category or ""recently opened""?"
11267|To add to this: it would be a great addition to move the existing Angular Tag provider into a custom extension. Using this approach, Angular tag hints would only appear if a user needs them. At the moment tag hints are displayed even if we do not use Angular.
11268|If you understand you correctly, you do not have the reverse situation. Debug will no longer jump back to front when updates. Please try out the insider update and let us know what you think.
11269|@warpdesign I see whats going on, you are typing the path and that does not work. Can you verify it works when you copy and paste the full path in?
11270|@bpasero Pasting the path in works.
11271|I'm the maintainer of https://github.com/aioutecism/amVim-for-VSCode. The biggest problem I and other vim plugin developers are encountering is support for custom keybinding context (as I asked here: #1432). All the other vim behavior can be implement pretty simple and quick with the framework we Vim plugin developers built. I'm seeing `support VIM extension authors` on roadmap https://github.com/Microsoft/vscode/wiki/Roadmap . And I hope the keybinding support for plugins would be added by the end of March.
11272|@pcgeek86 Isn't `Reload Window` already doing what you expect?
11273|:-1: As I would be personally confused when searching throughout a large branch list.
11274|"@gulshan thanks for the feedback.    The intent of using the ""Visual Studio"" name for Code is that ""Visual Studio"" is a family of products  consisting of Visual Studio, Visual Studio Team Services, and Visual Studio Code (you can see this on the https://www.visualstudio.com/ home page). As you note in your feedback, one of the challenges we have with this model today is that most people think of ""Visual Studio"" as the traditional VS Windows desktop product and not a family of products. In fact, there isn't a clear way to distinguish between those two.    The ""Visual Studio"" brand has tremendous recognition and appeal among developers (despite some negative connotations) and we do want Code to be associated with it. As a result of all this, given that ""Visual Studio"" is the family name and ""Code"" is the product, then ""Visual Studio Code"" is the correct name using this model.   For the ""Code"" name, it is clear that one of the bigger challenges we have is around search (you can find a number of issues here that bring this up). It's hard to search for ""Code"", you have to use ""VS Code"" or ""VSCode"" as the term. We're working hard to improve our search rankings and we're building up https://code.visualstudio.com as the definitive place for all things Code, further strengthening the search terms. It will take time but we are only in the very early stages of this product!  I hope this helps to explain the naming.    Chris"
11275|Will do, cheers :)  On Wed, 2 Mar 2016 at 09:28 Isidor Nikolic notifications@github.com wrote:  > If you understand you correctly, you do not have the reverse situation. > Debug will no longer jump back to front when updates. Please try out the > insider update and let us know what you think. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3597#issuecomment-191152435.
11276|:+1: I find this feature very handy.
11277|@NullScope excellent steps for me to verify. the issue is that since January release, quick open and full text search fail to work over links pointing to directories.   @alexandrudima please verify on windows and mac/linux
11278|@bpasero Thank you! Glad to hear you are able to fix this issue!
11279|Good catch!
11280|"@isidorn can we have both, the 'More Information' action and the ""Edit launch.json' button?"
11281|"I pushed a change to no longer watch for file changes on all ""out of workspace"" files upfront, but rather when the file is opened in an editor. Please verify that opening a ""out of workspace"" file (both using workbench on an opened folder and empty workbench) you see the editor updating when you externally modify the file."
11282|Might be a bug when we inject the stylesheet into the markdown preview.
11283|"@kurehajime does it work with ""C:\C#\user.css"""
11284|@alexandrudima I would believe this is a general issue and not so much about output. Any extension can trigger API in an endless loop and that will likely spam the renderer enough to make it unresponsive. Do we do some throttling with regards to data traveling from a spammy extension back to the main side?
11285|It would be great to have been provided better repro steps. I had to install and/or `dfmt`, `dmd`, `dub`, `dscanner`, `workspace-d` on my system. I then had to figure out how to get a functional [D workspace](https://gist.github.com/joaomoreno/4d8e74ba550b1b0e6c3c) set up...  I am now able to repro. Will come back with more information.
11286|When I was new to VS Code I really missed tabs. Then I discovered ctrl + tab and I no longer need them.
11287|@isidorn this is neither `needs more info` nor `upstream`.
11288|"I've been trying to make vscode (which is awesome in most parts) my primary editor for several months, but the lack of tabs keeps annoying me and hurting my productivity (I'm one of those who actively manage the set of open tabs in other editors). Ctrl+tab is not a replacement for tabs.  It's obvious that the vscode team is biased against this, and currently aims to ""convince"" users that they don't really need tabs. But this is the same type of thinking that lead to the removal of the Start menu from Windows 8 (we all know how this ended)."
11289|@riclf, doesn't the 2nd example give the same 'result' as the 1st? It's just not as visually appealing.
11290|format on type is not the same as format on save. why was this closed? the feature request was to have the formatter run on the full document when it is saved regardless of whether it was edited.
11291|The second is how it works in sublime and atom, though I'd prefer just alt+drag like sublime.  Looking forward to this, working without it is painful...
11292|Interestingly, sublime doesn't put cursors on empty lines...  ![multi-cursor](https://cloud.githubusercontent.com/assets/3109157/13460525/ffb7ba9e-e072-11e5-81c9-6e5f986dd005.gif)
11293|FYI, emacs CUA rectangle selection shows the rect on all lines (even empty lines.) Delete only affects populated lines (obviously) and never deletes a CR. Inserting **does** affect blank lines (e.g. see the comment chars.) And I personally like to nav with arrows, not the mouse.  ![test](https://cloud.githubusercontent.com/assets/2192439/13461217/63e032fc-e03d-11e5-869a-2c016bd7fddc.gif)  I can't use an editor seriously without this feature. Thanks for working on it!
11294|Could this be related to https://github.com/Microsoft/TypeScript/issues/6997 at all?  (As an aside, I'm not a TS user, but should it be `.tsx` if you're using JSX? )
11295|@Tyriar please verify until end of week since this is a stable-candidate
11296|@aeschli please discuss with @egamma if this is a stable candidate and if it should be included in the recovery build. If not, please change the milestone to march
11297|My mistake, reopening
11298|Dup of #3588 which I reopened. Sorry for the misunderstanding
11299|This is because we are not always consistent and is an error on our part. The reason why we can not easily change these ids is because it would require a transition of user keyboard shortcuts. Feel free to invest in this if you are passionate about it :)
11300|@joaomoreno removing the important since this is not a part of february release, I just pushed this change yesterday. I will fix it either way but it is not a stable candidate
