4901|"So one possibility would look like:   ""Thanks to a request by @akamud, there is now....""  ""Thanks to an idea from @akamud, there is now...""  ""Thanks to a contribution from @akamud, there is now....""  ""Thanks to a suggestion from @akamud, and code contributions from X and Y, there is now....""  It's about recognising the behaviours that you want repeated in a visible way. People will get ideas from seeing that..."
4902|Hello, I'm having the same issues, already followed the [Stackoverflow](http://stackoverflow.com/questions/32639393/authentication-failed-on-the-git-remote) post but it didn't work.   I don't have any problem with editing the code in VSC and then using the CLI or the GitHub desktop to sync my repos but It would be great if this issue is solved, the last update didn't solved it.  thanks
4903|Makes sense. The only solution I can see is to frequently perform backups of the file so that a state can be restored later.
4904|https://github.com/Microsoft/vscode/issues/1161 is related and having a backup solution would fix both things.
4905|+1 @TurkeyMan
4906|"In the VS Code team, we have been working without tabs and without working files since the beginning (4 years) and we are not missing anything. So, personally I do agree that the working files section is wasted space and I keep that section collapsed. However, we also work with auto save enabled and usually do not care about dirty files. Working files was introduced primarily to give dirty and untitled files a place to show up. Later on we decided that it was also a useful place to help people that are missing traditional tabs because it is a similar representation, just in another UI way.  We do reserve space above the editor to show file information and actions. One could argue this space is the same space needed for tabs. But my argument against tabs is, that typically the horizontal space is not enough to show the list of working files because you quickly end up with this:  <img width=""476"" alt=""screen shot 2015-12-24 at 09 28 30"" src=""https://cloud.githubusercontent.com/assets/900690/11991993/be37422a-aa20-11e5-8542-5b78672504e8.png"">  This is the nightmare we try to prevent: You need to scroll left and right through the list of tabs to find the files you want. Tabs only work good as long as you do not have more tabs open than can be displayed horizontally. Once a tab gets small enough so that the file name is hidden, you need to start closing other tabs only to see what is going on.   Now, obviously working files has a similar problem, just in another dimension. That is why we in the team typically just use `Ctrl+Tab` for everything and don't care about what is opened or not.   To summarize: working files is not our answer to replace tabs, it is rather the combination of working files and `Ctrl+Tab`. And our team is more or less 100% on just using `Ctrl+Tab` and nothing else."
4907|Duplicate of #105?
4908|Not sure if this is because of wrapping logic or something else, starting with @isidorn
4909|Not sure I follow the issue, please follow up @isidorn
4910|We leave the search results because you might want to start a new search based on some results. There is still an action to clear the search results in the top right corner.
4911|@TurkeyMan please give an example what you want.   PS: I am not sure why you say vs-proper, it is fine to say VS and everyone in the team will understand.
4912|@weinand fyi
4913|@unnamedcrewman out of curiosity, does it work if you bind a simpler shortcut that is not yet taken by VS Code?  @alexandrudima fyi
4914|Yup.
4915|The delay is now configurable from the new `files.autoSaveAfterDelay` setting.
4916|"This can now be configured with the new `""files.autoSave"": ""onFocusChange""` setting."
4917|This has landed and will be available in the January release. Two new settings are available: `files.autoSaveAfterFocusChange` and `files.autoSaveAfterDelay`.
4918|Your image appears to be unnecessarily exaggerating the issue; unrealistically narrow window, diagonal tab edges, way too much text in the tab, dot on the right ;) vs-proper nails the tabs beautifully, and there's no reason not to roll with small discreet tabs as it does.  I'm a very liberal Ctrl-Tab user when it's applicable, but you can't use Ctrl-Tab unless you're actively editing no more than 2 or 3 files. I have a suspicion that your opinion on this matter may be quite biased towards your particular project, and that might include a language bias. In C/C++ the typical number of working files is doubled or tripled when you accept there is a `.h`, and in my case, often a `.inl` complementing every `.cpp`. Ctrl-Tab is less effective in this scenario, and you tend to use Ctrl-~ instead (toggle cpp/h; which I have also posted a feature request for), in conjunction with tab management. Or consider Java, where every class - no matter how small - is required to live in its own file.  In my current day-to-day I often have a working set of 10s of files, Ctrl-Tab is no use to me when I'm working this way. The most practical workflow is 2-4 editor windows, and a couple of tabs per window. I didn't choose this layout because because I love it; it simply emerged, because it's the most efficient workspace layout for this particular job.
4919|Okay, it seemed to me like VS is ambiguous now.  I just want to be able to flip platform and config with a selectbox, exactly like in VS. My projects often span 4-5 platforms, and have at least 3 configurations per platform. If that matrix could be configured in the project's `settings.json`, and then `tasks.json` could refer to those variables, it would be possible to configure convenient multi-platform workflows, which is one of VS's most valuable features.
4920|Thanks,@jrieken.
4921|"@silverbp yes, we've removed the address attribute because earlier versions of node did not support external addresses and it was confusing users. I've created https://github.com/Microsoft/vscode-node-debug/issues/32 to add the ""address"" attribute back for the January drop."
4922|One more update, although that's probably not too surprising: The file was saved on an NTFS partition.
4923|@TurkeyMan VSCode and the debug architecture are extensible and open source. Expect that native debugging will come as additional extensions.
4924|"Sorry, one more: Code also allows me to save files with a trailing space or using reserved names like (tested by launching code.bat with the filename as a parameter, ie. `code.bat ""test ""`)  nul, com1, com2, com3, com4, com5, com6, com7, com8, com9, lpt1, lpt2, lpt3, lpt4, lpt5, lpt6, lpt7, lpt8, lpt9, con, conIN$, conOUT$, prn, clock$  I'm sure there are more DOS devices that cannot be used as a filename under Windows but I can't remember all of them and I can't find a proper list right now either.  Even though NTFS doesn't really care there are only very few programs that are able to use those files. So far the only ""built-in"" way I found is using powershell and prefixing the paths with \\?\ but at least on Windows 7 not even the explorer or the command line use the unicode API which means that those file names prove to be problematic and should be avoided."
4925|@mattblagden thanks for the info, appreciated!
4926|@bpasero   I went into the node/libuv source code to see exactly how `rename` is implemented: It seems that in windows it is [using the `MoveFileExW` API call](https://github.com/libuv/libuv/blob/bddd6a8489e4c8cf47841de6f05becd99fc06f3e/src/win/fs.c#L1215) (with the `MOVEFILE_REPLACE_EXISTING` flag), documented [here](https://msdn.microsoft.com/en-us/library/aa365240%28v=vs.85%29.aspx), so at least in windows, it may actually support moving between different volumes, though that is highly unlikely to be atomic (there's also the [`MoveFileTransacted`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365241%28v=vs.85%29.aspx) but I don't think it is supported by node). In any case, in unix (this includes mac I believe) it simply uses the [`rename` call](https://github.com/libuv/libuv/blob/bddd6a8489e4c8cf47841de6f05becd99fc06f3e/src/unix/fs.c#L816) which probably doesn't work across volumes.  One thing that's interesting is how exactly would the rename/move be 'transparently' supported in the editor itself. I mean, since a new file is written and then moved on top the old file, an existing file descriptor would still point to the old file (the old file would only be truly deleted once the file descriptor is released). I'm guessing that the editor is opening and closing the file on each save? (or using the `writeFile`, `readFile` functions in the node API?).  Another thing is how to handle multiple pending saves to a file. Since `fsync` may take a while there could be a situation (especially when auto-save is enabled) where multiple pending overwrites are happening at the same time. So I guess the temporary file would need to be timestamped like `MySourceFile.ts.1450956207523_temp` (I'm using a millisecond epoch timestamp here since multiple saves could happen during the same second).  Another issue to be tested is how watcher tools interact with these quick deletion and moves, do they consider them as file updates or a new file creation? (this may vary between watchers). Also, if an external program happens to have a live file descriptor to the file, even for a fraction of a second while an atomic save is in progress, then it will not be notified of any changes to it and a write to the file may result in an error or data loss (the file descriptor they hold is basically referencing a 'phantom' file which at that point isn't referenced by any directory).
4927|ignore this issue, i just went to look in the code and found something about auto saving, Immediately saw that I am working on an earlier version 0.10.3, so After updating I noticed this is no longer an issue as it was fixed in #466
4928|@glen-84 I don't see why not, it's just a matter of getting the CSS right and adding in names for it.
4929|An alternative to atomic file overwrites is to simply keep a timestamped backup for files that are frequently being edited, in some dedicated location (say: in the application data folder). There are should be at least one valid backup of the file at any given time. For example:  ``` For MySourceFile.ts:  MySourceFile.ts.backup_1450966677534 ```  After every new backup is created and flushed to disk with `fsync` (an atomic write/rename/flush sequence would be needed here), the oldest one of the existing backups is deleted.  One issue is, since I'm assuming the preferred constraint is to to store and match the full path of the file to the correct backup, even if the backup is stored in a different directory (or even a different volume). That's actually quite easy, instead of using a complicated scheme to store file metadata somewhere, simply hash the full path of the file (including the drive, directory path and file name) and name the backup by that hash:  ``` For 'C:\My Dev Directory\My Project\MySourceFile.ts' the backup filename would be:  ee1eb030124f7aa68fa740b5ce89b4060396b3a7_1450966677534 ```  (the hex string is the SHA1 of the complete path of the file)  To restore a backup the IDE could add an option when right clicking the file in the editor and then selecting something like 'Restore from latest backup' (if a backup is unavailable the option could be grayed or not appear at all). Then the user would be notified of the exact date and time of the backup and asked whether to proceed (this action should preferably be undo-able).  **Edit:** Perhaps the _1450966677534 suffix is not really needed so it would simply apply atomic overwrites on the latest backup and the backup timestamp would be derived by the file modification time.  **Edit 2:** The automated backups could even be applied to unsaved files, and the editor can then compare the file date of the actual file to its backup. If the backup is newer it may ask something like 'a unsaved version of the file has been automatically stored, would you like to load it?' (I'm aware auto-save should cover some of the scenarios where this is useful, but I guess not everyone use it. In any case, the backup approach provides an advantage on the atomic save approach for this matter).
4930|Yes, we do use `fs.writeFile()` API of node to save a file and we never leave any file handles open. We also avoid any parallel access to files when writing, so I do not think this would be an issue.   Using the atomic write strategy is not a 100% guarantee to never loose data, but it reduces the chance of a failing write.   Watchers would receive a delete and create event and some are smart enough to convert this into a change event, but there is no guarantee. Code itself will convert to change events, but other watchers might not and get confused.  I think doing a backup of the file in some other location is the only good solution. The question is wether to enable this by default or not. I know that Atom is now optionally providing a setting to enable backups of files.
4931|You are likely on a german or swiss keyboard layout. If so, please assign a keyboard short cut to these commands manually.
4932|I edited my comment but I would post this again:  The automated backups could even be applied to unsaved files, and the editor can then compare the file date of the actual file to its backup. If the backup is newer it may ask something like 'a unsaved version of the file has been automatically stored, would you like to load it?' (I'm aware auto-save should cover some of the scenarios where this is useful, but I guess not everyone use it. In any case, the backup approach provides an advantage on the atomic save approach for this matter).
4933|> Okay, it seemed to me like VS is ambiguous now.  VS = Visual Studio, VS Code = Visual Studio Code or just Code is fine.  Thanks for the explanation, @dbaeumer fyi
4934|Yes I would totally do backups of dirty files as well as it would be the fix for #1106. In fact I will close that one as duplicate of this one and rename this one.
4935|Closing as duplicate of #1161
4936|@MrSkinny we now have 0.10.6 published, do you still get this?
4937|This is actually #1615 it seems.
4938|Good reference: https://en.wikipedia.org/wiki/Filename
4939|"Thanks for the quick response.  I rebound the shortcut to `ctrl+cmd+H` which is not listed, as far as I can tell, among the default keyboard shortcuts.  My ""append selected text to file"" script/Service works fine with these keys in Sublime Text, as well as text highlighted in the browser and so on.  However this key-binding still fails to work from VSCode.  I tried several other key binding combos that seemed unique, and all worked except in VSCode.  If it matters, the mouse shortcut I use is simply a [PopClip for Mac](http://pilotmoon.com/popclip/) plugin that runs the system service by name, rather than by invoking the keyboard shortcut.  The PopClip plugin works perfectly, which seems to suggest that the issue is not with the service itself interacting with VSCode, but rather something with the key-binding mechanism instead."
4940|@bpasero  thanks! this will be in the January release?
4941|@tonyeung yes!
4942|This fix apparently didn't make the December (0.10.6 update).  Hopefully it will make the next update?
4943|Hi **@roblourens**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Rob Lourens). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
4944|"Related: if you press and release the Alt key, the menu does not retain focus, as it does in standard Windows applications. Normally you can press and release the Alt key, then press other keys to begin navigating the menu. If you change your mind before you begin navigating the menu, you can press the Alt key again to toggle focus away from the menu and back to whatever originally had it.   In Code, as soon as you release the Alt key, the menu loses focus. You must press ""Alt-F"" (for example) to begin navigating the menu with the keyboard."
4945|Also having this issue, especially when using `else`. ![image](https://cloud.githubusercontent.com/assets/11747245/12000204/8d9ea20a-aa9f-11e5-9b66-7332283fc5cc.png)
4946|@Ghayyas what version of typescript did you install?
4947|This is currently not supported as far as I know.
4948|@mobi12 can you attach an example?
4949|@NotAdam so you explicitly turned off the recycling bin on windows?
4950|Thanks you for reply :+1:
4951|Sorry have been out of commission last few days.  @bpasero sha256 of file I am currently receiving from code.visualstudio.com - `78d333e1e7ae9bffc84fa1c6a0dbc3e8530d85b62c3b318e6687eefec2b3ddf9` - pls verify is 0.10.6?  I have uploaded the original 'suspect' file to Dropbox link below that initiated this thread and causes the 'damage your computer' install warning with sha256:  `eab49cfce612f66e66816efbc5341415d2f25c1c7e5ae98d57cfb91016007af5`. If you don't mind, please let me know if you experience same and what filemerge shows.  https://www.dropbox.com/s/q6w2ynpz3rwsj1g/VSCode-darwin-unknown-hash.zip?dl=0
4952|Its 0.10.6
4953|https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/react  ``` tsd install react  --save ```  Restart, then, you can get intellisense
4954|![untitled](https://cloud.githubusercontent.com/assets/11838212/12003385/230f6826-ab3e-11e5-8583-2ac0ddfc4609.jpg) ![untitled2](https://cloud.githubusercontent.com/assets/11838212/12003386/2314ebfc-ab3e-11e5-9b22-9356a74007ff.jpg)
4955|downloaded and installed v-0.10.5 noticed that in v-0.10.5 no javascript syntax highlighting like in v-0.10.3 some time later new version has arrived  tried to update it told me (Error) The setup files are corrupted. Please obtain a new copy of the program. ╫
4956|Hi **@ivanixgames**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
4957|**@ivanixgames**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
4958|Thanks @meritozh, is there no way to achieve it w/o `tsd`?
4959|Hi **@ivanixgames**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
4960|Yep.
4961|@sarbbottam You must need `*.d.ts` files, so you can get the definitions directly from the [Github repos](https://github.com/DefinitelyTyped/DefinitelyTyped). `tsd` is just a tool. If you want implement intellisense without something like a (typescript) definition file, you can see these  issues: #957 and Microsoft/TypeScript#4789
4962|Reopen since it's not fixed?
4963|Almost duplicate of #957
4964|It's remarkable how often I want to go screw around with some code just to have VSCode throw shit in my way.
4965|+1 Same error `connect ETIMEDOUT 191.238.172.191:443 error.`  have already set the http.proxy and strict-ssl to false  Version 0.10.3
4966|Hi **@sdenel**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
4967|@bpasero He says head files are not being highlighted in .cpp files while I haven't met this problem.  ![1](https://cloud.githubusercontent.com/assets/6079112/12006848/efe60ef6-ac22-11e5-8ec8-3a93a7f77d6d.PNG)
4968|:+1:  Just witnessed this as well.
4969|Yes, I'd like this too http://stackoverflow.com/questions/34462132/vs-code-cant-use-jspm-packages-systemjs-cant-see-angular2-ts-files
4970|IDENT is also needed for @keyframes, so would be good to add it in a way that can be reused, rather than defining it twice.
4971|**@sdenel**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
4972|+1 got the same error. Deleting that folder made the error go away.
4973|This fork works, I do not understand why AppVeyor test failed. See my last test using AppVeyor: https://ci.appveyor.com/project/sdenel/vscode
4974|It also seems that highlighting for Python built-in functions is broken:  ![screen shot 2015-12-26 at 8 11 23 pm](https://cloud.githubusercontent.com/assets/1039369/12008492/e340c1e8-ac0c-11e5-902c-94b94334d519.png)  This is on Code 0.10.6.
4975|Probably related to #1467.
4976|ok, the default `args` param in the `tasks.json` `tsc` task was conflicting with the tsconfig.json params. So, once I commented that out, it works.
4977|+1 Same error `getaddrinfo ENOTFOUND localhost:8123 localhost:8123:8123`  Version 0.10.6
4978|#### block/block-thin/block-hollow/block-outline:  ![block-outline](https://cloud.githubusercontent.com/assets/261509/12010563/7443fbae-acb4-11e5-96d3-d29e3a26991c.png)  ``` css ? {     background: transparent;     border: 1px solid;     box-sizing: border-box;     position: absolute;     width: 1ch;     cursor: text; } ```  #### block/block-filled:  ![block-filled](https://cloud.githubusercontent.com/assets/261509/12010567/88c493fe-acb4-11e5-8c34-3b606b3ffed9.png)  ``` css ? {     position: absolute;     width: 1ch;     cursor: text; } ```  #### line/line-thin/line-narrow:  ![line-thin](https://cloud.githubusercontent.com/assets/261509/12010569/93a71e68-acb4-11e5-88ae-46d6bace2c3a.png)  ``` css ? {     position: absolute;     width: 1px;     cursor: text; } ```  #### line/line-thick/line-accessible:  ![line-thick](https://cloud.githubusercontent.com/assets/261509/12010570/9fdc7c46-acb4-11e5-926a-063993dee59d.png)  ``` css ? {     position: absolute;     width: 2px;     cursor: text; } ```  #### underline/underline-thin:  ![underline-thin](https://cloud.githubusercontent.com/assets/261509/12010571/aefe6d88-acb4-11e5-8db1-27cf3c1b311a.png)  ``` css ? {     background: transparent;     border-bottom: 1px solid;     box-sizing: border-box;     position: absolute;     width: 1ch;     cursor: text; } ```  #### underline/underline-thick/underline-accessible:  ![underline-thick](https://cloud.githubusercontent.com/assets/261509/12010572/b713d1b6-acb4-11e5-951a-0444b99f0e4d.png)  ``` css ? {     background: transparent;     border-bottom: 2px solid;     box-sizing: border-box;     position: absolute;     width: 1ch;     cursor: text; } ```  I'm not too sure about the names, maybe:  block-filled block-outline line-thin line-thick underline-thin underline-thick  ... I'll leave this to the developers. =)
4979|"@igorvaschuk @gclifford could you please try to use a non-default debug port for the express app, e.g. something like ""node --debug=5555 bin/www"" and then modify the launch config in VSCode to the same port. In my experiments I've seen a problem with the standard 5858 debug port."
4980|+1, the other options like codemirror or ace does not even come close compared with typescript playground
4981|http.proxy has been set, and http.proxyStrictSSl has been set to false. Still get the error:  unable to verify the first certificate: Error: unable to verify the first certificate     at Error (native)     at TLSSocket.<anonymous> (_tls_wrap.js:1000:38)     at emitNone (events.js:67:13)     at TLSSocket.emit (events.js:166:7)     at TLSSocket._finishInit (_tls_wrap.js:567:8)
4982|I upgrade to Version 0.10.6 (0.10.6) that cant't open when use Chinese input method was fixed,  but sometime VS code still become slow I don't sure it whether about Chinese input method. I wrote ES6 and in IOS 10.11.2.
4983|"I tried to reproduce on Windows 10, Mac OS 10.11 and Ubuntu 15 without luck. I am suspecting an out of memory issue but for none of the above the memory was increasing much.  Can someone try to reproduce this with the following conditions: - does it reproduce when opening just an empty instance of code (File | Close Folder) - does it reproduce when opening a workspace but not opening any file in the editor"
4984|@MrSkinny I see a __MACOSX folder inside the zip file which I do not find in the latest release. I think this is a folder that some zip programs add. Could it be that you downloaded the release, unzipped it and then zipped it again to compute the MD5 hash? If so, please download the release and run the MD5 hash directly without unzipping.
4985|With this little info it is very hard to understand if there is any issue. Do you not see the slowdown when keeping the input method to english?
4986|@Ghayyas I meant which version of typescript.
4987|You can debug the program also via keybinding: F5
4988|Not sure what happened here, maybe @egamma knows how the update could cause this.
4989|@crperlin please open individual issues for individual feature requests.
4990|I guess this needs to be reported against TS.
4991|So all code formatting is done in the tsserver? There are a couple of other issues as well.
4992|@diimdeep can you directory compare the 2 zips to see what is different?  @chrisdias we need to understand why you would get different archives from different regions. One suspicion I have is that maybe the cache was not yet updated worldwide and we uploaded new bits to an existing release.
4993|@isidorn fyi
4994|@lwsrbrts can you attach the markdown?
4995|I think this is possible @alexandrudima ?
4996|@yuanlin-ssdut more info please
4997|"@bpasero   ``` bash-3.2$ zipinfo -2 ~/Downloads/VSCode-darwin.zip | grep -E '^[^/]*(/[^/]*){1,1}$' Visual Studio Code.app/ bash-3.2$ zipinfo -2 ~/Downloads/visual-studio-code-0.10.6.zip | grep -E '^[^/]*(/[^/]*){1,1}$' Visual Studio Code.app/ __MACOSX/ __MACOSX/._Visual Studio Code.app ```"
4998|Sorry, that would have been the intelligent thing to do in the first place. :)  https://raw.githubusercontent.com/lwsrbrts/PoSHue/master/README.md
4999|Thanks!
5000|Again this __MACOSX folder which gets added by some zip programs on Mac. I suspect that we replaced a release and the CDNs have not yet all been updated.
