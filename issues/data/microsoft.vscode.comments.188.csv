18701|What about other places where we show commands in quick open. Would you expect this to be consistent everywhere where you can search for something?  ![image](https://cloud.githubusercontent.com/assets/900690/14706358/f561b328-07b5-11e6-8c7a-7965b9a9be9a.png)
18702|![image](https://cloud.githubusercontent.com/assets/240091/14706356/a0bb9e70-07f0-11e6-824f-bb04aa237e87.png) @bpasero It works (at least for Simplified Chinese).
18703|Yes, only if you open a folder we remember all UI state.
18704|Ok nice.
18705|@bpasero, @aeschli  FYI.
18706|"I will check zh-Hant-TW later. On Apr 21, 2016 6:42 PM, ""Belleve Invis"" notifications@github.com wrote:  > [image: image] > https://cloud.githubusercontent.com/assets/240091/14706356/a0bb9e70-07f0-11e6-824f-bb04aa237e87.png > @bpasero https://github.com/bpasero It works (at least for Simplified > Chinese). >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5260#issuecomment-212850897"
18707|@zersiax interesting, though I see this even with Chrome 45. I have not tested any other a11y feature after changing to listbox. I still keep role treeitem for the elements within and that seems to at least let NVDA read out the collapsed/expanded state and hierarchy level of the tree :)
18708|@bpasero I think the two-line configuration is universal, this UI pattern can be used on all of these interfaces, including commands, file jump, or something else.
18709|@bpasero Or maybe display translated and English commands in one line, but right-align the secondary item, together with the shortcut keys.
18710|"@v-pavanp the creation time stamps on the source maps clearly showed that the maps were stale. Your build setup does not produce any source maps. After adding the sourceMap option to your task.json breakpoints were hit correctly:  ``` json ""args"": [""--sourceMap"", ""app.ts""], ```"
18711|Waiting for linguistic input.
18712|Hi **@SamVerschueren**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
18713|@v-pavanp since in similar issue #5264 your source maps weren't up-to-date, could you please make sure that your source maps have the same time stamps as the generated JavaScript files.  If this is not the issue, please let me know and I will reopen this issue.
18714|@bpasero  It seems not to be improved... Maybe it is my computer's problem....? ![image](https://cloud.githubusercontent.com/assets/13444035/14707002/9e81a042-07f4-11e6-8d26-17d335653db2.png)
18715|**@SamVerschueren**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
18716|@SamVerschueren cool, added some comments!
18717|@be5invis how would this be needed for the file jump quick open that is not talking about commands?
18718|@bpasero Perhaps second line for directory?  For command  ``` TRANSLATED COMMAND                                   SHORTCUT English command ```  For file and symbol  ``` Symbol Name / File Name Directory ```
18719|"Source in a VS dialog is a ""Format selection"" not a ""Format Code"".  Linguistic answer.  1) Original target ""„Ç≥„Éº„Éâ„ÅÆÊõ∏ÂºèË®≠ÂÆö"" is translation of ""Format Code"" 2) suggested translation ""ÈÅ∏ÊäûÁØÑÂõ≤„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"" is a translation of ""Format Selection"" in VS according to TRES, which is not identical to the source in question."
18720|Thanks for the feedback, I adjusted accordingly. The only concern is the [translation](https://github.com/Microsoft/vscode/pull/5597#discussion_r60563979) of `newUntitledFile`.
18721|But it is no problem in win7 installed in the same computer... ![image](https://cloud.githubusercontent.com/assets/13444035/14707421/562b54c0-07f7-11e6-8950-4200ca996efc.png)
18722|@isidorn the change is for debug and tasks to fetch latest config from disk so that you do not get stale results. one use case to verify is to F5 with a dirty launch.json and making sure everything works including the dirty changes that get saved right after.
18723|Awesome!
18724|@be5invis that seems to me unrelated to this CJK issue.
18725|üëç
18726|Awesome, thanks @bpasero for helping me out and merging my PR :).
18727|> Regarding error positions: we do have some smartness here in the editor. If you only provide line/column then we automatically underline the word. If you provide line/column and endLine/End/Column then we take exactly that.  But in the example above I provide `line` (3), `column` (8) and `endColumn` (29), why does it still only underlines a single character?  > I saw you commenting on the language server protocol as well. If you are implementing a full language server for Haxe then you actually don't need any of this since the language server can report errors as well and the proper transformation of line/column can be done in code.  Well, language server doesn't deal with building, and the build could be invoked from a Makefile, grunt or anything else, so it makes sense to have an universal problem matcher, so yeah I'd love this to be merged.  ---  By the way, about position transformation, wouldn't it be a good idea to have a `TransformPosition` request in language server protocol that takes whatever problem matcher captured and transforms it to  proper `Location`?
18728|There has been new work in the [TextMate's Python bundle](https://github.com/textmate/python.tmbundle). So I've updated the grammar to the latest.  I'm still open to update to any other grammar if the community has a clear preference. But then, as said, thanks to the extension model it's possible to add grammars as extensions and each user is free to choose what to use.
18729|@SamVerschueren expecting a PR from every issue you file from now on :)
18730|Hehe, I'll do my best :). The project is quite complex to be honest :p.
18731|@bpasero fixed
18732|Thanks man! This happened when trying to handle a link in repl which turned out to be an incorrect URI
18733|Actually, I was wrong about the empty array, _falsy_ values and the empty array are considered to be a not good [result](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/test/node/api/extHostLanguageFeatures.test.ts#L847) which means delegate to next level of suggest. This is the defined behaviour and should be like this ever since JSON became an extension.  Suggest works by keeping an ordered chain of providers and goes through them until one produces a result. In the scenario here, the schema apparently says there are zero completion for this property. That makes the next provider become active. Because it's a system of fairness I don't want to allow a provider to block/disable all providers that come after him just because he didn't yield a result - that's a no to flags ala `showTextualProposals` and `isComplete` etc.  I think the meta question here is what do you expect from IntelliSense? Is it about deriving text from a set of rules (grammar, schemas, etc) or about typing faster with suggestions ranging from correct to useful?   It might just boil down to personal preference and looking at the sample [above](https://github.com/Microsoft/vscode/issues/5574#issue-149878974) I see two camps - You trust the JSON brain/schema and if there are no proposals there is nothing more to type - You use suggestion as a tool to quickly type, ideally correct code, but the validation will let you know about it later anyways  Personally, I am clearly in the latter fraction but I understand how people might not like that. So, I believe what it takes is a user setting to control how the empty array returned by a completion provider is to be interpreted - as empty result or invite to continue in the chain.   The delegation rules will be then - `undefined` or `null` returned ‚û°Ô∏è delegate to next provider - `[]` returned  ‚û°Ô∏è delegate or done based on user setting
18734|"@bpasero  I prefer English (untranslated) first.  At least for Japanese, for command typing purpose, we will _never_ type translated ones to execute commands. There are two major reasons why we don't want to see the translated commands first are: - Typing Japanese is anyway painful and time consuming - Wording order in Japanese sometimes disturbs programmers thinking  The Japanese wording order is typically completely opposite to English. For example, ""Insert Line Below"" is translated as ""Ë°å„Çí‰∏ã„Å´ÊåøÂÖ•"", on which, Ë°å„Çí(line) ‰∏ã„Å´ (below) ÊåøÂÖ•(insert). But if I type ""line below insert"", the command does not match. Anyway programmers normally start with verbs like function names so we anyway needs verbs first even though Japanese language does not do so.  So, the order default should have language specific default?"
18735|Ideally, it would expose API this for extension authors.
18736|@bpasero Agree with @espresso3389 . So design like this? - UI: Display both translated and English - Matching: Translated, English and keyword list
18737|This is available though not as a separate view and a flat list. You can press Ctrl+Shift+O to get a symbol outline of the currently open file.Ctrl+T shows all symbols in the workspace. You can type in there to filter the list down.  ![capture](https://cloud.githubusercontent.com/assets/1931590/14710009/f0e17d88-07d3-11e6-8c23-a9344ebb081d.png)
18738|@bpasero @alexandrudima @jrieken FYI.
18739|@bpasero Since the title would now come asynchronously from the extension host I wonder if the input can send an event that title and description need to be updated? I see the input being an event emitter but I don't see an event
18740|Thanks Dirk.  Yes, I saw that already, but I find it less of an interruption when that view is constantly onscreen in a separate panel.  Also, the ability to filter this list so as e.g. not to include variables is useful - which is harder to do in a pop-down view.
18741|I checked and we don't Cmd+F1 out of the box. But could be it is on your version. Can you open the Keybindings (File > Preferences > Keybindings) and check if there is a binding for Cmd+F1. You can search in the file.
18742|@dbaeumer Sometimes, this seems to cut off unnecessarily early, see here:  ![vscode_outline](https://cloud.githubusercontent.com/assets/8385202/14710619/6c7f7a6a-07d6-11e6-9d01-0c733a9b45c4.png)  Thinking about it, I probably even like the current approach better, need to get used to it a little, but it is faster to use compared with traditional outline presentation.
18743|@bpasero Agree with @espresso3389 too  I prefer English (untranslated) first.
18744|I can make the change, thanks for the suggestion, I think you are correct.
18745|Welcome to our life ;)
18746|"I think both mindsets (bullet points) above make sense, and I can certainly see a case for both scenarios. Personally I enjoy the ""strictness"" of JSON schema, but I can see how ""useful-but-not-entirely-accurate"" auto-completion provides some value also. User-configurable sounds like a good way to go.  Thanks for working on this."
18747|@jrieken I already need to update the title in case the editor becomes dirty so I would assume that you could just reuse the `EDITOR_INPUT_STATE_CHANGED` event to force the editor to update the title from the input.
18748|+1
18749|Thanks @f111fei!
18750|Well if we put english as first label then I would also do the sorting based on english labels. We would put the translated ones below or to the side, would still allow to match on them. I would probably ditch the concept of keywords altogether if we keep the english label. I do not think we should have both keywords and english label.
18751|Thanks @Wosi, you are absolutely right.  @nrj You should file an issue to the page of the extension which provides those suggestions.
18752|I don't care the order, just make me see the full text of en-US command and zh-CN command at the same time is okay. Or make me see the command with tool tip is also okay.
18753|What's your proxy address?  Note that you must restart Code after setting the `http.proxy` and `http.proxyStrictSSL` settings.
18754|This issue was moved to Microsoft/TypeScript-TmLanguage#150
18755|@bpasero   > Well if we put english as first label then I would also do the sorting based on english labels. We would put the translated ones below or to the side, would still allow to match on them. I would probably ditch the concept of keywords altogether if we keep the english label. I do not think we should have both keywords and english label.  For me (and possibly all the Japanese people), everything seems OK.
18756|Closing for #224
18757|@SamVerschueren it should be bound to Cmd+Backspace though? See https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/views/explorerViewer.ts#L387  Making all explorer actions keybinding friendly is on the backlog but honestly not a straight forward thing to do :-/
18758|1. the translated ones order is not important, just based on english labels 2. the translated ones are just explanation to english command. match or not match is okay.
18759|I am tempted to close this one because I do not think our goal would ever be to support this scenario. But since I cannot look into the future, I leave it open.
18760|No need to poke, [here it is](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/electron-browser/electronGitService.ts#L94). As you can see, we do look for it in some predefined folders, but ultimately we also simply try to execute it straight from the `%PATH%`.  Now, for some reason, in your system, `spawn('git'...)` doesn't seem to work. Meaning, `git` is probably not in the `PATH` variable that Code.exe runs with.  Let's try something. Hit <kbd>Ctrl Shift P</kbd>, type `developer` and select `Developer: Toggle Developer Tools`. In there, go the Console and type `process.env.PATH`. Does the path under which `git.exe` is appear in that?
18761|Great, thanks!
18762|@outcoldman looks good, but had one comment: https://github.com/Microsoft/vscode/pull/5527/files#r60589816
18763|@dbaeumer   Thank you for your reply. I do not define the `command + F1`.  ![2016-04-21 22 42 51](https://cloud.githubusercontent.com/assets/13635244/14711205/6e49f5a4-0813-11e6-8df2-ff31dddefa7f.png)  Use the [Display keystroke utility: KeyCast](https://github.com/cho45/KeyCast) was recorded operation. Is displayed on the left side is a key stroke character is actually the input of the `‚åò[F1] (command + F1)`. Does this difference would be of environmental issues?  ## vscode 1.0 stable Release - **It is expected behavior**  ![keycast_licecap](https://cloud.githubusercontent.com/assets/13635244/14712388/e0f36b36-0817-11e6-872b-c04aabec8c18.gif)  ## vscode 1.0.1 insider build - **switch is not working**  ![keycast_insider_licecap](https://cloud.githubusercontent.com/assets/13635244/14712463/32874a58-0818-11e6-9ac0-b94edad56776.gif)
18764|Thanks for trying out the Insider build and for providing great feedback. We will discuss in the UX team and come back with the outcome from this discussion.
18765|"I think this is related to an extension https://github.com/Zignd/HTML-CSS-Class-Completion as I had same problem with a big html file.   Error: ""HTML CSS Class Completion:Fetching CSS rules frome CSS files,please wait"".   Unistalling the extension solved it"
18766|Everything looks fine here :+1:
18767|@EWhite613 Can you explain more? In step 4, do you make changes to the theme? Why do you have to switch to the dev Theme again? To refresh it? I recommend to keep the Extension Host window open and press `Ctrl + r` to refresh. Does that help?
18768|@EWhite613 it should reload its contents when it changed outside.
18769|related to #5505
18770|@aeschli Step 4 I'm in the Extension Host window on a file like `config.js`. I switch files to `default.js` (Still in the same window), theme switches to back to my non-dev theme (Ex. `Dark+`). So now I have to open up Theme preferences again and switch back to my dev theme
18771|@ArianeLu @medifle this should be much better with our new insiders release.  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders  Closing in favor of https://github.com/Microsoft/vscode/issues/5260
18772|Reminder for anyone who was planning to join the hangouts - it's on now so click the link above. Only ~5 people so far.
18773|By analyzing the blame information on this pull request, we identified @alexandrudima, @egamma and @joaomoreno to be potential reviewers
18774|Hi **@ioklo**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
18775|"The ""paste and format"" thing is only partly a solution for me. I would like to have the indention adjusted without any other modification of the pasted content - like it's in Sublime.  The thing is, I sometimes accidentally introduce ""wrong coding style"" into a file in a repo which uses different coding style than what VSCode is configured to use. For example, I paste-and-format a piece of JS and VSCode changes the `if(condition)` to `if (condition)` with a space.  Also I noticed that often the even indention is not correct, for example the first line is not enough indented. Again, I do compare this to Sublime Text 3 because I'm in the process of switching from it to VSCode because I like several aspects more, but there are still issues like this which are very annoying."
18776|unsure who that is to be assigned to
18777|@bpasero are you not able to reproduce? I've had it happen on big and small projects. Our files change after git pull and we have to close and close re-open all the files to see the changes. So has my co-worker
18778|Right, it is known to not work with git so well due to bugs in node.js. Closing as duplicate of https://github.com/Microsoft/vscode/issues/2592
18779|**@ioklo**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
18780|To verify: launch.json and task.json are using the whitespace as configured in settings when you create them for the first time.
18781|I would have really liked to be there but it's 11am and I'm at work unable to join. I assume someone will have some stuff to share in writing afterwards? :D
18782|@bpasero Great!!! you fixed the issue. If I download the latest visual studio code, will it be having the fix incorporated?
18783|@balachandar88 end of month, next release!
18784|@bpasero Keywords may be helpful since it contains synonyms of English label words. I think when the user chooses to display translated label as primary, keywords should be enabled.
18785|I want this feature too! I even created a stackoverflow question to know that it doesn't exist yet.
18786|@bpasero Don't use PingFang / Noto Sans / Source Hans on Windows, oe adjust fonts order.  If user install those fonts on Windows will cause text blur and difficult to read.
18787|"Brief overview: 1. Tabs and working files (renamed ""open editors"") behave exactly the same way, it just depends whether you want the visuals on top (tabs) or to the left (open editors) 2. Tabs are grouped by panel visually at the top, open editors are grouped together under headers ""Left"", ""Right"" 3. Single click a file to open a preview tab (or ""open editor""); double-click the file, edit the file, or double-click the tab itself to persist 4. Debugger opens all files as preview files unless you persist the file being debugged by taking one of the above options 5. Tabs/open editors can be dragged between panels 6. Panels can be dragged to move the whole group of tabs  Looks really good, and personally (from the very pro-tab group if you read my post above), I think I will be happy to give the new ""Open Editors"" a fair shot.  Followup thoughts for the devs: 1. Since the tabs/open editors flow is exactly the same, it should be possible to do something like this: show open editors when the explorer is open, and show tabs when the explorer is closed. We can increase horizontal real estate for code and maintain tab access. Assuming there is a hide/show tabs shortcut, this would be the equivalent of pressing that and CTRL+B at the same time - if it works, it should be an option in the settings: `autoShowTabsWhenExplorerClosed` or something. If we need to see more tabs, we can either click the chevron, or simply CTRL+B to see the tabs over in the left panel. I'm not sure if that would be ""disorienting"" at all, but as long as the open editors and tabs are always exactly the same and in the same order, I can imagine that it would work very well. 2. I think you mentioned that previously closed tabs were available in one of the CTRL+Tab+something views, but have you thought about a CTRL+SHIFT+T (undo close tab) shortcut that would simply reopen previously closed tabs (in the order in which they were closed)?"
18788|I was only able to join for the last 15 minutes or so. Was it recorded?  I was disappointed (but not surprised) to see that tabs are likely to become the default. A hope you will continue to preserve the lightweight environment of VS Code and to explore progressive workflows.  Thanks,  James  On Thu, Apr 21, 2016 at 11:07 AM, anyong notifications@github.com wrote:  > Reminder for anyone who was planning to join the hangouts - it's on now so > click the link above. Only ~5 people so far. >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-212963079
18789|@ArianeLu so you say there should be a different order of font-families depending on the OS? or could we do this all in one CSS declaration (preferred).
18790|@be5invis agree, keywords can be a useful concept in cases where you can describe the command with different words. I am fine leaving that in for matching but I would not show keywords anywhere in the UI.
18791|"OK. I tried all the tests again, restarting Code between each one.  1.     ""http.proxy"": ""http://10.200.68.75:8080/"",     ""http.proxyStrictSSL"": true  Does nothing. Command line closes after a minute or so. No error.  2.     ""http.proxy"": ""http://proxy2.emr.com:8080/"",     ""http.proxyStrictSSL"": true  Does nothing. Command line closes after a minute or so. No error.  3.     ""http.proxy"": ""http://proxy2.emr.com:8080/"",     ""http.proxyStrictSSL"": false  Does nothing. Command line closes after a few seconds. No error.  4.     ""http.proxy"": ""http://10.200.68.75:8080/"",     ""http.proxyStrictSSL"": false  Does nothing. Command line closes after a minute or so. No error.  5.     ""http.proxy"": ""10.200.68.75:8080"",     ""http.proxyStrictSSL"": false  There's a blue line repeatedly sliding across under the command line. Then get ""Error connect EACCES 191.238.172.191:443""  6.     ""http.proxy"": ""10.200.68.75:8080"",     ""http.proxyStrictSSL"": true  There's a blue line repeatedly sliding across under the command line. Then get ""Error connect EACCES 191.238.172.191:443""  7.     ""http.proxy"": ""proxy2.emr.com:8080"",     ""http.proxyStrictSSL"": true  There's a blue line repeatedly sliding across under the command line. Then get ""Error connect EACCES 191.238.172.191:443""  8.     ""http.proxy"": ""proxy2.emr.com:8080"",     ""http.proxyStrictSSL"": false  There's a blue line repeatedly sliding across under the command line. Then get ""Error connect EACCES 191.238.172.191:443""  Our automatic proxy detection (WPAD) returns either proxy-man.emr.com or proxy-war.emr.com, but currently both are aliases for proxy2.emr.com, hence have address 10.200.68.75  Pinging proxy2.emr.com [10.200.68.75] with 32 bytes of data: Reply from 10.200.68.75: bytes=32 time=1ms TTL=61  Pinging proxy-war.emr.com [10.200.68.75] with 32 bytes of data: Reply from 10.200.68.75: bytes=32 time<1ms TTL=61  Pinging proxy-man.emr.com [10.200.68.75] with 32 bytes of data: Reply from 10.200.68.75: bytes=32 time=1ms TTL=61  Obviously, normal browsing is working fine."
18792|@bpasero But if you decide to display English label as primary, then the keywords is less useful, but I think it still worth preserving.
18793|To be clear, the keywords currently are english and are not translated. If we decide to keep keywords, the interesting challenge is that you would probably need to have both translated keywords and english. Hence I am thinking of not keeping keywords (we never had them and imho they are separate from the discussion here and just nice to have).
18794|Sounds like there were some good ideas. I look forward to seeing this in action.  FWIW (and if it's still relevant) I still think it's better not to have tabs in the UI _by default_. A nice clean editor header that can be clicked to see a list of files if I don't have the sidebar visible, or CTRL+TAB, is what I'm really hoping for :)
18795|Thanks for everyone who was able to attend and give us feedback today.  We've taken notes and have been continuously following the GitHub issue here.  We're listening to everyone.  @indiejames and @RyanEwen yes we took notes, and we will be posting soon.  We have not decided for sure on the default behavior yet.  However, we are proposing a solution that would make it easy to choose whether or not you want to use working files, tabs or both.
18796|@bpasero My main idea is that, if users can directly see the English label clearly (which means that the primary label is in English, not translated), then the English keywords are less important. However, if what they directly see is translated, then they may come up with synonyms of the English command, and the keywords are very useful now. Translated keywords are unnecessary.
18797|On Japanese environment, the new build looks fine on OS X and Windows.
18798|@ArianeLu I don't think most Windows users will install PingFang, except for font enthusiasts. In the CSS I suggested, the Source Han Sans family is placed after Windows fonts.
18799|"@bpasero  I think this one is best for zh-cn:  ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", ""Noto Sana"", ""Microsoft Yahei UI"", ""Microsoft YaHei"",  ""PingFang SC"", ""Hiragino Sans GB"", ""Source Han Sans SC"", ""Source Han Sans CN"", ""Source Han Sans"", ""WenQuanYi MicroHei"" ,sans-serif  YaHei UI available in Win8+, may better than YaHei WenQuanYi MicroHei is for CentOS/SUSE, better than use UKai(i dont know why it will be set as default font of sans-serif in some linux)  If linux/mac user installed YaHei, text still beautiful and clear, but other font is not clear/blur on Windows(except hi-dpi)"
18800|@bpasero @ArianeLu It's fine with `Noto Sans`, the CJK fonts are called different names (i.e. `Noto Sans CJK SC`, `Noto Sans CJK TC` and so on). I have these Noto Sans CJK fonts installed on my computer (Win 10 + zh-Hant-TW locale) and the UI font being displayed is Jhenghei as expected.
