3501|Updating milestone to January.
3502|"## vscode-tslint - [x] win | mac | linux @bpasero  - added support for a configFile config setting, see the README.md (known limitations captured in Microsoft/vscode-tslint#16) - schema support for the tslint.json configuration file"
3503|Sure! Of course I will
3504|@CraigWarford  This got already fixed for the last release (0.10.0 and greater). The closing tag for script no longer shows inside css. I also can't reproduce it. On what build are you? Do you have a code snippet?
3505|This got fixes in the latest. We now always load the latest schema from http://json.schemastore.org/project (before it was cached)
3506|Implemented
3507|"If you want that VS Code provides validation and intellisense for your JSON configuration files, you have to configure a JSON schema. If there's already such a schema accessible via http or http, add the following to the `contributes`  section:  ``` json     ""contributes"": {         ""jsonValidation"": [{             ""fileMatch"": "".jshintrc"",             ""url"": ""http://json.schemastore.org/jshintrc""         }] ```  If you want to provide one in your extension, have something like  ``` json         ""jsonValidation"": [{             ""fileMatch"": "".htmlhintrc"",             ""url"": ""./schemas/htmlhintrc.schema.json""         }] ```"
3508|When I run the debug process (F5) it prints everything alright. I could use this to run node scripts although it's kind of annoying the messages of debugging in the console and that I need to stop the debugging process every time the script completes. Is there a way to auto stop the debugging process if a script completes ok?
3509|Closing this issue as this fix will be covered by the changes in #599
3510|I verified that this is an issue of the grammar and not our textmate engine.
3511|This issue was moved to Microsoft/TypeScript-TmLanguage#26
3512|Keyword const is not highlighted because we use textmate grammers and I guess they do not highlight keyword 'const' atm.  @weinand It seems that the parameters `id` and `age` in this function get confused. Might you have an idea why this happens?
3513|Autoclosing of xml tags is currently disabled. I'd like to bring it back at some point
3514|@bpasero I would like to be able to specify minimum viewlet width. I do not think something like this is possible at the moment, right?
3515|@isidorn no it is hardcoded in the layout code today.
3516|Hi **@mohsen1**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
3517|**@mohsen1**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
3518|@jrieken pushed a fix for this default keybinding conflict
3519|This is quite a large change without tests.  Today we have the cut-off date for Dec 2015, so I don't feel confident enough in merging this in for the Dec 2015 release.
3520|Same problem, worked for me as well. Thanks!
3521|@SofianHn do we know how many times did this issue happen?
3522|"## line/page scrolling - [x] win @aeschli - [x] mac @isidorn  - [x] linux @aeschli - not platform specific - win/linux: <kbd>Ctrl</kbd>+<kbd>Up</kbd>, <kbd>Ctrl</kbd>+<kbd>Down</kbd>, <kbd>Ctrl</kbd>+<kbd>PageUp</kbd>, <kbd>Ctrl</kbd>+<kbd>PageDown</kbd> - mac: <kbd>Ctrl</kbd>+<kbd>PageUp</kbd>, <kbd>Ctrl</kbd>+<kbd>PageDown</kbd>, <kbd>Cmd</kbd>+<kbd>PageUp</kbd>, <kbd>Cmd</kbd>+<kbd>PageDown</kbd> - should now scroll the viewport by a line or a page.  ## select current line - [x] win | mac | linux @isidorn  - not platform specific - win/linux: <kbd>Ctrl</kbd>+<kbd>I</kbd> - mac: <kbd>Cmd</kbd>+<kbd>I</kbd> - should expand selection to the current line and, if pressed multiple times, to the following lines. - please check that it works on long lines where word wrapping kicks in or when using `wrappingColumn: 0`.  ## numpad keys - [x] win @bpasero - [x] mac @bpasero - [x] linux @bpasero  - **is platform specific** - please check that you can add and trigger keybinding rules with the following keys:   - `numpad0`   - `numpad1`   - `numpad2`   - `numpad3`   - `numpad4`   - `numpad5`   - `numpad6`   - `numpad7`   - `numpad8`   - `numpad9`   - `numpad_multiply`   - `numpad_add`   - `numpad_subtract`   - `numpad_decimal`   - `numpad_divide`  ## find widget improvements - [x] win | mac | linux @weinand  - [x] linux @aeschli  - not platform specific - <kbd>Ctrl</kbd>+<kbd>H</kbd> (mac: <kbd>Cmd</kbd>+<kbd>Alt</kbd>+<kbd>F</kbd>) now always focuses the replace field in the find widget. - <kbd>Ctrl</kbd>+<kbd>F</kbd> (mac: <kbd>Cmd</kbd>+<kbd>F</kbd>) now always focuses the find field in the find widget. - when focus is in the find field or the replace field in the find widget, <kbd>Ctrl</kbd>+<kbd>Down</kbd> (mac: <kbd>Cmd</kbd>+<kbd>Down</kbd>) will focus the editor. - <kbd>Alt</kbd>+<kbd>C</kbd> (mac: <kbd>Cmd</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>) now toggles case sensitive. This should work also when the find widget is hidden and should reflect in the selection highlight. - <kbd>Alt</kbd>+<kbd>W</kbd> (mac: <kbd>Cmd</kbd>+<kbd>Alt</kbd>+<kbd>W</kbd>) now toggles match whole words. This should work also when the find widget is hidden and should reflect in the selection highlight. - <kbd>Alt</kbd>+<kbd>R</kbd> (mac: <kbd>Cmd</kbd>+<kbd>Alt</kbd>+<kbd>R</kbd>) now toggles match regex. This should work also when the find widget is hidden and should reflect in the selection highlight.  ## extension deactivate() - [x] win @dbaeumer - [x] mac @joaomoreno  - [x] linux @aeschli - **is** platform specific - the extension host now calls `deactivate()` and `dispose()` on subscriptions pushed in the `activate()` ctx - please try to author an extension that:   - when activated, forks/spawns a process   - the forked/spawned process logs to a file if it is alive (with a timestamp)   - on `deactivate()` or through a subscription pushed in the `activate()` ctx,   - the extension sends the forked/spawned process a graceful shutdown request   - the forked/spawned process listens to this graceful shutdown request and gracefully shuts down   - verify that when closing VSCode the forked/spawned process shuts down gracefully.  ## keybindings with non-US standard kb layout - [ ] win | mac | linux @bpasero (maybe someone else needs to try, I am running into: Keyboard: Widget not showing correct values #1275) - **is** platform specific - please see #713 for a detailed explanation - **TL;DR**. We now have a widget to help with authoring keyboard rules and we now render UI labels taking the keyboard layout under consideration. - **Setup**: please change to a keyboard layout different than US standard. Preferably, this is the keyboard layout that your physical keyboard has. - The widget:   - it only shows when authoring the `keybindings.json` file   - it is invokable via <kbd>Ctrl</kbd>+<kbd>K</kbd> <kbd>Ctrl</kbd>+<kbd>K</kbd> (mac: <kbd>Cmd</kbd>+<kbd>K</kbd> <kbd>Cmd</kbd>+<kbd>K</kbd>)   - it is invokable via clicking on the ""Define Keybinding"" launcher   - it shows an input box that reflects **what VSCode sees when you press keys**   - it does not help with defining chords or seeing conflicts, etc, its intent is to help with different kb layouts.   - no keybindings are triggered while you try keybindings   - <kbd>Escape</kbd> or focus loss dismisses it   - <kbd>Enter</kbd> accepts it - The UI labels:   - easiest to see them in the <kbd>F1</kbd> list   - the keyboard layout is taken into account only once and then cached, so if you change keyboard layouts, you need to reload the window   - the idea is that the keys `VK_OEM_1`, ... etc are looked up and checked what they would produce if typed under the current system keyboard layout.   - the labels then render with the produced character.   - e.g. `Split Editor` shows under `German (Switzerland)` as <kbd>Ctrl</kbd>+<kbd>ä</kbd> because you trigger it by pressing the keys <kbd>Ctrl</kbd> and the key that would produce `ä`.   - dead characters: Sometimes, under some kb layouts, some keys don't produce anything and act more like composing (accents). To be able to render something, we display in the UI label the value or the shiftedValue of those keys."
3523|@egamma Looks like it is a confirmed driver issue of Ubuntu, not of Chromium/Electron
3524|+1
3525|+1
3526|The electron folks confirmed the issue on their side. Until this issue get fixed in electron and we get the new build, the workaround is to disable telemetry.
3527|Osx El Capitan version 10.11.2  vscode Version 0.10.3 (0.10.3)
3528|This dialog is showing to me. I put the credentials and show the error
3529|"Here's a minimal test case with a trivial interface and implementation: https://gist.github.com/DCoderLT/8a6df3fdddf8d3484900 .  After some debugging, it seems I missed a key detail earlier, and VS Code is probably doing the right thing - the TypeScript compiler did not have a problem with my setup because I was invoking it via gulp and giving it a file list that included both the .ts and the .d.ts files. Running plain `tsc -p .` produces the exact same behaviour as VSCode. If I amend the `tsconfig.json` in the test case to explicitly include both .ts and .d.ts under `""files""`, both VSCode and `tsc -p .` recognize the interface just fine. If I rename the .d.ts file, again both VSCode and `tsc -p .` recognize the interface just fine.  Given this info, it looks like `tsc` treats such paired .d.ts files as the output from an earlier ""generate declaration files"" run and ignores them when collecting the files for compilation. IntelliJ's parser treats them like regular files. When I think about it, tsc/VS Code's behaviour is quite reasonable, although not completely intuitive.  I think I will remove those interfaces from the global scope and export them from the module, so the `.d.ts` file won't be necessary any longer."
3530|"i been try to copy and paste ""Tôi yêu Việt Nam"" into VS code, i manage to save it with the change from encoding from others language to UTF-8  will you possible to change the encoding from your current language to UTF-8 inside VS code? because i been using version 0.10.3 VS code for chinese language and korea language with UTF-8.  hope this might be helping you!!"
3531|"There seems to be nothing related to tasks showing up in the Command Palette. At the > prompt, if I type `task`, absolutely nothing shows up. For instance, the instructions at https://code.visualstudio.com/docs/languages/typescript#_transpiling-typescript-into-javascript about how to transpile TypeScript code do not work. There is no ""Configure Task Runner"" command.  This is on Win10,  Version 0.10.3 Commit 783ecf841a2b21edca6d86853670cae89b4c244f Date 2015-11-26T14:06:31.538Z Shell 0.34.1 Renderer 45.0.2454.85 Node 4.1.1"
3532|Not that I know, but please ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/vscode) using the tag `vscode`, then others can chime in, Thanks for your interest in VS Code.
3533|Duplicate of #296
3534|fyi: @alexandrudima
3535|Also you do not have to restart VS Code you can also run 'Reload Window' from the command palette.  Closing as requested.
3536|I also saw this. https://github.com/Microsoft/vscode/issues/543
3537|This is going to an infinite loop since `_getNextMatch` circulates through all the matches...
3538|Dupe of https://github.com/Microsoft/vscode/issues/23, this should be fixed in the next version.
3539|@Tyriar thanks. Closing as a dupe of #23
3540|@DCoderLT ok to close?
3541|Yes, I think this can be closed.
3542|Awsm! Can't wait. Thanks.
3543|@DCoderLT thanks, closing.
3544|@alexandrudima fyi.
3545|Thanks!
3546|Do you mean adding icons? https://github.com/Microsoft/vscode/issues/211
3547|I'm seeing the same issue as @remcoros  OS: Windows 7 x64 Extension: https://github.com/pagebrooks/vscode-hl7
3548|@alexandrudima - Looks good! Thanks for quickly resolving this. I think that should do it for the most part.  From a quick glance at the commit, I'm not sure if the `when` context as suggested by @rhbecker has been added, but I think that's quite important to ensure that the editor shortcuts aren't polluted when the find box is not open.
3549|Sorry @egamma , if my question offence your professional skill, but if nobody chime in, do you think that VS code can be improve?   And for your info, if stack overflow can provided me an answer, do you think that i still need to come here?  lastly, since for the moment VS code are not possible to make it work with android studios, so why not turn my question into a new feature for the coming version of VS code?
3550|"@alexandrudima   Sorry, my last comment seems a bit off, in retrospect.  What I should have suggested is re-binding <kbd>Ctrl</kbd>+<kbd>h</kbd> and <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>h</kbd>, with context ... `""when"": ""editorFocus && findWidgetVisible""`.  Both would execute the replacement already entered into the find / replace fields, regardless of which of the fields in the find widget has focus. The former would replace and advance to the next match. The latter would replace and advance to the prior match.  Suppose you ... 1. <kbd>Ctrl</kbd>+<kbd>h</kbd> to open the find widget. 2. Input string to find, or accept string already present from prior find, or because it was highlighted when you entered the widget. 3. <kbd>Tab</kbd> to reach the replace field. 4. Input replacement text.  Presently, you can only execute the replacement if you stay in that replace field, from where you can hit <kbd>Enter</kbd>. But what if you <kbd>Tab</kbd> back to the search field - maybe to update the search string? Both fields are populated. Seems like it should be possible to execute without first switching back to the replace field.  Probably more importantly, suppose you <kbd>Esc</kbd> out of the find widget entirely. The first press of <kbd>Ctrl</kbd>+<kbd>h</kbd> re-opens the widget, with previous values still populating the find / replace fields. It would be nice if you could then immediately re-press <kbd>Ctrl</kbd>+<kbd>h</kbd> to execute, without having to <kbd>Tab</kbd>, then <kbd>Enter</kbd>.  And of course, switching replacement execution to a keybinding would then allow for a binding to advance backward after each replacement.  Hopefully that all makes sense?"
3551|"+1 to fuzzy matching file path, extensions and partial names. I can't find `""search.fuzzyFilePicker""` command though. I'm using 783ecf841a2b21edca6d86853670cae89b4c244f"
3552|"You may also want to add ""when"" to the docs."
3553|Right. Duplicate of #211. Can be closed then
3554|I am using the username that I found in the bottom left corner of the GitLab UI. You can't use your e-mail address.  ![image](https://cloud.githubusercontent.com/assets/22350/11760987/b77b20c8-a0b1-11e5-989f-187c5213f4c0.png)  And the password set in the following dialog:  ![image](https://cloud.githubusercontent.com/assets/22350/11760989/c89fabc6-a0b1-11e5-89bd-bb7db262dd94.png)  Please make sure you are using the right credentials, reset your password, try again, etc.
3555|# Suggest widget #1006 #1079 - [x] win @bpasero  - [ ] mac @egamma  - [ ] linux  The Suggest widget underwent quite some heavy rework behind the scenes. Make sure everything still works as before.  # Scoped git services #718 - [ ] win @SofianHn   - [x] mac @isidorn  - [ ] linux @weinand   You should now be able to open a folder inside a git repo and still have the git features enabled.  # Git sync & publish action #908 - [x] win @dbaeumer  - [ ] mac @egamma  - [ ] linux @weinand   The sync action is back in the status bar:  ![image](https://cloud.githubusercontent.com/assets/22350/11761005/3e9a1b4a-a0b2-11e5-8144-812cbc021e16.png)  If you check out to a branch that doesn't have an upstream link, we assume it is **unpublished**. The following UI should show up. Clicking it will publish the branch.  ![image](https://cloud.githubusercontent.com/assets/22350/11761011/563d6806-a0b2-11e5-9fb4-dadf19755147.png)  If you are in a repository without a **remote** configured, none of the previous actions should show up:  ![image](https://cloud.githubusercontent.com/assets/22350/11761022/83add9e2-a0b2-11e5-9890-83b88f96437f.png)
3556|I know my credentials. I use this repository from several project with eclipse and command line too and works with ssh and https connections.   Thank for all :)
3557|@mohsen1 this will be available in our December release, the commit you are on was a bugfix release only.
3558|Closing to reflect the work that was done. Suggest to open individual issues for bugs around the implementation and requests to broaden fuzzy searching to other places.
3559|@RyanCavanaugh fyi we plan to release on the insiders channel on Monday 14th
3560|@aroemen What OS are you using and what laptop brand. Sometimes, the trackpad gestures are implemented in funny ways (e.g. they send ArrowLeft/ArrowRight key down events instead of scroll events).
3561|@lyquocnam Can you please provide more details: - what is your OS - Is there a problem with typing vietnamese (i.e. if you paste the text, does it work) - Is there a problem with opening a file containing vietnamese (i.e. econding issue or font rendering)
3562|Nice! Thanks all
3563|it work only for copy and paste, but can not write directly  vietnamse people use this tool to write vietnamse character: http://unikey.vn/vietnam/ but any special char: ê, ô, í, ì... has been removed..  I'm using windows 10 and lastes version of VSCode. i tested on utf-8 new file. :(
3564|looks like a good catch, we need to preserve copyrights in generated .js files.
3565|Thanks, we have just frozen for the December update. This might not make it for the Dec update.
3566|We have just frozen for the Dec update. This is a larger PR it might not make it into the Dec update.
3567|@jrieken can you repro this behaviour on OS X?
3568|Yes, this error is permanent on OS X.  Removing and installing VScode again did not help
3569|Just select the text and right click command. If the selection was completed over an object, the cursor will jump to the definition of the object.  When work with touchpad.  If work with mouse - all OK.
3570|"There is a work around :smile:. Define define different regular expression that matches the same files:  ``` json {     ""files.exclude"": {         ""**/*.js"": { ""when"": ""$(basename).ts""},         ""**/*?.js"": { ""when"": ""$(basename).tsx""}     } } ```  @bpasero can you pls check that we cover `when` in our docs."
3571|closing as duplicate of #211 as requested, thanks.
3572|@bpasero fyi
3573|So my preference would be that auto save can also be enabled in the web-based workspace by making it less 'aggressive'. See  also #353 and #1055.  @bpasero fyi
3574|https://cloud.mail.ru/public/Dg3L/oAxeRaqVy
3575|Fixed the infinite loop issue by implementing `_getAllMatches` in `SelectNextFindMatchAction`.
3576|:+1:
3577|Not convinced, but Sublime seems to do this too.
3578|@freezestudio can you attach the file please?
3579|It is here: https://code.visualstudio.com/docs/languages/typescript#_hiding-derived-javascript-files
3580|If this one doesn't make it, I recommend rolling out the linear-gradient snippet, because if people use it, they'll be putting broken code on the web. But it should be a very safe fix.
3581|GitHub Setup error log file: this rename .log to .txt: [install.txt](https://github.com/Microsoft/vscode/files/60307/install.txt)
3582|![screen shot 2015-12-12 at 10 10 05 pm](https://cloud.githubusercontent.com/assets/5505433/11765250/352e78f6-a11d-11e5-92fb-6a78cc55487b.png)  You can open a folder by drag-and-dropping it on the VSCode icon on the dock. I personally don't like apps that clutter the right click menu.
3583|+1 here in addition to user voice I don't know which is  checked more
3584|+1
3585|## ES6 JavaScript grammar - [ ] any platform @joaomoreno       We're using a modified TypeScript grammar for JavaScript tokenization - Have a look at some JavaScript files, including ES6, make sure they look fine - Test the default light and dark theme as well as some contributed themes - Verify all duplicates of #133  ## JSON schema configuration - [x] any platform @dbaeumer       The built-in schemas have been removed. They are now offered by the extensions. The schemas are now loaded directly from the schema server. That way they are more up-to-date, but might lack descriptions - Check hover and intellisense support for package.json, project.json, bower.json - Test tsconfig.json, global.json and jsconfig.json - Test that associating patterns to schema still can be done in the settings - Test that you can configure a schema from a extension. Test an extension from a server or from a file in the extension (see #489, last comment for configuration instructions)  ## Dark and light theme polish - [ ] any platform @isidorn   Due to the move to textmate tokenizer, there were changes in the appearance of the default light and dark theme: Some themes got far more colorful, in particular JavaScript, some languages lost colors, e.g. Jade and XML. The goal was to stay as close as possible to what we had in 0.9.0: We stick to a few major colors: blue for keywords, green for comments and red for strings. - Test JavaScript and TypeScript in the light and dark theme, compare it our old state at https://opentools.azurewebsites.net/try. Note, new colors for method, function and parameters declarations - Test XML, HTML, Jade, Razor, Handlebars, CSS, LESS and SASS, JSON in the light and dark theme: They should all look consistent. Check stings, comments... - Try some of the other languages as well. Check stings, comments...
3586|The file is containing null bytes which we then detect as binary type. However the file seems to use UTF 16 as encoding. We only support that if the file has a BOM in the beginning. I think other editors just try to open the file with UTF 16 if they detect null bytes but this can also fail.   I think we should allow to change the encoding from the editor in all cases even if we think the file is binary.
3587|@1dot75cm Tested on F21 and F23, looking good so far.
3588|"@aeschli @wenwu449 Can this fix be targeted at a milestone? I'm trying to understand when this would be released, as it is a major roadblock for authoring Azure Resource Manager (ARM) JSON Templates.  <img width=""332"" alt=""screen shot 2015-12-13 at 7 31 57 am"" src=""https://cloud.githubusercontent.com/assets/466713/11767468/ab63043a-a16b-11e5-8ebc-f4005cff7408.png"">"
3589|Thanks test. @bgse In fact, I refuse to 'Shift' key. My little finger is very fragile. :)))))))))
3590|"I'm having the same issue - I get 'The application ""Visual Studio Code"" can't be opened.'. From a command prompt, I can run `/Applications/Visual Studio Code/Contents/MacOS/Electron` just fine. There's no obvious 'mark of the web'-style blocker. Right-clicking the icon gives the usual ""Open"" and ""Show package contents"" options. This is a 2012 Retina MacBok Pro running 10.11.1; VS Code 0.10.3.  For what it's worth, I had a previous version of Code on this machine. When I ran it, it said it was too old to auto-update and helped me download the latest. When that didn't work, I blew it away and re-downloaded the zip from visualstudio.com. Same problem."
3591|Further notes: From Finder, I'm able to run the Electron executable. The first time I did so, I got a Gatekeeper (or whatever Apple calls that tech now) prompt and authorized it. I still cannot simply double-click the VS Code icon, though.
3592|"OK, I was able to finally fix this. From Terminal, running ""open -b com.microsoft.VSCode"" somehow went down a different launch path which triggered the GUI Gatekeeper warning. Now I can run VS Code by simply double-clicking the icon in Applications. Probably a bug on Apple's side, but maybe there's something wrong with your code-signing or some other piece of security infrastructure?"
3593|Have you added a tsconfig.json file to the root of the project?
3594|I wish one could upvote comments. @danlofquist 's solution is clean and makes OmniSharp work in VS Code - thank you! :+1:
3595|`\t` should work in 0.10.3. Finding multi-line strings is captured in https://github.com/Microsoft/vscode/issues/313
3596|This can be fairly easily achieved using find and replace with regex. This sort of functionality would probably better be captured in an extension rather than the core editor.
3597|This is a good idea. Would make it much easier for me for to use my download utility.
3598|The script is now live at https://github.com/hashhar/vscode-universal-installer
3599|I agree with @Tyriar.
3600|This (in theory) should be a safe merge. 3 of the changed files are just updating tests to take into account that the data changed and flexbox snow flex in the latest standard (and supported that way by browsers).   The other 4 files are just data changes. It fixes a lot of copy paste issues in the old existing data where the description from another property is used. It also adds a lot of new properties, of which many are compiled out for the moment until 2 browsers support them. I've tested most of the new features added and they're working, except Edge still isn't showing up. I've created another bug for that, as it isn't related to this commit, and I haven't tracked down why yet.
