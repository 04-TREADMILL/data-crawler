9901|Without detailed steps we cannot address this issue - closing, pls feel free to reopen with detailed steps.
9902|This is not exactly the same as greying out, but thanks for the tip.
9903|@sofian pls see the attached crash dumps, can you analyze them pls.
9904|You have to set `files.trimTrailingWhiteSpace` to `true`
9905|@felixfbecker Extensions are however one of those things that doesn't version control. Neither is keymap.
9906|@csholmq That is a seperate issue though. For example, there could be a `.vscode/extensions.json` that specifies which extensions should be installed for this project, like editorconfig or a specific debug adapter, with a semver version constraint like a package.json.
9907|@curtw how does you launch config look like?
9908|@Tyriar Some more context. I cannot even start Code even if I build it locally.  This is what happens.  ![screenshot from 2016-02-21 17-01-41](https://cloud.githubusercontent.com/assets/10473142/13202328/e0a6f290-d8bc-11e5-888c-ae2dd1b56622.png)
9909|@egamma :  I'm very sorry for causing this trouble, but you need to put text containing angle/square brackets into code quotes, I'm afraid. Otherwise, GitHub interprets and eventually deletes them as invalid tags:  ``` html <p>You can type + again to toggle between the completion list and the doc.</p> ```  So I can't read them. They are only visible to you when you edit your reply.  Would you mind repeating your reply and putting the keyboard shortcuts into code quotes?
9910|tsss, sorry  You can type CTRL+SPACE again to toggle between the documentation and the completion suggestions.
9911|so this is the way to do this :smile:  <kbd>CTRL</kbd>+<kbd>Space</kbd>
9912|This is not related to the original API request raised in this issue, but there is a sync extension that is using Gists. https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync
9913|It only happens when I try to start it from the shell. Double clicking on the symlink as well as the executable launches it without problem. I even tried clearing `~/.config/Code`.  Using a different Window Manager also didn't help. I'll now try using a different shell.
9914|Yup. It's the SHELL. Using zsh also gave the error. But as soon as I set `SHELL=/bin/zsh`, it started.  @Tyriar Maybe add this to the docs or FAQ. I'll try narrowing down the source of this. I was able to reproduce it on another install. This happens after some system updates.
9915|Works for every possible value of SHELL. It just doesn't work when SHELL=/bin/bash. `/bin/sh` works. `insert random string here` also works.  This is a workaround but I would like a fix.  This seems relevant. https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/env.ts#L22 Changing that line to a hardcoded value allowed me to run it. I set it to '/bin/sh'.
9916|@yageek agreed updated the doc comment
9917|@p-i- try to follow this tutorial https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-app-using-vscode/ but you are probably going to get stuck at some point too. Good luck.
9918|The formatting support provided TypeScript supports settings which we currently do not expose to the user.
9919|The JavaScript infrastructure is backed by TypeScript.  We are now moving to a new infrastructure called Salsa that is still back by TypeScript and it report less errors. Pls see https://code.visualstudio.com/Updates#_javascript-salsa-preview
9920|Ahh.. works like a charm. Brilliant! :clap: :smile:
9921|Reopening - since the issue was assinged to the Jan milestone it should be in 0.10.8.
9922|Actually...it used to track, but it doesn't anymore. That's what I'm seeing on Windows7 anyway with the latest update.
9923|Thanks @egamma - I'll take a look.  Will this prevent errors such as this being reported by VSCode that can't actually be remedied in straight JavaScript?
9924|I wouldn't use store for this since as per git specs it store the password unencrypted on disk  https://git-scm.com/docs/git-credential-store  I would use   ``` git config credential.helper cache ```  instead with optional timeout  https://git-scm.com/docs/git-credential-cache  This is still just a workaround until a proper fix but it works.
9925|Yes this would be a useful feature. Debuging just a single file. Please add this.
9926|"My launch.json file is unaltered from that which VS Code created by default:  ``` {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/app.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null         },         {             ""name"": ""Attach"",             ""type"": ""node"",             ""request"": ""attach"",             ""port"": 5858,             ""sourceMaps"": false,             ""outDir"": null,             ""localRoot"": ""${workspaceRoot}"",             ""remoteRoot"": null         }     ] } ```"
9927|I'm also for **Hierarchical** folding. `On hover shoving/always visible` can be a configurable option with either as default. This option is also showing the closing bracket, which is useful even if you are not going to fold. In case of `always visible` I would still make the controls 50% opacity and 100% if hovered over. The **Chevrons** kinda defeat the purpose since they introduce the same level of confusion as the level of clarity they bring with them.  Thank you for your hard work!
9928|Fixed. Another shortcut was overriding.
9929|@DustinCampbell Thank you for letting me know.  No worries about commenting I just wanted to make sure it wasn't lost in the shuffle.
9930|@ace007 Seems like I ran into the same issue #3131 . I had some troubleshooting ideas but couldn't find somebody who had faced this before.  Could you try running   ``` echo $SHELL sudo chsh # Set it to /bin/sh sudo reboot ```  Try running Code again. AND,  ``` echo $SHELL sudo chsh # Set it to /bin/bash sudo reboot ```  Try running Code again.  I want to isolate if the reason is /bin/sh or /bin/bash.
9931|Thanks for the ⌘K E shortcut. Looks like its a generalized panel focusing utility. Its great. But could there be a similar utility (may be ⇧⌘W) just like ⇧⌘E to focus the Working Files panel?
9932|Just noticed a (very) long path :smile:  - ⇧⌘E followed by ↓ or ↑ and ← to highlight the desired folder - ⌘K E to focus the _Working Files_ panel - Tab to focus the new file icon ![screen shot 2016-02-21 at 1 12 21 pm](https://cloud.githubusercontent.com/assets/949380/13205436/d984b04e-d89c-11e5-9bb0-be3ee92e2e97.png) - Press Enter  Using mouse seems a better option than the one I listed above. Any better work around/pointer would be very helpful. Thanks!!
9933|Interesting, I can run it just fine with `bash` as well as `zsh`.
9934|It's not the terminal emulator. It's the shell that $SHELL is pointing to.  Try setting $SHELL to /bin/bash or /bin/sh.
9935|It works when `$SHELL` is `/bin/bash`, `/bin/sh` and `/bin/zsh`.
9936|Thanks. Consider this closed then. A workaround is known atleast.
9937|"FWIW, this is also true on OSX (10.11.3) with 96 DPI monitors, but setting the zoom level to vscode to anything other than default (e.g. I have `""window.zoomLevel"": 1`).   It appears to be related to 'subpixel' scrolling of the editor text area. Might be different issue, however."
9938|"@egamma In other UX related feedback, do you know if any of these items can be worked around or configured: - When showing a file in the ""peek"" view, if the user presses escape in either view, the peek window goes away.  This isn't great with this use case because someone may naturally press escape to clear the selection in one of the windows - Is there any way to change the size of the peek window?  (it would be awesome if the user could manually adjust it by dragging a splitter on the bottom of the peek window) - Is there any way to disable the double click behavior inside the click window?  (if you double click it opens the peeked file in the editor, replacing the current file)  This doesn't work very well if the user just wants to double click to highlight a word inside the peek editor  I know what I am asking about is a bit different than what the peek view was probably intended to support.  I am effectively using it as a ""picture-in-picture"" type view to open a sub-editor inside another editor so the developer can see and edit multiple related files in context.  I haven't see any editor implement this before but it seems like a pretty interesting way to allow code editing."
9939|I had the same problem today.   When I ran   ``` cmd node node_modules\vscode\bin\compile ```  I got  ``` node_modules/vscode/vscode.d.ts(2761,16): error TS2435: Ambient modules cannot be nested in other modules or namespaces. ```  So I commented out the lines at `node_modules/vscode/vscode.d.ts(2761,16)`  ``` js // declare module 'vscode' { //  export = vscode; // } ```  and then `vsce package` worked for me.  @elonmallin  try running `node node_modules\vscode\bin\compile` from the root folder of your extention and see what errors (if any) are outputted.
9940|+1 IntelliSense is great, having it for JSX files would be cruc
9941|OS is Win 7. After restarting the computer the problem is gone. If this problem reproduces, I'll post here.
9942|Have to agree. While multi editor is sometimes (often) useful, I miss my tabs sooo much.  I would even go as far as saying that each editor should have its own list of tabs.
9943|"This issue is still alive in 0.10.9:  <img width=""466"" alt=""2016-02-22 11 31 52"" src=""https://cloud.githubusercontent.com/assets/1905503/13211176/e5ef907c-d957-11e5-84cb-8f0b7a69bb74.png"">"
9944|If you use the command Unfold All then the code is folded. This is due to a switch in the commands in the code. Fixed in PR's #3070  and #3108, the second of which is mine :smile:
9945|Indeed, this is our current strategy for handling large files: - files < 5 MB get synced everywhere - files < 20MB get only colorization and don't get synced to the extension host (invisible to extensions), nor to web workers (no diff) - files > 20MB don't get colorization and don't get synced.
9946|False alarm, it was a bad edit on my machine
9947|@yageek IMHO this does not really fit a format edit. A format edit should do transformations that do not affect the program logic (mostly adding/removing whitespace). Maybe what you want can be achieved (a lot easier) with `onEnterRules`?:  ``` languages.setLanguageConfiguration(modeID, {     onEnterRules: [         {             beforeText: /^\s*\/\/.*$/,             action: { indentAction: IndentAction.None, appendText: '// ' }         }     ] }); ```  ![onenter](https://cloud.githubusercontent.com/assets/5047891/13212934/7d622392-d945-11e5-9963-6b15f4f7da94.gif)
9948|In the January release, `Ctrl+F` always seeds the search string from the selection, while `Ctrl+H` only seeds it if there was no search string.  We have fixed this in #2953
9949|"@PauliSu It is a good idea to keep your files as UTF8, as you've been doing so far. But browsers have no way of knowing the charset, therefore you should use an HTTP header to indicate content type or use `<meta charset=""UTF-8"">` in the `<head>` section."
9950|"@Thaina Here I have extracted the default keybindings for `tab`:  ``` { ""key"": ""tab"",                   ""command"": ""tab"",                                      ""when"": ""editorTextFocus && !editorTabMovesFocus"" }, { ""key"": ""tab"",                   ""command"": ""editor.emmet.action.expandAbbreviation"",                                      ""when"": ""editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !editorTabMovesFocus"" }, { ""key"": ""tab"",                   ""command"": ""jumpToNextSnippetPlaceholder"",                                      ""when"": ""editorTextFocus && inSnippetMode"" }, { ""key"": ""tab"",                   ""command"": ""acceptQuickFixSuggestion"",                                      ""when"": ""editorFocus && quickFixWidgetVisible"" }, { ""key"": ""tab"",                   ""command"": ""acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible"" }, ```  When you press <kbd>Tab</kbd> all the above rules are tested from bottom to top and the first one that evaluates to `true` will execute.  The one you don't like and want to ""remove"" with your `keybindings.json` is the last one. So adding the following rule to your `keybindings.json`:  ``` { ""key"": ""tab"",                   ""command"": ""tab"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible  && !editorTabMovesFocus"" }, ```  will make the one you want to remove never execute because the new one you have added will always match before the default one.  [More explanations and examples](https://code.visualstudio.com/docs/customization/keybindings#_customizing-shortcuts)"
9951|In the meantime, you can workaround by using `Ctrl+U` that undoes the latest cursor operation you did.
9952|@rkeithhill sorry for not mentioning it, but you should use our [alpha](https://vscode-builds.azurewebsites.net/alpha) release, since the evaluate on hover feature is not shipped in our January release. It will be a part of February. As for the hover tips delay, it is also implemented in the alpha release (there is a 300 ms timeout).  Can you please try it in [alpha](https://vscode-builds.azurewebsites.net/alpha) release and if you still see this strange behaviour I will investigate the underlying issue.
9953|@rpanak :+1: I also use Total Commander with Shift+F4 going to VSCode.  I always created files with extensions before, but now I tried creating a file without an extension, but could not reproduce with TC 8.51a and VSCode 0.10.8.  Here is how I have it configured: ![image](https://cloud.githubusercontent.com/assets/5047891/13213559/0e8fb704-d94a-11e5-8478-9676a53eebf6.png)
9954|@SiriusGuo We support independent multiple cursors, which are slightly more powerful than column selection. So, you could use `Ctrl+Alt+Down/Up` to add more cursors and then regular `shift+left/right` to expand each cursor's selection. Or `ctrl+shift+left/right`, or `end`, etc.  @zry656565 @groksrc @diegostamigni Is there something I'm missing or can you get column selection and more with the multicursor support we already have?  ![multicursor](https://cloud.githubusercontent.com/assets/5047891/13213644/a91acca0-d94a-11e5-98c1-f85425a4fcda.gif)
9955|This has been fixed in 0.10.8. Shift-Tab from replace field now goes to the find field
9956|@bpasero Here is what we listen for in `extHostDocuments`:  ``` typescript         this._toDispose.push(eventService.addListener2(FileEventType.FILE_SAVED, (e: LocalFileChangeEvent) => {             this._proxy._acceptModelSaved(e.getAfter().resource.toString());         })); ```
9957|Could be. I saw in the API that there is also an `afterText` condition. Is it possible to use both conditions at the same time ?   I would like to perform this addition but only if the next line contains some specific keywords. May be I'm too bad at Regex, but I can not manage to find the appropriate `afterText` Regex.   For example, with a try for the `type` keyword, I put: `afterText: /\s*\ntype.*/g,`  but nothing is appended to the source code.
9958|Hopefully this will work in all languages for curly braces including PowerShell and Javascript and not only C languages. Comment folding would be nice to.
9959|This is OS behaviour.
9960|@egamma should we simply not use this github feature?
9961|A hunch tells me it is a C# language service issue, which keeps informing Code that there is a method call, even after leaving the parens. Might be wrong though.
9962|"``` Name: ""desktopicon""; Description: ""{cm:CreateDesktopIcon}""; GroupDescription: ""{cm:AdditionalIcons}"" Name: ""quicklaunchicon""; Description: ""{cm:CreateQuickLaunchIcon}""; GroupDescription: ""{cm:AdditionalIcons}""; Flags: unchecked; OnlyBelowVersion: 0,6.1 Name: ""addcontextmenufiles""; Description: ""Add """"Open with {#NameShort}"""" action to Windows Explorer file context menu""; GroupDescription: ""Other:""; Flags: unchecked Name: ""addcontextmenufolders""; Description: ""Add """"Open with {#NameShort}"""" action to Windows Explorer directory context menu""; GroupDescription: ""Other:""; Flags: unchecked Name: ""addtopath""; Description: ""Add to PATH (available after restart)""; GroupDescription: ""Other:"" Name: ""runcode""; Description: ""Run {#NameShort} after installation""; GroupDescription: ""Other:"" ```"
9963|Closing as duplicate of #2330
9964|Definitely not a bug, but big feature work. Maybe create a story for this?  What is supported in documentation? Markdown? HTML? Images?
9965|:+1:
9966|Hey, thanks a lot. I noticed there was an error in my code when I ran that. Fixed it, and now it's working.
9967|@BleyChen says in #3226:  > #1945 ,anyone know when this feature will release?
9968|@alexandrudima Is this related to #3114 ? I just pushed a fix to programmatically setting the __characterPairSupport. Let me know if that's not the right approach.
9969|We use json with comments in most other configuration files, except in `package.json` that needs to be processed by other tools. So unless there's something blocking here, I would still allow comments in language configuration files
9970|@johnyradio Since 0.10.8, `Shift-Tab` moves focus from replace field to find field.
9971|Yeah, that's the only way for now. I'm looking into bringing characterPairSupport in the configuration json file
9972|A first good step would be to write an extension and use the `registerHoverProvider` API.  ping @jrieken
9973|The problem is that the `setLanguageConfiguration` call from `jsonMain` overwrites the language configuration defined in `json.configuration.json`. I am looking into making those calls additive.  fyi @aeschli
9974|An extension would work beautifully here. Wanna give it a try? :+1:
9975|The Java tokenizer marks the import identifiers with the scope `storage.modifier`. It does the same for modifiers like `private` and `public` which we want to be marked as keywords.  We are using the tokenizer from https://github.com/textmate/java.tmbundle. A change request would have to be made there.
9976|This extension looks useful: [dkundel.vscode-new-file](https://marketplace.visualstudio.com/items?itemName=dkundel.vscode-new-file).
9977|This issue was moved to textmate/java.tmbundle#41
9978|@alexandrudima maybe you know this?
9979|Duplicate of @224  By the way, check this out: if you hold <kbd>Ctrl</kbd> (or <kbd>⌘</kbd> on OS X), press <kbd>E</kbd> a few times and finally release <kbd>Ctrl</kbd>, you get a very cool history navigation that I feel replaces (and improves) the tab-like interaction. Give it a try, it's my everyday bread.
9980|I think the current behavior is correct. `boolean`, `int`, `long`, get the color for _type_ references. I recommend you to switch to the Dark+/Light+ themes where `boolean`, `int`, `long`, will be turquoise. The Dark/lIght Visual Studio themes have no special color for types, therefore it is the default foreground color.
9981|Closing. @largeDachshund if you have more details, please comment on this issue.
9982|@sofgod The use-case for `workspaceContains` is to have an extension that gets activated when a top level file exists. E.g. `.editorconfig` should be a top-level file in a folder that uses editor config. What is your exact use-case? You can always use `activationEvents:['*']` if none of the existing fine-grained activation events matches your use-case.
9983|@segmentationfaulter I cannot reproduce. Is there any input field in VS Code where Caps Lock is honored (e.g. the find widget input, the `F1` input) or is it not working anywhere?  Also, do you run Ubuntu in a VM, or have a special version of Ubuntu... or any other customizations you've done that could help us reproduce the problem.
9984|@joaomoreno I don't see how cc19a2d could fix copying a description from the suggestWidget
9985|A hover provider should make a decent stopgap for everything but arrays I think. Will see what can be done with that so long.   > On 22 Feb 2016, at 11:34, João Moreno notifications@github.com wrote: >  > A first good step would be to write an extension and use the registerHoverProvider API. >  > ping @jrieken >  > — > Reply to this email directly or view it on GitHub.
9986|My mistake, I thought that allowing content widgets to be selectable will solve this issue. But suggest widget uses the tree which disables selection.
9987|"I could probably live without tabs... if VS wasn't so bad at managing ""working files"". I very often open files just to refer to the inside them, without actually editing them, but VS doesn't place those files in my working files list, whereas I would definitely have a tab open in a tabed environment.  This combined with the fact that when you close a file / focus a new ""working"" one, the file explorer MOVES to the open file instead of staying on your last location make for a very confusing experience.  I understand that those are not concerns for you since ""you've used it without tabs for 4 years"", so anything that goes outside of the Ctrl+Tab scope is seen as a weird way of using the program."
9988|@alexandrudima I tested it, the problem was being caused by this vim extension https://marketplace.visualstudio.com/items?itemName=vscodevim.vim  After uninstalling this extension, caps lock is working fine.
9989|I am also having issues to get the debugger to stop at breakpoints when running `mocha` against ES6 transpiled files with sourceMap.  I created the repository https://github.com/onlyann/vscode-issue-3144 to demonstrate the issue. If I put a breakpoint in the transpiled file, the debugger stops at the breakpoint displaying the source ES6 file. However, when I put a breakpoint in the source file, it is ignored.  This is happening with version 0.10.8 on Windows.
9990|Hi, I am running Code (version 0.10.5)  via a ssh spawned xterm with /bin/ksh. My problem was that xterm (on my version of ubunto) was not setting SHELL to the correct value. It was defaulting to /bin/sh, which was a sym link to /bin/dash. I modified my profile script and forced SHELL to be my login shell and all was fine. I suspect that the problem is with /bin/sh (which is actually /bin/dash)
9991|@BleyChen You can select the text, but you can't copy. Did I get this correctly?
9992|@mheiber I think that Salsa already does that.  Check https://code.visualstudio.com/Updates#_javascript-salsa-preview
9993|I now get   ![image](https://cloud.githubusercontent.com/assets/5047891/13217004/c21b3e5a-d95f-11e5-826c-7884b4196ec7.png)
9994|I think 5598ee09f101158c066db7797b73e17bdc91ce78 also fixes this one:  We now merge identical sequential tokens.  ![image](https://cloud.githubusercontent.com/assets/5047891/13217063/35c139ae-d960-11e5-8b1a-2ac093bb7617.png)  ![image](https://cloud.githubusercontent.com/assets/5047891/13217053/20775380-d960-11e5-9713-7aa0c2aabab9.png)
9995|I think I think 5598ee09f101158c066db7797b73e17bdc91ce78 also fixes this one:  ![image](https://cloud.githubusercontent.com/assets/5047891/13217112/76d86e6c-d960-11e5-8488-19eb969ae33a.png)
9996|@alexandrudima, is this PR unneeded after https://github.com/Microsoft/vscode/issues/2870#issuecomment-187132923?
9997|@segmentationfaulter This also works for me, maybe it was caused by the same vim extension?  ![js-arrow-brackets](https://cloud.githubusercontent.com/assets/5047891/13217217/2952de56-d961-11e5-804a-85e67e2add6a.gif)
9998|@killercup Yes, as long as the syntax emits identical scopes, we merge on our side identical sequential tokens into a single one, so I think this change is no longer necessary.
9999|"The `afterText` is just about matching the text on the current line after the cursor position:  ``` javascript var x = 3|45; // beforeText: ""var x = 3"" // afterText; ""45;"" ```  I mean those are the values that are matched against the regexes"
10000|If your logic doesn't match the `onEnterRules`, you could alternatively listen to `onDidChangeTextDocument`, figure out if the changed document is the one in the `activeTextEditor` and then use `activeTextEditor.edit(() => ...).then(() => activeTextEditor.selection = ...)`
