10501|"We chose <kbd>⌘E</kbd> for one of the most powerful actions in the editor itself. With it you can quickly navigate to any file as well as navigate back in history. I must say it's my most used shortcut in all of Code. Give it a spin!  In any case, you can always overwrite this in your keybindings file to the behaviour that you suggested:  ``` { ""key"": ""cmd+e"", ""command"": ""editor.action.nextSelectionMatchFindAction"", ""when"": ""editorFocus"" } ```"
10502|:-)  duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
10503|I cannot reproduce this, can you provide an example where you see this happening? Or maybe some screenshots? What error message did the red underlines tell you?
10504|@isidorn Looks great!
10505|@tacho87 Can you please share some reproducible steps?
10506|"The problem is that the value is the number `1`. Try using a string instead:  ``` ""NODE_DEBUG"": ""1"" ```  @dbaeumer We need to fix this at the schema level and produce an error/warning."
10507|I didn't try the Ember scenario, but given Martin and Chris tried it, I think its ok :)
10508|Let's consider putting this information in the repo, so people can make PRs on it.
10509|Do you see any errors? Which version of Code do you have? Which version of OS X do you have? What is the behaviour you see?
10510|Duplicate of #2327
10511|@chrisdias we've removed comments from the default configs in launch.json because they are contributed in the extension's package.json: comments would invalidate the json syntax which would result in problems with all tools that cannot deal with comments in json.
10512|"The default extension has the following in its `package.json`:  ```     ""activationEvents"": [         ""onCommand:extension.sayHello""     ], ```  This means it will only be activated when the `extension.sayHello` command is triggered.  If you run the `Hello World` command from the command pallette with <kbd>F1</kbd> (or <kbd>Cmd Shift P</kbd>) your extension will then be activated."
10513|Probably.
10514|Not really sure. They might not work simply because we never tackled that problem. Ping @bpasero
10515|It is up to each language service to parse the comments and provide whatever they want to be rendered in the widget.
10516|no response.     os x10.11.3
10517|Hm... Figuring out whether the text fits in there is not trivial nor do I feel it improves the experience by much. But feel free to give it a try! ;)
10518|What do you mean by _no response_? Maybe provide a screenshot? Some videos? Gifs? Any more information would be great.  Also, and again, what version of Code do you have?
10519|I don't understand which version of Code you have. When you go to the `About` dialog, what version is there?
10520|"To verify have in your launch.json and try to debug  ``` ""customLaunchSetupCommands"": [{“text”:”target-run”, “description”: “run target”, “ignoreFailures”: false}]  ```"
10521|"@chrisdias currently it is not possible to pass a ""More Information"" link from a debug adapter to the frontend that actually works as a link. So just seeing the link in its raw form would only clutter the error message. I've created #3448 to track this new feature.  The current error message looks like this:  ![2016-02-25 10-34-56](https://cloud.githubusercontent.com/assets/1898161/13315529/7be64774-dbab-11e5-8ac4-e1854e5ffe68.png)"
10522|Recenty I updated my previous post, it's there...  Ubuntu 14.04 LTS Version 0.10.8 Commit db71ac6 Date 2016-02-05T10:00:07.223Z Shell 0.35.6 Renderer 45.0.2454.85 Node 4.1.1
10523|Unfortunately our API doesn't let us hide the `Close` button. So, `Close` will behave as you describe `Later` to behave. This seems fine for me. Here's how it looks:  ![image](https://cloud.githubusercontent.com/assets/22350/13315876/a3719d5a-dbad-11e5-980d-4871bf561add.png)
10524|Salsa will only arrive with `0.10.10`, coming soon. This use case is not supported before Salsa.
10525|+1 from me too! Huge requirement for us to switch to code
10526|Oki, that explains everythig...except...why is it in `0.10.8 (January 2016)` update section?? :-)
10527|We need the second sentence so it is clear to the user what might be the cause of the issue because there might be two tasks with the same name and in that case the user might not be aware what is the real casue.  Continue and stop make no sense in this case since we can not continue until the user fixes his problem in launch.json, and then he has to start debug again
10528|A further issue here is that if you perform the fold it will not fold, for example:  ``` javascript function foo() {     bar(); } ```  However if you add a second line like this:  ``` javascript function foo() {     bar();     fux(); } ```  If you fold/unfold and then remove the new second line and attempt to fold the single line, the folding works. (The same happens with your example above, add a second line in that if statement, fold/unfold it, remove the line, it will then fold correctly.  This is caused by [`this.decorations`](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/folding/browser/folding.ts#L367) returns a two line range for single line collapse regions, so for line 8 (7, zero counting) where you trigger the fold, it will return `range: {startLine: 7, endLine: 8}` rather than `range: {startLine: 7, endLine: 7}`.  The added line in the return range then causes the if statement in [L374](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/folding/browser/folding.ts#L374) to fail and in you case it reverts to the surrounding fold range. Or in my example simply does not fold.  I have been unable to debug how these ranges are generated but I am sure @aeschli knows :smile:   Hope this helps :+1:
10529|@weinand @egamma I believe there is no way to provide separate actions with separate behaviours here. I only found [one place](https://github.com/Microsoft/vscode/blob/master/extensions/typescript/src/typescriptMain.ts#L45) where the project gets reloaded. So, I have to assume the language service is shared between JavaScript and TypeScript; meaning that reloading one will reload the other. My very limited knowledge of how this works might not be the most correct one, though, and @jrieken or @dbaeumer could confirm or deny this.  Anyway, I present you with 2 solutions: - Have a single `Reload JavaScript & TypeScript Project` which reloads both worlds - Have separate `Reload JavaScript` and `Reload TypeScript Project` actions, but each will reload both worlds as well. They will both do the same.  Give me your thoughts.
10530|@joaomoreno We had exactly your second solution in mind: Have separate Reload JavaScript and Reload TypeScript Project actions, but each will reload both worlds as well. They will both do the same.
10531|I limited the maximum of folding regions to 10000. The filtering criteria is the size of the indentation.
10532|So I changed all `ms-vscode.omnisharp` to `ms-vscode.csharp` inside our code. I did not publish any extensions or nothing like that
10533|With the fix pressing the Stop button terminates the debug session which disconnects from node (without terminating it) and prevents a restart from happening. nodemon and node will continue to run.
10534|+1
10535|Edge's implementation is not necessarily broken, it is a matter of interpretation. Edge sometimes returns a token's `<span>` as the hit container and sometimes a token's text node, while Chrome always returns a token's text node
10536|duplicate of #3398   I tested the fix of #3398 with your examples. Thanks @tht13 and @Tyriar !
10537|@waderyan   > We also have eslint.options in preferences. I assumed they performed the same function, but they don't in this case.  Actually, the eslint options in the settings are `command line arguments` for eslint [cliengine](http://eslint.org/docs/developer-guide/nodejs-api#cliengine), these are not config options or rules. I can see the potential for confusion
10538|@isidorn I've debugged this and it seems that errors returned from 'attach' are only shown in the UI if it is the first 'attach' and not a restarted 'attach'. I tried to find a 'filter' in your code that prevents these error from being shown, but I wasn't successful. Do you have an idea why these errors are not showing up?
10539|> I'm getting unused var issues. This makes sense for React, but Navigation and Viewport are being used in the JSX syntax.  These are false positives reported by eslint. I suggest to disable the rule `no-unused-vars`
10540|"> Hovering over ""export"" shows ""export= can only be used in a .ts file.""  I could reproduce this with TS 1.8.0. I can no longer reproduce in the latest vscode-alpha that has TS 1.8.2 bundled. Can pls update code-alpha and verify that the version of TS shown in the bottom right corner when a JS file is open is 1.8.2 ![image](https://cloud.githubusercontent.com/assets/172399/13319543/af2033c2-dbc2-11e5-9995-5a987c99db7f.png)  Closing and all the issues can either been explained or have been addressed."
10541|I have to agree that it is not very obvious (ping @waderyan @gregvanl) but if you scroll down there is a section called **Enabling Salsa**.
10542|ping @dbaeumer so you are aware of the change
10543|@harold-b I am writing a debug adapter too, and can not show variables on the test client. I created #3455 for it. Could you please give me some advise?  Thanks.
10544|Oh I didn't realize that. Thanks!
10545|Using same shortcuts as visual studio. Shift + F5 to stop, ctrlCmd + shift + F5 to restart
10546|@minggo implementing only a variablesRequest is not enough. You have to make sure that the whole chain works. Here is the explanation from the API doc:  ![2016-02-25 14-51-18](https://cloud.githubusercontent.com/assets/1898161/13321457/5c993cb8-dbcf-11e5-95e9-e97d6c24a3d3.png)  This is the sequence of request that the debug UI will send: - `stackTraceRequest`(threadId from stopped event) -> returns array of stack frames - `scopesRequest`(id of top stack frame) -> returns the variable scopes for stack frame - `variablesRequest`(id of top scope) -> returns the variables for that scope
10547|Thanks!
10548|OK. I changed it here as well: https://github.com/OmniSharp/omnisharp-vscode/commit/29a54a0818f6e1a4386802f74f2b8fa1a53b81fb.  I'm planning on publishing the current bits under the new name this morning
10549|@Tyriar yep but I can't do what I was talking about; with one key, close the thing that is currently open, no matter what it is, and if it's something that was in the working files list, remove it from there also. i.e. what every other text editor does by default.
10550|"@weinand  Thanks.  I implemented all these requests, and stack frames are correct.  Sorry, i didn't mention it for short.  The stack traces look like  <img width=""887"" alt=""screen shot 2016-02-25 at 10 07 12 pm"" src=""https://cloud.githubusercontent.com/assets/488203/13321804/324b6584-dc0c-11e5-9062-2df7492c1d19.png"">"
10551|@minggo I see. Ok, then what happens if you select the first Call Stack item ('ActionTest.js')? Its scopes should show up in the Variables viewlet. Do they? What scopes do you have?
10552|"@weinand  Nothing changed when i selected first Call Stack item.  The scopes i returned is  ``` {      ""seq"":0,    ""type"":""response"",    ""request_seq"":8,    ""command"":""scopes"",    ""success"":true,    ""body"":{         ""scopes"":[            {               ""name"":""Local"",             ""variablesReference"":1000,             ""expensive"":false          }       ]    } } ```"
10553|Duplicate of #2907...
10554|Leaving it
10555|"@minggo  the scope ""Local"" should appear in the Variables viewlet. Since it does not, then the problem starts already with Scopes...  Is `scopesRequest` being called when you select any of the stack frames? The arguments to `scopesRequest` should be the stack frame id."
10556|@weinand  `scopesRequest` is `only` invoked one time when first Call Stack item is selected. And i found that sometimes `scopesRequest` is invoked even no any Call Stack is selected, and sometimes, `scopesRequest` is not invoked even first Call Stack item is selected.  And it is strange that, sometimes there is a long delay `scopesRequest` is invoked.
10557|@minggo the UI caches the results returned from all those requests because the VM is stopped and nothing can change. So `scopesRequest` is only called once for every stack frame. **But you have to make sure that every stack frame has a different ID!** Otherwise the UI assumes that all stack frames have the same scopes...
10558|If the same steps are done in the command line, the same results will follow, so Code isn't doing anything wrong.  The [git config `core.ignorecase`](http://stackoverflow.com/a/17688308/261019) seems to help you in these situations.
10559|Closing as duplicate of #1138
10560|@weinand  Yep, i used `Handlers.create()` to create a new id for every stack frame.   I have a question, is it needed to selected a Stack Frame to trigger `scopesRequest`?
10561|@dustincampbell make sure to set the display name of C# extension to C# so we show an appropriate error message and not mention omnisharp
10562|Hi @minggo, got your ping from #3382. But I see @weinand is already helping you.  For what it's worth. I had a similar problem when I started my adapter, my issue was that I had forgotten to send out the initialize event.  Otherwise, you mentioned some slowness on the requests, after having the IDE open for a while and debugging several times the variables request seem to stop, they would then only be called when I hovered over a var on the text editor. I had to restart the IDE for it to start sending prompt requests as well.  > I have a question, is it needed to selected a Stack Frame to trigger scopesRequest?  AFAIK, the `threads > stackFrame > scopes > vars` request chain triggers on a stop event. You shouldn't have to select a stack frame.
10563|@joaomoreno I had to add one more change to get this correctly working.
10564|@minggo it is not needed, but VS Code does it like this. A scopesRequest needs to know for what frame it should return the scopes. So scopes are connected to frames. So the currently selected frame determines what scopes should appear in the Variables view.
10565|@harold-b  Thanks for you information. I haven't closed VSCode for a long time. May be i should restart it now.  @weinand  Thanks for the answer.  But i still don't know what to do to resolve it. There seems to have two bugs: - When i click a Call Stack other from first Call Stack, `scopesRequest` is not invoked. - Variables are not show on test client.
10566|Yes / no / later as propesed in #2748
10567|Before verifying this make sure that the c# extension has been published under a new name by @dustincampbell
10568|This occurs with an empty settings file on a fresh install of the latest release. The warning comes from the default settings file.
10569|@harold-b  @weinand  After restarting VSCode, everything works fine. Thanks for your help.  @weinand  May be it is a potential bug of VSCode.
10570|Command-E isn't even documented on the Visual Studio code site, and it's a duplicate of Command-P.  Why does an undocumented, duplicate shortcut need to take precedence over standard system behavior?
10571|@minggo @weinand I suspect it's the same issue I reported on #3382, where the Variables view get's locked until the IDE is restarted. It often got locked with an empty view for me to, more specifically when I stopped debugging in the middle of a variablesRequest.  Glad it's working now :+1:
10572|"@minggo if you see issues with VS Code, just reload the window (F1, reload...). In most cases you don't have to restart VS Code.  If scopes (e.g. ""Local"") does not show up, then variables cannot work (because every variables lives in a scope). So you'll have to figure out what the problem with scopes is.  Compare your work with mock-debug. In mock-debug scopes and variables work. So there must be a difference in your code."
10573|@weinand  Thanks. I worked based on mock-debug, but now they are totally different, i just haven't changed the name.  @harold-b Thanks.
10574|I notice the default keyboard shortcuts doesn't want to close using `workbench.files.action.closeFile`, this may be as issue of changing that action to actually close everything as I was expecting it to do. What else are you unable to close using these keybindings?
10575|"I've looked again at https://manual.macromates.com/en/appendix and I think there is indeed something missing on our side - specifically our assumption that deciding what to do is localized to the current line being edited.  Considering the following rules (from their example):  ``` javascript increaseIndentPattern = ""^.*\{[^}\""']*$"";           // intends to target lines ending in { decreaseIndentPattern = '^(.*\*/)?\s*\}[;\s]*$';    // intends to target lines ending in } ```  Here are some examples I can think of (`|` indicates cursor when <kbd>Enter</kbd> is pressed):  ``` c // A) ------------------------------ // BEFORE int main (int argc, char const* argv[])|{ // AFTER (do nothing) int main (int argc, char const* argv[]) |{  // B) ------------------------------ // BEFORE int main (int argc, char const* argv[]) {| // AFTER (indent new line) int main (int argc, char const* argv[]) {     |  // C) ------------------------------ // BEFORE     if (true)|{} // AFTER (do nothing)     if (true)     |{}  // D) ------------------------------ // BEFORE     if (true) {}| // AFTER (do nothing)     if (true) {}     |  // E) ------------------------------ // BEFORE     if (true) {|x-=5;} // AFTER (indent new line)     if (true) {         |x-=5;}  // F) ------------------------------ // BEFORE         x-=5;|} // AFTER (outdent new line)         x-=5;     |}  // G) ------------------------------ // BEFORE         x-=5;     }| // AFTER (do nothing)         x-=5;     }     |  // H) ------------------------------ // BEFORE         if (true) {         }| // AFTER (do nothing)         if (true) {         }         |  // I) ------------------------------ // BEFORE         x-=5;         }| // AFTER (outdent current line + new line)         x-=5;     }     |  // J) ------------------------------ // BEFORE         if (true) {             }| // AFTER (outdent current line + new line)         if (true) {         }         | ```  As far as I can tell, all would work today in VS Code except I) and J). Of interest the difference between H) and J) where the lines would match the same regexes, but differ in terms of indentation, thus producing different results."
10576|Good point about being a duplicate: I argue that its a way to trigger it using only the left hand.  Good point about the lack of documentation. Ping @chrisdias @seanmcbreen @waderyan, when are we going to talk about <kbd>⌘E</kbd> as the greatest keybinding ever?
10577|Adding @gregvanl
10578|![it_does](https://cloud.githubusercontent.com/assets/1200635/13324661/a58324ac-dbac-11e5-82f0-e8d5cce0e0a2.png) ![if_i_add](https://cloud.githubusercontent.com/assets/1200635/13324662/a5f8029a-dbac-11e5-9f34-2d17f46efcbe.png)
10579|:+1:
10580|Thanks. Can you give me the entire error? All I see is `cannot export without module fla...`.
10581|Oh, wow.  The warnings do indeed come from the readonly default configuration file. Clicking in one of them actually creates a new editor input somehow. Ping @bpasero.  ![image](https://cloud.githubusercontent.com/assets/22350/13325490/71b46cea-dbe2-11e5-87d3-5011bb57e527.png)  ![image](https://cloud.githubusercontent.com/assets/22350/13325505/798cd7ae-dbe2-11e5-9414-598b21aff501.png)  The warnings are indeed valid, since they are schema violations. I don't understand why they appear as errors in the error list but not as markers in the editor. Any idea @aeschli @alexandrudima ?
10582|Ok so I found the issue looking into the 4 line sample from above. The issue is that the variable `$date` exists in multiple scopes. Because VSCode has no deep language understanding yet, it can not correlate the word that is being hovered over with a scope. Thus when we search through scopes and find multiple matches for `$date` we are not sure which one to show so we show none.  This variable duplication seems to happen to powershell all the time, unlike other languages. As a workaround the powershell adapter could say that all scopes except the `local` scope are `expensive`, thus the hover will only search in the `local` scope and always find a hover match. We do not use `expensive` for any other functionality except the hover so I think this is fine.  Opinions?
10583|Another option could be for VS Code to always take the variable from the earliest scope in the scope list that the adapter returned.  I would think that most adapters would return their scopes with the most local scope first, but maybe there's a language out there that wouldn't play by the same rules.  Could also have some adapter configuration that dictates how to prioritize scopes.  Maybe there could be an extra field on the Scope object which gives a numeric priority order?  In the case that the adapter gave the same value (like 0) for the priority of all scopes, you could just continue with your current behavior of not showing anything since it's not obvious what to show.
10584|All good ideas. Though taking the earliest might in some rare cases show the wrong result to the user which might be very confusing.  @weinand opinions?
10585|Yep, agreed that it could be problematic.  Would be nice to have some opt-in behavior but I can understand if it would be too much of a special case.
10586|Verification by running `code-alpha -v` in the Command Prompt or Powershell. It should print out Code's version.
10587|Verification by running `code-alpha -v` in the Git Bash. It should print out Code's version.
10588|Thanks for making this happen!
10589|@Tyriar I decided to push this last minute change, it would be a shame not to get it. Plus, fixing #1704 led me to the solution. :+1:
10590|I support the cache credential helper as a workaround until we tackle this issue head on.
10591|Maybe a duplicate of #2856 or the settings come from an extension. The problem is that the default values are not compatible to the schema defined at the same place where the default values are defined. We should definitely fix the schemas. @david-mitchell Can you find out what setting is at the given location?  But we should also avoid reporting markers to non workspace resource. This can be done in the JSON plugin, but maybe should be done in the language server as not every extension should need to understand what is in a workspace and what not. @dbaeumer ?
10592|"Yes the earliest (first?) scope ""might"" not always be the best.  For instance, PowerShell returns `Auto` as the first scope which is a ""filtered"" view of `Local` variables.  It turns out that would probably be OK but I could see other debugger extensions that might put `Global` first above `Local` not realizing there are implications.  I do like the idea of having a separate field for `lookup order` for hover tips.  That way, display order in the debug view isn't implicitly tied to the lookup order.  FYI I've modified our code to have all other scopes except Local return Expensive=true and that has helped.  However I have found one other bug/issue in the process.  PowerShell is a case-insensitive language and given this method:  ``` powershell function Do-Work($workCount, $opt = 'foo') {     Write-Output ""Doing work...""      Write-Item $workcount      Write-Host ""Done!"" } ```  I get a hover tip on the first instance of `$workCount` but never on the second instance `$workcount`.  That should work.  Is there a metadata tag somewhere indicating a language is case-insensitive that perhaps we are failing to set?"
10593|Ideally, we would like to have the debugger always search three scopes in order.  First Local scope, then Script scope and finally Global scope.  We have a fourth scope `Auto` that is redundant with `Local` (filtered view of `Local`).  Currently, we always return all variables to VSCode in each of these scopes.  So it isn't very expensive to lookup a variable within each scope.  That lookup is O(1) since variable reference id passed to us is just an index into a `List<>`.    For now, I'm going to check-in a change to make the Local scope the only non-expensive scope as that provides the best hover tip experience at the moment.
10594|"The first one is `git.path`, from the ""Git Configuration""  ```     //-------- Git configuration --------      // Is git enabled     ""git.enabled"": true,      // Path to the git executable     ""git.path"": null,      // Whether auto fetching is enabled.     ""git.autofetch"": true, ```  The second one is `typescript.tsdk` from ""Typescript Configuration""  ```     //-------- TypeScript configuration --------      // Complete functions with their parameter signature.     ""typescript.useCodeSnippetsOnMethodSuggest"": false,      // Specifies the folder path containing the tsserver and lib*.d.ts files to use.     ""typescript.tsdk"": null, ```  The third one is `php.validate.executablePath` from ""PHP Configuration options""  ```     //-------- PHP Configuration options --------      // Whether php validation is enabled or not.     ""php.validate.enable"": true,      // Points to the php executable.     ""php.validate.executablePath"": null,      // Whether the linter is run on save or on type.     ""php.validate.run"": ""onSave"" ```"
10595|@aeschli I can't reproduce, make sure you have a recent version.
10596|I suggest for February to only fix the schemas, since @dbaeumer is not around. @aeschli agree?  Also, how can we indicate that the values can be strings but null also?
10597|Verified, reported again here http://stackoverflow.com/questions/35504612/vs-codes-jade-syntax-highlighting-is-bad
10598|Good feedback, @weinand and me will discuss. As for the moment we are not providing any option that an adapter can specify it is case-insensitive. This is something to add for the future and we should plan for it.
10599|I fixed it by making sure the cursor position stays visible when collapsing a region (instead of making sure the top line is the same)
10600|Fixed by change for #3314
