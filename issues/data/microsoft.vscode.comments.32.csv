3101|and i see copy pasting is not a great idea :)
3102|@benkaiser [insider 14.12, stable 18.12](https://github.com/Microsoft/vscode/issues/917)
3103|> This is the error that comes up when i try to launch my first program.   You are using Visual Studio Code and are creating a launch configuration?
3104|I have an issue related to this, rather an extra step you could take help automate stuff.  I was trying to write a Python installation script which will download the latest release, unzip it, make symlinks, copy a VSCode.desktop I have written ([here](https://github.com/hashhar/vscode/tree/hashhar-desktop/resources/linux) for my project) into /usr/share/applications to register a launcher into Unity and GNOME.  I have stumbled upon an issue though. Since no releases are being done (not the source files, the actual installation zipballs which are downloaded from the website) I cannot use the GitHub Releases API (I wrote a preliminary proof of concept [here](https://github.com/hashhar/vscode/blob/hashhar-desktop/resources/linux/install.py)).  I also wasn't able to trigger a click on the download page. (I can do it with Mechanize but that is a dependency and I want the script to be as self sustained as possible).  So how do I go about this? I basically need a permalink to the latest VSCode distributable.
3105|This is by design. The market place identifies an extension by the pair publisher.extension name. We show the publisher in the list of extensions so you can distinguish the extension.
3106|@joaomoreno, @bgashler1?
3107|Thanks @alexandrudima
3108|Does extracting the [zip](https://code.visualstudio.com/) and running `Code` not work? Do you get an error message?
3109|@snowiow I'm not sure I understand the problem? Can you please share the keybinding rule or your use-case?
3110|> Not sure if you're just messing with me now, since you quoted me asking where  filesGlob  is documented  No messing around, but I was wondering whether 1) you have found the page I mentioned and 2) whether you have read the page. I'm interested since in the doc it is mentioned that:  > You can create a JavaScript project by dropping in a jsconfig.json file. It's a subset of tsconfig.json.   The tsconfig.json does not support `filesGlob`, so neither does the jsconfig.json. `filesGlob` is an [Atom-typescript specific extension ](https://github.com/TypeStrong/atom-typescript/blob/master/docs/tsconfig.md), Apologies, that you got pointed into this direction and we didn't correct this immediately.
3111|Hi **@dmitsuki**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
3112|**@dmitsuki**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
3113|And would any of you be kind enough to review the [python script](https://github.com/hashhar/vscode/blob/hashhar-desktop/resources/linux/install.py) and tell me if it is a feasible way to distribute the package. PS: I have tested it by hardcoding the Linux-x64 download link and it seems to go without a hitch on Ubuntu GNOME 15.10, Kali Linux 2.0 and Mint.
3114|@bgashler1 Yes I am.
3115|Duplicate of #841 that is fixed in the latest.
3116|The current emmet implementation does not support multiple cursors.
3117|:+1: and if someone has discovered a work around, please share.
3118|**Please add this feature quickly, I think it's a basic feature, thank you guys.**
3119|@hashhar here are the **static links** that always point to the latest VS Code distribution.  We are also going to add these links to download confirmation pages so people can restart their downloads if they don't automatically start.  osx: http://go.microsoft.com/fwlink/?LinkID=620882 win: http://go.microsoft.com/fwlink/?LinkID=623230 linux64: http://go.microsoft.com/fwlink/?LinkID=620884 linux32: http://go.microsoft.com/fwlink/?LinkID=620885 winzip: http://go.microsoft.com/fwlink/?LinkID=623231
3120|@hashhar here are the **static links** that always point to the latest VS Code distribution.  We are also going to add these links to download confirmation pages so people can restart their downloads if they don't automatically start (see #1019 ).  osx: http://go.microsoft.com/fwlink/?LinkID=620882 win: http://go.microsoft.com/fwlink/?LinkID=623230 linux64: http://go.microsoft.com/fwlink/?LinkID=620884 linux32: http://go.microsoft.com/fwlink/?LinkID=620885 winzip: http://go.microsoft.com/fwlink/?LinkID=623231
3121|**Please add this feature quickly, I think it's a basic feature, thank you guys.**
3122|please add this feature quickly, it is a basic feature.
3123|Thanks a lot. I can now get back to finishing the installation scripts.
3124|Hi **@evalphobia**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
3125|Hi **@rstat1**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
3126|**@rstat1**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
3127|So pull request #1090 is my attempt at adding this feature, please take a look and feel free to yell at me if I did it wrong :P
3128|Wow that's exactly what I need.
3129|@be5invis Not bad for someone who's never written Typescript before eh?
3130|@rstat1 yeah.
3131|It throw “source is not available” error when I imported “http” module and use one API in my code ,do you know what’s the problem?  Code : set breakpoint on line 52 in extension.ts for below code.                       http.request('http://www.google.com', function(response) {                             console.log(response.statusMessage)    }); plugin sample code(http://mediasvc1nxn1n47jdwb5.blob.core.windows.net/guided-tours/testIntellisenseJavascript.zip)   Steps for repro this problem: 1.  Download the source and open it in VSCode 2.  Run it and you will see an vscode instance  3.  Change the language mode in “untitled-1” from “Plain Text” to “Javascript” ![aa](https://cloud.githubusercontent.com/assets/15098626/11526687/37e5d638-9917-11e5-8e1c-4a983b8ef6ab.png) 4.Type an character and it will trigger the method “”,then you will see the error. ![bb](https://cloud.githubusercontent.com/assets/15098626/11526691/3cee574a-9917-11e5-9b7b-93b3a23d4cb0.png)
3132|Can an option be added to exclude everything in the `.gitignore`?
3133|"Sure I Have got something like this in the plugin's package.json  ``` ""keybindings"": {     { ""key"": ""Ctrl+Alt+7"", ""command"": ""extension.v_{"", ""when"": ""editorTextFocus"" } } ```  Then in the extension.ts I register this command to a handler  method  ``` export function activate(context: vscode.ExtensionContext) {     ....     registerCommand(context, 'extension.v_7', () => handle(""7""));     registerCommand(context, 'extension.v_{', () => handle(""{""));     .... }  function handle(key:string) {     console.log(key); //Prints ""{"" on Ctrl+Alt+7 and ""7"" on alt-gr+7 } ```"
3134|"Using negated glob patterns with ""!"" is currently not supported."
3135|Thanks! But can you not rather use the setAutoHideMenuBar() [1] method instead and avoid having to implement the key listener for Alt? Also, please check if this solution is cross platform, it does not seem to work on Mac and thus should not show up there.  [1] https://github.com/atom/electron/blob/master/docs/api/browser-window.md#winsetautohidemenubarhide
3136|Duplicated maybe?  https://github.com/Microsoft/vscode/issues/571
3137|Hi **@Tyriar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
3138|@bpasero `setAutoHideMenuBar` gets me a `Property is undefined` error because `BrowserWindow` doesn't have it defined. Is that something I can just go and add, or is the file it's in (atom-browser.d.ts) generated from something?  As far as mac compatibility, it was something I was going to do, and for w/e reason forgot, my mistake.
3139|@rstat1 yes feel free to add it to the d.ts files if missing!
3140|In the call stack pane what is the focussed stack frame? The console always evaluates against the `top stack frame`, while the hover and the watch expression evaluate against the `focussed stack frame` - the one you choose. I would guess that you have selected a different stack frame thus the difference in evaluation
3141|@bpasero Oh well ok, that simplifies things quite a bit. I'll fix everything up and have a new request ready shortly.
3142|This is the exception shown in the console  ``` EPERM: operation not permitted, write: Error: EPERM: operation not permitted, write,    at Error (native),    at Object.fs.writeSync (fs.js:663:20),    at SyncWriteStream.write (fs.js:1981:6),    at Console.log (console.js:36:16),    at Object.c [as getProxyAgent] (c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:8:11528),    at c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:8:26319,    at Object.p [as _notify] (c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:5:674),    at Object.__dirname.undefined.D.enter (c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:5:3836),    at __dirname.undefined.t.Class.define._run (c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:5:5662),    at __dirname.undefined.t.Class.define._completed (c:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js:5:5103)e.doShow @ /C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:1600 ```
3143|@bpasero Ok. Done. Menu item disappears on mac, and everything uses the official Electron APIs now instead of my custom stuff.
3144|Related to #1006
3145|@areijngoudt Maybe I misunderstood what you meant with 'css intellisense'. Is it about completing the href in a link tag, or is it about completing css rules inside html. Can you give a more compete example code and write what completions you expect? A screenshot would be great.
3146|What is the issue? What is the expected behaviour?
3147|Not as simple as it should be, but you can select a file in the root folder and then use the `new folder` action from the toolbar.
3148|This is specifically about a root folder containing only folders, I imagine it's a pretty common use case to open a folder containing many git repositories but no files.
3149|@alexandrudima what is your opinion?
3150|I see that working fine @warpdesign
3151|@bpasero This is still the old world, no clue that's the API are?
3152|This relates to #703 which must also know this during FS eventing phase.
3153|Closing, the remaining work wrt to shebang and files with an extension will be tackled in #1097.
3154|Cannot reproduce:  ![image](https://cloud.githubusercontent.com/assets/900690/11651795/c3832062-9d93-11e5-8ab9-0c6a415485c4.png)
3155|@rstat1 nice. I wonder if this should not rather be a setting in the user settings configuration? We typically try to put settings into there instead of overloading the menu. I would think of a window.setting that controls this behavior. Otherwise, how do you persist this setting?
3156|Same problem with Atom (languages-csharp 0.11.0) ![image](https://cloud.githubusercontent.com/assets/6461412/11651856/421d3ea8-9d94-11e5-8836-0dc91a5717ce.png)
3157|There was an issue with `exclude` properties not being honoured property. It got fixed with the work on #703
3158|This issue was moved to atom/language-csharp#46
3159|"IMHO not rendering the last line number would be confusing, both for users and extension authors, as the last line can be interacted with (e.g. an extension can create edits on it, asking for line count at the API level would return it).  @glen-84 I really like the brief technical explanation from POSIX, but then if I understand correctly:  ``` 1. Line 1\n 2. \n 3. Line 3\n 4. This is not a line, but then what is it? ```  Perhaps the intent of the issue is that the editor should never lead to a situation where a file is not terminated with a newline.  In that case, I would treat the end of file newline in a similar way we treat the UTF8 BOM. The BOM is completely hidden in the model (cannot be interacted with or moved whatsoever) and when the workbench calls `model.getValue()` it comes. Perhaps the end of file newline can be implemented in a similar way. i.e. ""It is not there until saving to disk""."
3160|It seems like a worker in going crazy and is able to bring down the system. Soon, we will move the JavaScript language service out of process which will make this issue go away. Also, there was a problem with exclude-rules not being honoured. That got fixed with #703.
3161|Duplicate of #133. Fix will be in the End of December release.
3162|duplicate of #71
3163|(closed by accident, sorry)  Thanks for the additional info:  > about a root folder that containing only folders
3164|Yeah I messed with this during the sprint...
3165|The thing that does not work (yet) is updating the editor live or during the session. So currently you need a reload or pick the mode from the mode picker.
3166|@snowiow Thank you for clarifying. I know this is currently the only way to do anything with keys from an extension, but the keybindings rules are a pretty bad way to do character input. The reason is that the keybinding rules are interpreted on browser event `keydown` where we're only receiving key codes and not characters. (See #713 for an explanation of how you cannot really support different keyboard layouts going with the keybindings approach).  Also, you might have noticed that we do not bind by default any keybindings that produce characters. (e.g. no key binding for pressing `a`, `shift+a`, `b`, etc.). That is because the keyboard dispatcher interpretes the pressed keys and if a key has no rule, then we do not call `preventDefault()` on the `keydown` event. Then, browsers will do their thing, and they will follow up with `keypress` and `input` events. We don't even use that to figure out the character input, since the properties in a `keypress` are inconsistent across browsers and they wouldn't help in the CJK case. Instead, we install a timeout and then we look inside our `textarea` input and check it's `.value` to [figure out what was typed](https://github.com/Microsoft/vscode/blob/497788c0bcd20859f736d585b49c208af8dd518f/src/vs/editor/browser/controller/keyboardHandler.ts#L544). We then take that value and call an internal `type` handler.  I have digged into Chromium sources last week and not even Chromium knows reliably what character would be produced on a `keydown` on all the platforms it supports. Chromium itself also reacts to the OS events and I think some OSes do not always give the produced characters. Also, there is the composition case for e.g. CJK characters.  I have an item on the plan (#917) to understand how VIM extensions could be implemented better: - [ ] API: Investigate into how we can provide more support for the VIM extensions   - Issues: #300, #575, #561,   I think at least in part, supporting VIM extensions consists of providing a means to redirect the character input and instead of calling the internal `type` handler, to be able to call a command on an extension or perhaps toggle between the two.
3167|yeah, that's what I saw
3168|Thanks for the suggestion. It's on our UX backlog and is something we would like to work on at some point in the near future.
3169|"@altano while coming up with an example I discovered a bug when the watching task doesn't ignore documents open in the editor and I am pretty sure you are hit by this I fixed the bug and a fix will be available in the next update. A full example for a watching task using the tsc compiler looks like this  ``` json {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""args"": [""-w"", ""-p"", "".""],     ""showOutput"": ""silent"",     ""isWatching"": true,     ""problemMatcher"": {         ""fileLocation"": ""relative"",         ""pattern"": {             ""regexp"": ""^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(TS\\d+)\\s*:\\s*(.*)$"",             ""file"": 1,             ""location"": 2,             ""severity"": 3,             ""code"": 4,             ""message"": 5         },         ""watching"": {             ""activeOnStart"": true,             ""beginsPattern"": ""^\\s*(?:message TS6032:|\\d{1,2}:\\d{1,2}:\\d{1,2} (?:AM|PM) -) File change detected\\. Starting incremental compilation\\.\\.\\."",             ""endsPattern"": ""^\\s*(?:message TS6042:|\\d{1,2}:\\d{1,2}:\\d{1,2} (?:AM|PM) -) Compilation complete\\. Watching for file changes\\.""         }     } } ```"
3170|"@BleyChen  Here are the nodejs docs corresponding to the nodejs version inside VSCode 0.10.3: https://nodejs.org/docs/v4.1.1/api/  I think you might want to use [`http.get`](https://nodejs.org/docs/v4.1.1/api/http.html#http_http_get_options_callback) which accepts a string as the first argument. `http.request` accepts a literal with options as the first argument.  You might also want to change in your `package.json` (to indicate your extension would work with all API compatible versions of VSCode >= 0.10.0). I'm also wondering why you're not updating to 0.10.3 yourself:  ``` ""engines"": {     ""vscode"": ""^0.10.0"" }, ```  Forwarding to @weinand  regarding the `Source is not available` message"
3171|"> IMHO not rendering the last line number would be confusing, both for users and extension authors, as the last line can be interacted with ...  I can agree that some users would need to adjust to the change, because they may not be used to it. However, I still feel that it is the correct interpretation, as a line is defined as a series of non-newline characters followed by a newline character, which means that ""row"" 4 is not a line as defined, but merely a UI affordance (an area that can be focused in order to enter new lines of text).  > This is not a line, but then what is it?  A UI area that represents no backing content. No characters, including newlines, are represented. In my understanding, it's essentially not part of the file.  > Perhaps the end of file newline can be implemented in a similar way. i.e. ""It is not there until saving to disk"".  That may be the same way that VIM handles it.  If I enter ""Test"" into a new file, and save, it saves with a trailing newline:  ``` $ hexdump -c test.txt 0000000   T   e   s   t  \n 0000005 ```  If you open the file, it displays `1L, 5C`, and not 2 lines.  This may be an even better way of handling it, so you wouldn't even be able to navigate to the 4th row without hitting enter, which might make more sense and be easier for users to understand. I prefer this actually."
3172|We use squirrel for the mac auto update and Inno on Windows (see http://blogs.msdn.com/b/vscode/archive/2015/09/11/updated-windows-installer-for-vs-code.aspx)
3173|@egamma thanks!
3174|ok, fair (known) issue
3175|I could also recommend a good application to read atom ;)
3176|- Set the env variable TSS_DEBUG to an available port number. - start VSCode  I do have tracing options in the TS extension but they can't be activated anymore since the Debug Console doesn't understand require. I will look into making this available via an env as well.
3177|@bpasero when you see it, please drag me in so that we can debug it.
3178|@bpasero I added support to enable tracing via env as well (see #1100). With a latest build set the env TSS_TRACE to true and start code. Open the developer tools and you should see output like:  ``` [Plugin Host] TypeScript Service: sending request open(0). Response expected: no. Current queue length: 0 [Plugin Host] TypeScript Service: sending request geterr(1). Response expected: no. Current queue length: 0 ```
3179|There is not to much I can do in TS land since the tsserver gets ask for code completion and provides the proper items. @joaomoreno I assign to you since it is more a code complete request issue.
3180|@claycephas  we don't do anything special with the tsconfig.json file and I wasn't able to reproduce this. Can you please use the handle tool from sysinternals (https://technet.microsoft.com/en-us/sysinternals/bb896655.aspx) to see who is locking the file in your case?
3181|@kojoru yes, PR are always welcome.
3182|This issue was moved to Microsoft/TypeScript-TmLanguage#22
3183|@Wosi can you pleae attach a screen shot showing the output viewlet (e.g.Ctrl+Shift+U)
3184|@sashaburchuk can you run tsc --version to see which version you are actually using ^1.6.2 will for example install the current 1.7.3 version
3185|Yes duplicates #818
3186|Thanks, yes closing as a duplicate of #571
3187|Can't reproduce on the latest which will use TS 1.7.3. Closing for now.   @heroboy please check with the next update which is planned for end of this year.
3188|@osjn thanks for helping us with the prioritization by commenting. An even better way to help us would be a Pull Request with an implementation.
3189|![vscodeproblemmatcherencodingissueoutput](https://cloud.githubusercontent.com/assets/3448684/11654650/b201120e-9da7-11e5-9747-5005ffe1124f.png)
3190|@Wosi thanks
3191|"The initial implementation of indenting/unindenting did exactly what @takumif describes. It would insert a leading `\t` or leading n spaces and it would remove a leading `\t` or leading n spaces. The code was also much simpler :smile:   The feedback we got then was also not great, as sometimes you'd end up with mixed indent whitespace on the same line. Some examples: - pasting some code that is indented with spaces when your file is indented with tabs. The only way to ""fix"" the indentation was to either unindent all the way and indent blocks manually or to play with the find/replace. Now I just indent once and unindent once. Maybe in the future we can add an option to always do this on paste -- some sort of ""fixIndentOnPaste"". - a line that is ""misaligned"" by one space by accident (indentation 5 chars) would drive me crazy, I had to go to it and explicitly remove the extra space. Now I just indent once and unindent once over a large block of code.  When I think about it, my personal intent when I indent/undindent is for the code to ""go to the right place"". When using spaces at 4 chars for example, the ""right place"" for code is never at 5. However, as #348 shows, the ""right place"" for JSDoc style comments is sometimes at 5 chars.  I haven't read in detail the code, I would prefer an approach where indenting/unindenting tries its best to maintain whitespace diffs between lines in block comments."
3192|@jel-massih Are you planning to do more work on this? Iff so I will reopen this PR
3193|@builden cannot reproduce.  git clone the samples npm install replace the jsconfig.json with the one you have provided above  and I'm getting Intellisense.  ![1068](https://cloud.githubusercontent.com/assets/172399/11655162/bd9d1352-9dab-11e5-9119-d02a9410f909.png)
3194|"This is very important. Say I want a test command and a build command. The test command needs to run `mocha` and the build command `babel` or `tsc` for example. `""command""` should be allowed for individual tasks in the tasks array.  The workaround is nice, but it is not cross-platform and quotes have to be escaped. For cross-platform you would have to define  ``` json {   ""linux"": {     ""command"": ""sh"",     ""args"": [""-c""]   },   ""osx"": {     ""command"": ""sh"",     ""args"": [""-c""]   },   ""windows"": {     ""command"": ""powershell"",     ""args"": [""-Command""]   } } ```  and then duplicate the tasks property for every single OS :/"
3195|There is no right or wrong here btw, I am sure we can find users that don't like the behavior after my change.
3196|I already knew why i have this problem, because I had set global setting.json like this ![image](https://cloud.githubusercontent.com/assets/9499016/11655645/5038c2ea-9dea-11e5-9af3-e7ae77571361.png)  I just don't want to typings dir show at the files tree, and i did not set search.exclude property.  another question:  IntelliSense not support ES6 import, like this: ![image](https://cloud.githubusercontent.com/assets/9499016/11655780/69a80e92-9deb-11e5-9685-4b05d19582ba.png)  Thank you for your reply
3197|Will this be in Dec 2015 milestone?
3198|``` import path from 'path' ```  isn't well formed ES6 code. Those two options you have 1. `import * as path from 'path'` to import all 2. `import {join} from 'path'` to import only certain symbols
3199|"@felixfbecker It's nice follow-up :+1: We can use `""windows""`, `""linux""`, and `""osx""` for cross-platform portability."
3200|Tks, those two options work well  but I have see many other open source use this style, such as: import React from 'react'  I never find import \* as React from 'react'
