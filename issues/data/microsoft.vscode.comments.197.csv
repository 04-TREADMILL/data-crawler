19601|Is this a regression from the update? maybe we always had this issue?
19602|Nah, not related to update. It repros in both stable and alpha. Alpha (which uses winreg 1.2.0) just returns better error messages.
19603|@tht13 hey did you have any luck with this? This would be an awesome addition!
19604|"What about adding a "".disabled"" (or .whatever) file inside the extension folder in order to set it as ""not loadable"". Neat and easy to implement. for instance: `~/.vscode/extensions/myextension/.disabled`"
19605|"Not as far as I know.  Can you give me the output of the following commands?  ``` node -p ""require('dns').getServers()"" node -e ""require('dns').resolve4('marketplace.visualstudio.com ', (err, result) => console.log(err, result))"" node -e ""require('dns').lookup('marketplace.visualstudio.com ', (err, result) => console.log(err, result))"" ```"
19606|Could anyone add this PR to May milestone?
19607|@massimocode Feel free to pick it up!
19608|I can not repro this both on mac and on win. Please reopen if you still see it, paste a short code snippet and let me know the platform - from the looks I thought it was win so I tried there and worked
19609|This issue was moved to Microsoft/TypeScript-TmLanguage#156
19610|@dstorey, David, any inputs from your side?
19611|@egamma vscode doesn't resolve eslint plugins in OSX El Cap latest. Hope you to check this.
19612|@joewood @kieferrm this feature is not about objects with many properties. Objects with many properties will be addressed in https://github.com/Microsoft/vscode-node-debug/issues/18.
19613|"In your language's grammar you can include grammars of other languages. See https://manual.macromates.com/en/language_grammars, 12.3 Rule Keys, 'include'.  You can see that in action in a jade.file:  ``` jade script(type=""text/javascript"").   if (10 == 10) {     alert(""working"");   } ```  where the coloring of the 'if' clause is driven by the javascript grammar. Check the Jade grammar `vscode/extensions/jade/syntaxes/Jade.tmLanguage` and look for`source.js `"
19614|@caperavensoftware dynamically generated source maps (e.g. through 'babel-register') are not yet supported.  This is a duplicate of https://github.com/Microsoft/vscode/issues/5728
19615|I'm not sure if this is the reason why it fails, but you should not call `edit` for every selection. I suggest to do the looping inside the edit callback.  ``` js public insertNumbers(): void {     const selections: vscode.Selection[] = this._textEditor.selections;      this._textEditor.edit(builder => {         for (const selection of selections) {             builder.replace(selection, 'test');         }     }); } ```
19616|The new settings will be called, `smartSuggestionsOnly` and defaults to `false`.   ![screen shot 2016-04-27 at 13 56 15](https://cloud.githubusercontent.com/assets/1794099/14851400/fc01cafa-0c7f-11e6-9a54-eabc36b92fdc.png)
19617|Yes it still reproduces.
19618|"``` // The module 'vscode' contains the VS Code extensibility API // Import the module and reference it with the alias vscode in your code below var vscode = require('vscode');  // this method is called when your extension is activated // your extension is activated the very first time the command is executed function activate(context) {      // Use the console to output diagnostic information (console.log) and errors (console.error)     // This line of code will only be executed once when your extension is activated     console.log('Congratulations, your extension ""commands-test"" is now active!');      var channel = vscode.window.createOutputChannel('Ext1');      // The command has been defined in the package.json file     // Now provide the implementation of the command with  registerCommand     // The commandId parameter must match the command field in package.json     var disposable = vscode.commands.registerCommand('extension.sayHello', function () {         // The code you place here will be executed every time your command is executed          let v = process.version;         console.log(v);          let buffer = new ArrayBuffer(320000);         console.log('byte buffer', buffer.byteLength);          let view = new Int32Array(buffer);         console.log('int32 view', view.length);          for (let i = 0; i < view.length; i++) {             view[i] = i * Math.random();         }          console.log('made it...');          let data = new Array(10001);         data.fill(42);          console.log(data.length);          let longString = data.join('oooooo');         longString += '<TOO LARGE>';          console.log(longString);          channel.appendLine(longString);          // Display a message box to the user         // return vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file('\\\\psf\\Home\\Code\\_samples\\ConsoleAppDnx'), true);         // return vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file('\\\\psf\\Home\\Code\\_samples\\ConsoleAppDnx'), false);     });      context.subscriptions.push(disposable); } exports.activate = activate;  // this method is called when your extension is deactivated function deactivate() { } exports.deactivate = deactivate; ```"
19619|fyi @dbaeumer
19620|Ok, the problem is that the `files` section has an entry which doesn't exist and therefore the project won't exist.
19621|This issue was moved to Microsoft/TypeScript#8334
19622|@jrieken @egamma @aeschli   I have mixed feelings about a `smartSuggestionsOnly`, mostly due to the `smart` part of it. Its explanation also doesn't help: _Controls if less smart suggestions show up when a language service cannot compute them_. Are the users who have this problem really going to find this setting?  I think we should think about textual suggestions as an exception to the rule and create a setting for controlling that exception, instead of considering it to be another link in the suggestion chain; and a _dumb_ one for that matter.  I'd propose instead to go with a `wordSuggestions` setting with 3 possible values: `never`, `default`, `always`. I'd further propose its explanation to be: _Provide suggestions based on all the words of the current document. By default, they are shown only when no further suggestions are provided (by a language service, for example)._.
19623|"first command  $ node -p ""require('dns').getServers()"" [ '10.171.108.2',   '10.171.34.57',   '10.171.30.4',   'fec0:0:0:ffff::1' ]  second one node -e ""require('dns').resolve4('marketplace.visualstudio.com ', function(err, result){console.log(err, result)})""  { [Error: queryA ENOTFOUND marketplace.visualstudio.com ]   code: 'ENOTFOUND',   errno: 'ENOTFOUND',   syscall: 'queryA',   hostname: 'marketplace.visualstudio.com ' } undefined  and final one  !! node -e ""require('dns').lookup('marketplace.visualstudio.com ', function(err, result){console.log(err, result)})""  { [Error: getaddrinfo ENOTFOUND marketplace.visualstudio.com ]   code: 'ENOTFOUND',   errno: 'ENOTFOUND',   syscall: 'getaddrinfo',   hostname: 'marketplace.visualstudio.com ' } undefined  ᐧ  Marc Poggi +33(0)6 84 085 086  ---  _FEELTEST_ _11 Avenue Bataillon Carmagnole Liberté_ _69120 Vaulx en Velin_  ## +33(0)954 909 111  www.feeltest.com  2016-04-27 12:25 GMT+02:00 João Moreno notifications@github.com:  > Not as far as I know. >  > Can you give me the output of the following commands? >  > node -p ""require('dns').getServers()"" > node -e ""require('dns').resolve4('marketplace.visualstudio.com ', (err, result) => console.log(err, result))"" > node -e ""require('dns').lookup('marketplace.visualstudio.com ', (err, result) => console.log(err, result))"" >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5816#issuecomment-215042126"
19624|Filed https://github.com/OmniSharp/omnisharp-vscode/issues/248
19625|Can you maybe talk to your system's administrator and show him the results of that query? Looks like the DNS server isn't responding well to those domain names.
19626|:+1: - we just need an easy way to get to the configuration service in the standalone editor case
19627|Can't reproduce, this was implemented long ago. Do you remember which action it was?  ![image](https://cloud.githubusercontent.com/assets/22350/14853001/e764f626-0c89-11e6-8022-6dfaffb2f71e.png)
19628|Here's how I can always repro: 1. Open any file in our repo and remove a semicolon on end of line 2. command pallette > git commit 3. commit will fail due to lint check and I do not get the show output action
19629|:+1: We need to extract that if/else code into a mouse dispatching rule engine.
19630|I have created https://github.com/electron/electron/issues/5312 to track this with electron
19631|@martinring I agree that our documentation does not explicitly mention that variables are not supported, but AFAIK they were never implemented. So this issue is a feature request.
19632|// @alexandrudima
19633|@massimocode The snippets are not stacking (i.e. if you are in snippet mode and insert a new snippet the new snippet now takes over and pressing Escape leaves snippet mode entirely).  Can you please share the exact snippets you are running so I can debug what's going on?
19634|@alexandrudima ok thank you for the clarification. surrounding snippets are quite a common feature of editors. visual studio supports them as does textmate for example. I might look into adding that.
19635|+1 for Joao's proposal. But IMO the default should be that the language specific completion support can choose when textual completions are appropriate, as @alexandrudima mentioned. In the case of JSON, that would be inside comments and strings. At all other places, completing a word where a string literal is requested (with quotes) doesn't make sense, it leads to syntactically incorrect JSON and makes the JSON support look bad. As mentioned above, I'd suggest to add a new flag `includeTextualProposals`to the `CompletionList`(which is the result of a completion processor). The flag would be or'ed across all contributed providers, and if one of them responded `true`, textual proposals are included.  The explanation of the `wordSuggestions` option would be: _Provide suggestions based on all the words of the current document. By default, word completions are shown if no language specific completion support is present or when a completion support considers word proposals to be useful._  That will IMO please the two user camps described by Joh: - You trust the JSON brain/schema and if there are no proposals there is nothing more to type: `default` - You use suggestion as a tool to quickly type, ideally correct code, but the validation will let you know about it later anyways: `always`
19636|@papaiatis The colors for the whitespace is taken from the `invisibles` property in themes, so the color is customizable via themes.  e.g. https://github.com/Microsoft/vscode/blob/5b9ec15ce526decc5dd0488339e798f6bcb4ec46/extensions/theme-monokai/themes/Monokai.tmTheme#L19
19637|The `files.exclude` only affects what is shown in the explorer.   To exclude files from the JavaScript language service you can use the `jsconfig.json` exclude attribute https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson.  Closing as works as intended.
19638|@joaomoreno I am not against making the textual suggest logic configurable and 'yes' what you propose can replace the new config setting. Tho if we decide to take it out of the chain of providers and treat it special we will **not** ever be able to move textual suggestion logic into an extension. Something I though is desirable but also willing to give up.   @aeschli No to `includeTextualProposals` because that's just one completion item kind and there are many others, think of snippets to which we face a similar challenge. Also, that's the opposite of a collaborative system
19639|I dont think problem comes from there ... my collegue doesn't resolve the address too, both resolve4 and lookup but yet it works for him in VS !  ᐧ  Marc Poggi +33(0)6 84 085 086  ---  _FEELTEST_ _11 Avenue Bataillon Carmagnole Liberté_ _69120 Vaulx en Velin_  ## +33(0)954 909 111  www.feeltest.com  2016-04-27 15:03 GMT+02:00 João Moreno notifications@github.com:  > Can you maybe talk to your system's administrator and show him the results > of that query? Looks like the DNS server isn't responding well to those > domain names. >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5816#issuecomment-215074766
19640|@bpasero This command is a workbench actions which returns an error that [has resolution actions](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/gitServices.ts#L706). This pattern works when giving this error directly to the message service. Do you know why this is not getting properly wired up all the way to the message service?
19641|Oh interesting. What happens if you copy his settings? Where is your settings file located? Do they have the same version as you?
19642|Yup, this was happening due to css minification, with Joao's help we could fix it.
19643|"@jrieken I didn't understand exactly from the comments what semantics have changed w.r.t. the instantiation service. Is it safe to ask for it in the ctor and if services are instantiated later, the instance I got passed in will contain ""newer"" services?  e.g. In the ThreadService ctor, the instantiation service definitely does not contain a `threadService`. But later, when I need to instantiate something, the same instantiation service instance will contain the `threadService`. Did I understand this correctly?"
19644|That looks scary
19645|Currently we show the git quick diff: - green for added lines - blue for modified lines - red triangle for deleted lines  @bgashler1 How could we provide both indicators visually without confusion?  ![image](https://cloud.githubusercontent.com/assets/5047891/14854316/94de036a-0c8f-11e6-8657-a72230e666e8.png)
19646|The idea of not closing is that you want to stay in the mode in which you can cycle through all of them. Tho, I see how that works for reference search better than for go to def.
19647|Any steps or could you please ping me when you see it so we can debug.
19648|> Did I understand this correctly?  Yes - it's just not very clear when that _later_ is cos there is no explicit event or an implicit signal like the set-call is today.
19649|Right. Doesn't really make sense to keep it open after you jump to the file as you are able to peek in all of them before double clicking.
19650|Diffing is (due to memory consumption in web workers reasons) limited to 5MB files.
19651|Will, do. happens only once in a while but I think more often since the last update
19652|@jrieken  `includeTextualProposals` would be additive (or'ed) in that when at least one (active) provider sets it, the textual proposals will be added. Same collaborative spirit as when we make a union of all proposals of all (active) providers.
19653|@gjy1992 The colorization is based on TextMate grammars, which were built and defined by TextMate using the oniguruma regex library. When we colorize, we use the oniguruma regexes to evaluate text. Syntax at https://github.com/kkos/oniguruma/blob/master/doc/RE
19654|Visual Studio line changes when the code is not git versionned, and git line changes when it is?
19655|settings are the same . location too (c:users/myident/AppData/Roaming/Code/User ᐧ  Marc Poggi +33(0)6 84 085 086  ---  _FEELTEST_ _11 Avenue Bataillon Carmagnole Liberté_ _69120 Vaulx en Velin_  ## +33(0)954 909 111  www.feeltest.com  2016-04-27 15:36 GMT+02:00 João Moreno notifications@github.com:  > Oh interesting. What happens if you copy his settings? Where is your > settings file located? >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5816#issuecomment-215084704
19656|"There are some things that are easy and some things that are not :).  All the extension point handlers are (through API shape) forced to be written as listeners, so all of them would correctly get a ""late to the party"" extension description. So from an infrastructure point of view, we would need to ping all extension hosts and renderers processes from the shared process that manages extensions and inform everybody there is a new extension available.  What I cannot tell is if we have places where we cache things or where we make decisions that cannot be revisited.  For example, if a ""late to the party"" extension contributes a new language (for file extensions .alex), if you open a file before the extension is installed it stays open in the `plaintext` language and new .alex files that you open will get the new language association. In this case, there is no real code prepared to go back and re-evaluate the language association decision.  Perhaps we should just turn this on from the infrastructure side and deal with the bugs on a case by case basis. Possible issues: in the users of `extensionService.onReady` that need to wait for extensions to be scanned before taking a decision."
19657|I tried this with latest alpha and I still see it. Though only on windows and I do not think it is critical since it only happens if the user expands the nodes very fast -> setting to May and forwarding to Andre
19658|Fixed in 0d658f2c0308c770b90df5a73816f0c045817689
19659|"@isidorn Can you pls clarify what you mean with ""in this case""? Is that mac, this particular tooltip, something else?"
19660|@weinand thanks for clarifying.
19661|OK. Resolved. Talked to @kieferrm about a couple of things he has on his roadmap.
19662|@bpasero ha ok got it now.
19663|Ah okay. So I need to create a new Theme myself and adjust this color. According to [this](https://code.visualstudio.com/docs/tools/yocode) page I need to specifiy an existing theme to be based on my theme on. So where is the default dark theme located on Linux? I couldn't find it.
19664|@Visonnn does it reproduce with our latest insider build?  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
19665|Marking as upstream as this might require changes in Electron to support the scenario.
19666|@dbaeumer I assume this is not our file watcher doing the watching but the tsc?
19667|Currently we do not support theming of the entire workbench but there are feature requests open for it.
19668|@alexandrudima can you chime in?
19669|I think we got smarter here about when to show the debug console. @isidorn please chime in
19670|There is really no way for us to give focus to where you where coming from.
19671|Known windows issue, filed already.
19672|https://github.com/Microsoft/vscode/issues/929
19673|Okay, I didn't mean to specifically give focus to something else. I just meant not to take focus after closing a different window. (I didn't know if this was an intentional choice, or OS specific)  Thanks!  Edit: This specifically happens in sublime text, which was something I really liked, since I could close the editor and continue working directly in the terminal vs having to tab back to the terminal window.
19674|Quite possibly, I followed the instructions, not sure how to enable your file watcher instead of tsc ?
19675|@kieferrm in this case: is actually the vscode tree which we use for representing variables, watch expression and so on.  So I did not express myself nicely, in every case we use the native tooltip, except for the hover in the editor - which is our custom hover.
19676|Works!
19677|We only reveal the debug console on the first debug session start, not on consecutive ones. We are no longer forcing the debug console on every debug start because that was too obtrusive for some debug users. Closing as designed as we would like to get feedback from users for this change. If users prefere that we always show the debug console, then we can easily go back to our old behavior, but for now I would really like to get more feeback.
19678|Thanks
19679|@dbaeumer Dirk, what is the expected behavior? Do we only show diagnostics of documents that are open? Do I need to clean diagnostics on the server when I see a text document is closed?
19680|@lravindr Can you help?
19681|Sorry, I still have no clue what could cause the theme switch. Can you try again with the 1.0.1 release? http://code.visualstudio.com/download?insiders=true
19682|Can't really reproduce the uninstall button remaining, maybe this got fixed meanwhile?
19683|My fix is to disable any mouse events on iframes as soon as a sash is moving because an iframe would eat the mouse move otherwise.  Please verify this change across Windows, Mac and Linux. You should be able to move sashes as before and especially move 1-N markdown previews with sashes properly.
19684|I'm getting questions on this issue for my [Status Bar Tasks](https://marketplace.visualstudio.com/items?itemName=GuardRex.status-bar-tasks) extension. My extension simply passes whatever is in the arguments directly to Node's `child_process` module for execution. To make VS Code happy, I have a shell command in the top-level command (aka the @usagi method).  It looks like this slipped for the April iteration. Can we expect this to be fixed in May?
19685|The problem is that it would also need `includeSnippetProposals`, `includeXYZProposals` etc. So the thing to set would be or'ed completion item kind. Next question is if this is just a recommendation or a contract/filter. Then the question is why does the provider compute valid completion item kinds at a position but not the completion items? It seems we make things more complex than necessary.
19686|@bpasero This happens during construction of my GitDiffEditorInput. At that time all I have is the editor input for the right side. This one returns `application/unknown` even after the user sets a specific mode via the status bar. How can I get a hold of the mimetype the user specified?
19687|Let's revisit this once we figure out a common environment service.
19688|@bpasero ok tried this scenario. Once I attach to the watcher from VSCode insider I see that it is stopped in bootstrap.js, when I say continue I still do not get file events in VSCode alpha. Also I can not get those breakpoints to hit, and file events just do not work.
19689|https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/editors/fileEditorInput.ts#L95 ?
19690|Moving to backlog. ping @dbaeumer
19691|It is a recommendation. If set by at least one provider and the `wordSuggestions` is 'default' (or 'enabled'), the textual proposal provider will be included. Why does the provider not compute the textual proposals itself? So it doesn't need to know about the 'wordSuggestions' settings. Also if there are multiple providers that set `includeTextualProposals` to true, the work is only done once. Snippets could work the same way. `wordSuggestions` setting and a `includeSnippetProposals` flag. Or 'snippetContext', if we choose to add context to snippets. But I thought we wanted to have this discussion rather next week.
19692|That does not work. [Here's the point](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/gitServices.ts#L192) where I get the input. Even after changing the mimetype in the status bar, the **input** itself still reports `application/unknown`:  ![image](https://cloud.githubusercontent.com/assets/22350/14858286/bfcc0756-0c9f-11e6-858d-36b6a6ded496.png)  ![image](https://cloud.githubusercontent.com/assets/22350/14858289/c49e2b6a-0c9f-11e6-867b-3056082b6e49.png)  I'm guessing the mime change lives somewhere in a model, not in the input itself?
19693|You guys are pros! Thanks
19694|I have seen issues like this in Chromium. e.g. https://bugs.chromium.org/p/chromium/issues/detail?id=593971
19695|@joaomoreno sorry, wrong spot. when you change the mode from the status bar we actually literally change it on the code editor model, bypassing my input and my model. So you would have to ask Alex model for the mode set to retrieve this info.
19696|@aeschli What is the easiest way for @papaiatis to create a custom theme based on our default dark theme?
19697|> But I thought we wanted to have this discussion rather next week.  Yes, but I don't want to fix one problem is a special way `includeTextualProposals` when there is another very similar problem.
19698|"Sorry, will try to put a smaller repro code in the afternoon.  Sent from Windows phone  -----Original Message----- From: ""Martin Aeschlimann"" notifications@github.com Sent: ‎4/‎27/‎2016 7:54 AM To: ""Microsoft/vscode"" vscode@noreply.github.com Cc: ""Lokesh Ravindranathan"" lokesh.amarnath@gmail.com; ""Mention"" mention@noreply.github.com Subject: Re: [Microsoft/vscode] Indendation for Python is incorrect (#5592)  @lravindr Can you help? — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub"
19699|_How to get it_ is actually my original question. 😄
19700|👍
