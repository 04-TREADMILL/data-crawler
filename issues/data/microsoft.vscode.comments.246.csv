24501|@bpasero Done #7254
24502|Our prefix sorting in quick open widget is not aware of the command alias we introduced.
24503|Can't repro. Followed your steps. Running Win 10 Pro 1511 though.
24504|Btw, didn't inform, and not sure if it can be the cause of this, but I'm using the Dark-Dracula theme.
24505|"This works for me on master, and I believe there were some fixes recently around IIFE type checking.   @scharf, can you test this by installing `typescript@next` in a test package and in Code's settings.json temporarily setting `""typescript.tsdk"": "".../node_modules/typescript/bin""`, where `...` is the path of your test npm package? (You'll have to restart Code or Reload Window to get the changes.)"
24506|Created an animated GIF showing what happens:  ![Crash reprodution](https://cloud.githubusercontent.com/assets/7298695/15829481/6252aee4-2bea-11e6-8b1b-a95a39ff172e.gif)
24507|@featherJ I am closing this because I do not understand the issue from your description. I think you got confused by the concept of mime types in VS Code. this concept is actually something to get rid of (see https://github.com/Microsoft/vscode/issues/3832) in favour of language IDs. We only have mime types in the extensions due to this debt, but otherwise do not use them.
24508|@kieferrm fyi this is a PR that was applied to the legacy markdown extension and maybe you had plans to support something similar with the new extension.
24509|We will replace our markdown support with an extension, so this PR does not apply anymore. Closing.
24510|Might be an installed extension, try updating your extensions.
24511|"This works for me on master.  @DenysYefimenko, can you test this by installing typescript@next in a test package and in Code's settings.json temporarily setting ""typescript.tsdk"": "".../node_modules/typescript/bin"", where ... is the path of your test npm package? (You'll have to restart Code or Reload Window to get the changes.)"
24512|@dbaeumer See the attached screenshot. Wondering if this would be clear for the user to determine the source of error/warning.  ![source-info](https://cloud.githubusercontent.com/assets/10746682/15829980/70562986-2c16-11e6-880d-10e94a041c5f.PNG)
24513|If we wanted a warning we would have forbid any setting that is not any of the schemas. This is done by setting 'additionalProperties' to false. But this likely will hurt users that have settings of extensions that the currently haven't installed or internal/hidden settings for which we don't define a schema.
24514|1.1.1 seems to be fine for me too - Like yourself, wasn't paying attention to when it was fixed.
24515|I thought we would show warnings when using settings that are not defined anywhere.
24516|Definitely 64 bit and still hitting this on my laptop after syncing:  ``` ~ ‚ùØ node > require('os').arch() 'x64' >  ```
24517|@Tyriar but how would that work if you have files open in a stack? Currently when you click the file it opens the file and when you delete it shows the one next on the stack.
24518|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
24519|See https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer
24520|@jrieken @kieferrm fyi would be cool to be able to get native search working in the webview. I think there is API: https://github.com/electron/electron/blob/master/docs/api/web-view-tag.md#webviewfindinpagetext-options
24521|thanks @jrieken üëç
24522|https://github.com/Microsoft/vscode/issues/782
24523|Things have changed a little since I filed this but the behavior described is still the same when the deleted file is _not_ open. 1. Open some file `a` 2. <kbd>shift</kbd>+<kbd>ctrl</kbd>+<kbd>e</kbd> to focus the explorer 3. Navigate to some file `b` using the keyboard without pressing <kbd>enter</kbd> to activate it 4. <kbd>delete</kbd>, notice focus goes to build instead of one b's closest sibling, it's a little disorienting  So currently it doesn't focus the next file in the stack on the explorer, it opens the next file in the stack in the editor but focuses the parent of the deleted file in the explorer.  ---  Related to this, performing multiple actions with the keyboard within the explorer would probably be easier if we could turn off the auto-focus of the editor (I think it used to be like this) #7257. This coupled with #1023 and #7258, it would be convenient to do some real file/directory manipulation from within VSCode.
24524|I updated the issue with more detail and additional desired keybindings.
24525|I had the same issue. I was able to finally get it to work by running ... `sudo code . --user-data-dir='.'`
24526|`sudo code --user-data-dir /home/fregie/.config/Code/` doesn't work because it needs to be a new user data directory, one whose permissions are not as restrictive as `~/.config`. This should work for example:  ``` sudo code --user-data-dir /home/fregie/.code-root-user-data ```  Note that once we reshuffle the configuration directories this will no longer be necessary to explicitly indicate the root user data dir. See #5570 and #2741
24527|I can't reproduce this, at least on latest alpha. Can you try to hit up/down and scroll the mouse wheel to see if you can see the terminal come back? The only theme related issue I'm aware of so far is https://github.com/Microsoft/vscode/issues/6437
24528|Thanks so much, @outcoldman! Probs my favorite update in 1.2!
24529|I've tried to call `source ~/.bash_profile` and it worked perfectly, maybe if we could configure the source file for the integrated terminal session this would be a finished feature.
24530|I'm having this same issue as described above.  However, I cannot use Cmd Shift P, because vs-code never begins functioning on startup.  I can interact with menu options but clicking them does nothing, I can open files from the left drawer but they're all plain white text, and no keyboard shortcuts ever work.  Additionally, I receive this error even if I open vscode without a folder.  Here is my output from `env`:  ``` TERM_PROGRAM=Apple_Terminal SHELL=/bin/false TERM=xterm-256color TMPDIR=/var/folders/j8/x1_3f4p113z0ss1n3qk2ldt053m58d/T/ Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gaq2AJDytY/Render TERM_PROGRAM_VERSION=361.1 OLDPWD=/Users/XXX TERM_SESSION_ID=C1F70A8B-6294-42A1-B7A5-AF5533115E08 USER=XXX SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.ymKWKcmbFm/Listeners __CF_USER_TEXT_ENCODING=0xA3A150D:0x0:0x0 PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/go/bin PWD=/Users/XXX/code LANG=en_US.UTF-8 XPC_FLAGS=0x0 XPC_SERVICE_NAME=0 SHLVL=1 HOME=/Users/XXX GOROOT=/usr/local/go LOGNAME=XXX GOPATH=/Users/XXX/code SECURITYSESSIONID=186bc _=/usr/bin/env ```
24531|@weinand implemented `allThreadsStopped` in 1.9.0
24532|Ok i've been testing and the difference with native and integrated is the fact that i configured the native to `Run as login shell`, idk if the integrated one has the config option like the native like this in profile: ![image](https://cloud.githubusercontent.com/assets/9698639/15835511/f819f0da-2bf5-11e6-9dd1-c986cc4828ef.png)
24533|I have coded up a small extension to simulate the fs accesses the tsserver does during startup. The download is here: [6282-0.0.1.zip](https://github.com/Microsoft/vscode/files/301215/6282-0.0.1.zip)  How to install: - unzip the zip file. - change to the directory containing the vsix - in a command prompt type > code .\6282-0.0.1.vsix This will install the extension - switch to your workspace folder that shows the problem - start the CodeHelper on that workspace as explained above - open code on the workspace - run F1 > 6282: Stat File System - let me know if this generates any file events. - run F1 > 6281: Install Watchers - let me know if this generates any file events. - to uninstall the extension run F1 > Extensions: Show installed Extensions - select 6282 - and press the x button to remove.
24534|"Looks like the ""hidden terminal"" of winpty has some width limit."
24535|And the handle of CJKV characters in NT console behaves differently under cp932/936/949/950 and other CPs (like cp65001).
24536|No, I tried that already. Same situation on Mac OSX.
24537|This will likely be fixed in the lib after we figure out which one we're going to go with in #6838
24538|"I just encountered the same behavior, which was quite surprising. My use case: replace incorrect spellings of ""ID"" (many people spell it ""id"" or ""Id"", but in our product, it should be uppercase) in our documentation. The regex `\s[i|I]ds?\s` should have only found the incorrect spellings, but was finding all the correct versions as well.  I'm not sure the behavior is ""wrong"", but it was unexpected. I incorrectly thought the three symbols in the search box were radio buttons, so I didn't connect that I could toggle both regex search and case-sensitivity."
24539|Just a comment on the update text @ https://code.visualstudio.com/updates#_workbench  The text was unclear to me and I actually thought that the updated stacks were already here (and that tabs would come later). After updating I didn't see the updated stacks and had to re-read the text a few times.  To me it says that Tabs will take more iterations (so no tabs in _this_ update), but that in May you made great progress on how to manage stacks of editors (so despite there being no tabs, updated stacks _are_ in this update?) and that there is more work to be done for the June release branch (to improve stacks even further?).  So to anyone who may have been confused like I was.. looks like updated stacks **are not** actually in this update. I guess it's just a preview of both tabs and stacks to come.
24540|It would also be strange the other way though since when doing a regular search with `Aa` unchecked is case-insensitive.  @alexandrudima any thoughts on improving the discoverability of the case sensitivity button?
24541|+1. I get a lot of people asking for this for my theme. I assume a lot of theme developers do.
24542|Sounds great. Thanks for the effort!
24543|@Tyriar I can confirm that term.js cannot handle DBCS characters well.  On windows... - If you are using a DBCS codepage (like 936 or 932) in CHCP, all CJK characters are exactly two cells wide, even in the console buffer [to simulate some hardware (‚ÄúÊ±âÂç°‚Äù) in 1990s which combine two cells into one cell to display full-width characters]. - If you are not, they are fit in one cell, even when displaying.
24544|"Also hit this on OS X.  Was able to work around it by creating a shell script that then invokes the shell with the desired parameters.  Try creating a `.bat` file (or the power shell equivalent of that) with your command line.  Would be nice if we had `""terminal.integrated.shell.osx.args"": [ ""--foo"", ""bar"" ]` or something."
24545|FWIW it did take me a while to figure out that the command was `workbench.files.action.showActiveFileInExplorer`
24546|@be5invis we're likely going to go with xterm.js, I created a bunch of i18n issues over there after playing with it a bit: - Pasting in Êó•Êú¨Ë™û adds an unexpected line break after Êú¨ which puts the cursor off screen https://github.com/sourcelair/xterm.js/issues/61 - CJK characters are not treated as double width chars https://github.com/sourcelair/xterm.js/issues/62 - Moving over CJK text jumps 2 characters at a time https://github.com/sourcelair/xterm.js/issues/70  I think they're all related to the width and byte size of the characters.
24547|I'm having same issue in VSCode 1.2.0.
24548|Updated to v1.2.0 and the problem is gone.
24549|Huh, didn't even notice this because I use <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>p</kbd> for the command palette. Thanks for the report @pcgeek86
24550|Of course, thanks for looking into it @Tyriar!! :smile:   I used to use CTRL + SHIFT + P, but then I changed over to F1 when I heard other folks using it. Honestly I love the natural feel of having both options. I use them both at various times.
24551|I didn't see it mentioned in the list of tab features above, so I'll add my personal favorite (hard to work without it): `alt+#` => show tab #.  I like this for a few reasons: It's easy for my brain to know which tab to go to a specific tab very quickly, I don't even have to read tab titles because they stay in the same tab number slot for a while, and I don't have to use a mouse.  Most editors I've used do this, and it's kinda baffling that this feature is missing in VSCode (even Atom does it).  As to the people who have 1000 tabs open at once... why?  Just close your files. :)  Most people are only working in a small handful of files at a time, which all usually fit into easy `alt+1` to `alt+5`, super easy for a one-handed thumb + finger key-combo, or two-handed (right alt + left #) if that's your style.  Sublime handles tabs perfectly, just copy it!
24552|I'm experiencing the same issue. - VSCode Version: 1.2.0 - OS Version: Windows 10 Insider Preview 14352 - NPM Version: 3.8.6  However, `npm ls` is able to print some results:  ![image](https://cloud.githubusercontent.com/assets/5011956/15840338/14c7c0c2-2c41-11e6-8073-84e30bcdc384.png)  If I disable the progress bar, the output works.  ``` npm set progress=false ```  ![image](https://cloud.githubusercontent.com/assets/5011956/15840400/83b617fe-2c41-11e6-89fe-651640c22353.png)
24553|Seems this is a duplicate of #7194, recommend close.
24554|dup of #7194
24555|With the 1.2.0 version, this issue has been resolved. Yeah. Great.
24556|@Any updates on implementing a more clear representation of folded code? @aeschli
24557|"@joaomoreno  @egamma I am not sure what happened, but this most recent release has had some odd issues with my IntelliSense,etc.   The dropdown has some issues with the icon (I dont think i am zoomed into the editor - there is no way to tell): ![image](https://cloud.githubusercontent.com/assets/6901336/15841639/6fb4c2d8-2c18-11e6-939f-cd15fdd525ce.png)  I also have an issue with the tooltip now, i am assuming it scales with fontSize?, it is VERY big now: ![image](https://cloud.githubusercontent.com/assets/6901336/15841694/a425a5c8-2c18-11e6-860d-a40b6c5e9ff2.png)  My user settings are below:  ``` {     ""editor.fontSize"": 15,     ""editor.roundedSelection"": false,     ""editor.wrappingIndent"": ""indent"",     ""editor.tabSize"": 4,     ""editor.insertSpaces"": false,     ""editor.detectIndentation"": true } ```"
24558|"I would love to see this all configurable.  I like the way sublime text does it.  You can open a folder (which opens a new window) or open a file (which opens it in your current window).  I never use ""open recent"".  All doable with only the keyboard, of course (I've read about ctrl+click for your mousers, I guess).  Though I can see why other people would want different things... thus making it configurable."
24559|Update: Executing `npm run build` using the new integrated terminal in VSCode 1.2 also puts some built files in the wrong location. Seems to be the same odd behaviour as building from `tasks.json`.
24560|I've seen same breakage with the terminal on Win8.1, couldn't find a way to repro at the time though.  @martinring Do you happen to have a bunch of errors on the developer console when terminal breaks by chance?  I'll try to repro with your method on that machine, going to check on my F23 machine as well and report back here.
24561|"@bpasero  > Our prefix sorting in quick open widget is not aware of the command alias we introduced.  Do you mean Localized texts by ""command alias""?  If so, my intention is different. I think the commands should be sorted using the original command names like en-US:  ![image](https://cloud.githubusercontent.com/assets/1311400/15842574/2ccaf26c-2c95-11e6-9837-bf05d73fc4d3.png)"
24562|Oops, I mis-understood the issue. The code sequence does not have any EVS. But the emoji character was just treated as two character sequences. Anyway, this seems a bug of vscode.
24563|Is it possible that this has something to do with NPM 2 vs 3? I also had this issue, today. A new project with no dependencies debugs fine, though.
24564|+1 for startup command feature so you can launch `source ~/.bash_profile` automaticlly
24565|Yes currently the terminal runs as a non-login shell, I'll add this to the backlog.  In the meantime, if you don't want differences between login and non-login shells, I recommend moving the .bash_profile contents to your .bashrc and adding the following to your .bash_profile:  ``` bash # .bash_profile if [ -r ~/.bashrc ]; then   . ~/.bashrc fi ```
24566|An extension would be ideal for a feature like this.
24567|Can confirm I had the same issue `Error from the extension host: spawn /usr/share/code/code (deleted) ENOENT`  It went away when I killed any already running processes. Probably should force a killall when a user restarts from an update.
24568|Duplicate of https://github.com/Microsoft/vscode/issues/7263
24569|@coreh nice workaround :)
24570|Duplicate of https://github.com/Microsoft/vscode/issues/7062
24571|I don't think ‚åòK would be a good default because it would conflict with the chord keybindings. I'm going to close this off as a duplicate of https://github.com/Microsoft/vscode/issues/6603 which will allow you to set your own keybinding for clearing the terminal.
24572|Duplicate of https://github.com/Microsoft/vscode/issues/6455, coming in the next release :)
24573|Hitting <kbd>ctrl</kbd>+<kbd>space</kbd> toggles the information
24574|The workaround does work for me, thanks  ``` bash #!/bin/bash if [ -r ~/.bashrc ]; then   . ~/.bashrc fi ```
24575|Cheers!
24576|I just created a feature request for one of these the other day https://github.com/Microsoft/vscode/issues/7073
24577|Since powershell is no longer the default and the fix to this is to correctly specify the 64-bit powershell, I'm going to close this in favor of https://github.com/Microsoft/vscode/issues/7095
24578|Finally progress is being made on this, I'll be going to a meeting towards the end of the month which should give the way forward :+1:   As such, it will likely come in July as the meeting occurs during the test/end game week.
24579|@bgse I know what you mean, I've been on daily builds for months and I'm always behind because of no auto updating.  There is some progress that will be made this month, but it won't be happening in v1.3.0, see https://github.com/Microsoft/vscode/issues/2973#issuecomment-224149317 for more details.
24580|Probably best left for after xterm is adopted.
24581|maybe we need 'alt+f3' to select all the same words when some are selected.
24582|I already have the source to `.bashrc` in `.bash_profile` however i will avoid editing the provided `.bashrc` by the system, i think i will stick to the native one until we can configure the launch of the integrated terminal.
24583|Last week I update the version to 1.1.0 and it worked fine without the above error. I just installed the latest release 1.2.0 and got a new error message. ![vscodeerreor](https://cloud.githubusercontent.com/assets/2767425/15844735/53db799a-2c8a-11e6-99c0-07ffcbe239d2.png) and syntax highlighting is not working.
24584|Ok, there is some confusion happening...  I downloaded the latest rpm from this link... https://code.visualstudio.com/Updates#_downloads  I assume it will be version:  1.2.0 Once I install, in the help>about> Version is still showing as 1.1.1
24585|By analyzing the blame information on this pull request, we identified @joaomoreno and @kisstkondoros to be potential reviewers
24586|This is the exact line that is throwing this error https://github.com/Microsoft/vscode/blob/5030d8dded95291191a0509612e95def68c1246b/build/lib/nls.ts#L61-L63  I replaced it with   ``` ts     if (!f.sourceMap && !f.path.endsWith('.js')) {           console.error('shouldnt be here in the first place');           return;     }      if (!f.sourceMap) {         return this.emit('error', new Error(`File ${ f.relative } does not have sourcemaps.`));     } ```  As you can see it is called for a bunch of `.d.ts` files:  ![image](https://cloud.githubusercontent.com/assets/874898/15845341/85fc748a-2cb5-11e6-858a-d5c41d2c38a1.png)
24587|"Hi. Try it. `""terminal.integrated.shell.windows"": ""C:\\Program Files\\Git\\bin\\bash.exe""`"
24588|@mappy7771 It works perfectly. Thanks much. :+1:
24589|@Luchillo it should be safe to just add their own stuff to the bottom of the default `.bashrc` file.
24590|Not for me:  ![editors](https://cloud.githubusercontent.com/assets/900690/15846593/0c847e94-2c7f-11e6-9472-52ea10dc06c6.gif)
24591|that should happen on the level of the tree
24592|Yes, that would be the idea, but this is not easily possible without a bit of work currently.
24593|Not for me:  ![editors](https://cloud.githubusercontent.com/assets/900690/15846676/cbe375ce-2c7f-11e6-8b6d-fa2eac314336.gif)
24594|Not sure if should be included in this request or another issue, but it would be great to include the colour swatch in the IntelliSense list for variables as well
24595|I guess the difference is that: `git-bash.exe` is a Windows application (with `WinMain` as entry), but `bash.exe` is a console application (with `main` as entry). To be used as integrated shell, the executable must be a console application, so that `stdin`/`stdout`/`stderr` can be redirected.  As this is a pretty  common scenario, should we somehow make this documented, at least for `git-bash.exe`?
24596|Hi, I have updated the original issue [#102](https://github.com/DonJayamanne/pythonVSCode/issues/102) with some additional information. I believe this is a problem lies with how the default encoding is picked up by Python when launched from NodeJs.
24597|@dstorey it makes sense to be part of this request.
24598|/deep/ no longer exists, so I don't think we should support it. >>> is the new version, which should probably be supported, but I don't know how stable it is right now. These kind of things usually get renamed a lot before being widely supported.  https://drafts.csswg.org/css-scoping-1/#deep-combinator
24599|I just updated today and am getting the same thing.
24600|hi, when open a Lua file which's encoding is GBK and without BOM header, the VS Code can not aoto  dectect the encoding. I need to switch utf8 to GBK by hand every time i open a new such file, It's annoying. I've install the `gbktoutf8` extension to solve it (`ext install gbktoutf8`). But I hope the VS Code have some configuration to do it better. The VIM editor can config the dectect encodings order, which is a convention solution to this problem. @egamma
