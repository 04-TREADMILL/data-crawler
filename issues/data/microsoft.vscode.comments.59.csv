5801|Unfortunately our Symantec Endpoint is locked down heavily by corporate IT.  Certainly wouldn't surprise me if that was causing the problems.  I might have to try disconnecting from the network and attempt to kill the Symantec processes.  As a side note, I tried running the source-built VS Code with the latest Electron build and it didn't impact performance.
5802|I was unable to disable Endpoint, but I don't think it's the problem.  I installed VS Code on one of our Win Server 2012 R2 boxes (also runs Symantec) and it opens completely within 3 seconds.  One of our Win Server 2008 R2 machines runs it perfectly also.  Something on my Win 7 SP1 machine is the culprit.   Really, though, it seems like an Electron issue, so if you prefer I can submit an Issue there instead. (Duplicated this issue on another Win 7 machine on our network, also.)
5803|Same error, I can browse all extensions, but when I try to install: getaddrinfo ENOTFOUND localhost:53128 localhost:53128:53128
5804|Hi. I have a similar issue.  Authentication fails, always. It seems to be connecting as an anon user. The log output is `remote: Anonymous access to xxx failed.` This is after entering the username and password in the corresponding popup that shows up when trying to sync.
5805|I believe it came from here: http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-1511.iso
5806|FWIW Sublime and Atom (on Ubuntu) don't trigger a rename on a delayed second click either.
5807|"Still get the ""unable to verify the first certificate"" error with the new build. I've never gotten the error about the cert being self-signed.  Can I enable logging or get some kind of debug output for you? That might help.   As an aside, I actually get a similar issue (unable to verify first certificate) when I try to run a locally compiled vscode from the source tree, right when `code.bat` bootstraps electron.  EDIT:  Looking at   ``` export function getProxyAgent(rawRequestURL: string, options: IOptions = {}): any {     if (!options.proxyUrl) {         return getSystemProxyAgent(rawRequestURL);     }      return getAgent(rawRequestURL, options.proxyUrl, options.strictSSL); } ```  in proxy.ts - is the strictSSL flag ignored if a proxy URL isn't set? That would explain why just setting `http.proxyStrictSSL` doesn't work for me, since I don't supply a proxy URL via `http.proxy` (and I don't do that with either Atom or node/npm to get them working either, I just disable the appropriate strict ssl setting)"
5808|Looks like it doesn't matter so much as `indent_size` is the fallback for `tab_size`?  > **indent_size**: a whole number defining the number of columns used for each indentation level and the width of soft tabs (when supported). When set to tab, the value of **tab_width** (if specified) will be used.
5809|great idea, created https://github.com/Microsoft/vscode-docs/issues/109 and assigned that bug to @gregvanl
5810|@bpasero  Some entries in the Edit menu should be disabled if no editor is open: - undo/redo - cut/copy/paste - select all, find/replace
5811|Here are the icons. [conditional breakpoint icons.zip](https://github.com/Microsoft/vscode/files/83463/conditional.breakpoint.icons.zip)
5812|Starting with 587854a5bcae72950da0e9412ab773933a350e6b, the find next/prev and replace actions no longer use the decorations for their logic, so the functionality of the widget works regardless of the 1k limit, it is only the visual hints now that end after 1k:  ![find1k](https://cloud.githubusercontent.com/assets/5047891/12213196/a9c57b4e-b674-11e5-9141-1a00c616c80e.gif)
5813|Just checked again, `Replace All` on `master` replaces all find matches, regardless of the 1k decorations limit.  See https://github.com/Microsoft/vscode/blob/587854a5bcae72950da0e9412ab773933a350e6b/src/vs/editor/contrib/find/common/findModel.ts#L321
5814|It looks like you just have one asterisk where in this example there are two asterisks. I think VSCode believes this to be something other than a comment maybe.  I am also using Monokai in this example.  ![darkgreen](https://cloud.githubusercontent.com/assets/1493530/12214091/3ed9372c-b655-11e5-8989-3931e31a166d.jpg)
5815|Actually nothing appears in the console when the file is externally changed. ![capture](https://cloud.githubusercontent.com/assets/767359/12215127/246cf71e-b6d9-11e5-96b5-2a60e7d10752.PNG)
5816|After having removed the whole project directory and having rerun git clone https://github.com/microsoft/vscode I could not reproduce the observed behaviour. So I think it is not worth while further examinig this case. Thanks for your quick response.
5817|Aha, thanks @Tyriar . Missed that one.
5818|Starting with 587854a5bcae72950da0e9412ab773933a350e6b, all find widget operations (find next, find prev, replace, replace all) now function outside the 1k decorations limit.
5819|Sorry, just noticed that the cmd prompt closes automatically now
5820|I can confirm that this issue still persists to some extent. We are using bitbucket as git store and when pushing from VS Code an additional / is added to the url when pushing (or pulling) and an authentication error is thrown.  Opening a console and doing `git push` works just fine, except that the warning is displayed regarding the new push.default config setting that is still unset. It appears that setting this setting using `git config push.default matching` the error goes away in VS Code
5821|"Same problem for me with GitLab CE. Visual Studio Code (0.10.6) adds a final forward slash to path and I get: git fetch fatal: Authentication failed for 'http://server/plogen/pHomeBackup.git/' git pull fatal: Authentication failed for 'http://server/plogen/pHomeBackup.git/'  Despite having no  final forward slash: {     ""git.path"": ""http://server/plogen/pHomeBackup.git"" }"
5822|Great minds think alike :smile: This is on the plan and we start on it in January, pls see the January iteration plan #1826, in the Debt section.  CC @aeschli
5823|We could also provide an option to disable emmet, this would remove the annoyance.  Need to investigate whether emmet should in general only expand on tab at the end of the line.
5824|see also #774
5825|+1
5826|Hi **@malekpour**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
5827|**@malekpour**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
5828|+1
5829|"A better workaround currently is to use `taskSelector` because that's what the property is for ;) The extra `windows` setting is also not needed. `npm test` is just a shortcut for `npm run test`.  ``` json {     ""version"": ""0.1.0"",     ""command"": ""npm"",     ""isShellCommand"": true,     ""taskSelector"": ""run"",     ""showOutput"": ""silent"",     ""tasks"": [         {             ""taskName"": ""watch"",             ""isWatching"": true,             ""problemMatcher"": ""$tsc-watch""         },         {             ""taskName"": ""compile"",             ""isBuildCommand"": true,             ""problemMatcher"": ""$tsc""         },         {             ""taskName"": ""publish"",             ""showOutput"": ""always""         }     ] } ```  But I agree that if VS Code detects Gulp and Grunt tasks, it should also detect npm scripts."
5830|Basically Code should look in `node_modules/.bin` aswell for _all_ commands, even when individual commands for individual tasks get added as a feature. This allows projects to specifiy specific versions of their compilers or task runners in devDependencies.
5831|so potentially I can reuse the same to  have an extension which provide a UML view or any other graphical view of my workspace (as long as it's HTML content)?
5832|I can reproduce the same bug.
5833|@joaomoreno Regarding 5, this is not true, at least not on Windows. I have 5.3 installed but Code says it uses 4.1.1
5834|@bpasero I can confirm same issue on Atom and Light Table, on Brackets on the other hand its ok, could you please explain why its this the case, its clearly rendering issue but why?!
5835|Also it may fix PostCSS support in Visual Studio.
5836|The absence of stylelint support is one of only two things stopping me using Code more (the other being a'goto symbol in project' capability for CSS).  To get stylelint built in would be fantastic (a 3rd party plugin like Sublime's would be a close second).  I'd also go so far as to say I don't know many progressive CSSers that rely on CSSlint for their listing anymore. For my money, stylelint is its natural successor.
5837|@kasajian Thank you for the detailed steps
5838|Code uses node, simply because it is built on Electron, which uses node. This makes it impossible to update node without updating Electron as well. The version of node that Electron is built with should be irrelevant to our users;  it really only influences extension developers.
5839|What about when the user doesn't want to save the file? Part of my workflow is to use my text editor to take notes which I'll either save/delete/action later.
5840|@Tyriar I'm pretty sure the main purpose of this feature is not what you're referring to. However that can be good separate feature.
5841|@bpasero I'm also very interested in seeing file paths to be included into the quick search. We have lots of `component/index` type of tiles which renders current file only matching useless. I see there was some work done and I was trying to search through the vscode base for the place where the matching is happening, but it's proving to be more difficult than I expected. Any chance you could point me to a commit or a place in the code that I could use a starting point?
5842|"Well, the problem is this.   <img width=""339"" alt=""screen shot 2016-01-11 at 12 07 49 am"" src=""https://cloud.githubusercontent.com/assets/15795265/12223218/75a532d0-b7f7-11e5-819e-ec1795511503.png"">  This is a .jsx file. I hope you guys get the issue this time."
5843|I cannot reopen the issue. @aeschli
5844|"@MohammadYounes   Added two new actions for <kbd>Ctrl</kbd>+<kbd>F3</kbd> and <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F3</kbd>: ""Sets the search pattern to the selected text, then search in the direction specified"". These actions do not move focus into the find widget."
5845|@alexandrudima  Awesome! Thanks :+1:
5846|Occurs using Phraseexpress too
5847|@bpasero No leaks when there are no open files (?). I'll try the clean workspace tonight after making sure to open a few.
5848|@jrieken I managed to create the extension, but the APIs seem quite different, including classes that you refer into the snippet you gave me, seem not available in the extension API.  For example the [EditorModel](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/test/common/api/extHostApiCommands.test.ts#L31) is not available in the `vscode.d.ts` that is generated in the extension by yo.
5849|While the system requirements are not front and center, they are listed, and the minimum version for Mac OS X is Yosemite. So, it won't work on Mountain Lion. See https://code.visualstudio.com/docs/supporting/requirements for more details.
5850|@joaomoreno Your fix build just works for me, now extensions could be installed successfully, thanks for your great work!
5851|Also hope this feature being added, refer to below screen capture of Atom after adding a new directory into it.  ![screencap_20160111-093707](https://cloud.githubusercontent.com/assets/14846203/12225590/c3993ac6-b848-11e5-9e22-f4e147dde55e.png)  Without indexing, the `ctrl + p` will be really slow for large projects.
5852|"I have a solution for this.  In your home directory (/C/Users/{username}) there should be a `.bash_profile` file which will house all your custom bash alias, etc. Git-bash uses `.bash_profile` before it will load `.bashrc` (_I believe_) so if you have _only_ a `.bashrc` file (and put the below in it) this might not work. The simple solution would to simply put `alias code=""cmd //C code $*""` in the `.bash_profile` file and make sure your `$PATH` has what is below in it, and you should be good to go.  > Side Note: To save myself headache going back and forth between environments where I'm using bash, I do not wish to keep a separate `.bash_profile` on one machine and `.bashrc` files for others, and keep them all up to date. So I have _one_ `.bashrc` file which I keep most everything in, and I have my `.bash_profile` source the `.bashrc` file.  In my _home directory_ (`C:\Users\{username}`) I have two files: `.bash_profile` _and_ `.bashrc`.  #### Contents of `.bash_profile`  `$ cat ~/.bash_profile`  ``` Shell if [ -f ~/.bashrc ]; then . ~/.bashrc; fi ```  #### Contents of `.bashrc`  `$ cat ~/.bashrc`  ``` Shell ... alias code=""cmd //C code $*"" ... ```  #### Contents of `$PATH`  `$ echo $PATH`  ``` Shell ... :/c/Program Files (x86)/Microsoft VS Code/bin: ... ```"
5853|"I've never seen tabs in vscode. You're referring to how Sublime and Atom look, right? VSCode gives you the ""working files"" menu on the sidebar and also the ability to flip between recent files with ctrl+tab, but I don't recall seeing physical tabs."
5854|I agree horizontal splitting would be awesome :D  It looks like [this is being worked on for the debug / console output panels](https://github.com/Microsoft/vscode/issues/1875). Would be nice to eventually see it for editor panels
5855|"@jaminroe I have the same issue with you, but I solved it, I have git installed, but when you type ""git --version"" in the terminal, it will prompt this:  ``` javascript Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo. ```  And then you need to use ""sudo git --version"", the purpose it that show the license and you need to pull down( press space/enter ) to the end and type ""agree"" to end this:  ``` javascript By typing 'agree' you are agreeing to the terms of the software license agreements. Type 'print' to print them or anything else to cancel, [agree, print, cancel] agree    You can view the license agreements in Xcode's About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf ```  After that, reopen visual studio code, your git and works fine( even you don't use it, it won't report error ) :)  I know more problems on MacOSX version for the ""code"", but ...I also keep using it right now, at least it's not bad, just sometimes the ""intellisense not working""( not working perfect like their video show us, I have not idea on this, hope them can fix this ), and make a try on MacOSX, from open a Empty folder to setup Node.js/Nativescript project( add the tsconfig.js etc, ), otherwise ""intellisense not working"" IS VERY VERY VERY VERY SAD for Mac User ....:("
5856|@SkaterDad does a bare Electron application also take so long to open then?
5857|I think in your case you opened just a file, can you try the same thing with opening its parent folder and see if then the updates happen? Also, is this G: drive something you created with SUBST or a real physical drive?
5858|@jack-dev no I cannot explain it, if you file the same bug against Atom, it will get the attention of the Electron guys (underlying UI framework) which maybe helps us find the actual issue here.
5859|Yes it does.  On Mon, Jan 11, 2016, 12:14 AM Benjamin Pasero notifications@github.com wrote:  > @SkaterDad https://github.com/SkaterDad does a bare Electron > application also take so long to open then? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1855#issuecomment-170441957.
5860|@alexgorbatchev the code that matches on file paths lives in https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/search/node/fileSearch.ts#L234  When you enable the new `filePicker.alternateFileNameMatching` option, paths will be searched automatically, did you try it out?
5861|@SkaterDad I think under these circumstances you should report it against Electron and maybe include the CPU profile for them.
5862|"@bpasero is this true?  > What might potentially make this more complicated is that VS Code has the session restore setting and the default is to restore only 1 window. So if you kill all code processes and relaunch code, and the user had multiple open when they installed the extension, then by default only 1 of them will ""restart"" and the rest will remain closed."
5863|@bpasero I had a hard time fully understanding the issue here. Gave it to you since it seems that the problem is that `tsconfig.json` is not shown in the explorer. Feel free to fwd.
5864|@bpasero ping
5865|@stevencl @bgashler1 @bpasero not sure if there's a dupe for this already
5866|I agree with @moostad. Let's transform this issue into a feature request. I think it's a good idea.  @bpasero fyi
5867|This should only happen on Windows. Other OSs work properly.
5868|@alexandrudima is this feasible?
5869|**Workaround:** delete the `csharp-o` folder.
5870|Duplicate of #1605  **Workaround:** delete the `csharp-o` folder.
5871|fyi @weinand
5872|This is an issue with the vscode chrome debug extension not vscode itself, please file it under this repo https://github.com/Microsoft/vscode-chrome-debug fyi @roblourens
5873|@felixfbecker The reason why we don't do it is that git errors come in many different shapes or sizes. If you truncate many of the git errors, you won't get anything meaningful. This generic approach works for most cases.  What we can do instead is catch each error individually and provide a good UX for them. The specific case you mention (checkout with dirty tree) also happens to me quite often, so let's catch that and display a better error message when it happens.
5874|Very interesting and common scenario... we need to fix that.
5875|@dbaeumer I assume this is task related.
5876|Code doesn't have tabs.
5877|Wanna give it another try? Might be a problem in the `atom.io` server.
5878|@egamma @aeschli @bpasero ping
5879|"This is an extension opportunity and there already is a [stylelint extension](https://marketplace.visualstudio.com/items/shinnn.stylelint).  Repository: https://github.com/shinnn/vscode-stylelint.   Code supports to disable the built-in css linting (which is a custom linter) using a setting:  ``` json ""css.validate"": false ```"
5880|@felixfbecker VSCode always runs debug adapters in the node version that the underlying electron is using (because is forks them). So the node version used for running the debug adapter should be independent from the node version installed. Only if you run the debug adapter in server mode, does the installed node version matter.
5881|Thanks am lot for the pointer and info! @davidtheclark Visual Studio Code and Visual Studio are different products, not sure which one you meant. This issue tracker is for Visual Studio Code, for Visual Studio feature requests you would post here: http://visualstudio.uservoice.com/forums/121579-visual-studio. If you meant Visual Studio Code, you are right, we have no support for stylelint yet. Since November we however have an extension API that allow you to add additional linters. Check our API documentation on that: https://code.visualstudio.com/docs/extensions/example-language-server  It would be great if the community could pick this up!
5882|You can only mark one task as a build task. The system should report and error if you mark more than one. So Ctrl+Shift+B can only trigger the Typescript Compile OR Deploy OR Done. Not all of them.  The not stopping spinner is a different problem. I will look into it.
5883|Thanks for the icons! Andre and me have some feedback: - The '+' is confusing, for us it represents adding something new when clicking on it - Some characters which better represent a conditional breakpoint: = ? ! - The conditional breakpoint looks exactly like the swiss flag - I would also check what VS is doing - No need for the disabled conditional breakpoint icon, in that case we will just show the disabled icon. Too many icons cause confusion imho
5884|"@bpasero  Started Code two minutes ago. Activity monitor reports already a memory usage of 1.25 GB... This is what ps says: martin@mbp13 oi [master] $ ps aux | grep Electro martin            987 115,7 13,1  4206388 1099208   ??  R    10:09am   2:16.77 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=watcherService martin            988   0,0  0,0  2464436   3184   ??  S    10:09am   0:00.01 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=59 martin            981   0,0  0,7  3203928  54996   ??  S    10:09am   0:00.60 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=pluginHost martin            980   0,0  1,7  4519136 145132   ??  S    10:09am   0:03.12 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper --type=renderer --no-sandbox --lang=en-US --node-integration=true --enable-delegated-renderer --num-raster-threads=2 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --channel=974.1.633953805 martin            979   0,0  0,5  3194512  39524   ??  S    10:09am   0:00.30 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap --type=SharedProcess martin            975   0,0  0,5  2711288  40136   ??  S    10:09am   0:00.25 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper --type=gpu-process --channel=974.0.1109795083 --no-sandbox --supports-dual-gpus=false --gpu-driver-bug-workarounds=13,24,29,32,41,45,52,58 --gpu-vendor-id=0x8086 --gpu-device-id=0x0166 --gpu-driver-vendor --gpu-driver-version martin            974   0,0  0,8  3395268  65068   ??  S    10:09am   0:01.38 /Applications/Visual Studio Code.app/Contents/MacOS/Electron martin           1060   0,0  0,0  2432788    588 s001  R+   10:11am   0:00.00 grep Electro"
5885|"There is a setting to control this, just set ""window.reopenFolders"": ""all"""
5886|#62
5887|"Proposal: wrapping any attribute or group of attributes in a sub structure ""osx"", ""linux"", and ""windows"" makes it OS specific."
5888|"@bpasero After start (with loading my Ember project automatically ), I've got six Electron Helper processes. One of them ist using approx 120% CPU to allocate memory. It stops eating CPU cycles after allocation aroun 1.28 GB RAM. I already excluded the usual suspects (node_modules, tmp, bower_components) with ""files.exclude""... Thx in advance, Martin"
5889|In JSX files mark occurrences is currently done just textually (and it is unrelated to what is done in .html files).  We will switch the underlying infrastructure to Salsa see Microsoft/TypeScript#4789. Salsa will provide what is done in .tsx files in .jsx files. I've just checked the latest support in .tsx and this feature request isn't covered. I suggest to reproduce your problem in a .tsx file and then file a feature request against typescript https://github.com/Microsoft/typescript.
5890|There is an extension for this: https://marketplace.visualstudio.com/items/jrieken.backspace-plusplus. Can you pls give it a try and let us know how it works for you?
5891|The Dark+ is better but there are issues, likely with the new tokenizer (all in TypeScript): -  Types of return values are not colorized for non-builtin types (so all my types are not colorized)  ![coloring1](https://cloud.githubusercontent.com/assets/1737586/12230296/b6caece8-b84f-11e5-9482-5ccf8dda9fb9.png) - Sometimes, if the return type is generic, part of it is colorized the same as function name  ![coloring2](https://cloud.githubusercontent.com/assets/1737586/12230315/e36e2ce2-b84f-11e5-9d7b-2c323e8e6477.png) - Keyword public is colorized like type when used in constructor  ![coloring4](https://cloud.githubusercontent.com/assets/1737586/12230359/57a73e82-b850-11e5-8ca0-5aedcfbd321e.png) - All words in a lambda are colorized like types  ![coloring3](https://cloud.githubusercontent.com/assets/1737586/12230349/31459c7a-b850-11e5-8d10-8a3383ade7e1.png) - I don't recall if methods - when called - were also colorized before? (declarations are now colorized fine)  All in all, a step in a right direction :smile: I sincerely hope you had a good reason to change the tokenizer because coloring was really great before...
5892|duplicate of #1470 + https://github.com/Microsoft/TypeScript-TmLanguage/issues/37
5893|I made the count badge a bit rounder, so that it looks better in the single digit case. Let me know what you think, imho now it looks better
5894|Improved in 163c2c673
5895|#1749
5896|Thank you very much!
5897|Fixed in 163c2c673 by providing extra details view, similar to @jcward's suggestion.  ![image](https://cloud.githubusercontent.com/assets/22350/12230728/8ef6c838-b852-11e5-8c0a-115087f12352.png)  Click the **info icon** or press <kbd>Ctrl Space</kbd> to read more.  ![image](https://cloud.githubusercontent.com/assets/22350/12230730/91073176-b852-11e5-8184-2a1568abef4e.png)  <kbd>Ctrl Space</kbd> or <kbd>Escape</kbd> to go back.  Further improvements to Intellisense tracked in #1134
5898|@moostad this sounds like a good example for an extension :)
5899|@boxHiccup is this with any file?
5900|@AndrewNatoli I've just verified that VSCode passes file paths unmodified to the debug adapter trough the SetBreakpointsArguments.source.path. So the path that you see in the debug adapter should match the path of the file on disk (If this would not be the case, debug adapters would not work on case sensitive file systems e.g. linux).
