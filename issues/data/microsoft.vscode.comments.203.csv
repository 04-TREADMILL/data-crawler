20201|"Surface Pro 4, Windows 10, 4k Monitor with 150% scaling. Even with both flags enabled, it looks still a little bit blurry to me when I compare it with the ""About"" message box.  1.1.0-insider without any flags:  ![image](https://cloud.githubusercontent.com/assets/1385611/14921724/e9726254-0e33-11e6-8c0c-addbde4a5f99.png)  1.1.0-insider with `--disable-gpu`:  ![image](https://cloud.githubusercontent.com/assets/1385611/14921713/d52fc8a4-0e33-11e6-8986-b77c9e2d253a.png)  1.1.0-insider with `--disable-gpu` and `--enable-use-zoom-for-dsf`:  ![image](https://cloud.githubusercontent.com/assets/1385611/14921705/c8db0dfc-0e33-11e6-914e-67c9ec734835.png)"
20202|@ashes999 both user voice and [:+1:'s on GitHub](https://github.com/Microsoft/vscode/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc) are useful.
20203|Verified that the output no longer shows up.
20204|@Tyriar if you look at user voice, MS employees actually respond to and act on those. So it's a matter of getting enough momentum there. (I don't know how closely they look at GitHub issues.)
20205|In step 8 when I click on the file in the explorer pane it should give that file focus. I suspect that is the root of the problem because if, after step 8, I click in the gutter (next to the line numbers) then the problem is resolved.   I should also add that because the editor has no really strong way to indicate focus half of the time I actually end up making a copy of file1.txt instead of copying the text inside it.
20206|Oh damn (... sorry) ~/.vscode/extensions had a wrong user, cause I'm creating that on provisioning of my vagrant-virtualbox.  Sorry for the inconvinience, a proper error-message would be fine though. Thanks for your fast help :+1:
20207|@jmjohnson117 please report against the extension!
20208|@jmjohnson117 please report against the extension!
20209|Okay, with `--enable-use-zoom-for-dsf`, it seems to be a different font rendering issue. It seems to be a character horizontal Anti-aliasing bug, rather than a blurry scaling bug. The font is perceptibly clear on a Surface Pro 3 screen, but it just seems like the higher pixel density makes the anti-aliasing issue less severe.  With `--enable-use-zoom-for-dsf` at 100% scaling, external monitor (150% native): ![100-external](https://cloud.githubusercontent.com/assets/1077648/14923415/05ad51dc-0df2-11e6-957d-2acb7f3c4707.png)  **No** `--enable-use-zoom-for-dsf` at 100% scaling, external monitor (150% native): ![100-external-nodsf](https://cloud.githubusercontent.com/assets/1077648/14923787/125a8966-0df4-11e6-8616-deb2ad09f033.png)  With `--enable-use-zoom-for-dsf` at 150% scaling, Surface Pro 3 screen: ![150-sp3](https://cloud.githubusercontent.com/assets/1077648/14923426/114212a8-0df2-11e6-8de8-722d2c7ee645.png)  **No** `--enable-use-zoom-for-dsf` at 150% scaling, Surface Pro 3 screen: ![150-sp3--nodsf](https://cloud.githubusercontent.com/assets/1077648/14923783/0eea45c8-0df4-11e6-9474-b60be14e0478.png)  All pictures scaled 600% to reveal pixel detail.
20210|By analyzing the blame information on this pull request, we identified @joaomoreno and @bpasero to be potential reviewers
20211|We'd like to do a round of 1:1 interviews to get more feedback on your thoughts about the extension UI and UX. If you can spare 30 minutes of your time, please pick a time slot and I will set up a call with you: https://calendly.com/stevencl/vs-code-extensions/05-03-2016
20212|@alexandrudima No update since last commit, do you think it still need more change or more elegant solution? Just let me know, thanks.
20213|Code blocks are highlighting here. You probabby have some extension makes problem.
20214|I checked; no extensions are installed... I updated VS Code a couple days ago to 1.0 and have experienced this problem since.  Yes, code blocks do display as expected on GitHub but not in VS Code.
20215|I ran VS Code with `code --disable-extensions`. Still repros for me. See screenshots below of steps 2-4 from the repro case.  This also repros when I change the line endings to LF.  I wanted to try to change encoding to ASCII instead of UTF-8 but that wasn't in the list of possible encodings. Is there some other equivalent to ASCII in that list?  ![image](https://cloud.githubusercontent.com/assets/494055/14924921/9ada2490-0df9-11e6-9baa-f1d80e06d824.png) ![image](https://cloud.githubusercontent.com/assets/494055/14924932/a5771854-0df9-11e6-9ba1-fb042ff9e150.png) ![image](https://cloud.githubusercontent.com/assets/494055/14924942/ac411554-0df9-11e6-8f1e-2b1b98e8ca17.png)
20216|It's because they moved C# support out of the main code base and into its own extension. See https://code.visualstudio.com/docs/languages/csharp#_installing-c35-support  The extension is available here: https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp  You can also refer to issues like https://github.com/Microsoft/vscode/issues/5424#issuecomment-211198084 or https://github.com/Microsoft/vscode/issues/5403#issue-148895180
20217|The loading time is better but now sometimes it seems to flash or load multiple times while the cursor is still hovered over it (causing the flashing). ![longstringdebuggingupdate](https://cloud.githubusercontent.com/assets/12900364/14925148/ce1d7d1a-0dfa-11e6-8d5b-542fb837038e.gif)
20218|Thank you; after working through the errors created by my company proxy I was able to install the extension and everything seems to be working again.
20219|@alexandrudima I was able to reproduce when I clicked on files in the explorer without clicking on the editor.  Is there a reason why we're not focusing on the editor the moment a user clicks the file in the Explorer?  Now that we are moving towards a unified workflow with tabs or no tabs, it probably makes sense to move the focus to the editor right away (just as would happen if you click on a tab).  Both Atom and Sublime do this also.  Let me know what you think.
20220|Support for atom packages would also be good
20221|I tried out using the file history as suggested, and after a month I don't feel like I need tabs anymore. In VS having a bunch of tabs open is really annoying. I hate it when there are too many and get moved into the little dropdown of hidden tabs. I think I would actually really like to use file history in VS now too.  Regarding the working files, I find it really annoying that everything is in there. It's annoying to the point that I never open it and keep it closed. The only thing I find it useful for is seeing new files that haven't been saved, or any file that hasn't been saved I guess. It quickly gets too large for me to even care about. Not sure how this could be fixed though. Maybe only show unsaved files, but that would have some weird side effects.  Anyways, I'm a file history believer now. :)
20222|"I think it would be really cool if we could add the ability to go back and forth in the history using `shift+cmd+[` and `shift+cmd+]`.  these are the default shortcuts for navigating around tabs in other applications and being able to use them to navigate the history instead I think would go a long way towards making me a believer at least  Edit: basically achieved this by implementing  ```   { ""key"": ""shift+cmd+["", ""command"": ""workbench.action.openPreviousEditor"" },   { ""key"": ""shift+cmd+]"", ""command"": ""workbench.action.openPreviousEditor"" },   { ""key"": ""shift+cmd+["", ""command"": ""workbench.action.quickOpenNavigateNext"", ""when"": ""inQuickOpen"" },   { ""key"": ""shift+cmd+]"", ""command"": ""workbench.action.quickOpenNavigatePrevious"", ""when"": ""inQuickOpen"" } ```  as custom key bindings"
20223|Being able to tear out a code section into a new window would be useful I think too. Not sure if that thing is even possible though.
20224|By analyzing the blame information on this pull request, we identified @egamma and @bpasero to be potential reviewers
20225|I tend to agree that there will be situations where you don't want snippets to show up first in the suggestion list (e.g. CSS). Still every other editor in recent memory I tried is more productive for me when using snippets because it works as I would expect.  Sublime Text has the concept of a tab trigger that activates if you press tab and the sequence of letters matches exactly. VS Code's prefix is more like a name for the snippet that is used to place it somewhere appropriate in the suggestion list along with all the other names (keywords, symbols, ...). If your prefix is long and unique there is no problem. But if your prefix is short and similar or even identical to other names there is a good chance you have to manually select the snippet from the suggestion list which for me reduces productivity immensely.  Example: In an empty JavaScript file write `if` and press tab. I would expect the `if` snippet to be triggered. Instead most of the time it will auto complete to the `if` keyword because it has a higher priority. Both are exact matches but one does what I would expect (snippet) and the other does effectively nothing (keyword).  This PR basically implements the tab trigger mechanism but has the side effect that the suggestion list priorities are changed as well. Maybe there is a way to implement the tab trigger in addition to the existing suggestion list approach and make it optional?  A special command probably wouldn't work for me because I still want to invoke both snippet insertion and code completion by pressing tab. I would prefer a built in solution for this common problem but would be fine with an extension as well. My understanding of the VS Code extension API is unfortunately very limited so I can't even tell if an extension would be able to do what I want.  I realize there are different opinions on this topic but this is a real pain point for me. Other editors appear to have solved this in a way that makes most users happy.
20226|I need this!
20227|Same. Simply +1000
20228|I think Atom behavior is a reasonable default configuration. `.gitignore`d files and directories are still accessible from the sidebar explorer, but greyed out in the UI and not findable with project-level search.  About parsing, there are libraries like https://www.npmjs.com/package/gitignore-parser but I don’t know if their implementation is completely correct.
20229|@Inori - good catch - I fixed up the MDtools example sorry about that. @SamVerschueren  - you were right on the money - embarrassing I remembered to do that in the general method but not in toUpper and toLower :)
20230|I definitely could use this. While the intellisense helps out an actual GUI would make things so much simpler. So I'm very interested to see this come together.  Also I showed the settings to another dev and he balked at the idea any editor would use JSON to manage settings.
20231|I'm still struggling with time, I've just accepted a new role and the interview process along with life and my day job have been a lot, sorry!  At this stage, I still believe that the hardest barrier to making this work as an extension is validating the settings. I have something mocked up (function over form), and will share when I get time to polish the code a little, but there's no way that I can think of where I can actually list all available settings and know their types in the extension - unless I manually manage these, which would mean updating the extension every time VSCode gets a new/changed setting. Am I missing something obvious here?  @imperez I've had similar experiences.  @bgashler1 I've yet to receive your email with the PSD mock-up. I know you're very busy, so just a reminder ;)
20232|Electron did not seem to provide an api to get the file data in clipBoard.
20233|I'll keep it open, to take care of displaying the error message. 👍
20234|Interesting, I'll take a look!
20235|Don't believe it's possible. Why do you need it? What's the use case?
20236|"Taken from the [W3C HTML specification](https://www.w3.org/TR/html-markup/syntax.html#syntax-attributes) :   > Attribute names must consist of one or more characters other than the space characters, U+0000 NULL, """""", ""'"", "">"", ""/"", ""="", the control characters, and any characters that are not defined by Unicode.  So basically anthing other than `'"">/=` is allowed, even emojis. Probably some regexp needs to be updated somewhere"
20237|well ... Is there any progress...?
20238|https://github.com/Microsoft/vscode/issues/1046
20239|https://github.com/Microsoft/vscode/issues/1046
20240|https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/9492333-drag-and-drop-of-selected-text
20241|By analyzing the blame information on this pull request, we identified @egamma and @bpasero to be potential reviewers
20242|Hi **@rebornix**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Peng Lv (PENLV)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
20243|+1, commenting to get notification. Really miss that.
20244|@Tyriar I can reproduce. I think it does not make much sense to reopen a non-modified untitled file when using the action.
20245|"I just made a PR to fix a similar issue in HTMLHint, maybe this helps, the RegExp for a valid attribute name is  ``` js /[^\s""'>/=\x00-\x0F\x7F\x80-\x9F]/ ```  (see [control characters](https://en.wikipedia.org/wiki/Unicode_control_characters): U+0000—U+001F (C0 controls), U+007F (delete), and U+0080—U+009F (C1 controls))"
20246|@jrieken I see. It's ok :)  Idea about extension sounds great to me. I'll definitely try to implement it. I'm not sure if I can get all snippets for current language inside extension, but I'll find out :).   Moreover a special command wouldn't be convenient way for me, I would prefer to use tab trigger. Because, in my opinion, it should be the same mechanism as in suggestions and should work seamlessly to other editors.
20247|@SamVerschueren, use case is same as use case for color themes. much editors already have feature/plugin for that.  sadly, VSCode has no API to change UI: #1833
20248|Just a quick note about this PR: It only promotes snippets to the top if there is an _exact_ match between what has been typed and the prefix for a certain snippet from what I understand. This is not made clear in the description. Instead it sounds like all snippets are given priority all the time which would indeed bother some people.  So in the end this PR is not as invasive as it may seem. Just something to consider before a final decision is made.
20249|"This may or may not be related but in case it is, I also have issues where the hover of the value of a property during debugging doesn't work. For example, hovering over ""me"" displays the value correctly, but hovering over ""foo"" in ""me.p.foo"" simply shows nothing. This is another thing that Visual Studio gets right."
20250|VSCode version: 1.0.0 OS: OSX El Capitan Node versions tried: 0.10.42, 4.4.3, 5.0.0, 5.9.1, 6.0.0 Express: 4.13.4  There are some weird conditions for this behavior that I've come across. I can recreate in every version of Node when trying to launch or attach my big app that uses Express's router: http://expressjs.com/en/4x/api.html#express.router  I then tried the Express 'Hello World' sample located here: http://expressjs.com/en/starter/hello-world.html and set a breakpoint on 'res.send('Hello World!');'  Everything worked fine when debugging via launch or attach _except_ for when I tried using Node 6.0.0 - then I observed the issue again. It's like it's hitting the breakpoint, but there is no visual indication in VSCode that it has done so, and watches/evaluations/stack don't have access to any of the expected objects.
20251|:+1:
20252|@abdullam Same for me, except i have installed node v6 and about vscode dialog shows node 4.1.1
20253|VS Code hasn't been verified with node v6 (and there seem to be issues). The VS Code about dialog shows the node version that VS Code is based on (it is the version that electron uses). This version is used when running extensions. I suggest to stick with node v5 until VS Code officially supports node v6.
20254|@rhurkes i have same issue with vscode (1.0) and node v6.
20255|@rhurkes So i unstalled node v6 and installed node-v5.11.0 and it works again. So issue is related to vscode 1.0 and node v6.
20256|@weinand So i unstalled node v6 and installed node-v5.11.0 and it works again. So issue is related to vscode 1.0 and node v6. #5422
20257|@mrmckeb can't you infer the types from the values?
20258|@JoshClose it's totally possible but they lack the infrastructure for inter-process communication for the editor itself so for two instances to communicate and do anything they need to have a protocol for this first.
20259|> ... tabs contain a close button to the left of the name  Is there a specific reason for breaking convention? When reading LTR, the most important piece of information is the file name, not a close button. Moving it to the right would also make it easier to make the close buttons hidden by default (and displayed on hover). At a later stage, users may also want to have file icons to the left of the file name.  > We discussed actions for promoting a preview tab to a full open tab ...  I think the first two options would probably be sufficient. Double-clicking a tab may be useful for other things in future.  > We have a few ideas for how to show the path to a file to be able to disambiguate in these cases.  What about simply showing a tooltip (with the relative path) when hovering over a tab? This would make the design less cluttered, and the tabs would not have to be as tall.  > We show a chevron whenever there is an overflow ...  Firefox handles tab overflow well – it has max tab width, left/right scroll buttons, drop-menu listing all tabs (with the currently-visible tabs marked), etc.
20260|[Duplicate issue](https://github.com/Microsoft/vscode/issues/4109)
20261|Reproduced for me in debug mode But this example works when launching without debugging (ctrl + F5\ cmd + F5)
20262|@jrieken fyi I've changed the sample so that it uses the default one that we generate from the light bulb.
20263|@bpasero I'm still seeing the occasional crash in the morning with the latest insiders build
20264|@egamma, thank you. I looked at the PR - there's a lot of commits there and I am not entirely familiar with with VSCode code-base just yet. - Is there a minimal example available that I could look showing the editor being used inside a browser? - Out of interest, is VSCode taking the approach Eclipse took in allowing one to build ship a custom IDE with only a chosen set of features enabled?  All the best! Love the VSCode.
20265|@eyalsk I'm not sure how that would work - I may be missing something, so if that's the case, let me know.  The way I see it, if a value is a `number`, it also need a range - max and min. If a value is a string, it's most likely going to be an option from a list of possibilities. What we'd end up with is the exact same thing presented a little differently, rather than a GUI experience that makes use of `select`, `input[type=range]`, `input[type=number]`, etc.  Without access to some form of validator/schema, this would need to be manually maintained and then updated each time something changes.  This is the only hurdle I have right now, once solved I can publish something _hacky_, and then after a little feedback/revising, it'll be publishable.
20266|"Something like this seems to work already:  **extHostApiComands**  ``` typescript this._register('vscode.diff', (left: URI, right: URI, label: string) => {     return this._commands.executeCommand('_workbench.diff', left, right, label); }, {     description: 'Opens the provided resources in the diff editor to compare their contents.',     args: [         { name: 'left', description: 'Uri of the resource for the left hand side of the diff editor', constraint: value => value instanceof URI },         { name: 'right', description: 'Uri of the resource for the right hand side of the diff editor', constraint: value => value instanceof URI },         { name: 'label', description: 'Label to use for the diff editor', constraint: value => typeof value === 'string' }     ] }); ```  **electron-browser/actions**  ``` typescript KeybindingsRegistry.registerCommandDesc({     id: '_workbench.diff',     weight: KeybindingsRegistry.WEIGHT.workbenchContrib(0),     handler(accessor: ServicesAccessor, args: [URI, URI, string]) {         const instantiationService = accessor.get(IInstantiationService);         const editorService = accessor.get(IWorkbenchEditorService);          const left = instantiationService.createInstance(ResourceEditorInput, nls.localize('left', ""Left""), null, args[0]);         const right = instantiationService.createInstance(ResourceEditorInput, nls.localize('right', ""Right""), null, args[1]);         const diff = new DiffEditorInput(args[2], null, left, right);          return editorService.openEditor(diff);     },     context: undefined,     primary: undefined }); ```"
20267|@jrieken I opened a PR (https://github.com/Microsoft/vscode/issues/6031) for a `LinkedMap` that allows to `set` and `get` values with the possibility to set a maximum number of elements to keep. Once that limit is hit, the oldest element will be dropped.  I also provide a `LRUCache` that - once you access an entry from the map via `get` - puts the entry to the top of the linked list. This ensures that elements which are LRU are dropped from the map first when the bounding condition is hit.  I am not sure if I would use `LRUCache` for the caches discussed in this bug report though. I think the `LinkedMap` is already fine.  Also wrote tests in `map.test.ts`.
20268|@f111fei thanks for this PR. Please understand that a change like this with UI impact needs to be discussed first with the team and might not be accepted if we feel that such an extension menu is desired or not.  Let's discuss in https://github.com/Microsoft/vscode/issues/6033
20269|my 2 cents: I find this menu a workaround for not being able to allow extensions to fill in commands anywhere in the top level menu. I would rather want to provide explicit API so that extension writers can hook into existing menus. It is up for debate if we would want to allow for creating new top level menus or not.
20270|@jsloyer we do use the Electron auto updater framework (Squirrel for Mac).
20271|#1000
20272|Yeah, somewhere I filed this already some time ago, please dig it up.
20273|Looks like the extension host crashes right on startup and thus no colouring applies.  @alexandrudima @jrieken fyi
20274|Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions`
20275|Maybe an extension like editorconfig?
20276|@weinand @isidorn fyi
20277|@weinand @isidorn fyi
20278|Maybe an extension that causes this?  Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions`
20279|@rockymontana does this happen on all workspaces you open or maybe only on a very large one?
20280|you mean the top level file menu?
20281|@weinand @isidorn fyi, node 6 was just released last week with V8 50.
20282|@dinesh-dev you mean scrolling in the editor or somewhere else?
20283|Double check that `.vscode*` and `.config/Code*` really do have the right permissions. As proof, simply rename those to some other names and relaunch Code, which should recreate them.
20284|I tried to download VSCode insider build and run it without any [3rd party] extensions and could still reproduce the bug.
20285|@bpasero within the editor. Works well with mouse scrolling but not with touch-pad.
20286|@weinand mentioned that we have not yet tested node v6 and that he is planning to take a look once he is back from vacation. I think Andre is back from vacation this week so forwarding to him.
20287|This looks like an issue with the vscode pyhton extension  @sastrytumuluri can you please file the issue against https://github.com/DonJayamanne/pythonVSCode
20288|This looks like an issue with the vscode pyhton extension. @sastrytumuluri can you please file the issue against https://github.com/DonJayamanne/pythonVSCode  I will make sure on the vscode side to always show the debug console if there are errors.
20289|OK, thank you.
20290|@sastrytumuluri did you upgrade VS Code and python stopped working after the upgrade?
20291|This issue was moved to OmniSharp/omnisharp-vscode#268
20292|This issue was moved to OmniSharp/omnisharp-vscode#269
20293|duplicate of #365
20294|yeah - we don't show the salsa version anymore when things are set to default. the double enter issue is still tracked in #3797
20295|Ping @chrisdias to decide if we should mention this in release notes Also forwaring this issue to @weinand
20296|By analyzing the blame information on this pull request, we identified @jrieken and @alexandrudima to be potential reviewers
20297|Hi **@Ikuyadeu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
20298|@dinesh-dev when you say it looses focus, where does it go?
20299|Unable to repro this behavior. The Python code has changed since then, and I can't see this behavior.
20300|Strange. Can you dedicate some time to just experiment with [Electron](https://github.com/electron/electron/releases/download/v0.37.6/electron-v0.37.6-win32-ia32.zip) itself? Just open & close it, etc, see if it reproduces.
