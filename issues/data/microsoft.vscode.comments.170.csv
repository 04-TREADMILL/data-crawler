16901|Is there a way to view the full exception message coming?  I can't get from the truncated version in my screenshot to the full detail - copying the value also copies the snipped version.
16902|@indiejames  Tabs are not about productivity for me.  Its about cognition.  I've personally never found that raw typing speed has ever been the limiting factor in my productivity.  Programming requires thought and consideration - a few clicks are not a problem in the grand scheme of things for me considering how much time we spend _thinking_.
16903|+1  I'm less concerned about the watch windows than I am the value updating in the debug console, which DOES occur in chrome. We frequently use this to quickly set flags while in development, and this is currently not possible.
16904|"I also noticed related issue.  In the following simple code (file named ""test.js""):     var l = 5;      for( var i=0; i<l; i++ ) {          var in_loop; /\* coloring stops working */      }  After the opening brace '{' in the for loop line, any var declared inside is not colored correctly.  If the color theme being used is ""Dark+ (default dark)"" most of the color inside the loop is 'green'"
16905|@indiejames I use ctrl+(shift+)tab to navigate between tabs plenty, not necessarily mouse.  One of my biggest gripes with working files is the same as @matt1's - the fact that ctrl+tab operates in most-recently-used order.  I don't necessarily remember what file I looked at last and second-to-last, but it's very easy for me to see/remember what order I opened them / arranged them in.  Sublime Text also defaults ctrl+(shift+)tab to MRU order; I always change it, since it has commands for both MRU and visible order.  I remember back in the day some Web browser (was it pre-blink Opera maybe?) used MRU for ctrl+tab by default too, presumably figuring that since OSes do it for apps, a browser might as well do it too; I found it to be dreadfully unintuitive though, and had to pay extra attention to find what I actually wanted to switch back to...which, guess what, makes the process _slower_.  The argument of using quick open exclusively also works just as well in Sublime Text with tabs as it does in VS Code with working files.  Tabs do not prohibit that workflow at all.
16906|I use exactly that, but when I try to commit from VS Code with that config attribute set, I get the following error output in the Git console of Code:  ``` git fetch git show HEAD:src/relation.js git show HEAD:src/relation.js git add -A -- . git commit --quiet --allow-empty-message --file - --all gpg: WARNING: unsafe permissions on homedir `C:\Users\user\AppData\Roaming\gnupg' gpg: cannot open tty `no tty': No such file or directory error: gpg failed to sign the data fatal: failed to write commit object git config --get-all user.name git config --get-all user.email git show HEAD:src/relation.js ```
16907|This issue is that Electron requires .NET 4.5 since it uses System.Threading.Tasks.Task.Delay(Int32) which came with .NET 4.5.  https://msdn.microsoft.com/en-us/library/hh194873(v=vs.110).aspx Windows 7 on the VMs only has .NET 4. Here's the exception stack from the debug console: [FileWatcher] process error: System.MissingMethodException: Method not found: 'System.Threading.Tasks.Task System.Threading.Tasks.Task.Delay(Int32)'.    at FileWatcher.EventProcessor.ProcessEvent(FileEvent fileEvent)    at VSCode.FileSystem.Program.<>c__DisplayClass8.<Main>b__2()    at System.Threading.ThreadHelper.ThreadStart_Context(Object state)    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)    at System.Threading.ThreadHelper.ThreadStart()
16908|For those who prefer the current **Working Files** approach in VS Code, how many of you actually prefer to click on files within the list of Working Files as opposed to the following workflows? - using <kbd>Ctrl</kbd> + <kbd>E</kbd>  **/**  <kbd>⌘</kbd> + <kbd>E</kbd>  to quick open recent files. - using <kbd>Ctrl</kbd> + <kbd>Tab</kbd> to switch recent files
16909|Do we want to detect that .NET 4.5 is missing and alert the user? I will add this requirement to the docs in setup.md. I think this explains some of the verbatim we see where various walkthroughs like the CSS topic don't work at all for users.
16910|I'd like to have the same for the [vshaxe](https://github.com/vshaxe/vshaxe) extension.
16911|By the way, for those who prefer **tabs**, your feedback has been very helpful as we investigate adding them to the product.  Thanks so much for continuing to share!
16912|@bpasero I don't think this is about environmental variables (which present a lot more challenges than VSCode built-in paths constants?)
16913|I think we should alert the user when VS Code sees a MissingMethodException.  Windows 7 still has the highest market share of the Windows OSs and the experience when we eat this exception is poor since the File Watcher isn't working.
16914|fyi @dbaeumer
16915|Duplicate of #5083. The issue goes away when .NET 4.5 is installed and the File Watcher is working again.
16916|:+1: My concern was with any negative perf impact (writing to the clipboard on every selection change), but if you've used it and all looks good then let's turn it on by default
16917|@bgashler1  I prefer the keyboard shortcuts. Not so I can be the fastest typist, but because I find them less distracting then moving the mouse/trackpad.
16918|"@bpasero It just needs to be consistent. However, if there's a separate ""_restart [program]_"" command, then that should probably be listed in the Command Palette, as suggested by the original report."
16919|@bpasero Nice catch! I've tested the arrow down with my perf testing, but I did it in a large TypeScript file. Since TypeScript has rich find occurrences, the selection highlight does not kick in (as it does for markdown).
16920|I misread the issue, I thought you were talking about the vscode repo starting to sign commits, not adding the feature.  @joaomoreno while looking into signing commits yesterday, this I came across this http://stackoverflow.com/a/10166916/1156119  > Signing each commit is totally stupid. It just means that you automate it, and you make the signature worth less. It also doesn't add any real value, since the way the git DAG-chain of SHA1's work, you only ever need one signature to make all the commits reachable from that one be effectively covered by that one. So signing each commit is simply missing the point.
16921|Doing it 2000 times (at each animation frame):  Before: ![image](https://cloud.githubusercontent.com/assets/5047891/14390495/ac7daab6-fdb7-11e5-8220-5d8093daeac0.png)  After: ![image](https://cloud.githubusercontent.com/assets/5047891/14390504/bc859cfc-fdb7-11e5-9e0f-d7f9d46fecfe.png)  [AFTER.cpuprofile.txt](https://github.com/Microsoft/vscode/files/210514/AFTER.cpuprofile.txt) [BEFORE.cpuprofile.txt](https://github.com/Microsoft/vscode/files/210513/BEFORE.cpuprofile.txt)
16922|This issue was moved to Microsoft/vscppsamples#1
16923|This issue was moved to Microsoft/vscppsamples#2
16924|This issue was moved to Microsoft/vscppsamples#3
16925|"I think what many of the ""Working Files and No Tabs EVER"" crowd are missing is they _way_ in which many of us use tabs. For example, when I work on an MVC application (web, mobile or desktop) I tend to have tabs in one or more vertical panes (which VSCode is also in need of) in a specific order: Model file, View File, Controller file. So a setup I have frequently open looks like this:  Left Pane  ## Model 1 File (tab) | View 1 File (tab) | Controller 1 File (tab)  Right Pane  ## Model 2 File (tab) | View 2 File (tab) | Controller 2 File (tab)  This setup allows me to quickly select the Model files for both components I am working on for comparison or View Files when I have my UI/UX hat on. This absolutely CANNOT be accomplished efficiently with working files, especially if you have other files open as well (i.e. CSS, db scripts, etc). I do a ton of UI/UX and this is by far a common practice. Were I strictly a Java backend developer or a DBA, then no, this would not be a requirement. But for the vast majority of us full stack web & mobile developers, not having tabs (and tabbed vertical / horizontal panes) is an extreme hinderance. While I am making due with VSCode in the short term, I am having serious reservations sticking with it because of this missing capability. No one can convince us that tabs are useless and a working files list is not an innovation (Adobe Brackets also has a working files list and it has been around since 2012).  Again, this is not an all or nothing problem. We are simply asking for the same capability that exists in other editors as an option even if that capability is turned off by default. If VSCode were to implement tabs / window panes exactly as Atom does, it would solve 99.99% of our tab-related griping. I know it is not a trivial task to implement, however I think many of us would be satisfied waiting a bit longer (months, not years) for this feature to be done correctly rather than it remaining in the backlog.  Just my 2¢..."
16926|"While I've communicated most of this to @bgashler1 already, I'll do a little write up here explaining the ideal behavior for me. 1. Keybindings should close working files, removing them from the working files list and the MRU (most recently used) stack. I have the follow keybindings to accomplish this:        ``` json    { ""key"": ""ctrl+shift+w"",    ""command"": ""workbench.files.action.closeAllFiles"" },    { ""key"": ""ctrl+w"",          ""command"": ""workbench.files.action.closeFile"" },    ``` 2. Files in the editor should be ""stacked"", so that when you close one file, the last file in the MRU stack is shown. 3. <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> should restore the most recently closed tab. This keybinding conflicts with `workbench.action.tasks.test` in vscode but it's a very standard hotkey in tabbed environments. I created a feature request for the command here https://github.com/Microsoft/vscode/issues/3989 4. <kbd>ctrl</kbd>+<kbd>tab</kbd> and <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>tab</kbd> should only rotate through files in the ""working files"" list, not files that were ""previewed"" (single click in explorer and then navigate away). 5. I want my working files laid out along the top of the editor. The reasons for this are:    - I want to be able to see my working files visually, regardless of which sidebar I have opened. Related: https://github.com/Microsoft/vscode/issues/3360    - Over the nearly 2 decades I've been programming I've been looking above the editor for my working files. It's a hard habit to break."
16927|Note: .NET 4.5 is only an optional update for Windows 7
16928|This effects all extensions spawning an external process, not just shell extensions.  vscode-cli unsets this variable on startup (see https://github.com/Microsoft/vscode/blob/ad7e861dbb9127e919bc686da162b19cbb7e2391/src/vs/workbench/electron-main/cli.ts#L59). Can this be also done for extension (forked) processes?
16929|@bpasero    > By the way, for those who prefer tabs, your feedback has been very helpful as we investigate adding them to the product. Thanks so much for continuing to share!  I use <kbd>Ctrl</kbd> + <kbd>Tab</kbd> quite a lot in VSCode but I think that the experience in Visual Studio is so much better because besides files I can also I can navigate to other parts of the UI, I use it to navigate to the Package Console Manager, Solution Explorer etc...  @Tyriar Great points!
16930|@remcoros @joaomoreno that's what I was thinking; clone the env and remove the var for extension processes.
16931|Agree, should give the extensions a _clean_ env to work with.
16932|Nice!
16933|As designed. We only add if you edit the file.
16934|This is loosely related to https://github.com/Microsoft/vscode/issues/4779, vscode sources its env by running `env` which doesn't include scoped variables.
16935|Any update on this? I would be interested to have this feature for [vscode-perforce](https://github.com/stef-levesque/vscode-perforce)
16936|"``` {   ""compilerOptions"": {     ""target"": ""es3"",     ""sourceMap"": true   },   ""files"": [     ""../../typings/browser.d.ts"",     ""./our_typings.d.ts"",     ""./../../../one_more_proj/its_typings.d.ts"",     ...   ] } ```  Here is part of tsconfig from project. Problem is not in excluding some unnecessary files, but to include all needed one. They located in different directories and the only way to work with them is to put in `files`  attribute.  Anyway this scheme **works**, autocomplete shows hints, linter finds problems and so on. All typing are loaded and available. But it works **only for first opened file** (and after relaunch if this file will not be the first to open - it will not have autocomplete and errot checking). Any files that will be opened after first one will not have all those autocompletions and linter options.  So it really looks like some sort of issue that should be fixed, but not like undocumented feature :)"
16937|"The environment variable approach could work but wouldn't be ideal.  I see that our extension's language host exe inherits the following env vars from VSCode:  ![vscode_envvars](https://cloud.githubusercontent.com/assets/5177512/14392535/0af0dea8-fd7f-11e5-9365-486041d543a5.PNG)  Now, if VSCode also defined VSCODE_WORKSPACEROOT and VSCODE_EXTENSIONROOT we could make this work. However we would have a user education/usability issue.  In some cases (ie launch.json) we tell users to use `${workspaceRoot}` to specify a path to a file in their workspace.  But in settings.json we tell them that to specify a path to a ""settings"" file in their workspace they have to use `%VSCODE_WORKSPACEROOT%`.  Seems a bit inconsistent."
16938|@egamma @chrisdias @waderyan I did a very rough migration on my fork, let me know how you feel about it https://github.com/Tyriar/vscode/tree/wiki/wiki  Some things to point out: - The horizontal width of the container is larger, making for better image viewing https://github.com/Tyriar/vscode/blob/wiki/wiki/contributing/how-to-contribute.md#using-the-chrome-developers-tools - Just going to [./wiki](https://github.com/Tyriar/vscode/tree/wiki/wiki) will show the welcome page as it's the README.md - No more dependency on imgur https://github.com/Tyriar/vscode/tree/wiki/wiki/contributing/images
16939|This looks like an exception in the language service for the extension. I'll get someone to look at it.
16940|"I am having trouble with the GitHub issue mover @egamma, can you help? I keep getting an exception: Cannot call ""ez"" on null."
16941|From [what I've read](https://github.com/Microsoft/vscode/issues/4806#issuecomment-204279786), the [js-beautify](https://github.com/beautify-web/js-beautify) project is what's used for HTML formatting in VSCode. I submitted [a suggestion](https://github.com/beautify-web/js-beautify/issues/916) to them to implement this feature (feel free to up-vote it). If/when they do, VSCode will need to implement the configuration to support the feature.
16942|"This is caused by some performance protection code the editor has. If a file is ""dominated by long lines"", then word wrapping is always chosen. You can use the `editor.wrappingColumn` setting and use a large number to force no wrapping."
16943|Never mind, pilot error on my part.
16944|"@isidorn Looking back over the comments, this isn't really about what thread is ""currently stopped"". This is about which thread is ""currently being debugged."" For example, you just hit a breakpoint on a particular thread, and are looking at the breakpoint, then the callstack should show you what thread the breakpoint was hit on. Or, you double-click on another callstack to go to source code, the callstack should show you the thread that you last double-clicked on. Does that make sense?"
16945|@bpasero PTAL, this implements the behavior of <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> in other editors. Tell me if there's any issues with adding this in, if not the remaining work to do is adding some tests, open the correct file when restoring multiple files and make sure it feels right (the MRU list will probably get messed up when restoring).
16946|Does it persist when you add spacing like this in the loop?  `for(var i = 0; i < I; i++)`  If that resolves the issue, it is probably https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
16947|For what it worth I'll add some more screen shots  Having HostListener inside a class ![image](https://cloud.githubusercontent.com/assets/13039652/14398594/b85774b2-fdbb-11e5-8df3-426ed42615a4.png)  Having HostListener ouside the class ![image](https://cloud.githubusercontent.com/assets/13039652/14398603/c9544dc6-fdbb-11e5-91d6-21a596aa6335.png) _Ignore the red line_  Removing the `:` inside the class ![image](https://cloud.githubusercontent.com/assets/13039652/14398618/e84a0a18-fdbb-11e5-9fa4-00503d14899a.png) _No good nor bad coloring_  So I think maybe this is because of having `:` inside of `{ }` ?
16948|I reported a similar issue over here https://github.com/Microsoft/vscode/issues/4841 and I think the problem is the `:` and other few things that I found. I've updated my original issue with some screenshots that may be useful.
16949|I think it should be 1000. ![image](https://cloud.githubusercontent.com/assets/17735796/14398575/13b97462-fd9a-11e5-9a9c-8adea3feb600.png)
16950|This [extension ](https://marketplace.visualstudio.com/items?itemName=spywhere.guides)solves the problem
16951|I think this issue can be closed, since #4825 has been merged.
16952|Maybe this was made clear somewhere I just failed to find in my searching, but how do I build the OS X app/distribution from source? All I can figure out how to do from the docs is launch a generic Electron instance using `scripts/code.sh`.  Semi related, I see a lot of references to an alpha version of the app. Is that public? Where can I find more details about it?  cc @lukehoban
16953|Just found https://github.com/Microsoft/vscode/issues/3793
16954|Hi **@ironcladlou**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
16955|As suggested by @egamma in https://github.com/Microsoft/vscode-go/pull/134#issuecomment-204129904  cc @lukehoban
16956|@bpasero My bad you are totally correct setting that setting to false fixed my issue. I tested out Insider Yesterday overnight and it also crashed.
16957|Hi **@eklavyamirani**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
16958|**@eklavyamirani**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
16959|@joaomoreno Please review :)  Couldn't find any unit tests for this, did I miss it?
16960|This issue was moved to Microsoft/vscode-filewatcher-windows#9
16961|Any progress on this feature ?
16962|"tried chezier's suggestion which seems reasonable, but i still get this..  freds-MacBook-Pro:MacOS userbob$ code /   File ""<string>"", line 1     import os,sys; print os.path.realpath(sys.argv[1])                           ^ SyntaxError: invalid syntax /usr/local/bin/code: line 10: ./MacOS/Electron: No such file or directory freds-MacBook-Pro:MacOS userbob$ code .   File ""<string>"", line 1     import os,sys; print os.path.realpath(sys.argv[1])                           ^ SyntaxError: invalid syntax /usr/local/bin/code: line 10: ./MacOS/Electron: No such file or directory"
16963|I managed to get the editor working using something similar to darrinm's solution but I still haven't figured out how to add extra libraries to the auto completion system. The azure-based playgrounds out there seem to have a way to include code libraries but the API seems different for the version in VS Code and I haven't been able to figure it out yet :(
16964|I agree that better support would be awesome!  For now there are html and typescript snippets for angular2 that i wrote in the marketplace. https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2  Also, there is a request in user voice for auto imports. this would rock https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/13344849-auto-imports-in-typescript
16965|Hi, it looks like a race condition, because if I type slow it filters suggest items correctly but when I type fast suggest is filtered based off the last letter typed:  ![out](https://cloud.githubusercontent.com/assets/200119/14403708/825c01de-fe6a-11e5-95e8-974a9cd9bd2b.gif)
16966|Well... apparently I'm not the only one who encountered this issue: ![capture](https://cloud.githubusercontent.com/assets/12144265/14403943/653ac048-fead-11e5-8cf7-1de7dddcaed4.PNG) I think I do want to like VS Code but seriously guys... since you announced it, I've been paying attention to it and trying to use it. I do want to love it as it has much faster loading speed than Atom, considering they are both based on Electron.  However, sadly, you guys just keep disappointing me. I just installed the latest insider version and the screenshot is what I got. So what's the problem? They're valid JS syntax... rest parameters? arrow functions? This is year 2016 and VS Code still says they're invalid...?!  It's a bit funny that MS always sucks at these front-end development things, always left behind by open source community... Now you guys open sourced but you can't even do this thing right... Such a disappointment... I mean why would I use VS Code instead of Sublime which never gives me these sort of problems... If you want your VS Code to shine, then make it functional first please.  Don't bother giving me jsconfig.json suggestion. I tried, it doesn't work AT ALL. And don't ask me to use TypeScript.  Oh, and see how it looks in Sublime and hopefully you can realize how bad you're at the moment. ![capture](https://cloud.githubusercontent.com/assets/12144265/14404038/98f16696-feb0-11e5-827a-b17f00a937b9.PNG)
16967|@Tyriar good start, I like that this is scoped to working files only. However, note that this would not restore any file you open that is not in working files. A user might expect that he can click on a file, close the file and invoke this action to reopen it. You are not covering this case currently.  Interestingly ST does not seem to restore the preview tab if you press Cmd+Shift+T so we might be OK here.
16968|[Philosophy Warning!]  Why is `ctrl+tab` so much more useful than the 'working files' concept, as it stands? This is the crux question. Personally, I think there are two issues at play.  Firstly, `ctrl+tab` is a keyboard shortcut and keyboard shortcuts are subconsciously associated with the caret - the user expects that `ctrl+tab` will change the file in the current editor, where the caret currently is placed, and that's precisely what it does. This is unlike 'working files' or the navigator which aren't associated with a particular editor - they're horizontally distanced from all but one editor and associated with the _most recent_ editor - and are typically used with the mouse. Even if you use them with the keyboard, you've departed from your caret by the time you select a file.  Secondly, `ctrl+tab` shows you _all_ the files you've seen, recently, in reverse chronological order. 'Working files' shows you only the ones you either double-clicked or made changes to and in the order that you bothered to open them. The criteria and ordering are arbitrary and have nothing to do with the way programmers think - jumping back and forth between caller and function, class and consumer.  (Opinions. Mileage may vary.)  EDIT: My point is this: understanding why one feature works and one doesn't will help to either fix the feature or design a better one. As it stands, working files don't.
16969|@mquandalle actually much easier to review your change without merging master back in. just let it be :)
16970|@Tyriar: Personally, I really hate the fact that single-clicked files don't show in Working Files. I want ALL the files I've seen in my recently-used stack - even read only, external ones. I opened them for a reason. If I'm done with them, they'll sink out of the list soon enough. At best, there should be an option to make single-click and double-click behave the same.
16971|Hi **@vedanshujain**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
16972|This issue is currently assigned to the backlog. Every sprint we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning
16973|**@vedanshujain**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
16974|This fixes https://github.com/Microsoft/vscode/issues/499
16975|@mquandalle getting there, works very nice now. Some more feedback: - [ ] You can manage to move `getOptimalWidth()` into `IViewlet` by casting to `IViewlet` in the `sidebarPart.ts#getActiveViewlet()` method: `return <IViewlet>this.getActiveComposite();`   This should fix all the compile errors and you can do the move out of `IComposite` into `IViewlet` and related implementations. The default implementation (returning null) can then go into the abstract `Viewlet` class. - [ ] Be careful in `explorerViewlet#getOptimalWidth()`. you expect the explorer view to be there, but if you don't have a folder open, explorer view is of kind `EmptyView` and does not have any optimal width. - [ ] the implementation of `getOptimalWidth()` seems very duplicate between `explorerView` and `workingFilesView`. I suggest to create a new method in `DOM` where you pass in the class name of the container you want to measure.
16976|VSCode Version: 0.10.12-alpha OS Version: OSX 10.11.3
16977|Thank you for the feedback, I should be able to amend the PR soon. Do you have any comment on https://github.com/Microsoft/vscode/pull/4702#issuecomment-205530593?
16978|But I can't reproduce it on versin 0.10.14-insider
16979|"I figured out how to get most of what I was missing from sublime in the context of this issue:  ``` [   { ""key"": ""cmd+w"", ""command"": ""workbench.files.action.closeFile"" },   { ""key"": ""cmd+shift+]"", ""command"": ""workbench.files.action.openNextWorkingFile"" },   { ""key"": ""cmd+shift+["", ""command"": ""workbench.files.action.openPreviousWorkingFile"" } ] ```"
16980|@bpasero thanks for the comments! I'll follow it up next week.
16981|@stephenmartindale I'm not sure if anyone has done a feature request to disable 'preview files' yet.
16982|This seems very specific to one area of theming. In my opinion, you should be able to theme (apply CSS to) any part of the application. This is very easy to do when you're using something like Electron.  Related: https://github.com/Microsoft/vscode/issues/459
16983|"@stephenmartindale we are looking into a way to pin ""preview files"" to remain open—including read-only files.  We'd like to keep ""preview files,"" because many times people don't know what file they're looking for until they've opened several (which can result in an undesirable number of open files that are irrelevant)."
16984|"I really love Sublime's flow here. Single click you jump to the file, double click it stays open. On Sat, Apr 9, 2016 at 11:49 AM Brad Gashler notifications@github.com wrote:  > @stephenmartindale https://github.com/stephenmartindale we are looking > into a way to pin ""preview files"" to remain open. >  > We'd like to keep ""preview files,"" because many times people don't know > what file they're looking for until they've opened several (which can > result in an undesirable amount of open file clutter). >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-207830702"
16985|+1
16986|Hi **@d4rkr00t**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
16987|**@d4rkr00t**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
16988|+1
16989|@Tyriar, @bgashler1, @stevencl I think that it's better to have two new posts for tabs and working files to gather feedback.  Just my opinion but I feel like it would be much better than discussing both features here, this one is long enough. :)
16990|Would love to see an integrated prompt as an extension, would save ALT+TAB :)
16991|@bpasero I've been using a master build of VSCode to test this feature and it's working great. Thanks again.
16992|Good news. With today's build of alpha 2016-04-09 I am no longer getting the `error cancelled` popup.  This might have been fixed yesterday as I didn't check yesterday but I know I checked on Thursday and it was still generating the error popup.
16993|"This is happening to me as well.  Here's the tsconfig file:  ``` {     ""compilerOptions"": {         ""jsx"": ""react"",         ""target"": ""es5"",         ""module"": ""commonjs"",         ""experimentalDecorators"": true     },     ""files"": [         ""./typings/main.d.ts""     ] } ```  However, if I place the following line at the top of the file:  ``` /// <reference path=""../typings/main.d.ts"" /> ```  The modules are resolved correctly."
16994|has this fix landed in `0.10.11`? I'm still seeing exactly the same issue.
16995|VSCode new vim support is very powerful. I get to make the most of function I want. Very thank @alexandrudima .  I make repeat command(.) for [my vim plugin (74th/vscode-vim)](https://github.com/74th/vscode-vim). Complex command, repeat command and visual mode are available. I'm looking forward to next vscode release.
16996|@ironcladlou very cool!
16997|On second look, while I did get Atom to crash it seems that it handles this better than vscode currently. I'll look into it more after Electron is updated.
16998|@mquandalle sure:  1. I wonder if double click on the hidden sidebar should actually be a no-op? otherwise I am also fine to leave it as is, though I wonder if this is a use case in common scenarios. 2. that is true and due to the fact that the tree is fully virtual and the DOM only contains what you see. I think that this is OK as is.
16999|"@kripod Not just vscode is affected: [Bazaar Launchpad bug #847388](https://bugs.launchpad.net/bzr/+bug/847388)  _If you're using an agent:_ As a workaround (a configuration change affecting not just vscode) it's possible to add `no-tty` to your gpg.conf. For example, run  ``` bash echo 'no-tty' >> ~/.gnupg/gpg.conf ```  Snippet from [gnupg docs](https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html#GPG-Configuration-Options) explaining `--no-tty`:  > --no-tty > Make sure that the TTY (terminal) is never used for any output. This option is needed in some cases because GnuPG sometimes prints warnings to the TTY even if --batch is used.   From what I've noticed, `gpg` is now less verbose (doesn't remind me that I ""need my passphrase"" on `git commit`; is completely silent on `gpg -s`). I don't know what else this affects and thus I feel bad for suggesting this, but _it works_.  _If you're_ **not** _using an agent:_ Again referring to Launchpad, [this time the bzr (Bazaar) package,](https://bugs.launchpad.net/ubuntu/+source/bzr/+bug/1014570) you seem to be out of luck."
17000|:+1:
