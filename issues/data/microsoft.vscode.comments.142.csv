14101|Now **that** is interesting.
14102|Was this incorrectly associated/closed? That commit looks more like it addresses https://github.com/Microsoft/vscode/issues/4334 than this issue?
14103|I think the paged text area strategy is a good work around for this issue
14104|Thanks @alexandrudima! =)
14105|From our side, we set the cursor in the textarea at the right location. I think it is a Chromium bug
14106|"@bpasero I think the problem is in `electron-browser\index.html` that hard-codes `<html lang=""en"">`. Not sure if this is something for March?"
14107|Comparing two snapshots is equivalent to running a Heap Timeline and not touching the time interval. What you get out of it is **all** objects that can still be reached in memory. This includes every object that was reachable in the instant that the timeline started as well as every object allocated during the time span between the two snapshots. Given this, you will see many things in there which are irrelevant to the test in question.  I think we can all agree that a proper leak test is a repetition of a task, while minimising external influences. Additionally, the test should end in the same state as it begins (start with a full explorer, refresh it `n` times, end with a full explorer with the same number of files and folders as initially).  Thus, in my opinion, the test initially indicated in the first post of this issue is going to draw some inconclusive results. Here's why: - The first snapshot should've been taken not before the first call to `ember serve`, but after. This ensures that once we repeat the `ember serve` calls and we take a final snapshot, we are in the same state as the initial snapshot. Otherwise, many allocations will appear in the diff, from that initial `ember serve`. These are possible leaks but not certain. - The last snapshot should always be taken with a grain of salt. In this case especially, since the state in which we take the snapshot keeps a hold of the explorer items and renders them in the screen. Running a diff of the two snapshots will obviously show them as allocations that were never released; they will likely be released only in another eventual repetition. These are possible leaks but not certain.  One way I've found to detect **certain** leaks is to narrow the test time window disregarding the final repetition. And this can only be obtained when running a **Heap Timeline**. Here are the initial tests steps, revised by me: - find the tmp folder in the explorer and expand it (there is only 1 items) - **A**: run `ember serve`, wait for it start, notice the tmp folder being populated, and stop the server. - start the Heap Timeline - repeat **A** 10 times - stop the Heap Timeline  After this, narrow the time window of the Heap Timeline to disregard the last repetition. Logic states that _if (and only if) there is a leak directly related to task *_A*_, it will appear as allocated objects throughout those 9 repetitions_.  If objects do appear in that time window, it is a definite leak. Otherwise, there is no leak. There is no possibility in this test, there is only certainty.
14108|On code deopt:  Holding references to code deoptimization is not a leak. It is a problem, sure, just not a leak. It just means that we need more memory to keep that function alive, when we could use less. We should definitely fix it.
14109|@jrieken I still see this issue on master
14110|> @tinganho These pairs are defined per-language. Would you expect these pairs to be the same for all languages we support?  Are there any examples of why it shouldn't behave the same?   > e.g. in JavaScript all except <> work as you expect, given JavaScript defines character pairs for the first 4.  I tried in JS and TS and it doesn't work.
14111|@lukehoban I pushed a change that I allow now touching edits. In case of ambiguity, the order of the edits prescribes the order in which they are applied (e.g. insert 'a' at pos1, insert 'b' at pos1 => insert 'ab' at pos1)
14112|We have actually implemented this in February, and it is controlled by `editor.wordSeparators` (across all languages)
14113|Yes - code depot is a performance problem, not a leak.   Yes - the leak test should have been performed after first `ember serve` even though it is **questionable** why the tree caching holds on to old model objects.  Yes/No - it doesn't matter if you use the heap timeline or manual heap snapshots. The heap timeline from above (https://github.com/Microsoft/vscode/issues/4010#issuecomment-197740485) shows leaks, the manual snapshots shows heap growth. Whatever you favour just don't stop at the complicating looking objects on the heap.
14114|We actually shipped with this behaviour already in February.
14115|We actually shipped already in February with the proposed behaviour.
14116|"Any progress on "".git/index.lock': File exists.""? It's a mess to fix a large rebase that fails when you forget to close vscode."
14117|You're welcome :-).
14118|You're welcome :-).
14119|@bpasero and I have actually seen this together on his mac, when he was using `zoomLevel`. I forgot the exact commit, but the issue was the following: - the mouse event we got from Chromium had as target the token text - we would then use hit testing to find out at which offset the mouse hits the token text - the hit test would (incorrectly?) hit a view cursor - the logic was not ready for such inconsistency between a mouse event's target and its posx/posy.
14120|Please reopen or file another issue with more information such that we can attempt to reproduce.
14121|I think this is a dup of #1850
14122|Changed the title. According to @peterbourgon all .go files should always be indented with tabs, the go compiler cannot compile files indented with spaces. I guess this is similar to yaml, where yaml processors cannot handle files indented with tabs.
14123|Dup of #1240.
14124|@goddyZhao `Cmd+F2` selects all occurences of the word under cursor on the Mac.
14125|"For anyone new doesn't want to sift through all the posts.  In 0.10.11, this works:  Set `""http.proxyStrictSSL"": false` in user settings in order to install extensions.  Motion to close."
14126|Closing this for now as it is unclear to me what is the use case. If none of our concepts fit the use case, an extension could register a keybinding rule for 'Enter' and do all the logic for 'Enter' on its own.
14127|@tacho87 We drop the undo stack when the file is edited on disk outside of VSCode. If a file is merely touched (but has the same content), we don't drop the undo stack. Are you editing the files through the Chrome debugger?
14128|"Yes, so it definitely is related to the ""Typings"" folder. It appears that there isn't any caching being done on this folder, as when it is included the delay changes from <1s to ~10s. Apparently, whatever the process is that allows for intellisense, symbol renaming/parsing, etc. is not caching properly. I'm going to try to uninstall completely VS code and reinstall to see if that has any effect."
14129|@weinand The debugger seems to be working fine again. After updating and testing with node versions 4.4 and 5.8 and as of VS Code V. 0.10.11, I'm not able to replicate the issue anymore. I did a fresh install of all my npm modules as well so I know my temp fix is no longer in place as well. No idea what it was but it's fixed now. So, yay :+1:
14130|> the go compiler cannot compile files indented with spaces  To be clear, it will compile, but it is not canonical format.
14131|@kfranqueiro while waiting for a proper tab solution you might be interested in adopting [the keybindings I use](http://www.growingwiththeweb.com/2016/03/simulating-tabs-in-vscode.html) which bring <kbd>ctrl</kbd>+<kbd>w</kbd> and <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>w</kbd> closer to a regular tabs implementation.
14132|https://github.com/alexandrudima/vscode-vim shows how to better handle keyboard input in the case of a vim extension
14133|yeah, sorry wrong issue.
14134|"Well, yes, listening to `type` event can solve the layout problem of vim extension. But, if an extension want to add custom function when `cmd+\` is pressed, we still need to deal with different keyboard layout since `cmd+\` is not passed to `type`. Having `type` event gives developers a workaround for some problem. But doesn't solve the problem that keybinding settings is not binding the ""real"" key."
14135|Sure @pflannery, I can take a look at this over the weekend and see what I can get done.
14136|This is how Chromium handles keyboard input. At the JS level (where our code lives), there is no way to distinguish between `AltGr+L` and `Ctrl+Alt+L`. We therefore don't ship with any keybindings that use `Ctrl+Alt+` on Windows. I recommend the extension finds a different keybinding that doesn't prohibit typing on non-QWERTY keyboard layouts.
14137|fixed by 32bd7fd
14138|"Here are my current extensions  <img width=""594"" alt=""screen shot 2016-03-17 at 7 53 08 am"" src=""https://cloud.githubusercontent.com/assets/10361685/13846491/7450875c-ec15-11e5-98b7-c2a72317bb26.png"">"
14139|Yes, for example `'` is not a character pair in plain text files. Or `<` is not a character pair in JavaScript as it is only used as a comparator operator.  Here I am doing it in a JavaScript file:   ![character-pair-delete](https://cloud.githubusercontent.com/assets/5047891/13846501/d5d9d730-ec47-11e5-97ab-147dc747c359.gif)  What version of VSCode are you using that it doesn't work for you?
14140|I've now uninstalled, deleted the Code folder in %appdata%, and reinstalled VS Code with still no luck.
14141|Unfortunately, all the commands of vscode itself have the same limitation. This is not a limitation we have added, [it was a design choice done by w3c when they drafted the `keydown` event specification](https://www.w3.org/TR/DOM-Level-3-Events/#determine-keydown-keyup-keyCode).  [We can revisit this once Chromium decides to implement KeyboardEvent.key in a correct way](http://caniuse.com/#search=KeyboardEvent.key), so it is ok with me to keep this open as a tracking issue.
14142|I'm in version `Version 0.10.11 (0.10.11)`. Though it hasn't worked since the beginning like when VSCode launched for me.  ![mar 17 2016 21 06](https://cloud.githubusercontent.com/assets/1324476/13846734/375ebab6-ec84-11e5-8302-adaa58d37d45.gif)
14143|I suspect a leak on the extension host side, so we have to expand our leak testing to the extension host.
14144|@sahas- and please attach the workspace or pointers how to get there
14145|Closing since the strings are proper externalized (minus extensions from the store) and we are waiting to receive the translations from the team.
14146|@dbaeumer if you feel brave, just make the change in index.html to pick up the language chosen. I have no clue what the implications are.
14147|Also, please try to reproduce this without extensions enabled (--disableExtensions) so we know if it's on our side or an extension issue
14148|The [Go language spec](https://golang.org/ref/spec) does not seem to touch on the topic of preferring tabs vs spaces for indentation, it simply defines them as whitespace and then defines the semantics of whitespace while parsing source code.  If I understood how this works, the go compiler ships with a formatter that prefers tabs, which is great.  But given this is not specified in the language, and the compiler can compile files indented with spaces (as per the language spec), I'm not sure what you would expect VSCode to do special regarding .go files.
14149|"I think `""editor.autoClosingBrackets""` controls this behaviour, is it possible you have set it to false in either user settings or workspace settings?"
14150|@bpasero - can you pls point me to some instructions to extract the workspace? @jrieken  - its not reproducible now, with or without extensions. May be, I need to leave it over night and see..
14151|Thanks! Looking forward to the fix.
14152|+1 would be nice to have
14153|Motion granted.
14154|"> If I understood how this works, the go compiler ships with a formatter that prefers tabs, which is great.  It's much stronger than ""prefers"" — it's more like canon. To some order of approximation, zero percent of Go code in the wild has any other format than the canonical gofmt style. I understand this is different than many other programming ecosystems.  > I'm not sure what you would expect VSCode to do special regarding .go files.  When VSCode encounters a .go file, it should use tabs for indentation, and spaces for alignment within that file. This behavior should not be configurable, nor should it rely on the user installing/configuring an external plugin. Concretely, if this doesn't happen, Go users of VSCode (using the excellent vscode-go plugin) will observe indentation spaces replaced with tabs every time they save their files. Bad UX."
14155|This is because ionide does not contribute an alias for their language contribution.
14156|@sahas- the folder you open vs code with
14157|@alexandrudima starting with you for the core side
14158|Thanks. Works for me `Version 0.10.11`
14159|"These are the settings I have set:  ``` json  // Place your settings in this file to overwrite the default settings {     ""editor.tabSize"": 4,     ""editor.insertSpaces"": true,     ""typescript.useCodeSnippetsOnMethodSuggest"": true,     ""javascript.suggest.useCodeSnippetsOnMethodSuggest"": true,     ""typescript.tsdk"": ""/usr/local/lib/node_modules/typescript/lib"" } ```  And my default settings have set it to true.  ``` json // Controls if the editor should automatically close brackets after opening them     ""editor.autoClosingBrackets"": true, ```"
14160|If we should add anything just let me know.
14161|Maybe this is something the Go extension could do.  @lukehoban This snippet in the go extension would ensure all .go files use tabs and not spaces:  ``` vscode.window.onDidChangeActiveTextEditor((editor) => {     if (editor && editor.document.languageId === 'go' && editor.options.insertSpaces) {         editor.options = {             insertSpaces: false         };     } }); ```
14162|Would be happy with that!
14163|"@Krzysztof-Cieslak you could add one `alias` when you contribute the language.  e.g.:  ``` ... ""contributes"": {     ""languages"": [{         ""id"": ""fsharp"",         ""aliases"": [ ""F#"" ],         ""extensions"": [ "".fs"", "".fsx"", "".fsi"" ],         ""configuration"": ""./fsharp.configuration.json"" ... ```  We will also change some logic on our side that if the `alias` key is missing we pick up the `id` as the language name."
14164|> For those interested, I think the API on the vscode side is good enough now (on master) to support a good vim emulation extension. >  > Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for a sample using the new API.  Just updated my vim extension to use these new APIs. Works amazing!!! https://github.com/aioutecism/amVim-for-VSCode The new API is only available from VSCode 0.10.12. If anyone is interested, download the [insider build](https://code.visualstudio.com/insiders) and install amVim to give it a try.
14165|Somehow the issue was resolved by deleting everything in appdata/roamin/vscode - alpha/ except for the User folder. Possibly something to look into there?
14166|@bpasero Wondering why we show something in the 'change language' UI then?
14167|The vscode extension shows the message it gets from eslint and when there is a rule then it is shown  ![image](https://cloud.githubusercontent.com/assets/172399/13848259/4972d788-ec51-11e5-8193-a64b646b2548.png)  There is no rule for parsing errors and this is why eslint shows (null), which is not very friendly...   ![image](https://cloud.githubusercontent.com/assets/172399/13848320/84fc02ca-ec51-11e5-8b29-e513e63045c6.png)  I suggest to file an issue against the eslint repo
14168|Thanks.  I made a pass with @egamma over the defined tasks and commented in #4196
14169|@jrieken that is very likely our own F# coloring?
14170|"Yes, we need negated glob exclusions. In Node, the built-in place to put application-wide modules is in a node_modules folder. You would want to be able to exclude node_modules except for your project's modules under e.g. node_modules/_local so that you can easily navigate to your own modules without also including all the imported ones.  Edit: this glob already works for the scenario above:  ``` JSON {     ""search.exclude"": {         ""**/node_modules"": false,         ""**/node_modules/!(.local)"": true,         ""**/bower_components"": true     } } ```"
14171|Created https://github.com/Microsoft/vscode/issues/4363 for the auto detection.
14172|@AndyYSWoo we just released a new insiders build, maybe you could try with that: http://code.visualstudio.com/insiders  It shows up as green logo in the taskbar as opposed to the blue one.
14173|@jrieken This is weird, I see the issue in source code (where the latest contribution of a language gets to determine its name), but I cannot reproduce when running out of development.
14174|Scratch that, I mixed up the `.vscode-oss-dev` vs `.code-oss-build-dev` folders. I can reproduce.
14175|duplicate of #2987
14176|Currently the locale parameter is only respected once per VSCode main process. The reason for this that the main process already controls parts of the UI (e.g. menu bar, some dialogs, ...). Honoring the locale in a browser process would result in a mixed user interface (like in the screen shot). So in the current build none of the strings are run through pseudo in this setup meaning that the menu bar, the open dialog shows normal strings.
14177|Moving to April.
14178|The minimal fix is to change the description and say that AMD is currently not supported.  @aeschli is it easy to add a warning when AMD is picked as the module type in a jsconfig.json?
14179|@SofianHn what is the latest on this?
14180|We will not update to a new electron for March, shifting to April
14181|Still waiting on OSS approval
14182|duplicate of https://github.com/Microsoft/vscode/issues/1905
14183|This issue was moved to tht13/gerrit-vscode#1
14184|@bpasero No further work needed on your side.
14185|Pushing to April.  Please consider using a [credential store](https://help.github.com/articles/caching-your-github-password-in-git/) as a temporary workaround.
14186|@aioutecism Awesome!!!
14187|Does it happen also after a restart?
14188|"@Morgy93 From popular user demand, the cursor double clicking, word navigation and word deletion now respect a new setting called `editor.wordSeparators`. This allows you to define, as best suits your workflow how these features should behave.  In this case, you can change the default to remove $ as a word separator:  ``` ""editor.wordSeparators"": ""`~!@#$%^&*()-=+[{]}\\|;:'\"",.<>/?"" => ""editor.wordSeparators"": ""`~!@#%^&*()-=+[{]}\\|;:'\"",.<>/?"" ```"
14189|Fixed.
14190|Sounds like a good example for an extension.
14191|This, and many other changes, can always be tracked in the [Release Notes](https://code.visualstudio.com/Updates).
14192|@alexandrudima thanks! love those comments ;)
14193|@bpasero I will look into this for April. I am not brave enough to make this for March.
14194|"Yes, I would take out 'amd' from the enum of possible module values. The user will then get an error that amd is not a valid value. Would that work?  Maybe you want to also check the other options in there and tell me if they makes sense:     ""commonjs"", ""umd"", ""system"", ""es6"", ""es2015"""
14195|"I know there is the message ""Visual Studio Code - Insiders will be updated after it restarts."", but when I do not update, exit, and restart - nothing happens. I get the same update message again. Is this what you mean?"
14196|@aioutecism please don't play with my feelings gonna try it now
14197|That is how it's meant to work. The editor has no notion of a _next file_. There is talk about a dedicated error view (at the bottom) but for now 'F1 > Show Errors & Warnings' is the workaround
14198|:+1:
14199|you may not need to. When doing alt+f1 NVDA switches to browse mode, pressing escape goes back to focus mode. I haven't tested going from focus mode to focus mode though. Suggested flow?
14200|@alexandrudima This is something we don't support anymore, right?
