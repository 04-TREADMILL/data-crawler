15901|Thanks for the update. cc @daviwil
15902|How is this even related to VS Code? This is just simple markdown editing... Google -> https://github.com/gitlabhq/gitlabhq/issues/1238#issuecomment-10022918
15903|Which version of the PowerShell extension are you using? This was fixed recently in Script Analyzer so you shouldn't see it in version 0.5.0 of the PowerShell extension.
15904|@jpierson this basically a problem of the generated source map and the fact that VS Code does not (yet) tries to be smart. Here is my example:  ``` ts async function longRunning() {     return new Promise((resolve, reject) => {         setTimeout(() => {             resolve(42);         }, 3000);     }); }  async function main() {     const result = await longRunning();     console.log(`the answer to everything: ${result}`); }  main(); ```  As you can see in this [visualization](https://sokra.github.io/source-map-visualization/#base64,dmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7CiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9CiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMpKS5uZXh0KCkpOwogICAgfSk7Cn07CmZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewogICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIHJlc29sdmUoNDIpOwogICAgICAgICAgICB9LCAzMDAwKTsKICAgICAgICB9KTsKICAgIH0pOwp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIGxvbmdSdW5uaW5nKCk7CiAgICAgICAgY29uc29sZS5sb2coYHRoZSBhbnN3ZXIgdG8gZXZlcnl0aGluZzogJHtyZXN1bHR9YCk7CiAgICB9KTsKfQptYWluKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZS5qcy5tYXA=,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc2FtcGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7O1FBQ0MsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDbEMsVUFBVSxDQUFDO2dCQUNWLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNiLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBO0FBRUQ7O1FBQ0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FBQTtBQUVELElBQUksRUFBRSxDQUFDIn0=,CmFzeW5jIGZ1bmN0aW9uIGxvbmdSdW5uaW5nKCkgewoJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKCQlzZXRUaW1lb3V0KCgpID0+IHsKCQkJcmVzb2x2ZSg0Mik7CgkJfSwgMzAwMCk7Cgl9KTsKfQoKYXN5bmMgZnVuY3Rpb24gbWFpbigpIHsKCWNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvbmdSdW5uaW5nKCk7Cgljb25zb2xlLmxvZyhgdGhlIGFuc3dlciB0byBldmVyeXRoaW5nOiAke3Jlc3VsdH1gKTsKfQoKbWFpbigpOw==) of the generated source map, the `__awaiter` function has no mapping to the TypeScript source. That's the reason why VS Code shows the generated code. I think this is a good strategy because now you can clearly see that you need to do another two F11s to step into the `longRunning` function.  On the other hand if the source map would have a mapping for `__awaiter` you would end up in some strange place in the TypeScript source and you would not know how to proceed.  So the current behaviour isn't optimal but it is not buggy either. I've added a 'feature request' label.  I'm planning to make node-debug smarter by detecting the `__awaiter` function and automatically issuing 'step into' requests.
15905|:+1: , we should look into this when we make markdown a real extension.
15906|I think we once had the idea to be able to annotate errors so that we can handle this in one place and not every author has to do it. E.g. to be able to specify options (show to user, show in dev console). We never really took a crack on this, but I am also easy to review such a change if you wanna tackle it.
15907|Yes I can take a look. What is the current place where we handle these global errors?
15908|Would be nice to not show git ignored files in the project explorer :)
15909|I think it all goes down to errors.onUnexpectedError and its error handler in there.
15910|/cc @dbaeumer
15911|This is fixed in master, thanks for the report.
15912|@Tyriar @alexandrudima Should I escape all non-ASCII symbols in the .ts files?
15913|+1, I'm currently trying to package `vscode` for the [NIXOS package manager](https://github.com/NixOS/nixpkgs) and having the same problem. If I append to `LD_LIBRARY_PATH` before calling `./scripts/code.sh`, it gets overwritten with the default `LD_LIBRARY_PATH` (presumably from `.bash_profile`), which leads to `electron` crashing because it can't find the shared libraries.  **EDIT1:** The culprit is located in [`src/vs/workbench/electron-main/main.ts`](https://github.com/Microsoft/vscode/blob/0.10.10/src/vs/workbench/electron-main/main.ts#L251), which calls [`src/vs/base/node/env.ts#getUserEnvironment`](https://github.com/Microsoft/vscode/blob/0.10.10/src/vs/base/node/env.ts#L22-L25).  Changing  ``` js Object.assign(process.env, userEnv); ```  to  ``` js for (var userEnvKey in userEnv) {     if (!(userEnvKey in process.env))         process.env[userEnvKey] = userEnv[userEnvKey]; } ```  should prevent overwriting of existing environment variables.  **EDIT2:** However, after patching the code in EDIT1, the extension host still complained about missing shared libraries. I've managed to solve the issue by patching the rpath/runpath of `electron`'s ELF executable.
15914|@brockallen Thanks a lot for filing this! :+1:   .. Looks like most time is spent in `decodeTextMateToken`:  ![image](https://cloud.githubusercontent.com/assets/5047891/14180718/99a3d0e0-f764-11e5-9a83-df750fac48a3.png)
15915|In light of yesterday's announcement (!!!!!!!!!!!) I suspect this thread is nearly a moot point :-)
15916|Fixed via a4e106699b06cac7e78a8a7178a308ed50bb7f5e All my other templates only have html elements, so not disposing is needed there
15917|This seems to be fixed via c284835
15918|I will double check in this specific case, but the general idea is that the cursor moves when the document is edited from an extension.  e.g. if the cursor is at the second line and an extension inserts 20 lines at the top of the file, the cursor will go to the 22nd line.  (I call this side-editing): https://github.com/Microsoft/vscode/blob/5ba4f734dfaca254fe40354a27f1cfcffc1b75ec/src/vs/editor/test/common/commands/sideEditing.test.ts#L54
15919|Assigning the April for investigation.
15920|Thanks for all the hard work. I know this is still in development, so I can hardly complain. Still, I was unsuccessful getting the experimental debugging (described above) working. True, I only put in a couple of hours and could have tried harder. But for me, I'm guessing there's more value to waiting for stability than tinkering around with experimental builds and such. Cost vs. benefit, I suppose. Don't get me wrong, I am very excited for this and I can't wait. Please keep us informed as to your progress as we're counting the days.
15921|#4825 should fix this.
15922|I think it should still be labeled a bug, as the current behavior doesn't allow for you to remain in the newly-scrolled screen without using the mouse to put focus in the new position. This is because the cursor stays put even when it completely scrolls out of view. Since this is all about keyboard navigation, then requiring the mouse seems counter to the spirit of it.  Most editors have the cursor follow along at the top or bottom of the screen (depending on scroll direction) when scrolling beyond the current view. In that way, there's no jarring snap back to another location off-screen when you start moving the cursor with arrow keys again or start typing.  However, some editors additionally allow you to hit ESC to snap back to the original position in the cases where you're scrolling just to take a peek instead of wanting to stay in the new location.
15923|Hi @SE2Dev, thanks a lot for your great example project. It was very helpful understanding the issue. I delivered a fix for the first issue.  The second one, however, is a known problem of the c grammar The C grammar uses $base instead of $self to refer its own rules, as done in a block. $base is the parent grammar, in your case the exampleLang grammar. So that's why you had to use start again inside a block The c grammar does that as they assume that the parent grammar is a grammar like C++, that includes C to extend it.  http://textmate.1073791.n5.nabble.com/C-based-grammars-broken-for-embedding-restricting-base-reference-td25165.html discusses this and recommends to use injection.
15924|@alfalabs Do you have any extensions installed that could cause that? In the built-in HTML support we don't do any fetching of CSS.
15925|"+1 --- just spinning thoughts:  as i (hopefully) understand VS-Code itself is web-based in its internal structure and presentation abilities; if so, to have the opportunity to gain the max out of it: - would it be possible to have a webview for example to a minimal vbox | vagrant instance to with bindings to the internal VS Code interface mapping? means:  -- using the parsing- | intellisense- -mechanisms to format and control the input in forefront, then send it (via ssh for example) to the virtual appliance; i think of the possibility of giving the control over the accessed terminal | cli to VS Code without touching the appliance itself; Therefore it would be needed to use VS Code definitions, to handle the (possible|wished) ways of communicating with the terminal without knowledge of the setup itself | changing the appliance at all, which makes it universal | and spend the ability to change the terminal at any given point, by just exchanging the needed appliance / switching to the one of many needed for a specific part in a project;  -- another advantage would be gaining manageable compatibility setups for specific branches | stages as the needed appliances would be defined in the project, not in the needed appliance itself;and if a function | binding | add-on really is needed in that specific terminal to deliver the functionality needed, it could be also defined by scripts specific to these terminals, but stored and managed in | via VS Code;  Well, i hope one can follow; It's truly no new perspective | handling it's just programmatical remote access in near-real-time and dependencies defined in a project in VS Code, to have ONE LOCATION to define the controlling mechanisms and start | stop the needed appliances, with their specific virtual network setup and bindings, for example.  However, the most simple form of that scenario would be to 'blend' a remote-access-output of a locally installed application via OS-internal-functions into the interface of VS Code, or do the whole fully-remote-handling of a virtual-network-stack, whereas the possibility of combining diverse operators would be given ( not just one or more VBOX instances or VMWARE or RDP or whatever, but a MASH-UP | MESH-APP defined in ONE PLACE AND PROJECT, OS- and APP-independent.  I think it's possible to realize such a feature without much effort if a group of specialists for the needed use-cases can merge in teams to provide json-based setup-templates; The controller itself would and should be realized in VS Code, specific to this editor (which really needs a pure 64-bit-edition on linux-based-gnu-os's, just to mention it ;) )  Just my 2 or more cents on that topic ...  Thanks for your interest.   claudiusraphael"
15926|"P.s.: My hidden aim on that topic is gaining a All-in-one--Solution, that can be used on top of Core-Server | Hyper-V-Server installs for a complete windows-based aio-fully-virtualized-collaborative-and-single-developer-project-editing-suite a.k.a VS Code, for all those that like to use bare metal and cost-free solutions with minimal security implications and guaranteed-operability independent of on- or off-line- -usage;  Also it opens the way, to use IoT Windows and for example docker-based e.g.: for use on Ubuntu snappy-core -implementations, that can be realized in a single package as defined by project for added participators or specific to kind | type of collaboration objective.  Well yeah, times i am i bit futuristic in my wishes, it's just ... it is already possible :)"
15927|Thank you very much. I thought the second problem might have had something to do with $base, but wasn't able to find any definitive information on it, the link you provided should definitely help.
15928|@aeschli  Yes, I installed VScode yesterday and a bunch of extensions before running it. I would expect that a third party extension should never cause VScode to hang. This issue should be reopened as to protect VScode from bad extensions.
15929|Here's the version I'm using. Looks like 0.5.0.  ![image](https://cloud.githubusercontent.com/assets/466713/14183868/a4c2849c-f72f-11e5-926d-be7218ed3ec3.png)  New screenshot replicating behavior:  ![image](https://cloud.githubusercontent.com/assets/466713/14183893/c9a5d69c-f72f-11e5-9be9-17bba11f1ce6.png)
15930|Do you mean when navigating the explorer with the keyboard?
15931|It might be showing the dev tools because an error occurred? Try looking at the errors by clicking on the red `x` in the top-right.
15932|@parliament718 here is a list of the options available for the formatter https://github.com/Microsoft/vscode/issues/4066
15933|If it's not supported by Electron then it won't be possible in VSCode.
15934|"Hm, we might indeed bring up dev tools automatically if an error occurs. @DracotMolver please click on the "">>"" in the toolbar to the right to reveal the ""Console"" and click that.  You can also share the code with me so that I can have a look?"
15935|I'm assuming this is talking about jQuery intellisense support, I think this would be best left up to an extension.
15936|"@DracotMolver I can reproduce this issue, nevermind. There is a bug in our end but you are also using the API in a way we did not think about: ""matchOnDescription"" only makes sense if the labels you pass in have a description. To create a pick entry with label, you need to pass in an object that implements the QuickPickItem interface: https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L1155"
15937|I am marking this as duplicate of #224 because today you cannot use tabs in vscode.  @SiriusGuo as a workaround you can Ctrl+click on a file to open it to the side of the file, so that you do not replace the file.
15938|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/81
15939|@seanmcbreen you mentioned there was some issues with telemetry too, do you think this could be related?
15940|+1 for having a UI that is not interfering with my coding workflow. for that we should make it very clear (in terms of UX) that the UI for managing extensions, settings, etc. is visually looking different from our workbench. my fear is that once you go into the management UX, it looks too similar to the actual coding UX. I am fine reusing the concepts of sidebar, viewlet and editor (which is really just a master-detail thing) but imho it should really have a look that you can separate the one from the other.  I like Johs design, but I wonder if this one should pop up as overlay over the workbench so that you can see it is somewhat modal or even be in a separate window to make clear that you are not interfering with the coding workflow.
15941|I think this is a general issue with any label that gets truncated.
15942|That's weird, not sure why it's marking the whole thing for you.  Here's what I see:  ![image](https://cloud.githubusercontent.com/assets/79405/14184945/86956ed8-f72c-11e5-8849-53c251f1a2ee.png)  Can you try uninstalling/reinstalling the PowerShell extension?  Not sure if that will help, just trying to track down how you could be using an out-of-date Script Analyzer.  I'm shipping it bundled with the extension for now so the PSScriptAnalyzer you might have installed from the Gallery shouldn't affect this.
15943|"Also ""ext install"" may not be the best way to verify the version you have installed, it just shows you the latest version.  Try running the ""Extensions: Show Installed Extensions"" command to find the actual version that's installed."
15944|@crabulik thanks for verifying - closing.
15945|@alexandrudima In that case, I understand that the cursor is moved. But I'm not quite sure about the use case of adding a new line at the end of a line. I wrote a test for it, but am having issues installing the npm dependencies of vscode.  ``` js test('insert at end of file', () => {     testCommand(         [             'first',             'second line',             'third line',             'fourth'         ],         new Selection(4, 7, 4, 7),         [             EditOperation.insert(new Position(4, 7), '\n')         ],         [             'first',             'second line',             'third line',             'fourth',             ''         ],         new Selection(4, 7, 4, 7)     ); }); ```  This test will fail because the cursor will go to the 5th line, right? Maybe it's an idea that it should be possible to insert at `line.length + 1`. In this case `new Position(4, 8)`. This indicates that it inserts AFTER the cursor and not in front of the cursor.  Another idea is of adding an API method for inserting an empty line.
15946|@Kurtz1993 we like the feature too, it is on the backlog.
15947|// CC @weinand he has answered this question several time before.
15948|To work around the ugliness of doing this only when truncated, it looks like atom just adds `title` all the time.
15949|Yes this functionality is avialble to all debug adapters. Go, powershell and others use it. The `variablesReference` from the response is the key here, if that is greater than zero vscode will treat it as a complex object. Once the user tries to expand the object VSCode will try to get all the children of that variable using the reference.  https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L429
15950|Hi **@kf6nux**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
15951|Idea is that `Uri#toString` will take a parameter that controls to what degree encoding happens. If not wished only what is required to parse into the same result again is encoded, a sample would be the `#`-character inside a path: `file:///pröjects/c#/file.cs#l=12` will toString like this: `file:///pröjects/c%23/file.cs#l=12`
15952|"Can this be made way that it actually is integrated with git?   What VsCode requires to integration may be user to set ""git repository for user settings"", and whenever user wants they can push changes to github and they can be pulled (syncronized in other locations).  I can currently do this manually because VSCode relies on json files (which is good thing), however some tooling may make this kind of syncronizing killer feature.  Why i propose this is truth that in environments where export/import is made by hand (create file -> import file), that is often actually syncronized hard way (via email for example). Its true that that file can be placed under version control (where it should be), however then cycle is following: 1. Export file to version control location and overwrite existing. 2. Add, Commit, Push etc. 3. Pull etc. 4. Import. Question is, should this really be that hard?  Git integration makes syncronizing environments between team easy if required (however because workspace settings exist in vscode this may be rare case). If you want to use common settings just use master, if you want to modify it based on master and use it as base, just fork or branch it and merge following changes whenever you want and configure VSCode to use your branch instead."
15953|Comment so I'm participating.
15954|Issue is still occurring with 0.10.11.  I simply added a symlink and that works  `ln -s /Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron /Applications/Visual\ Studio\ Code.app/Contents/MacOS/Atom`
15955|:+1:
15956|"An API for opening a folder is the last cog in a wheel (_and the most crucial_) for an extension I'm writing. Would love a couple APIs landed to open a folder with: 1. A new window, maybe defined as (`vscode.window.openNewWindow(uri : vscode.Uri)` 2. Current workspace, maybe defined as (`vscode.workspace.openFolder(uri : vscode.Uri)`  Using nodejs's `child_process` isn't really viable, because: 1. Even when ""detached"", it is still a child process. 2. Starts the instance (I'm provided a PID) however doesn't actually render."
15957|+1  Seeing the same issue on VSCode for Windows `0.10.11`. It typically crashes every night consistently when not in use. Given steps to collect info I'd be glad to help.   Running on a TypeScript git repo with 28,438 Files, 4,812 Folders. Has gulp watchers as well, with many TypeSript defs.  I have the following extensions installed: - PowerShell - C# - Material Theme Kit
15958|@alanwright could you try if it still reproduces with our latest insider build (http://code.visualstudio.com/Download#insiders). If so, can you share the workspace with me?
15959|"Something similar seems to be happening to me, but not using gvfs. I save some files several times, and suddenly all open files are closed. It seems to happen to me more often when I have two or three files open via the ""Split Editor"" functionality. I can reliably and quickly reproduce it when editing a `tslint.json` file, a project level `settings.json` file with `tslint` settings in it, and a code file at the same time. I do have the tslint plugin installed.  This is on Windows 7, Code version 0.10.1. I can give more details if you need them as to my current environment.  Here are the relevant logs from when it happened last. File paths edited for confidentiality.  ``` [File Watcher] [CHANGED] c:\Users\Some.User\src\project\tslint.json csharpWatcherService.ts:76 [File Watcher]  >> normalized [CHANGED] c:\Users\Some.User\src\project\tslint.json csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\project\.git\index.lock csharpWatcherService.ts:76 [File Watcher] [CHANGED] c:\Users\Some.User\src\project\.git\index.lock csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\project\.git\index csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\project\ csharpWatcherService.ts:76 [File Watcher]  >> normalized [DELETED] c:\Users\Some.User\src\project\ csharpWatcherService.ts:76 [File Watcher]  >> normalized [ADDED] c:\Users\Some.User\src\project\.git\index.lock csharpWatcherService.ts:76 [File Watcher]  >> normalized [ADDED] c:\Users\Some.User\src\project\.git\index ```"
15960|@joaomoreno is this something we need to fix?
15961|> In order to do this you need to open two instances of vscode  That was my first try, but when trying to open the same project folder in a new instance, VSCode simply focus on the already opened window, instead of opening the project in the new one.  My team really needs this, it's terrible to stop client debugging, and then attach server one, and then stop, and attach client again. In fact, we're using the browser itself for client debugging, and VSCode for Node debugging, only because of this lack of support.  I have opened https://github.com/Microsoft/vscode-chrome-debug/issues/140 before actually finding this thread.  Is this feature becoming available anytime soon?  @isidorn @bpasero @chrisdias
15962|I saw the thread you posted, and it did not solve the issue. It's related to VS Code b/c vscode purports to support Markdown, and when it fails using this editor in this way, it's worth reporting.
15963|Yes please let us know anyway you feel we can improve the product :)  This is what I see in 0.10.12 (not yet released):  ![image](https://cloud.githubusercontent.com/assets/2193314/14191249/bc09ccde-f74b-11e5-931d-faa7c44ae6ea.png)  Seems fine, now at least.
15964|Peter,  Thanks for trying out the extension. We are pushing an update to the extension today that should have more detailed steps for installing debugger bits.  Thanks, -sridhar
15965|"Here's the output from ""Extensions: Show Installed Extensions""  ![image](https://cloud.githubusercontent.com/assets/466713/14192834/7bd31e56-f75d-11e5-95ff-9a73b73b26f2.png)  I'll try re-installing it. Where's the best place to track this bug in an open state?"
15966|@wuchuguang The extension is now live - https://github.com/Microsoft/vscode-react-native
15967|@bpasero I'm not hitting this issue with the latest alpha.
15968|Still can't install C# extension and receive the following error   Failed to execute git
15969|Hi @aeschli ,  The code is fairly simple. I just create a `TextEditorDecorationType` and assign it to the `vscode.window.activeTextEditor` with an array of `Range`, which each element defines a line in the text. - Creating the decoration   ``` typescript     var bookmarkDecorationType = vscode.window.createTextEditorDecorationType({         gutterIconPath: pathIcon,         overviewRulerLane: vscode.OverviewRulerLane.Full,         overviewRulerColor: 'rgba(21, 126, 251, 0.7)'     }); ``` - Defining the lines that will show the decoration. Each `activeBookmark.bookmarks` element is a `number` that represents a line number in the text  ``` typescript         var books: vscode.Range[] = [];         for (var index = 0; index < activeBookmark.bookmarks.length; index++) {             var element = activeBookmark.bookmarks[index];             var decoration = new vscode.Range(element, 0, element, 0);             books.push(decoration);         } ``` - Adds the set of decorations to the `activeTextEditor`  ``` typescript     vscode.window.activeTextEditor.setDecorations(bookmarkDecorationType, books); ```  As you can see, the decoration is defined to individual lines, to display the icon in the `Gutter` (like _breakpoints_). But then, when the code is folded, the icon is shown in the folding line. Take a look at the GIF below.  ![bookmarks-folding](https://cloud.githubusercontent.com/assets/3781424/14194900/9915fe26-f789-11e5-89cd-7c88a71bf113.gif)  Thanks for your help
15970|So, is it a new feature when it opens the web browser?. Because all the errors are displayed in the console debugger. ooh...Sorry if I use the API in a wrong way :P. I thought that the parameters were optionals. Ok I solve it doing this. - It was something awful as a code...but it works as a test lol.  ``` javascript var items = []; var addItems = function(item : vscode.QuickPickItem){     items.push(item); };   addItems({label:'rgba', description:'colores en formato decimal con alpha'});  addItems({label:'hex', description:'colores en formato hexadecimal'});  vscode.window.showQuickPick(a, {     matchOnDescription:true }).then((data) => {     console.log(data); }); ```  Now I realized that this should be obvious because it says matchOn**Description**, so it has to be a description...but the documentation about showQuickPick says for its parameters:  _An array of strings, or a promise that resolves to an array of strings._ Thanks guys for your time. This is the answer and solution for me...but you decided if it is a bug or not :)
15971|Just confirmed the issue persist with `--disable-extensions`.  What I tried is to click on the file under the folder before I delete the folder.
15972|if the extension itself has some settings, how about providing GUI and interfaces for these ext-settings :)
15973|File it over on the vscode-powershell repo if you don't mind.  I might have to get some logs from you to see what's going on.
15974|I've done some digging and figured out how to install an extension manually. There may be a better way to do this, but can't find any documentation on it: - Retrieve [https://vscode.blob.core.windows.net/gallery/index](https://vscode.blob.core.windows.net/gallery/index), it's a cached index of all extensions available on the gallery in json format.   Search for the desired extension, e.g. by `publisherName`, `extensionName` and/or `extensionId`. - Extract the `assetUri` for the desired `version`. - Download the extension by appending `/Microsoft.VisualStudio.Services.VSIXPackage?install=true` to the `assetUri`. (e.g. [https://ziyasal.gallery.vsassets.io/_apis/public/gallery/publisher/ziyasal/extension/vscode-open-in-github/0.8.0/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage?install=true](https://ziyasal.gallery.vsassets.io/_apis/public/gallery/publisher/ziyasal/extension/vscode-open-in-github/0.8.0/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage?install=true)) - Rename the downloaded `Microsoft.VisualStudio.Services.VSIXPackage` package's file extension to `Microsoft.VisualStudio.Services.vsix`. - Run `code Microsoft.VisualStudio.Services.vsix` as described in the [installation instructions](https://code.visualstudio.com/docs/extensions/install-extension#_install-a-packaged-extension-vsix). - Restart the editor.  **EDIT**: Aha, yes, one more important thing: I can't speak for anyone here, but I guess once you start using MS's branded services, e.g. loading extensions from the gallery store, you agree to [their terms of use](https://azure.microsoft.com/en-us/support/legal/website-terms-of-use/). I'd imagine that installing these extensions also applies under the proprietary [Visual Studio Code license](https://code.visualstudio.com/license), as well as any individual license contained in the extension.
15975|@bpasero Are you working on this issue meow?
15976|No, we just decided to give issues an owner.  This issue is currently assigned to the backlog. Every sprint we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning
15977|k
15978|@vsccarl actually this bug sounds very similar to this one here: https://github.com/Microsoft/vscode/issues/4578
15979|@unional @felixfbecker I need steps, something like: - you start vscode by opening a folder with a node_modules folder - you click on a JS file - you open a terminal and use NPM to remove a package  Yes, no?
15980|UPDATE: No.  I don't think it needs to be any `node_modules` (although it does).  I have problem with regular folder. 1. Open code: `code . --disable-extensions` 2. Open a file under a folder. e.g. `/build/a.js` 3. Delete that folder from vscode. Right click -> delete 4. Error.
15981|@isidorn thanks for pointing out the usage of variableReference.   Just one more question, is multiline output possible? We've raised the same question in https://github.com/Microsoft/vscode/issues/255 .
15982|"I cannot reproduce: - checked out the typescript project https://github.com/Microsoft/TypeScript.git - npm install - opened the project in vs code opened the files Jakefile.js and binder.ts - opened a terminal and typed ""npm uninstall iconv-lite""  Can you find a reproducible case with that workspace? Does it reproduce with VSCode insiders release (http://code.visualstudio.com/Download#insiders)?"
15983|What I do is: Open a file under the folder that you are going to delete. e.g. open `/build/a.js` and then delete `/build`
15984|I am able to reproduce now, it seems related to opening a JS file.
15985|@vsccarl I see this now as well, lets continue in #4578
15986|Also TS files. My files are TS
15987|@dbaeumer I can reproduce easily: - open a project with node_modules folder (e.g. typescript) - as soon as I open any JS or TS file, I cannot move the node_modules folder anywhere because it is used/locked - I can move however when I did not open a TS/JS file - also, when I disable TS/JS by setting the tssdk variable to bogus I can move  It seems either TypeScript and or Salsa lock files in node_modules again (I remember we had the issue before in https://github.com/Microsoft/TypeScript/issues/6337)  Please advise what to do, I think this is very bad.
15988|Addition: Not only in `node_modules`. The folder containing the file you are opening is also locked.  Feel free to update the title of this issue.
15989|"I started to look at this one (because it's something I really wanted), but found there is a setting (`""explorer.workingFiles.maxVisible"": 50`) that handles it perfectly. Personally, I don't think this feature should be implemented."
15990|Without any add-ons, full-fat Visual Studio's block indentation (with tabs as spaces) solves most of the problems because, if you are indented and add a new line, a single back-space is all that is required to jump out one indentation level. As it stands, VS Code handles this poorly - if you use soft tabs and need to get out by one indentation level, you have to press backspace n times where n is your tab width!
15991|@egamma: Thanks for suggesting that extension - it's properly brilliant! I hope the VS Code devs are reading this thread because I would love to see that behaviour as a first-class option or even the _default_ behaviour of the backspace key when soft-tabs are enabled.
15992|@stephenmartindale, it's not just backspace, but arrow-key navigation as well. The [TabSanity](https://marketplace.visualstudio.com/items?itemName=jedmao.tabsanity) plugin resolves both, but there are some kinks with multiple cursors I haven't yet had the time to sort out.
15993|First time I see this, thanks for the dig. I can look into it.
15994|Make sure you configure your [proxy explicitly](https://code.visualstudio.com/docs/supporting/faq#_proxy-server-support).
15995|@rebornix multiline output should be possible using the [output event](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L119). If each line ends with a `\n` we will nicely split them on the vscode side.  If it does not work as expected feel free to create a new issue
15996|cc @jrieken
15997|What git version are you using?
15998|fyi @weinand
15999|This is expected.  If you do the rename using the Windows Explorer and run `git status` they will also show as deleted and added files. It's just how git works. Once you commit, rename detection will occur and it everything will be logged as renames by git.
16000|We're currently using the HTML formatter from https://github.com/beautify-web/js-beautify. Maybe you can file your request (which I think is reasonable) there as well.
