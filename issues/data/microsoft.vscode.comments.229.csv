22801|I just noticed I have installed clip-x: that's a Windows app which keeps the clipboard history.  I don't think I have any VSCode extension that interacts with the clipboard.  I have disabled Clip-X to see if it's causing the problem (I noticed that when I encounter the bug, I have an empty entry in clip-x).  Then I'll start VSCode with extensions disabled if I'm still having the problem.
22802|@edumunoz here are my answers to the questions from above: - it is possible to pass the selected launch config section to the pick action. I had planned this anyway. - local vs. remote: why make this decision in the pick process? The launch.json could have two launch configs, one for the local and one for remote case. For this it would use a `${action.PickProcess}` and a `${action.PickRemoteProcess}`. Your extension would implement two pick commands for this. - having more than one action in the active launch.json entry: yes, we will pass the launch config. - launching the pick action via the command palette: only if we cannot make these actions invisible will the user be able to run the action, but the result will go to /dev/null anyway. - How is the result string communicated from the debug adapter to VSCode? The string is not communicated back from the debug adapter, but from the picker command running in the extension (host). These are different processes. The string (pid etc.) becomes the command's result. Since VS Code is running the command as part of the start debug session action, the result can be assigned to the system variable and then the substitution mechanism will place it in the launch config.
22803|fixed with https://github.com/Microsoft/vscode/commit/0ac95a8f1d3b831349018669bdd7bc31fa3efe37
22804|It is possible to invoke a task (build command) before launching, for instance you can use `preLaunchTask` in your `launch.json`. More details can be found here https://code.visualstudio.com/docs/editor/debugging  Automatically invoking any vscode command before starting debug is currently not supported.
22805|It is not possible to implement this behavior by an extension. Jump to error by doudble clicking error message is built in vscode. However not all formats of errors are supported, so some error paths are not detected. Please search our github issue history since there are multiple issues already opened about jump to error for more details.
22806|Yep, it most likely is the auto whitespace removal, after pressing Enter the line number 2 is marked as containing auto-whitespace. The next edit is on line 1, so the model assumes the auto whitespace on line number 2 is safe to remove (it assumes the user voluntarily edited line number 1 and doesn't care anymore about line number 2).  Except this was not a voluntary edit, it was an auto format edit...
22807|@jrieken where does the folder 'etc' come from?
22808|I have no clue, maybe @aeschli knows?
22809|I have merged the configurations as Joh suggested. Notice that for maxVisible having a negative value I still show the open editors seciton - not sure if that is the desired behavior or I should just treat that as 0. I want the hide thing to be explicit so the user could not get it hidden by accident.
22810|added the `.vscode` folder with https://github.com/Microsoft/vscode-extension-samples/commit/e08c1d4bc04ac74e998217c3ae2344bc889dc045
22811|This is now fixed, as the first launch config is not launched but the action is just ignored. There is still issue #6809 that errors are not propagated properly - looking into that one now
22812|Currently the command returns the errors, after consulting with Joh it is the extensions responsibility to handle this error in any way the extension writer wants. Closing as designed. More details:  ![screen shot 2016-05-25 at 11 39 38](https://cloud.githubusercontent.com/assets/1926584/15535401/7b2d12a0-226d-11e6-903b-57788d5aaa2f.png)
22813|I still very much like this change because it makes `--verbose` much easier to use. I think in any way you would see the chrome output. There is `ELECTRON_ENABLE_LOGGING` but that does not seem to have any impact.
22814|Thanks, I merged your PR and assigned @joaomoreno to verify.
22815|@isidorn What error is returned if attribute 'type' is missing?
22816|What do you mean in any way?
22817|@joaomoreno so far if you wanted to use --verbose you would have had to launch from the executable location and that would give you the chrome output too.
22818|"@isidorn just make sure that the error message passed to the following error handler is something like ""launch config 'foobar' doesn't exist"":   ``` ts     vscode.commands.executeCommand('vscode.startDebug', 'foobar').then(() => {         vscode.window.showInformationMessage('OK!');     }, err => {         vscode.window.showInformationMessage('Error: ' + err.message);     }); ```"
22819|With the commit I just pushed it returns a proper error message ðŸ˜Š  ![screen shot 2016-05-25 at 11 53 32](https://cloud.githubusercontent.com/assets/1926584/15535893/80d48448-226f-11e6-8c64-c7ae15b95dcf.png)  Maybe we should tune the error message such that it does not refer to `launch.json`
22820|"This is what I see under Windows:  ``` running command> echo p:\mseng\VSCode\Playgrounds\tasks\.vscode\tasks.json, tasks.json ""p:\mseng\VSCode\Playgrounds\tasks\.vscode\tasks.json, tasks.json"" ```  Checking under Linux now."
22821|"The tasks.json is:  ``` json {     // See http://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format     ""version"": ""0.1.0"",     ""command"": ""echo"",     ""isShellCommand"": true,     ""echoCommand"": true,     ""args"": [""${file}, ${fileBasename}""] } ```  Note that the var for the basename is ${fileBasename}"
22822|"You're right, VsCode seems to work since this morning. I changed my password there was probably some network cache issue... I've got access to the Store Extension  Still I encounter something funny : On the computer I got vs2013.5 vs2015.2, vsCode (latest rtm) I've installed the .NetCore 1.0.0 Preview 1 (NetCore RC2 + Tooling CLI preview) online ""cli-samples"" does not works (some work & some don't) New templates created from VStudio Works from VS & Command line but not on VsCode I'm wondering if the issue comes from Nuget/Omnisharp or something else when everything is linked together  As you see in the picture it's attempting to connect to the Project instead of nuget ^^  ![image](https://cloud.githubusercontent.com/assets/2266487/15536163/7a8946a4-2270-11e6-958f-8d62f6c47951.png)"
22823|Same is true for Linux (Elementary OS).   ![capture](https://cloud.githubusercontent.com/assets/1931590/15536341/394a6d8e-2271-11e6-8b3e-82c47b74d8ae.png)
22824|I am closing the issue. Please ping with steps to reproduce if you still see this.
22825|We get the base name using and node function which should be independent of the Linux you use. That is why I closed it. To double check you could execute the following snippet in a node environment:  ``` js var path = require('path'); path.basename('/home/dirkb/test.txt'); ```  This should print:  ``` 'test.txt' ```
22826|Not really sure who owner is... cc @bgashler1 @aeschli @jrieken
22827|That is an issue with either Nuget or the dotnet tooling... I suggest you file an issue to them instead.
22828|Closing this discussion as everything's been said.
22829|I am getting the same issue with editing typescript ts and tsx files. Restarting the VS Code helps in some cases.  This is the text from the Output view:  Sending request: quickinfo (5255). Response expected: yes. Current queue length: 0 Response received: quickinfo (5255). Request took 26 ms. Success: false . Message: No content available. Sending request: definition (5256). Response expected: yes. Current queue length: 0 Response received: definition (5256). Request took 27 ms. Success: false . Message: No content available. Sending request: format (5257). Response expected: yes. Current queue length: 0 Response received: format (5257). Request took 4 ms. Success: false . Message: Error processing request. Debug Failure. False expression:
22830|The issue is stupid URI math we do here: https://github.com/Microsoft/vscode/blob/master/extensions/typescript/src/utils/projectStatus.ts#L103. The path we simply concat contains a `#` and therefore becomes a fragment path.
22831|and also the `with` methods we have on the underlying type such that uri can be modified nicely. This might prevent some issues when path/uri-math happens
22832|We should consider adding more uri modification methods (#6678) such that we don't run into this so easily...
22833|That works. When I tested bin/code before, I had other vscode instances running
22834|@alexandrudima knows - we have a few dups by now ;-)
22835|338f9523fa0559d279062a72d302c34eb7c144f2
22836|edf993f4aa2826505db3cac3481b8d37aadf8ffc
22837|We actually would color them but the problem is that definition ranges get folded to their start position. That's because TypeScript selects the full type range not just the identifier when finding a definition...
22838|"<img width=""532"" alt=""screen shot 2016-05-25 at 13 12 18"" src=""https://cloud.githubusercontent.com/assets/1794099/15538091/5849323e-227a-11e6-98a9-ff8f308c9d4d.png"">  it would look like this..."
22839|@dbaeumer do you know if TypeScript is doing that on purpose of by accident?
22840|- Folder/Directory - Event (#5407)
22841|#2628
22842|Waiting for linguistic input.
22843|moving out further cos error telemetry isn't there yet
22844|"Actually I'm guessing it's the value that's returned from the `which git` command that is varied for some reason.  I just stepped through the code while it's working and the `which git` command is returning `/usr/local/bin/git` as expected which bypasses the call to `xcode-select -p`.  I'm guessing that for some reason the path isn't always correct when the automator script runs.  I've added a command to my automator script to set the PATH variable every time it runs which seems to have resolved the issue from what I can tell.  Here is what my script looks like now:  ``` export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin /usr/local/bin/code ""$@"" ```"
22845|"This simple example doesn't work either:  ``` json {     ""version"": ""0.1.0"",     ""command"": ""bash.exe"",     ""isShellCommand"": true,     ""showOutput"": ""always"",     ""echoCommand"": true,     ""args"": [         ""-c"", ""echo Hello World""     ] } ```  it produces:  ``` 'bash.exe' is not recognized as an internal or external command, operable program or batch file. ```  Looks like bash is not known in an spawned cmd.exe.  Interestingly executing this in a command prompt  ``` cmd.exe /s /c bash -c ""echo Hello World"" ```  works"
22846|"Trying this  ``` json {     ""version"": ""0.1.0"",     ""command"": ""C:\\Windows\\System32\\bash.exe"",     ""showOutput"": ""always"",     ""echoCommand"": true,     ""args"": [         ""-c"", ""echo Hello World""     ] } ```  doesn't work either. It prints:  ``` Failed to launch external program C:\Windows\System32\bash.exe -c echo Hello World. spawn C:\Windows\System32\bash.exe ENOENT ```"
22847|I'm also puzzled by the occasional showing up of the etc folder.
22848|"This is either a node problem or a general bash problem. Trying  ``` js var cp = require('child_process');  cp.exec('bash -c ""echo Hello World""', function(error, out, err) {     if (error) {         console.log(error);     } else {         console.log(out);         console.log(err);     } }); ```  doesn't work either in a native node environment.  No further action planned for May. Need to see if spawning bash from a different programming language (e.g. C#) works"
22849|This is happening because the php adapter is first sending a `stopped` event before the response for `step` returns. I have created an issue for the PHP adapter here https://github.com/felixfbecker/vscode-php-debug/issues/37 Previously we had a workaround that would prevent this issue, but we have remoed this workaround due to other issues https://github.com/Microsoft/vscode/issues/5966
22850|Closing as invalid. The selection on doubleclicking is configured in the 'editor.wordSeparators' setting.
22851|"I've used this command  ``` sh g++ -pthread -std=c++11 -g threads.cpp ```  to compile this program:  ``` C++ #include <iostream> #include <cstdlib> #include <pthread.h> #include <unistd.h> #include <string.h>  using namespace std;  #define NUM_THREADS   5 #define LOOP false  void *wait(void *t) {     long tid = (long)t;      do {         sleep(1);         cout << ""Sleeping in thread "" << tid << endl;     } while(LOOP);      return NULL; }  int main () {     int rc;     long i;     pthread_t threads[NUM_THREADS];     pthread_attr_t attr;     void *status;      // Initialize and set thread joinable     pthread_attr_init(&attr);     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);      for (i= 0; i < NUM_THREADS; i++) {         char buf[20];         sprintf(buf, ""Thread %d"", (int)i);         rc = pthread_create(&threads[i], NULL, wait, (void*) i);         if (rc) {             cout << ""Error: unable to create thread,"" << rc << endl;             exit(-1);         }         pthread_setname_np(threads[i], buf);     }      // free attribute and wait for the other threads     pthread_attr_destroy(&attr);      for (i= 0; i < NUM_THREADS; i++) {         rc = pthread_join(threads[i], &status);         if (rc) {             cout << ""Error:unable to join,"" << rc << endl;             exit(-1);         }         cout << ""Main: completed thread "" << i <<  ""with status "" << status << endl;     }      cout << ""Main: program exiting."" << endl;      pthread_exit(NULL); } ```  Setting a breakpoint on line 18 nicely shows that all threads are stopping when the breakpoint is hit, and all continue on the 'continue' command."
22852|@seanmcbreen Joh mentioned that you've already verified this. If this is correct please set your checkbox and close this item.
22853|@jrieken actually I don't know. I see the need for both. So instead of convincing them to change this I would try to convince them to add the identifier range and the full declaration range.  One reason I can think of having the full range is that types don't need to have names. So no identifier range.
22854|Actually I looks like the tsserver 'lost' the content of the file.
22855|![screen shot 2016-05-25 at 12 42 53](https://cloud.githubusercontent.com/assets/1926584/15537633/eca98c4c-2277-11e6-94f3-075d2bc64442.png)  It seems aligned now to me, but the right border seems to be thicker -> postponing to June
22856|Should have taken 'insertSpaces' and 'tabSize' from model.  We removed the feature that 'Configure File Association' adds a settings string due to the unresolved issues with the configuration open in a dirty editor.
22857|@Brakkar Can you paste the html snippet here?
22858|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/81
22859|@arixse Please add more details...
22860|Extending the protocol is easy. But before we do this we need some evidence that debug adapters can actually provide that information. In case of node.js I do not see a way to provide source and line information. `console.log()` statements in the debuggee result in information sent to stdout (or stderr) which is picked up by the debug adapter and sent as OutputEvents to VS Code. The debug adapter has no way to add source and line information by itself. Only an enhanced version of `console.log()` in the debuggee could get source and line position from the callstack and add this to the output data.   @roblourens, @felixfbecker, @rebornix could you provide source and line information for anything sent as OutputEvents?
22861|"```                 <div class=""form-group"">                     <label for=""exampleInputEmail1"">link source language:</label>                     <select name=""linkSourceLanguage"" class=""form-control"">                         <option value=""{javascript}"" selected=""selected"">Javascript</option>                         <option value=""typescript"">Typescript</option>                         <option value=""java"">Java</option>                         <option value=""python"">Python</option>                     </select>                 </div>                  <div class=""form-group"">                     <label for=""exampleInputEmail1"">link target language:</label>                     <select name=""linkTargetLanguage"" class=""form-control"">                         <option value=""javascript"" >Javascript</option>                         <option value=""{typescript}"" selected=""selected"">Typescript</option>                         <option value=""java"">Java</option>                         <option value=""python"">Python</option>                     </select>                 </div> ```"
22862|"[`onWill|onDidExecuteCommand`] is tracked here: #1431"
22863|@Brakkar we cannot really close the file with user changes because that would mean data loss. We could however maybe ask the user what to do if we detect this case.
22864|This is because TypeScript is locking folders.
22865|Yes, would be good and if user agrees, the file should be truly removed from editor as well as all browser tree areas. Tks.
22866|Fixed as suggested.  SRC: Peek Definition TGT: Apercu de dÃ©finition
22867|No, I only read stdout/stderr stream. And that is only for CLI apps, webapps don't even have stdout/stderr
22868|@Merott Would the existing `cursorUndo` (`cmd+u`) do the trick? (it also works in other contexts)
22869|I agree, but I also did not implement this feature. If my memory is good I think @bpasero implemented the preview of the definition.
22870|By analyzing the blame information on this pull request, we identified @egamma and @alexandrudima to be potential reviewers
22871|Hi **@marvinhagemeister**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
22872|for may we will add an option to disable word based suggestions. dupe of #5574
22873|What kind of workspace is it? (How many files, which languages (eg php, typescript, c#))
22874|@kieferrm I could not reproduce with node 6.0, 6.1, 6.2 on WIndows 10 (Parallels VM):  ![jf2xitkf0x](https://cloud.githubusercontent.com/assets/1898161/15543260/78c35dae-2294-11e6-9074-437fec4c3eb0.gif)  Is there anything I am doing differently?
22875|@alexandrudima I am relying on `tokenizeToHtmlContent` : https://github.com/Microsoft/vscode/blob/ben/stacks/src/vs/editor/contrib/goToDeclaration/browser/goToDeclaration.ts#L376
22876|Found out how this can happen: reload the vscode with editors open and then do the git operation, it fails to clean up!
22877|To rule out that Parallel is the reason for the difference, I just tried to reproduce on a Lenovo X Carbon laptop with Window 8 and node.js 6.2. But again, breakpoints are reliably hit and I never missed any.
22878|Fixed :)
22879|**@marvinhagemeister**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
22880|I agree, this would be a useful addition.  Currently in the Mac version, it's only possible to rename files by focusing to the Explorer sidebar, moving up or down to the current file, and pressing Enter to edit the name.
22881|I found the difference:   I run in a VM. When I have the source in the window file system everything works fine and the break point is hit. When I have the source on the Mac (which is transparently mounted  as a windows drive) then - playing exactly the same scenario - the break point is not hit.  This seems to suggest that this is either a timing issue or some kind of line delimiter issue. If it's a timing issue I wonder if people using code on mounted network drives etc. could experience it too.
22882|@kieferrm I suspect this is a UNC file path issue.
22883|@jrieken perhaps a configurable option to always have them on top/bottom/auto would satisfy everyone?
22884|Would love this feature! We regularly share code, and it would be much easier to read/understand if there's color coding and indentation.
22885|@alexandrudima It does the trick, I didn't know the command existed.  I wonder though, is there still a case for this feature? I guess with a dedicated command, you could keep pressing or hold a shortcut to undo all selections, although that doesn't seem very useful, and you could do the same with `esc` anyway. I can't think of any use cases where `cmd+u` won't do the trick - I'm trying. I think I may be concluding that this issue may be moot.  The only real benefit is probably that it will be easier to find and more appropriate as a dedicated command. The fact that there is a [question on SO without answers](http://stackoverflow.com/questions/36613291/undo-editor-action-addselectiontonextfindmatch) is an indication that this is not easy to figure out.
22886|Why not try an extension? Try https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils
22887|I got this working without any issues when answering his So question. http://stackoverflow.com/a/37378311/1156119  Windows 10 64 bit, just installed. I have a feeling now that it would have been git bash that it was actually running in.
22888|@alexandrudima is this related with your recent work? It seems that the scrollbar crops the suggestions.
22889|I believe I was tagged on this accidentally.  @kieferrm  is similar to @kieferm
22890|Awesome!
22891|Thanks for the help in this @aeschli. I was able to simplify the render and splice methods much more; from 319 loc to 272! Feels much better to reason about too. Also ended up dropping the diff algorithm and just unrender and render everything, like you suggested.
22892|This has been the behaviour since inception.  Even after staging, you can make further changes in `url.ts`. Thus, there is a need for 3 models: the HEAD version, the index version (staged) and the working tree version. The first two are in memory.  What is the real issue here?
22893|"UX meeting outcome: we think we should provide a setting that allows a user to decide where new editors open. We need this already for tabs (to the right of active editor, to the left of active editor) and we could just let this be an enum with more values (to the beginning of all editors, at the end). Setting this to ""at the end"" would restore pretty much how working files used to behave."
22894|Alright, good to know. I will close it since it seems this is very specific to your system.
22895|"Summary from the UX meeting regarding the concerns: - we will fix the double click issue without having to hide the preview tab (https://github.com/Microsoft/vscode/issues/6749) - we will provide an option to configure sorting behaviour of new editors (https://github.com/Microsoft/vscode/issues/6787) - we would like to test out the italics experience even when tabs are disabled to see if we can get used to it.  That way we think having preview tab in ""opened editors"" is really not a bad thing to have."
22896|"Small update from ux meeting, we think ""edt"" is better than ""editor"" because faster to type. We already use short form ""ext"" for extensions."
22897|"@kieferrm I've verified that this is in fact a UNC path issue.  The following screenshot shows that node.js reports the file path for the 'debugger' statement back with a UNC path (green border), which VS Code opens in read-only mode in the editor (see the bogus ""core module"" detail at the end).  But the breakpoint is registered with a driveletter path (red border in the tracing information).   ![2016-05-25 18-19-31](https://cloud.githubusercontent.com/assets/1898161/15547761/8a436a40-22a5-11e6-8121-72b6419b0d47.png)  When registering breakpoints in node.js we already use a regular expression to account for drive letter casing differences, but we do not yet handle the UNC vs. drive letter difference.  I will close this issue (because with this finding the title has become misleading) and create a new bug."
22898|"Outcome from the UX meeting: - we will shorten the names of the actions when they appear in their context   - editor: close, close others, (close all?)   - editor shown as tab: additionally ""close left"", ""close right""   - group: move left, move right, close all - we will drop actions that target other contexts (no close all groups, close other groups in the context of editors or groups)"
22899|@isidorn moving to you so that we address this very specific to the explorer problem: can we play around with a delay that only applies when you click from the explorer that allows me to still double click without the thing moving down?
22900|Thanks @weinand
