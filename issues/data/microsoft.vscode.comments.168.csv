16701|Dupe of https://github.com/Microsoft/vscode/issues/4809
16702|Maybe people have configured some special git credential helper that causes this?
16703|"@donaldpipowitch what about the action ""Find in Folder"" from the context menu in the explorer on folders?"
16704|"@edgr-sanchez can you open the ""Console"" application on Mac and find the crash dump? It should look like this:  ![image](https://cloud.githubusercontent.com/assets/900690/14344031/51a5389c-fca5-11e5-957d-36f1be9d3d10.png)"
16705|closing as designed, given the workarounds.
16706|@v-codeel we always include textual completions in code complete (e.g words that are in the document). We find this useful in strings and comments. Are you proposing not to show them? They are marked with an icon 'abc' to indicate that they are textual completions only.
16707|@WangJi the recommendation is to use a linter like eslint pls see https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/vFebruary.md#linters
16708|This is configurable in the tasks.json file. Depending on the value of the showOutput property the output window might not come to front when building. This is useful if you have a problem matcher associated which scans the output. Then the result is in the markers and there is no need to look at the output. If you use tsc in the tasks.json then the default for the output window is silent which only brings the output window to front if something 'critical' is happening when running the task (e.g. for example the command can't be found)
16709|funky. I see it a little when resizing because the webview-body isn't styled, only the iframe. Maybe a resize event got lost - didn't make it to the iframe...
16710|fyi @egamma - that's what we see with C++ a lot
16711|There is another issue where the background color of a webview is always white. I think this got fixed in newer versions of Electron though and might help us: https://github.com/electron/electron/releases/tag/v0.37.3
16712|@benlowry starting with the April release we only truncate strings that are longer than 10000 characters.
16713|@bpasero @alexandrudima  I looked at the code and it looks like the resolving of a key binding to a user presentable string is done in keytCodes.ts and none of the code there is externalized (ElectronAcceleratorLabelProvider). Is this in oversight ?
16714|"What is happening is that VS Code registers `.es6` files as JavaScript files and Code sends them over to the tsserver. Inside the tsserver `.es6`are not treated as JavaScript files but as TypeScript files. For this reason you get the additional errors.   One work around is to disable the error diagnostics from the tsserver for js files in the settings: `""javascript.validate.enable"": false`. When you do so you should really setup eslint to get javascript diagnostics https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/vFebruary.md#linters.  Moving to TypeScript, there should be a way to configure that `.es6` files need to be treated as JavaScript files. If VS Code doesn't send .es6 to the tsserver then the user doesn't get Intellisense and only coloring."
16715|"You have configured the tsc compiler to output absolute paths (I think by listing the files in the files sections). If you do this then you have to tell the problem matchers to match absolute pathes as well. You can do so by changing the tasks.json as follows:  ``` json     ""problemMatcher"": {         ""base"": ""$tsc"",         ""fileLocation"": ""absolute""     } ```  ![capture](https://cloud.githubusercontent.com/assets/1931590/14345013/12004546-fcab-11e5-8404-23f20c029ef0.png)"
16716|This issue was moved to Microsoft/TypeScript#7926
16717|Moving to TypeScript for investigation.
16718|This issue was moved to Microsoft/TypeScript#7927
16719|This happens when the tsdk is configured to a non exising tsserver.
16720|Duplicate of https://github.com/Microsoft/TypeScript/issues/6997 also see this comment https://github.com/Microsoft/TypeScript/issues/6997#issuecomment-184509014.  If you are on the insiders build then the work around is to disable the JS diagnostics from Salsa and to use eslint https://github.com/Microsoft/TypeScript/issues/6997#issuecomment-201721683.  [insiders build](https://code.visualstudio.com/blogs/2016/02/01/introducing_insiders_build) http://code.visualstudio.com/insiders
16721|@isidorn I move this to you since it is prelaunch related. Is this an error reported by the task or is this message referring to the error count in the status bar ?
16722|It is a change, sorry. The recommendation is to use eslint and the vscode-eslint extension to get JS diagnostics. Pls see https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/vFebruary.md#linters.
16723|@bill-mybiz I think it is a mismatch of the external tsc command you are using and the tsserver. When you run tsc -version what is printed. If this is not 1.8.9 please upgrade tsc to version 1.8.9.  I am closing this because it is very likely a version mismatch between the external compiler and the internal TS service.  @bill-mybiz please ping if the versions are the same.
16724|"Two things:  - we are working on allowing to input command names in English as well. - you can configure the language by either starting vscode with --locale=""en"" to switch back to English or by running ""Configure Language"" and edit the corresponding file."
16725|"@thomas-darling Does it help to disable the built-in CSS validation using `""css.validate"": false` and then use one of the CSS linter extensions, e.g., https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint?"
16726|@jandrieu Have you open an issue in Node repo? Can find it and this issue is a major PITA.
16727|Moving to TypeScript for investigation
16728|Thanks!
16729|This issue was moved to Microsoft/TypeScript#7928
16730|@minggo to my knowledge you can't right now. But moving to TS. May be they have an idea.
16731|This issue was moved to Microsoft/TypeScript#7929
16732|This is fixed in the insiders build 0.10.14  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
16733|@dbaeumer If i can extend TS, then how to make it take effect in VSCode?
16734|This is how the TS server currently resolved. IMO the behavior is 'technically' correct but not very user friendly. IMO the tsserver should either: - offer a flag to control that - resolve the definition to the 'implementation' if the import doesn't rename the symbol - jump to the import if it does rename the symbol.
16735|This issue was moved to Microsoft/TypeScript#7930
16736|You need to extend the code completion request and do you own computation by either providing an extension and parsing the JS code yourself and computing completion items (you might want to look at the vscode documentation for how to write an extension here: https://code.visualstudio.com/Docs ) or by providing a different tsserver.
16737|"@ogasawara-k can you attach a s/s indicating both ""none"", ""one"" and this long string? It makes sense to keep them consistent"
16738|This issue was moved to Microsoft/TypeScript#7931
16739|"> Removing the jsconfig.json file fixed the issue (but it also took away all the benefits ;) )  How did the `jsconfig.json` file look like when intellisense did not work?   If you have no `jsconfig.json` then the `node_modules` folder is excluded by default. Does this work:  ``` {   ""compilerOptions"": {     ""target"": ""ES6"",     ""module"": ""es2015"",     ""experimentalDecorators"": true   },   exclude: [""node_modules""]    } ```"
16740|I know VSCode extension, but it seems too complicated for me to do as good as VSCode internally. As i know, VSCode internally also depend to TS parser to provide code completion. Can i just extend the TS parser internally?
16741|> if salsa can indeed be disabled by setting javascript.validate.enable: true then why does the use of decorators still say...  Interesting, pls file a separate issue with a repro snippet on this. What file suffix are you using?
16742|[virtual-0.0.1.zip](https://github.com/Microsoft/vscode/files/208048/virtual-0.0.1.zip)
16743|Would love to have SQL syntax highlighting throughout my projects. Currently I always write my SQL in a separate file with syntax highlighting, then copy it into my project where it needs to go. In VS Code it's just highlighted as a normal string, so very hard to catch errors and whatnot.
16744|I actually don't understand what you mean. It seems to me no different than with other editors. Need to see when we are both in
16745|strech for April - fyi @seanmcbreen
16746|@jrieken yup I can show you. I am seeing general issues with the fact that the webview seems to be on top of everything: - for a normal editor (slot 2) I can click on the sash a few pixels left and right of the sash to grab and drag it but when the webview is there, I cannot click the sash as soon as my mouse enters the webview (in other words, the total clickable area for the sash is half compared to a normal editor where the sash is just on top of both editors left and right)
16747|Steps to reproduce: - Insert  DatenSätze^^ - TAB   -> DatenSä<tze></tze>  I've reproduced it in several emmet integrations (sublime, atom), so this an emmet issue. I've filed https://github.com/emmetio/emmet/issues/439 against emmet.
16748|I do not think we control how Electron presents the key bindings in the menus.
16749|FYI @asthana86
16750|FYI @asthana86
16751|FYI @asthana86
16752|To verify (Windows only): - you can open relative paths from the command line (files and folders) and things work as expected - try to execute some native things to see if you can find regressions (tasks, debug, reveal in explorer, open in command prompt, etc.)
16753|@eByte23 do you run with or without extensions? on what platform are you? did you try with insiders release?
16754|Current  ![default](https://cloud.githubusercontent.com/assets/16556202/14347457/226da5da-fcf2-11e5-8d4c-536795661a50.png)
16755|@johnliu2016 attached Screen-Shot
16756|@bpasero Win10 & OSX with C# as extension. Have tried insiders but have not noted if it crashed as there is a tabbing bug so I stopped using it but I can leave it running over night to try to repro.
16757|another ![p2](https://cloud.githubusercontent.com/assets/16556202/14347999/cc3b83be-fcf4-11e5-826b-6b03fa1202ea.png)
16758|Got it. I didn't read the update log carefully.
16759|Yes, because the editor updates the DOM at the next animation frame. I will make a change to update the DOM in case of a theme change synchronously.
16760|> How did the jsconfig.json file look like when intellisense did not work?  [Like this](https://github.com/Microsoft/vscode/issues/4974#issuecomment-206582529)
16761|I've also found that just keeping an **empty** file of the name `jsconfig.json` kills autocomplete completely, snippets included.
16762|"@ogasawara-k Thanks for the screenshots.  ""none"" and ""one"" are over-localized, this repro for chs, cht, deu, jpn, kor, rus. @Lukaschal Please revert the translations in following LCL file (e.g. of JPN)  https://monacotools.visualstudio.com/DefaultCollection/Monaco/_git/MonacoLocalization?path=%2FLocalize%2Fjpn%2Fvscode%2Fsrc%2Fvs%2Fworkbench%2Felectron-browser%2Fmain.contribution.nls.resx.lcl&version=GBmaster&_a=contents  <Item ItemId="";reopenFolders"" ItemType=""0;.resx"" PsrId=""211"" Leaf=""true"">         <Str Cat=""Text"">           <Val><![CDATA[Controls how folders are being reopened after a restart. Select 'none' to never reopen a folder, 'one' to reopen the last folder you worked on or 'all' to reopen all folders of your last session.]]></Val>           <Tgt Cat=""Text"" Stat=""Loc"" Appr=""PreApproved"" Orig=""New"">             <Val><![CDATA[再起動後にフォルダーを再度開かれている方法を制御します。[なし]5D; を選択するとフォルダーを再度開くことはありません。[1 つ]5D; を選択すると最後に作業したフォルダーを再度開きます。[すべて]5D; を選択すると前回のセッションのフォルダーすべてを再度開きます。]]></Val>           </Tgt>         </Str>"
16763|"ElectronAcceleratorLabelProvider correctly does not use nls localize because these strings are passed to electron which then parses them:  https://github.com/electron/electron/blob/e05804848f98959d63337aacd9047cd579c5b23f/atom/common/keyboard_util.cc#L86  ``` c++ // Return key code represented by |str|. ui::KeyboardCode KeyboardCodeFromKeyIdentifier(const std::string& s,                                                bool* shifted) {   std::string str = base::ToLowerASCII(s);   if (str == ""ctrl"" || str == ""control"") {     return ui::VKEY_CONTROL;   } else if (str == ""super"" || str == ""cmd"" || str == ""command"" ||              str == ""meta"") {     return ui::VKEY_COMMAND;   } else if (str == ""commandorcontrol"" || str == ""cmdorctrl"") { #if defined(OS_MACOSX)     return ui::VKEY_COMMAND; #else     return ui::VKEY_CONTROL; #endif   } else if (str == ""alt"" || str == ""option"") {     return ui::VKEY_MENU;   } else if (str == ""shift"") {     return ui::VKEY_SHIFT;   } ```  it is then Electron that renders them in the top level menu without any control from our side."
16764|I will do that when it happens again.
16765|On opening a new folder with code, it seems to be working _as expected_ - the autocomplete seems to be coming as well as the snippets. Suddenly I'm really at a loss why it's not working with my actual project folder... - There is no project-level setting - There are **885** first-level folders in the `node_modules` directory on account of me using npm@3 - ... i don't know... :disappointed: I'll keep looking
16766|"@johnliu2016  and ""all""  are over-localized,"
16767|Thank you @prashantv   Added `white-space: pre-wrap` and here is how it looks for the error message:  ``` [13:00:34] [check semantics] /src/features/referenceProvider.ts     [13:00:34] [check semantics] /src/features/previewer.ts     [13:00:34] [check semantics] /src/features/hoverProvider.ts     [13:00:34] [check semantics] /src/features/formattingProvider.ts [13:00:34] [check semantics] /src/features/documentSymbolProvider.ts         [13:00:34] [check semantics] /src/features/documentHighlightProvider.ts [13:00:34] [check semantics] /src/features/definitionProvider.ts         [13:00:34] [check semantics] /src/features/configuration.ts [13:00:34] [check semantics] /src/features/completionItemProvider.ts         [13:00:34] [check semantics] /src/features/bufferSyncSupport.ts [13:00:34] [check semantics] /src/typescriptServiceClient.ts ```  BEFORE: ![image](https://cloud.githubusercontent.com/assets/5047891/14349239/f681bdc4-fcc1-11e5-9cdc-04cbdd850645.png)  AFTER: ![image](https://cloud.githubusercontent.com/assets/5047891/14349261/111fc680-fcc2-11e5-8ba5-993e4e5228ac.png)
16768|"I can reproduce this problem in 0.10.14-insiders and with errors as well as warnings.  In my case, I have written a custom problem matcher. In my project folder, I have a host application and a web application and they both use TypeScript and have their own `tsconfig.json` and `gulpfile.js`. Errors are relative to whichever one I am building. For example, my problem matcher for the web sub-project looks like this:  ``` {                 ""owner"": ""gulp"",                 ""fileLocation"": [""relative"", ""${workspaceRoot}/web""],                 ""pattern"": {                     ""regexp"": ""^(.*?\\.[dD]\\.[tT][sS]|.*?\\.[tT][sS])\\((\\d+)\\,(\\d+)\\)\\:\\s*(warning|error)\\s*(TS\\d+)\\:\\s*(.*)$"",                     ""file"": 1,                     ""line"": 2,                     ""column"": 3,                     ""severity"": 4,                     ""message"": 6                 }             } ```  I experimented with various values for the `owner` property, including `undefined`, `typescript` and `gulp` (something I guessed wouldn't match any built in name) and, for all of them, some sort of weird behaviour can be observed. With `gulp`, errors are duplicated when I am actually on the file that has errors - presumably because the editor is raising its own - but, for all of them, navigating between files in the project eventually (not always after the first change of file) causes the errors to be lost."
16769|GitHub auth is NOT related to GPG-signed commits if I know right.
16770|+1
16771|"Thanks @ogasawara-k, @Lukaschal ""all' also over localized in the same languages as ""none""/""one"""
16772|@alexandrudima thanks man! <3
16773|I think we have to distinguish between Electron menu and hover: In the hover imho we can provide translated labels, for Electron we should follow up with them. I found https://github.com/electron/electron/issues/1632 though I cannot remember we talked to them about this?
16774|@eByte23 yes please. what tabbing bug?
16775|Some people might want to write snippets for comment content. We don't want to prevent that. Closing.
16776|Did my suggested jsconfig.json help in your existing project? https://github.com/Microsoft/vscode/issues/4974#issuecomment-206768115  The empty excludes array is wrong and you must exclude the node_modules folder and may be others, pls see https://github.com/Microsoft/vscode-docs/blob/vnext/docs/languages/javascript.md#excludes
16777|@bpasero seems to be in last two releases of insider with display whitespace on and convert tabs to white space with a file with existing tabs it seems to keep tabbing and not write spaces even on new lines.  I hadn't had a chance to do full testing but I shall do that now.
16778|Subsumed by https://github.com/editorconfig/editorconfig-vscode
16779|You can associate file extensions to modes with our 1.0 release.  You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
16780|This is now available.
16781|#58
16782|This should be done as an extension using the new preview html command.
16783|@SamVerschueren does #58 help you?
16784|@seanmcbreen If you have enough themes to fill a page, the `Find more...` will not be in view and the user will need to scroll down to see it. Should we put it at the top?
16785|@dbaeumer That does indeed seem to be the case.   It seems that in troubleshooting the previous Salsa+TypeScript issue, we switched to a newer version of node and didn't have TypeScript installed globally. So even though TypeScript is installed as a dev dependency locally for the project, the tsc compiler (versioning) relies on the global install of TypeScript.   Thanks for your help.
16786|"@bpasero The Insider version is my main tool. However, I had the same issue with the stable release too. Last time it happened with the stable release, it prompted me to create this issues.     Here is the result of the process you said to follow when it occurred. I have tested it a few times, the second instant never gets past `Sending env to running instance...`  ``` c:\Program Files (x86)\Microsoft VS Code Insiders> ### VSCode main.js ### c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app { pathArguments: [],   programStart: 0,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   diffMode: false,   pluginHomePath: undefined,   extensionDevelopmentPath: undefined,   extensionTestsPath: undefined,   disableExtensions: false,   locale: undefined,   waitForWindowClose: false } Lifecycle#unload() 1 ""Code - Insiders.exe"" --verbose  c:\Program Files (x86)\Microsoft VS Code Insiders> Sending env to running instance... ```"
16787|@stevencl @bgashler1 one of the issues with notifications
16788|@waderyan editor or search viewlet?
16789|Somehow yes. I guess it would allow me to ask the user where he wants to run the generator and call `vscode.commands.executeCommand('vscode.openFolder', uri);` But that would still force the user to manually type the entire path into a normal input box right? There is no way to open the UI file picker and let the user navigate and select a directory via that way?
16790|@eByte23 I suggest you report something like that as separate issue if you think it is one. we introduced a new setting `editor.detectIndentation` which defaults to `true`. Maybe you can try setting it to `false`.
16791|DEU, RUS fixed. JPN, KOR, CHT, CHS waiting for linguistic input.
16792|Basically, I would like built-in functionality for appending the `-S` command line argument to `git commit`, as shown [here](https://git-scm.com/book/uz/v2/Git-Tools-Signing-Your-Work).
16793|so there's no hope for icons? :cry: why?!
16794|@donaldpipowitch From what I understand the PR is on hold until they make their plan after the March release. The PR has not been closed by anyone on the team and I'm still happy to push it through.   @fa7ad I'm sure icons will make it and hopefully sooner than later.
16795|"I don't understand the need to have a `""explorer.workingFiles.minVisible""`. What advantage of having a buffer between working files and the folder explorer? That scenario essentially exists already (other than having the buffer, which like you said, is just adding empty, unusable space into the sidebar).  I **could** see why people want a resizable working files, but I think the current implementation satisfies the need. I'd almost bet that when @h2u created the issue that they didn't know about the `""explorer.workingFiles.maxVisible""` setting.  **EDIT**: Just to be clear since my opinion isn't supporting this issue that even though GitHub calls me out as a _Microsoft member_, I do not work on VS Code other than as an open source project."
16796|Need more info so that I can reproduce this problem. Can you reproduce this behaviour in this sample https://github.com/Microsoft/vscode-samples/tree/master/node-express-javascript?  I don't fully understand the error condition you describe in step 2. Where does 'cannot find name' appear? Can you add an animate gif that illustrates the problem.
16797|I wonder if this is something caused by your insiders build of Windows (Win10 Build 14279). What seems to happen is that the second instance cannot talk to the first via the named pipe we establish.
16798|@SamVerschueren I pushed a change so that the new `vscode.openFolder` command can be called without arguments which will bring up a native folder picker. The second optional argument `newWindow` can still be used to force the picked folder to open in a new window or not.
16799|Fixed with 4849118632d44bff916550e2babb492e1cca9646
16800|Thanks @bpasero! Appreciate the effort.
