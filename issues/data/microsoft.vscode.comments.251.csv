25001|This has since been fixed with the proxy setting. Both 0.10.6 and 0.10.8 are way too old, and obviously don't have this fix. Simply download the latest from the web site.
25002|@Tyriar pushed, please verify.
25003|I can work-around this by doing subst r: c:\profilefolder\ to open the second window w/ same folder/profile as first, but I don't really understand why this is by design--is there a feature I'm missing?    How can I split the editor and have those windows not be side by side by rather actually take advantage of my screen resolution?  Also, since the profiles themselves are tied to the folder.  So, if you want different settings than default, you essentially have to set up a new profile for each directory the way this is designed now?
25004|duplicates #7307
25005|@GeoffreyEmery I am not able to create a file and folder with the same name using windows explorer so I wonder what you do different?  ![screen shot 2016-06-08 at 17 11 32](https://cloud.githubusercontent.com/assets/900690/15899470/1b98b526-2d9c-11e6-9ed5-db88ab8cbd8d.png)
25006|@calam1 I meant a zip of the contents you are opening Code with that leads you there
25007|VIDEO OF BUG [VSCODE-VIDEO.zip](https://github.com/Microsoft/vscode/files/305091/VSCODE-VIDEO.zip)
25008|Hey,   your doing it in explorer which is possible i did it in the ide as shown in video. once again this is very small bug.
25009|ah, you know what.  Odd thing I wasn't experiencing this problem this morning.  After your response I was thinking what I did differently.  I actually opened up code on my home directory, i.e. code .  Apparently this must be spawning threads to load up / index my entire home directory, which is probably causing the problem.  I was not aware of the behavior of code in this scenario, when I used it this way.  So this is probably not a real issue, or something that should be lazily done, not sure.
25010|@bpasero Problems view and Status bar is completely relying on the underlying markers model to show errors/warnings. This would cause inconsistencies in the views.   Showing them in the view helps because for eg, in this case these problems have to be fixed in the files we generated.  I think the right solution would be either to allow opening these files or show a nice message that user cannot open these files.
25011|@sandy081 I am fine pushing this knowledge into the markers layer, but I am never interested in errors or warnings from files I cannot edit :)
25012|Ok, thanks for the video. We show this error because you are trying to create a file or folder that already exists. I am closing this because you cannot create a file or folder that already exists.
25013|Ok please report back when you see it in other scenarios.
25014|That's lovely, thank you! Will it be available in the Insiders release tomorrow?
25015|"@aeschli all browser inc. Edge 14 now include a native colour picker with input type=""color"", so it may be possible to just use that. For VS code it would presumably use the Chrome colour picker, which is the platform's native colour picker on Win and Mac. I'm not sure about Linux. It should work for Monaco too. In Edge we don't use the system colour picker but instead a custom touch friendly one built in HTML which has been made fully accessible."
25016|actually this is a bug with the IDE. you can create a file and folder with the same name in explorer as you showed in your own example. In my use case i was uploading my site to bitbucket and setting up a automatic build for a docker repo. The docker hub repo's require you to create a folder called dockerfile and then move your dockerfile inside of that instead of having in the root of the site as I did.
25017|@OliverJAsh yes :)
25018|@GeoffreyEmery my screenshot is showing that windows does not allow it. see the dialog in the screenshot that pops up.
25019|Yes,   close as resolved. This is a os issue.    Keep up the good work on the product. Its coming along very nicely. G
25020|This happens in a JSON file.
25021|That worked for X2go on Debian Jessie as well. 👍
25022|@edumunoz clearing the temporary breakpoints at the end of the session seems to be rather late. Shouldn't they be cleared on the next StoppedEvent? If they are not shown in the UI (as you suggested), a user might lose track of them until the end of the section.
25023|There is a challenge with this. Generally, our configuration is flat key-value pairs. The catch is that keys can be dot-separated and that the configuration is an object-tree along those dots.   For instance, the setting `search.exclude` is a nested structure of JS objects `{ search: { exclude: ... } }`. That brings in an ambiguity when the `value` part is also an object, like `{ search: { exclude: { '**/node_modules': true, '**/bar': true } } }`.  For reading, we don't differentiate this. You can do `getConfiguration('search').get('exclude.**/node_modules') === true` or `getConfiguration('search.exclude').get('**/node_modules') === true` which I think is fair for reading but I am unsure how writing configurations should behave in such cases? Should we allow for partial changes of the `value` part when the key is actual `key` + `value-key`?  @bpasero @aeschli ideas?
25024|Btw I would find it a good thing if an extension could actually write to extensions it does not contribute because this opens the door for a whole new family of extensions that could provide added value for changing settings (e.g. toggle core settings via command palette or ask the user if he is a tabs user or not and then make all the settings changes to disable or enable tabs).  As for writing settings, not sure. I think the main use case is to write a value for a setting that shows up in user settings. If there is `search.exclude` you should be able to write to this value using `search.exclude` and not via `search` or `search.exclude.when`. There are (unfortunately) some keys that have 2 dots (e.g. `html.format.indentInnerHTML`) and again I would expect to write `html.format.indentInnerHTML` via the API to provide a value.  Now, I am not sure if you could enforce this at all given that in the end all of these things end up being one large object.  Unrelated: would this API take into consideration that there are global settings and workspace settings?
25025|Yes this has shipped to both stable and insiders
25026|+1
25027|@weinand thanks, looks good!
25028|@J-Siu when this happens would you be able to run a CPU profile from the developer tools (help > toggle developer tools) to see where we spend so much time?  Also, did this not happen with the previous release?  And finally, since this might be related to an extension, does it reproduce when you run with extensions disabled (`code --disable-extensions` from the command line)?
25029|"Encountering something similar myself on OSX 10.11.4  Using two fingers to scroll after doing a ""git status"" (or anything else that overpopulates the window), terminal will scroll up and quickly stop. Literally just noticed that when the mouse isn't over any content in the terminal scrolling won't work. The moment I move my cursor over some content scrolling works fine.   Expect: Scrolling to be smooth and consistent regardless of what part of the terminal my cursor is over."
25030|@bpasero can you give a bit more detail on how to run a cpu profile?  This issue only come up after I upgrade to 1.2.0 last night. This did not happen before.  I will try the no extensions test after.
25031|> clearing the temporary breakpoints at the end of the session seems to be rather late. Shouldn't they be cleared on the next StoppedEvent  That's already being done (`onDidStop`). However, that event is not being triggered if the debug session ends without stopping first. That's what this PR fixes.  > If they are not shown in the UI (as you suggested), a user might lose track of them until the end of the section.  I consider these breakpoints an implementation detail. The user never set any breakpoints for this to work, so why show any?
25032|@weinand
25033|I did 3 fast cpu profile capture. Please let me know if I did it correctly. I basically click through those *.ts files during the capture. [cpuprofile.zip](https://github.com/Microsoft/vscode/files/305391/cpuprofile.zip)
25034|Is there anything else I should do to try and fix this, or should I open a new issue?
25035|"Issue still there with ""code --disable-extensions""."
25036|"This was brought to my attention [over here](https://github.com/Microsoft/vscode/pull/6542#issuecomment-222283267):  ``` // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents. ""editor.detectIndentation"": true,  ```  What this does, by default, is try to intelligently guess what the document is already using - **before applying your own settings of tabs -vs- spaces and the size or count of spaces**. If you are finding it annoying that some of your files won't format correctly, **set this to false**."
25037|> Btw I would find it a good thing if an extension could actually write to extensions it does not contribute because  There is a misunderstanding. Yes, I do want to allow extensions to write any setting - given it exists. That is the foobar extension can reconfigure search/tabs/etc but it cannot introduce a new config option. When  thinking of _key-value_-pairs, you can set the value of any key but you cannot introduce a new key. Only the static contribution point in package.json can do that.  > Unrelated: would this API take into consideration that there are global settings and workspace settings?  Yes. Current thinking is that there `WorkspaceConfiguration#update` which takes the `key`, a `value`, and some sort of hint where to write to - which again is complex.  The problem with writing is that I'd like to know if for a given `key`, object is a valid `value`, as it is for `search.exclude`. That's cos generally I don't think it wise to have an object as arbitrary value, cos it would allow for `config.update('search', {})` which results in an invalid config... Or on a second though, the config service (`setWorkspaceConfiguration`, `setUserConfiguration`) should maybe just reject changes that are not compliant to the schema. @aeschli Can we already do that?
25038|@bpasero I could not reproduce the problem with VS Code insiders. Hopefully the issue is already fixed in the nightly build. I'll update if I get the issue again.
25039|"Looks like many messages are being received and read...  <img width=""529"" alt=""screen shot 2016-06-08 at 20 19 45"" src=""https://cloud.githubusercontent.com/assets/1794099/15905778/693de412-2db6-11e6-9e66-99bc76676ea7.png"">"
25040|"Yeah I've primarily moved to insiders because of terminal. Oh how much I love it. I've found the editor to be a lot snappier and lighter. Great work.  Is there any way I can replace ""code ."" In command line to point to insiders?  On Wednesday, June 8, 2016, Elijah Bate notifications@github.com wrote:  > @bpasero https://github.com/bpasero I've update all my devices today, > see how we go over next few days >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-224539214, > or mute the thread > https://github.com/notifications/unsubscribe/AA-JVM4KoGeXoc2SU5VeEYnxkZyPVWYMks5qJo13gaJpZM4Gnvn5 > ."
25041|Just opened it on Insiders (it's been a long time since I've done it, if ever), and it started the open dialog at `/home` (ie. `$HOME/..`) which is pretty weird.
25042|"@J-Siu Thanks for attaching the profile. It seems like one of the processes we manage (extension host, search, file watching etc) is sending lots of data to the main thread. Two more things I'd like you to ask 1. Do you see any warnings on the console?, ala too many messages send 2. You can tell the dev tools to support async debugging. That means it will restore callstack for things that happen from the event loop and otherwise appear as `nextTick` (like setTimeout et al). In the dev tool, select the source tab and check _Async_. Now profile the main thread again when VS Code goes crazy. With a little luck we'll figure out who is receiving these messages and close to knowing what goes wrong.  <img width=""340"" alt=""screen shot 2016-06-08 at 20 44 58"" src=""https://cloud.githubusercontent.com/assets/1794099/15906628/f3eeca24-2db9-11e6-9c70-7df4f7999b94.png"">  Again, thanks for helping out!"
25043|P.S. After enabling the _Aync_ callstacks, be on the save side and restart VS Code once ;-)
25044|Isn't this discussion rich enough for the dev team to carry on with the appropriate changes? (Shouldn't it be locked at this point just like #224)?
25045|Actually it could follow `npmrc` [default precedence](https://docs.npmjs.com/files/npmrc#files): - per-project config file (/path/to/my/project/.npmrc) - per-user config file (~/.npmrc) - global config file ($PREFIX/etc/npmrc) - npm builtin config file (/path/to/npm/npmrc)  I think the job here is to seek these paths inside `packageJSONContribution.ts`.
25046|+1
25047|I'm in violent agreement that the 'run-to-cursor' breakpoints shouldn't be shown.  I had mis-interpreted the original problem: I thought the bug was that a 'run-to-cursor' breakpoint was not cleared immediately on the next stop if it was not hit. And your PR would clear those breakpoints only at the very end of the session (instead of at the next StoppedEvent). In that case a user might lose track of them if they not shown.
25048|@jrieken  ![screen shot 2016-06-09 at 12 51 49 am](https://cloud.githubusercontent.com/assets/8372882/15907842/69a4c51c-2ddc-11e6-9c51-6a7165799aaa.png)  There are a bunch of Electron Helpers, with one hitting 100% consistently. I just updated VS Code to 1.2 and this issue has cropped up. Even autocompletion (Golang) isn't working. Never faced this issue until this update. Could you help me out here? I'm on a 2010 Macbook Pro (2.4 GHz Core 2 Duo, Samsung 850 Pro 128 GB SSD, if that helps).  ###### Edit  I've tried restarting my Mac at least thrice. The issue crops up with no wait at all. I'm currently running OS X 10.11.4
25049|"@jrieken  (1) I just finish a cpuprofile for 20min+, is there a place I can upload? It is 31MB after zip. (2) regarding restarting VSCode, I just discover it has left over process each time I close it:  > ps -ef|grep Studio >   501  1679     1   0  1:32PM ??         0:00.10 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=61 >   501  1686     1   0  1:33PM ??         0:07.09 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap /usr/bin/git /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs utf8 /Applications/Visual Studio Code.app/Contents/MacOS/Electron 2.7.4 (Apple Git-66) >   501  1880     1   0  1:57PM ??         0:07.32 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap /usr/bin/git /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs utf8 /Applications/Visual Studio Code.app/Contents/MacOS/Electron 2.7.4 (Apple Git-66) >   501  2105     1   0  2:40PM ??         0:03.70 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap /usr/bin/git /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs utf8 /Applications/Visual Studio Code.app/Contents/MacOS/Electron 2.7.4 (Apple Git-66) >   501  2189     1   0  2:53PM ??         0:00.10 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Framework.framework/Resources/crashpad_handler --database=/tmp/VSCode Crashes --url=https://ticinocrashreporter.azurewebsites.net/crash --handshake-fd=58 >   501  2196     1   0  2:54PM ??         0:06.94 /Applications/Visual Studio Code.app/Contents/Frameworks/Electron Helper.app/Contents/MacOS/Electron Helper /Applications/Visual Studio Code.app/Contents/Resources/app/out/bootstrap /usr/bin/git /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs utf8 /Applications/Visual Studio Code.app/Contents/MacOS/Electron 2.7.4 (Apple Git-66) >   501  2294   795   0  3:19PM ttys001    0:00.00 grep --color=auto Studio  Seems the process line ending in (Apple Git-66) never go away."
25050|I would love feedback on this one as, if it's accepted, I would like to continue with similar changes that make vscode behave more like a cocoa app on mac.
25051|I did one more cpuprofile after restarting. But it is only for ~7min. [CPU-20160608T153554.cpuprofile.zip](https://github.com/Microsoft/vscode/files/305559/CPU-20160608T153554.cpuprofile.zip)
25052|@shanebest VS Code does not have an OOTB python debugger. Please file this issue against the python extension you are using.
25053|@zooldk I just verified node debugging in VS Code 1.2 on Windows 7 and could not find any issues. Since you are using the Cordova extension I suggest that you file this problem against the Cordova extension.
25054|> ...reject changes that are not compliant to the schema  Right now the configuration service doesn't know anything about the configuration schemas, but it looks like it should. It should know the real key names (a.b.c). When collecting the default values we should also collect the allowed types and enum values. There are more ways of defining restrictions with JSON schema, but that would require the full schema checking code that is now in the JSON extension.
25055|Are you using Windows? Maybe you could set the interface scaling factor on one of the monitors to something like 1.5?
25056|It is wonderful. Great work! <3
25057|"Thanks - I do believe that we end up [here](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/extensions/common/ipcRemoteCom.ts#L242) a lot. Next question is why?  @J-Siu With the files you have opened, do you see any abnormal error squiggles? Or are there unexpected numbers about errors/warning in the status bar?  Also, if you really feel adventures, do the following - open dev tools, select 'Sources' - hit `Cmd+P` and type `ipcRemoteCom`, it should open `ipcRemoteCom.ts` from the attached source maps - set a breakpoint on line 248 (it should look shown below) - the breakpoint should be hit many, many times and it would be _very, very_ helpful to know what kind of messages you are receiving  <img width=""801"" alt=""screen shot 2016-06-08 at 22 38 18"" src=""https://cloud.githubusercontent.com/assets/1794099/15910138/f2c9ba40-2dc9-11e6-937c-a8d769b282d1.png"">"
25058|@felixfbecker Yes, I would accept a PR, but before investing into this please verify with a (quick-and-dirty) rearrangement of the nextRequest implementation that this fixes the problem for you.  I don't think that queuing in the in the debugSession implementation is a good approach.  The problem we have to address in the UI is that it should not be possible to flood the debug adapter with many step requests that are queued and result in lag and imprecise stepping behaviour. For this we track the state of the debugee and enable step and continue requests only when being stopped and pause request when running. This requires that responses and corresponding events arrive in a deterministic (causal) order: events must arrive after the request that enables them has returned its response.  A simple (but not perfect) way to achieve this follows:  Instead of implementing the step and continue requests like this:  ```     if arguments are ok         do 'step'         if no error             send 'ok' response         else             send error     else         send error ```  you could implement them like this:  ```     if arguments are ok         send 'ok' response         do 'step'     else         send error ```  Yes, in the latter case it is not possible to turn a failure of the actual 'step' into an error response.  But the response/event order is correct and it is not necessary to delay (queue) events.
25059|That would be deluxe ;-) Similar to other places in the API we would apply a change always locally, send it to the main side, and update the extension side according to what it did (we do the same for instance with editor selection).
25060|"It is also very useful when I have multiple cursors on different _blocks_, such as functions, and need to select all the content in between the braces:  ``` test1 = () => {|   ...5 lines... }  test2 = () => {|   ...100 lines... } ```  Since the number of lines inside the block don't match, I need a way to select the whole block. vscode doesn't give any way to do that. And using multi-cursors with cases when I _can_ select a range of text mostly fails, miserably."
25061|This is a very painful bug while working with multiple cursors, and there is no way of going to the real end of line, and any transformations I do, like deleting a word in 100 lines, or adding an ID field in a bunch of `<FormattedMessage...>` elements, mostly creates side-effects which break the whole file.
25062|"@weinand That would not help because my ""threads"" (aka connections) are totally independent from each other. While one connection is inside a request/response sequence another connection could totally randomly break and trigger a StoppedEvent.  And in your latter example, how should I handle an error from XDebug if the step failed? There is no way to tell VS Code. I still don't get why Code can't simply accept events at any time, as every request/response has a unique ID to map them together. You shouldn't rely on the order, but map the requests/responses by ID, asynchronously (I do the same when communicating with XDebug). You are putting an unneeded burden on the debug adapter developers... :("
25063|I've moved some the documentation to git using MarkDown language. Having spellcheck working there would be super awesome.
25064|@felixfbecker sure, we are **not** mapping responses to requests based on order but based on id and asynchronously. That's not the issue here.  The issue is that it is difficult to track the state of a thread if there is only a 'stopped' event, but no corresponding 'running' event.   In that case we have to use the successful reponse of a request that leads to the 'running' state as the 'running' transition.  But if the stopped event triggered by that 'step' or 'continue' request arrives before the request has finished, the causality is reversed.  Explain to me how we should track the state of the thread.  BTW, the ID of requests, responses, and events is not only an ID for mapping responses to requests but it is a sequence number (basically a timestamp) too. That implies causality. You cannot just reorder events and expect that everything still works correctly.
25065|Also agree with @poetinha. I think this functionality is standard enough that it should be part of the application itself.  I will say that the `vscode-guides` extension does work pretty well in the interim, though. It gets a little bit confused do some swapping back and forth between tabs/spaces, but I do that fairly rarely, and the extension always catches up automatically and gets back to normal.
25066|@riula that issue is https://github.com/Microsoft/vscode/issues/6743 and I believe it's already fixed on master.
25067|Weird stuff happens to the buffer too.
25068|I think this is to do with bad layouts being passed to the terminal (0 rows).
25069|:+1:
25070|Does anyone know if this is fixed in Windows 10 build 14361 released on June 8?
25071|It seems you're experiencing https://github.com/Microsoft/vscode/issues/6621, I have hit it before but it seemed to just go away one day. It also has not been reported much so I'm looking for some reliable repro steps or clues before investigating it again.
25072|Ok your style is different. I'll need to look into how to edit that for the default dark theme because it just looks like two very faint lines on mine (screenshot was from sublime), and it doesn't do line highlight during find, just word highlight.
25073|Created an upstream bug: https://github.com/sourcelair/xterm.js/issues/98
25074|Duplicate of https://github.com/Microsoft/vscode/issues/7062
25075|That may very well be the problem I was experiencing... except the horizontal scrolling was weird too. I definitely had a build output with very short lines interleaved with very long lines, and as they scroll in and out of view, the thing locks up.
25076|I'm also seeing a lot of freezing with the latest update. I can generally only go ~10 minutes between freezes, and when it freezes all I can do is kill the whole process. Is there somewhere we can look for crash dumps/log files?  1.2.0 on Ubuntu 14.04; I almost exclusively use VSCode for TypeScript.
25077|Put out a big PR that fixes the major scrolling issues with xterm.js https://github.com/sourcelair/xterm.js/pull/101  Since I've already merged in xterm, I'm going to close this issue off.
25078|@jrieken I get strange result. rawmsg and messagesToSend are 'not defined'  ![screen shot 2016-06-08 at 22 39 21](https://cloud.githubusercontent.com/assets/3171920/15917387/3cfc529e-2dca-11e6-92d4-d3a23da14dc1.png)
25079|Upstream issue after xterm switch: https://github.com/sourcelair/xterm.js/issues/103
25080|Duplicate of https://github.com/Microsoft/vscode/issues/7357, already fixed for June :+1:
25081|This may be an issue in TypeScript instead. I've tracked the issue down to https://github.com/Microsoft/TypeScript/commit/cd1af127aa2088fa01917d0044e960ef6c02b542 I've narrowed the issue down further in Microsoft/Typescript#8837
25082|I am using vscode 1.2 now, it looks so pretty!  thank you guys all!
25083|@aeschli well it would be weird to have a workspace-associated theme, so user. Good point though that there would be a bit of weirdness there. In the end I think it would be good to be able to script your entire vscode setup, themes are the main missing piece in that now that extensions can be installed via the CLI.
25084|@leedonhyun that was fast :) this is an upstream issue with the new framework https://github.com/sourcelair/xterm.js/issues/62
25085|Duplicate of https://github.com/Microsoft/vscode/issues/7240
25086|Duplicate of https://github.com/Microsoft/vscode/issues/6602
25087|"It should work just like a non-administrator cmd, you can apparently run one off admin commands like:  ``` runas.exe /savecred /user:administrator ""%sysdrive%\testScripts\testscript1.ps1""  ```  See http://stackoverflow.com/a/12401075/1156119"
25088|Duplicate of https://github.com/Microsoft/vscode/issues/7062
25089|"I think @Seikho is onto something in [this comment](https://github.com/Microsoft/TypeScript/issues/8837#issuecomment-224797213).  If I add `""options"": {""cwd"": ""V:/temp/repro-build-bug""}` to my `tasks.json` (that's my project directory), the problem goes away and the build works normally. But if I lower-case the drive letter (so, `""options"": {""cwd"": ""v:/temp/repro-build-bug""}`), then the build bug reoccurs."
25090|@dbaeumer are you using symlinks? The commit referenced by @Seikho affects symlink behaviour, and you reported getting an error like:  ``` error TS6059: File 'C:/.../src/other/thing.ts' is not under 'rootDir' 'P:/.../src'. 'rootDir' is expected to contain all source files. ```  ...which looks like a symlink expanded in one place but not in another.
25091|Ok, closing then.
25092|@Tyriar the first time you open it I am not setting any folder so this might well be standard OS behaviour or an issue with Electron. From then on I am keeping your last used directory.
25093|"Yes, +1 for not introducing new keys to the setting. I also see the issue with validation so for sure, the API needs to run the same validation checks we see in the editor and reject invalid updates.  There is another complexity: today we have `settings.json`, `tasks.json` and `launch.json` that all go through the configuration service. We end up merging `tasks.json` and `launch.json` (actually any `*.json`) into the global config by taking the name of the file as the first part (so that debug can do `getConfiguration(""launch"")` and getting all the configured settings). If we allow to write, what happens if I use a key from task or debug land? It would need to end up in the right file. Alternatively we would have to prevent and reject writing to launch or debug at all.  The global vs workspace configuration change is tricky because an extension might only write to the global config but the user might have workspace config that actually overwrites this setting."
25094|Still happening on 14361 for me
25095|@weinand Alright, that makes sense. I realize the mistake is on my side. I checked back and I can first send the response, then call `checkStatus` (which will trigger events based on the XDebug response).   One thing though - to be completely sure that the response has been sent, shouldn't you have to use the callback parameter of `writetableStream.write()` and return a promise from `sendResponse()`?
25096|code-cli.sh works btw 👍
25097|Duplicate, already fixed https://github.com/Microsoft/vscode/issues/7357
25098|I have noticed something strange with cwd before, I had some repository open and did `code .` and it opened another folder, unrelated to both the active instance of `code` and `.`. Doing `cd .` also did nothing.
25099|94% of the CPU time is being spent in the function `channel.onread` in `internal/child_process.js:426`  Let me know if you need further info. This took me literally 1 minute.
25100|@epaga great findings and this is exactly what we have seen in https://github.com/Microsoft/vscode/issues/7428  We still have to find out which of our processes is causing this flood of messages (extension host, search, file events).  Can you try to run from command line `code --logExtensionHostCommunication` and then bring up developer tools console (from help menu) to see what output is logged? This literally logs each and every request from and to the extension host and should be a lot of output if this is the place where CPU is burnt.
