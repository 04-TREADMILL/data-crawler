25901|@joaomoreno  this is my process.env ![bootstrap_js_-_audit-app](https://cloud.githubusercontent.com/assets/438120/16047902/372d8da6-3252-11e6-8da2-cd10d8518f45.jpg)  the `path` variable should have much more content.  in stable version, I get ![untitled-1](https://cloud.githubusercontent.com/assets/438120/16048027/d0eec018-3252-11e6-9309-ca499f348955.jpg)
25902|@kieferrm We have some hygiene failure due to missing copy right statements
25903|I know I should know better than to armchair project-manage, but this feels like low hanging fruit with a big ROI. I like VSCode for it's deep support of various JS features + intellisense --icons aren't a make or break feature for me-- but there a lot of people for whom this _is_ a make-or-break feature. I guarantee there are visually oriented folks who will try VSCode then quickly bounce back to Sublime/Brackets/whatever when they see that this basic feature is missing.  My intuition-based belief: **not having this feature will have a significant negative impact on the adoption of VS Code**. It's silly but I believe it's true. I care because I really like VS Code & I am recommending it to people, I want them to like it. 😸
25904|@stevencl Indeed, the use of the mouse to close the tabs in the editor frequency, there may be no shortcut key high.
25905|"I found another two issues, which possibly could be present on standard command prompt too: 1. When I'm trying to use combination of ctrl + left/right arrow to jump throught a whole word, instead it prints ""5D"" and ""5C"", respectively. 2. Scrolling terminal with up and down arrows with scroll lock turned on doesn't work."
25906|Closing in favour of https://github.com/Microsoft/vscode/issues/7661 where we need something else (not an icon) to distinguish the diff editor from the normal editor when tabs are enabled.
25907|@TheColorRed Crane Intellisense has the problem.  It's by far the most popular VS Code PHP extension, so I guess this is what most people are reporting their problem with.
25908|I didn't know about that first option, that's a great workaround. Thanks for the tip.
25909|This is happening again immediately after installing the latest insiders. Here's a full log after using it for 1-2 minutes http://pastebin.com/yS8pbwV5  JavaScript tokenizing was failing this time.
25910|Sure, I can do that
25911|"@bpasero I tried recording a profile. I started it, worked for a bit in the editor, and when it froze I went to click the button to stop recording. It registered my click, but the profile still says ""Recording..."". I've let it sit for several minutes with no change. So I don't think it's possible to get a profile from a frozen editor.  ![image](https://cloud.githubusercontent.com/assets/782920/16052678/40feb716-3233-11e6-8bea-88a4897e542c.png)"
25912|Looping in @jacdavis and @delmyers in case they have a strong preference.
25913|This is on insiders that's not working:  ![image](https://cloud.githubusercontent.com/assets/2193314/16053098/3b151596-321c-11e6-9a1a-044efead590e.png)  So module flattening is not working.
25914|My only concern is the lack of unity between the VS experience and the Vscode experience as we try and unify the design and do things like support VSCode debug adapters inside Visual Studio. I suspect users are unlikely to notice this change in behavior, but if they did, it would appear as a bug in which ever product they were less familiar with.  I suspect Xamerin Studio probably has a third behavior in this case as well.
25915|@sandy081 not quite.  #7628 was a pull request to fix this issue, which we decided to defer since #7656 would fix the issue and was almost ready for prime time.  So while this issue is still valid, it shouldn't be soon and probably can be closed.
25916|@admmasters Do you add nvm/npm to `$PATH` in your `.bash_profile`? See https://github.com/Microsoft/vscode/issues/7263
25917|"Going to close this in favor of https://github.com/Microsoft/vscode/issues/7266 which will allow you to do this in 1.3.0:  ``` json {   ""terminal.integrated.shell.linux"": ""bash"",   ""terminal.integrated.shellArgs.linux"": [ ""-l"" ] } ```  In the meantime if you want this working on stable you can do the workarounds that myself https://github.com/Microsoft/vscode/issues/7263#issuecomment-224140256 or @coreh https://github.com/Microsoft/vscode/issues/7263#issuecomment-224207986 suiggested."
25918|Confirmed that deleting `vscode-textmate/node_modules` fixes the problem
25919|@Toreno96 I played with Clink a little yesterday and filed an issue of my own https://github.com/Microsoft/vscode/issues/7630  It seems _very_ broken to me currently, I would just avoid using it in vscode right now. I have a feeling it may be on the Clink end as well because most other shells (powershell, cmd, bash, zsh) don't demonstrate the issues that Clink does.
25920|@DonJayamanne a regular command (not extension API) would suffice for this?
25921|@isidorn You are welcome!  I was confused by #6277, it clearly stated that the requested behaviour is needed for the existing indentation commands, but you are right this should be handled by two new commands. (side note: this could have been stated as a comment on that particular issue once you reopened it ;-) )  What do you think, should I introduce them or it's unlikely to be merged anyway?
25922|"Well, I can't link my companies wpad file, but it was located at http://wpad/wpad.dat and contained what appears to be a JavaScript function?  I am no expert in WPAD files, but it looks like JS.    The function:  1) Calls for the DNS to resolve the hostname  2) Checks whether the URL/IP meets one of many criteria (in network, ftp, etc.) and if so returns ""DIRECT""  3) If not matched with a special case then it returns ""PROXY [proxy hostname]:[proxy port]""  Does that help?  That is about all the info I can give on our WPAD, but I would assume it would be similar for other companies.  Let me know if that helps."
25923|Looks like a duplicate of #7279 :)
25924|Seems to be fine now. But I've deleted the `.git` folder anyway, I'm fine with the official build.  But I still find it a bit excessive to scan all changed files in the tree after every change to a single file.
25925|Going to close this off in favor of programs like tmux and screen which seem to work just fine within vscode  ![image](https://cloud.githubusercontent.com/assets/2193314/16058782/f5ba020e-3234-11e6-943e-d27e62475105.png)
25926|"It's great that we're catching these issues before this hits the stable, so thanks for taking the time for filing the issue and helping us out!  Still in the developer tools, do you mind running this code and letting me know what you get? This is exactly the code we're running to figure out your environment. Make sure you put the right location of the Insiders app in the first line, in case you placed it in another place.  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); console.log(result.stdout); ```  Thanks!"
25927|Kickass work and thanks a lot and sorry for being unhelpful earlier.
25928|Which is a duplicate of https://github.com/Microsoft/vscode/issues/7263 :stuck_out_tongue:  Closing, check that issue for workarounds until you can run bash as a login shell in 1.3.0.
25929|It's not supposed to close the terminal panel but rather the active terminal, what you're seeing is it closing the last terminal and it recreating a new one. This is the very beginning of the multiple terminals work, you can create a new terminal instance using <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>`</kbd>.  @tills13 do you think  renaming these to terminal.kill and terminal.killAll would make things clearer?
25930|"sorry for the retard, voila the output:    (B[m{""MANPATH"":""/Users/gitawego/.nvm/versions/node/v6.2.1/share/man:/usr/local/share/man:/usr/share/man:/opt/X11/share/man:/Applications/Xcode.app/Contents/Developer/usr/share/man:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/man"",""LESS_TERMCAP_md"":""\u001b[38;5;136m"",""ATOM_SHELL_INTERNAL_RUN_AS_NODE"":""1"",""NVM_CD_FLAGS"":"""",""TERM"":""xterm-256color"",""SHELL"":""/usr/local/bin/bash"",""HISTSIZE"":""32768"",""TMPDIR"":""/var/folders/6t/5077bgf135d9kwn848lk8z5m0000gn/T/"",""NVM_PATH"":""/Users/gitawego/.nvm/versions/node/v6.2.1/lib/node"",""Apple_PubSub_Socket_Render"":""/private/tmp/com.apple.launchd.imA84ep7Za/Render"",""LC_ALL"":""en_US.UTF-8"",""NVM_DIR"":""/Users/gitawego/.nvm"",""HISTFILESIZE"":""32768"",""PYTHONIOENCODING"":""UTF-8"",""USER"":""gitawego"",""LS_COLORS"":""no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:_.tar=01;31:_.tgz=01;31:_.arj=01;31:_.taz=01;31:_.lzh=01;31:_.zip=01;31:_.z=01;31:_.Z=01;31:_.gz=01;31:_.bz2=01;31:_.deb=01;31:_.rpm=01;31:_.jar=01;31:_.jpg=01;35:_.jpeg=01;35:_.gif=01;35:_.bmp=01;35:_.pbm=01;35:_.pgm=01;35:_.ppm=01;35:_.tga=01;35:_.xbm=01;35:_.xpm=01;35:_.tif=01;35:_.tiff=01;35:_.png=01;35:_.mov=01;35:_.mpg=01;35:_.mpeg=01;35:_.avi=01;35:_.fli=01;35:_.gl=01;35:_.dl=01;35:_.xcf=01;35:_.xwd=01;35:_.ogg=01;35:_.mp3=01;35:_.wav=01;35:"",""NODE_REPL_MODE"":""sloppy"",""SSH_AUTH_SOCK"":""/private/tmp/com.apple.launchd.XKus3fylIG/Listeners"",""VSCODE_TSJS"":""1"",""__CF_USER_TEXT_ENCODING"":""0x1F5:0x0:0x0"",""GOOGLE_API_KEY"":""AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q"",""PATH"":""/Users/gitawego/.nvm/versions/node/v6.2.1/bin:/usr/local/sbin:/Users/gitawego/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/gitawego/workspace/android-sdk-macosx/platform-tools:/Users/gitawego/workspace/android-sdk-macosx/tools:/Users/gitawego/workspace/android-sdk-macosx/platform-tools:/Users/gitawego/workspace/android-sdk-macosx/tools"",""NVM_NODEJS_ORG_MIRROR"":""https://nodejs.org/dist"",""PWD"":""/"",""ELECTRON_NO_ATTACH_CONSOLE"":""1"",""EDITOR"":""vim"",""LANG"":""en_US.UTF-8"",""XPC_FLAGS"":""0x0"",""PS1"":""\\[\\033]0;\\W\\007\\]\\[\u001b[1m\\]\\n\\[\u001b[38;5;166m\\]\\u\\[\u001b[97m\\] at \[\u001b[38;5;136m\]\h\[\u001b[97m\] in \[\u001b[38;5;64m\]\w$(prompt_git \""\[\u001b[97m\] on \[\u001b[38;5;61m\]\"" \""\[\u001b[38;5;33m\]\"")\n\[\u001b[97m\]$ \[\u001b(B\u001b[m\]"",""HISTCONTROL"":""ignoreboth"",""PS2"":""\[\u001b[38;5;136m\]→ \[\u001b(B\u001b[m\]"",""XPC_SERVICE_NAME"":""0"",""MANPAGER"":""less -X"",""SHLVL"":""1"",""HOME"":""/Users/gitawego"",""VSCODE_NLS_CONFIG"":""{\""locale\"":\""en-us\"",\""availableLanguages\"":{}}"",""VSCODE_SHARED_IPC_HOOK"":""/var/folders/6t/5077bgf135d9kwn848lk8z5m0000gn/T/Code - Insiders-c2fcce-shared.sock"",""LOGNAME"":""gitawego"",""NODE_REPL_HISTORY"":""/Users/gitawego/.node_history"",""VSCODE_IPC_HOOK"":""/var/folders/6t/5077bgf135d9kwn848lk8z5m0000gn/T/Code - Insiders-c2fcce.sock"",""NVM_BIN"":""/Users/gitawego/.nvm/versions/node/v6.2.1/bin"",""NVM_IOJS_ORG_MIRROR"":""https://iojs.org/dist"",""VSCODE_PID"":""3822"",""DISPLAY"":""/private/tmp/com.apple.launchd.mcfO1QRHOx/org.macosforge.xquartz:0"",""NODE_REPL_HISTORY_SIZE"":""32768"",""_"":""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""}"
25931|Cool.
25932|And if you have more than one class in file, methods from only last class will be highlighted.
25933|Done https://github.com/Microsoft/vscode/tree/1.2.1  I created https://github.com/Microsoft/vscode/issues/7677 to prevent this in the future.
25934|Ok thanks.
25935|Yes, that would.
25936|"@aeschli, sorry for the comment on a closed pull request, but it is just a quick question, rather than an issue...  Is there a straightforward way for me to enable all the new behaviour relating to css custom properties in a `.pcss` file?  We are gradually introducing PostCSS into our codebase and leveraging the `.pcss` extension to keep things clear between new and old. Needless to say, we are using the relevant PostCSS plugin to add custom property support and it would be awesome to be able to use the ""Go to defintion"" etc stuff added in this PR!  Many thanks"
25937|There is also no keyboard shortcut shown in the dropdown.  Should this show Ctrl+Shift+M (on Windows)?
25938|The Problems view command also doesn't toggle like other views (ex. Output, Debug Console, Integrated Terminal).  Running the View > Views > Problems command or using the keyboard shortcut should toggle the view.
25939|@roblourens actually, the first option is not a workaround, but the official way to run (or debug) any VS Code extension ;-)  I hope it is OK if I close this issue?
25940|There is also the -ms-highcontrast: active media feature for a less sledge hammer approach to fixing up HC issues in IE/Edge. super useful with CSS system colours to match the user chosen HC colour settings.
25941|Thanks for working on this! Which release will this update be in?
25942|@roblourens I've added the 'step back' request and the capability to the debug protocol. It is already available in the latest VS Code.  The mock-debug extension (available on the marketplace) implements step back and can be used to verify the UI.
25943|http://arstechnica.com/information-technology/2016/06/goodbye-apt-and-yum-ubuntus-snap-apps-are-coming-to-distros-everywhere/
25944|It is identical to the screenshots at the top of this issue by Thunkar when run by normal user (no GUI comes up) and root (works fine)
25945|we need this feature ,such as sublime
25946|"Hi, any updates on this? Some fonts look better when they are bold, an ""editor.fontWeight"" or ""editor.fontStyle"" setting would be awesome!  Thanks"
25947|Related: https://github.com/Microsoft/vscode/issues/3360 https://github.com/Microsoft/vscode/issues/7161
25948|Fixed in master already, coming in v1.3.0.
25949|Duplicate of https://github.com/Microsoft/vscode/issues/6743, coming in v1.3.0
25950|@JamesHenry try associating using `files.associations` in your settings.json https://code.visualstudio.com/Docs/languages/overview#_adding-a-file-extension-to-a-language
25951|Thanks - sorry Github default Issue search is for open status only
25952|Forked off (2) so we can close this https://github.com/Microsoft/vscode/issues/7687
25953|"@neandrake I'm making this the ""official"" issue for this bug as it was fixed before reported :stuck_out_tongue:"
25954|Click on the file name preview, which will be more than one step.  I think we should be unified only a one search box, when the search project, we can directly display the search results in tab, click on the search results in the right to open a new tabs.  Sublime text:   ![demo](https://img.alicdn.com/tps/TB1k4PSKpXXXXcXXpXXXXXXXXXX-1216-762.png)  Github search code  https://github.com/Microsoft/vscode/search?utf8=%E2%9C%93&q=MATCHES_LIMIT
25955|@Tyriar your translation is precisely correct and thanks for ignoring those dirty words ...
25956|https://github.com/flatpak/flatpak/issues/116
25957|"@mhofman thanks for reporting this issue, it's quite interesting. Actually GitHub doesn't have a consistent rendering for invalid html, for instance, the Wiki page you provided above,   ``` <a name=""custom-heading""> # Heading ```  will be generated as   ``` <p><a name=""user-content-headers""></a></p> <h2> <a id=""user-content-headers"" class=""anchor"" href=""#headers"" aria-hidden=""true""></a>Headers </h2> ```  This output makes no sense to me as I don't see any reason to have two `<a>` elements.  Moreover, if you type in the same markdown content here (github issue), the output would be   ``` <a name=""user-content-custom-heading""> <h1>Heading</h1> <p>Some text</p></a> ```  See? `Some text` is included in the `a` element, just the same as we do. I'm not saying it's a correct way but the inconsistency shows that people are not clear about how to handle **invalid** HTML correctly. How can we say the output of an invalid input is valid or not?  But let me emphasize again, we should have a clear solution for this in Visual Studio Code. Recently we are moving Markdown parser from marked.js to markdown-it, once the feature is live, let's see how to make it happen. Before that, I'd like to share a workaround with you  ``` <a name=""custom-heading"">  # Heading </a>  Some text ```  Tricky but works :smile:"
25958|@alexandrudima   Or I think it would be better: - Double click the  line number selected code block. - Three click the line number Select a paragraph.  What do you think?
25959|---  ## Microsoft Visual Studio  尝试运行项目模型服务器进程(1.0.0-preview1-002702)时出现以下错误。  无法启动进程。Failed to load the dll from [C:\Program Files\dotnet\hostfxr.dll], HRESULT: 0x80070057  ## 项目模型服务器进程为 Visual Studio 提供了智能感知、生成和参考信息，不使用该进程将使体验严重受限。请尝试关闭并重新打开 Visual Studio，查看是否解决问题。或者，请检查是否正确安装了 .NET Core SDK。  ## 确定
25960|@liyunzhi1993  I encountered the same problem
25961|![image](https://cloud.githubusercontent.com/assets/900690/16067448/09e52488-32bd-11e6-8f13-770a925c8c38.png)
25962|"@bpasero Sorry for the late reply, I didn't see the notification. I tried running ""code --verbose"" from command line and still nothing, not even one line. As soon as I connect to the internet, it works. I tried re-installing multiple times but I have the same behavior. I tried to replicate on a Windows 7 machine, but was not able to (so it seems to be limited to my Windows 8 machine)."
25963|"@johnnyPescarul does it return immediately when running ""code --verbose""?"
25964|@joaomoreno  ![screen shot 2016-06-15 at 10 21 52 am](https://cloud.githubusercontent.com/assets/8372882/16068403/202c01b4-32e3-11e6-8da5-13dd95494e0a.png)  ![screen shot 2016-06-15 at 10 08 40 am](https://cloud.githubusercontent.com/assets/8372882/16068763/3a6d4882-32e6-11e6-8244-cb6cb031e81a.png)  The problem seems to have been resolved in the Insider build, but seems to still exist on v1.2.1.   Anyhow, thank you for this. I missed VS Code the past few days.
25965|@bpasero when I run it, it starts the process but it then hangs. It must be something early on since nothing is displayed with verbose flag on. Are there any logs generated?
25966|oh that would be great! +1
25967|sometimes process is just _/usr/share/code/code_
25968|"""Durmiendo"" means ""Sleeping"" in english"
25969|@Urahara can you add the process for one or two files which holdes the lock. Very interesting is the command line of that process.
25970|Makes sense to me. How do we tackle this ? Should I make a corresponding API request.
25971|Moving to TS since the feature is provided there.
25972|This issue was moved to Microsoft/TypeScript#9177
25973|"I found that same instruction somewhere, but it should be:   ""terminal.integrated.shell.windows"": ""C:\\Program Files\\Git\\bin\\bash.exe"","
25974|@aeschli  will look into it today.
25975|Duplicate of #7286.
25976|Moving to TS. TS team please note that the current insider build is still using 1.8.10. So the behavior should be the same with 1.2.x
25977|This issue was moved to Microsoft/TypeScript#9178
25978|@JimiC correct :-)
25979|@johnnyPescarul any chance you could find out all the processes that we are able to spawn? this might get us closer to see where it hangs.  @joaomoreno could this be an issue with creating a connection to the shared process if you are offline?
25980|Yeah, thanks a lot!
25981|@apratheek Ultimately, the issue is due to the user having initialised a git repository where one would not do so normally. The typical cases we saw have initialised one in their home folder. The real fix here is to remove that git repository. I suggest you do the same.  The fix we pushed simply mitigates this and prevents the browser window from slowness.
25982|@bpasero Why the shared process? The window doesn't even seem to open...
25983|@kisstkondoros I appologize for the confussion I did not analyize the original feature request thoroughly enough - the way I looked at your PR. Due to the amount of feature requests we get it is sometimes hard to think what it means to implement them end to end and if they are feasable. My personal preferences is to leave feature requests open - even if I do not agree with them. And if a considerable amount of users request it then I might change my mind.  Hope that makes sense and sorry again for not being clear in the original feature request.  As for the two additional commands - this can be done via an extension, so an writing an extension is the right way to tackle this. Maybe call it indentation++ :)
25984|I have reasoned about why this should not be part of VSCode but an extension here https://github.com/Microsoft/vscode/pull/7582
25985|@joaomoreno the shared process (to my understanding) gets created from the main side. we have seen super funky behaviour when sending telemetry where the entire VM stops in some DNS lookup. Maybe the main side stops in a similar situation trying to establish a connection to the shared process.
25986|"@gitawego What are those `�(B�[m` characters at the beginning? Was that really printed by the `console.log` command?  To verify, run this snippet:  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' });  try {     console.log(JSON.parse(result.stdout)); } catch (e) {     console.log(e); } ```  Let's see if that output isn't valid JSON..."
25987|Very unlikely. The main process doesn't even connect to it, simply [spawns it](https://github.com/Microsoft/vscode/blob/extension-viewlet/src/vs/code/electron-main/main.ts#L111). It would only block if `fork` blocks... and even then the user would read [`'### VSCode main.js ###'`](https://github.com/Microsoft/vscode/blob/extension-viewlet/src/vs/code/electron-main/main.ts#L84) in his console.
25988|Dup of #2806
25989|This is up to the endgame master. Added to the checklist in the OneNote.
25990|@qihaibin This looks like an error with the C# extension, can you please file this bug in this repository https://github.com/OmniSharp/omnisharp-vscode
25991|Let's use this issue for that
25992|Great work :beers:
25993|Got it. Happening cause of this : https://github.com/Microsoft/vscode/blame/master/src/vs/languages/languages.main.ts#L13  /cc @aeschli :rose:
25994|refs https://github.com/alm-tools/alm/pull/121
25995|the output's JSON isn't valid....  by removing `�(B�[m` resolve the problem. now the output is: ![qqqq](https://cloud.githubusercontent.com/assets/438120/16072527/95f1d196-32e1-11e6-8e63-da81ca4763eb.jpg)
25996|One suggestion is to move views under main section and move other actions like toggle to secondary section.
25997|Assigning to @bgashler1 to experiment with colors as we have agreed on our UX meeting and if we come to a conclusion give the issue back to me to implement it across vscode.
25998|@gregvanl This was broken is yesterday's build due to the change - 2f4745320864b07abedf7b6e7442cd6ddf4e36e2  Fixed yesterday - 5fd7ffd07fee48632387157e296939f45d601aa3  This is working as expected in today's build.  Thanks
25999|I've made a new release of the build automation of monaco I am using for [alm.tools](http://alm.tools) ([commit](https://github.com/basarat/monaco/commit/3552a4958c80023a487089760545fda1751260f6#diff-de2dfcc43796b9f87cb55ee95e2f8f1dR292)) which unblocks me for now.   If you are satisfied with the fix on your end (i.e. just leaving those files in here but still commented out) feel free to close this :heart:
26000|@stevencl @bgashler1 @chrisdias fyi we should make a decision. I do like the idea of moving the views and panel back to be top level and the toggling stuff into a sub menu.
