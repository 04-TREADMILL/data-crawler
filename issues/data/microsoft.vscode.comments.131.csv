13001|@jon64digital Atom doesn't do this by default, and I'm not aware of any extensions to date that do (even vim-inspired extensions), but this is the extension use-case I was referring to in my last post.   **EDIT** refer to the comment by @jtosey above (about 9 days prior to this post).  Personally I could see this being an annoyance. Half the time I don't care about the view - just the controller, model and client-side JS. I would probably end up going insane if the view opened every time I opened the JS.  But then again, that's the beauty of an extension - if I don't like it I can turn it off.
13002|Gonna check it, but from the readme, the basic commands are all implemented in every extension because as you said, it's supported with the api and easily implemented.   However, for us long time vim users we've created a lot of customization to our vimrc (first issue, read the vimrc config) which include a lot of key mappings (almost nobody use Esc key, instead jj or Caps or whatever), leader key (usually ,) and that's when the trouble begin. Mixing commands is another problem if I recall.
13003|@egamma  I put some work into it and made a first experimental alpha release, which can be found on github... https://github.com/drywolf/code-solution-manager/releases/tag/0.0.1  ![code-solution-manager](https://cloud.githubusercontent.com/assets/394294/13725974/2d3251c6-e8b3-11e5-95a3-9722b60f520e.gif)  The interaction between the vscode's electron window and the extension's electron window works well. I tried several methods of using the Win32 API (via ffi) to actually switch to the vscode window by the users' selection. I ended up using [kernel32.AttachThreadInput & user32.SetActiveWindow](http://stackoverflow.com/a/2672292), which don't seem to work correctly when running the extension during debugging, but once the extension is installed natively in vscode everything works well. The window & keyboard focuses are working fine.  There are a few points though that are still making it rough to develop this further into a more meaningful, stable extension: - currently the extension has to heavily rely on the formatting of the vscode window title, since there is no way to get information about all opened windows in the vscode extension code (which led me to create this issue in the first place) - also I haven't tried if there would be a good way to share information back from the extension-ui electron process to the vscode extension process. Maybe some kind of ipc / http channel could work, but might also degrade the startup time of the UI further. - in the released version I made it so that the extension ui process will simply start and close each time that it needs to show the UI. I tried out some of [electron's support](https://github.com/atom/electron/blob/master/docs/api/app.md#appmakesingleinstancecallback) for leaving the process running in the background and just showing/hiding the window. This improved the startup time of the UI a meaningful bit, but also introduced problems since the process could keep running also after vscode was already closed. - the current vsix package of the extension weighs in at around ~70+mb since it has to include the electron binaries for the UI parts (this also seems to hit some kind of limit for the Visual Studio Marketplace, since I got a 404 error when trying to publish it via vsce) - for the mentioned points that I used the Win32 API and had to bundle a prebuilt Win32 version of electron, the extension will only work on windows. To get it to work on OSX/Linux I would have to also implement two code paths for the window switching for those platforms and probably release platform dependent versions of the vsix packages for each platform that include the required electron binaries.
13004|Hi **@pflannery**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
13005|@felixbecker are you suggesting that I propose to my team to change the codebase so that I can use VSCode?
13006|@Enquiren @ianwesterfield Yeah it's not limited to PHP and I don't understand why it was made to appear as a PHP-only issue. Just modified the title to reflect the initial one.
13007|"- Missing - - Delete commands such as such as ...   d$ = delete from cursor to the end of the line   df[char] = delete form cursor to [char]   di[bracket] = delete everything in bracket (This kinda has ties with visual mode which has been mentioned)   more... - I can't press ""f"" then a [char] to jump to that next occurrence of a given character later in the line. Same with F same functionality backwards. - ""/"" for searching is missing  There is a hefty chunk of VIM functionality here good job :). Can't wait to use this when its all fleshed out."
13008|Cooooool! When will the new version be released?
13009|@joaomoreno hygine isn't barfing at crlf for me _but_ it does barf on the copyright header and I have core.autocrlf set to true.  ![image](https://cloud.githubusercontent.com/assets/1727302/13727059/aa4fa4de-e8da-11e5-8aaa-6c397bd45c3d.png)  This PR #4075 fixes this, sorry didn't see this issueor @kumarharsh PR  before hand.
13010|It should be set to `autocrlf=input` instead.  Some how my git had reverted itself to autocrlf = true and even though I was installing git with my preferred LF option it wasn't actually overwriting the global config.
13011|closed in favour of https://github.com/Microsoft/vscode/pull/3835#issuecomment-195881279
13012|> e.g. using this text mate grammar: https://github.com/SublimeText/NSIS/blob/master/NSIS.tmLanguage  I added an extension. but It doesn't work.
13013|Help > Toggle Developer Tools > Console, I meant
13014|I think for March this could be better, we reduce the number of open file watchers for working files and you have the option to exclude files from watching. I suggest we give March a try and you open a new issue if that does not help.
13015|When working on feature requests like this one that have a very strong impact on UX, we typically first spend quite some time in UX meetings to discuss how the actual implementation should look like. We had **Improved document management** on our agenda for quite some time but other things on our GA list simply had higher priority (Accessibility for example).  We will pick this item up after our GA release end of month and start the discussion around how document management should work in the future. We do see some flaws with the current way how things work and know that we need to improve it. We think that even without tabs, there is some things that are simply not very intuitive in the way how the UX behaves today (Close Editor vs. Close File, the fact that side editors are behaving different compared to other editors, working files and quick open, etc.).  While the concept of tabs is well understood, we do not think that we could simply add tabs on top of our existing document management without revisiting our concepts there.  I do think we will have quite some discussions about how document management should work in the future and I think we are up for overhauling the concepts as we see it necessary.
13016|"@bording for me it opens 2 windows:  ![untitled](https://cloud.githubusercontent.com/assets/900690/13727949/437be39e-e907-11e5-9bbd-fc8541c8ca54.gif)  Can you doublecheck your global settings and maybe also the ""code"" script you use? Maybe it appends ""-r""?"
13017|Very cool! @aeschli since you own the themes I let you decide if we can add this for March, would be nice.
13018|@pflannery you should be able to run the tests from the command line easily by typing scripts/test.sh
13019|I think the insider version will be released tomorrow.
13020|@bpasero after reviewing the code for another issue, I don't understand why it isn't possible to just add tabs or what concepts you would have to change by doing so. It might go a long way if you could enlighten us, or is this a reference to the line of thinking in your original posts?
13021|@alexandrudima  Thanks! Will update amVim as soon as possible.
13022|@bpasero It was nice if you elaborated more on what is discussed and what are some of the approaches you see as possible solutions to the problems we posted.  P.S. I'm not sure whether it's possible with VSCode but some teams like Roslyn, TypeScript and few more share their design notes, it gives a lot of context to how they work and what's coming next, it also opens the community to new discussions, is something like this possible?
13023|@bpasero would the team seriously consider community attempts to add tabs. I don't mind trying, but I don't think anyone wants to waste their time if any effort would be blocked  I think your team is in vapor lock having made this molehill into the mountain.  Meaning: Tabs are constituent to, not synonymous with, the broader concept of document management. There are other issues already filed dealing with other areas of vscode's document management.
13024|We already discuss our UX ideas via issues in the open (see https://github.com/Microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aux), I would assume we would do the same for document management and tabs.  I also think we would not want these improvements to be done via extensions but rather have them as a core concept in the VS Code workbench.   Once we start the UX discussion in the team we would like to involve the community too and we would then also discuss flaws we see in our current design and what we plan to improve.
13025|@bpasero thank you so much, that's all I wanted to know. :)
13026|@mrmckeb I like the idea of a gui, and think @felixbecker has a good compromise to what @egamma brought up because I find updating the JSON to be faster.  Atom's implementation...it doesn't flow nicely. I find either scrolling forever (especially the beautify package), or jumping into each little extension's page and back again to be a clunky, uninspired design.  Not original, but maybe something akin to the tree in Visual Studio? That would eliminate jumping around to different views for extensions and keep scrolling to a minimum.
13027|@bpasero Awesome. I know you guys are putting a huge effort into the product and we all really do appreciate it. I think many of us just feel some frustration with the lack of tabs in the UI since we rely on them heavily and completely changing the way we work is not really an option. We want this to be the best editor out there and it's really close to accomplishing that.
13028|> This is a UX issue but let's say I have two files open and my cursor is on the right **_tab_**:  Wait! Tabs? What!? Where?  just kidding...
13029|@Tyriar fyi
13030|Ah, the difference between what you're doing in that gif and what I'm doing is that I'm just typing `code` and not supplying any file name.
13031|@bording same here
13032|Personally, I don't like GUIs for options at all, I really wish for the day that Visual Studio will have its options stored in a JSON file too. :)
13033|@bpasero If I also include a filename, then I see the behavior you show in the gif.  So, it seems like the behavior is inconsistent between including a filename and not.
13034|This is my outcome - cmd - git not recognized - powershell - git not recognized - git shell (which uses powershell in my case) - git version 2.7.1.windows.1  As it seems is the official github application is not setting the variables for the rest of the system, only for itself. is there a way vscode can still fix it for its own, it would just be great :)
13035|I see, you want to open an empty instance. Yes in that case we just give focus to the last active instance.
13036|And I am with Ian that I think this behavior is good even though not consistent.
13037|@afrcracks it is still there, what are you missing?
13038|@bpasero I agree, I vote for the current behavior. When I have split view and I activate one of them, I expect my selection in the tree view to open there. Not to say I've never accidentally opened the same file a few times now, but I don't think I would change it.
13039|Closing as designed.
13040|@feutl Change your PATH to include the git application. I think it is out of scope for VS Code to try to find the git installation if it is not in the PATH...
13041|Btw the largest chunk of stuff in app date is created by Chrome itself and is used for local storage, index db, etc. It would be easy to migrate and move our settings out of that folder, I am worried about migrating the rest...
13042|"I have issues with intellisense, too. I created isolated project with issue https://github.com/RANUX/vscode-ts-project-tests When i use ""exclude"" directive in tsconfig.ts, everything works fine, but when i try use ""files"" directive intellisense doesn't work :(  VSCode Version is 0.10.10 on OS X Yousemite. PS in js files intellisense works fine"
13043|We definitely would like to catch the case that all you have installed in the GitHub for Windows application as that seems to be a pretty common use case. But yes, adding it to your `PATH` for now is the workaround.
13044|"@bpasero thanks. Is there any way to map file navigation through _workingFilesPicker_? I would like the same UX as tapping through _recent files_ but I can't find the right commands. First I tried with  ``` json     {         ""key"": ""ctrl+tab"",         ""command"": ""workbench.files.action.openNextWorkingFile""     },     {         ""key"": ""ctrl+shift+tab"",         ""command"": ""workbench.files.action.openPreviousWorkingFile""     } ```  But that quick change through the _working files_ which is a bit too much screen flickering. I then tried with   ``` json {         ""key"": ""ctrl+tab"",         ""command"": ""workbench.files.action.workingFilesPicker""     } ```  But that just opens the file picker. Is there commands for cycling through the _workingFilesPicker_ in the same manner as _recent files_?"
13045|@felixfbecker  I do not think so, to be honest, @joaomoreno is right it is a common use case and it is the official way and tool from github for github. That's why I think this should also be handled by VSCode, sooner than later. There are people out there like me, who need git and github but only to get their work done, because it is a requirement and they want to use VScode, because its great :)
13046|"http://haacked.com/archive/2015/10/29/git-shell/ seems a good writeup how and what is going on. still for me not that easy to get vscode recognizing the existing portable git version coming with github desktop  I also found some articles to set variables using powershell http://windowsitpro.com/powershell/powershell-one-liner-creating-and-modifying-environment-variable  And using the original github shell script I wrote this. It sets the variable in user scope, permanently. I am not a pro and hope I didn't forget something but for me it worked :) VSCode is not complaining about missting git any more.  ``` powershell # ENV scope $option = ""User""  # POSH_GIT $name = ""github_posh_git"" $value = Resolve-Path ""$env:LocalAppData\GitHub\PoshGit_869d4c5159797755bc04749db47b166136e59132"" [Environment]::SetEnvironmentVariable($name, $value, $option)  # GIT $name = ""github_git"" $value = Resolve-Path ""$env:LocalAppData\GitHub\PortableGit_cf76fc1621ac41ad4fe86c420ab5ff403f1808b9"" [Environment]::SetEnvironmentVariable($name, $value, $option)  # Setup PATH $pGitPath = [Environment]::GetEnvironmentVariable(""github_git"", $option) $appPath = Resolve-Path ""$env:LocalAppData\Apps\2.0\0LECC9AO.GH1\1MM15X9J.2KX\gith..tion_317444273a93ac29_0003.0000_fce772470af3a014"" $msBuildPath = ""$env:SystemRoot\Microsoft.NET\Framework\v4.0.30319""  $env_path = [Environment]::GetEnvironmentVariable(""Path"", $option) $env_path = ""$env_path;$pGitPath\cmd;$pGitPath\usr\bin;$pGitPath\usr\share\git-tfs;C:\Users\hfeutl\AppData\Local\GitHub\lfs-amd64_1.1.0;$appPath;$msbuildPath""  [Environment]::SetEnvironmentVariable(""Path"",$env_path, $option) ```"
13047|> you should be able to run the tests from the command line easily by typing scripts/test.sh  thanks @bpasero . I was trying to use the launcher or test task but they aren't working.  Debugging is still a bit of chore but have it working like this  `scripts\test.bat --debug-brk -f ^cssTheme`
13048|"if refocusing on the active tab (read ""pane"" or whatever the technical term is in VSC) can be indicated with a flash, I'd be glad.   PS. I am a UX designer for what it's worth ;-)"
13049|"make sure to have this in your settings:  ``` json ""files.autoSave"": ""afterDelay"" ```"
13050|@weinand @aeschli  I should have stated it more clearly. Can VScode inherit cold folding from Visual Studio.
13051|This issue was moved to felixfbecker/vscode-php-debug#25
13052|This issue was moved to felixfbecker/vscode-php-debug#26
13053|@JanKok the PowerShell is not part of VS Code. Please move this bug to https://github.com/PowerShell/vscode-powershell/issues
13054|"@FeaRCODE VS Code is not based on Visual Studio, so I assume that you use ""inherit"" in the metaphorical sense, correct?"
13055|I'm hitting this issue as well. The feature is documented [here](http://lesscss.org/features/#css-guards-feature)
13056|@weinand Sorry, correct. I would like the styles and functionality to be the same. The way visual studio does it is very intuitive.
13057|"The ones triggering navigation in any quick open are:  ``` json { ""key"": ""ctrl+tab"",              ""command"": ""workbench.action.quickOpenNavigateNext"",                                      ""when"": ""inQuickOpen"" }, { ""key"": ""ctrl+shift+tab"",        ""command"": ""workbench.action.quickOpenNavigatePrevious"",                                      ""when"": ""inQuickOpen"" } ```  You can try it out now already by first typing the keybinding for working files list and then Ctrl+Tab. You can rebind those keys to get what you want."
13058|+1
13059|Can you please attach a screenshot of your whole vscode with the error message you get. Do you have some errors shown in the lower right corner of your screen?
13060|I also met this issue in Windows. And ruler lines are not re-drawn when I change Code Folding sometimes. (I don't know when it occurs expressly yet.)  The lines are re-drawn correctly when I change window size.
13061|We can't really make people write Changelogs... Clicking README will send you in the direction of the extension's homepage from which you can see the Changelog if the extension writer was kind enough to write.
13062|This is related to the font you are using and the lack of antialiasing. Any idea why Code is not antialiasing your font?  ping @alexandrudima
13063|@isidorn  Do you see the 4 default themes in the theme picker? Do they work?
13064|@aeschli yes, once I change the theme via the theme picker all is good. I am pretty sure I had the light+ theme picked, so my speculation is that the update somehow unset my chosen theme to no-theme-set. Is this possible?
13065|@feutl All you need to do is open Windows search and type _Environment Var_...  Under _System Variables_ select _PATH_, click _Edit_, and then _New_. You can either copy+paste the path were the git.exe is located or click _Search_ to get a folder picker. The GUI for this in Windows is really superb.  Often, there is also an installation option to add git to the PATH.
13066|That's currently not possible.
13067|@joaomoreno Is that you remembering everything that has been proposed ever?
13068|Did you try `Shift+Alt+F`? I don't know why but the syntax highlighting will be correct if you try reformat your code. Anyway I think the develop team should improve the syntax highlighting.
13069|In the March update the user can associate a .js file with JavaScript React (see below) and then you get emmet support in the .js file.   ![image](https://cloud.githubusercontent.com/assets/172399/13738811/b3a757a0-e9c7-11e5-972f-8bb7748f6f06.png)  A setting to enable emmet inside .js files doesn't make sense give the user can now associate files.   Keeping the issue open until users can try out this approach.
13070|Any idea about what you _actually_ do on step 2?  We'll likely close this since you did hit a warning and chose to ignore it (step 9) and there's a very easy workaround: reinstall it.
13071|I'm observing the same behaviour when running VS Code against a Dropbox folder managed via git.    I don't know if this can be classified as a bug in Code itself --it's as easy as not leaving VS Code running when you're at your other computer.  But the behaviour is somewhat confusing.
13072|@EisenbergEffect thanks for the feedback.  > At present, using ESNext features such as decorators  Actually decorators are supported and you can enable them in the jsconfig.json pls see https://github.com/Microsoft/TypeScript/issues/6872#issuecomment-190288631  > async/await, class instance fields, etc. results in the editor drawing red squiggles.  We will add support for disabling the built-in diagnostics, pls see the discussion in  #3804 and I'm closing this issue in favor of this one.
13073|closing as a duplicate of #3804
13074|This is really strange.  Can you run this simple NodeJS script by putting in `script.js` and running `node script.js` from the Command Prompt?  ``` http.get('http://www.google.com/index.html', (res) => {   console.log(`Got response: ${res.statusCode}`);   // consume response body   res.resume(); }).on('error', (e) => {   console.log(`Got error: ${e.message}`); }); ```  What do you get from it?
13075|This issue was moved to OmniSharp/omnisharp-vscode#83
13076|This was done with the adoption of Salsa in the Feb release
13077|@v-pavanp What are your settings? (what font / font size / etc. do you have configured) ?  @joaomoreno I think the suggestions are rendered with the same font as the editor, but in a smaller font size. This breaks bitmap fonts.
13078|Closed with the adoption of Salsa.
13079|Closed with the adoption of Salsa.
13080|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13081|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13082|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13083|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13084|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13085|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13086|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13087|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13088|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13089|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13090|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13091|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13092|This doesn't seem to be a bitmap font. Look at the fonts in the explorer. Font antialiasing is just disabled, which can be done in Windows as a choice.
13093|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13094|Closed with the adoption of Salsa (https://code.visualstudio.com/Updates#_languages-javascript).
13095|If you open preferences > keyboard shortcuts do you see <kbd>F5</kbd> assigned to `workbench.action.debug.start`. What happens if you assigne some other key to `workbench.action.debug.start`? Can then this other key start debugging for you?
13096|This issue was moved to OmniSharp/omnisharp-vscode#84
13097|This issue was moved to OmniSharp/omnisharp-vscode#85
13098|You're right
13099|This issue was moved to OmniSharp/omnisharp-vscode#86
13100|This issue was moved to OmniSharp/omnisharp-vscode#87
