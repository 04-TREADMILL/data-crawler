3201|For sure a pattern that established before ES6 was finalised. Use this as reference: http://www.2ality.com/2014/09/es6-modules-final.html
3202|get it, tks for you reply
3203|@b12k  found an interesting line of code:  https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/options.ts#L43  ``` /**  * A number indicating the auto save delay in ms. A time of -1 indicates that  * auto save indicates that auto save is turned off completly.  */ autoSaveDelay?: number; ```
3204|`.gitignore` will only hide the items from a commit, not hide them within the Editor
3205|Dear friend,  I just unzip the VSCode and ran on RHEL6.7. It shows:  ./Code: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by ./Code) ./Code: /lib64/libc.so.6: version`GLIBC_2.14' not found (required by ./Code) ./Code: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by /home/simonyhchen/Downloads/VSCode-linux-x64/libnode.so) ./Code: /lib64/libc.so.6: version`GLIBC_2.14' not found (required by /home/simonyhchen/Downloads/VSCode-linux-x64/libnode.so) ./Code: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by /home/simonyhchen/Downloads/VSCode-linux-x64/libgcrypt.so.11) ./Code: /lib64/libc.so.6: version`GLIBC_2.15' not found (required by /home/simonyhchen/Downloads/VSCode-linux-x64/libgcrypt.so.11)
3206|Closing for now since there is not enough info. Once provided will reopen.
3207|Ben you wanna take this over, if not assign back.
3208|Looks like code is assuming glibc 2.14 is present. I'm not too familiar with RHEL, you can try use `yum` to install the correct version, `yum install glibc` (or something)?
3209|I see. I understand it is two distinct issues so. 1- Is too many files to deal with because ignore is being... ignored. 2- Is no IntelliSense even in small projects where ignore can be ignored. (What makes me create this issue)
3210|This was fixed
3211|1. We cannot handle large amount of files in web workers - Will be fixed by adopting project Salsa asap Microsoft/TypeScript#4789 2. Failing to handle the `exclude`-property correctly leads to large project (node_modules et al). That is fixed in master (#703)
3212|1) Manually creating the configuration does not work 2) There is nothing in the console.
3213|Thanks, lets check tomorrow.
3214|@jcward since we do support ANSI coloring in other places, I think the output you send might not be UTF 8 and thus we fail to understand the escape sequences. I am closing this one optimistically.
3215|@daviwil you can hide it already from the View menu or do you mean a permanent option? How would you then be using search, git, debug etc?
3216|Hi **@hashhar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
3217|**@hashhar**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
3218|Hi Martin,  Sorry, have no screenshot available right now.  What I mean is that when in an .html file I type class='btn btn-' I don't get auto complete suggestions. And when I press Ctrl+.  a popup appears saying something like No symbols found.  Best regards, Ad.  Op 8 dec. 2015 om 09:28 heeft Martin Aeschlimann notifications@github.com het volgende geschreven:  @areijngoudt https://github.com/areijngoudt Maybe I misunderstood what you meant with 'css intellisense'. Is it about completing the href in a link tag, or is it about completing css rules inside html. Can you give a more compete example code and write what completions you expect? A screenshot would be great.  — Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/1005#issuecomment-162812112.
3219|Fixed #348 with 53186e97a62d059d8bc6bcffd88896ea7a531571 that leaves the ShiftCommand language agnostic.
3220|@dbaeumer I'm using 1.7.3 now, and the issue seems to be resolved with this version of Typescript.
3221|Sorry, I wasn't clearer about the issue.  The problem is that having two extensions with the same name but different publishers (such as would occur if someone takes ownership of an extension or moves to a shared publisher account such as ms-vscode) breaks the Extension: Show Installed Extensions dropdown. ![broken show installed extensions](https://cloud.githubusercontent.com/assets/12818376/11663753/cfec85a6-9d92-11e5-9948-5e254b8e84fd.png) No installed extensions are shown.  VS Code should be resilient to this case and show both so the user can remove the older extension.
3222|I may need some help to get the script going for OSX. I will try writing some more code to handle the edge cases (observed using comments in the file TODO, BUG, ENHANCEMENT etc.) and read some documentation about OSX.  But it may take longer because I am in the middle of my semester exams here.
3223|I was actually referring to the workspace buttons themselves:  ![image](https://cloud.githubusercontent.com/assets/79405/11664450/b3a00900-9d96-11e5-8004-f3e265c80367.png)  Sorry for not being more clear!  If they're not visible I'd just use key combinations to navigate to them.
3224|I found a temporary workaround, using powershell instead of cmd:   ``` powershell $class = [System.IO.Path]::GetFileNameWithoutExtension('${fileBasename}'); java org.junit.runner.JUnitCore $class ```
3225|Provided symbolic link creates an additional folder under runtimes, so it still wasn't resolved. Correct (still hacky) symbolic link I believe is:    ``` ln -s /usr/local/lib/dnx/runtimes/* /Users/<User>/.dnx/runtimes/    ```
3226|I think this is the same as https://github.com/Microsoft/vscode/issues/719?
3227|On further investigation, as long as the two extensions have different publishing metadata (as would happen if you republish with another account), the Show Installed Extensions behaves correctly.
3228|Thank you very much! I'm looking forward to the next version.
3229|:+1:
3230|@lukehoban Yes, you're right.
3231|As i said i am new to this so why isnt this possible? Please give me more information so i can learn how to propely run my programs. Thank you for your reply  Date: Mon, 7 Dec 2015 13:23:18 -0800 From: notifications@github.com To: vscode@noreply.github.com CC: thibault.magnini@hotmail.com Subject: Re: [vscode] error while processing request ' _request ' (exception exception )  (#1083)  This is the error that comes up when i try to launch my first program.   You are using Visual Studio Code and are creating a launch configuration?  — Reply to this email directly or view it on GitHub.
3232|I'm experiencing the same issue, where setting a breakpoint in my compiled files makes the red dot _jump_ to the line where the content is in my source files, but these lines do not match 1 to 1 (e.g. my source files contain comments, my compiled files don't).  I tried the above solution by setting `sourceRoot` but it didn't change anything for me.
3233|"@bpasero There's already items within the ""View"" menu for toggling other things like the sidebar and full screen mode, so I think it'd make sense to have the menu bar toggle there as well.. With the way settings are currently done in VS Code I don't think that'd be the best place for it.   As far as persisting the toggle across sessions I'd agree that it's something needed."
3234|http://ww1.sinaimg.cn/large/0060lm7Tgw1eyt461wk05j317d0swq8m.jpg Hi ,here is the call stack  By the way, why the keyword 'const' is not highlighted?
3235|Duplicate of https://github.com/Microsoft/vscode/issues/313
3236|Looks like a duplicate of https://github.com/Microsoft/vscode/issues/48
3237|This is a question that should probably be posted to Stack Overflow.  Yes, you should be able to move between VS2015 and VS Code for **ASP.NET v5** applications.  I can open your repository just fine on the Mac with VS Code.    We do not yet support debugging of C# (**ASP.NET v5**) applications in VS Code running on Mono or on the CoreCLR. This is why you are seeing problems launching the debugger.  We demonstrated a preview of debugging ASP.NET v5 applications at the Connect() event a couple of weeks back, and the team is hard at work getting something out early next year.  Sorry that we don't have this  yet, but it **is** coming :)
3238|This is good feedback, thanks, and i agree it would be better to have a preview of the theme as an icon. I see that you've already created an issue in that theme repository. Other than asking genare to do this work, I don't know what else I can do to resolve this issue as it is more feedback than a task.  I'm going to close this and if you've have something specific I can do, please re-open it.
3239|@rstat1 right, those things are being persisted though (except for fullscreen, but that is for other reasons). We have 2 stories for persisting state: Either in the settings.json which is owned by the user or in local storage which is more for UI state. I think this should probably go into the local storage category as long as there is a menu item to toggle it.
3240|@bpasero Local storage it is then!
3241|@Tyriar thanks - closing as duplicate of #313
3242|You do not have to restart the editor. The explorer view has a refresh button in its tool bar for such situations.  There is still a bug in that the explorer should refresh automatically, but without reproducable steps are some hints when this happens we cannot fix this issue. Please reopen if you have more steps or context.
3243|yes, closing as a duplicate of #719
3244|Did you have auto save (File>Autosave) turned on?
3245|This repository is for tracking Visual Studio Code issues/bugs etc, this is the wrong place for asking such questions.
3246|@freezestudio Can you please share the file with us?
3247|Seems to be a dup of #31
3248|Thanks @areijngoudt, I updated the issue title
3249|Why hello @joaomoreno. In investigating this, I'd like to point out that user error is plausible :)
3250|@egamma maybe you can also share the link to information, how code's team prepare builds for windows and mac? Are you using windows to make build for windows and mac for mac build? Maybe there is already blog post? otherwise it would be cool topic for the new article in the blog :)
3251|There is no blog post yet and I have no link I can share yet, but I agree that this would be a good topic for an engineering blog post. Is your background that you would be interested in building electron apps in general or is it VS Code specific?
3252|Absolutely.
3253|Yes it will.
3254|duplicate of #842
3255|There is nothing in the console so it is probably missing file events on Centos as @bpasero suggested. Giving to you Ben
3256|This might be fixed with future versions of Electron, I saw something...
3257|"@jacdavis can you run with ""--verbose"" and open the dev console to see file events being printed when the file is created? I suspect file events are not working. Alternatively, if the file is there does a restart show the launch configuration eventually?"
3258|As mentioned in #1119, we need to track down the root cause for the incomplete uninstall, but we should also be able to recover automatically or assist the user to recover from such corrupted extensions.
3259|@bpasero  Ok, so I added the ability to save whether the menu bar is auto hidden or not. Not sure if I've done everything in the right places.  Also there appears to be merge conflicts that I (being a git/github noob) have no idea how to resolve.
3260|@rstat1 from your branch you can update the pull request easily by merging in the changes from master.  - git remote add upstream https://github.com/Microsoft/vscode.git - git pull upstream master - fix conflicts - git push
3261|Yes, that's related to the change to use the TypeScript textmate grammar. The new grammar has chosen to not emmit specific tokens for object keys. Moving as an enhancement request to the typescript grammar repo.
3262|This issue was moved to Microsoft/TypeScript-TmLanguage#23
3263|cc @egamma  related: #498
3264|@egamma both. I'm trying to build electron app as my pet project, but I use VSCode to do it and since in the VSCode has been done great job to build and deliver this type of application, it's very interesting for me(and I believe for many other developers) to understand, how to set up this build process, I didn't find enough information in the electron's docs.
3265|Sorry I missed that, thanks @jrieken!
3266|@bpasero aha! It worked! Thanks :)
3267|Thanks @Tyriar !
3268|Thanks @evalphobia !
3269|This issue was moved to textmate/coffee-script.tmbundle#8
3270|This issue was moved to textmate/c.tmbundle#30
3271|:+1: I like the idea
3272|The bug was that /\* */ was used as VB block comment. VB doesn't support block comments
3273|I removed the (comment ) block which seems to be standard.
3274|That's the expected bahaviour. Codelens should only show up on the side representing the current file content.
3275|I understand the motivation for this and I am aware that this is a stopgap solution due to the fact that we do not have a richer notification UX.  As a stopgap though, I think I would prefer that we have a command in the View menu, 'Show extension warnings and errors' that is off by default. The issue with having an icon in the status bar that when clicked shows the extension commands is that it doesn't provide all that much value to begin with. Then, when there are errors, the changes in colour may be more likely to be missed, as many users may not have been paying that much attention to the icon in the status bar.  Another stopgap solution would be to add another label next to the icon whenever there are errors which shows the number of errors. If that is clicked then we show the extension errors immediately rather than just showing the extension commands.  More importantly though, this highlights the need for a rich notification UX in the product. We have started littering the status bar with notifications like these, all of which when clicked present some info at the top of the screen (in the command palette/quick open). The distance between the status bar and quick open is sufficiently large for these affordances to feel disconnected. While it helps reduce the number of different UX affordances we have in the product (a good thing) I think it requires too much travel with the mouse and doesn't support a holistic view of all of the notifications and warnings that the user needs to pay attention to.  Ideally we require a much richer notification UX for the whole product. This is something we need to work on and is on our UX backlog.
3276|@havenchyk makes sense, thanks.
3277|@stevencl all your points make sense @egamma @chrisdias should decide if the current solution is a good enough for temporary or we even do not want that.
3278|@stevencl makes good points.  We need a way to show a user conflicts in the extensions. This is a pain point we have to address now and we need to deliver a minimal tactical solution for this.   > Another stopgap solution would be to add another label next to the icon whenever there are errors which shows the number of errors. If that is clicked then we show the extension errors immediately rather than just showing the extension commands.  This works for me.
3279|+1
3280|Yes, this is quite bad. Duplicate of #1003
3281|windows10 10586.17  vscode0.10.3 1.setup:NTVS 1.1 VS 2015.msi 2.update npm cache 3.file here: X:\Users\xxx\AppData\Local\Microsoft\Node.js Tools\NpmCache\all_packages.json
3282|With 98473e0e88cecd52ba44551d512efe445b6af11e, VSCode's extension host will now call `deactivate()` if extensions export it and call `dispose()` on `ExtensionContext.subscriptions` on shutdown, then will wait 1s before exiting
3283|With 98473e0e88cecd52ba44551d512efe445b6af11e, VSCode's extension host will now call `deactivate()` if extensions export it and call `dispose()` on `ExtensionContext.subscriptions` on shutdown, then will wait 1s before exiting
3284|With 98473e0e88cecd52ba44551d512efe445b6af11e, VSCode's extension host will now call `deactivate()` if extensions export it and call `dispose()` on `ExtensionContext.subscriptions` on shutdown, then will wait 1s before exiting
3285|With 98473e0e88cecd52ba44551d512efe445b6af11e, VSCode's extension host will now call `deactivate()` if extensions export it and call `dispose()` on `ExtensionContext.subscriptions` on shutdown, then will wait 1s before exiting
3286|@freezestudio I would really appreciate if you could share the actual file (it would save me quite some time). You can zip it up and drag&drop it in a comment.  From the size (96MB) I think it is very close to our hard stop.  @bpasero Do you remember what our hard stop size is?
3287|@alexandrudima MAX_FILE_SIZE = 100 \* 1024 \* 1024
3288|zip it : size:17223kb  I am sorry, Upload unsuccessful
3289|Glad to finally find an explanation for this, been going mad wondering why my tasks all broke. Now up and running again.
3290|![all_packages zip 002](https://cloud.githubusercontent.com/assets/5157556/11686126/6d02f52e-9eb9-11e5-8b19-157a55ec6060.png)  ![all_packages zip 001](https://cloud.githubusercontent.com/assets/5157556/11686133/78239224-9eb9-11e5-93d6-5c4f8b795fa1.png)
3291|all_packages.zip.001.png --> zip 1  : all_packages.zip.001 all_packages.zip.oo1.png --> zip 2 : all_packages.zip.002  use 7-zip x64
3292|:+1:  (just like good old vim?)
3293|"The setting `sourceRoot` is for `gulp-sourcemaps` just to be clear.If you are using gulp to transform you probably have a script that looks like this  ``` gulp.src(""src/**/*.js"")     .pipe(babel())     .pipe(sourcemaps.init())      .pipe(sourcemaps.write()     .pipe(gulp.dest(""dist"")) ```  .. or thereabouts, the option would be added to   ```     .pipe(sourcemaps.write({ sourceRoot: ""../src"" }) ```  But again this will only work for trivial cases, if you have files in a child directory of `src`, it won't work.  As an alternative, I forked `gulp-sourcemaps` and have basically fixed the problem if you want to try it:  https://github.com/jamietre/gulp-sourcemaps  The change requires a new option `outputPath` that lets it know how to find the relative path from the source map to the source file, if your source maps are written alongside the compiled files, then it would just be the same as you pass to `gulp.dest`. So like this:  ```     .pipe(sourcemaps.write({ outputPath: 'dist' }) ```  ... in this case you **do not** want to use `sourceRoot` at all, in fact it will break it.  Works for me - not heavily tested though I did add unit tests, give it a shot if you like. I am not optimistic that `gulp-sourcemaps` itself will get fixed since there are stale pull requests that seem related to this, so I might publish to npm after road testing a bit."
3294|@aeschli Only `overwriteBefore` and `overwriteAfter` left...!
3295|@joaomoreno I'll work on it ASAP
3296|@freezestudio Thank you! Got the file! You are awesome! :sunny:
3297|"I like this however where would this setting file live? Why not have it top level in our launch.json, as a sibling to `""configurations""` we could have `""exceptions""`. Putting it in a separate file has the downside of introducing one more configuration file and it would be disconnected from other debug configurations. Another thing to tackle is how to disable / enable these exception breakpoints from the UI. There can be an option for global enable / disable but not sure how to disable one specific breakpoint. Though we can discuss this later.  @weinand, @stevencl thoughts?"
3298|I would use our regular intelli-sense box and not introduce a new concept. As for the particular commands each debug adapter would have to contribute the,
3299|@jrieken this is the one we were just talking about
3300|Nice idea - however not sure if possible with our tree which we use for showing variables.  I would not introduce this concept until users start asking for this since we currently support word wrap in repl thus there is a nice alternative to inspect long strings there. Also we have context menu actions which provide some functionality for inspecting long values.
