26101|Finally, I've also tried removing `id` from both schemas, it does not help.
26102|@joaomoreno - The copyright header check fails for me, because the expected header has '\n', and it checks for that exact string. Maybe use '\r\n' when `core.autocrlf` is true, or check for either type with a regex?
26103|I agree with @stevencl about _not_ using `pinned` (the term means something different in browsers as well).  I actually think that `pending` sounds okay, as in:  ``` 1. Not yet decided or settled; awaiting conclusion or confirmation. 2. Impending; imminent. ```
26104|Update from the windows console team https://github.com/npm/npm/issues/12887#issuecomment-226011262:  > Hey everybody, >  > I'm an engineer on the windows console team, and I've been investigating this a little bit on our end. It seems as though yes, resizing the console window (any conhost window, cmd, powershell, bash.exe, etc) could cause that particular exception to get thrown by npm. Turns out it was an exception in the lower levels of conhost itself. >  > I'm happy to say that fortunately, this has already been fixed, and should be on it's way out to insiders soontm, however the best I can say is that it should be fixed when the Anniversary Update officially ships. >  > Sorry for any troubles this regression may have accidentally caused!  As such, I'm closing this off as it's being fixed in Windows.
26105|@foxundermoon if the unitcode char in question is a full width character then the root cause is an upstream issue. We have changed libraries used but it will still probably happen in insiders. https://github.com/sourcelair/xterm.js/issues/62 will probably fix this.
26106|I have having the same exact issue. - OS Version: OS X El Capitan Version 10.11.5 - VSCode Version: Version 1.2.0 (1.2.0)   ![screen shot 2016-06-15 at 1 55 10 pm](https://cloud.githubusercontent.com/assets/6865143/16091311/172d4c1c-3301-11e6-83df-0b765cd1e576.png)
26107|"@be5invis ""(The full alglrithm of how character widths are calculated is listed in consolelib.cs#L676.)""  Thanks for linking to this.  I wonder if the algorithm explains the curious behavior I noticed where the character width (half or wide) alternated back-and-forth as the console font size increased one-by-one: https://github.com/rprichard/winpty/blob/d7290359d59b6c75ded0e89370475edaaff1555b/misc/Font-Report-June2016/CP936.txt#L12.  That behavior stops in Windows 10, but only with the non-legacy console enabled.  I was wondering how the PSReadLine author figured out that algorithm, but then I noticed the Microsoft copyright.  Perhaps the author simply looked at the console source.  It looks like vscode is using a pty.js fork at https://github.com/Tyriar/pty.js, which is only slightly patched from https://github.com/platformio/pty.js.  The platformio pty.js is using a much newer winpty version, though it still has the `winpty_open_use_own_datapipe` function added in.  winpty master at https://github.com/rprichard/winpty has changed quite a bit very recently.  There are quite a few bug fixes, and the API has changed somewhat.  Instead of passing a data pipe name to `winpty_open_use_own_datapipe`, pty.js should be able to query winpty for CONIN and CONOUT pipe names, then connect to the two pipes (i.e. using CreateFile, not CreateNamedPipe).  Current winpty master changes the font as the window resizes (to fix https://github.com/rprichard/winpty/issues/61), so using `SetFont.exe` would tend not to work after updating winpty."
26108|Great to hear that the main issue is the font wasn't being set. In 1.3.0 the font's default fallback is `editor.fontFamily` but you can set it explicitly with `terminal.integrated.fontFamily` https://github.com/Microsoft/vscode/issues/6791  I'm going to close this off but these issues may still be blocking this: - Terminal themes https://github.com/Microsoft/vscode/issues/6979 - Correctly represent full width characters https://github.com/Microsoft/vscode/issues/7448, https://github.com/sourcelair/xterm.js/issues/62
26109|That fix didn't work unfortunately, still doesn't recognize Bash on Ubuntu on Windows.
26110|@VitorLuizC can you paste in some of the problem characters? Also do you have any terminal-specific settings set in your settings.json?
26111|What happens when you add that setting and restart vscode? Can you take a screenshot?  You could also try: `C:\\Windows\\SysWOW64\\bash.exe`  And if that doesn't work, check to see that the executable is actually located there.
26112|I briefly looked into this and have a questoin: is there an easy way to open the file as it is on the disk without the changes? Using the URI of the current editor opens a file with the unsaved changes.  I was able to use a textdocumentprovider that read the file contents from disk, but then that side didn't have text highlighting because it was a text document.
26113|I agree :+1: it is not the biggest of a deal  edit: on the other hand when you are just using php with e.g. a CMS you got lots of one liners between your html code. All those <?php echo($some_value_into_your_hmtl)?> lines wont get recognized. That really messes with your ability of visual recognition.
26114|+1
26115|By analyzing the blame information on this pull request, we identified @egamma and @isidorn to be potential reviewers
26116|I tried again to see if any processes are actually started, but no VSCode process is being started at all, when trying to start in offline mode. Unfortunately I don't have another Windows 8 machine to try and see if I can replicate the issue.
26117|I see mentions of unbounded json string buffers growing due to lack of `\n` -- doesn't osx/unix use a `\r` for line breaks? :D
26118|Same issue here.  El Capitan, Nightly Vscode 1.3.0-insider (started to happen with this version).  I work with 2 panes and suddenly one closes. Drives me crazy. I cannot track down precise steps. As @eamodio said: very random. Sometimes it seems to be tied to copy&paste, sometimes to cursor text select and sometimes to simple click.
26119|The chromium version we build on doesn't yet seem to support 4 and 8 digit colors. I'd rather wait until this is more adopted.
26120|@paragdiwan this should be fixed in v1.3.0
26121|Thank you !
26122|actually, could this be globbed please?   If my TS file is in a sub-directory, it doesn't seem to be able to find the breakpoints either.
26123|+1
26124|The tab key invokes emmet.  For reasons unknown to me, emmet expands ':' to ':::'.
26125|This issue was moved to Microsoft/TypeScript-TmLanguage#187
26126|@pcherkasova Can you paste the full snippet?
26127|I don't know why Monokai doesn't highlight <?php and ?>. We are not the author of the Monokai theme. From the dark+ theme I see that these elements are highlighted, so it looks like special tokens are returned and could be colored. Please file separate bugs for JavaScript and C#. If possible add screenshots and snippet. Note that for C# you need the OmniSharp extension and issues can directly be filed against https://github.com/OmniSharp/omnisharp-vscode.
26128|"My folder's name is ""Paçoca"", so the ""ç"" is the only special character, and no I didn't have any terminal-specific settings in my settings.json.  ![settings.json screenshot](https://i.gyazo.com/218b7ae9af10fdee37f4f168957e6244.png)  I've tried to open integrated terminal in another folder without special characters(""Pacoca"") and it worked."
26129|Closing. I looked into it but it turns out to be a bigger change. Also it would cause a lot of ripples.
26130|duplicate of #4101
26131|@be5invis yes i know,but font size is only one.
26132|Not sure how to reproduce... The console error 'setDecoration on invisible editor' looks suspicious. The implementation is now very different after moving css to an extension. I close this and I suggest you reopen if you see it again.
26133|`ctrl+shift+l` is mark occurrences. What is the action you execute? Also a screenshot before and after would be helpful.
26134|"Maybe just differentiate between the /terminal/ and the terminal /panel/ - `workbench.action.terminal.panel.close`. Also, perhaps this should be in another ""ticket"" but is there a `terminalFocus` context similar to `editorFocus`? Ideally, I'd like to be able to close the terminal panel when it's focussed with the ESC key (I've tried `!editorFocus`)"
26135|This issue was moved to Microsoft/TypeScript-TmLanguage#188
26136|Seems fine on stable and insiders on Linux:  ![image](https://cloud.githubusercontent.com/assets/2193314/16095193/6bb0ab7a-32f8-11e6-994e-5d87314fbbbd.png)  Perhaps it's only happening on Windows?
26137|Do you suggest to remove .desktop from the file extensions for ini?
26138|@tills13 yes I think eventually there should be some `terminalFocus` that you can use in your keybindings with a `when`.
26139|It's probably preferable to lose the property highlighting over incorrectly indicating comments yeah.  What's the protocol on adding niche language grammars like this? No one will bother download an extension for .desktop files but it would be handy to have valid highlighting.
26140|"**For people wanting this feature right now, read on.**  Ok it seems this function is already implemented on js-beautify, see: https://github.com/beautify-web/js-beautify and look for this setting: `-A, --wrap-attributes              Wrap attributes to new lines [auto|force] [""auto""]`  So, I did some digging in the source code and found the setting in the _beautify-html.js_ script. I modified the **wrap-attributes** settings from **auto** to **force** and voila, it works!  Here is the repro for people wanting this feature also: - locate the **beautify-html.js** file (mine was located here: _C:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\languages\lib\common_) and create a backup of the original file, just in case you mess up the file. - For people on Windows, first copy the original file to a location where you are allowed to modify the file, because you are not allowed to edit the file directly at the 'Program Files (x86)' folder. - Then look for this setting: w=void 0===i.wrap_attributes?""**auto**"":i.wrap_a and just replace **auto** with **force**, so you get: w=void 0===i.wrap_attributes?""**force**"":i.wrap_a - Now just copy back the modified file and restart VS Code. Now you should be able to format the html with Shift+Alt+F and get the html attribute formatted on separate lines."
26141|It has to be an extension, I don't see us author and maintain support for such rarely used file types. We should make it easy though to find and install such an extension. E.g when opening a .desktop file we should propose to install support for it.
26142|duplicate of #5426
26143|"I might have missed this but I'd really like a formatting option to have JSON formatting not insert a new line after the comma in an array of objects.  e.g.  ``` [     {         ""name"": ""value1""     },{         ""name"": ""value2""     } ] ```"
26144|I don't know if it matters but that folder is inside my OneDrive folder.  ![Folder's path](https://i.gyazo.com/7e9e5e10cdcb4dcf6ece2fe1822bb880.png)  ---  After a new test i've checked that doesn't matter.
26145|same as lllopo, under the same condition defined by dbaeumer.
26146|> I added them back to editor.main.ts, so they show up again in the standalone editor  worked like a charm :rose: Thanks!
26147|@rprichard Width is complex, default DBCS fonts has complex gridfitting mechanism (which may change character width under GDI) and embedded bitmap, the latter one may be crucial (because these fonts do not have odd-sized bitmaps). Inziu is vector-only, and it may perform better consistency. cc. @lzybkr
26148|@iscraft CSS does not support size adjustments in font linking. Your feature cannot be implemented.
26149|"In the Mouse Control Panel -> Wheel Tab, there are two settings for Vertical Scrolling.   Roll the wheel one one notch to scroll: ""The following number of lines at a time"", or  ""One screen at a time"""
26150|Chinese folder or  Japanese folder so does on Windows 10！！
26151|+1. Happens when highlighting frequently for me. Interestingly, even though the file is removed from the working files list when I reopen the file the code I had highlighted when the pane crashed was still highlighted. So it seems like the context for editing the file is intact, the viewing panel just ceases to exist. Also this appears to be language agnostic - I've seen it in CoffeeScript files and LESS files.  VSCode Version 1.3.0-insider OS Version OS X 10.11.5
26152|@mhofman our next move for markdown is allowing you to add plugins for markdown-it. Once we have that, you can customize the id/name generation by yoir own script.
26153|Must be a windows thing, I'll try have a look at this for v1.3
26154|sorry, is an extension of the resulting.
26155|same here, ubuntu 16.04 just updated vscode today
26156|When you say restart what do you mean - clicking on the restart button does not restart the session - if that is the case then it is a bug and please file a seperate issue. The debug panel behavior has changed in the latest release, we have intoduced an options to control this, please check it out https://code.visualstudio.com/Updates#_debugging
26157|- <kbd>ctrl</kbd>+<kbd>`</kbd> toggles the terminal - <kbd>ctrl</kbd>+<kbd>1</kbd> focus first editor - <kbd>ctrl</kbd>+<kbd>2</kbd> focus second editor - <kbd>ctrl</kbd>+<kbd>3</kbd> focus third editor  A focus terminal command is coming in v1.3.0 which will allow you to toggle the terminal without dismissing it first.
26158|This is already fixed in master, coming in v1.3.0
26159|This is something for our next UX meeting to discuss. @Tyriar we typically meet Wednesday at 5 PM Zurich time.
26160|@johnnyPescarul can you run `code --version` and see output?
26161|Done, thanks.
26162|stable works as intended, I can use ext install. renaming the insider executable didn't change anything.
26163|Totally forgot about the devTools:  workbench.main.js:115 connect EACCES 191.238.172.191:443: Error: connect EACCES 191.238.172.191:443     at Object.exports._errnoException (util.js:890:11)     at exports._exceptionWithHostPort (util.js:913:20)     at TCPConnectWrap.afterConnect [as oncomplete](net.js:1061:14)  workbench.main.js:88 connect EACCES 191.238.172.191:443: Error: connect EACCES 191.238.172.191:443     at Object.exports._errnoException (util.js:890:11)     at exports._exceptionWithHostPort (util.js:913:20)     at TCPConnectWrap.afterConnect [as oncomplete](net.js:1061:14)
26164|Yes, I need the `getActionItem` API to get the icon in. With that I can just use the icon path(s) and don't have to generate and manage css styles for each of them (see https://github.com/Microsoft/vscode/blob/joh/menus/src/vs/platform/actions/workbench/actionBarContributions.ts#L165).   To solve your problem: How about wrapping action into another action that keeps a reference to the provider? Or having somewhere an identify mapping of Action -> Provider?
26165|Oh, and this became less important for me since I now use a special action of which I can switch: https://github.com/Microsoft/vscode/blob/joh/menus/src/vs/platform/actions/workbench/actionBarContributions.ts#L85
26166|@jrieken yes I thought about doing the wrapper thing.   Given your https://github.com/Microsoft/vscode/issues/7710#issuecomment-226402768 you will not do unnecessary work for all the other actions that float around.
26167|@hydranix: #6608
26168|@bpasero I see the point with two icons but effectively we cannot make sure those icons look good or aren't the same. I think with a simple path you get to going quickly and then make theme changes - it's also what we do for editor decorations.   Wrt the explorer I understand we have four places: `explorer/primary`, `explorer/secondary`, and primary & secondary for context items. For now, I am planning to start with secondary action for items. I wonder if we should stick with `explorer/context` (which aligns nicely with `editor/context`) and in the future have `explorer/context/primary` for the primary actions on items?
26169|"OK, so I'll try to compile it all down: - Error is `connect EACCES`, happening on Windows - Always happens on the insider executable - Never happens on the stable one - Both stable and insider builds do exactly the same when talking to the Marketplace  Googling a bit for [""connect EACCES"" windows](https://www.google.ch/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=%22connect+eacces%22+windows) yields firewall issues: - http://stackoverflow.com/questions/26192865/npm-install-eacces-error-on-windows - felixge/node-mysql#858  I suggest once again to disable any firewall on the system. Also check the Windows firewall. Usually, when a new application comes along there is a firewall permission dialog that will let the user block the application from making network requests. It's possible that this dialog was dismissed thus leaving the Insiders release unable to contact the Marketplace."
26170|The issue title might be a misaligned with the actual issue here, but confirming the actual problem. It appeared a couple of daily builds ago this week, and is quite annoying. Based on a quick experimentation, if the value before semicolon is not a number, then this problem appears. In other words, `margin: 0;` does _not_ cause the issue, but `margin: 0px;` does.  A sample gif attached (I'm pressing enter after typing in the semicolon).  To clarify, the `.border()` etc values in the auto-suggestions are LESS mixins I've got, in case the use of LESS might make a difference here.  ![vs-code](https://cloud.githubusercontent.com/assets/101693/16108501/1aa36e70-33ac-11e6-915b-e51be8de3c42.gif)
26171|"> @bpasero I see the point with two icons but effectively we cannot make sure those icons look good or aren't the same. I think with a simple path you get to going quickly and then make theme changes - it's also what we do for editor decorations.  Ok, if we have a similar API model elsewhere already, +1 for keeping it the same.  > Wrt the explorer I understand we have four places: explorer/primary, explorer/secondary, and primary & secondary for context items. For now, I am planning to start with secondary action for items. I wonder if we should stick with explorer/context (which aligns nicely with editor/context) and in the future have explorer/context/primary for the primary actions on items?  +1 for starting with something small and opening the API later for other use cases. The only thing I worry is that we now introduce a path (e.g. `explorer/context`) that we later need to deprecate because we found out it is not specific enough. If I think about all the places where one **could** want to contribute actions to, I end up with quite a list: - every view, panel and editor-part has a top level action bar with `primary` and `secondary` actions - every view, panel or editor-part can have 1-N controls inside with either   - a control that just shows a context menu (e.g. the editor)   - a viewer that accepts `primary` and `secondary` actions (e.g. problems view)   - a split-view control that has its own `primary` and `secondary` actions (e.g. breakpoints view)   - a viewer inside a split-view (e.g. ""opened editors"" in the explorer)  For contributing something to the explorer context menu, I think a path would look something like `explorer/folder-view/secondary` and to contribute to the ""opened editors"", something along the lines of `explorer/editor-view/secondary`.  Not saying we should support all of this in the beginning, maybe we only start with markdown for now which ends up to be a primary action for an editor."
26172|@githubhero C# extension is owned by Omnisharp. Please file the bug here -  https://github.com/OmniSharp/omnisharp-vscode
26173|Ok, thanks
26174|Please ask 'how-to' questions about VS Code on [Stack Overflow](https://stackoverflow.com/questions/tagged/vscode) using the tag `vscode`. The VS Code development team together with the VS Code Community will answer question your question over there.  Here is how the development team tracks feedback on the different channels: [Feedback Channels](https://github.com/Microsoft/vscode/wiki/Feedback-Channels).
26175|I see the point. I wonder if we can sell `explorer/context` as shorthand/alias for `explorer/folder-view/secondary` and if we loose something doing that? That would allow us to start simple and scale up on demand...
26176|"Another thing I am wondering is how would you control the order of where the action should appear? E.g. would it be possible to even go further in the path we introduce to put the action into a specific group of the area (that is what Eclipse did, e.g. there was a group inside the context menu called ""edit-actions"" and you could point into there).  No I don't think we loose something if we have alias for the first area where we open up for contributions. We just have to document clearly where such a contribution ends up."
26177|@joaomoreno Here is another performance issue which it seems claimed to happen also on 1.2.1
26178|@isidorn can you look?
26179|@isidorn Pull request for you :)
26180|duplicates #7597
26181|@heyixiaoran This is related to extension. Please file the bug in the repository of the extension - https://github.com/Microsoft/vscode/issues/7741  Thanks
26182|Have no good idea how to address this :-)
26183|We fixed this issue yesterday already - d8de4d4695a8bcc4656405067f9ce046a9ee6f47  But due to the build issues, we did not have a nightly build yesterday. Builds are back today which is good news and today's nightly has the fix. Please upgrade to latest.  Sorry for inconvinience
26184|Does it reproduce if you set `git.enabled` to `false` and restart?
26185|@mileusna VSCode caches the keyboard layouts it detects for as long as a window is open. Is your scenario switching between keyboard layouts while a VS Code window is open?
26186|@kimmosh Can you please provide which version of VS code and OS are you using and any additional info would be really great.  Thanks.
26187|@euclimauro Is this happening for you with any file content, or only a specific file? Would you mind doing a CPU profile so we can find out where time is spent. Here is me doing it: - `F1` -> Developer: Toggle Developer Tools - Go to `Profiles` tab - Start a new profile - Scroll around - Stop the profile - Save it and attach it here  ![cpuprofile](https://cloud.githubusercontent.com/assets/5047891/16110028/0113f4f2-33ac-11e6-9886-a79b8d49c1f4.gif)
26188|This issue was moved to Microsoft/TypeScript#9207
26189|@oryam We are aware of this problem, we will soon introduce indent guides which help things here, or otherwise I use `editor.renderWhitespace` which helps in seeing where the text begins.
26190|Okay now it works after adding it to windows firewall exception. The stable version is not in there but works.
26191|This is https://github.com/zargony/atom-language-rust/issues/57.  I added a fix along https://github.com/zargony/atom-language-rust/pull/66, not sure why that pull request got closed.
26192|This issue was moved to Microsoft/vscppsamples#74
26193|Sorry for taking so long. We actually want to keep looking into the shrinkwrap file, since that is our one true reference. Will have to reject this.
26194|@juliantrd We do not read this information from the OS, it is most likely Chromium that interprets it. At our level, you could use a setting called `editor.mouseWheelScrollSensitivity` to control it.
26195|I assume you mean _without a git repository initialised_ instead of _without git installed_.  From the error it looks like you do have a strange setup: `fatal: Invalid gitfile format: .git\n`. Are you sure there is no `.git` folder or file in the cwd or any of its ancestors?
26196|@warpdesign  We already support this with a setting. Please refer to this item for current settings for tabs.  https://github.com/Microsoft/vscode/issues/7643
26197|@Tyriar any clue?
26198|cc @egamma
26199|There was a problem with packaging the css extension at it was missing. This is fixed now.
26200|No, it's not. Should we extract it?
