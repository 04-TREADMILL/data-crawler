13801|As we now ship with project Salsa this should work.
13802|As we now ship with project Salsa this should work.
13803|As we now ship with project Salsa this should work.
13804|As we now ship with project Salsa this should work.
13805|#4191 made that change. It will stay for now.
13806|This is fixed for 0.10.12
13807|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/96
13808|Moving to TS. They own the formatter settings for Salsa which we now use.
13809|This issue was moved to Microsoft/TypeScript#7543
13810|@chuckries nice catch and a good investigation - thanks! Also when you figure out everything on your own like now feel free to submit a PR.
13811|@RANUX you need to have both collection.ts and meteor.d.ts. Sorry for not being precise about this earlier. If you have only meteor.d.ts in the files section and you open collection.ts the collection.ts will open in its own virtual project not knowing anything about meteor.d.ts. That is why you don't get intellisense in that case.  Pls ping if adding both files to the files section doesn't fix the problem.
13812|"VSCode 0.10.12 will offer a setting for this:  ``` json     ""typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"": true ```"
13813|@AdamAndersonFalafelSoftware   My setup is a folder with a single .js file, no jsconfig.json  > The name parameter does not show the description, but the type is displayed correctly.  works for me:  ![image](https://cloud.githubusercontent.com/assets/172399/13815130/a5d4f1aa-eb89-11e5-8f69-1ca294cb4f34.png)  > There is no intellisense for the greet function  works for me:  ![image](https://cloud.githubusercontent.com/assets/172399/13815187/de1a7a76-eb89-11e5-8486-96a17889a7c4.png)  This is the full source  ``` js /**  * Represents a person  * @constructor  * @param {string} name The name of the person  */ function Person(name) {     this.name = name; }  /**  * Greets the person  * @param {string} greeting The greeting  */ Person.prototype.greet = function greet(greeting) {     return greeting + ' ' + this.name; }  var p = new Person('joe'); ```
13814|added for the March release with ee9e74c
13815|This is a standard CSS file.
13816|This issue was moved to OmniSharp/omnisharp-vscode#97
13817|@LittleBrainz   I've tried the following source  ``` js /**  * To upper case  * @param {string} value The string to be transformed  */ function upper(value) {     return value }  /**  * To upper case  * @param {string} value The string to be transformed  */ var upper2 = function(value) {     return value }  /**  * To upper case  * @param {string} value The string to be transformed  */ var upper3 = (value) => {     return value } ```  And I get proper IntelliSense, parameter hints, hovering. What am I missing?
13818|@joelday You mean `InstantiationService` and the decoration mechanism?
13819|Reproduced with snippet  ``` .ssdsd     ul.asdasd         li.asdasd      // asdsdas ```
13820|Oh, the missing `!`! Ugh, sorry about that.  The `setTimeout` was just a leftover. I made a change that enables me to simply remove it. :+1:   @jrieken can you see whether the `acceptSelectedSuggestion` now works?
13821|@egamma I can effortlessly reproduce my results in a single .js file all alone in a folder with no jsconfig.json. With your code. Is there anything I can do to help you reproduce my results? Are there any configuration options I need to check in my environment? Perhaps this is an artifact of upgrading from an earlier version of VSCode. Is it possible that somehow I'm not even using Salsa even though it's supposed to be the default now?
13822|@isidorn we could but I am not sure about doing this for GA, I do not think running an extension without debugger attached is a real scenario with many users, is it?
13823|Generally, when a bug is reported, it is reproduced, fixed, then tested. It appears that none of these steps have occurred here. It is easy enough to reproduce, and if you can't, I can work with you to help you. Still a defect as of 0.10.11 See original post for details of this bug in action
13824|To investigate.
13825|Looked into this with Joao and it turns out that every call to Tree.setInput() would not clean up templates for rows created from the previous run. Specifically the cleanupFn is not being called which actually is the one to dispose the action bar used on each row.
13826|@bpasero I agree this is not GA. I think @weinand agrees, Andre let us know
13827|:+1: on separate .ts and .js setup.
13828|Finish testing. Closing.
13829|works
13830|I agree. It's just for completeness... moved to backlog
13831|I cannot reproduce not being able to install the extension. Works nicely here.  The lack of notification is as designed, until we remove it from the quick open widget.
13832|Assigning to @bpasero, once you start broadcasting something give the bug back to me so I do the right thing
13833|"@dbaeumer isn't that something that VSCode should find out from linterfiles? So for example if we have eslint enabled and the option `""space-before-function-paren"": [2, ""always""]` exists, the auto-indent shouldn't delete the space?"
13834|This issue was moved to davidrios/jade-tmbundle#74
13835|@egamma Perhaps this has something to do with it? I just noticed all these errors after opening my user settings. Pretty sure they didn't appear before then. Note that the errors are occurring in a TypeScript server directory.  ![image](https://cloud.githubusercontent.com/assets/2729807/13816381/886417b0-eb64-11e5-86bd-794c4fa352de.png)
13836|@dbaeumer actually, I wrote this extension by using `registerDocumentFormattingEditProvider('javascript', {})`. And I don't change my code ,so I just suppose that vscode will use the default format method first.
13837|That's a known limitation of the currently implemented folding strategy which is based purely on the indentation of lines. A folding region starts when a line has a smaller indent than one or more following lines, and ends when there is a line with the same or smaller indent.  To be more smart and to, for example, understand functions, we will have to go one step further and introduce language agnostic folding regions. We have issue #3422 for this.
13838|"I'm probably way out of my depth here...  User-controlled folding - with ""regions"" - seems fairly straight-forward to define. The editor needs to only be language aware enough to know how each language shows comments. Then if a comment starts with ""region"" or ""endregion"" such as...  #region  ... #endregion //region ... //endregion /*region*/ ... /*endregion*/ 'region ... 'endregion  ---region ... ---endregion <!--region--> ... <!--endregion-->  You treat the content in-between as a region. It seems like creating a list of all supported language comment syntaxes is the only thing necessary."
13839|@AdamAndersonFalafelSoftware The screenshot from you above shows that you are using Salsa. Did you anything with the `typescript.tsdk` setting? It could be that the tsdk points to an older version of Salsa/TypeScript.  I've also tested on 0.10.11 and I cannot reproduce it.  The screenshot above looks like a duplicate of #3766 and I don't think it is related.
13840|See to be fixed in the March release. I tried with this sample:  ``` json function hello(param) {     return {         message: `This ${this.param[0].name} is out of stock`,         buttons: [          ]     } }  ```
13841|@joaomoreno I move this to you. The problem is the missing i18n folders in the app bundle for electron.
13842|Guess what :-)
13843|@chanpod do you have a minimal repro that I can debug?
13844|@tstringer correct, this is as designed. Salsa doesn't automatically pick up .d.ts files.  In almost all the cases a `jsconfig.json` is the right thing to do.  We need to document the difference between a js project without a jsconfig.json and one that has a jsconfig.json. I've create https://github.com/Microsoft/vscode-docs/issues/233 to track this.
13845|This is fixed already.
13846|Make sure you get the latest `node_modules`.
13847|The dialog looks 'bad' without any description due to the amount of white space.   ![capture](https://cloud.githubusercontent.com/assets/1931590/13817029/e747ce8a-eb90-11e5-8de0-1a9da50c788c.png)
13848|With the Jake argument I am pretty sure we need to remove MSBuild as well :-). So I actually propose to leave Jake and MSBuild in.
13849|I also opt to have two TypeScript one for tsconfig and one for watch for discoverability.
13850|@egamma I wonder if my TypeScript config is correct. Here are my default settings. Is the tsdk supposed to be null?  ![image](https://cloud.githubusercontent.com/assets/2729807/13816610/6c5e2a28-eb65-11e5-9051-07f2e80fd6ef.png)  I just re-tested a few things and got some of the results you did, but not all.  Intellisense for Person appends the @constructor directive to the description: ![image](https://cloud.githubusercontent.com/assets/2729807/13817016/eaf3a81c-eb66-11e5-860f-e34e903ebed7.png)  I _do_ see intellisense for the name parameter of the constructor: ![image](https://cloud.githubusercontent.com/assets/2729807/13817032/015b0262-eb67-11e5-8ffb-2e434aa564c0.png)  I _do_ see the description for Person.prototype.greet: ![image](https://cloud.githubusercontent.com/assets/2729807/13817053/19e2561e-eb67-11e5-82d0-28bf388c5fbe.png)  ,,.but I do **not** see intellisense for the greeting parameter of Person.prototype.greet: ![image](https://cloud.githubusercontent.com/assets/2729807/13817075/31164390-eb67-11e5-88e5-5404e9ead1c3.png)
13851|"@egamma Perfect! Thanks! I'll go ahead and update my blog post so it doesn't mislead readers into thinking it is ""broken"" or a ""bug""."
13852|Ideally we would not be restricted... I've enjoyed UltraEdit on Windows allowing me to position the editing panels in whatever split configuration I need... maybe 3 stacked on left, 1 tall panel on the right, or a 2x2 grid, or 1 wide panel across top with 2 half-wide panels on bottom.  Also, going from MDI to SDI layout to support putting panels on different screens seems like a nice addition. I'm not sure if I would use it right now, but I have done that in the past with UltraEdit as well.  As a note, Sublime is not particularly good at doing this stuff, but you can customize it more than VSCode.
13853|Related to #1749
13854|@dbaeumer thank you! Now intellisense works fine. But i think, it's not obvious behavior and it should be documented somewhere, maybe in FAQ.
13855|Here is what I have right now: ![capture](https://cloud.githubusercontent.com/assets/1931590/13817832/fb3fc2a0-eb93-11e5-8f15-7d734d1f240f.png)  If you feel strong about further changes please comment here or got directly to https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/tasks/common/taskTemplates.ts and make the necessary changes.
13856|Removed the two suggested templates.
13857|The descriptions do not add any value except in the TypeScript differentiation, which I again suggest we remove and update the docs with various scenarios. The same argument (discoverability) could be made for gulp watch tasks too.  Also, without descriptions it matches the launch.json creation experience for debugging.  The number of .sln workspaces which are therefore MSBuild based projects is in the same ballpark (thousands) as gulp.  Again, Jake is a fraction of a percentage, lets remove it.
13858|@gregvanl this was the bug you also found - it shoud be fixed now!
13859|i'll make a PR.
13860|Looks like #1749 has a bit more discussion.
13861|Excellent! Has the behavior changes regarding a debug adapter providing a stack frame with a null Source field?
13862|One of the things that we have tried to do is to design the experience so that the user can stay focused on their code as much as possible and does not need to look elsewhere for information about the code that they are reading. Hence we use the peek widget liberally to show definitions, references, errors etc in context, right inside the editor. So my initial reaction is that putting information about errors in the status bar contradicts our approach a little.  I understand the appeal of this suggestion though as it doesn't require the user to invoke any command. But in some way it goes against our principle of keeping the user focused on their code inside the editor.  Thinking out loud, what if we were to show a message in the status bar telling the user how to invoke the inline error display whenever the cursor is on some text where there is an error? It still requires an extra keystroke but it helps the user discover the functionality and then allows them to more easily navigate through errors. It also helps whenever the error message is too long to display in the status bar.
13863|For the most part, this also works on Linux Mint 17.1 albeit a bit glitchy.
13864|Yes, if the top stack frame has a `null` `Source` field we will focus the first stack frame with a proper `Source` field.
13865|Hi **@Hywan**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
13866|Thanks for the help @alexandrudima!
13867|Hi **@Hywan**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
13868|I am embarrassed to ask... but how can I create one of those directories symbolic links?
13869|I was looking for the same but then I agree with @stevencl, pressing F8 is a much better solution.
13870|Yup!
13871|"> @NickHeiner are you sure you ran the ""code"" from /usr/local/bin/code?  When I run `which code`, it shows `/usr/local/bin/code`. However, I do find that if I run `/usr/local/bin/code` directly, it does behave as I'd expect. Hmm.   >  How did you install Code?  I used whatever the instructions were on https://code.visualstudio.com/ when it first launched. I just tried installing again from `https://code.visualstudio.com/` and I get the same issue.  This surprised me:  ``` λ type code code is a function code ()  {      if [[ $# = 0 ]]; then         open -a ""Visual Studio Code"";     else         [[ $1 = /* ]] && F=""$1"" || F=""$PWD/${1#./}"";         open -a ""Visual Studio Code"" --args ""$F"";     fi } ```  Did that happen when I ran ""Shell Command: Install 'code' command in PATH""?"
13872|It's a poor choice for all the reasons above, and because it is boring. It shows no imagination - which might be what is expected of MS, but really is not fair on the product, its developers, or its users.  Also, a new name, without ref to Visual Studio would allow the product to reach those prejudiced against MS, lure them in: they'd be hooked to the great fixtures, and then the brand can reveal itself.....
13873|@dbaeumer excellent to hear! I assume this has additional interop/remoting challenges? I don't know much about how the language servers work.
13874|What version of node do you have? Do you have the same version on the system where it works and where it does not work. For starters, giving to @weinand
13875|fixed by 4b36383
13876|What you see is what's expected. The currently implemented folding strategy is based purely on the indentation of lines. A folding region starts when a line has a smaller indent than one or more following lines, and ends when there is a line with the same or smaller indent.  To be more smart and to, for example, understand tags, we will have to go one step further and introduce language agnostic folding regions. We have issue #3422 for this.
13877|@chanpod Have you tried updating your Node.js installation to the latest version?  I was experiencing the same issue on v5.4.1 and an update to v5.8.0 just fixed it for me.
13878|Yes, I was using nvm and tried different version of node. I tried with the same version as the one where it worked and even with the same version it was still not working on my machine.
13879|In an elevated command prompt run `mklink /D link target` for a directory symlink or `mklink /J link target` for a directory junction.  Running just `mklink` will give you all the options. Lemme know if you want any more info.
13880|I can't repro this. Do you wanna give it a try, @bpasero?
13881|"Same issue on Linux as well. ""Open new Terminal"" does not work either"
13882|@joaomoreno can you advise
13883|@joaomoreno suggest to close this then and let me verify.
13884|You're probably already there but I guess I'll mention that I think the problem is [src/vs/base/node/pfs.ts L58-L65](https://github.com/Microsoft/vscode/blob/44bd2d14ea0bc5c7e009411d136e21056d1678d9/src/vs/base/node/pfs.ts#L58-L65)  ``` ts export function rimraf(path: string): TPromise<void> {     return stat(path).then(stat => {          if (stat.isDirectory()) {              return readdir(path)                  .then(children => TPromise.join(children.map(child => rimraf(join(path, child)))))                  .then(() => rmdir(path));          } else {              return unlink(path);          }  ```  It looks like the code is using isDirectory() to determine whether it's a real folder or link. That'll work on *nix but not on Windows, where a directory link will still show as a directory.  It needs to use [lstat](https://nodejs.org/api/fs.html#fs_fs_lstat_path_callback) instead of stat and call `.isSymbolicLink()` on the returned object. That should work on all platforms.
13885|Closing, see https://github.com/Microsoft/vscode/issues/2722
13886|Sorry about no response guys, I've been completely offline for the last 2 days. `apt-get` is a Debian thing, you should use `yum` to test (I thought I changed it from `apt-get` to `yum` when copying the .deb test over).
13887|"I understand that, but I discovered a secondary issue while investigating this that `StackFrame`'s are never created with `null` `Source` fields. [Here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugModel.ts#L650) you can see that if a `null` `Source` is provided by the debug adapter, the `StackFrame` will be created with a default Source object that has its `name` field set to uknown. I believe this was done so that the callstack viewlet willl display the string ""unkown"" when a stackframe does not have have a source field, but this will interfere with setting the current stack frame."
13888|@alexandrudima I pushed the change to avoid getValue() but I am leaving it up to you to change something about StopWatch
13889|@cherchyk what specifically feels slower?
13890|This goes into a similar direction of what I discussed with @alexandrudima at some point that it would be nice to dehydrate models so that they consume less memory. I think one idea was to persist the undo cache somehow so that we can still restore that.  I am closing this one because I do not think we grow unlimited, our limit is just at 200.
13891|Yes, it's not the same as paste -- the dual clipboard thing is often irritating, but at least standard on Linux. I use it all the time.  I'd assume it's a high-level X-windows function. Something high-level in the code must be **actively blocking it** for the editor portions of the window. Because it works to middle-click paste into this pop-up text input:  ![image](https://cloud.githubusercontent.com/assets/2192439/13821413/28500fca-eb67-11e5-969a-eacd49808e2c.png)  And it works in the find/replace pop-up dialog's text inputs:  ![image](https://cloud.githubusercontent.com/assets/2192439/13821456/6b5ae902-eb67-11e5-9d6e-9029b1443f94.png)  **ETA:** Interesting to note -- selecting text in the editor pane is also not _populating_ the PRIMARY clipboard. While it does populate when highlighting text in the find/replace dialogs. So it's as if the primary clipboard functionality (both copy and paste) is entirely disabled for the editor pane.
13892|@kowsheek Try `Alt+C`. This toggles case sensitivity of the find widget **and** for the `ctrl+d`:
13893|There is also `Alt+W` for whole words
13894|@tht13 Thanks!
13895|Indeed:  ``` linesIndentedWithTabsCount: 5, linesIndentedWithSpacesCount: 7 spacesDiffCount: 9,0,0,0,8,0,0,0,0 tabSize: 4, tabSizeScore: 8 ```  The current strategy wants to find a tabSize that minimizes differences, which it kinda succeeds at :).  I think it could be further improved by starting to look at the content. It would be cool for it to understand that lines ending in `{` should have a smaller indent than the following line, etc.
13896|@bpasero I saw before that in PSEUDO mode, bracketed and double vowel strings should be translated. Here it is in PSEDUO: ![configfileassocpseudo](https://cloud.githubusercontent.com/assets/12900364/13821965/1f4c7ed2-eb61-11e5-8571-7f7b8a252433.JPG)
13897|@v-pavanp we can both not reproduce, maybe you try again with our latest. when you see processes hanging, please attach the information about the process here. would be interesting which process is the one that survives.
13898|@jrieken did you get anything more concrete out of the heap snapshot than those basic types here?  ![image](https://cloud.githubusercontent.com/assets/900690/13822365/a1b22680-eba5-11e5-9edc-d05bc3aae489.png)
13899|I can confirm that even with this change I am not seeing the current stack frame get set correctly because my debug adapter returns a null Source for the stackframe and code is creating non null default source object. I am having trouble debugging code with code however using current master.
13900|Thanks! `Alt+C` works but would be nice if this was more discover-able.
