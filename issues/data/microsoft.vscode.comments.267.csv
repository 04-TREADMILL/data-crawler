26601|Duplicate of #2192 and #1477.
26602|Related to #1477.
26603|This problem does not happen if i start `code` from terminal. It only happens when I start it from Finder/Spotlight.
26604|"Ok, found the problem, not sure why it happens though:  When I start VSCode from Finder then User Settings have this:  `""terminal.integrated.shell.osx"": ""/bin/zsh\nCOM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/GOD/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.dMvrDCzGvG/ServiceProcessSocket"",`  but when i start `code` from Terminal then it is:  `""terminal.integrated.shell.osx"": ""/bin/zsh""`  I fixed this issue by overriding this value with `""terminal.integrated.shell.osx"": ""/bin/zsh""` in my settings and then it works. Not sure why that `COM_GOOLGE_*` stuff gets added there"
26605|@alexandrudima ping
26606|+1 on the `$(filename)`.   I'd like to add that doing a general `**/*.js.map: true` is not the way to go because deleting the corresponding `.ts` file will not reveal the `.js.map` file. I believe this should be the reason why `when` is desired in the first place.
26607|Yeah. We need this for zt and zb as well. As far as I can tell there is not even a way to hack it.
26608|Duplicate of https://github.com/Microsoft/vscode/issues/6451
26609|@bpasero I have an extension that can run arbitrary shell commands whenever a user saves a file (using vscode.workspace.onDidSaveTextDocument). I have some users of the extension that are running commands that modify the source file after save and are asking if it could update the active file after the commands run. The goal would be to explicitly refresh it in the extension after commands run and not based on change detection on the source file.
26610|By analyzing the blame information on this pull request, we identified @Tyriar and @xaverh to be potential reviewers
26611|Hi **@urbandove**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
26612|Thanks @urbandove, this is great! :fireworks:
26613|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
26614|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
26615|We are happy to announce that you can now enable tabs in our nightly insider builds (http://code.visualstudio.com/Download#insiders). The related setting is `workbench.editor.showTabs`. Please refer to our [release notes](https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/June_2016.md#workbench) for more details on the concept of editor stacks, preview editors and tabs.   ![image](https://cloud.githubusercontent.com/assets/900690/16176081/f6b3ac3c-3603-11e6-9484-f88ff0be8e9c.png)  There is still some work planned in this area until the end of the month (and probably beyond) so we are happy to gather feedback from insiders. Feel free to open issues as you find them while using tabs.  Thanks!
26616|By analyzing the blame information on this pull request, we identified @alexandrudima to be a potential reviewer
26617|Hi **@gkalpak**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
26618|"That is possible by configuring `""explorer.openEditors.visible"": 0`"
26619|ok, please reopen if it still happens.
26620|Okay thanks.
26621|Will the repo include the insider builds?
26622|I fixed this locally as well. But suggestions with `textEdit` still don't work (they don't even show up in the suggestion list) :-/
26623|**@gkalpak**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
26624|VSCode Version 1.2.1 OS Version OSX 10.10.5  In terminal  the Chinese characters were garbled
26625|By analyzing the blame information on this pull request, we identified @bpasero and @egamma to be potential reviewers
26626|Hi **@emiljas**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
26627|+1
26628|Thanks @bpasero. Now I can breathe :)
26629|This is the only thing keeping this editor from being my primary choice. It's a simple thing to implement but it saves SOOOOO much time.
26630|@yisibl the changes are committed please verify them in the [insiders](https://code.visualstudio.com/insiders) build.
26631|+1 - I would absolutely love this feature!
26632|"This is really wonderful so far. Is the state of which tabs are open saved somewhere persistent? Would be fantastic if the previously-open set of tabs could be reopened automatically without having to manually click through ""Open Recent"" for each one after restarting Code."
26633|@lijunle the insiders build will be available via repo yes.
26634|I’m encountering this problem, similar backtrace (FatalProcessOutOfMemory), with no .git directories in my home directory or in the workspaces affected by this problem. The windows crash at random, sitting in the background for several hours, not being interacted with. I see a slow memory leak in the affected window’s Electron Helper, about 2MB per minute. There is a distinct stair-stepping pattern, and the backtrace seems to implicate either a problem with cancelled promises, or a problem with the `openAnythingHandler`:  ![screen shot 2016-06-19 at 19 38 41](https://cloud.githubusercontent.com/assets/229244/16180812/a5ef3a80-3655-11e6-8844-5e33bf3138d1.png)  Hope that helps. This is a pretty annoying bug. :)
26635|Yes @JimiC, please recognize I'm a experienced dev (30+ years, more than half at Microsoft), and understand tool learning curve should be.   The original issue got blocked, under 1.2.1 I think there's a bug in the template **tasks.json** file generated for grunt; and bugs don't get better by giving them time.     My comment was intended be a suggestion that documentation on the tasks.json file format shouldn't force the reader to go slogging tons of examples based tools they may not use in order to get to details on options like it currently does.   Topics like how to integrate with optional tools belong in separate topics, with hyperlinks cross-references from the file-format documentation.
26636|I'm going to go ahead and close the spinning indicator bug and open a new one for the template bug.
26637|when vs code is updated from.1.20 to 1.21, this issue is resolved .
26638|@MattDMo , have you had any luck in building an extension for VS Code. I'm certain there would plenty of people within the community and the VS Code team willing to help you with this.
26639|"Here's the generated tasks.json generated by VSCode 1.2.1:  ``` {     // See https://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format     ""version"": ""0.1.0"",     ""command"": ""grunt"",     ""isShellCommand"": true,     ""tasks"": [] } ```"
26640|@rajeshbhagat can you tell me how to solve? thank you
26641|@tkelman yes all view state is stored and restored when you restart as long as you open a folder with VS Code. We never stored any view state when you open Code empty and restart.
26642|@csnover really happy with your comment, I am very interested in finding out why there is a constant memory increase and I hope you are willing to help us out here a bit more if you don't mind. First of all I do have a couple of questions:  - does the memory grow without you doing anything in the application, just by having it in the background?  - is this reproducible every time you let Code run in the background? - could you do a memory snapshot between 2 times and compare them so that we learn what objects are actually allocated that cause the 2 MB increase per minute?
26643|"Ah I see. I imagine many of us used to tabs-only workflows may not really notice the ""open folder"" so if we only have individual files opened in different tabs, does that count as what you called ""empty""?"
26644|We've already moved to markdown-it and it's using commonmark, so this is expected. You can take a look at the same issue on markdown-it repo https://github.com/markdown-it/markdown-it/issues/147 and the commonmark related spec http://spec.commonmark.org/0.21/#link-destination . Unfortunately spaces in links are not allowed.  BTW, we are still open to community's opinions about the markdown render selection. Before we do move to any other md renderer, you can mitigate the issue by replacing the spaces by `&#32;`, for instance, `![alt](/Users/satokaz/Gits/advanced-vscode/markdown-it-extension/images/test&#32;1.png)`
26645|@tkelman yes, we only associate view state with an opened folder. this is independent from using tabs or not.
26646|Just curious: what kind of features would that extension have?
26647|+1, same issue. just updated the vscode
26648|Awesome! Should we remove the setting in VS Code at least then?
26649|Well, it appears to just have crashed the whole gulp at [this point](https://github.com/Microsoft/vscode/blob/master/build/monaco/api.ts#L40) when the file doesn't exist. It would be cool to just keep compilation running as usual when the file is missing... but I can live with killing gulp and launching it again. 👍
26650|I believe we're gonna keep both font sizes linked. Either `1:1` or some other proportional ratio that pleases the eye. 👀
26651|"@glen-84 Not sure what you want me to reconsider... Our team is too small to be able to provide support for all the features requested. But we added an extension API so that the community can jump in, fill gaps and innovate. If there's a API missing or anything we need to do on our side to have extensions fully work, please let us know, or file a pull request. We're happy to help.  @mrmlnc Why not making a pull request for your fix to add 'sass-indented' to the list of languages supported by emmet. The approach to patch the code is not the indented use of an extension. Users will have to reeinstall after every update and the approach is very fragile. @egamma FYI.  @glen-84 BTW, I renamed the language id for SCSS from 'sass' to 'scss' to avoid further confusions. For the time being, to be compatible until the June build is out, you can add both ""onLanguage:sass"" and ""onLanguage:scss"" to your activation list. After June I suggest to only keep onLanguage:scss so that 'sass' can be used by the indented sass mode (if required)"
26652|@aeschli I'm working on it. I have not made the pull request because my proposed version is a hack. Yesterday I found a better way.
26653|Tried VS Code for the first time today and this confused me a fair bit. I'm very used to the Sublime/Atom behavior so I'm definitely biased; but it seems very odd that the first choice in this menu is something that will never be used. When is it useful to navigate to the file I'm already in? This behavior just adds an unnecessary keystroke when I want to open a recently-accessed file.
26654|This should be the same with #7036.
26655|Firstly we missed the fenced code syntax detecting in markdown tmlanguage, just added it https://github.com/kieferrm/vscode-markdown/commit/bd395e1fdd02e99c169f8bef9c11f47bac0a42a0 .  But we still have problem with plist injecting, which makes the inner code highlighting doesn't work. I'm looking into it right now.
26656|after i update my vs code from 1.0.0 to 1.2.1 . I have the same problem. my console.app 's log:  > 6/20/162262 3:47:59.541 PM lsd[305]: LaunchServices: Could not store lsd-identifiers file at /private/var/db/lsd/com.apple.lsdschemes.plist > 6/20/162262 3:48:03.143 PM com.apple.xpc.launchd[1]: (com.microsoft.VSCode.432032[15619]) Service exited with abnormal code: 1  PS: now,i use 1.0.0 to my work
26657|@BurtHarris I tried to reproduce this and was able to do so in the following case: - you have grunt installed glopally but not locally in your workspace.   Then grunt can't execute and the tasks.json file generated contains an empty task array which is problematic. It should generate a tasks.json file with no task array. Then on the next execution you would see:  ``` grunt-cli: The grunt command line interface. (v0.1.13) Fatal error: Unable to find local grunt. If you're seeing this message, either a Gruntfile wasn't found or grunt hasn't been installed locally to your project. For more information about installing and configuring grunt, please see the Getting Started guide: http://gruntjs.com/getting-started ```
26658|Created https://github.com/Microsoft/vscode/issues/7881
26659|@egamma I can reproduce, might it be https://github.com/Microsoft/vscode/commit/f8bb4ade94ba5c9401419d3ec1e12fbe8719e0c1 ?
26660|Yes it does. When its stdin stream closes it exits. Since we use our own pipes for stdiin / stdout to talk to an electron node process it might be that we need some explicit code in stdFork to close them. @alexandrudima is this something we need to add?
26661|Marking as verified based on comment https://github.com/Microsoft/vscode/issues/6375#issuecomment-226786223
26662|@danvk in step 3 how do you reload all files. Do you reload the VS Code window?
26663|Closing as: please install VS Code in a directory that your user has modifying rights.
26664|Fixed via https://github.com/kieferrm/vscode-markdown/commit/81f52f5ebfa0ebf84529c4538985c17bc58f735d
26665|@rebornix cool! would it not make more sense to push your changes directly to master given that we pushed vscode-markdown into VSCode?
26666|I'll send out my PR real quick (I'd like to have the push privilege after my onboard).
26667|in my case it doesn't work in the single panel
26668|By analyzing the blame information on this pull request, we identified @kieferrm to be a potential reviewer
26669|same for me it doesn't work in the single panel too
26670|> But suggestions with textEdit still don't work (they don't even show up in the suggestion list)  I checked. Its because of `CompletionModel._filter` function removing it. I'll figure that out on my own so you don't need to worry about that :rose:
26671|On the external (system) terminal.
26672|oh wow, this one is a real blocker for me, it can really break code and builds when working with 2 panes. how to revert?
26673|Because now this shortcut key into the text to move around(https://github.com/Microsoft/vscode/pull/6887)  I have said in issue(https://github.com/Microsoft/vscode/issues/5251), do not change the system level of general shortcut keys. This will the loss outweighs the gain.  I think <kbd>control</kbd> + <kbd>cmd</kbd> + <kbd>←/→</kbd> is better(Atom 1.8).   @alexandrudima @kisstkondoros Please change the shortcut key 😭 .
26674|"You can modify the shortcut key configuration, this is a temporary solution.  ``` json     {         ""key"": ""alt+left"",         ""command"": ""cursorWordStartLeft"",         ""when"": ""!editorHasSelection && editorTextFocus""     },     {         ""key"": ""alt+right"",         ""command"": ""cursorWordEndRight"",         ""when"": ""!editorHasSelection && editorTextFocus""     } ```"
26675|Hi **@mrmlnc**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
26676|We are looking into the issue. Until then please use our stable release.
26677|Sorry about that, I merged a PR that overwrites the word navigation keys. Fixed in f81582e1925161700751638e26e85bd6e0048745 for #7880
26678|> does the memory grow without you doing anything in the application, just by having it in the background?  Yes, that’s correct.  > is this reproducible every time you let Code run in the background?  Nope, I have 3 or 4 open VSCode windows in the background and not all of them are leaking (though to be clear, different windows leak at different times, it is not always the same one window). There is some trigger event that must occur for this to happen, and I am not sure what that is yet.  > could you do a memory snapshot between 2 times and compare them so that we learn what objects are actually allocated that cause the 2 MB increase per minute?  The next time I catch it happening I will do this. Unfortunately the window from yesterday ran out of memory and crashed so I can’t profile it.
26679|Maybe they want you to use TypeScript ;-(
26680|That would be great, thanks. And I agree it must be some action or environmental thing that causes this because not everyone is hitting it.  I am so curious because it might also be an explanation of our ever green: https://github.com/Microsoft/vscode/issues/508
26681|@kieferrm fyi this might be fixed now?
26682|@rebornix please feel free to assign the PR to someone like @kieferrm if you want a quick turnaround 👍
26683|Did a format and re-install of Win10 from the feedback from the Visual Studio crowd and other searching on that error above. It appears to be an issue with my system, as everything is working fine now.
26684|@isidorn and what should we open the tab with?
26685|I am not convinced this adds a lot of value...
26686|👍
26687|I mean clicking on them in the side panel, so that they appear with focus in the editor.
26688|Same as cmd + N - new untitled-1
26689|I think we need some mouse gesture to quickly open a new tab. If you do not like this then I would push more for #7889  I also think the context menu might benefit from this - currently it is just a bunch of close actions. A new and a seperator might actually improve the visuals while making it consistent with what other editors are doing.
26690|Thing is, I doubt the main intent is to create new files, at least when I compare this with my usage of the tool. In most cases I want to open a file that already exists.
26691|@isidorn not true, if you open the context menu on a diff editor, there is a lot more entries. We put all editor actions into the context menu as well.
26692|@bpasero yeah I know, but for the most common case it is just a bunch of close actions as far as I see it
26693|Looks good to me, thanks much!
26694|@ventis07 you now seem to use the 'Debugger for Chrome'. If you see issues with that or have questions, I suggest to raise them at https://github.com/microsoft/vscode-chrome-debug/issues (VS Code includes Node Debug which is not relevant for your issue).
26695|Then I would just open as preview file which is currently active - that should also be fine
26696|@dbaeumer the stdFork behaves the same as stdin (I hope), given all the `unref` dancing at https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/stdForkStart.js#L159  So if there are no more listeners on stdin, the fake stdin stream gets unrefed by me and node will shut down gracefully. Maybe stdin behaves differently?
26697|Is it that if the standard `stdin` closes, node implicitly unrefs it?
26698|@basarat Thank you!
26699|"@virtyaluk I still don't know what node.js version you are using.  Does it make a difference if you change your launch.config as follows:  ``` json ""program"": ""${workspaceRoot}/js/app.js"", ```  So instead of launching your program from the TypeScript source, it will be launched from the generated JavaScript (which should live in the 'js' subfolder)."
26700|UX meeting topic I guess.
