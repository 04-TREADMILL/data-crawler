8301|@isidorn Most likely this occurs if the debug-adapter is terminated while still sending data. The debug UI should catch exceptions thrown in the JSON parse and terminate the debug session. I expect that the debug session in many cases is already in the process of being shut down (and has actually terminated the debug adapter in the first place).
8302|@aeschli  What is the rationale of moving this issue to atom-language-rust?  Does vscode use the atom-language-rust package for Rust syntax highlighting? That doesn't seem to be the case from what I see.  In Atom, the type names and keywords actually have different colors, so this is a vscode specific issue.
8303|doing something here would require more sophisticated architecture and debug protocol enhancements.
8304|@NoeHedde could it be that you specify the 'cwd' as a path starting with an upper case drive letter? If yes, please change the drive letter to lower case.
8305|To clarify what I mean, I specifically mean user defined types/traits in vscode have the same colors as keywords.  This is how it looks in Atom: ![](http://i.imgur.com/optYorK.png)  And this is how it looks in vscode: ![](http://i.imgur.com/7JNwm6A.png)
8306|**Summary of our meeting today** with @chrisdias, @isidorn, @stevencl, @bpasero and me.  We're going to need to look into exactly what the accessibility requirements are concerning focus on <kbd>Tab</kbd> vs focus on mouse.  Provided these requirements are permitting, we want to first try making focus outlines only for <kbd>Tab</kbd> (unless a user is in high-contrast mode).  We are wanting to model how Office differentiates focusing with mouse vs keyboard navigation.  @bpasero suggested making focus on mouse always go to the `body` after click (so no outlines will appear, whereas tab will actually focus.  A similar solution I suggested is that we could listen for the <kbd>Tab</kbd> key and add a `.tab-focus` class to a top-level parent (e.g. `body`) which has rules to add focus indicators globally.  This class is removed immediately on any user click, and will only return again when the <kbd>Tab</kbd> key is pressed again.
8307|Actually what I saw happening e.g. in the boostrap theme when you click a link is that focus just moves to the body because the interaction is a real page transition, so it makes sense to move focus then.
8308|@weinand I can do that, though terminating a session just because JSON parse fails might be a bit too harsh, no? This could produce weird behavior for other adapter which might be in development and are sending broken jsons. Shouldn't we just ignore the event if we think the debug adapter is going down anyways.
8309|Great. Sending multi-line output event shoudl actually work in January already, so please try it out and let me know how it goes.
8310|After the standup discussion today I think we came in agreement that once starting the mono session fails we show a nice error message with an action to install mono-debug. Now what I am not sure is if we should always show this error, or when the user clicks dismiss to never show it again. For our use case I argue we should always show, because it only happens when there is an actual error (user is trying to debug mono) and it should always show when mono is not there and user explicitly wants to debug it.
8311|Closing in favor of https://github.com/Microsoft/vscode/issues/2679 and https://github.com/Microsoft/vscode/issues/229
8312|I don't seem to be having any issues now building with npm3 on Linux or OSX
8313|Thanks for the suggestion. In Visual Studio Code we use TextMate themes that are based on TextMate tokenizers. Visual Studio color schemes are based on different grammars, returning different and actually more symbol types that the Text Mate grammars do. That makes it quite difficult to implement a theme converter.
8314|This issue was moved to Microsoft/TypeScript-TmLanguage#69
8315|"@alexandrudima sorry for my delayed response on this one.  I think this raises an even more interesting question.  Should we allow themes to modify the editor styles beyond what TextMate standards support?  What if when we convert TextMate themes to VS Code, we add a reference to  boilerplate of additional customizations in either JSON or CSS (which are commented out by default).  These customizations could include ""selection matches"" and other VS Code specific things.  JSON would be the more conservative approach so that only specific values are further customizable and we don't open up the entire stylesheet to extensions.  Your approach above (computing the `.selectionHilight`) sounds like a good fix as well (and it's certainly easier and more conservative).  I just wanted to throw out one more idea.  What are your thoughts?  Also, @stevencl what do you think?"
8316|Few thoughts on this:  -> 'official' (aka Microsoft-Branded) packaging vs. 'community' (OSS-Build) packaging (community is more or less effort-free as soon as someone decides a package would be nice, MS-branded is obviously cooler for those who prefer getting it directly from creator and want the neat logo)  -> best executable name? (I prefer the Fedora COPR over the official releases simply because its executable is named 'vscode' which is cleaner in path than 'code' or 'Code')
8317|The [tmTheme editor](https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai) I've used in the past allows specification of a selection color. Can that value be used?  ``` xml <dict>     ...     <key>settings</key>     <array>         <dict>             <key>settings</key>             <dict>                 ...                 <key>lineHighlight</key>                 <string>#3E3D32</string>                 <key>selection</key>                 <string>#FFEA00</string> ```
8318|@bgse I looked a little at what Atom does with regards to this in https://github.com/atom/atom/issues/2956. They distribute a .deb package and have ambitions of eventually having the .deb package register a repository. This is likely the path we will take as well for auto update support.  On executable, the plan is to expose a `code` wrapper script which calls `Code` in background and redirects output away from the terminal. You will be able to create an alias or rename the `code` script to `vscode` if you want. Not sure we would change the executable name at this point, feel free to open an issue to get a wider perspective though.
8319|@bpasero I would like to try out the new build, but whenever I try to access the link you provided (https://vscode-builds.azurewebsites.net/insider), I get a very unhelpful error message page with the following text:  > Sign In > Sorry, but weâ€™re having trouble signing you in. > We received a bad request. >  > Additional technical information: > Correlation ID: e477dc1b-c193-4cf9-864b-1d3fdbba4f34 > Timestamp: 2016-02-03 19:37:17Z > AADSTS50020: User account 'gjudd@example.com' from identity provider 'https://sts.windows.net/5a7d8144-6966-4b1e-8147-de672a307ea0/' does not exist in tenant 'Microsoft' and cannot access the application '9d5f02f6-ffd9-4e80-92d5-e42c85e09bc9' in that tenant. The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account.  I'm not able to download the build and try it out because of this issue.
8320|https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/
8321|Thank you
8322|Yes please! The lack of svn support is the only thing keeping me from using VSCode at the moment.
8323|Ah sorry, wrong link, please use https://code.visualstudio.com/insiders
8324|@egamma Is this something that the maintainers would accept pull requests for?
8325|"Commit 8981819 adds the wrapper script for OSX (not yet tested) and Linux. It assumes the `Code` executable on Linux is located at `/usr/share/code/Code`.  Here's what it looks like on Ubuntu (note I have a new line at the start of my `PS1` which is what the extra `\n` is at the end of stdout):  <img width=""725"" alt=""screen shot 2016-02-03 at 2 00 36 pm"" src=""https://cloud.githubusercontent.com/assets/2193314/12798505/a2f207ba-ca7e-11e5-852b-f6e0d947359f.png"">  The plan for this script is to be renamed to `code` in the .deb package and be added to the path (and OSX package?)."
8326|We only have a small set of themes that are included with vscode, most themes are typically put on the marketplace. Two developers have put ports of OceanicNext up so you can try them out: - https://marketplace.visualstudio.com/items?itemName=gerane.Theme-OceanicNext - https://marketplace.visualstudio.com/items?itemName=naumovs.theme-oceanicnext
8327|I think this is a duplicate of https://github.com/Microsoft/vscode/issues/48
8328|Hi @alexandrudima ,   The problem only occurs for  `Ctrl + Shift + 0`  :cry:.. - the `0` key alone works - the combination `Ctrl + 0` also works - even `Ctrl + Alt + 0` works  I'm using Windows 10, on a MacBook (Boot Camp). English Language with US-International Layout. I tested with VSCode version 0.10.6 and Insider (January).  Thanks for your help.
8329|@Tyriar yes, on first glance this looks like a duplicate. However this request is specifically targeted towards a concrete use case: enable debugging of multiple processes.  I do not want to discuss why this is necessary or what the name of a setting to enable this should be. I just want to discuss what is needed to make VS Code support this scenario without any problematic side effects.  @bpasero is the right person to resolve this as a duplicate of #48 or not,
8330|Hi @jrieken . Is it already available in the Insider build?  I tried to use the [Extension API Consumption #1881](https://github.com/Microsoft/vscode/issues/1881) and [Proposal for separating the vscode tools from the vscode API #970](https://github.com/Microsoft/vscode/issues/970) instructions, but it still result in the same API. Maybe I'm doing something wrong in my `package.json`?  Thanks in advance.
8331|I just updated to the latest vscode.d.ts (using the new install script) and I don't see it either.
8332|Why is this issue being closed?  VSCode is supposed to support textmate themes. Here is a textmate theme that is not working.   There are clearly gaps in VSCode's theme support, for example the `from` in the top import statement is not colored. Shouldn't the same textmate theme appear consistently across various editors?
8333|I agree, it should search it for JavaScript.
8334|"Hi @daviwil ,  It was an error in my `package.json`. I fixed and now the new API is available:  #### Update the engine:  ```     ""engines"": {         ""vscode"": ""0.10.7-insiders""     }, ```  #### Add the `postinstall` script  ```   ""scripts"": {     ""vscode:prepublish"": ""node ./node_modules/vscode/bin/compile"",     ""compile"": ""node ./node_modules/vscode/bin/compile -watch -p ./"",     ""postinstall"": ""node ./node_modules/vscode/bin/install""   }, ```  #### Update `vscode` in `devDependencies`  ```   ""devDependencies"": {     ""vscode"": ""~0.11.0"",     ""typescript"": ""^1.6.2""   } ```  And it is working perfectly, thanks @jrieken  :smile:"
8335|Hi **@sheldonbarnes**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
8336|**@sheldonbarnes**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
8337|Consider using templateUrl, and specifying a HTML file name.  You can then get all the autocomplete in that HTML file. I think that is better than mixing code and HTML like Classic ASP.  Example:  https://github.com/sheldonbarnes/Angular2Learning/blob/master/app/app.customerdetailscomponent.ts
8338|Validated it is `eslint` extension issue. Closing this.  Thanks!
8339|See also: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#api-consumption
8340|I think this request is fair because it talks about lifting our current limitation that you cannot open the same folder twice in 2 or more windows.  @weinand I suggest we add the issues we see to your first comment so that we do not have to haunt down all the issues by checking the comments.
8341|@bpasero Would be great to discuss this with @jacobrossi and @andysterland as it is something the F12 team also need figure out.
8342|Pushed a change to set an element with the status role when search is finished. We have to verify that screen readers support the status role, otherwise I fear we would have to use the alert role for it which is a much stronger feedback that gets read immediately.
8343|:+1:
8344|Isn't there a link to the License once you get to the Readme?
8345|You're right, I interpreted this as there's no officially supported theme but there are indeed a bunch of issues preventing full parity with the other editors. I'll leave this closed but created a bunch of issues for the main problems causing this. Thanks for the report!
8346|I understand there might be some limitations. But I think VS schemes and TextMate themes work in similar way. They just assign colors to named scopes, don't they?
8347|I think it would be covered by #728, currently SVG is just highlighted using the XML language mode. I'll clarify in the title. Closing.
8348|Yeah, that's the publisher name the extension. We will make it proper soon.
8349|yes it's working with a lower case drive letter
8350|"- there is a new action ""Close Other Files"" in the context menu of a working file to do that - there is a new global action ""Close Other Files"" that looks at the currently active opened editor and tries to close all files that are not that one  Verify that you still get confirm boxes popping up in case one of the ""other"" files getting closed is dirty or untitled."
8351|@weinand let me know once you publish the mono-debug to the extension gallery so I can start working on this. If you want I can also remove mono from our vscode and publish it to the gallery, anything works for me ðŸ˜Š
8352|Not an easy request as we're not really in control of the tokenizers that generate all the scopes. We are using standard TextMate grammars created and maintained by the community. Using TextMate grammars has great benefits. There is a large number of grammars around, for almost every language, and a driving community making improvements. However, when diving deeper into this, on realizes that writing a grammar or a theme is difficult. What scopes there are and what scopes to use where is not well defined. As a result of the lack of specification also existing grammars differ widely. I found that one has to learn by looking at existing grammars and themes, and by lots of testing.  Resources I found helpful and use as a reference: - http://manual.macromates.com/en/language_grammars - http://www.apeth.com/nonblog/stories/textmatebundle.html - https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai  Besides that we also have some VSCode specific problems and known bugs: - we have coloring rules for non-default scopes that interfere with standard scopes. We are working on removing these rules - while TextMate scopes are actually hierarchical, internally we match against a flattened representation. This leads to bugs when parent scopes use scope names that overlap with scopes on the token level. This again is something we are trying to fix.  Given that we are working on fixing our own bugs, the best advise for grammar and theme authors is to follow TextMate guidelines and study existing grammars and scopes. Test against other TextMate compatible editors as to avoid any VSCode specific workarounds.
8353|Adding bug label so it goes to my verified queue
8354|Anything about your workspace you share? What files are you usually editing, size, # of files, OS, VS Code version? Also check the task manager to see if one of the VS Code process consumes large amounts of memory
8355|closing as duplicate of https://github.com/OmniSharp/omnisharp-vscode/issues/7
8356|Possibly related to https://github.com/Microsoft/vscode/issues/508
8357|@gregvanl Can I assigning this to you? I thought we could also add my comment to the doc. But I'm not sure where to exactly add this, Maybe as a FAQ or a section in the extenders doc. Also feel free to improve my answer.
8358|@NoeHedde great! this problem has been fixed in the upcoming January release of VS Code.
8359|my guess as well
8360|@isidorn checkout this: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/extensions/electron-browser/extensionsAssistant.ts#L48
8361|@jrieken looks sexy, I'll try it out
8362|Fixed via 8761076
8363|"In VSCode we use the grammar from atom-language-rust. When you write that keywords and type names share the same highlighting color then this has to do with the grammar. The grammar defines what scopes to return for each token.  In this example:  ``` rust fn main(file: &PathBuf) {     let str: &str = ""str"" } ```  `fn` get the `keyword` scope (which makes sense), but `PathBuf` gets the `class.std.storage` scope which is unusual.   That said, what scopes are the correct ones to use is not well defined (see my comment in https://github.com/Microsoft/vscode/issues/2058). How it eventually colored depends on the theme. It might work well for Atom actually if they use a customized theme, so you are right, moving this to Atom might not be the right way. Also this issue contains multiple issues that all need to be looked at separately. I reached out to the authors of 'rusty code' to see if they would like to help. We lack 'Rust' expertise in the VSCode core team."
8364|There may be an issue on our end, it seems to behave differently on Atom (1.3.3 & 1.4.3, language-rust 0.4.5):  ![rust](https://cloud.githubusercontent.com/assets/2193314/12811870/04629c34-cae4-11e5-97e7-757bcac77fca.png)  VSCode (0.10.6 & master):  ![rust_vs](https://cloud.githubusercontent.com/assets/2193314/12811899/2b463694-cae4-11e5-9abd-1cbb82599f1e.png)
8365|[source-maps-bug.zip](https://github.com/Microsoft/vscode/files/117217/source-maps-bug.zip)
8366|The lineHighlight from themes is already used, for the line highlight :-)  Adding vscode specific settings is a good option, the tmTheme format allows that. No need to change the theme format. However, as there are already hundreds of themes out there, we could also try to compute the missing color for all themes that don't define the new setting. But how would we compute this? In this case, with the theme's selection color being gray we must know that we must rather something colorful to make a difference. But we must not conflict with any other highlights such as the find match and the work highlight. It's tricky.
8367|"@sheldonbarnes Thanks for taking the time. The problem of your suggested change is that existing snippets that happen to have **\* in a string literal will be broken. e.g.  ``` json { ""body"": [    ""/*** My special Snippet **/ ]} ```  The example should be changed to a regex that should search for /**\* and make sure is not in a string literal."
8368|You could take the RGB difference between background and selection, and use a color that is something like: - bg + diff/2 - bg - diff/2  or you could just make the text less lighter/darker of the background, if it's a match and not a selection.
8369|Removing the 'ts' scope from the js grammar was a mistake that happend when I updated the grammars. I added it back. The `ts` scope and the special rules for it in the Light_/Dark_ themes will go away once we get the fix for https://github.com/Microsoft/TypeScript-TmLanguage/issues/44
8370|We should speak to people who we are designing these experiences for to see what works for them. I will see if I can set something up.  Sharing what we learn with other teams is a good recommendation too.
8371|Think you're looking for this, at the bottom:  https://github.com/Microsoft/vscode/issues/968  Haven't tested it myself though...
8372|I am now doing same as Joh once a user tries to start a mono debug session. Notice that currently nothing will be visible in the UI since the mono-debug extension is not yet in the gallery. I have user `andreweinand` as publisher and `mono-debug` as name, since I think we used those in other places, but we can change it.
8373|@isidorn you could try to use mock-debug in the meantime.
8374|This issue was moved to Microsoft/TypeScript-TmLanguage#70
8375|I disagree here, `keyword.operator` is also often typically used for operators like '==', +, -... We don't want to color these like keywords.
8376|This issue was moved to Microsoft/TypeScript-TmLanguage#71
8377|This issue was moved to Microsoft/TypeScript-TmLanguage#72
8378|@alefragnani Sorry I didn't try `Ctrl+Shift+0`, only `0`.  I also don't get it -- no key events reach VSCode for `Ctrl + Shift + 0`.  Just checked and it looks like Windows uses that for some input language settings. Here's what I could find: - http://www.eightforums.com/general-support/22552-cant-use-ctrl-shift-0-windows-has.html - https://superuser.com/questions/604790/how-to-disable-ctrlshift-keyboard-layout-switch-in-windows-8  Given no app gets `Ctrl+Shift+0`, will close this issue, as this is OS behaviour that needs to be changed (nothing we can do on our side).
8379|Yes but there's no 1-1 mapping between the scopes. As an example in a VS theme you can have different colors for a interface, enum, delegates or class name, while in text mate there are no standardized scope for each of these types.
8380|Indeed, we wrap based on the width of `n` and on the width of a double width character (think CJK). Then, the wrapping code only differentiates between latin and double width characters.
8381|At this time, we don't give a straight-forward way to directly customize CSS, neither from an extension nor from a user configuration option. Short of editing the .css files we ship with (and lose the edits on updates) there's nothing I can think of. Even then, I have tried the `-webkit-font-smoothing: none;` and it doesn't seem to have any effect.
8382|Sorry I can't reproduce what you describe. Do you mean that? ![image](https://cloud.githubusercontent.com/assets/6461412/12815217/2b837d90-cb45-11e5-9f04-997fbb15c48d.png) You didn't turn off the setting `editor.suggestOnTriggerCharacters` by accident?  I know the issue about using code complete directly after `:`, but I think that's been like that for a while.
8383|That's what pull request #1678 intended. Correct @dpodder?
8384|Here is the profile with the incomplete adoption in `alex/list-exploration`  I do Ctrl+Space, type 1, type 0, backspace, backspace, type 1, type 0 in a brutalo file  Time spent in the widget: 2-3ms to set input (can be probably reduced as I wrap each passed in item in an object to cache its height, I could cache its height in a number array) + 2-3ms to render the 12-13 visible items with highlights on next animation frame, etc.  Highlighted heavy functions from the list widget - More than 90% of the time is now spent in the suggest model doing filtering, etc. before it reaches the list: ![image](https://cloud.githubusercontent.com/assets/5047891/12817147/c6fbb7fa-cb50-11e5-9a49-08a69920195f.png)  [new-CPU-20160204T135844.cpuprofile.txt](https://github.com/Microsoft/vscode/files/117494/new-CPU-20160204T135844.cpuprofile.txt)
8385|@dbaeumer this should be good now. Also, as a user, would you expect that we word wrap in the hover?
8386|:+1: excellent steps.
8387|@weinand TS complains about `win-x86`, because of the minus in n a property name, so I went with `winx86`. TS also complains about `win(x86)` - no brackets allowed in property names
8388|@isidorn why is TypeScript involved here?
8389|@weinand because my code is in typescript and I want to have the JSON object nicely typed
8390|"I'm doing exactly the same steps: `trigger`, `1`, `0`, <kbd>backspace</kbd>, <kbd>backspace</kbd>, `1`, `0` in a brutalo file. It's also an incomplete implementation without selection, etc.  The first `splice` call takes `5.2ms`, including the rendering. Then, an initial widget layout call is done for `2.4ms`, which is not repeated in the subsequent keystrokes.  ![image](https://cloud.githubusercontent.com/assets/22350/12818104/aa47d79c-cb55-11e5-9a1e-ecd50b340970.png)  <img width=""494"" alt=""screen shot 2016-02-04 at 15 48 52"" src=""https://cloud.githubusercontent.com/assets/22350/12818368/e4696584-cb56-11e5-9986-93e3fe2747a9.png"">  [CPU-20160204T154610.cpuprofile.txt](https://github.com/Microsoft/vscode/files/117600/CPU-20160204T154610.cpuprofile.txt)  ##   Now, for the API differences:  **Alex's** list requires the user to render its elements using html string fragments. Example:  ``` javascript render(html: string[]) {   html.push('<div class=""foo"">bar</div>'); } ```  **JoÃ£o's** list exposes DOM api for the user:  ``` javascript render(container: HTMLElement) {   const div = document.createElement('div');   div.className = 'foo';   container.appendChild(div); } ```"
8391|"Here's the same run of @alexandrudima's code on my machine:  <img width=""516"" alt=""screen shot 2016-02-04 at 16 22 21"" src=""https://cloud.githubusercontent.com/assets/22350/12819485/a359d39e-cb5b-11e5-8bf8-2bc516be0b57.png"">"
8392|Related to #1923. Ping @Wosi
8393|> 20489 warn optional Skipping failed optional dependency /chokidar/fsevents: > 20490 warn notsup Not compatible with your operating system or architecture: fsevents@0.3.8 > 20491 verbose stack Error: Code@0.10.6 preinstall: node build/npm/preinstall.js  looks like unsupported platform
8394|@joaomoreno Cool! Can I also try yours -- do you have it on a branch ?
8395|@sparecycles Thank you! I ended up using a very similar approach inspired from your change in dd751e45eeb29fd9839018d9880981e2dd8e9792 --- to distinguish the composition case in the textareaState by checking if the string contains newline --- and to keep track of the version id emitted via contentChange and emit a dummy event if it fell behind.   Thank you once again! -- now I just need to rewrite that logic -- I hate it :)
8396|The issue seems to be that the keybindings (although present), are not showing up in the Mac menu. Moving to Alex who I think does some magic to make keybindings fit for the Electron menu and maybe in this case it does not work.  The actions keybindings are here: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/actions/triggerNavigation.ts#L52
8397|Currently we do not plan to bring the previous thing back, sorry. But leaving open as feature request if someone wants to jump in.
8398|@1767083130 is this with NPM 3 or 2? Can you delete the line here [1] and then try npm install again?  [1] https://github.com/Microsoft/vscode/blob/master/extensions/vscode-api-tests/package.json#L13
8399|Cool!  I didn't know there was an 0.10.7-insiders engine specifically.  I think I didn't understand what I was looking for in the quick pick typings, the API suggestion that Johannes wrote in a comment before is what I was looking for :)  I can see now that the typings are different between 0.10.6 and 0.10.7.  All good now, thanks for the help!
8400|Looks good!  Glad to have helped.
