14501|yeah I meant command palette instead of console but I actually did it in the command palette
14502|This issue was moved to Microsoft/vscode-distro#24
14503|I'll reopen the issue to have the discussion since it is important for @chrisdias.  I like the suggestion from @bpasero to expose this like the other preferences from the preferences menu.   I also want to point out that we do not put all user preferences in the settings file, e.g., themes.
14504|feels much better again, thanks!
14505|@isidorn I think there is nothing to verify here since we rolled back this change, correct?
14506|@bpasero should I pass `-p` to `Electron` executable on my Mac?
14507|I can't pass `-p` to the executable in OS X. Tried:  ``` open -a 'Visual Studio Code' --args '-p' . ```  or   ``` /Applications/Visual Studio Code.app/Contents/MacOS/Electron -p ```  with no luck.
14508|@egamma exaclty, we rolled back the change
14509|> At this point the debug console should also be closed.  If I understand vscode is now going hide the debug console after pressing stop.  My problem with this change is its essential to see the output history trail of a debug session even if pressing the stop button half way through a session.  Here is an example of stopping debugging with v0.10.11 and what I see after I press stop.  ![image](https://cloud.githubusercontent.com/assets/1727302/13901326/c30fa5f4-ee17-11e5-8d0d-6ea58bce33a0.png)  If this is going to forced on us can we make this a configurable debug option?
14510|@dbaeumer 1.8.9 seems to have fixed the issue. I say this tentatively, as I haven't really tested it extensively. But if I use 1.8.2, the lag is immediate on restart of VS code in that thingexpress-tests.ts file. When I switch it to use 1.8.9, the lag doesn't seem to occur in that file. When I switch back, the lag returns. And for complete-ishness, I've now switched back to 1.8.9 and the lag is gone.  I did find that if I commented out most of those other unit/integration tests in that file, thus simplifying the code in that file, that the lag did not exist. If you did a pull on my code and you were on 1.8.2, that may be why you didn't reproduce the lag (I commented them out because I was just focusing on that last test). Since the complexity of the code seems to be causing the issue, it looks like perhaps 1.8.9 has some more performance enhancements that reduce the latency?  Either way, for now I would tentatively close this and if I have any problems I would reopen it. Does that sound good to you?
14511|It seems the word `any` also gets highlighted like this as well.  ``` foo.any ```
14512|/cc @waderyan @chrisdias
14513|ping @mousetraps
14514|1. Installed dependencies 2. Scaffolded Ember CLI app        :bulb: Noticed no highlighting when there could easily be on the following files:    - `.ember-cli` (json) https://github.com/Microsoft/vscode/issues/4462    - `.gitignore` (# comments) https://github.com/Microsoft/vscode/issues/4465    - `.watchmanconfig` (json) https://github.com/Microsoft/vscode/issues/4463    - `robots.txt` https://github.com/Microsoft/vscode/issues/4464 3. Built and served app 4. Looked for the view being displayed using search        There is a ./tmp/ directory that contains output from babel as well as a ./dist/ directory containing the actual site from `ember build` which makes search very difficult to use.        ![image](https://cloud.githubusercontent.com/assets/2193314/13902099/290cc2e4-edf8-11e5-9ff2-acd738dade25.png)        ![image](https://cloud.githubusercontent.com/assets/2193314/13902104/531abdde-edf8-11e5-9cf1-9b1ec857c490.png)        :bulb: Perhaps ember-cli would accept a vscode configuration file that excluded `dist/, tmp/` from the search? `tmp/` could even be hidden or faded from the file explorer.        :bulb: When customizing the search I tried to horizontal scroll the files excluded through settings using <kbd>shift</kbd>+`mouse wheel` and found it does not scroll correctly (https://github.com/Microsoft/vscode/issues/4461):        ![image](https://cloud.githubusercontent.com/assets/2193314/13902120/cbc95e5c-edf8-11e5-9da0-ddf5e0ef26fa.png) 5. Picked up [this tutorial](https://www.smashingmagazine.com/2016/01/write-next-web-app-ember-cli/) to build out an example app.
14515|According to the [TypeScript wiki](https://github.com/Microsoft/TypeScript/wiki/tsconfig.json):  > The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project.  Because of this I don't think vscode should attempt to go further down the folder structure, this is how it works for `.eslintrc` and other similar config files too.  Closing as designed.
14516|Make a PR to ember-cli for the `search.exclude` setting https://github.com/ember-cli/ember-cli/pull/5643
14517|Did you install the C# extension? https://code.visualstudio.com/Docs/languages/csharp#_installing-c35-support
14518|Yes it's installed  ![Image of VSCode](http://d.pr/i/15tLS.png)
14519|@leocrespo and was vscode restarted after it was installed?
14520|Yes of course. Have you tried downloading the file and opening it, I'm sure there won't be any intellisense.
14521|Works fine for me. I'm on Windows 10 and had VS2015 installed before VSCode.  ![image](https://cloud.githubusercontent.com/assets/2193314/13902545/8c9a1062-ee09-11e5-83a0-e56936a1c6f7.png)  I haven't actually used the C# support before, one of the other devs might be able to help you out beyond this point.
14522|I can do that too, that's not intellisense.  ![Image of candothattoo](http://d.pr/i/1k46V.png)  This is intellisense ![Image of thisisintellisense](http://d.pr/i/XTlX.gif)
14523|@leocrespo this might resolve your issue http://stackoverflow.com/a/29979730/1156119
14524|"1. There isn't any option for me to create a project.json or a solution. (amazing) 2. There is no ""Open folder"" command   ![Image of selection](http://d.pr/i/aeyZ.gif)"
14525|All I want is to have basic intellisense on the file I posted, just as I do when I open it with VS. So I created a solution in VS2015.   ![Image of aa](http://d.pr/i/14zVQ.png)  then opened everything with VSCode and still no intellisense.  ![Image of bb](http://d.pr/i/QX0t.gif)
14526|I too would like to see this feature!! I've spent the last hour trying to figure out why my VSCode wasn't behaving properly, but know I know that it is!
14527|"Hi all, so I know this is closed but I'm still unable to launch VSCode from my git bash shell on windows. After attempting `$ code` or  `$ code .`, or `$ code /path/to/folder/` I get the following error: `/c/Program Files (x86)/Microsoft VS Code/bin/code: line 10: /Code.exe: No such file or directory`  I confirmed that my $PATH variable includes the VSCode directory and the VSCode/bin directory.   I'm trying to debug the code.sh script by dumping the variables to the console and I can see the VSCODE_PATH variable is not being correctly set, but I cannot figure out why. Can anyone think of what's going haywire here?  Here's the _/bin/code.sh_ file modified with some additional echo statements:  > #!/usr/bin/env bash >  > NAME=""Code"" > VSCODE_PATH=""$(dirname ""$(dirname ""$(realpath ""$0"")"")"")"" > ELECTRON=""$VSCODE_PATH/$NAME.exe"" > CLI=""$VSCODE_PATH/resources/app/out/cli.js"" >  > echo 0: $0 > echo realpath: $(realpath ""$0"") > echo dirname: $(dirname ""$(realpath ""$0"")"") > echo dirname2: $(dirname ""$(dirname ""$(realpath ""$0"")"")"") > echo NAME: $NAME > echo VSCODE_PATH: $VSCODE_PATH > echo ELECTRON: $ELECTRON > echo CLI: $CLI >  > ELECTRON_NO_ATTACH_CONSOLE=1 ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ""$ELECTRON"" ""$CLI"" ""$@"" > exit $?  and here's the output I'm getting: `$ code .`  > 0: /c/Program Files (x86)/Microsoft VS Code/bin/code > realpath: /c/Program Files (x86)/Microsoft VS Code/bin/code > dirname: /c/Program Files (x86)/Microsoft VS Code/bin > dirname2: . > NAME: Code > VSCODE_PATH: > ELECTRON: /Code.exe > CLI: /resources/app/out/cli.js > /c/Program Files (x86)/Microsoft VS Code/bin/code: line 20: /Code.exe: No such file or directory"
14528|Visual Studio can generate sln files as you mention, VSCode cannot. VSCode typically relies on external tools or extensions for that kind of project scaffolding.  As for the `project.json`, it looks like this is created using the relatively new .NET Core and [`dotnet` CLI](http://dotnet.github.io/getting-started/) which uses a more folder-based approach to C# development which is more inline with what VSCode was designed to work with (as opposed to project/solution-based).  So once the .NET Core is installed, you should be able to run this to generate a project.json:  ``` dotnet new ```  And then this to run your application:  ``` dotnet restore # install deps dotnet run ```  When coming back to VSCode I ran into this OmniSharp issue related to VSCode not being able to find the globally installed dnx runtime https://github.com/Microsoft/vscode/issues/126#issuecomment-160131771  ---  Not sure why open folder is not there, it always has been for me (I don't use OSX though).  ![image](https://cloud.githubusercontent.com/assets/2193314/13903312/6a670562-ee32-11e5-9244-e22b8301c335.png)  You can always run the command from the command palette: 1. Press <kbd>F1</kbd> 2. Type `open folder` 3. Press <kbd>enter</kbd>  ![image](https://cloud.githubusercontent.com/assets/2193314/13903317/8e364188-ee32-11e5-8c6a-e4d929e5df56.png)
14529|/cc @joaomoreno
14530|I had the same issue and switching module to 'amd' did get it fixed. However I don't understand why it's TS 1.8.x issue rather than VSCode's, could anyone elaborate?
14531|"@mohsen1 you still need to invoke the action ""Developer: Startup Performance"" from the command palette."
14532|@bill-mybiz @dbaeumer I can also confirm that TS 1.8.9 also fixed the issue in my machine.
14533|OS X 10.11.3  **VSCode Insiders 0.10.12**  `code-insiders -p --disable-extensions`  Then executed `>Developer: Startup Performance`.  ![screen shot 2016-03-20 at 12 45 12](https://cloud.githubusercontent.com/assets/1297882/13904228/a635885e-ee99-11e5-8e25-9559a35567c8.png)  **VSCode 0.10.11**  `code -p --disable-extensions`  Then executed `>Developer: Startup Performance`.  ![screen shot 2016-03-20 at 12 44 21](https://cloud.githubusercontent.com/assets/1297882/13904224/87d272fa-ee99-11e5-8cd5-99bbf72a8882.png)  **VSCode 0.10.10**  `code -p --disable-extensions`  Then executed `>Developer: Startup Performance`.  ![screen shot 2016-03-20 at 12 52 16](https://cloud.githubusercontent.com/assets/1297882/13904258/9d031ffc-ee9a-11e5-8133-6965a4aafa4f.png)  Wasn't able to install 0.10.9 to PATH so I stopped at 0.10.10.
14534|@pflannery, sorry I didn't get a change to look at this over the weekend. I'll try to look one night after work this week, but if not, definitely on the coming weekend.   I'll obviously need to get my head around developing VSCode and it might be slow to start with, but I'm really excited about jumping in.  @Tyriar I'm sure whatever work is done here will be somewhat transferrable to that too (at least in part).   I can see the competing ideas here, and both sides make valid points. I feel that the argument around discoverability does make the GUI option compelling, but understand the need to implement this in such a way that power users could get away with never seeing it.  Personally, I don't want to have to research what each setting does or what options are available. I also see the value in having those settings in JSON so that I can store them with my projects, or synchronise my settings between computers.  If this idea did end up being an extension, I'd hope that it would be something that was an option during the install process. That could be a good compromise, example below:  > Would you like to use the GUI for changing settings? Selecting yes will install the extension `settings-gui`, which can be removed.
14535|"I also wanted to point out that this GUI should not only apply to settings. I know people who don't know JSON and are totally confused how to setup a launch.json or tasks.json to make it do what they want. If the GUI is generated from a schema it would be trivial to show the ""switch to GUI"" button for these files aswell."
14536|@mrmckeb no need to apologize. Take your time. Don't feel you have to do anything at all.
14537|Cannot confirm this issue with the Vanilla JS, cursor starts at correct indent. Maybe it is just an issue related to typescript.
14538|@leocrespo just want to point out that the example you show here would never work as your trying to write the script in the c# class root scope. In this scenario Visual studio also fails to show intellisense too  ![animation](https://cloud.githubusercontent.com/assets/1727302/13905713/94439ea8-eebf-11e5-8228-9d51b603061d.gif)  Try this example project in vscode https://github.com/dotnet/core/tree/master/samples/helloworld  run `dotnet restore` in the root and you should get this:  ![image](https://cloud.githubusercontent.com/assets/1727302/13905764/e5085166-eec0-11e5-87b0-8fa97477751b.png)  i'm running vscode 0.10.11
14539|Adding my :+1:. This would solve one of the issues I encountered in the [ember-cli test tour](https://github.com/Microsoft/vscode/issues/3719), saving devs from setting up a vscode-specific config file. Related PR: https://github.com/ember-cli/ember-cli/pull/5643
14540|Updating vscode will fix this issue. I think it was this one: https://github.com/Microsoft/vscode/issues/2829
14541|Sweet! Happy to contribute. ☺️ Keep rocking, guys!
14542|I recently created an extension to assist in working with `.gitignore` files. The current version includes syntax highlighting as you requested. You can find the extension in the [marketplace ](https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore) and on [GitHub](https://github.com/CodeZombieCH/vscode-gitignore).
14543|"I've found an interesting performance implication resulting from the current defaults/lack of configurability. Consider the hard-coded modifier associated with the ""peek definition"" functionality. If a plugin must do some work to provide the definition, it's very likely VSCode will ask plugins for definition information even when the user has no intention of obtaining it. As I describe in https://github.com/Microsoft/vscode-go/issues/257#issuecomment-198993769:  > For example, with the cursor resting still in the editor area, pressing ⌘ instantly invokes the GoDefinitionProvider, even when ⌘ is immediately used in a chord for some other command (e.g. copy, paste, opening the command palette, etc.). >  > This means calls to godef are happening when the user is pressing a very common key with no intention of obtaining contextual hover information.  When using vscode-go, this means significant extraneous energy usage which could be avoided almost entirely by providing modifier key settings for ""peek definition"". Not only would the feature be convenient and allow for better host OS GUI integration, but VSCode would be more CPU-efficient for common usages."
14544|@isidorn this issue has broken the go-debugger. I've created a PR for them but I still think that we should have provide backward compatibility as was suggested above.
14545|Go debugger in current Go extension doesn't work in VS Code-alpha. The problem is a missing adoption of https://github.com/Microsoft/vscode/issues/3161. I've create a PR to address this: https://github.com/Microsoft/vscode-go/pull/258. Other than that Go extension looks fine.
14546|gits are run as soon as file is updated repeatedly  bipin    12966 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12967 12252  5 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12968 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12969 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12970 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12971 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12972 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12973 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12974 12252  4 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating bipin    12975 12252  6 03:22 ?        00:00:00 git show HEAD:myfile/thatwas/updating  The offending process was vs code  bipin    12252  9893  7 03:10 ?        00:00:52 /home/bipin/Downloads/VSCode-linux-x64/Code /home/bipin/Downloads/VSCode-linux-x64/resources/app/out/bootstrap git /home/bipin/xyz/folder/open utf8 /home/bipin/Downloads/VSCode-linux-x64/Code
14547|Nice @CodeZombieCH! I think we may want to integrate the [basic syntax highlighting](https://github.com/CodeZombieCH/vscode-gitignore/blob/master/syntaxes/gitignore.json) into the core editor.
14548|@jrieken I tried today's alpha build and the problem still exists. :-(
14549|Reproduced. It gives the error `spawn ENOTDIP`. It's happening because `x-terminal-emulator` is not in the `PATH` on Fedora.
14550|`x-terminal-emulator` is part of the Debian alternatives system which is why this doesn't work.
14551|+1
14552|Open up ''/usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0'' and remove BIG_EXTENSIONS to something else like FIG_EXTENSIONS.  sudo vi /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0 s/BIG_EXTENSIONS/FIG_EXTENSIONS  This is a total hack, but it does work.  @Tyriar maybe you can put this in your release notes or something. The reason is that XRDP only works with Ubuntu MATE (or XFCE, etc.) lighter weight desktops, and there this BIG REQUEST thing doesn't seem to work.
14553|There is a PR https://github.com/Microsoft/vscode/pull/3495 that allows Linux users to specify a different terminal other than the hard coded `x-terminal-emulator` not sure whether it will be accepted or not though
14554|+1 I've got similar error and only way to get around it is to close vscode and open it again btw my vscode is v 0.10.11
14555|@pflannery any thoughts on how we could have fallback terminal emulators on Linux? We will eventually want to have at least 2 such as `x-terminal-emulator` (Debian) and `gnome-terminal` (Red Hat), probably more eventually as there are other display managers. I'd like to get it so that it works out of the box on Red Hat pretty soon (https://github.com/Microsoft/vscode/issues/4478).  I also noticed while doing a little research in to #4478 that gnome has something similar to the alternatives system in Debian for specifying a preferred terminal:  ``` # Ubuntu ❯ gsettings get org.gnome.desktop.default-applications.terminal exec 'x-terminal-emulator'  # Fedora ❯ gsettings get org.gnome.desktop.default-applications.terminal exec 'gnome-terminal' ```
14556|@pflannery thanks for pointing that out
14557|@Tyriar could use `process.env.DESKTOP_SESSION === 'gnome'`
14558|could have `powershell` as windows default?
14559|This works when using `tsd install node express`. It doesn't work when using  - `typings install node --ambient` - `typings install express --ambient`  We should mention this in the docs and describe the work around.  ![image](https://cloud.githubusercontent.com/assets/172399/13912155/5f724622-ef3a-11e5-9572-dc968c0b6518.png)
14560|This issue was moved to Microsoft/vscode-docs#241
14561|@jrieken we can fix the docs and document the work around, but we should understand the reason. Can you look into this.
14562|@pflannery nice improvement! Ideally it would only revert to `gnome-terminal` if it's not Debian based, you could do this by checking if `/etc/debian_version` exists. Not sure if this is an OK thing to do for default values, but it probably only needs to be done once. @joaomoreno?
14563|Fixed in loc files
14564|With the latest build we added templates to generate the tasks.json file and one of the templates is tsc in watch mode. Closing,
14565|"Just getting back to trying to resolve my particular issue again.  Installing v0.10.11 and adding ""http://"" to my http.proxy URL fixes my issue accessing the extensions list for browsing.  Interestingly though, the traffic still doesn't show up on my Fiddler4 session."
14566|Closing. Fixed according to last comment.
14567|@jrieken I received a document remove event with a document set to undefined. Moving to you since the remove document should IMO contain a valid document object. Marking as important since you changed something in that area on Friday and I suspect a regression here.
14568|Setting to March to check if this is a regression. @jrieken feel free to un-label.
14569|should be fixed in recent versions
14570|@leocrespo There is a Omnisharp log file (Cmd+L,L) Please paste its contents here.
14571|This issue was moved to OmniSharp/omnisharp-vscode#113
14572|This issue was moved to OmniSharp/omnisharp-roslyn#442
14573|@rafaelmaiolla I published vscode@0.11.9 with an updated node.d.ts
14574|This issue was moved to OmniSharp/omnisharp-vscode#114
14575|This issue was moved to OmniSharp/omnisharp-roslyn#443
14576|Dups #981
14577|@Morgy93 That wasn't my question but your comment is very helpful as well, thanks. @aeschli OK, then no more problem about this issue now, thanks for the great work.
14578|@alexandrudima It seems we have a document without an uri...
14579|@egamma this is a dup of #3841 and no one was brave enough so far to do that change for March. So I proposed to due this for April to get some testing on it. Lets's discuss in standup today.
14580|"I can confirm this. A ""clear all errors"" command would be helpful at least."
14581|@isidorn changed quite some code here for March milestone. Need to check if this behavior got better.
14582|This only happend with format on type on and got fixed in the March release.
14583|yeah, I'll take a look and see what's the difference between tsd and typings
14584|This issue was moved to Microsoft/TypeScript#7611
14585|@lovedota how does your tsconfig.json file look like. And if you compile the src using tsc on a command line do you see the same errors.
14586|I think the schema in this request could solve the problem: https://github.com/Microsoft/vscode/issues/4475  It allows to define multiple commands and it is very easy to transform to the current tasks.json schema.
14587|@bipin-nag   > Add a file, push it and open in git view  Do you mean viewing in the diff editor or just in the view?
14588|The reason why having a separate file was actually startup performance. It is not only reading the file it is also parsing it. And having a separate file allows for stating that file and only read it if present. If we put this into the settings file then we always have to read that file on startup and then in most cases find out that no value is stored in there.  I add a menu entry when I code it and quickly discussed it even with Ben but then decided against it since I thought it makes a single setting to prominent.   And there are more settings that have their own files: tasks.json, lunch.json, ....
14589|My suggestion: Show it under File > Preferences and instead of opening a file we show a drop down of all supported languages (similar to how we show Themes). Selecting a language just writes to this file in the backend without the user knowing.
14590|This issue was moved to Microsoft/TypeScript#7612
14591|@Tyriar The change was not rejected. It just needed extra changes in for SASS.
14592|@Houfeng can you attach a screenshot of what happens?
14593|Not sure if we can be better here, have to investigate.
14594|@rhires you want to compile the MD file to the HTML file and save it somewhere?
14595|This is expected because we do not store any settings in empty workspaces. This would not happen when you open a folder.
14596|This seems to be https://github.com/atom/electron/issues/4261
14597|There's no need to send logs or try any other steps, this problem takes 15 seconds to reproduce.  Just download this file, open it with VS Code and you'll see there's no intellisense   http://d.pr/f/1jczl
14598|@dbaeumer to verify that the improvements for March improve this.
14599|"@csholmq thanks much, the numbers though do not show any slowdown. the interesting number is ""Total"" which is the time it takes until all things are loaded. Can you see that after ~3 seconds the UI has loaded?"
14600|@bipin-nag can you reproduce this in the latest version of Code.
