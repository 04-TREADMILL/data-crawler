11501|Yes, there needs to be a schema file association. Either using $schema, in the settings, or by an extension. See https://code.visualstudio.com/docs/languages/json#_json-schemas-settings for more information and examples.  You are saying that you are using the ARM extension? Is 'VirtualNetwork.json' a file name you picked or is it a default name typically used with Azure configuration files? If it's a default name, I'd move the issue to the ARM extension team.  We have no code assist for $schema. That's a good idea, but there's an open number of schemas around, so in the end you as the user will have know the schema URL to validate against,
11502|PowerShell block comment folding is weird in the Insider build 0.10.10. <# Comments here and here #> Broken: http://i.imgur.com/M6Ay1vl.gif It should fold around the <# + #> Like this: http://i.imgur.com/HFRHJJL.gif https://blogs.msdn.microsoft.com/powershell/2008/06/14/block-comments-in-v2/
11503|Closing the issue as this looks like a problem of the OmniPascal grammar
11504|Now I understand. It's the indentation level. Language-aware folding ftw!
11505|You are right, currently it is not possible for an adapter to say that an exception breakpoint should be enabled by default. Forwarding to @weinand to decide if we want to introduce this to the protocol, and if we decide to introduce it then I can add it on the vscode side
11506|It looks great and I'm impressed...Also hoping I'm posting this in the right place.
11507|ping @rick111111
11508|"""Con"" is invalid, see https://msdn.microsoft.com/en-us/library/aa365247"
11509|I do not log the null value to the console, since so far we never log to the console unless there is an explicit error. This case I handle the same way as if the adapter would return two variables with the same name - I just silently ignore it. The DA developer would see this while inspecting the messages he is sending from his side, I do not think there is a need for vscode to add msgs to the console, a variable missing in the variables view is a clear enough signal for the developer to check his outgoing variables response imho
11510|Discussed with the team and we favor a different approach that does not include a new setting, instead we piggy back on the existing encoding option and add a new option `UTF8 with BOM`. This has several advantages: - you can easily see if a file has a `UTF 8 with BOM` or not by looking at the status bar encoding info - you can actually convert a file between `UTF 8` and `UTF 8 with BOM` by using the `Save with Encoding` action from the status bar picker and by picking `UTF 8` to remove the BOM and the other to add it
11511|@aeschli Yeah, I would assign this over to that team. `VirtualNetwork.json` is a file name that I chose. How would the file name matter though? An ARM JSON template file can have any file name, as long as it ends with the `.json` file extension.  My recommendation here is that the ARM VSCode Extension team adds support for completing the `$schema` property.
11512|![image](https://cloud.githubusercontent.com/assets/900690/13502375/03f4a0ec-e16b-11e5-8a09-a51cc7b31ee8.png)
11513|@weinand, I was thinking about this last night and I think we probably want to use the flag model and keep the threadid since we still want the ui to open the documents and set the current frame to the thread that received the stopping event. Otherwise, the UI won't know where to take the user.
11514|Now is better! you have to be able to save with BOM and save with BOM if the file already has it.
11515|@bobmajdakjr Thanks for sharing this.  We are addressing this and other icon related issues in an upcoming release.
11516|Makes sense. Will try to add this for March.
11517|Not working in latest alpha with the changes, it's even worse:  ![image](https://cloud.githubusercontent.com/assets/2193314/13502875/a522671e-e121-11e5-8f59-f1cd1db1244c.png)  Verified again in devtools, `left:-999em;` takes it out of the flow of the page.
11518|"I'll give that a try. Hmm, looks like our extension returns reason ""paused on breakpoint"" all the time.  What are other debuggers returning for `reason` when the user is just stepping through code and not hitting a breakpoint?"
11519|"@seanmcbreen feel free to add more thoughts here.   One suggestion (by @egamma and @seanmcbreen) is to add a small prompt for **why** these specific extensions are shown. Something like: ""Here are extensions that could be useful based on the files in your workspace"" (feel free to change that language)."
11520|@isidorn the `threadId` is already spec'ed as optional (but it is not spec'ed what happens if it is missing).  So the DA can decide to not set it which will result in the UI using the strategy sketched above. If the DA decides to set the `threadId`, the UI will user the current behaviour.
11521|They return 'Step' as the reason, that particular reason we do not show as it is the most common one Node also returns 'Exception' as a reason.  Let me know after this change if it is still not obvious enough and I will reopen this issue
11522|D'oh. That would of course be helpful :)  OSX Yosemite 10.10.5 Code 0.10.9 (0.10.9)  Thanks!
11523|It's being styled with the default styles:  ``` css .monaco-editor.vs-dark .token.meta.tag {     color: gray; } ```  This is a good example of the need for https://github.com/Microsoft/vscode/issues/2564, closing in favor of that.
11524|@isidorn Thanks!
11525|Using a [`.netrc` file for auth](https://gist.github.com/technoweenie/1072829) may be a workaround for this.
11526|Somebody fixed this and it was not me
11527|"A C++ could very well be able to use this. I'm just suggesting that this choice is left for the extension to control and ultimately by the end user which configures the extension. It all depends on the preferences of the user base. As it stands now, the ""only"" solution is to disable Enter as a shortcut for **all** extensions and languages."
11528|![image](https://cloud.githubusercontent.com/assets/11839736/13503800/37f5dce8-e126-11e5-9689-6e0caa8cbdf9.png) This is me web inspecting it so you can see the problem (which is otherwise harder to see).
11529|+1
11530|This issue was moved to Microsoft/TypeScript#7370
11531|@Tyriar ok I pushed a change with your suggestion to stable, can you please verify again?
11532|I have a 4K screen and having no tabs to horizontally is really turning me off from VsCode
11533|BTW, I want to clarify that I don't just want tabs, I would like sets of tabs.  As a full stack mvim TDD developer on the Mac, I think in terms of contexts.  html + css, angular + tests, node + tests, cucumber + test steps.  I normally work in a single context for a few lines of code before moving to the next context, TDD style.  When using mvim, I not only switch between these contexts very quickly (using the same key sequence that I use for Mac Terminal, Mac Finder and Safari or Chrome), but I benefit from macros that automatically open the paired file, so that from an angular source file, I can automatically open the corresponding test.  This is an incredibly productive way to work, and keeps my fingers on the keyboard.
11534|@Tyriar that's funny we both noticed the same problem (I didn't realize you had created an issue for it).  @bpasero I think we need to increase the default contrast to make this more clear.  I've received feedback from a user that certain monitors with low contrast cannot display colors like this very well.  While we don't need to make this AAA-level accessibility necessarily (that's what high-contrast mode is for), it's important that we address this from a usability perspective.
11535|@lafe great idea!
11536|I pushed the run command, try it out and let me know what you think. Please note that I was unable to fully test this out since the latest node debug still broke on breakpoints if I passed it the `noDebug: true`.
11537|"Found out the reason why this happening: It's the `border` property we're using with a large width.  It's going on top and on bottom, which is making the size of the thumb too large.  What we should be using is an `outline` with an `outline-offset`.  However, from a usability perspective, I noticed that there is room to improve the way we do it while we fix this issue.  We are using very strong colors to meet AAA color accessibility requirements, but this makes it hard to see what's behind the thumb.  What if we used a background color that is less strong and used an outline that is strong, that way users can still see behind the thumb and see their code outline?  Pictured below is the current way we're doing it (which is too difficult to see) _on hit_ <img width=""552"" alt=""screen shot 2016-03-03 at 10 34 12 am"" src=""https://cloud.githubusercontent.com/assets/11839736/13504947/9aebd01e-e12b-11e5-8241-dc56c97eb5a3.png""> _on focus_ <img width=""551"" alt=""screen shot 2016-03-03 at 10 34 31 am"" src=""https://cloud.githubusercontent.com/assets/11839736/13504946/9aea95be-e12b-11e5-964c-de0fa7a497f7.png"">"
11538|Fixed :+1:
11539|This is just great that you make this so transparent.  Thanks.
11540|Awesome, this does exactly what I was after. Thanks :)  On Wed, 2 Mar 2016 at 10:01 Edward Bishop edjbishop@gmail.com wrote:  > Will do, cheers :) >  > On Wed, 2 Mar 2016 at 09:28 Isidor Nikolic notifications@github.com > wrote: >  > > If you understand you correctly, you do not have the reverse situation. > > Debug will no longer jump back to front when updates. Please try out the > > insider update and let us know what you think. > >  > > â€” > > Reply to this email directly or view it on GitHub > > https://github.com/Microsoft/vscode/issues/3597#issuecomment-191152435.
11541|Hi **@pieandcakes**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Pierson Lee (PIE)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
11542|@isidorn @SofianHn - Here are the changes in telemetry requested for the debugging story.
11543|+1 very useful feature that I love from sublime
11544|I usually work on a share drive for backup purposes with git on it. Could that be the issue? I also experienced it today on a plain html/js file on my desktop. Seems to happen specially when I debug the js on chrome.
11545|Hi **@phillipj**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
11546|I'm still seeing this issue.
11547|@felixfbecker thanks so much for sharing!  This is great feedback.  I'm going to discuss it with the team.  We really want to improve this experience.
11548|Also noticed this in the prerequisites:  ``` bash npm install -g mocha gulp ```  which could also be removed.   In addition to the mentioned PR, what's in #3691 made me able to tests and dev version of VS Code running without gulp or mocha globally.
11549|K.  So I left the instance of code running overnight, and didn't have a problem with it crashing or feeling immediately laggy.  I continued work today, and even took a tiny bit of a break from using it while doing other things, and it started to be laggy again.  It almost seems that maybe the problem isn't from actively using it, but it also sounds like something else triggered it during the time I've been working on it.  I'll run the profiler to keep my eye on it, and I'll create a new issue if there are other findings different than those explained above.  I haven't checked to see if you can have access to my workspace, though I'd suspect I can't share that with you, unfortunately.
11550|"Wow, this is awesome -- validates our work over at https://github.com/VSCodeVim/Vim :fireworks:   > VsVim for Visual Studio as an initial goal  That is a lofty initial goal -- I view it more as the **gold standard**. I met up with @jaredpar (awesome dude btw!) when I had just started the VsCodeVim project, and there's definitely a lot of work involved with getting any of these VSCode VIM extensions to that state. It's unfortunate that there's no way to port all the good work VsVim or any of these other IDE extensions have done.  As for VIM on VSCode, addressing these issues would be a start: https://github.com/Microsoft/vscode/labels/VIM. In developing the VsCodeVim extension, there's been a couple of other major difficulties:  - Dealing with International Keyboards -- @guillermooo did some awesome work for our extension to be able to handle international keyboards (es-ES, de-DE, etc), but I think this should inherently be something that VSCode deals with as all extensions that deal with keybindings would have this problem. - To expand on @aioutecism point, the existing keybindings system is pretty bare-bones. A problem that we consistently see with our extension is that would would bind a key, do some VIM stuff, and then find out after that fact that we broke some inherent IDE behaviour (e.g. auto-braces, auto-completion). An easy work around may be to be able to pass the binding back to VSCode to handle -- ""our extension is done with this key, go do what you usually do VSCode"" - Cursor Styling although that may have been addressed with https://github.com/Microsoft/vscode/issues/561  @waderyan: are you on the VSCode team? Looks like you are in Redmond, I'd be happy to meet in person to discuss."
11551|+1
11552|I **really** do appreciate all the good will VsVim has gotten on this thread.  It's what makes OSS projects worth doing.  :smile:   > VsVim for Visual Studio as an initial goal  But I think that is probably unrealistic for an initial goal.  VsVim's been in active development for about five years now.  Can't expect a new vim emulator to get to that level for an initial release.    Instead I'd focus on hitting the core scenarios for an initial release.  For example: motions, key mapping, `.`, and a few normal mode commands.  Once that is in place it's easier to branch out and do other features in parallel because the basic pipeline has been established.
11553|+1
11554|Glad to hear :)
11555|@bgashler1 please provide more details, do you see it by just switching to high contrast theme. What version of vscode are you using? Do you see it if you run latest out of dev?
11556|Yah, definitely need it! +1
11557|"@isidorn: You are right NodeJS debugger don't have this issue.  It turned out that the debug adapter I'm working on returns an error message that directly contains ${wrongvariable} in the string, and also doesn't provide a ""wrongvariable"" args for string formatting.  The error message I reported is from part/debug/common/debug.ts, function formatPII() throws when it tries to format the string. I'll make a fix on my side. However it will be nice if formatPII() can directly output the string when there is no object to format in args. Or provide some option of not formatting the string."
11558|Thanks @Tyriar. Perhaps I could start work on the functionality here and we could polish the UX later? The approach would be something similar to what @felixfbecker described, and I also like how the Atom team manage their settings.
11559|Nice catch and cool repro steps - thanks!
11560|I'm also having issues behind an NTLM proxy. I do not have any special characters in my password. I often do not get an error, but the list never loads. On v0.10.8.
11561|Nice idea.  I previously had a similar idea, and I agree this could be be less intimidating to new users.  It could also beneficial to people who don't know JavaScript and who are using VS Code for another language that doesn't have anything like JSON.  Finally, JSON can be unforgiving if you miss a comma or closing brace somewhere.  The worry the team had when I shared this idea previously was that a GUI would not be able to do everything JSON could do as simply and effectively.  JSON is leaner (you copy just what you need and change just what you need); it's easy to see what you've changed, because you're only overriding defaults.  Intellisense also helps people write what they need.  Lastly, JSON results in shareable recipes that can be committed or emailed to others.  Despite the drawbacks, @felixfbecker, you have an interesting idea of generating the GUI based off of JSONâ€”with some careful styling and layout rules, this could work well potentially.  @mrmckeb you mentioned that you've heard this from others.  Could you point me to that discussion?
11562|:-1: -1 I like it lol.
11563|"I see it on my up-to-date local build and on Alpha.  It seems to only happen whenever there was an alert message and it is dismissed (the blue bar remains after it is dismissed).  This blue bar is the border-outline from the collapsed `<ul class=""message-list""></ul>`.  I just fixed this with a simple CSS rule.  I'll be pushing momentarily"
11564|Awesome!
11565|Google Chrome settings seems like a good source of inspiration since they filter through a mass of settings based off of keywords.
11566|@jpoon yes I am and that would be great. I'll reach out when I'm back in town to set something up.
11567|@mrmckeb Before we jump into implementation.  Let me first check with the team and also get some mockups to be sure we have the experience right.  I would hate to waste any effort before we have the experience where it needs to be.
11568|Since this thread is generating a lot of traffic -- here's another VIM related issue I just filed: https://github.com/Microsoft/vscode/issues/3695
11569|This is happening because there is a `preLaunchTask`, and for some reason I do not get the `inactive` event from the `taskService` in this case. Forwarding to Dirk as the issue seems to be in the tasks land. If not, he will have an idea what I am doing wrong here.
11570|ping @alexandrudima
11571|Hi **@guillaumejenkins**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Guillaume Jenkins). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
11572|@dstorey nice idea!  I'll be doing that from now on.  Thanks for the suggestion.  It looks like https://github.com/svg/svgo is a good tool.  By the way, can you clarify why presentational attributes would be better?  Were you suggesting this because we could have CSS style the icon's fill and stroke color?  Most of our SVGs are not embedded inline in the DOM but are referenced by URL in a `background-image` rule (do you think we could still style them if they're not part of the DOM tree)?
11573|"Hi @txchen,  Each extension supports it own settings, and you have to look at its `readme` page.   You configure the extension in the same place where you configure **Code** itself, via `Preferences: Open User Settings`.  For instance, this is my `User Settings` with 3 different extensions configured:  ``` json     ""projectManager.sortList"": ""Name"",     ""projectManager.codePath"": ""C:\\Program Files\\Microsoft VS Code\\Bin\\Code.cmd"",     ""projectManager.openInNewWindow"": false,      ""tagged.tagString"": ""# #day/#month/#year - #enteredText"",      ""bookmarks.saveBookmarksBetweenSessions"": true,     //""bookmarks.navigateThroughAllFiles"": true,      ""gitProjectManager.baseProjectsFolders"": [         ""C:\\Users\\Alessandro\\Documents\\GitHub-Testing""     ],  ```  Hope this helps."
11574|"It was just because (I think) the other SVGs do it that way, and SVG optimisers often do that optimisation anyway. Depends how often you reuse the style. If it is a one of thing then it is more compact just adding it as an attribute, but if it is something reused a bunch, using CSS may be better.  For example in one file the colour is added like so:  ``` SVG <style type=""text/css"">     .icon_x002D_vso_x002D_bg{fill:#656565;} </style> <path class=""icon_x002D_vso_x002D_bg"" â€¦ ```  With a presentational attribute you don't need the class name or the style element, so is just:  ``` SVG <path fill=""#656565"" â€¦ ```  (it could be optimised further to use #666 as it is so close to #656565 that no one would likely notice, but that is just my obsessive compulsive micro-optimisations ;))"
11575|This seems related to what I've just run into, some extensions I tried to install where giving this error, (e.g. the donjayamanne.python-0.2.9, and gerane.Theme-BetterJS-0.0.1). My work a round was to check out their $HOME.vscode\extensions directories, note that they didn't have any package.json file, so I just put in a 'do-nothing' file of that name with '{}' in them, (just the braces, not including the quotes).
11576|@alefragnani thanks!  Close this issue.
11577|Another approach might be to integrate various scaffolding tools into the task runner somehow.  If my extension could insert tasks like `Tasks: Scaffold New PowerShell Module Project`, `Tasks: Scaffold New Module Manifest File` and `Tasks: Scaffold PowerShell Module Publish Script`.     The one downside to this approach is discoverability unless ... there was a Task Explorer viewlet along with the Navigator, Search, Git and Debug.  FWIW I would use a Task Explorer viewlet way more than I ever use the Search viewlet.  Hmm, I really like this idea as I think the tasks feature is currently not very discoverable.
11578|"My plugin has belong poricy. - do not distutbe vscode functions   - not support . q (disturbing suggestion)   - not support functions using Ctrl-key (other extentions use them) - you should use functions vscode has   - not support u(ctrl-z) ><(tab) :w(ctrl-s) :q(ctrl-w) vimrc(settings.json) - support other vim functions   - already complete: 3w c3fc p v ...   - uncomplete: V ""ay ma `a  I'm offering non-vim users to use VSCode. My goal is not VsVim. VsVim lesses stresses vim users has, but I cannot answer which keys you press to format code and replase strings with regular expressions in VisualStudio.  An additional function of plugin system I want is, **_a switch of contribution point**_. Contribution points of my plugin is `""when"": ""editorHasSelection""` to divide Insert mode and normal mode. I do not want to catch keys in insert mode. On the other hand, VSCodeVim/Vim calls `editor.action.triggerSuggest` in anytime. Users having mode concept are not only vim users, they want it too."
11579|For me, you could completely replace VsCode default keybings. Or offer an options file that I could edit. Not having `:w` or `u` sucks. You are not addressing VsCode users with a Vim pluggin, you are addressing Vim users that are interested in VsCode. I simply will not use VsCode until it has a decent Vim plugin.  Also, I love that VsVim is able to load `.vimrc` from my profile. That would be an extended goal. I love that my `jj` mapping to `ESC` from `.vimrc` are automatically picked up by VsVim, for example.
11580|Duplicated to #2267.
11581|I got this error too in Ubuntu 12.04.  ---  Actually my error is precisely:  ``` A JavaScript error occurred in the main process Uncaught Exception: Error: Failed to set path     at Error (native)     at Object.<anonymous> (/opt/VSCode-linux-ia32/resources/atom.asar/browser/lib/init.js:120:7)     at Object.<anonymous> (/opt/VSCode-linux-ia32/resources/atom.asar/browser/lib/init.js:132:4)     at Module._compile (module.js:434:26)     at Object.Module._extensions..js (module.js:452:10)     at Module.load (module.js:355:32)     at Function.Module._load (module.js:310:12)     at Function.Module.runMain (module.js:475:10)     at startup (node.js:130:18)     at node.js:982:3  ```
11582|"If I found an IDE that would allow me to open ""associated"" files in frames next to each other, just by switching one tab, e.g. when I open **button.html** it would open **button.js** next to it and **button.scss** in the third frame, I would never use another IDE ever again.  I know it will never happen, but just sayin'."
11583|Well, then, you should be using mvim!  http://www.vim.org/scripts/script.php?script_id=1567 Command :AV opens associated files (A for associated).
11584|I too am seeing this issue, if I launch a command window from the command pallet and invoke dnx web then kestrel launches fine against coreclr.
11585|@mbroadst I didn't have the cursor problem on my mac, but you can try:  Choose Apple menu > System Preferences, then click Accessibility. Click Display then drag the Cursor Size slider to the right to make it larger  You can also change the Display contrast to see if that helps, it seems MacOS removed the ability to change the mouse pointers, unless you install a another application like Mousecape
11586|Same issue with RHEL6 seems to occur on Atom https://github.com/atom/atom/issues/2177. I think RHEL7 should work [since it comes with gcc 4.8](https://access.redhat.com/solutions/19458) (C++11).
11587|@isomorphisms looks like a distinct issue, I created https://github.com/Microsoft/vscode/issues/3700
11588|@simonyhchen you can see #3603 for a detailed update, currently we will not support <= RHEL6 since it doesn't have C++11 out of the box. Atom has the same issue and I'm not sure if we will invest in this in the future.  It may be possible to get Code running on RHEL6, but you will have to get all the dependencies installed and build the OSS version yourself.
11589|Cannot reproduce (Ubuntu 15.10) v0.10.10-insider.
11590|+1, we need one more it seems.
11591|Maybe its just a matter of picking a different CSS for active actions? Actions are small and thus the blue border around them is subtle, but if e.g. we decide to change the background color of them maybe that would make things better overall?
11592|I should be able to get this fairly quickly, assigning to myself to remind me to upvote when I can.
11593|done :rose:
11594|Thanks @basarat :smile:
11595|Cannot reproduce (Windows7 x64) v0.10.8
11596|> Also, I love that VsVim is able to load .vimrc from my profile. That would be an extended goal. I love that my jj mapping to ESC from .vimrc are automatically picked up by VsVim, for example.  This.
11597|The new line is correctly picked up on triple click on Ubuntu 15.10/vscode 0.10.10-insider.
11598|Thanks a lot, @guillaumejenkins!
11599|We currently do not support to exclude folders from our watching infrastructure so files.exclude does not have an impact. One reason is that e.g. we want to hide the .git folder from the explorer but we cannot disable file events for that folder because git relies on these events.  We might need to add a new option to configure watcher exclusions.
11600|But we can not associate all JSON files with the ARM schema by default. There's plenty of other json files around which are not ARM configuration files.  I'll change this issue as a request to provide code assist for $schema then,
