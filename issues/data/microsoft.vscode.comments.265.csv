26401|@ventis07 please provide reproducible steps. I don't know what ionic is and how to create the four projects from above.
26402|Duplicate https://github.com/Microsoft/vscode/issues/5840, fixed in v1.3.0 and current insiders build.
26403|Keyboard navigation is also slow in the sentence.
26404|@sandy081 If you (or anyone) can point me to the source file that handles these interactions I could give a try at providing a PR with the change. Alternatively is it possible to write an extension that would override the interactions in this panel?
26405|On OS X it is selectable as well.
26406|confirmed the fix. thanks.
26407|Any other applications possibly have conflicting keybinding?
26408|I've noticed this in powershell as well.
26409|Also issues with moving left or right. The visual cursor gets out of sync.
26410|I say you keep the two synced. I'd like to have that ability.
26411|@aeschli Thank you for your thinking.
26412|I just got an update to 1.2.1, release notes seemed like several problems I was hitting may have been fixed.   I'll confirm but it may take a couple of days for me to get around to it.
26413|Yes, thanks @JimiC.   The docs are tough to approach for someone who's ramping up.   For me at least.   The examples swamp me with new concepts, grunt, gulp, jake, problem matchers, etc.   I know I read that page at least three times, but guess it was TL;DR.
26414|Those aren't working either and even if I give it a direct path it still won't work!
26415|Can you describe what happens and post a screenshot? Also toggling developer tools via the help menu and seeing there are errors in the console would be useful.
26416|"This is my setting.json file. My $SHELL set to /bin/bash  ``` {     ""php.validate.executablePath"": ""/usr/bin/php"",     ""files.exclude"": {         ""**/.git"": true,         ""**/.svn"": true,         ""**/.DS_Store"": true,         ""Test/"": true,         "".idea/"":true     },     ""search.exclude"": {         ""**/node_modules"": true,         ""**/bower_components"": true,         ""**/.git"": true     }  } ```"
26417|My 2 cents: editor is the only area that has tabs and that's it. We start simple by having a dropdown to switch between multiple consoles in the same way we did in Azure. I (somewhat) understand that people cannot work in text files without tabs, but now we are moving towards full, heavy IDE look and feel. Do we really want that? How do we argue then that the multiple output channels are not showing as tabs either?
26418|@jacdavis i am on Windows 10. maybe you send a video too showing the issue. Also make sure you are on the insider release (1.3.x).
26419|After I changed my keybinding shortcut  to shift + t it does work but not ctrl + ` shortcut
26420|@bpasero why would we argue against it if it makes sense to do so though?  Most terminals allow you to either open a terminal in another window (so they can be side by side), or [open in a tab](https://www.google.com/search?espv=2&biw=1920&bih=990&tbm=isch&sa=1&q=terminal+tabs&oq=terminal+tabs&gs_l=img.3...0.0.0.35143.0.0.0.0.0.0.0.0..0.0....0...1c..64.img..0.0.0.-3Rzt8Rc0sQ). One question I posed in my original issue was do the tabs even need to show at all if there is only a single terminal instance. That way the panel only adds the additional complexity to the UI if 2+ terminal instances are being used. Best of both worlds?
26421|A drop down similar to the output panel is another option though, I'd prefer the process names and number of terminals more visible personally since they're dynamic.
26422|"@weinand, yes, my project is on D drive.  ``` sh C:\Users\virtyaluk Î» node --version v5.10.0  C:\Users\virtyaluk Î» tslint --version 3.11.0  C:\Users\virtyaluk Î» tsc --version Version 1.8.9 ```  The point is that all worked fine before the update to 1.2.1. Nothing was changed in the configuration. The project is the same. Besides, I go through the steps described in the TypeScript course I'm learning now, and all the configs were taken from the course ""Exercise files""."
26423|@forethoughtde are there any errors or warnings in your the console of developer tools? (Help > Toggle Developer Tools).
26424|@aeschli FYI, works like a charm. Y'all gonna spoil us with such a quick turnaround times ðŸ˜ƒ
26425|I have warnings.  Overwriting extension <<.handlebars>> to now point to mime <<text/x-handlebars>> workerClient.ts:366Overwriting extension <<.hbs>> to now point to mime <<text/x-handlebars>>
26426|@Tyriar maybe we want to keep a lightweight style to the UI by reducing heavy UX components. What I am arguing is that, while we do not have room for UX exploration in the editor space in terms of tabs, lets sit down for the terminal and actually design something. Why do we rush this in if the alternative with a dropdown is a good start as well?
26427|Also, whatever solution we come up with should work for the output case as well or any other thing that shows in the panel with multiple panes.
26428|@bpasero   > but now we are moving towards full, heavy IDE look and feel  Having multiple tabs is a major plus and just because we have tabs doesn't give the heavy look and feel.  However, I do agree that there is space for designing something in the terminal space.
26429|I've just spent the last 15 minutes looking for a solution to exactly the same problem as described in this issue. Both Atom and Sublime Text allow me to specify editor settings on a per-language basis.
26430|@abierbaum Really appreciate your interest on this. We use tree navigation (similar to Search results) in multiple places like Explorer, Problems view. Behavior has to be consistent across all.   Here are some code references:  https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/search/browser/searchResultsView.ts  https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/markers/browser/markersTreeViewer.ts  FYI: As part of implementing new feature - Global search and replace, Search results code is going under frequent changes and refactorings.
26431|Agreed. This issue is also described in #6925.
26432|That is a valid point. But since we are simplifying views by getting them under single section, it is also important to have consistent behavior.   All views: - specific command to show and toggle focus between active editor and themselves - cmd + B to toggle side bar - cmd + J to toggle bottom bar  I think users might like this simplification and consistency and accept the change.
26433|Code uses multiple processes to execute. Can you try to figure out which process spikes the CPU? [Process Hacker](http://processhacker.sourceforge.net/) is a great tool for that.
26434|We wouldn't have it any other way. ðŸ˜‰
26435|AFAIK Code just lets OS X know that it _can_ edit SVG files, that is all. Right, @weinand?
26436|I do not understand one thing here.. I am getting this issue only on git.contribution.css file but not on other css files.   Only difference I see is that git.contribution.css file has already a warning, I do not know how it matters.  Why is it so special about one file and not other files?
26437|Support for wrapping an abbreviation is now tracked in #7800   @Spinarooni fully agreed that emmet should be a full extension, we have added emmet support before we had the extension model in place. This is a debt item we have on our backlog.
26438|I agree that we look silly here, however this is nothing the marker service should decide. It currently has special code for the counting ignoring these resources but that's a patch for the broader underlying problem described by @aeschli.  Not syncing inmemory:// resources is IMO not a good solution. I can easily think about use cases where inmemory:// resources needs to travel to the extension host and need to be validated. The open problem here remains that we need to find a 'better' name for them in the UI. May be the first line of the buffer like sublime in tabs.  In general I think we need to have a special schema for diff documents so that the system can distinguish them from inmemory. For those we can then decide to not make them 'visible' in the system as @aeschli suggests.
26439|Assigning back to @jrieken to respond to comments.
26440|I suggest that we clean up how these files are created.  fyi @joaomoreno @bpasero  The git files IMHO should use `git-head://FILE_PATH` or `git-index://FILE_PATH` or whatever. Then, git would register itself as a document provider and the workbench would be able to open these files.  That is step number 1, that these files are actually addressable in our system. That would allow IMHO for the workbench to reopen diff editors when doing a Ctrl+R. Or to actually navigate to those files from the error list.  Step number 2 is for the css validator to register only on `file://` resources or other resources that are editable.
26441|Let's track this in #2253
26442|@bpasero @aeschli Any thoughts here? The editor API can handle this as it's all dynamic anyways, we would need something in the configuration service.
26443|> In your test case (2nd screen shot) you hit the unlucky case that the JavaScript language service doesn't work on unsaved/untitled buffers.  Because of that
26444|The problem is that the extension providing the actual content isn't necessarily active at that point. We would need to introduce an activation event ala `onDocumentRequest:markdown` which I am not super keen on.
26445|@jods4 A little detail would be helpful
26446|@eamodio PR welcome! :)  It is in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/controller/mouseHandler.ts#L272  I would extract the code that does the focus:  ```             if (browser.isIE11orEarlier) {                 // IE does not want to focus when coming in from the browser's address bar                 if ((<any>e.browserEvent).fromElement) {                     e.preventDefault();                     this.viewHelper.focusTextArea();                 } else {                     // TODO@Alex -> cancel this if focus is lost                     setTimeout(() => {                         this.viewHelper.focusTextArea();                     });                 }             } else {                 e.preventDefault();                 this.viewHelper.focusTextArea();             } ```  to a closure called `focus` inside the method.  Then, at https://github.com/Microsoft/vscode/blob/master/src/vs/editor/browser/controller/mouseHandler.ts#L296 you can call `focus()` and then `e.preventDefault()`:  ```         } else if (targetIsViewZone) {             let viewZoneData = <editorBrowser.IViewZoneData>t.detail;             if (this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {                 e.preventDefault();             }         } ```  The reason focusing is complicated is because IE has some weirdness around redirecting focus when coming from the URL bar and doing a mouse down. And the `shouldSuppressMouseDownOnViewZone` already is a good indicator that the view zone does not want to handle mouse events.
26447|I agree with @alexandrudima. The diff view should not use the `inmemory` scheme cos that's the default for any editor model. It's good that the css brain can work on those models. However for LHS diff editor resources we should use a different scheme that everyone knows to ignore or maybe the diff editor creates a 'random' mode on the fly which only reuses tokenisation.
26448|@Tyriar Not sure if it is related/duplicate of #7740
26449|I do not write `monaco.d.ts` unless it has changed https://github.com/Microsoft/vscode/blob/master/gulpfile.js#L133 to avoid needless compilation.  It is possible that while pulling the files that `monaco.d.ts` uses as a source are changing (becoming empty or invalid and then recovering)... The `monaco.d.ts` uses files in the `out` folder as its source.  That is the only reason IMHO that this would change. The question is then why do those files become empty/invalid at all and why does the TS compilation kick in in the middle of the pull --- and if it kicks in in the middle of the pull, why does it not cancel. The `monaco.d.ts` reflects the compilation, if the compilation does stupid things to the `out` folder, it will also do stupid things...  The `monaco.d.ts` in watch mode is already kicking in a full 5 seconds after the last file change in the `out` folder. If the TS compiler would make up its mind within 5 seconds, I think it would be happy. https://github.com/Microsoft/vscode/blob/master/gulpfile.js#L151 We can bump that number to a larger number but to me the question is why does the `out` folder get corrupted (empty files or what have you) while doing a git pull.
26450|@ArianeLu Can you please provide complete lines?
26451|This issue was moved to Microsoft/TypeScript#9224
26452|This issue was moved to Microsoft/TypeScript#9225
26453|![vscode](https://cloud.githubusercontent.com/assets/4962408/16144457/a923544a-34a5-11e6-83fc-a58962339493.png)  @sandy081 Look, no need complete lines, the code in picture have same issue
26454|"@kumarharsh Yes, I saw the issue #541  However.. I'm curious why we call it _subword_?  If we have something like this `command-with-few-words`, then it works fine. It sees there are 4 word separated with `-` symbol which is taken from `""editor.wordSeparators"": ""~!@#$%^&*()-=+[{]}\\|;:'\"",.<>/?""`.  And when we have `commandWithFewWords`, why it became _subwords_ rather than _words_? My expectation is `vscode` needs to understand that camel-case is also some kind of a word separator.  @alexandrudima What do you think?"
26455|@gregvanl I am not seeing this slowness. Can you please profile and attach the CPU profile trace. Here I am doing it: - F1 > Developer tools - Profile tab - Start profiling - Do the typing or whatever causes slowness - Stop profiling - Save the cpu profile  It would be preferable if you could do this in a dev environment such that the function names are not all garbled, but I would take it anyways :). Anything to help me repro.  ![wzf9w4xpbz](https://cloud.githubusercontent.com/assets/5047891/16144526/d6bc5528-3473-11e6-9e7c-72b830bcf1a0.gif)
26456|The plugin works fine!  However, this is such a default functionality (at least in other IDEs). Shouldn't it be out of the box?
26457|I am now also using the index of the editor input in the group to generate the id - so it should be trully unique. Unfortuently I could not repro your test case since the markdown preview throws an error when I try it in out of source built vscode.
26458|You are correct, they are very similar in nature.  But technically, one is called word navigation (as it involves separator characters between groups of characters that become a word, so `command-with-few-words` is a group of characters containing 4 words if `-` is defined as a separator) and one is called subword navigation (as it involves examining the contents of a word -- `commandWithFewWords` is a group of characters containing 1 word and 4 subwords).  They usually have different implementations and the latter involves some interesting questions about localization e.g. `myÃœberCoolWord`, therefore making it non-trivial to implement correctly.
26459|@tylucaskelley it got fixed in latest build (1.3). Thanks for reporting.
26460|It is about integrated terminal. The other one is external terminal. @sandy081
26461|@forethoughtde May I know are you using any extension for PHP debugging?
26462|@ChendrayanV Output menu option is moved under View->Views section. We are discussing to get this back to main section.  May I know what do you mean by using module is not supported?  Thanks
26463|The `refCount` property is not initialized on `DecorationTypeOptionsProvider`, making `provider.refCount++` turn it into NaN, making this code in `removeDecorationType` not succeed:  ```             provider.refCount--;             if (provider.refCount <= 0) {                 delete this._decorationOptionProviders[key];                 provider.dispose();                 this.listCodeEditors().forEach((ed) => ed.removeDecorations(key));             } ```  Spotted and fixed while merging #6553
26464|I am using PHP Debug 1.9.1
26465|@dilijev IMO Help > Report Issues functionality will definitely overcome this problem. I am closing this issue in favor of using this new functionality.   Please use #3362 for any suggestions on help dialog.  Thanks
26466|Works for me in newer Insiders builds, closing.
26467|@kisstkondoros Looks great, thank you! Extra kudos for the tests! :heart:
26468|Fixed while merging #6553 with 9e7b462601a72536ef4ab646266df6c6b6f20211
26469|Hi, thanks for your reply. I think it's fine for the moment. I let the translators know.
26470|Thanks @forethoughtde   I would suspect this could be a bug in the extension. Please report the same on the extension.
26471|duplicates #396
26472|@alexandrudima  You are welcome :smile: (those tests are not the ones I'm most proud of actually :smiley: :heart: toString :heart: )  also please note that I have used URI.parse instead of URI.file to support some special requirements for the mentioned plugin, I think it is not a breaking change but I'm not sure.
26473|ping
26474|By analyzing the blame information on this pull request, we identified @mquandalle and @bpasero to be potential reviewers
26475|I don't see a `launcher.terminal` in the latest insiders, are you sure this isn't a custom keybinding?
26476|Oh, it might be breaking, I'll write a quick plugin to double check...
26477|@jrieken @kieferrm I saw this too, could it be that we miss to npm install in this extension?
26478|@kimmosh I just checked and it is working on stable build on Windows 10  Can you please provide more information like  - what is your set up - what you are trying and what you noticed..  Note: We (Dev team) use Auto save as default and it is working.  Thanks
26479|This is about the editor rendering being fuzzy on line 2
26480|Yes, we renamed the SCSS mode id from sass to scss. The doc will be updated when we make the stable release.
26481|Ok, I checked for both Windows and Linux that absolute gutter paths still work fine even with `URI.parse`
26482|"@jrieken  I open a folder containing `.md` files (through command line `code .`). I have a `.vscode\settings.json` containing  ``` json // Place your settings in this file to overwrite default and user settings. {     ""editor.wordBasedSuggestions"": false } ```  When I open intellisense all words suggestions appear. ![md-bug](https://cloud.githubusercontent.com/assets/3832820/16146426/4858f272-347e-11e6-89d6-0c79598ad74f.png)"
26483|Thanks - It will be good if we have it in main section. Using Module is for PowerShell Extension -  I will post it over there!
26484|Yes, we are registering VS Code as a editor for SVG files, but how VS Code has become the default editor for SVG is unclear to me.  You can change the default here: ![2016-06-17_10-26-22](https://cloud.githubusercontent.com/assets/1898161/16144872/088adf78-3476-11e6-9b69-ffc7d957337b.png)
26485|Right I see. I was confused because it was saved and had a name, albeit the name was `Untitled-1.js`. But I just tried it with the identical file, only difference being a different filename and it does work as before.   ![image](https://cloud.githubusercontent.com/assets/13225609/16146983/c30a8554-3478-11e6-934e-f3a59ca61bb7.png)  At least it's consistent then but the primary problem still appears.
26486|@alexandrudima Oh... I was going to take a shot at it this weekend, but hadn't thought the case for localization at all. :disappointed:
26487|Can this be floated in an insider build? Would really be helpful if we could use and give some feedback on this.
26488|"@ventis07 I've used VSCode for Ionic (both v1 and v2) quite a bit, and I think the problem is more your approach.  Just to give a few ideas, you build the projects with the ionic-cli, not directly from inside VSCode.  For debugging, you wouldn't ""run"" the project from inside VSCode either, you'd ""ionic serve"" and either remote-attach with the chrome remote debugging extension, or just use chrome developer tools standalone.  @weinand @ventis07 I think this topic would be better suited for the ionic forums, specific to vscode I personally can see mainly the question of extensions to provide a really streamlined ionic development experience."
26489|Well, no further thinking has happening in this space. I think it boils down to finding a good syntax in our settings file so that you can express per language settings. We have not decided on a syntax to express this. Whatever we come up with also needs to support validation within, so it might be more tricky.
26490|Nice! :heart:
26491|@jrieken I see, so URIs for the markdown inputs are only valid if the extension is activated. I thought all we need is to wait for extension host having started in https://github.com/Microsoft/vscode/blob/ben/dnd/src/vs/workbench/common/editor/resourceEditorInput.ts#L60 but turns out the extension would also have to be activated.  I think in general it would be cool if an extension that brings in a new URI scheme to the system would also get activated when the URI with that scheme is being displayed.
26492|OK maybe it is not the monaco.d.ts generation but ever since 1 week I often get multiple full compilation runs when pulling in changes. I notice this most on Windows where a typical full build takes 80 seconds for me, making this behaviour unusable.  I also notice - though not sure if related - that I cannot make a quick change, switch to the target and reload it to have the changes picked up. Not sure if we do more on each file change since 1 week or my machine just got slower.
26493|This needs some layout fixing, see video:  ![untitled](https://cloud.githubusercontent.com/assets/900690/16147571/21601b2c-3484-11e6-8073-88c6e66a4a07.gif)
26494|The PR cannot be accepted because of a layout glitch I documented in https://github.com/Microsoft/vscode/pull/6997#issuecomment-226732188.
26495|We do not delete user content to not have data loss.
26496|DND into Code is being revamped for our June release. Please reopen if you still see it from latest.  We are releasing preview releases of the next stable VS Code version for everyone to try and give feedback. These preview releases are not 100% tested and might be unstable but contain our latest features and bugfixes. You can give our preview releases a try from: http://code.visualstudio.com/Download#insiders
26497|@dilijev does it reproduce using our insiders build?  We are releasing preview releases of the next stable VS Code version for everyone to try and give feedback. These preview releases are not 100% tested and might be unstable but contain our latest features and bugfixes. You can give our preview releases a try from: http://code.visualstudio.com/Download#insiders
26498|@bgse, Thanks for your response but thats completely different from the ideas that all resources i have read from ionic framework and vscode features. Could you please post me resources that explains what you just pointed our in your response, perhaps all along, i have been doing the wrong thing. If i run ionic serve the app runs on my chrome but i need to be able to debug and step into my breakpoints like am used to in my Visual Studio IDEs and other IDEs.
26499|@isidorn Another issue: the error returned by `setVariableRequest` is not yet shown. For now you can show it as an error notification. In the future we could use a similar approach as in the explorer:  ![2016-06-17_12-19-54](https://cloud.githubusercontent.com/assets/1898161/16147813/d2e9c81a-3485-11e6-8ff5-9d958c721c95.png)
26500|:-1: I'd rather just have it inline without any grammar, like the find widget:  ![image](https://cloud.githubusercontent.com/assets/22350/16147818/eb8ce046-3485-11e6-8f98-3d1c81d61fcb.png)  Adding a line and writing text makes it both look ugly and take longer to understand since the user'll have to read the sentence.
