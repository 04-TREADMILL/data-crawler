8501|This issue was moved to Microsoft/TypeScript#6923
8502|moved to the TS team since it's their parser we use
8503|@chrisdias @bgashler1 @stevencl I think the issue exists not just for code editors. Today you can open a markdown preview, an image or even a diff of 2 images in the editor part and we are not indicating any focus there. I think in the end we need an indication in the title area of the editor and cannot just rely on the control within the editor to provide focus feedback.
8504|Quite a change to how focus is tracked now. To verify: - focus should move nicely between multiple markdown editors - test with clicking with the mouse - test with Cmd+1/2/3 actions - test with leaving preview open and switching to different previews in an editor slot (should not break it)
8505|How about a little UI that would tell you that some lines are over 80 characters, and you'd format them yourself? Would that work?
8506|Is it possible to filter out this error with a comment?  I have a function that does indeed return different types, because the data returned is used to populate a drop down via Backbone Stickit. Depending on the drop having options groups or not, the data format will be a bit different.  I like that VS Code warns me about different return types, but in this particular case, it's actually expected.
8507|The problem is the Insiders build used the same link to the release notes as the stable build.  if i changed the FWLink target then the current stable build would be pointing to the new release notes.    i created a new FWLink for the Insiders build for the release notes and updated the product.json to use this new FWLink. This means that then next Insiders build we distribute should have the correct endpoint.
8508|@bpasero @joaomoreno sounds good, so I'll rewrite the arg parsing code in code.js and have that spawn the process in the background as it is currently. `*_RUN_AS_NODE` is pretty handy :smiley:   Also for installation, for OSX we should probably put the script in `/usr/bin` on installation. A program modifying your `.bash_profile` is a bit icky.
8509|i like being consistent, and i do find the Git message useful.  How about:   `Press Enter to Search, ESC to Cancel`
8510|Hi **@prehor**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8511|@Tyriar I suggest you sync with @joaomoreno. I am assigning this PR to him as I am also soon leaving for vacation.
8512|@bpasero will do. Enjoy!
8513|:+1: pushed, lets see how it goes. Lets abandon this one then.
8514|"@bpasero should i press the ""delete branch"" button below?"
8515|"@joaomoreno Maybe, and actually that was my first thought, though these points came to mind: - It might be difficult to do without cluttering up the currently nice and clean UI - It might look weird/be difficult to format the text given that the comment box uses a variable width and not a monospaced font. - If it was on by default, some people might not like in it a ""I don't care/stop telling me what to do"" kind of way. - Having the wrapping done automatically is easier for you than having to do it manually anyway, and in special cases where you need to do it manually you can still do so.  Overall I felt that just inserting hard line breaks before committing would be easier, though it does mean writing or finding the code to do the word-wrapping (not sure what the policy is on using external js libraries). There could be a setting something like `""git.commentLineLength""` with a default `0` (no word wrap) so no-one gets any unexpected behavior.  In any case if it's wanted it is something I'm prepared to work on."
8516|@chrisdias yes please!
8517|Im still having the same issue....its slow when typing php code (in PHP extension file)
8518|@bgashler1 it looks like I will need the '?' icon for this
8519|@stevencl @bgashler1 I agree with the points Joao is making here. If there is output, and the panel is hidden I would show an icon with a number in the status bar. Clicking on that icon / number would open the panel. If the panel is open, or if there is no new output I would not show this icon. I would show this icon on the right side of the status bar. Let me know what you think. And if you agree I would need an icon for the status bar that would represent the panel (output/repl) #2467 is related
8520|still no version update this week?
8521|@bpasero Ok I was checking out the repl and it actually behaves decently - like all our other trees. Not sure though if it would be better for the user that when focus is passed to repl the last element gets focus, not the first - since it is a repl. What do you think? Since people can navigate the REPL via keyboard I would close this issue and wait for feedback unless you have something on top of your head?
8522|As Ben pointed out in a seperate issuie, we also need to make the debug hover accessibly but that should allign with our regular hover accessibility work.
8523|Poking around some more on this, it seems that it only happens if the initial cwd that causes `code` to launch is deleted. It crashes even if the initial window is closed before deleting. (And inversely, subsequent opens don't bring down code if they are deleted).   So while there is an underlying node issue, it would seem `code` could be made more tolerant. I haven't dug into the src at all, but wouldn't it make more sense to have the root process `process.chdir` to someplace other than the initial code directory, and launch the initial window in the same manner as any other subsequent open request?
8524|Additional confirm - if I don't put in any steps, the code executes. That tracks with your bug of crashing when stepping.
8525|PR submitted: #2740
8526|Will add this only if more users ask for it
8527|have we come to some consensus here? I am fine with experimenting with some solution to get feedback. Erich's proposal looks good to me and I would start with that  fyi @stevencl @bgashler1
8528|Thanks for the detailed feedback. 1. It seems like `taskService.run` does not respect configuration specified in `tasks.json` @dbaeumer 2. There has already been some issues regarding this. I personally am not a big fan of that terminate promp. @dbaeumer can comment more 3. I see `preLaunchTask` being mentioned in https://code.visualstudio.com/docs/editor/debugging, though not to a great extenent. Also preLaucnhTask is present in auto completion in `launch.json`. To increase discoverability I added `preLaunchTask: ''` to the initally generated `launch.json`  Since issues 1. and 2. are in the task world forwarding this to @dbaeumer
8529|Where should Code chdir to? I am feeling uneasy doing such a change without understanding the impact for all spawned processes.
8530|Sounds like a good idea to actually focus the last element when you tab into the tree, would suggest to try it. Otherwise I agree, once focus is in, keyboard navigation works. I filed this bug initially because you cannot click into the tree to focus it, but maybe that is not a big deal since you can do the same with Shift+Tab.
8531|Nice :+1:
8532|"> Where should Code chdir to? I am feeling uneasy doing such a change without understanding the impact for all spawned processes.  Well there's already an impact between the first opened directory and all subsequent spawned instances. I'm guessing the root process that spawns additional instances gets tied to the first directory from which `code` is launched. So perhaps it could `chdir` to the app dir or somewhere ""safe"" and then the first code editor instance would be spawned like any other instance it the original directory from which it was opened."
8533|Related: https://github.com/Microsoft/vscode/issues/679  [This is my solution](https://github.com/Tyriar/dotfiles/blob/master/modules/vscode/index.js) for syncing keybindings and settings on Linux and Windows if you're interested. I haven't looked too deeply at doing it with extensions yet but I did file https://github.com/Microsoft/vscode/issues/691 some time ago to help with this.
8534|I intentionally disabled click to get focus on element to have a feel of a real console. I can undo that, but I think the current behavior is fine.  Now on first keydown I focus the last element in repl
8535|@codetrash Can you tell us more about when you see the slowness? Is it only for large files? Can you maybe make a animated gif?
8536|+1   My remote GDB debugging would really benefit from having Watches update continuously when doing not using breakpoints. This works with GDB in Eclipse where variables are polled over and over again also on hover.
8537|@weinand How come variable list is empty except at breakpoint? In remote debugging it would make sense to have variables available to e.g. drag to Watches. Even when not at a breakpoint.
8538|Hmm, I appreciate the link, but it doesn't make much sense to me yet how I would use it. I'm willing to wait though till it is documented more. :)  On Fri, Feb 5, 2016 at 3:01 AM, Johannes Rieken notifications@github.com wrote:  > @cfjedimaster https://github.com/cfjedimaster As long as we don't have > a sample you should check with our api-test: > https://github.com/Microsoft/vscode/blob/master/extensions/vscode-api-tests/src/commands.test.ts#L42 >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/272#issuecomment-180258436.  ##   #   Raymond Camden, Developer Advocate for MobileFirst at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden
8539|Thanks egamma but i could not see it make a difference. Is there some think like lucene indexing the code when you load a folder? It does not seem very busy when it starts and noticed that the search is really slow which implies its just trawling the files rather then indexing the source.
8540|@leifcr thank you so much! This has fixed my issue.
8541|+1 for tabs! Please implement this in a future update.
8542|+1 The editor at the typescriptlang playground is amazing! Especially the speed, intellisense, and VS look-and-feel.  Been working a lot with other code editors that offer intellisense, but none come close to Monaco. Eagerly waiting :)  Thanks for keeping us updated, @egamma
8543|"I don't buy it. It works when the hover is on either side of the current debug target line. Just on the highlighted line it is wrong. On 5/02/2016 11:01 pm, ""Isidor Nikolic"" notifications@github.com wrote:  > This is a current limitation of the debug hover that it does not have a > full language understanding and does some heuristics to figure out the > parent chain of the value that is being hovered over. In this case the > bracket before the frame is stopping the heuristic from finding that the > frame is the parent of the hovered value - contentWindow. > To improve this the debug hover would need to have an AST understanding of > the language which is a feature request and not yet on the plan. >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2721#issuecomment-180280109."
8544|"""Would you like to install the C# Language Extension?""   This would mean that the prompt also changes to Yes/No from Install/Cancel."
8545|@egamma FYI, not sure who to assign it to.
8546|Dupe of #2660?
8547|Sorry, I didn't see your message.  And sorry again, because I just used another tools the last few days, and testing today shows me that VSStudio run correctly (at least it starts). And I can't be of no help because I updated some components on my host.  Thanks again.
8548|@csholmq the variables list is scoped to a stack frame (which is again scoped to a thread in multi threaded environments). What should the variable list show when the program is running? The stack is constantly changing, and there are multiple threads running concurrently. Updating all variables all the times is neither practical nor useful. And even if the program is waiting in the OS (but not stopped), it is not possible to show variables because the stack is empty, and there are no frames.
8549|"I don't see this feature in [0.10.6](https://github.com/Microsoft/vscode/releases/tag/0.10.6) which was release a day after this issue was closed. <img width=""458"" alt=""screen shot 2016-02-05 at 6 14 04 pm"" src=""https://cloud.githubusercontent.com/assets/949380/12863994/598212ca-cc34-11e5-8259-57fe0e8aa16f.png""> Could you please confirm if the fix was part of [0.10.6](https://github.com/Microsoft/vscode/releases/tag/0.10.6)?  Thanks!!"
8550|Works fine for me. I am on Linux:  ``` php <?php  class MyClass {     public static function HashPassword(string $password) : string {         return 'hi';     } }  function HashPassword(string $password) : string {     return 'hi'; } ```  Do you have this set to the correct file:  ``` php.validate.executablePath ```  Mine is `null`, so I think it is using the value in my path...
8551|Yes :+1:
8552|In addition to this action, with the next release you can also Ctrl/Cmd+Alt+Click to get this behavior.
8553|@sarbbottam this will be in >= 0.10.7. You could try it out from our insiders release or wait until next week. https://code.visualstudio.com/insiders
8554|"@martypdx I think you could already do this with the current release. If you look at the script on Mac to launch code you see that we define a CWD variable called `VSCODE_CWD`:  ``` function code () { VSCODE_CWD=""$PWD"" open -n -b ""com.microsoft.VSCode"" --args $*; } ```  If you hardcode that one to be some other directory, it should work."
8555|I think this only happens because you are opening a different kind of editor (normal -> diff editor), it does not happen otherwise.
8556|@sarbbottam alternatively you can double click on a file in the explorer to add it to working files. There is no setting though.
8557|Currently not.
8558|Currently not.
8559|@bgashler1 when you click back to the explorer, the explorer will open the last file you worked on. in this case maybe the file was deleted or the explorer was not selecting any file?
8560|@weinand You are right. That wouldn't make sense. I guess what I was looking for was an easy way to add a variable to Watch since hover doesn't work unless paused.   `editor.debug.action.selectionToWatch` seems to do what I want. Pity it doesn't continuously update though. Or that hover works in all stages.  I am doing remote GDB debugging using an ELF file, so I don't have any good access to breakpoints unfortunately.
8561|Duplicate of #663, #1380.
8562|The scenario I had in mind was a notification that updates for vscode are downloading (another issue I was going to write) or the notification saying no updates are available. But these could be solved by a status bar message.
8563|"Thank you for your reply. This was an interesting problem caused by a more unique development setup on my end. I'm using VS Code on OS X and editing files on a Linux Mint machine via an SMB share. The Linux Mint machine is running Bitnami LAMP with PHP7, but on my Mac, I'm still on PHP 5.  I was able to address this by creating a read-only share on my Linux Mint machine pointing to /php/bin and then having this in my settings:  `""php.validate.executablePath"": ""smb://linuxserver/PHP/php/""`"
8564|"+1  I don't like having to right click and and do ""Open Containing Folder"" and then doing what I want there."
8565|+1  I mostly have issues trying to distinguish the difference between a file and a folder quickly. There isn't even a text color difference.
8566|Duplicate issue submission. Apologies.
8567|Can you pls add a .go file as an example where the guessing was wrong? As you describe it, go files should have tabs and the guessing should pick tabs as well.
8568|You tested while things are in transition. Once the OmniSharp extension is no longer built-in we must change the name and description of the extension. I'll take this so that we do not forget to coordinate this with the OmniSharp-vscode folks.
8569|@justin-romano Then I assume your code isn't using the `commonjs` module system? Are you using another JS module system?
8570|We are in transition to a new version of the JavaScript infrastructure called Salsa. Can  you please give it a try in the new version. Here is how:  get the insider channel: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/  enable salsa: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#javascript---salsa-preview
8571|"Create a .go file with e.g.   ``` go package main  func main() {     println(""hello"") } ```  Note the tab literal prefixing println. Position the cursor after the final closing }, press enter twice, and type  ``` func foobar() { ```  and press enter. You'll get  ``` func foobar() { Â·Â·Â·Â·_ } ```  i.e. the autoindent will be with spaces.  Similarly, given  ``` go package main  type a struct {     i int     s string     f float64 }  type b struct {     hello string     world string } ```  Try to type a new struct definition  ``` type c struct {<ENTER> Â·Â·Â·Â·a int<ENTER> Â·Â·Â·Â·b int<ENTER> Â·Â·Â·Â·_ } ```"
8572|And GIF form! When I save, `gofmt` (actually `goimports`) is automatically applied, which is why you see the spaces turn into tabs.  ![image](http://g.recordit.co/5dRXp1O01f.gif)
8573|"Other vscode languages whose configuration.json files have comments include the following: php, powershell, sql, vb, and xml. However, when I first opened this ticket I failed to take into account the fact that vscode allows the use of comments in config files, as noted [here](https://code.visualstudio.com/Docs/languages/json#_json-schemas-settings). Given this, use of the require() function as is done in the attached sample code is not an appropriate way to load the configuration.json files because require() expects classic json and chokes on the vscode comments.  Since require() shouldn't be used, I've come up with a solution that uses the fs.readFileSync method to read the json file without parsing it. The raw text can then be processed to strip the comments before parsing with JSON.parse.   It would be nice if vscode exposed its json parser for use by extension developers so I didn't have to roll my own. Also, none of this would have been necessary if vscode provided access to the data contained in the configuration.json files as part of the extension 'language' API. However, as far as this bug ticket is concerned, json comments are permitted by vscode, so this ticket should probably be marked as ""as-designed"" and closed."
8574|Thanks for all the steps, but I cannot reproduce this in the [insider build](https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/).  See below, only tabs are inserted with the settings shown on the right.  Assigning to @alexandrudima may be something changed since 0.10.6.  ![tabs](https://cloud.githubusercontent.com/assets/172399/12867826/9bc88140-ccf8-11e5-8ed2-42e2090c47af.gif)
8575|No actually anguar and requirejs.  On Sun, Feb 7, 2016 at 4:52 AM, Erich Gamma notifications@github.com wrote:  > @justin-romano https://github.com/justin-romano Then I assume your code > isn't using the commonjs module system? Are you using another JS module > system? >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2683#issuecomment-180796779.  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
8576|"Another trick you can do is to strip the comments from a JSON file before you pass it on, see below.  @aeschli is the JSON parser used by the JSON language server available in a node module?  ``` typescript function stripComments(content: string): string {     /**     * First capturing group matches double quoted string     * Second matches single quotes string     * Third matches block comments     * Fourth matches line comments     */     var regexp: RegExp = /(""(?:[^\\\""]*(?:\\.)?)*"")|('(?:[^\\\']*(?:\\.)?)*')|(\/\*(?:\r?\n|.)*?\*\/)|(\/{2,}.*?(?:(?:\r?\n)|$))/g;     let result = content.replace(regexp, (match, m1, m2, m3, m4) => {                     // Only one of m1, m2, m3, m4 matches                     if (m3) {                                     // A block comment. Replace with nothing                                     return """";                     } else if (m4) {                                     // A line comment. If it ends in \r?\n then keep it.                                     let length = m4.length;                                     if (length > 2 && m4[length - 1] === '\n') {                                                     return m4[length - 2] === '\r' ? '\r\n' : '\n';                                     } else {                                                     return """";                                     }                     } else {                                     // We match a string                                     return match;                     }     });     return result; }; ```"
8577|Thanks, got it. Salsa doesn't support AMD yet. I'll move it as a feature request to Salsa component.
8578|This issue was moved to Microsoft/TypeScript#6942
8579|OK i understand now although i have not looked but its trying to do something smart with module references. Does it go down to script tag html level? I think there are a lot of us that don't use it for vscode for just nodejs development.
8580|Minimum OS X version supported by Electron/VSCode is 10.9 https://github.com/atom/electron/blob/master/docs/tutorial/supported-platforms.md
8581|Interesting... the insider version should be considered as a separate product, with its own user settings and extensions folders. This enables a clean side-by-side install. Therefore, the code-sittings-sync extension is product specific, depending on whether it is installed in the insiders or the stable product it should sync the corresponding product settings.   An extension gets its path passed in the `ExtensionContext` of the `activate` call. From the extension path you can derive in which product the extension is installed. `/.vscode-insiders/extensions/` or `.vscode/extensions/`.  Having said this a workaround, an extension should not have to do this path math and we exposing API to avoid this.
8582|> OK i understand now although i have not looked but its trying to do something smart with module references.  Correct, Salsa supports the CommonJS module lookup semantics, but it doesn't support AMD yet and we are interested in user feedback on this limitation, so you have done the right thing by filing an issue :smile:.
8583|Closing, thanks @moostad.
8584|Yes currently this event is only triggered for files. The Scenario is when there is a file like `.editorconfig`. What is your scenario, where you want to be activated for a particular directory?  CC @alexandrudima
8585|The plan is to push the next stable version 0.10.8 next Monday.  The insiders 0.10.7 version is already available, pls see https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/
8586|We are migrating to a new version of the JS infrastructure called Salsa, please give it a try. The issue above should is addressed by Salsa. To try out Salsa: Install the insiders build: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/ Enable Salsa: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#javascript---salsa-preview  Closing - if there are still JS problems pls file them against https://github.com/Microsoft/TypeScript/issues and mention that you are using Salsa.
8587|Thanks, added `.twig` files to be treated as `html`. Thanks.
8588|OK! I'll test on the next release.
8589|![twoerrors](https://cloud.githubusercontent.com/assets/13505971/12868377/91470f92-ccc2-11e5-98ff-409fabf98dcb.png)  [C:/Users/Robbie Blair/.vscode/extensions/eg2.tslint]: Cannot read file C:/Users/Robbie Blair/.vscode/extensions/eg2.tslint/package.json: ENOENT: no such file or directory, open 'C:\Users\Robbie Blair.vscode\extensions\eg2.tslint\package.json']  [C:/Users/Robbie Blair/.vscode/extensions/eg2.tslint-0.5.15]: Cannot read file C:/Users/Robbie Blair/.vscode/extensions/eg2.tslint-0.5.15/package.json: ENOENT: no such file or directory, open 'C:\Users\Robbie Blair.vscode\extensions\eg2.tslint-0.5.15\package.json' Close Error
8590|I got the second one after trying to install tslint to fix the first issue and then uninstalling it after no avail...  I also did another 'fresh' reinstall.  How do I make it go away?
8591|The fix is currently only available in the insiders build and will apply when you uninstalled the extension using the insiders build: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/  Otherwise the work around is to manually delete the extension folder ${HOME}/.vscode/extensions/eg2.tslint*
8592|The other thing missing is an 'scm provider' API, that currently does not exist.
8593|Hi **@sshipsey**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8594|Does it mean implementing in javascript something like this? https://github.com/apache/maven-scm/tree/master/maven-scm-providers/maven-scm-provider-tfs  and/or SOAP in JavaScript: http://www.codeproject.com/Articles/12816/JavaScript-SOAP-Client  I have not gone into the details of either project so don't know if those are too simplistic or incomplete projects.
8595|I initially was trying to use the fact that a directory exists to enable an extension (for backing up timestamped edits), and just using the user settings for configuration.  I did add an empty file for now to trigger it.  If I wanted to make the directory configurable, I would need a separate config file anyway, or a notification on any workspace opening, to check dynamically.
8596|I've been playing with using a `CodeLens`.  If I find a valid extension I annotate it. It feels like I'm abusing the feature, it's also a bit slow. Nevertheless, it provides some visible feedback and that's what I'm after. Still, I'd like any advice you can give.
8597|I just realized it's slow because I'm doing all of the analysis in the client. :stuck_out_tongue_winking_eye:
8598|after I upgrated npm and nodejs,the error has gone away.vscode is excellent.thanks for your help
8599|Has this been resolved? Not seeing it in Windows.  ![image](https://cloud.githubusercontent.com/assets/3046978/12870652/4cbaa806-cd1d-11e5-9d2b-ca436598499c.png)
8600|Wanted to bump this. It's the one thing I quite miss from sublime text.
