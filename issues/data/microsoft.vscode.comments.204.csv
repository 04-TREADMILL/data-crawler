20301|@vsccarl you cannot delete a folder that is open as workspace in another vs code instance. the file watcher will lock it. You will need to close the window first before doing that.
20302|👍  I would love this feature as well.
20303|this will fix #5888
20304|@isidorn showing an empty badge looks a bit strange:  ![2016-05-02 12-18-47](https://cloud.githubusercontent.com/assets/1898161/14952461/b70ac4a8-1060-11e6-8349-3f52b9b27576.png)  I suggest to show 'unknown source' right aligned instead. Please make sure that the string is nls'ed (currently it is not).
20305|"The one I use now isnt very large. Its actually very small.   But yeah... When you mention it, I did uncheck an ""ignore node_modules"" for indexing (I guess?). This so that I could easily go to my react components that I installed with npm. Because otherwise I had to scroll through the whole list of node modules which was a hastle.   And on that note - filtering on folder names when one starts to type in focused tree mode would be soooooo awesome :-)  > On 02 May 2016, at 08:25, Benjamin Pasero notifications@github.com wrote: >  > @rockymontana does this happen on all workspaces you open or maybe only on a very large one? >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub"
20306|@bpasero   Sure, It`s better if you can provide an api similar to https://atom.io/docs/api/v1.7.3/MenuManager.
20307|@isidorn 'none' shows now as 'keine' in German which looks very silly... My proposal for better wording would be: 'no configurations' which would become 'keine Konfigurationen' in German.
20308|I renamed the folders to .vscode_bk and .config/Code-bk and it recreated them, but the bug persists. I noticed the .config/Code has 700 permissions and got an error message about 'storage.json', so I changed the permissions to 755 and copied the file from /root/.config/Code/storage.json (and set the correct ownership and permissions) to no avail. Since the app is installed in /opt, I also changed the ownership of the files inside /opt/visual-studio-code, still not working.
20309|@weinand instead of <none>, we are no whosing No Configurations. I believe this solution now works because the select drop down automatically gets wider, so most of the time 'No Configuraitons' is not clipped
20310|Where did you get the AUR package?
20311|The problem see to be [this](https://github.com/Microsoft/vscode/blob/master/src/vs/languages/html/common/htmlWorker.ts#L579) inside the html worker. It takes the path derived from the token content (which includes the query) and sets it as uri path - hence the encoding.
20312|#5306
20313|Super cool, thanks @bpasero !
20314|@aeschli pushed a simplification for the regex that also makes the regex faster to match. we still need to test for more conditions than simply testing for `.*`. For example `**/.html` must not match on `foo/test.html`, but it would if `**` would simply translate to `.*`
20315|Please verify by looking at the associated commit
20316|@mrmckeb you're right, I was referring to the _types_ which you can infer from the values, you can't however know the available options for it and I guess that this is a really hard problem to solve without any kind of support from VSCode.  In my opinion they should at least provide API for this for querying the types (even though like I said it's something that can be inferred) and certainly providing a way to list the options that like you said it's _impossible_ to do unless you do it manually.  Another way, the ugly way is to parse VSCode files directly from github because I'm sure the options are listed there somewhere, I don't know exactly in what file but it's a way, i think... ^^
20317|I have decreased the size of the sash from 5px to 4px, and 2px are now in the scroll area, and 2px in the status bar area. This just felt best to me. Giving to @bgashler1 to verify and give feedback
20318|I use pacaur, but I have also tried to install it manually from the official website. Anyways, the package pacaur uses should be this one: https://aur.archlinux.org/packages/visual-studio-code/
20319|yes, File -> Save As... still shows Ctrl+Shft+S after restarting
20320|@jrieken can you please clarify what you mean by 'output action in the gitviewlet'? I understood that as - open git viewlet and 'show git output' (the one under elipses) Click on the 'show git output' always opens the git output channel for me so I think I am missing something here.
20321|Adopted `LinkedMap` for `glob`, `filters` and `strings`. Currently not exercising the `LRUCache` though because I feel it is not needed for those.
20322|This is as designed, our hover just shows the list of children of an object. In this case that can be confusing since there is only one child and you thought that the child is the actual value.  Chrome solves this issue by showing in the first line the value of the object, and then the list of children. If you think that is the way to go let me know and I will create a new feature request. Closing this as designed
20323|Thanks, unfortunately I had the change already on my branch and this now landed: https://github.com/Microsoft/vscode/commit/bf6b01b727de7516149b7d66a1ebb1e8b91edb83
20324|Clearing the milestone, since it is an upstream fix that is planned by another team.
20325|What others are doing: - Chrome debugger on the mac, they use the same keyboard shortcut as us and have the same behavior - Xamarin is not using F keys for [shorcuts](http://www.syntaxismyui.com/wp-content/uploads/2014/09/Xamarin-Studio-Keyboard-Shortcuts.pdf)  The F11 show desktop behavior can easily be disabled on the mac. A user can also easily change the step in shorcut that we have.  @weinand @jacdavis I am open for suggestions here. Should we use a different default keyboard shorcut, if yes then which one?
20326|how can i export my ext list?
20327|Can't reproduce anymore
20328|@jasonshaw I fear the only way is to uninstall each extension until you found the one that causes this and report this as bug to the extension owner.
20329|"@burtonrodman works for me though, you need a restart!  <img width=""829"" alt=""screen shot 2016-05-02 at 17 10 28"" src=""https://cloud.githubusercontent.com/assets/900690/14958239/0dca9538-108a-11e6-82a4-66a78ed97407.png"">"
20330|@rockymontana what exactly did you uncheck and how and where?
20331|@isidorn misspelled, fixed the description.
20332|@bpasero , I see the same behavior on Linux and Mac as well. My question is not about the performance but when there are 6 instances of VSCode running even with no project or file window open. What can cause to span 6 instances of it? Is this by design?   It will be difficult to debug VSCode on Windows, Linux and Mac if there is any issue with VSCode itself and not knowing which process to target for.
20333|"tried on a different computer with this key bindings and it works.  I must have had multiple instances open, because I restarted several times.  Or the order matters.  [     { ""key"": """",          ""command"": ""workbench.action.files.saveAs"" },     { ""key"": ""ctrl+shift+s"",          ""command"": ""workbench.action.files.saveAll"" } ]"
20334|It's a pity we cannot make a proper change unless we break the API. For now, adding an explicit comment...
20335|`.ts` or `.js`? I'm assuming you meant `javascript`  I got the same error, some other things that blow it up  ``` javascript const dcr = (direction > 0) ? ['>'] : ['<']; const dcr = (direction > 0) ? '>' : ['<']; const dcr = direction > 0 ? '>' : ['<']; const dcr = (direction > 0) ? '>' : () => '<'; const dcr = direction > 0 ? '>' : () => '<'; const dcr = (direction > 0) ? '>' : (() => '<'); const dcr = direction > 0 ? 7 : 5; ```  but  this works:  ``` javascript const dcr = direction > 0 ? 7 : 'foo'; const dcr = direction > 0 ? ['wtf'] : 'foo'; const dcr = direction === false ? ['wtf'] : 'foo'; const dcr = direction == 'wtf' ? ['wtf'] : 'foo'; ```  looks like the only thing it wants on the `else` condition in the ternary is a string... strange.  @hasyee  > If you replace the last array to a number example, then it truns to right > that has no effect for me, still highlighted incorrectly  ---  also I should note, that atleast for me, this only affected the single line, the rest of the file is fine  ---  possibly related to https://github.com/Microsoft/vscode/issues/6034 seeing as the second half of that expresion isn't highlighted as well
20336|ping @egamma since this is a candidate for the next week's release to stable. The fix is low risk so I would cherry pick it once we have a branch for next week's stable release. I can also create one
20337|@Raviuppa yes by design, the UI framework we use is multi process by itself and then we have 1 process for extensions (per window), one process for file watching (per window) and 1 process for search. We also have 1 shared process for updates.
20338|Yes, it's .js.
20339|Oh ok. Is there a way to identify the process based on its purpose such as Extensions, File Watching etc..?
20340|@Raviuppa yes if you have a program that shows you how the process was spawned.
20341|Also, I noticed you mentioned the insiders build. When renaming the folders, make sure you also rename the `-insider` ones. Did you try that?
20342|Yes, everything I'm testing I repeat it with the insiders build making the appropriate changes to the folder names.
20343|Do you get the same behaviour when running a [plain vanilla Electron](https://github.com/electron/electron/releases/tag/v0.37.6)?
20344|I'm going to test it ASAP and report back, but mind that I can run other Electron apps (such as [GitKraken](https://www.gitkraken.com/)) with no issue.
20345|I've noticed this recently, same versions of OS X/VS Code.    It's a medium sized project consisting of a couple node apps and a small website, I originally noticed it a few days ago when the typescript autocomplete was taking forever to load and eventually stopped working - I restarted VSCode and it would work again.  I since noticed my whole machine.  Trying to work out what's causing it just now, but it looks like just opening a few js/ts/json files into the working file list caused it to use over 1.1GB of memory.  I switched between debug/search/git tabs and it didn't seem to have an immediate effect, but in the few minutes I've written this it's now idling on 1.4GB.
20346|@coggers can you please find out which of the multiple processes Code spawns is the one with a lot of memory in your case?
20347|@bpasero It's Electron Helper
20348|"Let's try to see if some other user owns your files... can you also run this over both folders we talked about?  ``` ls -Rl | awk '{print $3}' | sort | uniq ```  It should only show your user in there. Otherwise, you can see which files don't belong to your user with:  ``` ls -Rl | awk '{print $3""\t\t""$9}' | sort ```"
20349|"Confirmed that plain electron works (on its own showhing the ""drop your app here"" dialog and also with a node app that I had lying around here) and the commands above only report my user."
20350|"@coggers we need more info, the full command line of the helper! E.g. `ps aux | grep helper`"
20351|Good, i will help with spanish traslation.
20352|@isidorn I'm not sure it needs to be in the release notes as I don't think people will look there first to find the issue.  People will hopefully be able to find the issue here and watch the progress.
20353|Yes, after I looked into this further, I discovered how to disable the desktop grabbing these shortcuts. This is a tough problem since using different shortcuts may also annoy users, I'm afraid I don't have any other suggestion though. Perhaps adding  the command or function key on the mac?
20354|Woohoo, thanks!
20355|+1
20356|@mbana I've linked to the PR as an illustration of progress, not that you can use it already.  > Out of interest, is VSCode taking the approach Eclipse took in allowing one to build ship a custom IDE with only a chosen set of features enabled?  This is not our main focus but you can create a branded custom IDE, the `product.json` file is the means towards branding.  Glad you like VS Code
20357|@isidorn this is a good candidate, let's triage all the candidates with the team.
20358|Alright... I'll get Arch linux installed. Anything else special about your system, that you recall?
20359|We already have ctrl + F11 to step out. Function + F11 also has native mac behavior (volume up), cmd + f11 could be an option, however changing the current shortcut could break some users which have disabled the default mac behavior Also cmd + f11 might easily get confused with ctrl + F11.  I would leave it as it is since there are two workarounds (disable natvie mac behvaior, configure step in shortcut in vscode). I am still open for suggestions though :)
20360|We are now updating the watch expressions on each evaluation in the debug repl. However updating the variables is a bit more tricky (such that the expansion state of the tree is preserved).
20361|The extra underscore appears to happen with other symbols of the `__name` format in the global namespace.  ![vscode-bug](https://cloud.githubusercontent.com/assets/3939610/14968939/770c362a-1074-11e6-98b4-6b34eba83dad.png)  This is in 1.0.0
20362|@bpasero I can nicely clean up all the msgs which I create in the debug world, however most of the errors I just bubble up to the central error handling place. In that case I have no handle on how to hide the error message. Not sure if I can do something in this case?
20363|[Moved](https://github.com/Microsoft/TypeScript-TmLanguage/issues/159)
20364|:+1:
20365|Moved to [https://github.com/Microsoft/vscode-jshint/issues/29](url)
20366|I'm sorry you have to go through all the hassle =/. Here, this is the exact distro I use:  https://apricityos.com/  Should be pretty easy to get it up and running. Just mind that it doesn't have the latest version of pacaur by default, eveything else should be maxed out.
20367|I'm able to repro this in the latest alpha. Switching from JS to CSS and back with auto detect.
20368|The former will certainly help but the highlighting is off too. I see this as the domain for a community extension.
20369|@egamma I think having an option to not show a certain extension again would be too permanent a reaction. For example: I may be interested in PHP extensions in the future, but not while in a node project. I think extensions are globally available, but they are often specifically scoped.
20370|windows7 not appear this problem, there may be reason windows10 system, we let this issues: let it go, let it go ...
20371|I figure it out, that is the extension about emmet  named twig pack, can you fix it or recommed an alternative ?  I just need the emmet function. thx.
20372|It seems that \* is not work correctly when X\* is the beginning of the regex. ![qq 1](https://cloud.githubusercontent.com/assets/5539385/14974158/ada232c0-1123-11e6-9a0c-cbd16d755874.png) ![qq 2](https://cloud.githubusercontent.com/assets/5539385/14974159/adadc914-1123-11e6-80e4-2957d7995d3a.png)
20373|What's a good alternative for a global task? I want to run a shell command on a keypress with minimal effort ideally haha
20374|"i try to add files ""files.associations"": {""*.blade.php"": ""html"" } emmet working with tab but my blade syntax hilighting is not working  how to fix this problem"
20375|Has the new insider release been published?
20376|@hungys This looks **very good** now, thank you! :heart:
20377|Same problem on editplus theme.  Normal ![html](https://cloud.githubusercontent.com/assets/17231597/14976358/855cf4e8-113d-11e6-9443-ab90d1a70b5c.jpg) VS Code ![vs_html](https://cloud.githubusercontent.com/assets/17231597/14976367/9ffc6b8a-113d-11e6-8c77-5e877926a6ec.jpg)  Normal ![css](https://cloud.githubusercontent.com/assets/17231597/14976375/b942d926-113d-11e6-94ea-b0b016d1750c.jpg) VS Code ![vs_css](https://cloud.githubusercontent.com/assets/17231597/14976379/bfc5dab4-113d-11e6-9296-359ea3aab976.jpg)  Normal ![js](https://cloud.githubusercontent.com/assets/17231597/14976384/c93d92f8-113d-11e6-9c28-a261d689ea21.jpg) VS Code ![vs_js](https://cloud.githubusercontent.com/assets/17231597/14976388/d1c3a25a-113d-11e6-8f87-78f13b89760e.jpg)  Normal ![php](https://cloud.githubusercontent.com/assets/17231597/14976389/d8469d58-113d-11e6-9536-b68267f0a009.jpg) VS Code ![vs_php](https://cloud.githubusercontent.com/assets/17231597/14976392/de0483e0-113d-11e6-870e-f44aa970229b.jpg)
20378|By analyzing the blame information on this pull request, we identified @joaomoreno and @egamma to be potential reviewers
20379|Hi **@Ikuyadeu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
20380|I do not see any embedded CSS in your snippet. I do see JavaScript objects that build up a style sheet though... I don't understand what kind of colorisation you'd expect other than the plain JavaScript.
20381|Do you maybe have an Nvidia GPU? electron/electron#4380
20382|@edsondiasalves that seems like standard OS behavior, not much we can control.
20383|I like this idea. For start, as Joao suggests, I would render 'Thread'. @weinand should we add some more optional data to our [protocol](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L543) such that the adapter could specify what to render instead of the default 'Thread'
20384|@v-pavanp C# debugging is a separate extension that is not part of VS Code core. I've moved this issue over to omnisharp-vscode as OmniSharp/omnisharp-vscode#270.
20385|This issue was moved to OmniSharp/omnisharp-vscode#270
20386|The issue here is that the debug hover has no AST understadning of the language and thus has some limitations. Some of these limiations include looking for variables only inside non-expensive scopes, not showing hover when there are duplicates and so on... It is on our backlog to improve the debug hover.  In the meantime ping @lukaszunity to check if the unity debugger could support [evalute on hover](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L508). The issue with using this flag is that the user could by acciddent mutate the state of his program by simply hovering
20387|There is nothing we can do here, as the threads are coming from the debug extension. @jrieken let me know if you can repro and I will file a bug against the debug adapter extension
20388|I am fine with experimenting with this. It sounds good to me. @weinand let me know what you think, if making totalFrames mandatory is fine
20389|Not in 1.0.0. You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
20390|fyi @weinand current pause and continue actions only pause or continue the currently debugged thread. I would introduce 2 more global workbench actions that would pause or continue all threads. Let me know what you think
20391|@alexandrudima thanks for picking this up, I still see some places where we have to copy the font-family into the CSS: - https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/ui/inputbox/inputBox.css#L21 - https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/parameterHints/browser/parameterHints.css#L111 - https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/quickFix/browser/quickFix.css#L95 - https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/suggest/browser/suggest.css#L93
20392|Thank you it is working in  1.1.0-insider
20393|Me too. Windows 8 ![vs](https://cloud.githubusercontent.com/assets/2727326/14978543/c5b8f09e-111c-11e6-8b22-9736baaaad42.png)
20394|This issue was moved to OmniSharp/omnisharp-vscode#271
20395|There is a difference between **explicit/voluntary** lazy loading and **implicit/involuntary** lazy loading. We've decided to use **explicit/voluntary** lazy loading because it gives the user explicit control when to load more frames. **implicit/involuntary** lazy loading would mean: if a user resizes the CALL STACK view to be large (or uses a big screen and VS Code in fullscreen mode), more than 20 frames will be loaded. If more frames are loaded automatically, it is more likely that node.js becomes unresponsive because one of those frames is too large. You can implement Joao suggestion but then we need an opt-out mechanism for adapters like node-debug.    We cannot change `totalFrames` (or any other attribute) to become mandatory without breaking all existing debugAdapters, so we need a 2.0 version of the debug protocol (which would mean you will have to support two versions). We can plan for this, but it is nothing that we will introduce lightly.
20396|@isidorn does Visual Studio have those additional actions as well? And you would implement those actions by using multiple pause and continue requests for all threads that are known to you or would you need a protocol addition?
20397|related to #6057
20398|If nodeDebug would opt out of this then I propose to push this to the backlog.
20399|@weinand installing VS to my vm to check it out.. Another idea I got, which is now my favorite is to enable context menu on threads in the call stack view. So the user can choose which thread to stop and continue. We can enable multi-select so the user could pause / continue multiple threads.  This would not require any protocol additions. But let's wait and see what VS is doing.
20400|If you are interested in giving us some feedback about the extensions UI and UX, we've opened up some more time slots:  https://calendly.com/stevencl/vs-code-extensions/05-03-2016
