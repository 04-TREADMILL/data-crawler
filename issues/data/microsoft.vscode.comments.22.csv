2101|You can execute every command like this  ``` js commands.executeCommand('undo'); ```  Search for the available commands in `Code > Preferences > Keyboard Shortcuts`
2102|The packages used by VS Code are totally independent of the ones you use in your plugin. It are two separate things.  Even if it was possible, you should rely on it. What if VS Code decides to remove the package and use something like `semver-improved`? Your extension breaks... What if the next `semver` version has a breaking change which your extension can't handle? Your extension breaks... That's the whole idea of semver and package dependencies...
2103|Thanks Sam!
2104|"I would like to replace ""Save As"" command to ""Save All"". I added the keybinding, but now theres two commands for the keybinding Ctrl+Shift+S."
2105|Fixed by https://github.com/Microsoft/vscode/commit/c37cb211f1f2d6a9c53a96501ed3849ab4c2c1e3 (dupe of #23), just needed to sync from upstream.
2106|Hi **@Tyriar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
2107|@joaomoreno I am going to close this for now however @alexandrudima What do you think of these changes as a starting point for how to search within the current view context. This code is a little buggy and does not update on scroll yet but poses the idea I was talking about earlier. The idea is that viewImpl.getView is used and altered to return the search range that should be matched against. Thoughts?
2108|+1
2109|Go to http://code.visualstudio.com to download VSCodeSetup.exe and install.
2110|> oatmealpirate. oh man thank you you're my hero you've made my day!
2111|I am facing the same disturbing problem
2112|what is your system and system input method?
2113|@danlofquist unistall and reinstall solved my problem :)
2114|@jwulf Yes it does and .jsx files now support the basic function -- autocomplete brackets...( in version 0.10.2)  If you try to return two nodes in `render() {}` function you will get a `parsing error`, so I think the linting is working.
2115|I got a similar response [here](https://github.com/Microsoft/vscode/issues/386)...It's frustrating because Razor is a distinguishing feature of Microsoft's MVC platform, and yet neglected on this product and I'm not totally sure why. I also know that it's not quite deprecated, but won't be grown/enhanced going forward, partly because of tag helpers, which I'm sure I will like once I get more comfortable with them...and if they get intellisense, too. :-\
2116|Yo Sam ! (sorry i cannot resists ;))  That's the point on the platform. IT's the same with node dependencies ? I was thinking it was a core functionality.  It's working as it is, but I was thinking it was a core feature  ;)
2117|As @SamVerschueren said, package dependencies between VS Code and extensions or between extensions are independent.
2118|It is on the backlog and we will collaborate with the ASP.net team on this feature.
2119|> Yo Sam ! (sorry i cannot resists ;))  @fforjan see what you did there :)
2120|This bothers me too. After update to 0.10.2, sorting rule of the suggestion list has changed. Some user defined snippets no longer showing first.
2121|@isidorn Yes.  In fact, I had to play around the build instructions to make it run.  For instance manually make sure `gulp` was in my `PATH`.
2122|This is a duplicate of #619.
2123|Same as #743?
2124|That's the one (my search for existing issues should improve :-1: )
2125|I took this offline with @joaomoreno. The guid in the issues is enough to locate the issue in the error telemetry dashboard.
2126|@alexandrudima  `/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/pluginHostProcess.js:11:17461` is actually `/vs/platform/plugins/common/ipcRemoteCom.ts#L114:4 (create)`  The combining logic between minified and de-minifed stack traces had a bug here. I updated the stack for this specific issue. It should be ok to see frames with no sourcemaps if it's coming from extensions. In this case, we should always have a sourcemap.   As for this issues @bpasero, this is the full stack that we have. Maybe try to catch this issue in the code and use [safeStringify](https://github.com/Microsoft/vscode/blob/6e3703638eecdf70a585302aaa87f603b0bd93b5/src/vs/base/common/objects.ts#L290) to log the payload to help us pin point the issue.
2127|this issue is happening too in 0.10.2  68abf37c-ce02-e66a-71cb-9a25a4c0101c
2128|Hi **@Tyriar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
2129|Looking at the code, the first step towards this is probably to factor out XML-only logic from the HTML code to XML (closing tags, tokenizing, etc.) and have HTML extend that. SVG can then extend XML in the same way HTML does.
2130|`shift+tab` de-indents code so that's working as expected. `ctrl+shift+i` (Linux) is the shortcut for format code (`editor.action.format`) which seems to work fine on HTML and JS.
2131|"I've been playing around with the _easy way_ and got this far: - `electron-rebuild` generated a binary output - My extension still failed as the path was not matching the generated output - Modified the folder of the generated output and it worked  So - I now have a ""working"" native node package running in a VSCode extension. But I was curious as to why it wanted a folder of `node-v46...` to load the binary. It seems that the logic to load the binary uses the `node-gyp` build/versioning lookup which might be _somewhat_ broken in VSCode. The failure is that internally it does some checks to whether it's _node_, _node-wekbit_ or _electron_, but `process.versions.electron` is undefined in the VSCode plugin. My guess is that because the extension is running out-of-process it's not getting that passed through, which in turn makes it a little unhappy.  Anyway I can at least get the extension launched, so chalk that up to success number 1 :grin:."
2132|Duplicate of https://github.com/Microsoft/vscode/issues/313
2133|Looks like CI might have flaked?  > 1) Files - TextFileEditorModel Change after auto save triggered will cause another autosave and twice the events: >     Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test. >      at null.<anonymous> (C:\Users\appveyor\AppData\Roaming\npm\node_modules\mocha\lib\runnable.js:189:19)  `mocha` passes locally on Ubuntu.
2134|This fails with the same error:  ``` bash ./scripts/code.sh \   $(pwd)/extensions/vscode-api-tests/testWorkspace \   --extensionDevelopmentPath=$(pwd)/extensions/vscode-api-tests \   --extensionTestsPath=$(pwd)/extensions/vscode-api-tests/out ```  The tests pass after `npm install` is run in `extensions/vscode-api-tests`.
2135|Figured this out, it was due to `./scripts/npm.sh` not running successfully initially. Installing deps in `./extensions/vscode-api-tests` is handled the `postinstall` script.
2136|"There are other themes available in the command palette which feature different background colors: `cmd+shift+p` -> type `""theme""` > `enter`"
2137|+1 I checked the same thing as soon as I got the update and was somewhat disappointed that it wasn't in sync.
2138|Same issue here, with the similar error to @RobertoMD:   > getaddrinfo EAI_AGAIN marketplace.visualstudio.com:443  Have set http.proxy and https.proxy settings values. VS Code updates work fine; only Extensions Marketplace seems broken.
2139|Indeed, that does work! Thanks & sorry for the noise
2140|#804 hit this
2141|"You have to register activation events for the commands, e.g.,  ```     ""activationEvents"": [         ""command:extension.sayHello""     ], ```  At some point before the beta, we have implicitly activated commands, but for consistency we have switched to explicit activation events also for commands."
2142|We need to document our branching policy in the wiki. We continue working on master and cherry pick changes into a release branch https://github.com/Microsoft/vscode/tree/release/0.10.2.
2143|@joesonw Can you please help us with more steps to reproduce the problem. Does the problem persist for you if you restart VSCode? Does the problem occur only on a certain file/folder?
2144|@alexandrudima  I even tried to reinstall it. I also tried delete everything under `${HOME}/Library/Application Support/Code`, problems still persist.  I can't really tell how did I got into this. I suspect it might be structure of project files? or `package.json`?
2145|@xlexi  Can you give more information, maybe a screenshot. What color theme are you using? Do you mean function declarations or references?
2146|@ludohenin   VSCode uses the first line `#!/usr/bin/env node` as a hint that this is a JavaScript file (since node can only run javascript). I think this is a fair assumption and holds true in most of the cases, except ones like this where a different language (typescript) is used to generate javascript.  Given most of the times this hint is correct, in the times when it is not, please use the switcher in the bottom right to manually change the language to TypeScript.
2147|@aeschli @joaomoreno should we convert the branches to tags once we have finished a release
2148|CCing @dbaeumer who might help you pinpoint the failure better
2149|Thanks, let's track it in #313
2150|@zbandhan Not sure what you mean. Can you please describe the feature you want in more detail. What do you mean by duplication of HTML TAG ?
2151|"@guillermooo Tried the following and it worked for me on Windows / Standard US keyboard layout:  ``` json {     ""key"": ""\\"",     ""command"": ""actions.find"",     ""when"": ""editorTextFocus"" } ```  What OS are you on?"
2152|I think the word highlighter color is non-transparent and it renders on top of the selection and it is the exact same color as the background.  @jublo What theme are you using so I can try to reproduce
2153|@aeschli Perhaps use URI.fsPath in error messages
2154|@Tyriar Cool, thanks!  - Let's keep or now all in the same file (htmlTags.ts), so we don't need to worry about the copyright. - Where did you get the descriptions from? Unless you authored them yourself we need to know what's the license on that page or website and add a third party notice. In general that's not an issue, unless the license is not too restrictive or no license is present. - All strings need to be externalized:   Add   ``` import nls = require('vs/nls'); ```  as import, and use  ``` nls.localize('tags.html', 'The html element represents the root of an HTML document.') ```  for each string
2155|@yuhaozyx Any more info will be appreciated. OS, input method, maybe even steps?
2156|For C# tokenization we use the text mate grammar from https://github.com/atom/language-csharp. I verified that Atom has the same issue, so it's really a grammar issue (and not problem with our text mate engine). I suggest to file the issue there as well.
2157|I guess the progress is not working correct. You released a new 0.10.2 version . the tag must be done before it real released.  Or you can call your working branch as 0.10.3.  The tag 0.10.2 must equals to what you already released. that's the right way to get tags meanful.
2158|"@Tyriar  The word highlighting is delegated to each language so it can have semantic meaning in languages that support it. Otherwise, if a language does not implement such semantic word highlighting, we fall back to a ""non-semantic"" one that uses the word under the cursor and highlights other occurences of the same word. Also notable, the word definition is contributed and varies across languages.  Here is a language that implements semantic word highlighting: ![image](https://cloud.githubusercontent.com/assets/5047891/11467920/c7ea82b0-974b-11e5-991c-88744110e891.png)  Here is the same text under plainText: ![image](https://cloud.githubusercontent.com/assets/5047891/11467946/0fa0ba5c-974c-11e5-82ee-745364eb9e75.png)"
2159|@aeschli I think for HTML we still use the hand-written tokenizer.
2160|@egamma @bpasero Would be great to have this.
2161|I think I heard @dbaeumer and @bpasero discussing about how a Travis CI should look like for extensions.
2162|@dbaeumer is this issue addressed in TS 1.7?
2163|Thank you very much, but I feel it doesn't matter with vsc,I also encountered such a situation in other software.I guess it may be the result of software conflict, I can't accurately say what specific steps, because it occurred randomly,everything back to normal after the restart.The second issues due to 'shift' key can't work sometimes,so they are the same issues. os:win 10 pro , 64bit
2164|@aeschli Not sure if this is low hanging
2165|@aeschli Source: http://www.w3.org/TR/2015/WD-html51-20151008/ License: http://www.w3.org/Consortium/Legal/2015/doc-license
2166|@alexandrudima Could there be an option to not use the language's definition of a word for the double-click highlighting?
2167|@lukehoban @ironcladlou I know @jrieken is working on a solution for this.  Extensions should never get to see the 1-based format (that is the format that reaches the main process).  For now, please don't write code depending / working around these wrong return values as we plan to fix them.
2168|I removed the 0.10.2 branch and created a 0.10.2 release. I update our (for now internal) release checklist on OneNote ('0.10.X Fix Release Template') @bpasero FYI
2169|@alexandrudima [This](https://github.com/Microsoft/vscode/blob/master/src/vs/languages/html/common/html.ts#L98)? Are there plans to move away from that?
2170|This seems to be a problem with our internal JavaScript linter since it refers to the jsconfig.json file.
2171|@lucasrivoiro  - What exact version of VSCode are you using? - Is this happening when opening a certain folder? - Is this happening when opening a new window without a folder (`Ctrl-Shift-N`)? - Did you install any extensions?
2172|"There is indeed some over protective code in the model that does not allow edits that touch each other. The code tries to protect against ambiguity.  In your specific case there is no ambiguity as to what to do: - delete `[0->4]` - insert `""\t""` at `4` - this is the same as replace `[0->4]` with `""\t""`  But for example the following case is ambigous: - insert `""A""` at `4` - insert `""B""` at `4` - should it insert `""AB""` or `""BA""` at `4`?  To protect against ambiguities, the model forbids any touching ranges. I agree the check is rather over protective but I would not want to remove it entirely.  @jrieken not sure where the error is going.."
2173|We wanted to avoid to clutter the list with deprecated, experimental and not-yet standard tags and attributes. So the process has been to check https://developer.mozilla.org/en-US/docs/Web/HTML/Element on how many browsers already support the feature and add it when there are at least 2 browsers. Deprecated features are removed. What do you think? Adding @dstorey as well for an opinion.
2174|Seems fixed.
2175|As designed.
2176|Are you sure you 1. Have changes to commit, and 2. Typed a commit message?
2177|@tkrotoff when running tsc in the src directory it will only compile Foo.ts since the tsconfig.json file inside the src directory only lists that file. If you run the tsc command inside the test folder it will use the tsconfig.json from there.  If you open the Foo.spec.ts file we try to find a tsconfig.json file to use. The rule the tsserver uses is to look for the first tsconfig.json file in the parent directory chain. We discussed whether we should have a mapping to tell VSCode which tsconfig.json file to use for which ts file but that seemed unnecessary complicated.   If you move you Foo.spec.ts file into the test folder and update the tsconfig.json file accordingly everything should work as expected.   In general VSCode is using the tsserver from https://github.com/Microsoft/TypeScript and the tsconfig.json lookup behavior is defined in the tsserver. I will move the issue to the TypeScript repository since a fix for this needs to be implemented in the tsserver.
2178|@ThinnerSpinner That is the current line highlight to help you find your cursor easily... Perhaps try another theme? Here's how it looks in Monokai:  We don't have any option to turn it off completely.  ![image](https://cloud.githubusercontent.com/assets/5047891/11468716/01727eb0-9752-11e5-951f-ee5131d2faaa.png)
2179|Adjusted the title to reflect the problem in TS land. To reproduce do the following after cloning the example: - cd test - tsc -p .  Observe: the Foo.spec.ts file is compiled nicely  Try to open Foo.spec.ts in a editor like Sublime or VSCode. The tsserver always picks the tsconfig.json file in the src directory using its defined lookup rules.
2180|This issue was moved to Microsoft/TypeScript#5828
2181|@bkbonner what do you mean by 'automatic' imports. Can you please provide an example.
2182|@LittleSaya VSCode uses the C++ textmate definition from https://github.com/textmate/c.tmbundle . Fixing the bug there will have it fixed for all editors consuming the grammar.
2183|@joesonw would you be able to share your project with me.
2184|@lukehoban Can you please help me out with a specific before text, before selection and edit operations
2185|@pcgeek86 I can also only recommend a different theme. There are a lot of theme extensions already in the gallery.
2186|Sounds reasonable.
2187|@jwulf would you be able to share a folder with me that shows the behavior.
2188|@SiriusGuo `editor.wrappingColumn`: - `0` - means wrap at viewport width (changes as you resize editors) - `-1` - means never wrap - `120` - means wrap at 120th column
2189|Moved to PowerShell/vscode-powershell#36
2190|@thomas-jeepe ping: - what linter have you configured? - is this TypeScript or JavaScript?
2191|"@rhires Are you `Ctrl+Clicking` on a ""detected link"" inside an HTML block?  Something like:  ``` html <a href=""~/some/path/to/something.txt""> ```"
2192|@khagesh ping. Any more information you can provide to help us reproduce this issue?
2193|@Tyriar Yep, that's the current one out of the box for HTML.   Yes, we want to move all the code in `src/vs/languages` into extensions. HTML is one of the last ones we can move, after we move out CSS and JavaScript into extensions and perhaps consume them again as library code in the HTML one (the reason being intellisense in embedded CSS/JavaScript).
2194|fix delivered
2195|Quiet Light, code is a Makefile.
2196|"@netroby Here is our process for making a release: 1. we use a branch, e.g. 0.10.2 2. then we build VSCode on that branch 3. then do cross OS smoke testing 4. then if we identify any critical issues we deliver fixes to the branch and repeat from step 2. 5. when step 3 yields no additional critical (ship-blockers) issues we're done 6. [we forgot this one] ""convert"" the branch into a tag"
2197|@drewcassidy I actually came here to ask about a block cursor :)  Hopefully the now-open-source development of Code and its extensions API can be influenced by the requirements of third-party extensions.
2198|@jublo thanks for getting back so quickly.  Can you please share with me the entire file or a subset that shows the problem. Here is what coloring I get when I try out Quiet Light in 0.10.2 on windows.   Given the differences (everything is red in your gif), I have a feeling that you're hitting multiple issues:  ![image](https://cloud.githubusercontent.com/assets/5047891/11469674/5a8138e2-9758-11e5-9da2-a19e56c2e323.png)
2199|@alexandrudima Thanks for the clarification, my interest mainly stems from looking into SVG support (https://github.com/Microsoft/vscode/issues/728). It was a little puzzling why language implementations were implementing in two spots. Should this be tracked in an issue? I'd love to help out.
2200|It wouldn't work, neither with en-US nor with es-ES. I'll retry in case I missed something.  Win10.
