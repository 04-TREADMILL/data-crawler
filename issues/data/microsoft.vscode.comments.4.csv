301|"The 24"" monitor is connected via HDMI. However, I can confirm that the same issue is present in Atom v1.2.2: Laggy on 24"" monitor, smooth on the 15"" laptop display."
302|@karl20888 Yes, don't modify files inside the VS Code installation. They will be replaced on every update. We have user definable snippets. Go to 'File > Preferences > User Snippets'.  They appear on Ctrl + Space.
303|I have the same issue since 0.10.1, vscode stops responde every 5mins when it starts. I am writing PHP and js, OS win7 64 bit
304|Still talking about breakpoints and source maps: when we're not in debug mode, we can't put breakpoints in our `.ts` files, because they won't get caught, so, we must put them in the generated js file, so we can debug our files.  Is there any other way to achieve that? Am I missing anything?  Btw, isn't it possible to VSCode handle that automatically?  Thanks in advance.
305|@foisonocean Is your intent to define a macro: e.g. Ctrl+/ should toggle comment current line and move cursor to the line below
306|Can you give a little more information on your hardware? Maybe your processor is to slow, because _Atom_ as well as _VS Code_ use quite a lot resources.
307|I am having the same issue.  My work laptop (OS X 10.10.5) it works fine on all languages.  My personal laptop ( OS X 10.11.1 ) some languages it works fine, some not.  I tried uninstall / reinstall still the same issues.
308|"I am having the same issue when working on PHP files. At first I thought it was the new linter but I deliberately set the _php.validate.executablePath_ to an invalid binary and the freezes still happen - I can confirm that php.exe is not getting called. The next thing I tried was to disable auto save; That did not help either. I am pretty sure that I can rule out both as the cause.  The next thing I did was running Process Monitor and Explorer to see if I can see anything that will lead to the freeze but I wasn't able to come up with anything. It is, however, always the same code.exe process that goes haywire. The affected process is launched with the following command:  `""C:\Program Files (x86)\Microsoft VS Code\code.exe"" ""c:\Program Files (x86)\Microsoft VS Code\resources\app\out\bootstrap"" --type=pluginHost`  The process hanging has the following threads running:  ![threads](https://cloud.githubusercontent.com/assets/10513218/11270763/e4f26f54-8ec1-11e5-8f44-7be78822102c.png)  The stack of the endlessly running thread is as follows:  ![stack](https://cloud.githubusercontent.com/assets/10513218/11270772/04a93aa8-8ec2-11e5-9ab0-5bd5f54c0ce7.png)  Using Process Monitor I didn't see anything special regarding the freezes, I am also unable to reliably reproduce this but it is happening every few minutes, however, if the editor is left alone it seems ro run fine. It's only when you actually write some code that the editor seems to freeze after a while.  This is affecting me since 0.10.1 on Windows 7 x64, all possible patches applied.  Edit: I also downloaded the editor's source to have another project to test this on and I experienced no freezes typing away in various files. At least on my machine this seems like it is related to PHP files. I haven't been able to test anything else besides typescript/js/PHP though."
309|"@jpoon I can't really add support for that. The keybinding dispatching occurs in a keydown browser event handler, where I only get the keyCode and the modifiers state (i.e. keyboard layout independent, not what would be produced in a keypress).  We need to do something special for vim mode where all typed characters can be ""trapped"" and redirected to an extension"
310|Fair enough, but could the docs mention that?  On Thu, Nov 19, 2015 at 1:51 AM, Johannes Rieken notifications@github.com wrote:  > That isn't a finite list but depends on the installed extensions. Use > languages.getLanguages ( > https://code.visualstudio.com/docs/extensionAPI/vscode-api#_languages) to > get a list of all installed languages >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/90#issuecomment-158006992.  ##   #   Raymond Camden, Developer Advocate for MobileFirst at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden
311|@hellopao The global require you are hitting is the require defined in src/vs/loader.js (an AMD require function). Our code is compiled to AMD and not commonjs because compiling to AMD allows us to bundle multiple modules to one file, giving perf improvements in a built version... Therefore the global AMD require.  If you want to get from the Developer Tools to node's require you can use `require.__$__nodeRequire('util')`
312|"+1  I'm having the same issue. npm's .npmrc and Atom apm's .apmrc files allow you to set a ""strict-ssl"" value to false. While I realize this is unsecure, it seems to be the only way to use these tools through our proxy."
313|Fair request.
314|I'm having the same issue. VS Code running in a VirtualBox Windows VM takes several minutes to start.
315|Also happening to me while editing PHP files, although I haven't tried other files too. I thought it was extension related, but then I removed all extensions and it's still happening.
316|:100:
317|@alexandrudima not sure the fix is right, I can also change the editorStatus.ts to react on any types.
318|Hi **@lucaslra**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
319|Same problem in:  Version 0.10.1 Commit df352367df2efcfa9d602d471e4e2f42140a0f05 Date 2015-11-17T15:21:23.766Z Shell 0.34.1 Renderer 45.0.2454.85 Node 4.1.1  Ubuntu 15.04
320|"@jrieken I am worried though that our commands leak into the API. how can I ensure that my internal command ""Open Folder"" does not break the assumed API contract of being able to pass in the folder to open? I think if we allow arguments to be passed to a command, the command itself must move into a location where it is very clear that any change to the constructor is a breaking API change."
321|English please. And if you have any suggests, please list them on your comment instead of complaining incessantly.
322|@joaomoreno no review for pushes to master :)
323|Great
324|@bpasero our link detection is failing here. Can we improve it to handle this case?
325|@tomq42 can you please attach some pictures?
326|This might be tied to https://github.com/Microsoft/vscode/issues/133.
327|@joaomoreno @bpasero I just tried to see in guts of vscode and I guess possible fixes: 1. Increase field height by 1px on https://github.com/Microsoft/vscode/blob/497788c0bcd20859f736d585b49c208af8dd518f/src/vs/workbench/parts/git/browser/views/changes/changesView.css#L24 2. Make field auto resizable when placeholder is wrapped 3. Make placeholder no-wrap
328|**@lucaslra**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
329|@aeschli thanks for taking time for this issue. I ran ts compiler (1.7) on both .ts and .tsx files and it did not throw any error. Do you want any extra information (node version, any Ubuntu logs, etc.) that might be helpful for fixing this issue? Format from menu also does not work, no Intellisense support as well.
330|+1
331|Not particularly easily. Partly because I now longer have the older version (its been upgraded obviously) and partly because I would have to set up a new project with dummy examples in to avoid posting pictures of confidential stuff. I don't know whether I have the skills to do that or not, I didn't set the project up originally.  Do you think there _should_ be red and green highlighting in the debug console if I run Mocha tests?
332|Perhaps tangentially related: currently, on Linux, selecting text doesn't copy to the X clipboard. Nor does middle-clicking paste. Would be nice to have.
333|This is currently not possible and a limitation of the underlying TS compiler and language service infrastructure we are using. Pls open an issue at https://github.com/Microsoft/TypeScript
334|:+1:
335|@spboyer Can you attach or PM the omnisharp log (Cmd+L, L)?
336|"@buzinas putting breakpoints in your .ts files should always work, not only when in debug mode. If it doesn't then this is a result of one or more of the following problems: - you haven't turned on ""sourceMaps"" in you launch config, - you didn't specify where the generated code lives via the ""outDir"" attribute in the launch config, - there are no source maps, - the source maps have ""holes"" (i.e. they do fully cover the full source), - a bug in VS Code node debugging  In order to help me investigate the problem, it helps immensely if you could: - use node-inspector to verify that source-maps work fine there, but not in VS Code, - make a reproducible test case available to me."
337|@bpasero  Yes, the commands will become API. As they are already today by the keybindings-config. IMO we should have a list of commands that we consider stable including identifier, args, and return-type if applicable.
338|"Ah. What's changed is that now it it runs the program in an internal console that DOESN'T have highlighting whereas previously it used an external console window.  The external console highlighted things red and green as presumably mocha generates ANSI control characters to configure the colours.  So you appear to have added ""externalConsole"" to the launch configuration, but the default appears to be false if the value isn't specified in the configuration, so it runs it in the Debug Console instead. That's what's changed.  So the request is that the Debug Console honour the ANSI control chars, and that the default appears wrong, from an upgrade migration point of view."
339|This is a bad regression. The text box should automatically adjust its height based on its contents. Thanks for the report and extra info!
340|The detection currently works only for file paths and not for http links. But we can beef it up I think. However, if we move the repl to an editor, we would benefit from automatic link detection imho.
341|Interesting, I would of thought it could accept both. I'll try that out, thank you!!
342|"+1 Same here. I can check for updates but cannot ""ext install"" being proxy. I tried setting up the corresponding http_proxy and https_proxy environment variables too just in case, but no luck."
343|Yeah, but our internal debug console supports basic ansi coloring
344|do you have similar issue? - #160
345|"@isidorn yes, our internal debug console supports basic ansi colours but it is not a real ""tty"". Some programs (IIRC mocha is one of them) check explicitly whether they are running in a ""tty"" and only then use colours."
346|@lucasrivoiro can you share more details about your environment? and maybe the interaction you do that leads to the crash.
347|Oh yes, Ben has overcome this issue by passing in some arguments to mocha. @tomq42 please checkout https://github.com/Microsoft/vscode/blob/master/.vscode/launch.json our Unit Tests configuration where we pass --colors arguments to mocha.  Closing this as desgined for now. Feel free to reopen if you feel like something is missing still.
348|@jrieken I would still feel more comfortable having explicit API in vscode.d.ts to open a folder, this could be on the window namespace.
349|@PooLP does it work with Atom?
350|For now I have reverted to an older version.
351|Excellent.
352|The thing that confused me primarily was the change in behaviour of launching internally verses externally. Is that deliberate?
353|Passing --colours does indeed make it work.  What's a bit annoying though is that it keeps creating the Debug Console along side my editor. So unless the Debug Console is actually displaying, it will create a new one to the side of the editor, and there doesn't seem to be a way to configure that?
354|"![image](https://cloud.githubusercontent.com/assets/61557/11273053/7313df2a-8ed1-11e5-92df-2a74082634d9.png)  Usually ""strict-ssl"":""false"" fixes that error in most cmd line tools like git, npm, bower, yeoman, etc.. But VS Code doesn't. How can I specify strict-ssl?"
355|+1
356|Not yet fixed.
357|+1
358|Yes the change was delibarte to launch in internal, you can easily change that behaviour. Hmm if I set `externalConsole: true` the Debug Console does not get open on the side for me. Do you see different behavior? If yes, do you just get an empy Debug Console?
359|+1 for @xqliu's list of features
360|XML formatting has been removed as it was based on the HTML formatter and had lot of bugs. We hope that an extension can provide a high quality XML formatter.
361|Oddly enough, I have a colleague that's on version 0.9.2 and his syntax highlighting is fine. I'm also experiencing this issue on version 0.10.1.  ### Edit  My colleague shot me a screenshot of his highlighting:   ![xml-highlight](https://cloud.githubusercontent.com/assets/2295721/11273709/656aad5e-8e9a-11e5-90e0-821af46a2111.jpg)
362|dup of #154
363|Sorry, maybe I didn't describe very well. I have extrernalConsole:false, or unspecified, and when I then run, the Debug Console always gets created to the side. There seems to be no way to have it just bring to the front the already existing Debug Console that might exist. So if I Ctrl-Tab, Debug Console is in the list of open windows. Yet when I run, rather than just swapping to that, it brings it up to the side, which I find annoying.
364|We always have one instance of the debug console, and when you launch we will not open a new one but use the one already there. What I think is the cause of confusion is that on each debug start we clear the contents of the console
365|But it doesn't reuse the one that's there, or at least if it does, it always moves it and splits the screen and puts the Debug Console on the right. _Thats_ what I fine annoying. The splitting of the screen.
366|Ok, I will need an actual setup and reproducable steps Where do you have the Debug console before starting the debug session? Invisible, or if visible in which of the 3 slots? Where does it end up after the debug session start?
367|For reference, this bug tracks atom/electron#3349.
368|+1 Same here.  Also using Cntlm.
369|"The ""env"" attribute is a dictionary of **strings**. Please pass the PORT number as a string and not as a number. We will try to improve the schema for ""env"" so that your case will be flagged as an error."
370|A comment on [issue 71](https://github.com/Microsoft/vscode/issues/71) by @aeschli states that the XML formatting has been removed because it was based on the HTML formatter and was full of bugs.
371|Thanks. I saw lower in the launch config that there was another port value which is a number and was copying that instance. Is it possible to define these as numbers?
372|![screen shot 2015-11-19 at 10 30 27 a m](https://cloud.githubusercontent.com/assets/5158380/11274029/d2550ece-8ea8-11e5-8e8b-eeffb2adcf3a.png)
373|Hi **@joaomoreno**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Joao Moreno). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
374|I just created a new folder, opened VSCode, clicked on the debug icon, then by the launch dropdown clicked on the great icon. It generated me a new launch.json. I then authored app.js with  console.log(hello world). Click on the launch, it opens the DEbug Console to the right.  So then close the Debug Console so I only have my app.js showing. Shift tab though and the Debug Console is still in the list and I can cycle through to it. However if I run the app.js again, with the app.js showing, then the Debug Console pops up again on the right, rather than just dong the equivalent of Ctrl-tab and cycling through to the file.  I personally find this behaviour annoying, as neither the source window nor the debug console window are then wide enough to see all I need to see (I have a widescreen monitor).
375|@Matthias247 We started with hand written tokenizers as well as a tokenizers using a library called 'Monarch'. Some modes still use these, but our goal is to move to text mate tokenizers.  Text mate tokenizers are well established and are have a lively community keeping them up-to-date. They also play well with text mate color themes which we also support. There are still some old tokenizers around, as we ran out of time replacing these. We are working on that.   The /standalone-languages folder contains the old implementations, but they are not used in VS Code.  We still have them for other usages of the editor, for example when the editor widget (the 'standalone editor' aka 'Monaco editor') is used in a web page. We can't use Text mate there as text mate tokenizers depend on a native regex library called 'oniguruma'.  There is more to come on how to bundle and use the standalone editor. Hope that answers your questions.
376|Sorry, we removed XML format from 0.10.1 due to the many bugs. We hope we can get a high quality formatter as an extension soon
377|VS Code assumes that the (absolute) file paths returned from node.js, can be found in the filesystem where VS Code runs. As long as node.js runs on the same system as VS Code, this is always the case. In your case node.js runs on a different system than VS Code, so the paths returned from node.js are not valid in VS Code.  We are planning to improve this path mapping soon. Until that has happened, can you try tweak your setup, so that the docker paths are valid paths on your host system too? (e.g. by using symbolic links).
378|I don't know exactly what you mean, but I think you mean _complex_ in the sense of math, because `float` and `double` aren't _complex_ data types. This term is commonly used for structured data.   However, I think you're confusing something because you're talking about better C  support for the Windows Visual C++ compiler but _Visual Studio Code_ is an editor.
379|update:  it's my mistake
380|Thanks for getting back to me so fast. I already tried the symlinking approach and everything mentioned [in this Stack Overflow post](http://stackoverflow.com/questions/33032164/how-can-i-attach-vs-code-to-a-node-process-running-in-a-docker-container) (notice that although the question is 0.8, the issues persist) but could not get it to work in any constellation.  Should symlinking work in theory (i.e. has anyone of you ever managed to debug a node app inside a container yet)?
381|Indeed, complex in the mathematical sense of (a + b \* i) - complex float and complex double are native data types in the C99 standards and onwards, yet not supported by the Windows Visual C (not C++) compiler. Is the repository only for the editor, or also for the compiler?  On Thu, Nov 19, 2015 at 4:23 PM, Andreas Linz notifications@github.com wrote:  > I don't know exactly what you mean, but I think you mean _complex_ in the > sense of math, because float and double aren't _complex_ data types. This > term is commonly used for structured data. >  > However, I think you're confusing something because you're talking about > better C support for the Windows Visual C++ compiler butVisual Studio Code > is an editor. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/246#issuecomment-158088195.  ##     אופק בירנהולץ   Ofek Birnholtz   Max Planck Institute for Gravitational Physics (AEI)   LIGO Scientific Collaboration   http://phys.huji.ac.il/~ofek/    התנועה הירוקה- מימד סניף ירושלים   חינוך. סביבה. עתיד   http://www.facebook.com/tymjlm   http://www.yeruka.org.il/
382|I'm experiencing this issue as well. Very often when working on files that are opened via WinSCP I get CPU spikes and then the program eventually freezes up and crashes. When I kill the Code process thread that is running up the CPU it levels out and doesn't crash, but Code says something about a plugin was terminated. Is there a way to backdate to an older exe version of Code? Code is no longer usable for me and I would like to be able to use the previous version until this gets fixed? Anyone know of a way to do this (go back to 0.9~)?
383|Yeah!  This will be really useful.
384|:+1:
385|Actually fixing this as we speak in #245
386|Disagree because the API should stay compact. Also more commands will enable more flexible scenarios like macros etc. I think a rule of thumb could be make a function API if it returns a meaningful and hard to compute result
387|Duplicate of #69
388|That at least explains why restore wants to run with mono. There is a hack on OmniSharp that always uses mono in favour of coreclr because that doesn't support sockets - which OmniSharp and DTH need.
389|Dup of #226  +1 for Ben's comment
390|Also, the OmniSharp log should print more details about the exact DNX version it picked, Use Cmd+L,L to show
391|@blackwire Version 0.9.2: https://az764295.vo.msecnd.net/public/0.9.2/VSCodeSetup.exe  ~~Not quite sure how to prevent the auto updating though, not sure if there is an option.~~ Edit regarding auto update: https://github.com/Microsoft/vscode/issues/160#issuecomment-158104614  As for my freezes: I don't have any extensions or plugins that are not shipped by default. I think you are experiencing a different problem. Killing the pluginHost fork on my machine does nothing to get it back to a working state, instead code crashes completely.
392|@blackwire, i was searching for old releases but didn't found anything.
393|Of course! As will typing in code, the program just freeze, but the menus (file, edit, view) continue to function normally. After a few seconds the windows warns that the program is not responding and the only solution is to close the program. There is no specific situation I've noticed that causes the problem.  2015-11-19 12:05 GMT-02:00 Benjamin Pasero notifications@github.com:  > @lucasrivoiro https://github.com/lucasrivoiro can you share more > details about your environment? and maybe the interaction you do that leads > to the crash. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/225#issuecomment-158065612.
394|@DerTolleEmil So, I don't have any non standard plugins either. Though, when I opened task manager and killed the process thread that was running as a part of code (not the app) that is using 30+% CPU it terminates intellisense I think, because it's no longer working after that point.
395|Personally I think this is a bad idea. Making the editor a kitchen sink is how we will make it slow and bloated. Besides, the amount of work necessary to get on par with just the basic features of **excellent** terminals out there (e.g. iTerm2, ConEmu) would be huge.  I know not everyone runs OS X but check out my setup below. I'm using El Capitan's full screen features to place VS Code side by side with iTerm2. I am super happy with it.  ![image](https://cloud.githubusercontent.com/assets/22350/11275183/b833d49c-8edc-11e5-90a3-5b062bc07434.png)
396|@khagesh Are the menu actions enabled, but just have no effect? Is it with all files, or a specific one? Can you open the dev tools ( F1 > Toggle Developper Tools ) and check for any messages in the Console tab?
397|@DerTolleEmil Thank you for the older version download! You saved my day! I can keep this open for today and get some work done without it crashing all the time. Life.. saver.
398|"Just read what it says: ""Use the 'php.validate.executablePath' setting to configure the location of 'php'"" And maybe have a look at the release notes:  ### Language - PHP  VS Code is now using the official PHP linter (php -l) for PHP language diagnostics. VS Code will now stay current with PHP linter improvements.  There are two new settings to control the PHP linter: - php.validate.executablePath: points to the PHP executable on disk. Set this if the PHP executable is not on the system path. - php.validate.run: controls whether the validation is triggered on save (value: ""onSave"") or on type (value: ""onType""). Default is on save."
399|@kdelorey No worries, colorization will stay. I'll fix the colorization for the next release.
400|It is a performance precaution. :zap:
