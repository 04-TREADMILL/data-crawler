21701|"""Mac Finder"" KOR translation issue  [electronFileActions.nls.resx.lcl](https://monacotools.visualstudio.com/Monaco/_git/MonacoLocalization#path=%2FLocalize%2Fkor%2Fvscode%2Fsrc%2Fvs%2Fworkbench%2Fparts%2Ffiles%2Felectron-browser%2FelectronFileActions.nls.resx.lcl&version=GBmaster&_a=contents)  ```   <Item ItemId="";revealActiveFileInMac"" ItemType=""0;.resx"" PsrId=""211"" Leaf=""true"">     <Str Cat=""Text"">       <Val><![CDATA[Reveal Active File in Finder]]></Val>       <Tgt Cat=""Text"" Stat=""Loc"" Appr=""PreApproved"" Orig=""New"">         <Val><![CDATA[찾기에 활성 파일 표시]]></Val>       </Tgt>     </Str>     <Disp Icon=""Str"" />     <Modified By=""hjkim"" DateTime=""2016-03-16T12:32:18.0007221Z"" />     <Props>       <Str Name=""TranslationStatus"" Val=""In Sync"" />       <Str Name=""TranslationStatusPosition"" Val=""6 - SignedOff"" />     </Props>   </Item> ```  suggested string is ""파인더에 활성 파일 표시""  ```   <Item ItemId="";revealInMac"" ItemType=""0;.resx"" PsrId=""211"" Leaf=""true"">     <Str Cat=""Text"">       <Val><![CDATA[Reveal in Finder]]></Val>       <Tgt Cat=""Text"" Stat=""Loc"" Appr=""PreApproved"" Orig=""New"">         <Val><![CDATA[찾기에 표시]]></Val>       </Tgt>     </Str>   </Item> ```  suggested string is ""파인더에 표시"""
21702|I have the same error on OSX Yosemite - tried the same things I used to get ATOM working but no luck so far. Would really love the fix.
21703|"Please, how can I deactivate de HTML IntelliSense when I'm working with a PHP?  This option is a nightmare, because I can't tab in a variable because automatically create a XML/HTML tag.  I don't mix my PHP code with the HTML, and I will not make this error ever, please, at least add the option to deactivate it in PHP ""mode""."
21704|@chrisdias @dbaeumer @isidorn @egamma   I've already opened this issue on Nov 21st, see: [https://github.com/Microsoft/vscode/issues/397](https://github.com/Microsoft/vscode/issues/397)  and it went on the backburner as well.  Can you please tell me if you have plans to implement it in a not too distant release or if it's somehow seen as non-priority or an against-the-product-philosophy feature?  Besides, with the current API I don't think a user plugin can: - add a button under the debugger icon one - create a vertical split window or substitute the File Lister - call Typescript compiler API and extract AST+TS files infos.  All this can only be accomplished by intervening in the core code of VSC.  Thank you for the time and all the good work.  -- R
21705|I'm not seeing anything in the typescript repo about this, and I'm finding it hard to find the right terminology to search for it.  Has there been any movement on this feature in typescript that will fix this for vscode?  It's a major pain when dealing with large JSX blocks to not be able to easily see matching opening/closing tags.
21706|What about this use case ?  ``` (function(scope){   var configuration = <%- JSON.stringify() %>;   scope.RUNTIME_CONFIGURATION = configuration; })(this); ```  Where the file gets saved as `configuration.js.jst`  This is not `html`, it is javascript with ejs embeded inside, so an EJS mode still is a nice to have
21707|I'd say so. Either _hide_ goes into the same queue or (better) it set's a flag that append et al don't reveal the view anymore.
21708|"I'm confused about the example code above. What is the 'vscode.startDebug' command? The command I was expecting to see is called 'workbench.action.debug.start'. Was that a typo?  What my extension needs is a way to 'run' rather than 'start' the debugger with a custom configuration object. For example:  vscode.commands.executeCommand('workbench.action.debug.run', {             ""name"": ""Launch"",             ""type"": ""node"",  Any chance it could be tweaked so that I can do this? Your example is tantalizingly close to being perfect, but unfortunately I can't use it like that. :(  Thanks!"
21709|Attached you can find the logfile of process monitor, filtered by operation _create File_ and path _my workspace folder_.  The process _code.exe_ (with parameter _...\resources\app\extensions\typescript\out\utils\electronForkStart_ is (re-)creating all .ts files of the workspace folder all the time.  Let me know if you need more specific informations.  [Logfile.pml.zip](https://github.com/Microsoft/vscode/files/267975/Logfile.pml.zip)
21710|Hi @jcansdale we have changed the name of the command to conform to our naming patterns in the API. You are not able to use it yet in the stable VSCode since this is not released yet. But once our May release is out - some time in June you will be able to use the code snippet you wrote with just changin the command name.  Hope that makes sense
21711|Looks like there's a workaround:  https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source  Quite an ugly one, of course.
21712|Will I be able to use it with 'workbench.action.debug.run' as well as 'workbench.action.debug.start'?  I was hoping to try it using the VS Code 'Insiders' version, see it is only currently on the 'alpha channel'. I'll give the alpha version a try. :)
21713|I see the insiders channel is being retired. Where can I find 'Alpha' channel builds?  Thanks!
21714|"@wxkin I think it would be inconvenient to always target beggining of the line as you add new, hitting the ""enter""."
21715|Alpha channel will be announced soon. @chrisdias can provide more info
21716|Thanks, I'll ping @chrisdias. What about support for 'workbench.action.debug.run' (as opposed to '...debug.start')? That is the major issue for me.
21717|@jrieken for me the ordering of the suggestions is mostly not useful when I'm writing react code. For example, I write `PropTypes.xxx.isRequired` a lot in the `static propTypes: {}` property of each class. But every time, vscode suggests `PropertyDecorator` which I've never used in my life.  ![screenshot 228](https://cloud.githubusercontent.com/assets/760112/15322485/d27b9784-1c5a-11e6-96b2-f0968297a8dd.png)  Can we have a better listing which learns by usage and is atleast 80% useful, rather than a fixed list which is not so useful?
21718|No, `workbench.action.debug.run`is not public api and should not be used. Why don't you just use a different string?
21719|Middle clicking on the icon in the taskbar in Windows10 should normally open a new window also, which is not the case for VSC - it focuses the current running instance. I won't open a new issue, since i'm pretty sure midlle click on the icon is a shortcut for the above described behavior anyway.
21720|"@kadza93 both tabs and working files are going to be optional... I wonder how many times I'm going to write it.  It's really easy to do a search and look for the word ""optional"", it's going to take you less time to find it than actually write a post about it!"
21721|"I'm confused. How do you mean it's not public api? It's the command that is by default associated with ""ctrl+f5"". Are you saying there is a way to get similar behavior to ""ctrl+f5"" by passing a string to another command?"
21722|@Tyriar so should we expose the parent folder of those two directories?
21723|For PHP you should try crane intellisense https://marketplace.visualstudio.com/items?itemName=HvyIndustries.crane
21724|the extension is definitely better than nothing, but it's really is more like a makeshift solution. I still use SmartGit's log: ![](http://i.stack.imgur.com/mUDw7.png) for history tracking. It would be cool if VSCode would ~~steal~~ get something comparable - with a separate interface and functionality to revert, blame, see what's in the other branches without actually switching them...
21725|You need to press [ENTER] when focus is on <body>.
21726|@eyalsk I wonder why the flame ! I'm here to express my need and as far as i can see the need of many for tabs, so by supporting what others said and agreeing to it i'm doing something wrong ? By the way thanks for the tip on the search functionality i'm ought to use it more on long threads where i want to express my opinion and if someone already did express similar to mine i will just skip it.
21727|It was only 3 up from your post...
21728|"@lukaschal  Improper translation in DEU, suggested is ""Einzug in Tabstopps konvertieren""  [indentation.nls.resx.lcl](https://monacotools.visualstudio.com/Monaco/_git/MonacoLocalization#path=%2FLocalize%2Fdeu%2Fvscode%2Fsrc%2Fvs%2Feditor%2Fcontrib%2Findentation%2Fcommon%2Findentation.nls.resx.lcl&version=GBmaster&_a=contents)   <Item ItemId="";indentationToTabs"" ItemType=""0;.resx"" PsrId=""211"" Leaf=""true"">         <Str Cat=""Text"">           <Val><![CDATA[Convert Indentation to Tabs]]></Val>           <Tgt Cat=""Text"" Stat=""Loc"" Appr=""PreApproved"" Orig=""New"">             <Val><![CDATA[Einzug in Registerkarten konvertieren]]></Val>           </Tgt>         </Str>         <Disp Icon=""Str"" />         <Modified By=""ICizkova"" DateTime=""2016-03-10T16:02:41Z"" />       </Item>"
21729|Sorry for the confusion, I misread the string you posted. I can also look into adding `vscode.startDebugWithoutDebugging`, created #6425
21730|Ping @weinand for possible suggestions
21731|"@jcansdale now it will be possible to do the following. Notice the `noDebug` argument which specifies if the start debug should debug or just run  ``` vscode.commands.executeCommand('vscode.startDebug', {             ""noDebug"": true,             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/hello.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": null,             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null,             ""internalConsoleOptions"": ""openOnFirstSessionStart""         }); ```"
21732|I think it's important to show all of the results, even when there are multiple on the same line. One of the results for example could be scrolled out of view if it's on a very long line. If we didn't have a separate result for this, it could easily be overlooked.  One thing we could consider doing to improve the experience would be to improve the way we highlight the selected result. When looking at the editor it's hard to see which result is highlighted:  ![image](https://cloud.githubusercontent.com/assets/1704059/15324957/7f076944-1c40-11e6-99e8-71ccf38e56e0.png)
21733|By analyzing the blame information on this pull request, we identified @aeschli to be a potential reviewer
21734|Hi **@sandy081**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Sandeep Somavarapu). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
21735|same to #6184 re duplicate HK of 'S'
21736|"@Darren the accelerator of ""Undo"" under ""Edit"" looks weird, it's supposed to be same as ENU version, can you attach a ENU s/s?"
21737|I'm noting a lot of issues in Javascript. For example, passing objects as function parameters is just a whiteout in monokai ...  ![screen shot 2016-05-17 at 15 20 42](https://cloud.githubusercontent.com/assets/1652187/15325641/fc46aaa8-1c42-11e6-9622-ddedf36c386d.png)
21738|Wow, that was quick! :)  BTW, the reason I need to run without the debugger attached, is that when the debugger is attached the node.exe process never exits (VSCode remains in debug mode). Is this by design? Is there an option that would allow the process to exit when the debugger is attached?
21739|This seems like a pretty big oversight.  Why would anyone want to show leading and trailing whitespace characters, but ignore those in the middle? And what about CrLf pairs?  I use this feature in other editors to troubleshoot goofy composite files (e.g. Unix and DOS files concatenated together) or special cases where a parser wants mixed CrLf behaviour.  It would be nice if I could see the individual <CR> and <LF> characters. Should this be a separate feature request?
21740|#371
21741|+1
21742|By analyzing the blame information on this pull request, we identified @egamma to be a potential reviewer
21743|Hi **@CryZe**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
21744|**@CryZe**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
21745|**@CryZe**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
21746|@jrieken potentially... Post #5570, it might be better to move snippets, settings.json and keybindings.json to the parent directory so it stays away from Chrome's config. Do you know if there's any reason it's in user data as opposed to sitting next to extensions?
21747|@Spown nice find, an alternative to that is <kbd>shift</kbd>+<kbd>click</kbd>.
21748|Following this thread, it sounds to me like there are already some decisions made on tabs for a future release (tabs being optional, where the icons will display, key combos, etc.). If I'm not wrong, is there a list of these decisions people can be pointed to?
21749|Community PR: https://github.com/Microsoft/vscode/pull/6136
21750|no clue... @joaomoreno or @bpasero will know
21751|There is now `editor.wordBasedSuggestions` taking a boolean to turn off/on word-based suggestions.
21752|@kieferrm Can you enlighten me with what you are planning there?
21753|Historic reasons, we only had extensions folder a lot later.
21754|Ah, that delay you linked to explains so much!  I really feel it when running a subprocess that has a lot of output -- vscode looks like it's struggling to keep up because the output is all jerky.  It would be nice if you instead capped the output at something closer to a frame rate (like 30ms ~= 30fps), which is still a huge delay from the computer's perspective.  If there was a way to get an async callback that happens after the append that would be fine too:  ``` js outputWindow.append('exit', () => { outputWindow.hide(); }); ```
21755|Is this happening all the time or just once so far?
21756|Understood. It is like this because we [compare](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/suggest/browser/completionModel.ts#L124) suggestions against their `label`, `codeSnippet`, and `filterText`. The first and last are clear to me but I don't remember why we filter against the `codeSnippet`...
21757|It happened once or twice so far.
21758|1) Install mingw 2) write c++ app for mingw using gcc. Compile with -g 3) Open folder in vscode. you will need a recent build of the c++ extension.\cpvsbuild\drops\MDDDebugger\CppTools\latest\Extension 4) Start debugging. with a bp set 5) The first bp message will have a lower case c: any second message will have an upper-case driver letter.
21759|We are trying to hide the fact that stuff runs async (and on another process) so low chances for the callback. It's an implementation detail that we should get right ;-)   I like the idea of a shorter timeout but we also saw perf issues with tons of output. Isi will know.
21760|Thanks. I just download and double click the executable - not using sudo. I did try the insider build before with same behavior - this is what I get when using the link you provided: ![untitled](https://cloud.githubusercontent.com/assets/2250424/15330726/f2dd4402-1c12-11e6-9367-bce0df1bda5b.png)
21761|+1
21762|@jcansdale the problem you are seeing is not a VS Code issue but this node bug: https://github.com/nodejs/node/issues/1788 How would you use the 'run without debug' option to work around ths?
21763|Is it worth simplifying the structure further as part of #5570?  ``` .vscode/settings.json .vscode/keybindings.json .vscode/snippets/ .vscode/extensions/ .vscode/userdata/ .vscode/rootuserdata/ ```
21764|@jtlowe there's no easy way to make it obvious like pinned comments on GitHub though. People make new comments and it buries the important stuff. GitHub also does comment folding when there are too many comments which makes finding in page harder.
21765|Upgrading `nan` will likely fix this problem. See https://github.com/Microsoft/vscode/pull/5985#discussion_r61726299
21766|We intentionally designed the peek window to have a different background to the main editor. That way people can easily distinguish it from the editor when they are scrolling through the file.  In earlier designs we investigated what the experience would be like if the background to the peek window wasthe same as the background of the editor. What we found was that when the peek window was scrolled out of view, perhaps when somebody needs to scroll to the bottom of a file to browse some code, it was more difficult to get back to the peek window by quickly scrolling back through the file as it is not so easy to identify the peek window when it has the same background as the rest of the editor.
21767|"`/usr/share/applications/visual-studio-code.desktop` is installed with the deb, I've found it takes unity some time to pick it up sometimes. Can you try restarting the PC or unity (<kbd>alt</kbd>+<kbd>f2</kbd>, type ""unity"", <kbd>enter</kbd>)."
21768|Getting an OS X VM setup so I can do it as @joaomoreno is out.
21769|Duplicate of https://github.com/Microsoft/vscode/issues/48
21770|"Perhaps the admins can put a ""CURRENT STATUS: IN-DEVELOPMENT"" banner on the top of the issue page (under the OP's issue-body)?  This should be a proper feature in github --- something like the alt-text here suggests: https://xkcd.com/979/"
21771|@kadza93 I didn't flame you... but whatever.  > I'm here to express my need and as far as i can see the need of many for tabs, so by supporting what others said and agreeing to it i'm doing something wrong ?  No, you didn't do anything wrong but you didn't write anything useful either, the emoticons/reaction feature exists specifically for this reason.  > By the way thanks for the tip on the search functionality i'm ought to use it more on long threads where i want to express my opinion and if someone already did express similar to mine i will just skip it.  Yeah... you're making a lot of sense, I mean expressing an opinion about something that was confirmed! and you didn't even need to search for it because I replied to the same person you gave thumbs up.  Generally, it's common sense to search for a probable common words in a long post.
21772|@mihailik open source builds lack some of the features of the official builds (extensions, auto updating).
21773|Unity won't update right away if you put it in `/usr/share/...` but it will if it's put in the users home version of that: `$HOME/.local/share/application/`. Is there a reason for not placing it there?
21774|Running `code -n .` twice definitely doesn't open two instances for me, I remember having issues with this in the past as well (did it ever work or am I misunderstanding its purpose?). If `-n` consistently opened a new window it would solve my issue as I could use alias to force it:  ``` bash alias code='code -n' ```  The middle click thing on Windows would be nice to have though.
21775|"Really devs should just open a new issue with FAQ and details taken from the most common points in this thread and close this issue. People subscribed to this issue are getting dozens of emails every day for the same ""thumbs up"" / ""thumbs down"" comments. On May 18, 2016 1:51 AM, ""Kumar Harsh"" notifications@github.com wrote:  > Perhaps the admins can put a ""CURRENT STATUS: IN-DEVELOPMENT"" banner on > the top of the issue page (under the OP's issue-body)? >  > This should be a proper feature in github --- something like the alt-text > here suggests: https://xkcd.com/979/ >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-219798727"
21776|The main reason it's there is because Chrome and Atom put it there. `~/.local/share/application/` all seem to be generated on my PC, are you sure you're meant to mess in that dir?  ``` ❯ ls ~/.local/share/applications/ chrome-apdfllckaahabafndbhieahigkjlhalf-Default.desktop chrome-eempgbpnkjnacmilmobpbhbfpdjdcpgd-Default.desktop chrome-fahmaaghhglfmonjliepjlchgpgfmobi-Default.desktop code_-_alpha.desktop mimeapps.list ```
21777|Gnome says put it in `/usr/share` for all users and `~/.local/share` for the single user.  > Place this file in the /usr/share/applications directory so that it is accessible by everyone, or in ~/.local/share/applications if you only wish to make it accessible to a single user. Which is used should depend on whether your application is installed systemwide or into a user's home directory. GNOME monitors these directories for changes, so simply copying the file to the right location is enough to register it with the desktop.  Source: https://developer.gnome.org/integration-guide/stable/desktop-files.html.en  Seems like it's in the right place and it's actually an issue with gnome not watching correctly?
21778|@anyong yeah I completely agree! there's nothing to discuss and once `tabs` and `open editors` are live they should create two separate issues for feedback about these features.
21779|Duplicate of https://github.com/Microsoft/vscode/issues/313, be sure to :+1: it to help prioritize.
21780|@alexandrudima @jrieken @joaomoreno @Tyriar any ideas?
21781|@eyalsk we're still experimenting with how to handle updates on community created issues. There are a bunch of ways to do this but they're all kind of bad without a pinned comment feature on GitHub. The integrated terminal issue https://github.com/Microsoft/vscode/issues/143#issuecomment-213581854 has been fine so far with a big update in the middle of the thread, I guess it has to do with less need for discussion so it hasn't been buried.
21782|The process only fails to exit when the debugger is attached. What I'm doing doesn't always require the debugger. It is still an issue when I need the debugger.
21783|@lucnoc any interesting things about your environment you're aware of? I notice you're part of the `staff` group, I wouldn't think that would affect it though as I assume you're running under `lucnoc`.  I'm not aware of what the `s` bit is at the start of the file permissions (`srwxr-xr-x`), nor do I know what the file is actually used for. I don't seem to have a `/var/folders/` on Ubuntu.
21784|@Tyriar well, you can reference posts, so can't you just create new posts and make a reference to old ones by closing them? I think that this is how the guys that work on Roslyn do it and then they have a post that summarizes all the features for upcoming releases but nonetheless I agree with you, pinned comments can be extremely useful.
21785|@ashutoshraina, it seems your frustration is not that the background color is different but that it's always blue no matter what theme you are using.  For example, if you were to be using a warmer theme where no blues are used, then the blueish peek window (as it is currently) would stand out too much from the rest of theme.  Is that correct?
21786|+1
21787|I'll uninstall and reinstall it to test.
21788|Again, this is just the latest version downloaded, but here's the result:  ``` bash m3talsmith@darkness-falling:~$ sudo dpkg -i ~/Downloads/vscode-amd64.deb  (Reading database ... 226542 files and directories currently installed.) Preparing to unpack .../Downloads/vscode-amd64.deb ... update-alternatives: warning: alternative /usr/bin/code (part of link group editor) doesn't exist; removing from list of alternatives Unpacking visual-studio-code (1.1.1-1463146452) over (1.1.1-1463146452) ... Setting up visual-studio-code (1.1.1-1463146452) ... Processing triggers for gnome-menus (3.13.3-6ubuntu3) ... Processing triggers for desktop-file-utils (0.22-1ubuntu5) ... Processing triggers for bamfdaemon (0.5.3~bzr0+16.04.20160415-0ubuntu1) ... Rebuilding /usr/share/applications/bamf-2.index... Processing triggers for mime-support (3.59ubuntu1) ...  m3talsmith@darkness-falling:~$ ll /usr/share/applications/ total 728 drwxr-xr-x   2 root root 12288 May 17 12:13 ./ drwxr-xr-x 303 root root 12288 May 17 12:12 ../ -rw-r--r--   1 root root   384 Mar  2 04:40 activity-log-manager.desktop -rw-r--r--   1 root root   291 Apr 13 20:19 apport-gtk.desktop -rw-r--r--   1 root root   125 Dec 16 03:08 apturl.desktop -rw-r--r--   1 root root  7469 May 17 12:13 bamf-2.index -rw-r--r--   1 root root   396 Jan 28 09:59 bluetooth-sendto.desktop -rw-r--r--   1 root root   269 Jan 16 16:43 checkbox-converged.desktop -rw-r--r--   1 root root   500 Apr  4 08:43 cheese.desktop -rw-r--r--   1 root root 12559 Mar 24 14:32 chromium-browser.desktop -rw-r--r--   1 root root   587 May 13 06:38 code.desktop # ...  m3talsmith@darkness-falling:~$ ll ~/.local/share/applications/ total 212 drwx------  2 m3talsmith m3talsmith 4096 May 17 12:04 ./ drwx------ 17 m3talsmith m3talsmith 4096 May 17 12:09 ../ -rw-rw-r--  1 m3talsmith m3talsmith  252 May 15 13:28 mimeapps.list -rw-rw-r--  1 m3talsmith m3talsmith  708 May 16 22:10 mimeinfo.cache # ... ```
21789|@sijad thanks for the PR.   Could you please provide some details about your improvements to 'Open in Terminal' on OS X.  I quickly reviewed the code and noticed that you have removed the AppleScripts that try to reuse the same terminal if it is not already running a command. Without that functionality, every 'Open in Terminal' creates a new Terminal window which quickly clutter the desktop.
21790|@weinand that's true but applescript uses `cd` command and sometime it can be a little annoying using `open` command is the preferred way to do this, I also did look into a few other editors and most of them uses same way to do this. but maybe using apple script is a better way, I really not sure either.
21791|`code.desktop` is the one, forgot it uses the short name.
21792|Right, so it does load it in `/usr/share/applications/` for me, but not `~/.local/share/applications/`
21793|A restart of Unity does bring it into the scope search, but this isn't the expected way of having a scope.
21794|@bgashler1 yes, that is correct. As long as there is way for us to configure what theme the modal should have we should be OK.
21795|Maybe the issue here is that it should be installed via `desktop-file-install` on Unity?   > Once the file validates correctly, install it to the default location (probably /usr/share/applications) using the desktop-file-install program. This step may require superuser privileges.  https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles#Adding_a_.desktop_file_to_the_Unity_Launcher
21796|I just tested it, running `sudo desktop-file-install /usr/share/applications/code.desktop` immediately after install makes it show up in the scope search so to fix this issue I'll add that to the deb post install script.
21797|Thanks for that man! :dancer:
21798|Thanks for reporting, it was a bit of an annoyance for me too :P
21799|@sijad here is a first analysis of your PR. Please correct me if I'm wrong and add anything that is missing.  The PR: - simplifies the implementation by using `open` to launch the Terminal.app instead of using multiple AppleScripts, - makes the terminal application configurable through settings, - adds a test.  The PR removes the following features: - a user installed `iTerm.app` is no longer automatically used but must be configured manually in settings. - 'Open in Terminal' does no longer reuse a non-busy terminal but always opens a new terminal. To get back the previous functionality a user has to install a custom application and configure it in the settings.  **Verdict:** I think that the added configurability outweighs the loss of functionality of this PR.
21800|Dupe of #6411
