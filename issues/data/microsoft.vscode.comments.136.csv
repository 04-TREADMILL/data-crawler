13501|:+1:
13502|Configured Encoding => Configured in Settings
13503|This is the dialog that I see. However, given that I do not have a full German setup (OS is English and my explorer is in English), we should reproduce this on a Machine that is cleanly configured as German.  ![image](https://cloud.githubusercontent.com/assets/172399/13774983/466dd5a2-eaa2-11e5-932b-4ce6356bf2c0.png)
13504|Now reads like this:  ![image](https://cloud.githubusercontent.com/assets/900690/13775038/a7199274-eaa2-11e5-85f1-26e502b51f0c.png)
13505|:+1:  for Don't show again
13506|@bill-mybiz I cloned your repository and played with it but I didn't see any intellisense slowness. Can you provide some steps I can play with?
13507|English Format Code, German: Formatcode  ![image](https://cloud.githubusercontent.com/assets/172399/13775167/5bfab61e-eaa3-11e5-824b-b9b386578c4a.png)
13508|I am not sure if we want to change this because the name shown is the name used for saving and I feel not good to hand this out to translators. It is basically a portion of the URI path we create. I would never want this to be translated to 2 words e.g. Closing as wontfix.
13509|This is because the file was already created with your english locale, the string itself is NLSed: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/actions/openSettings.ts#L138
13510|Should be _Code formatieren_
13511|Good one, please verify for auto save on and off (for off you see the dirty indicator left to the title).
13512|"@edumunoz great! It looks much better now. I will add some comments directly in your commits.  For testing, I would focus on the things in brackets, a smoke test of 'node' debugging with some focus on clicking in the call stack should do the trick. For 'go' and 'mono' focussing on threads makes most sense since changes here refactor how we deal with threads. Other debuggers like powershell and chrome should not use additional threads, and just checking 'node' should cover their case. @daviwil can you please confirm if powershell uses multiple threads?  Since the changes also touch the `debugEditorModelManager` we need to test that all the decorations in the editor did not get broken, these include: - [ ] breakpoints, conditional breakpoints, unverified breakpoints, breakpoints jump around - [ ] top of call stack (yellow), focused call stack (green), exception in call stack (red) - [ ] setting breakpoints in editor work and they get nicely sent to adapter  I guess that you can already build your custom version of code. For testing 'mono' and 'go' you would need to install those extension in your custom built vscode, or just copy over those extensions to your userFolder\.vscode-oss\extensions   Here's a part of our smoke test that covers debugging, so doing something like this while focussing on the call stack would be best for 'node'. If you do not have access to out smoketest-express, taking any node app out there should do the trick. E.g https://github.com/bpasero/standup  #### Debugging JavaScript  ``` • git clone https://monacotools.visualstudio.com/DefaultCollection/Samples/_git/vscode-smoketest-express     •  in VSCode switch to debugging viewlet • Click on the gear to create a default launch.json file:     make sure that VSCode automatically detects ./bin/www as the 'program' attribute • Select Launch in the dropdown at the top of the debug view     verify that the drop-down menu shows entries from launch.json • set a breakpoint in index.js:6 • press F5 to start debugging. Verify:     workbench transforms into ""debug mode"" - glyph margin and status bar turns orange • open browser at http://localhost:3000/      verify the breakpoint in index.js gets hit • Verify step over, step in, continue work • while stopped, verify:     ○ you can hover over values     ○ clicking on a stack frame shows variables associated with that stack frame     ○ clicking on a breakpoint takes you to that breakpoint     ○ you can inspect values of complex variables     ○ you can add a watch expression     ○ You can evaluate a simple expression in the debug console • Verify you can press Restart and the server restarts and you are back in debug mode    • Verify you can stop the debug session and that workbench exits ""debug mode"" ```"
13513|I can confirm that this issue also exists on windows in the newest february 2016 release. This is a usability break for large projects
13514|This issue was moved to Microsoft/TypeScript-TmLanguage#127
13515|Can't reproduce. This seems to be fixed: ![image](https://cloud.githubusercontent.com/assets/6461412/13776273/86a288c8-eaa9-11e5-995c-26c9431d0dcf.png)
13516|I am getting the same behavior, except that my project is JavaScript (nodejs and browser). I have eslint, jshint and beautify plugins loaded as well.   Usually at the beginning of a session, the TypeScript language service fails as well.
13517|@EisenbergEffect this works for me. Tested in 0.10.11:  Error without the `experimentalDecorators` property:  ![image](https://cloud.githubusercontent.com/assets/172399/13776408/3cdbba6a-eaaa-11e5-9c4e-9eeee6030d81.png)  No error when `experimentalDecorators` is true:  ![image](https://cloud.githubusercontent.com/assets/172399/13776422/4c9d5a12-eaaa-11e5-92f4-4ee6ef751c59.png)
13518|The langage agnostic folding would know that 'void fun()' is the start of a folding section, and '}' the end. It could also have a rule for #ifdef/#else/#endif
13519|Moved to OmniSharp/omnisharp-vscode#93
13520|"@jrieken pushed a change that when diffing we always have an empty workspace. however if you can still find a case where ""null"" opens, please reopen. If am quite sure this is a case where /dev/null is passed as path to VS Code. This might have happened with one of the other ways of using VS Code as tool (e.g. git rebase, git config or git add -p)."
13521|ping @chrisdias this item was accidently not assigned to march, so pinging you so you are aware that we have to test this
13522|"@zersiax Thank you for trying this out.  Moving focus to another element only to move it back in the same JS callstack has no effect. I could try to move the focus to another element and then move it back with a `setTimeout` of 0, but that might lead to the case that a keypress is missed (e.g. if a keypress is queued in the event loop). This might lead to missing typed characters.  Nice catch with the ""undefined"" for HTML suggestions, that was indeed the ""typeLabel"", which is undefined for HTML suggestions.  I have also added additional keybindings out of the box for navigating the suggestion list: Alt+DownArrow, Alt+UpArrow, Alt+PageDown, Alt+PageUp. These function the same as DownArrow, UpArrow, PageDown and PageUp when the suggest widget is opened, but have the advantage that they don't confused NVDA into reading the current line again."
13523|@jrieken @aeschli do we plan to do more testing here? If not please close the issue once done. If more help is needed I can assign someone from redmon
13524|Check this out:  ![screen shot 2016-03-15 at 8 07 50 am](https://cloud.githubusercontent.com/assets/131485/13777242/42eaea86-ea85-11e5-99a9-b2a6d7ed9345.png)  One thing that is different from your example above is my folder structure. I have something like this:  ![screen shot 2016-03-15 at 8 15 16 am](https://cloud.githubusercontent.com/assets/131485/13777373/294bb85c-ea86-11e5-9caf-897717a0fc9a.png)
13525|There's already a extension for that: https://github.com/wmaurer/vscode-join-lines  But I agree that it should be in the core.
13526|Well this weekend I was feeling under the weather and we didn't get as far as we wanted to. We did get to the point of compiling using excludes and not the ts-glob and that didn't seem to make any difference.  @dbaeumer Thank you for cloning and checking! [Here are some steps](https://github.com/Microsoft/vscode/issues/3958#issue-139891900) that you can try. If you get the trycatch snippet to pop up immediately, then you are not reproducing the lag.  I am thinking this morning that it might have something to do with our current version of node. We had to keep it downgraded because of previous conflicts with Ionic/Cordova as well as others, but it's possible that that those conflicts are now resolved. I'm going to try upgrading to some 4.+ version to see if that makes a difference (fingers crossed). If it doesn't, I'm going to double-check like @xuyungit and see if it's strictly the TS version, as I get a similar build lag (not intellisense) when I pointed my 0.10.9 version to TS 1.8+.
13527|nslookup command doesn't work at all also   ``` C:\Users\myuser>nslookup google.com Server:  internalhost.company.com Address:  10.169.96.251  *** internalhost.company.com can't find google.com: Server failed ```  Other programs after I set them to use a proxy they work also solving dns queries through proxies. Can this be a issue with vscode ?
13528|Well, I've upgraded to Node 4.2.4 and that has taken care of my build time problem, reducing the time from consistently ~110 seconds to ~20 seconds. So there must have been an issue with Typescript 1.8+ and Node 0.12.7 (previously used version) in my environment. There continues, however, to be lag in VS code. I'm still not 100% but I wanted to give this status update and respond. Thanks for the continued help!
13529|I also see that you have both a jsconfig.json and a tsconfig.json. Is it a mixed .js and .ts project? If yes then you can set allowJS to true in the tsconfig.json and then you can delete the jsconfig.json. If it is a .js project only then I would delete the tsconfig.json.
13530|I don't see leakage with a smallish file (80KB) which shows in the editor and updates every 100ms. My guess is that during the event we open the file while we still have its old contents in memory - so effectively doubling the size and thereby killing it  ``` var uuid = require('node-uuid'); var fs = require('fs'); var path = require('path');  console.log('starting');  setInterval(() => {     try {         fs.appendFileSync(path.join(__dirname, 'large.txt'), uuid.v4() + '\n');     } catch (e) {         console.error(e);     }  }, 100);  ```
13531|Is your workspace very large and has lots of .js files?
13532|"@dbaeumer but the problem is that I can't get intellisense for files only listed in ""files"" section. I understand that files listed in ""files"" section only accessible for project where tsconfig.json placed in root of the project structure.  For example, if i add reference `/// <reference path=""../typings/meteor/meteor.d.ts"" />` in my collection.ts, intellisense will work fine when i try to get access for Meteor, but if i try to add ""typings/meteor/meteor.d.ts"" to ""files"" section in tsconfig.json and remove reference from collection.ts, than intellisense stop working in collection.ts"
13533|There is a working version using aria alerts. For the proper implementation using aria concepts, let's track that work in #3787
13534|It is in a fork of VS Code main, not in an extension (working with @jsloyer on this).
13535|I totally agree with the OP. Please, support method/function highlight like Atom/ST does. Another screenshot (source https://twitter.com/markgdyr/status/709717800860913664):  ![VS Code](http://i.imgur.com/gCD3ttF.png)  > To be fair, Atom's color theme is extremely colorful, it almost looks childish to me. So I would not want Code's theme to look completely like Atom's.  I think this should be a theme author decision, its not VS Code responsibility.
13536|Profiling what happens reveals a few (low hanging) performance issues.  - StopWatch#start/stop is slow (it uses the performance.now which takes too long for what it does) - BaseTextEditorModel#update first runs `Model#getValue` before `Model#setValue` (to check for changes) which is a _big_ hit on perf (20%). Also that extra string _will put pressure on the heap_.
13537|![screen shot 2016-03-15 at 14 22 47](https://cloud.githubusercontent.com/assets/1794099/13779130/dbefa85a-eab9-11e5-9308-8cfdc351d187.png) [large_file_update.cpuprofile.zip](https://github.com/Microsoft/vscode/files/173981/large_file_update.cpuprofile.zip)
13538|@bpasero/@alexandrudima I suggest you guys find a better way of comparing a string with an existing model (without constructing the whole model string)
13539|Formatting CSS doesn't seem to properly work anymore.  You use to be able to paste in a block of css in one line, hit the shift + alt +f and it would correctly format the code.  This no longer works.  For example: `body{background-color:#FFF;}#test{position:absolute;}`  Would turn into:  ``` body{     background-color:#FFF; } #test{     position:absolute; } ```
13540|It was a domanin anti-spyware policy problem, the administrator fixed it. Thank you for all your suport!
13541|If I remove the tsconfig, the problem goes away :)  It's not a mixed project per se. I was working on a sample app for an Aurelia workshop I'm going to be running. I included the tsconfig because I suspect some students will want to use TS instead of Babel. So, it was there out of a convenience for them. However, I should probably provide them with a complete TS setup separate from this one. Having both clearly causes the issue and probably doesn't make sense.  Thanks!
13542|Very happy that you solved it! Thanks for letting us know what was wrong. :+1:
13543|@joaomoreno pushed some colors, please verify for Dark and Light theme. I did not add explicit color for the message, only for the verb and git sha.
13544|"Actually not! I just added one new js file via the ""New File"" button...and it was empty.. then the warning appeared. After adding some text it still pops up. So I restarted the whole machine.. Than it was gone."
13545|Not sure, since Code appears to try to reach your proxy `10.0.1.1:3128` but fails in doing so. Something is definitely up.  Can you try the Atom editor, which also has a proxy setting?
13546|Duplicate of #4157
13547|Upstream fix merged into our code.
13548|"In the [docs ](https://code.visualstudio.com/docs/editor/codebasics#_saveauto-save)there is information about `files.autoSave: ""onFocusChange""`:  > onFocusChange to save files when focus moves out of the editor of the dirty file.  Is this option working?"
13549|"@joaomoreno to verify please look at ""git commit"" as well as ""git add -p"" because the styles are used in both cases for added, changed and removed. Applies to light and dark theme as well as high contrast."
13550|Took care of it https://github.com/Microsoft/vscode/commit/4bb904c66a50471bcdd93f6d2eeda7143b4193ca
13551|Yes
13552|@isidorn this means the watcher is running out of handles, does the advise in http://code.visualstudio.com/Docs/supporting/faq#_linux-faq help?
13553|@bpasero that does not help, as my linux has that configured since forever
13554|@isidorn I think we are hitting the limits of what the OS can do...
13555|Might have been in 0.10.8 that we called process.send with unstringified contents, but now the contents are always string arrays. So this stack trace cannot happen on master.
13556|@isidorn do you get the dialog prompting you to save dirty files before the exception or after?
13557|@seanmcbreen @SofianHn  - `extensionGallery:update` - `extensionGallery:install`
13558|duplicate
13559|You must not have too many files cos we aren't on the latest TS server version.
13560|related to #4185
13561|Got it, but why does this work on OS X then?
13562|Nothing really changed recently here, the change _if it happened_ was already some time ago.
13563|different nodejs versions?
13564|duplicate
13565|@jayrosen1576 It's a separate one, I created it for you: #4255
13566|I get the dialog and I say 'do not save' - can not always repro, can you please try it out a couple of times
13567|might be that...
13568|Dups #4120
13569|I dont even know what that handler is as it seems in the extension host, moving to @jrieken / @alexandrudima
13570|Changed by generating files where the territory part is in uppercase which matches what gets returned from the OS.
13571|@v-pavanp are you running in some VM maybe?
13572|"Reproduced the issue using the same repo.  Adding this tsconfig.json  ``` json {     ""compilerOptions"": {         ""module"": ""amd""     } } ```  Fixes the module not found errors. Therefore this doesn't look like a VS Code issue, but a consequence of switching from TS 1.7.5 to TS 1.8.2."
13573|"@bpasero that strange, maybe I'm misunderstanding this option but when I try following steps: 1. Open new file 2. Write some text 3. Try closing vscode  file is not saved as dirty and vscode asks me for saving the file.   My settings.json file looks like below: `{     ""files.autoSave"": ""onFocusChange"" }`  Isn't this flag enables auto-saving as in Notepad++ described in first post in this issue?"
13574|I started using vscode because of the extension mentioned by OP, upon finding that extension being very poor with plenty of bugs, I had to switch back to vim.
13575|Also occurs with for loop, e.g.:  ![image](https://cloud.githubusercontent.com/assets/6917905/13782369/7b03e702-eacf-11e5-833b-758a20aa591b.png)
13576|@joaomoreno fixed but I think the scenario is also not very typical because you are not adding any file path to wait for.
13577|@pascon works for me, please attach a video of what you try and see.
13578|@isidorn sorry, i moved the issue and referenced this test item.  also, i checked it off, i'm done testing.
13579|@SofianHn I cannot reproduce on my windows 10 but this looks like an issue with the script we use for launching if I see the errors, moving to @joaomoreno   I will open a separate issue that -w does not work on Windows when already running.
13580|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
13581|Great!
13582|that would be nice
13583|@jrieken just a reminder to check off the items which you tested so @SofianHn can do the rest
13584|@SofianHn Which version of git do you have in Windows? If under 2.0, update it and try again. If it works, just close this.
13585|Well, let me keep it here for me to discuss with Mr. Moreno.
13586|:+1:  While the algorithm to find large folders is nice. A user that configures the excludes knows where the generated js resources are. Therefore do not add the guessed folders to the message.
13587|Dup of #3775
13588|Is the workspace on a sharepoint/webdav mounted volume as in #3860?
13589|The same happens to me. VS Code 0.10.11 on OSX El Capitan.
13590|@bpasero I can not repro this ben with latest vscode running out of source. Can you give me precise steps if you can repro
13591|@aeschli I was more or so wondering how to pull in a npm module and then call it from typescript.
13592|Awesome! Thanks for the fix. Sorry for the duplicate issue.
13593|Actually I do not like this, since potentially I would need to add two configured tab size, one set in the model and one from the configuration. Will only add this if a user actually complains.
13594|"@dbaeumer  - TypeScript build  i would keep the tsconfig one because that is probably the most useful and common with TypeScript (having a tsconfig.json) and i would update the docs to deeply discuss the various scenarios for typescript compile.    also, i would change showOutput to ""always"" because it helps people understand what is going on.  When they become familiar with the system they can change showOutput to ""never"" or ""silent"". - Jake  My point is that the usage data of Jake is so low compared to gulp and grunt, it isn't worth having in this list.  In Feb we had about 150 instances of jake compared to 33k for gulp and 15k for grunt."
13595|@alexandrudima I feel the rule engine is worth it, fixing the conflict with <kbd>alt</kbd>+Click is really a short sighed solution. As I'm sure you're aware linux can be quite varied (read: fragmented) sometimes. Fixing the conflict will solve issues for people running Gnome, but it may end up conflicting with KDE, or with XFCE, or with whatever other variant someone has decided to run. I think it's best to go the rule engine route, even if it takes a little longer.  Also, there's no telling what Apple or even Microsoft may do with mouse/touch gestures in the future, it's an evolving UX space, I think it would be better than playing cat and mouse with hardcoded gesture bindings.
13596|+1  Extremely necessary.
13597|Thank you for adding the option!
13598|Your Kung-Fu is through.
13599|@bpasero I think this is about untitled files
13600|`yield` is still not highlighted with version f291f4ad600767626b24a4b15816b04bee9a3049. Is that intended?
