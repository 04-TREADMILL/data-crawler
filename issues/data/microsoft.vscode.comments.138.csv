13701|I pinged in the upstream, still waiting
13702|related to #4007
13703|@isidorn done with testing, biggest thing found was #4254, same problem on OSX.
13704|Hi @joaomoreno! You're right, #4169 helped me to solve the problem! Thanks for your help!
13705|verified best i could... i did alot of markdown previewing and scrolling... no issues.
13706|react-native extension doesn't load in alpha, see https://github.com/Microsoft/vscode-react-native/issues/155
13707|@alexandrudima it's my mistake of mixing soft-tabs and hard-tabs so please ignore it :smile: . Looking forward to your new feature about Tab/Spacing.
13708|@isidorn, thanks for your thorough review. In the end I went for exposing a non-promise based `callstack` in the `Thread` model. That way the changes to other parts of the codebase are limited to renaming the `callstack` property.  I left a couple of comments in 2 places to get your opinion.  It would be great if you could give us the heads up today that the code looks good (bar _very small_ changes), so we can spend more time testing the partner debug adapters thoroughly.  Also, let me know if you'd like me to squash the commits after you review them.
13709|I'm running into this problem too. Ubuntu 15.10 (inside virtualbox on win10 pro) VS Code -v 0.10.10  I do _not_ get presented with a credential dialog. I am able to successfully push from command line. doing `git config push.default matching`, pushing from commandline and then trying again from vsCode made no difference.
13710|"@NickHeiner are you sure you ran the ""code"" from /usr/local/bin/code? How did you install Code?"
13711|As designed, the file is being created and saved once.
13712|@SofianHn is this always the same 10 files? Once a file is under working files (e.g. you edit a file), we never dispose it until you clean working files.
13713|No, not the same 10 files which explains it. I think this might be really dangerous. I never use the working files, on a long running multi day session this could lead to a crash. Does the working files has a limit? 10 or 15 per say?
13714|200 is the limit.
13715|This issue was moved to OmniSharp/omnisharp-vscode#96
13716|@SofianHn the reason is, that we want the users change it also on their own and that's impossible if we overwrite the file each time they open it.
13717|"And if you are using xampp, then follow the snippet shared by @boloindia  above and just change the path too: ""D:/xampp/php/php.exe""  This will work as I have done it the same way."
13718|Yes you have. It's called JSON and uses the language server protocol. Moving to @dbaeumer cos this seems to come from `/Users/jrieken/Code/vscode/extensions/json/server/node_modules/vscode-languageserver/lib/protocol.js`
13719|@chrisdias You see a crash because there are too many files. Unless we have a proper tsserver you must be careful to find the right amount of files - more than 500 less than it takes to crash the server
13720|The extension can export API to other extensions
13721|removed in the `...` with #4248
13722|Problem with that is that an accidental ESC will dismiss the message without you knowing what happened. That's my I am in favour of a trigger that you cannot dismiss easily.
13723|@egamma I need to know the link?
13724|> I disagree, folks won't know to exclude things like temp folders which become giant because of a transient build step. node_modules et al are the obvious but we have been hurt more than once with those unusual folders  Good point but then let's use heuristics and not show just all folders including many files. Only mention the suspects 'temp' and 'tmp' if they are big.
13725|That's not the one I was looking for, anyways when verfying this please try the following 4 scenarios: - watching task that does not produce errors - watching task - errors - non watching task - no errors - non watching task - errors
13726|> I don't think this is a good memory leak test setup. The snippet will endlessly emit output, which gets rendered in a tree. Obviously, the memory will grow.  I disagree because the output should be protected against that. From one point on, memory should not grow anymore but usage should become constant (hitting a max output length).
13727|I'd approach it the other way around and not show folders like `src` or `test` and if that results to a case in which I have no folder left to propose exclusion for a generic message will show.   And on the other hand tsserver will generate a similar message which blames the last folder (https://github.com/Microsoft/TypeScript/blob/release-1.8/src/compiler/program.ts#L1117)
13728|Excluding well known source folders like `src` and `test` works for me.
13729|Ok, I'll review your newest changes today - and I will also comment on your older questions even though we decided to take the non-promise based `callStack` in the `Thread` model. Which I think is a good decision for now to make the spread of changes minimal.  Squashing the commits would be great!  Edit: I went through the commits - and it looks really good to me! I left some comments in the code directly.  Before testing make sure to merge with latest from master so we test the closest possible version to the one when we merge this PR in.  On how to setup Go, Node, Mono in your built VSCode I quickly explained in my comment above, let me know if you have questions regarding this.
13730|"Alexandru, thank you. As you know, style isn't just esthetics; it can enhance or destroy usability. If I'm momentarily confused about the role of some piece of an overly deep hierarchy, the speed and likelihood of recognition of my error can depend on the salience of the bracket matching highlight: how much it jumps out at me. Many such features can vary from annoyingly distracting to very helpful to barely usable to utterly useless depending on visibility, and visibility can depend on highly variable factors (ex: sun's glare at different times of day).  An easy way to make style adjustments is a major advantage for an editor, and I'm glad you are looking for a ""sane"" way to do it. I like the fact that Atom lets me specify a style for almost anything in its ""styles.cson"" file, but I don't like having to puzzle through how to describe ""matching bracket"" in terms of their CSS selectors involving multiple classes describing the text layer, selection layer, background layer, DOM vs shadow DOM, etc. I would MUCH rather it just offered me ""Matching bracket style: [options]"" and let me just specify the options (border/underline, thickness, color).  I'd love to see a gradual rollout of a layered approach to styling, offering ability to:  1) Select theme; easily switch themes whenever you like (already does this) 2) Easy item-by-item overriding of the style of each browser widget and syntactic category in the current theme (comments, strings, keywords, etc.); you are offered the categories, so you don't have to figure out how to specify them yourself; you can take the combination of original theme and your custom overrides and ""Save as..."" a new theme, which you can then switch to at any time using mechanism 1). 3) Write a little code (in something common like JavaScript, which also offers built-in regex) to add your own custom, named ""syntactic categories"" (using the term loosely), whose style you can then specify with the mechanism in 2). These would just be code snippets stored in a prefs file that VS Code would use as definitions of additional syntactic categories available for styling. For example, you define an ""AlertWords"" category that's just a customized list of strings (""TODO"", ""FIXME"", ""CAUTION"", etc.), or ""DateTime"" that recognizes your style of timestamp, or an ""EmbeddedJS"" that can be used to give JS inside an HTML doc a different background color. This isn't a full syntax parser, just an override mechanism for adding a few features to an existing parser (or all parsers). Users could just share these code snippets in a discussion forum (""just put these lines in your syntax prefs to highlight timestamps..."") instead of having to write and install ""extensions""."
13731|@bpasero this is exactly as @weeblr wrote. In vscode UserVoice there are many requests for auto-saving untitled files as it's available in another editors (Notepad++, SublimeText, Atom, etc...) - _without asking for a filename_, for example: - [Auto save temporary files](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7756146-auto-save-temporary-files)  Is this feature in consideration to implement in next releases?
13732|But you should only start looking at memory leaks _after_ reaching that max output length. Not having a limit isn't really a leak...  If there is no such output limit, then @isidorn should definitely implement it.
13733|#4024 is a test plan item which mentions this.
13734|Alright, closing as a duplicate of #4169
13735|Any idea/hint how to use column selection in OSX ? :D cmd+alt+arrows(u/d) works fine, but I cant figure how to use mouse to select block
13736|[It is](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/extensions/electron-browser/extensionsWidgets.ts#L95), we just didn't send it to the localization team.
13737|I am using windows platform and Homestead ; using these command work for me :  Full steps :  npm install --no-bin-links  gulp  npm rebuild node-sass . -- its fix the issue..  gulp  Now gulp --- working.
13738|Format code does not work on .scss files.
13739|Makes sense, I can definetely add an output limit to the repl - we already have one for the output panel. I will also handle the listeners in a better way - thanks for finding that
13740|This is not available yet, next release. (see above)
13741|excluding `src`, `test`, and `tests` now
13742|Always reload this page before checking off so no checkboxes are lost (due to bad git hub conflict management)
13743|@chrisdias I've created this feature request for you: https://github.com/Microsoft/vscode/issues/4299
13744|@jsloyer You are doing everything OK from a vscode point of view. However, I have tried your steps and ran into the same problem.  The problem is that the .d.ts file does not match the xregexp node module. When I installed xregexp, I got version 3.1.0. The type definitions you add in xregexp.d.ts are for the 2.0.0. I think the difference from 2.0 to 3.0 for xregexp is in how they export their functionality, which is a breaking change, thus the major version increment.  I was able to get your code to run by doing the following: - Use a .d.ts for version 3 for xregexp (replace xregexp.d.ts content with the one at https://github.com/DefinitelyTyped/DefinitelyTyped/blob/ceeac0ccf8ced1960b6b12c51557a621e45a7c40/xregexp/xregexp.d.ts) - Change step 5 to consume xregexp as it wants to be consumed in version 3.0:  ``` typescript         var exp = xregexp(/abc/);         var match = exp.exec('abcdefgh');         console.log(match); ```  ![image](https://cloud.githubusercontent.com/assets/5047891/13809243/0fced30c-eb6a-11e5-9313-27d56340ea4f.png)
13745|It's ok we can keep this one for the clipping
13746|Accidental dismiss is a problem, agreed. - closing
13747|http://go.microsoft.com/fwlink/?LinkId=759670.
13748|:+1:
13749|@vsccarl please test with PSEUDO, those strings are not localized yet.
13750|So you say this folder does not show up in our native file picker?
13751|"<img width=""319"" alt=""screen shot 2016-03-16 at 11 40 23"" src=""https://cloud.githubusercontent.com/assets/1794099/13809618/e4271384-eb6b-11e5-9abc-9e0e5fef4158.png"">"
13752|@paultwright Thank you for reporting, this is already fixed in 0.10.10, so please update to the latest release.
13753|@jrieken sorry I've decided to create a fresh forward link and to not to reuse an existing. I've updated the commend above with the link.
13754|I have it under nls localize [here](https://github.com/edumunoz/vscode/blob/master/src/vs/editor/contrib/indentation/common/indentation.ts#L173) I guess we do not have newer translations - moving to @dbaeumer
13755|I can confirm it doesn't work on TypeScript due to the context key `suggestionSupportsAcceptOnKey` not being set.
13756|I can start
13757|Forwared to me once you are done
13758|"@laurijsd The attached log shows that this is an error in your launch config. You are passing the string ""-Verbose"" where an array of strings is expected:  ![2016-03-16 12-33-17](https://cloud.githubusercontent.com/assets/1898161/13811046/74bbdc0c-eb73-11e5-9e43-3577aed80d5d.png)  In VS Code this error is actually flagged as a problem:  ![2016-03-16 12-37-18](https://cloud.githubusercontent.com/assets/1898161/13811114/dd96b59e-eb73-11e5-9ecd-69b9a7ade214.png)  This error occurs in VS Code 0.10.10 too, so this is not a regression:  ![2016-03-16 12-41-04](https://cloud.githubusercontent.com/assets/1898161/13811201/85e83c9a-eb74-11e5-9c7c-64c45aba5569.png)  I suggest to file a bug against the PowerShell extension because they should protect against these JSON parsing errors."
13759|Moving to TS. We pass the right option to the tsserver.
13760|This issue was moved to Microsoft/TypeScript#7540
13761|There is two problems: 1. this commit introduced a regression in that it turns around the boolean condition (missing `!`) https://github.com/Microsoft/vscode/commit/2461331b4fab7f1c00c213cd3980128541da1bf9 2. we ended up with having the command two times when working on the acceptOnEnter config setting
13762|We haven't received translation yet for that string. Closing.
13763|Agree. I assume you built the tsserver.
13764|Agree. We already discussed that a while ago but I haven't found time to implement yet.
13765|The protocol calls a notification handler which causes an exception. The protocol on the lowest level catches the excpetion sends it back to the client which prints it to the console. There is nothing I can do better. The root cause of the exception must be fixed.  The root cause lies in the languge server. I receive an update event for a document that is already closed. The interesting question is why? But I will protect my code against it.
13766|This issue was moved to Microsoft/vscode-languageserver-node#28
13767|Published 1.4.1 of the language server.
13768|@isidorn Please ensure that propert localized. If so feel free to close.
13769|@aeschli I'm in version `code@0.10.11 #f291f4ad600767626b24a4b15816b04bee9a3049`  And I'm using `typescript@1.9.0-dev.20160313`.  It seem to only affect tsx files.  ``` ts 'use strict';  import { Topics } from './Topics'; import { Topic } from './Topic'; import {     Element,     ContentComponent,     DOMElement,     PageInfo,     Collection,     autobind,     HTTPResponse,     ErrorResponse,     TimedCallback } from '../Library/Index'; import {     SubmitButton,     FormMessage,     ImageCrop,     ConfirmDialog,     ToogleButton } from '../Components/Index';  interface TopicsProps {     name: string; }  function getAddButton(id: string) {     return (         <div ref='addButton' id={id} class='AddButton'>             <div class='AddButtonVertical'/>             <div class='AddButtonHorizontal'/>         </div>     ); }  interface FileReadResult extends File {     result: string; }  interface FileEventTarget extends EventTarget {     files: FileReadResult[]; }  interface FileChangeEvent extends Event {     target: FileEventTarget; }  interface FileReadEventTarget extends EventTarget {     result: string; }  interface FileReadOnloadEvent extends Event {     target: FileReadEventTarget; } ```
13770|It needs to get attention and white just doesn't work.
13771|@joaomoreno @alexandrudima Despite the fixes above this still happens. The reason seems to be that `suggestWidget#onListSelection` uses a timeout. That gives the triggerOnCharacter command a chance to run (and clear the previous suggest model) such that accept doesn't work
13772|the timeout and like breakage happened in https://github.com/Microsoft/vscode/commit/6b495479328cecb3c1d2873b20c58ffb9d49f619
13773|"I confirm what @xuyungit has said: 0.10.10 (and 0.10.11) works with TS 1.7.5 but not later. This includes both 1.8+ and `typescript@1.9.0-dev.20160128` build listed at [January's Release Notes](https://code.visualstudio.com/updates/vJanuary) under Enabling Salsa. So these do not work(EDIT: do not work = lagged). Each time I try to use Intellisense, there is significant lag. The  easiest reproduction steps as I mentioned earlier involve the `trycatch` snippet. If you type out `trycatch` and hit ctrl+spacebar, you should get the ""Try-Catch Statement"" Intellisense under a second. Instead, it takes usually about ~10 seconds.  After further testing this morning, I have found that if I add my typings folder to the exclude statement in tsconfig that it works as expected. This might explain why @dbaeumer couldn't reproduce it if the typings weren't rebuilt.  EDIT: Scratch that part about not reproducing it. We are currently including the typings folder in the repo, so it would not have to be rebuilt."
13774|no worries. updated
13775|correct
13776|@codyrigney92 Jade preview compatibility has been added and v0.0.3 will be released later this evening :smile:
13777|duplicate of #3804   @marcelaraujo the next update will support to disable the built-in JS validation and the recommendation is to use eslint for validation.
13778|This is an issue with the go extension - I have moved this bug there https://github.com/Microsoft/vscode-go/issues/248
13779|Thanks.
13780|@Lonefy have you installed an extension for JS formatting. If so, please report the bug there. If not I think the problem is the move to Salsa (a different JS engine we use). With 0.10.12 there are settings to control the Salsa based formatter as well.
13781|I added the API to vs/base/common/platform  However I am not convinced that we should pass in the ui language we chose to this call. I for example have my system configured to use English with German date formatting. If we would pass in the locale/language I would see an English date format in that case.  @egamma I am closing this and opt to not tweak this by passing in the locale/language.
13782|Cannot reproduce   ![image](https://cloud.githubusercontent.com/assets/172399/13813626/d81eaf4a-eb82-11e5-9df5-b4636f297f62.png)  Can you try whether 'Reload JavaScript' help?
13783|Agree.
13784|I think we should tackle all these non-white colors in the status bar in the future. There must be something which looks nice and draws attention as well. Assigning to backlog and @bgashler1
13785|Thanks.
13786|If the same setup works on a local folder, then this looks like the node issue described here https://github.com/Microsoft/vscode/issues/3860#issuecomment-194963793
13787|I picked what Chris proposed for the message
13788|@bpasero in this particular case I do not get called from the workbench. It would be great if the workbench could notify me via the broadcast mechanism the [same way](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L142) it does when the user reloads the other window.  Could we add something like this?
13789|maybe related to #4269
13790|should be good with Salsa that we ship since Feb
13791|We now ship Salsa as default and things should be good now
13792|related #4201
13793|We now ship with Salsa enabled by default.
13794|"Auto detection detects `build` or `test` tasks. The grunt file above only registers a 'default` task.  Verified that the grungtfile below, detects the `test` task  ``` json {     // See http://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format     ""version"": ""0.1.0"",     ""command"": ""grunt"",     ""isShellCommand"": true,     ""tasks"": [         {             ""taskName"": ""test"",             ""args"": [],             ""isTestCommand"": true         }     ] } ```  gruntfile.js  ``` js module.exports = function(grunt) {    grunt.initConfig({     pkg: grunt.file.readJSON('package.json'),     concat: {       options: {         separator: ';'       },       dist: {         src: ['src/**/*.js'],         dest: 'dist/<%= pkg.name %>.js'       }     },     uglify: {       options: {         banner: '/*! <%= pkg.name %> <%= grunt.template.today(""dd-mm-yyyy"") %> */\n'       },       dist: {         files: {           'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']         }       }     },     qunit: {       files: ['test/**/*.html']     },     jshint: {       files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],       options: {         // options here to override JSHint defaults         globals: {           jQuery: true,           console: true,           module: true,           document: true         }       }     },     watch: {       files: ['<%= jshint.files %>'],       tasks: ['jshint', 'qunit']     }   });    grunt.loadNpmTasks('grunt-contrib-uglify');   grunt.loadNpmTasks('grunt-contrib-jshint');   grunt.loadNpmTasks('grunt-contrib-qunit');   grunt.loadNpmTasks('grunt-contrib-watch');   grunt.loadNpmTasks('grunt-contrib-concat');    grunt.registerTask('test', ['jshint', 'qunit']);    grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);  }; ```"
13795|closing by my previous comment
13796|On the provider we can add another (optional) function like `provideLabel(uri:Uri):string`
13797|We now use Salsa for this
13798|Filed at Microsoft/TypeScript-TmLanguage#121
13799|As we now ship with project Salsa this should work
13800|As we now ship with project Salsa this should work
