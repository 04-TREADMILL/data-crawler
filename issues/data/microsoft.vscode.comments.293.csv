29201|Well today the input box is neither aligned in the center nor is it aligned to anything in the title area :)
29202|I have a fix in a09ee36
29203|I don't understand. What would a theme extension show? Or the Spotify status bar extension? Or an extension that contributes many languages?
29204|Wow!
29205|@jrieken Is this filter label vs sort label vs visible label?
29206|The find widget is simply using JavaScript's regular expressions as specified in ECMAScript 5 (the runtime of VS Code), and it unfortunately does not support look behinds.
29207|:heart: TY!
29208|Didn't happen in 6 months => closing
29209|This works for me now.
29210|Of course it is.  ![image](https://cloud.githubusercontent.com/assets/22350/16565882/ac8801a8-4210-11e6-9ed5-5004472f5b4d.png)
29211|@alexandrudima I looked into the custom hover and was not convinced yet. however, maybe we could combine a custom hover for the path with an area to get the editor actions back? I am suffering a lot from the fact that those are hidden. Will comment on https://github.com/Microsoft/vscode/issues/7666
29212|@jrieken Maybe a new `onDidChangeVisibleTextEditors` ?
29213|We also have an issue that the path on a tab is only accessible from the native hover (which sometimes appears late). So I wonder if maybe we could combine both issues into one and show the path of the file along with the editor actions somewhere when you hover over the tab. Or, if we decide to introduce an editor toolbar, maybe it could be in there?  I think for this issue we should just sit together and brainstorm UX ideas.
29214|Not reported in more than 6 months => closing
29215|You might think that, for instance, the Explorer title area is aligned to the center:  ![image](https://cloud.githubusercontent.com/assets/22350/16565919/ec62aa58-4210-11e6-87e8-47c6218427b9.png)  But it's not, since the title has additional left padding:  ![image](https://cloud.githubusercontent.com/assets/22350/16565927/f91fd892-4210-11e6-8b72-ba83f97b89db.png)  Which forces its content to have it too:  ![image](https://cloud.githubusercontent.com/assets/22350/16565937/07647598-4211-11e6-8e0e-8d5824f74bb1.png)  The explorer too, has more left padding than right. This has been constant throughout our whole design.
29216|Duplicate of #356
29217|That overflow icon does not really need all the margin/padding to the right I guess.
29218|I personally think it looks good as it is. Center alignment is not important. Left and right alignment of all items is, though. But the only way to fix this and have _center_ alignment would be to add margin to the right to **everything**, including the title actions.  The icon needs the padding because it's a click area. Make it smaller and it will be less _clickable_ than all the other actions.
29219|Even though #871 came up later, let's track this feature request in #871 (has more upvotes)
29220|I don't think so but there is also too little information to know. As always it all depends on the language that is used.
29221|Add a setting - there is people that don't like snippets, there is people that want snippets more than anything.
29222|Also see #2343
29223|I get it on plain text:  ![image](https://cloud.githubusercontent.com/assets/22350/16566244/1a42e288-4213-11e6-99e9-04a41f527f61.png)
29224|This was an explicit UX decision because we think a user might be confused why closing an editor does not ask for confirmation. It might not be so obvious that the dirty editor is opened in more than one group because it could be well hidden in one group among many other tabs.  @stevencl @bgashler1 fyi
29225|"@joaomoreno I wrote this specifically for languages, I'm not sure whether this can be extended farther for other types of extensions and whether it makes sense but I really think that when someone installs an extension that support some language the versions of the language that the extension supports needs to be transparent to the user.  Authors that write language extensions don't necessarily write details about the version of the language that they used to test the extension with, I think that having API for this will improve this scenario and prevent unnecessary confusion to end-users when it comes down to questions like ""What version of the language should I install?"", ""What version of the language this extension supports?"", ""Can I use this extension with the version of the language I already installed?""   The API can probably iterated to fit more scenarios, i didn't take into account the fact that a single extension can support multiple languages."
29226|@aeschli Pls comment
29227|Ever since textual completions use the [`strict prefix matcher`](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/modes/supports/suggestSupport.ts#L44) to not be too spamy. Maybe it's time to revisit that.
29228|I wonder if it's that simple. Often extension don't really contain the language implementation but just make sure some version of a tool is installed - like `go` and it's tool chain
29229|Any progress with it? :)
29230|@jrieken Yeah, you're right, it's something that needs to be checked but nonetheless, say you installed language X and you tested it with version Y, it can be helpful to note the version even if it's just a hardcoded value in the API.  If there was a way to force authors to write the supported versions in the extension page then there wasn't much need for an API for this so maybe another idea is to let them write the supported versions for the language or multiple ones when they are uploading the extension to the gallery or even better note this somewhere in the package of the extension.
29231|It is for files within a workspace. It also happens with both files and directories. within the workspace. It happens with directories when I've created a new directory in a commit, and am rebasing the branch containing that directory.
29232|Not yet, kind of tied up with FY16 still. Will give it a go next weekend and see if it works on my box and a fresh install (never underestimate the power of upgrades where it regards breaking things).  > On 04 Jul 2016, at 14:45 , João Moreno notifications@github.com wrote: >  > @rcarmo https://github.com/rcarmo Did you try this? >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub https://github.com/Microsoft/vscode/issues/7998#issuecomment-230294069, or mute the thread https://github.com/notifications/unsubscribe/AAX96yMsQpPeoo5orUAdryk1tJMc5ipXks5qSQ5ggaJpZM4I7sqV.
29233|"Sorry, but if I close the editor completely, he asks me if I want to save the changes.  VSCode keeps opened and modified files are in the ""Working Files - stable"" or ""Open Editors - insiders"" in Explorer. I liked to show seperate, even though the same file.  If closing a group of tabs I agree with this behavior, but closing this single file, seems strange this new behavior.  ![capturar1](https://cloud.githubusercontent.com/assets/19866231/16567644/6177d738-41f7-11e6-9845-6a2bef73b3b2.JPG)  Is there no way to verify if they are the same file, regardless of whether you are the right or left side of the editor? If the same file, do not ask the question until the latter is closed. In the last ask me if I want to save.  At least one setting in User Settings, so you can choose the behavior of this situation.  Anyway thanks."
29234|@bpasero tried again, still happens. It's open source, here is the file https://github.com/Ciantic/AspNetApiMonolithSample/blob/master/src/Api/Controllers/OpenIdController.cs
29235|@bpasero Thanks for the explanation, and for writing it down somewhere!  If I got it right, the problem is about  ``` typescript import { keybindingForAction } from 'vs/workbench/parts/files/browser/fileActions'; import { FileStat } from 'vs/workbench/parts/files/common/explorerViewModel'; ```  In that case I'm wondering what can i do about 'keybindingForAction'. Since there is nothing like e.g. parts/common there is no place to put, well the common stuff.  I have a look at FileStat, perhaps it can be replaced with IFileStat...  I guess you didn't really liked  ``` typescript menuService.createMenu(MenuId.ExplorerContext, keybindingService) ```  either (in vs\workbench\parts\search\browser\searchResultsView.ts)
29236|"Its failing even for small errors (try any code that throws error in python), so don't think that is because of code. **test2.py** content (also available in screenshot attached in first comment) `class Child():     def **init**():         print(""Child"")  child1 = Child()` I am using Ctrl + Shift + B to run code (new to VS code, just trying to make sure I am not doing anything silly)"
29237|@isidorn Many thanks. Obviously not a Pri0, but it'd be a nice fix next time someone revisits that area of code 😉
29238|"No, we cannot. See attached picture:  ![image](https://cloud.githubusercontent.com/assets/900690/16568472/d7b7fb70-422a-11e6-9c5a-e125f0700b2f.png)  Closing ""Untitled-1"" we have to ask you to save the file even if it is opened in the left hand group. The user does not know that the file is opened in the left hand group because there are many files open. The user might wonder why he was not asked to save the file on close.  I am not sure how I can explain myself better..."
29239|Thanks!
29240|@kisstkondoros do I understand your PR correctly that you want to contribute all file actions to the search viewlet or just the copy path action? because that one should not need the keybindingForAction?
29241|@bpasero IMO it totally makes sense  ![image](https://cloud.githubusercontent.com/assets/14231157/16568680/632ff052-422d-11e6-9d39-959e6e95ae69.png)
29242|It's work well, thank you.
29243|> The fact that we need to search source code might make Lucene a less ideal candidate. We also need to support regular expression searches.  Would it be reasonable to layer in different kinds of results at different times (with some sort of indicator that a search is still progressing)?  Even fuzzy matching file names has a fair bit of delay for medium sized projects (with, say, `node_modules/` _excluded_)
29244|this is a duplicate of https://github.com/Microsoft/vscode/issues/8378
29245|This should be fixed for the stable build.
29246|Moving Visual Studio Code out of and back into `Applications` didn't help.
29247|Thanks for the feedback
29248|thanks. good job
29249|Thanks, I find `Ctrl+`` is working at the latest insider. However, shortcut key description is not shown. Is it the intended change?  ![selection_029](https://cloud.githubusercontent.com/assets/846156/16571871/71021e88-429d-11e6-9ce6-b791acf4c856.png)
29250|@bpasero, thanks for your feedback, I have a few suggestions and questions.  > I would suggest to add SystemVariables into the configuration services we have [node/configurationService.ts#L28](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/configuration/node/configurationService.ts#L28)  Wouldn't the base class '[configuration/common/configurationService.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/configuration/common/configurationService.ts#L44)' be the right place for the change? I believe it is.  > I would suggest to add SystemVariables into the configuration services we have [configuration/node/nodeConfigurationService.ts#L35](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/configuration/node/nodeConfigurationService.ts#L35)   Agreed.  However, this class doesn't have access to any of the following: - editor service - workspace context service - current workspace path  Unfortunately the SystemVariables class needs access to one of the above. I could fix this.   However, before I do this, I would like to understand the purpose/usage of nodeConfigurationService.ts. So, please could you help me understand the purpose and/or the context within which this is used. Thanks
29251|The default image is also different from one shown on marketplace website. I am creating a bug to fix and give correct default image.
29252|I am very sorry to hear you are having issues with VS Code. I wonder if this issue is being caused by an installed extension. Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions` and try your steps again to see if it reproduces. If you see it is an issue with the extension, please file it against the extension repository itself.
29253|Yes, that base class makes sense. And yes SystemVariables needs those optional dependencies. I think the workspace context service and thus the current workspace path is known at the time the configuration service gets created. That is pretty much the first service we create.  I think @joaomoreno introduced nodeConfigurationService, he should comment on its purpose. As far as I remember, he uses it to be able to install extensions from the command line.
29254|I do not fully agree, I would not expect file modification actions nor compare actions nor a way to copy a file in search results. For the purpose of solving #8594 I would introduce just one action to copy the path into the clipboard.
29255|@joaomoreno In marketplace we round off to the nearest multiple of 0.5. Here are some examples, 3.74 will round off to 3.5 3.80 => 4.0 2.60 => 2.5  4.24 => 4.0 4.26 => 4.5 4.25 => 4.5
29256|@f111fei, thanks for your PR! By analyzing the annotation information on this pull request, we identified @bpasero and @egamma to be potential reviewers
29257|This issue was moved to editorconfig/editorconfig-vscode#58
29258|I'm closing this issue as this was an issue with the Python extension itself and the issue has now been resolved [#102](https://github.com/DonJayamanne/pythonVSCode/issues/102). If the issue still persists, please re-open the [issue in Python repo](https://github.com/DonJayamanne/pythonVSCode/issues/102)
29259|I believe the documentation on the following pages will help: - [A Common Protocol for Languages](https://code.visualstudio.com/blogs/2016/06/27/common-language-protocol) - [Language Server Protocol](https://github.com/Microsoft/language-server-protocol)
29260|Thanks @DonJayamanne  I still think it would be nice to have a generated documentation in the same way the API does, but I am fine for this to be closed as well :smile:
29261|@f111fei wow great catch, this would explain https://github.com/Microsoft/vscode/issues/8373 which I could not reproduce 👍
29262|This is intentionally capped at 1000 to prevent slowness / lagging.
29263|What does this running this in the Terminal return?  ``` ls /Applications/Visual\ Studio\ Code.app/Contents/MacOS ```
29264|The `NodeConfigurationService` is a stepping stone towards having a workspace independent configuration service, needed by both the main and the shared processes. It does not nor never will have access to the editor service or anything workspace related. It only concerns the global configuration settings. @bpasero you know this, we talked about it.
29265|Do you happen to know who the person to talk to is?
29266|Steps in https://github.com/Microsoft/vscode/pull/8746
29267|Do you see this on any other machine?  What git version do you have installed?
29268|Since all issues on our side are fixed (no more crashes for these test cases), I would prefer to close this issue. The JavaScript grammar is still broken, but that is being tracked in Microsoft/TypeScript-TmLanguage#174
29269|@f111fei I did one change (https://github.com/Microsoft/vscode/commit/20edd6a21cc7266a94153fc91abc4efa3599ddd4) because I wonder why you added it:  ``` typescript if (overlay) {           DOM.addClass(node, 'dropfeedback');      } ```  First of all, the check for overlay is not needed because it is created before. Then I am not sure why the code in the if block is needed?
29270|Maybe 🙈
29271|Given that it would probably make sense to have a workspace/editor independent `SystemVariables` instance that just allows to fill in `process.env` variables and have a subclass that is being used within the workbench.  @DonJayamanne given a lot of debt in the configuration service area I would probably hold on to making changes until we cleaned this mess up.   Related issues: - https://github.com/Microsoft/vscode/issues/6093 - https://github.com/Microsoft/vscode/issues/6094 - https://github.com/Microsoft/vscode/issues/6095
29272|@bpasero  If drag into `editor-container` we need add `dropfeedback`
29273|@ywmail is this using typescript?
29274|This is https://github.com/Microsoft/vscode/issues/8726
29275|I have to second this. It's super annoying that all of a sudden you've managed to move a folder into another folder. Had you been able to Undo it would not have been such a PITA, but there is no such option currently.   I mainly have this issue when working in a Linux box where the trackpad is a bit finicky and all of a sudden it registers a touch while dragging and voila, you have moved something to some place where it's not supposed to be.
29276|@f111fei that should be handled by the overlay, no? Can you demonstrate how currently (after my change) there is an issue with the drop feedback? I could not find any.
29277|oh, sorry. You are right. I think we must add `dropfeedback` class here at first. If exist an overlay we can remove `dropfeedback`
29278|@bpasero , sure thing
29279|This got implemented by @csvn in #7925 and will come out with the June stable release
29280|"@bpasero Yes, this is a typescript project, forked from angular2-webpack-starter, here is the `settings.json`:  ``` // Place your settings in this file to overwrite default and user settings. {     ""files.exclude"": {         ""**/.git"": true,         ""**/.DS_Store"": true,         ""build/"": true,         ""dist/"": true,         ""bin/"": true,         ""karma/"": true,         ""r/"": true,         ""reports/"": true,         ""scripts/"": true,         ""runtimeWindows/"": true,         ""runtimeLinux64/"": true,         ""**/node_modules"": true,         ""documentation/"":true     },     ""editor.folding"": true,     ""html.format.wrapLineLength"": 0,     ""html.format.unformatted"": ""a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, script, select, small, span, strong, sub, sup, textarea, tt, var"",     ""htmlhint.enable"": false,     ""editor.insertSpaces"": false,     ""files.eol"": ""\n"",     ""files.trimTrailingWhitespace"": true,     ""search.exclude"": {         ""**/node_modules"": true,         ""**/bower_components"": true,         "".build/**"": true,         ""out*/**"": true,         ""i18n/**"": true,         ""extensions/**/out/**"": true     } } ```  here is the `tsconfig.json`:  ``` {   ""compilerOptions"": {     ""target"": ""es5"",     ""module"": ""commonjs"",     ""emitDecoratorMetadata"": true,     ""experimentalDecorators"": true,     ""sourceMap"": true,     ""noEmitHelpers"": true   },   ""exclude"": [     ""node_modules"",     ""server""   ],   ""awesomeTypescriptLoaderOptions"": {     ""forkChecker"": true,     ""useWebpackText"": true   },   ""compileOnSave"": false,   ""buildOnSave"": false,   ""atom"": { ""rewriteTsconfig"": false } } ```"
29281|Trying for July...
29282|@jrieken Something to consider for the menu items story?
29283|Undo would be awesome, but likely hard to achieve.  We can add a setting to disable dnd, what do you think @bpasero?
29284|Just I just drop the strict?
29285|@othebe We have made lots of improvements over the past months that might incidentally help your use-case. Would you care to give it another try and report if things are still painfully slow...  You can grab the latest from the insiders channel - https://code.visualstudio.com/insiders
29286|Yeah - and since that's the last usage of another than default filter I would drop the whole concept of support specific filters
29287|extension file like `.vsix` need also give the right feedback.
29288|Yeah, but I don't really know we would dedupe them?
29289|@simonvizzini I am happy to report that due to some changes I did a couple of months ago, the initial reported bluriness with ProggyClean is gone (leading tabs widths are now defined explicitly)! :)  @mitsukuri I can reproduce the bluriness with Envy Code R at font size 13, but when I go to font size 14 I see it rendered a lot better. I believe the font rendering pipelines of Chromium and Visual Studio are different, and sometimes, when choosing a certain font size, Chromium needs to approximate the glyphs as the specific font size might not be optimized in the font. I can suggest to use fontSize 14.  You can also file a bug against Chromium to raise this issue.
29290|@joaomoreno I will introduce a delay of 500 ms before you can actually drop within the tree. That should fix these issues of accidental drop.
29291|@isidorn , I'll resubmit a pull request for this later today. Closing this as there were some problems in the way I created the changes at my end. Also, there are some more changes to be made: - Error handling - Tests
29292|Great - looking forward to the PR. Thanks!
29293|That makes sense 👍 . I will push a change to remove the dropfeedback when we have an overlay.
29294|I think that will fix accidental dragging... not so sure about accidental dropping. 😕  It wouldn't save @SneWs from his scenario, for instance.
29295|The file structure is like this:  ``` - .git - .github - .vscode - config - node_modules - server     -- data     -- models     -- node_modules     -- routes     -- typings     -- views     -- app.js     -- jsconfig.json     -- package.json - src - typings - package.json - tsconfig.json - ... ```  Pls note that I have a `server` in the root folder which contains another node_modules foler.
29296|@jrieken Pushed fix to `release/1.3.0`. The fix is to clear all data associated with a decoration type in the editor. Please verify that those members are always accessed in a safe way. The contract is that the decoration type will always be unique and once removed, it will never come back (the change has no other side effects except fixing the memory leak).
29297|@bpasero Just assigning to get an owner on this, but fwd if necessary.
29298|Maybe duplicate of #7874.  I can read `npm WARN`. @Luncher this should only be a warning, it's not a problem. Does the command return non zero?
29299|cc @isidorn @bpasero
29300|Can you maybe find someone to translate the issue to English? I'm having a hard time understanding the problem.  @bpasero This might be that the user has an href link with `../../../..` and tries to double click and gets an error message.
