9701|"@brennanMKE Thanks for the info but I needed to call different executables for different tasks. See @danielschmitz's example implementation for a practical example.  https://github.com/Microsoft/vscode/issues/981#issuecomment-162330360  @danielschmitz @usagi @felixfbecker @cfjedimaster @csholmq Thanks everyone for the feedback and suggestions!  FYI, I ended up using [Jake](http://jakejs.com/docs) to define all my tasks and pushed my concept up to calling a `vscode-configure` task which makes the `Jakefile` regenerate its tasks and the appropriate `.vscode` configuration from the content of the JSON file.  First here is a bit of context about the app I wanted to configure VS Code for: - Native development: C++ and Fortran - Build is [CMake](http://cmake.org/)-based. - Daily usage of  remote clusters and [Vagrant](https://www.vagrantup.com/) boxes to build and debug. - Cross platform code on both Windows and Linux.  My custom `Jakefile` allowed me to add the following capabilities to VS Code: - Multiple target configuration management. You can create variants of any property. - Execute task locally, via SSH or via Vagrant SSH and WinRM commands. - Support remote debugging by generating appropriate configuration for [`webfreaks.debug`](https://marketplace.visualstudio.com/items?itemName=webfreak.debug). - Support Error and Warning locations by generating the appropriate problem matchers. It even works when building via SSH. - Allow configuration inheritance to prevent configuration duplication. - Declare virtual configurations whose purpose is only to be inherited. - Any task can make a reference to a single custom problem matcher.  Unfortunately, I cannot share my work for now because I need a special agreement for this. However, I can show you an example of a JSON configuration which would be compatible with the system I described:  ``` json {   ""defaultConfig"": ""ubuntu-debug"",   ""problemMatchers"": {     ""gcc"": {       ""owner"": ""gcc"",       ""fileLocation"": [ ""relative"", ""${workspaceRoot}"" ],       ""pattern"": {         ""regexp"": ""^(${sourceDir}\\/)?(.*):(\\d+):\\d+:\\s+(warning|error):\\s+(.*)$"",         ""file"": 2, ""line"": 3, ""severity"": 4, ""message"": 5       }     },     ""gfortran"": {       ""owner"": ""gfortran"",       ""fileLocation"": [ ""relative"", ""${workspaceRoot}"" ],       ""pattern"": [         {           ""regexp"": ""^(${sourceDir}\\/)?(.*):(\\d+)\\.\\d+:\\s*$"",           ""file"": 2, ""line"": 3         },         {           ""regexp"": ""^\\s*(.*)$"",           ""code"": 1         },         { ""regexp"": ""^.*$"" },         {           ""regexp"": ""(Error|Warning):\\s*(.*)$"",           ""severity"": 1, ""message"": 2, ""loop"": true         }       ]     }   },   ""configs"": {     ""local"": {       ""enabled"": false,       ""sourceDir"": ""${workspaceRoot}"",       ""cpus"": 8,       ""problemMatchers"": [ ""$msCompile"" ]     },     ""vagrant"": {       ""enabled"": false,       ""useVagrant"": true,       ""sourceDir"": ""/src"",       ""cpus"": 1,       ""problemMatchers"": [ ""gcc"", ""gfortran"" ]     },     ""debug"": {       ""enabled"": false,       ""cmake"": { ""buildType"": ""Debug"" }     },     ""release"": {       ""enabled"": false,       ""cmake"": { ""buildType"": ""Release"" }     },     ""ubuntu-debug"": {       ""enabled"": true,       ""buildDir"": ""/home/vagrant/build-debug"",       ""parents"": [ ""vagrant"", ""debug"" ]     },     ""ubuntu-release"": {       ""enabled"": true,       ""buildDir"": ""/home/vagrant/build-release"",       ""parents"": [ ""vagrant"", ""release"" ]     },     ""local-debug"": {       ""enabled"": true,       ""build-dir"": ""${workspaceRoot}/build-debug"",       ""parents"": [ ""local"", ""debug"" ]     },     ""local-release"": {       ""enabled"": true,       ""build-dir"": ""${workspaceRoot}/build-release"",       ""parents"": [ ""local"", ""release"" ]     }   } } ```  Alternatives which would provide all the capabilities listed below in a simpler configuration file are welcome :smiley:"
9702|"@isidorn yes, you have understood the core of the issue. This is more of an issue for users discovering VS Code for the first time, as I do agree with you that once you know the difference between ""workspace"" and ""no-workspace"" views it is no longer a problem."
9703|Just want to say thanks for the workarounds and the fixed update today. :)
9704|I wonder if this could have anything to do with us using `$` in the variable name e.g. `$index`.
9705|Yeah this is strange, and only getting more strange. It sees it as a git repo.
9706|Cool. Does the path to `goa` perhaps involve symlinks at all?
9707|Dup of #508?
9708|@xaqfox Wow man, this fixed the issue on my side. I bit sad that different projects need different a syntax for `http_proxy` (that said I can't believe I did not try that syntax myself). Thanks for the tip! (Still not sure why I could not see any traffic in the first place but hey, I got other things to take care of).
9709|+1
9710|No, at least not on my computer. In Go, it's fairly commonplace to pull a repo from the actual public project directory (in this case https://github.com/goadesign/goa ) and then fork the repo on github, and set my local goa project directory (mine is `$GOPATH/src/github.com/goadesign/goa`) to point to my remote fork on github, so when I push it goes to `github.com/stuartweir/goa`. The reason for this is to maintain the import paths for package dependencies in goa for my local version. I hope this makes sense, but I'm starting to wonder if that's possibly the problem?
9711|That is OK. Can you try cloning the goa repo (either the original, or your fork) into `~/Desktop/goa`?
9712|:+1: +1 to that
9713|Yes looks like a dup of #508. @justin-romano we would appreciate if you could characterize the workspace you have open that causes the crash.
9714|Given that there are now high quality linters for JS available (eslint, jshint) and there are also extensions for these linters with Code available, the will deprecate the built-in linter support in the next update.   Is this decision a problem for you? Can you try the eslint or jshint code extensions?
9715|Please see my comment in #3140, closing this one.
9716|Side note, it would be nice to have the possibility to install an extension by clicking such a badge [![VS Code Marketplace](https://img.shields.io/badge/vscode-bbenoist.quicktips-blue.svg)](https://marketplace.visualstudio.com/items/bbenoist.QuickTips)  Again, the ID would be still present because it ensures that the right extension gets installed if the end-user prefer to use `ext install`.
9717|What about Type Script? (not using it yet in this project but will) But fair enough. Which is the best JS linter for vscode?
9718|// @bpasero
9719|> Which is the best JS linter for vscode?  Based on the download# of the extensions I'd say eslint, it has 25% more downloads.  > What about Type Script? (not using it yet in this project but will)  Actually the JavaScript language support is powered by TS. TypeScript 1.8 will add more linting checks. If you want linting for TypeScript then we recommend to use tslint (for which there is also a Code extension.
9720|@hashhar I'm assuming `code` is a symlink to `Code`, as in https://github.com/hashhar/vscode-universal-installer/blob/master/install.py? I haven't had any issues so far using Ubuntu/Compiz 15.10 and plain Debian 8.3.0. Did this just start happening with a newer version? How do you normally launch code on Linux?  Launching using `sudo` is a known issue https://github.com/Microsoft/vscode/issues/3068
9721|fyi @waderyan
9722|I like the direction but yeah, we need to be able to provide task snippets with our extension and have those show up when the user edits a tasks.json file.   How would you handle duplicates?  Say another extension created a BetterTypeScriptTasks.json that contained the snippet `tsc - watch`?  Allow both but show the origin (extension) of each snippet?
9723|Well i think you will kill code if you remove the linting. Its i bit buggy but i uninstalled both alternatives in disgust. They are awkward to configure and put big red lines under things that don't matter like indenting and line endings. You need something there but its just got to pick up real error. Something you have done which will not run or just dumb things like missing `var` or extra commas  On Fri, Feb 19, 2016 at 11:44 AM, Erich Gamma notifications@github.com wrote:  > Closed #3140 https://github.com/Microsoft/vscode/issues/3140. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3140#event-555824216.  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
9724|You need this to be instantly useful for editing JS in my opinion :)  On Fri, Feb 19, 2016 at 12:07 PM, Justin Romaine justin.romaine@gmail.com wrote:  > Well i think you will kill code if you remove the linting. > Its i bit buggy but i uninstalled both alternatives in disgust. > They are awkward to configure and put big red lines under things that > don't matter like indenting and line endings. > You need something there but its just got to pick up real error. Something > you have done which will not run or just dumb things like missing `var` or > extra commas >  > On Fri, Feb 19, 2016 at 11:44 AM, Erich Gamma notifications@github.com > wrote: >  > > Closed #3140 https://github.com/Microsoft/vscode/issues/3140. > >  > > — > > Reply to this email directly or view it on GitHub > > https://github.com/Microsoft/vscode/issues/3140#event-555824216. >  > ##  >  > Justin Romaine > Senior Systems Architect > Spark Dental Technology > justin.romaine@gmail.com > ph 021 764 506 > hm 09 445 9166  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
9725|The link for the Python request is incorrectly pointing back to the wiki page (probably meant to be https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752336-wider-python-support).
9726|Ops! Pressing alt key un hide menu bar, Okay it's solved. now.
9727|Yep thank you @brettcannon
9728|+1 Same here. Mercurial support in vs code would be great.
9729|Is it possible to ask for a toggle on this behaviour as a feature request? I'd love to be able to do file management in VSCode, but there's no point if I have to dip into the Terminal every time I want to rename a file to keep my commits neat.
9730|(~/git/vscode-imagepreview/node_modules/vscode/bin): node compile ../../../src/extension.ts(3,25): error TS2307: Cannot find module 'vscode'. ../../../test/extension.test.ts(11,25): error TS2307: Cannot find module 'vscode'.
9731|Light/Dark (Visual Studio) seem to be very broken on latest stable. Is the plan to delete them and migrate users to Dark/Light+ for next release?
9732|Repros on master. Also: - `code ../..` opens `..` - `code ../../..` opens `../..` - etc.
9733|Is it different from Sublime Text?
9734|$1
9735|I checked that the language server correctly returns the :: and initialized code complete with the value. However to my knowledge VSCode only support trigger characters not trigger strings. Moving to VSCode for commenting
9736|Thanks @alexandrudima . Appreciate the effort!
9737|Starting with Joh. Unclear if this is an extension host problem or a general design thing.
9738|Can you remove the `node_modules` folder and run `npm install`?
9739|I just checked if `$` makes a difference on our side and it does not, we still treat `$index` as one word.  @rkeithhill is right, the scope plays a big part there, once a user hover over a word we try to find a variable matching that word by going through all the 'non expensive' scopes. If the variable is not in the `non expensive` scopes the hover will not show it  To overcome these issues I suggest you switch to the alternative hover strategy - return [supportsEvaluateForHovers](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L495) as a part of the capabilites response. Then on hover VSCode will not go through the scopes but will always pass the hovered over value to the powershell adapter to be evaluated. This works better in practice if the powershell adapter can somehow guarantee that no dangereous scripts would be executed by accident in this way.  We currently use this approach for node and it works quite well for us.
9740|You don't have to dip to the Terminal. When you commit, [git figures out which pairs of adds and deletes equate to a rename](http://stackoverflow.com/questions/7938582/how-does-git-detect-similar-files-for-its-rename-detection). This mechanism is used at commit time but also at stage time, but not before staging your files.  Meaning this: - if your files are not staged, they appear as a delete/add; - once you stage them, git detects a rename (and thus Code does too); - once you commit them, regardless of whether you staged them or otherwise, they will be detected as a rename.
9741|We are actually saving all files on the debug session start, however there is a timing issue here. If you start a second debug session you will see that your changes are picked up.  The root cause here is that the configuration service is giving me a stale `launch.json` so forwarding to @bpasero  To repro, change something in `launch.json`, notice that the change is not picked up on first debug launch, however it is picked up afterwards. I think we already looked into this issue some time ago but forgot what was the conclusion.
9742|I don't have the issue in 0.10.9 either. I stil think you need to install the typescript@next npm package in order to use the Salsa engine to analyze the JavaScript - maybe that's your issue, @patrickheeney?
9743|+1
9744|You have a workspace you can share?
9745|"Unfortunately no, I use tsx files if that helps.   ``` {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""es5"",         ""noImplicitAny"": true,         ""outDir"": ""Build"",         ""rootDir"": ""."",         ""experimentalDecorators"": true,         ""jsx"": ""react"",         ""removeComments"": true     },     ""exclude"": [         ""node_modules""     ] } ```"
9746|@weinand I propose to do this in march so we do not break any adapters that are not yet supporting exceptionBreakpoint capability?
9747|@isidorn sure, this was not meant to be for this sprint.
9748|I tested it with tsx files on the upcoming February build that uses TS 1.8.x and wasn't able to reproduce. See attached  ![bug](https://cloud.githubusercontent.com/assets/1931590/13174250/aa13eb68-d702-11e5-8598-86d39dacd2a0.gif) video.
9749|If you still see this can you please provide a test case for me to reproduce.
9750|Was too busy this milestone. Moving to march.
9751|Protected the code against uncaught exceptions
9752|Will look into this in March. I need a Mac and there could be different reasons why this is not working.
9753|![image](https://cloud.githubusercontent.com/assets/172399/13174577/eddcb6ac-d704-11e5-91fe-27abb04a3822.png)
9754|@waderyan it looks like this PR also includes changes to the Feedback widget. Is this an oversight? The changes to the extension tips looks good to me.
9755|I like your extension and it covers Vagrant well. Closing this PR.
9756|It might be just me refactoring things on my dev machine
9757|ping @SofianHn
9758|@dbaeumer I'm afraid that this option is now obsolete given the migration to salsa. Can you please check and close the PR if this is the case.
9759|Very compact description :smile:. Is this related to #2957
9760|This issue was moved to Microsoft/vscode-mono-debug#9
9761|`/usr/local/bin/code` is a symlink to `/opt/VSCode/Code`. It started with 0.10.8. But I had also uninstalled some packages before that so it could be that. Does VSCode have any external dependencies?  **The absurd part is that clicking on the launcher I made ( see https://github.com/hashhar/vscode-universal-installer/blob/master/VSCode.desktop) launches it as it should. And both of them are using the same executable symlink.**  I'll try reproducing this on a VM.
9762|@egamma Thanks for the feedback!  Next features for the extension will be support for the `vagrant ssh`, `vagrant winrm`, `vagrant powershell` and `vagrant rdp` commands.  Any info on whether we will have a channel (like `vscode.window.createOutputChannel`) with both input ant output (like the debugger console) someday?
9763|Thanks a lot!
9764|This is not on the immediate radar, if you want input output then you should open a command prompt. For that we provide the 'run-in-terminal' node module. We use it in several extensions.
9765|**I can't reproduce this on other systems**. Seems to be something wrong with my machine. My own machine can now not run any of the older releases too from the terminal.
9766|It worked. Great.
9767|"It works on a local computer. If I mount on a local VM it doesn't work, though it seems only specific to this project. Since I can mount a local VM for other projects.  Any thought on what could go wrong? It also works if I don't specify this settings:  ``` {     ""typescript.tsdk"": ""/usr/local/lib/node_modules/typescript/lib"", } ```  I use bleeding edge TypeScript otherwise."
9768|I'm guessing this is the same issue: https://github.com/Microsoft/vscode/issues/2923
9769|i see the bug and the fix is in - i guess a short term work around is `code ../` opens the parent directory
9770|"I checked the matter again with our proxy admin today. It turned out that the https certificate for vsassets.io is invalid. This is causing our proxy to refuse the connection (and yes, I am using http.proxyStrictSSL:false). You can see that in chrome when you surf to vsassets.io Chrome shows an striked out https-prefix in the addressbar because of the invalid certificate. The certificate provided by the website is targeted to ""market.visualstudio.com"" instead. We set up our proxy to ignore the certificate for now, now it works for us, but maybe someone should look into this.  Thank you."
9771|Duplicate of #2894
9772|Related to commit c06d57865dcb149c53d29ee24a19768458a69088
9773|It looks like scripts in HTML documents are not _colourized_ because the document is expecting HTML, naturally.
9774|LGTM
9775|"@chanpod Is there a '/' missing between the `${workspaceRoot}` and `server/server.js` ?  ``` json ""program"": ""${workspaceRoot}server/server.js"", ```"
9776|"I've tried it with and without. Same behavior. I tried deleting my launch config completely and starting with a fresh one since there were several changes. But it just kept ignoring the slash and giving the error  `""'c:\Users\cphilpot\git\bossCollectionserver\server.js""` The path should be  `""'c:\Users\cphilpot\git\bossCollection\server\server.js""` It does that with or without the slash in  `""program"": ""${workspaceRoot}/server/server"",`"
9777|Code will now only install compatible versions.
9778|Thanks Isidor!  I haven't been using the capabilities features of the debug protocol yet, so this seems like a good place to start.  We'll give that a shot and see if it helps for us.
9779|Awesome, I will take that information to the people in charge. Many thanks for the patience!
9780|That should fix this, since the issue explained here are the limitations of our 'scope sniffing' approach. Closing for now, and we can open a seperate issue if the `supportEvaluateForHovers` does not do the trick for you
9781|"@chanpod I've just verified on Windows 10 and VS Code 0.10.8 that the '/' is definitely needed. In my test I'm using this launch config:  ``` json {     ""name"": ""Server"",     ""type"": ""node"",     ""request"": ""launch"",     ""program"": ""${workspaceRoot}/server/server.js"",     ""cwd"": ""${workspaceRoot}"",     ""stopOnEntry"": true,     ""runtimeArgs"": [""--nolazy""] } ```  With it my server just starts fine with this output on the debug console:  ``` node --debug-brk=27537 --nolazy server\server.js  Debugger listening on port 27537 ```  Since the output matches your output, I'm pretty sure that your server starts up fine but then has an issue with the `js-bson` module, which is not part of VS Code. You can verify this by using `""stopOnEntry"": true`. Your server should stop on the first line but produce no error output.  The output:  ``` { [Error: Cannot find module '../build/Release/bson'] code: 'MODULE_NOT_FOUND' } js-bson: Failed to load c++ bson extension, using pure JS version ```  is not coming from VS Code. Please verify why the relative path '../build/Release/bson' is not working."
9782|Great, thank you!
9783|To be clear, our specified trigger character is `:`, not the double-colon `::`.  I wonder if the two instances of the same trigger character is causing some issue there.
9784|@jjmartin yes the fix should be in the next release, adding a slash is a good work around in the meantime.
9785|Actually, I can't confirm invalid certificate. On my machine, the certificate does appear to be valid and useful for the `*.vsassets.io` domain.  ``` https://lukehoban.gallery.vsassets.io/_apis/public/gallery/publisher/lukehoban/extension/Go/0.6.27/assetbyname/Microsoft.VisualStudio.Code.Manifest ```  ![screen shot 2016-02-19 at 16 40 34](https://cloud.githubusercontent.com/assets/22350/13180163/a7d5f1d2-d727-11e5-8134-84f794fa84d6.png)
9786|@hashhar ok, if you end up figuring it out please ping this issue as vscode may be able to warn/advise about the situation.
9787|This may be a manual step currently, we may be able to automate with the [GitHub API](https://developer.github.com/v3/repos/releases/#upload-a-release-asset).
9788|Cannot reproduce on Windows 10, is that Vista you are on?  If you reload Code does the file appear?
9789|This seems to be a regression. Works fine for HTML and PHP in stable 0.10.8.
9790|It seems like this is a TypeScript problem. It works if I install older version of TypeScript. `typescript@1.8.0-dev.20151223` is the latest I've tried so far that works.
9791|Cannot reproduce on master.  It's likely either local changes or the Dark/Light (Visual Studio) theme highlighting issues.
9792|Thank you!
9793|"If I just enter ""vsassets.io"" i get an invalid certificate. Right now I am at home so it´s no problem of our corporate proxy.  ![vsassets](https://cloud.githubusercontent.com/assets/17291996/13181664/6fa89ee8-d72e-11e5-8a35-cee770a55d0c.png)"
9794|"Thank you for the PR! :+1:   I went a bit further to try to clarify things:  ``` typescript export interface TextEditorOptions {          /**          * The size in spaces a tab takes. This is used for two purposes:          *  - the rendering width of a tab character;          *  - the number of spaces to insert when [insertSpaces](#TextEditorOptions.insertSpaces) is true.          * When getting a text editor's options, this property will always be a number (resolved).          * When setting a text editor's options, this property is optional and it can be a number or `""auto""`.          */         tabSize?: number | string;          /**          * When pressing Tab insert [n](#TextEditorOptions.tabSize) spaces.          * When getting a text editor's options, this property will always be a boolean (resolved).          * When setting a text editor's options, this property is optional and it can be a boolean or `""auto""`.          */         insertSpaces?: boolean | string;     } ```"
9795|Awesome. Thank you very much!
9796|+1 for tabs. Almost 1 year work with VSCode and I like it a lot. But still miss tabs, especially when working with debug or search, or git left section. Tabs help not to think about which file contains code, you have been working before. I believe users manage tabs and their order to keep in mind also a position of tab, which can be associated with source code they are working. Splitted editor tabs also can keep this intention.  Ctrl + tab is a key action, and tabs is visual action, which is Much Faster.
9797|"> try to find a variable matching that word by going through all the 'non expensive' scopes.  What determines if a scope is expensive?  Higher up the callstack?  Would it matter that we have multiple ""top-level"" variable containers: Local, Script, Global and Auto?"
9798|Yup, in the (Visual Studio) debugger I see the first colon initiate a completion request and we return an empty list.  Then I see the second colon initiate another completion request and we return all the static members.
9799|First of all, I just wanted to say it's great to finally have keyboard scrolling in VS Code! That said, this unexpected behavior can be quite frustrating for some of us as it breaks your flow when coding in addition to not matching the feature in other editors.  However, I can see how others might like the current behavior so they can scroll a bit to see some code for reference and then snap back to the original context that's possibly offscreen (maybe that's why the original author did it that way?)  Perhaps this is best made into a configuration flag instead of just 'fixing' it as a bug?
9800|MongoStore = require('connect-mongo')(session)  is throwing the error. This is a fairly common error (no idea why) and it doesn't actually prevent the server from working. But it does seem to be stopping the VS debugger from continuing. Is there a way to tell it to ignore errors?
