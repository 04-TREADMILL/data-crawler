14001|Can you guys please double check that the speed is indeed faster with the previous release: https://github.com/Microsoft/vscode/wiki/Previous-Releases  Also attach the profile for the previous release?
14002|@sahas- so you cannot reproduce if you do Code > Preferences > Color Theme after you restarted?
14003|At least, [SublimeLinter](http://www.sublimelinter.com/) and [Linter](https://atom.io/packages/linter) (not Atom-Lint) show error messages in the status bar (or the bottom of the window) by default. And IntelliJ and some editors also do by default (if I remember correctly).  Anyway, I was inured to editors that show error messages in the status bar. But, now, I understand that approach of VS Code and the convenience of F8 key. That still requires additional operation, but it is just a little bit. I think that I am inured to that soon.  Thank you all, for your time.
14004|@bgashler1 thanks!  @chrisdias @stevencl @bgashler1 honestly I am not a big fan of adding a blue box around the editor with focus. i am also not sure if it helps a user or adds more confusion if you end up with something like this:  ![image](https://cloud.githubusercontent.com/assets/900690/13838363/a7b3c552-ec13-11e5-8dfc-870097a25e0a.png)  Given this is a sensitive change with impact, moving to post GA.
14005|@jasonyueyang well all extensions need to be externalizied, while this issue is specific for the go extensions, since that extension contributes these settings
14006|"@bgashler1 that is weird, I can press the ""Tab"" key and eventually reach the message bar.  I like the color for the button in dark theme, however in light theme I cannot see the focus indication. I suggest we come up with a new color here, maybe towards orange even?"
14007|"(try it out on the ""Open Folder"" button in the explorer when you have no folder opened)"
14008|This got fixed for the March release. The default themes are now also defined as a TM theme. There are no longer any default css rules for tokenization that apply to all (except a default background color and the whitespace color)
14009|Yes, #2564 is now fixed.
14010|@cherchyk @mohsen1 got a better idea, can you do this for Code 0.10.8 and latest: - reboot your machine to have a fresh start - go into the folder where code.exe lives - run `code.exe -p` - in the window type `Ctrl+Shift+P` and pick `Developer: Startup Performance` - attach a screen shot of the numbers showing (see below for example)  ![image](https://cloud.githubusercontent.com/assets/900690/13838845/5abda43a-ec17-11e5-9d82-d69d732e436b.png)
14011|This is very strange. Your Start menu appears to be nicely anti-aliased.  Is Chrome also like that?  If you download an [Electron](https://github.com/atom/electron/releases) build, is it like that too? How about [Atom](https://github.com/atom/atom/releases)?
14012|This issue was moved to OmniSharp/omnisharp-vscode#99
14013|@jrieken can you point me to what the C# extension does when you click on the status bar? I don't think it would do something with the explorer because it is an extension?
14014|Dup of #2802  We have fixed this and have a new editor version with the fix. Details at https://opentools.azurewebsites.net/
14015|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/121
14016|To me this rather looks like the extension host crashing over night and the first action after the night was triggering the crash.   @sahas- would be interesting to know for which workspace this happened and what kind of extensions you had installed?
14017|-1 for GA
14018|See attached heap allocations over time, picking a span between multiple refreshes, I do not see information about leaks:  ![untitled](https://cloud.githubusercontent.com/assets/900690/13839289/321c4790-ec1a-11e5-89a0-521f3123f12d.gif)
14019|I have removed the usage of performance.now() from the tokenization. I think there are still some good optimization opportunities in this case, such as: - stream the contents of the file (this would help in all cases) - detect specifically the content appended case (such as log files that get content added at the bottom) and don't create a new view model, but translate the diff into a model edit.
14020|The string is good right before using URI.parse in links.ts around line 342
14021|Similar as #4123 running heap allocations I am not seeing concrete objects on our end leaking:  ![image](https://cloud.githubusercontent.com/assets/900690/13839408/1d39ae16-ec1b-11e5-802e-43595f533339.png)  The Object, WinJS and Array things are pending delayers from the git world because a file event triggers a git refresh.
14022|@alexandrudima yes +1 for post GA :)
14023|@alexandrudima interesting thought about the model append case, I wonder if the setValueIfChanged() method could be smart about the RawText that I insert: it could detect the append case and do a model edit that would even preserve the undo history.  I wonder how common the append case is in real life work though...
14024|1 use tsd install node.js  2 code. 3 create a jsconfig with VSC  the lintellisense will work after reloading the VSC. The user experience isn't as good as the version 0.10.9
14025|I do not see this conflict on master so I guess it was being taken care of already.
14026|"@groksrc I could not find anymore free keybindings on Linux by default, so on Linux, you'd need to bind them in your `keybindings.json`. E.g.:  ``` { ""key"": ""ctrl+shift+alt+down"",   ""command"": ""cursorColumnSelectDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+alt+left"",   ""command"": ""cursorColumnSelectLeft"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+alt+pagedown"", ""command"": ""cursorColumnSelectPageDown"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+alt+pageup"", ""command"": ""cursorColumnSelectPageUp"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+alt+right"",  ""command"": ""cursorColumnSelectRight"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+shift+alt+up"",     ""command"": ""cursorColumnSelectUp"",                                      ""when"": ""editorTextFocus"" }, ```"
14027|Moving to April since it reproduces very rarely.
14028|The linter seems to be working, but all the errors are being shown as: `Parsing error: unexpected token (null)`
14029|Thank you, nice find!
14030|Improving the support for fetching .d.ts files is on the backlog, but will not be in the March update, sorry.
14031|when you have more than 500 files but (less than it takes to crash the server OR a recent server build which handles this better)
14032|:+1:
14033|`restore` and `run` are the same commands as typed in the console.
14034|Launching the browser is not expected, we never open the browser for the user. As for the breakpoint not hit - forwarding to @weinand
14035|Not sure about that, I am more leaning towards making it a user / workspace setting, and not a part of `launch.json`. VSCode does not interpreet the values in `launch.json` they are always passed to the debugger which lives outisde of vscode, and hiding the console is very vscode specific behavior.
14036|Since extensions are global, it is fair to recommend extensions globally. Now since the extension isn't very prominent users might not use the recommendation when a file is open, therefore considering the history makes sense. Otherwise we miss some recommendations we have.  What is missing is a way to express I'm not interested in this recommendation (e.g. PHP) do not show it to me again.   We will not change this for march, but we will revisit the recommendation approach.
14037|Disagree - I don't have the workspace under git or any other UI element open except for the explorer. Taking two snapshots and comparing them reveals 1.3MB growth and it does contain `FileStat`, `URI`, `ViewItem` and many html elements.   ![screen shot 2016-03-17 at 09 35 00](https://cloud.githubusercontent.com/assets/1794099/13840570/8c0b63ea-ec23-11e5-89f4-4cbbe2a47bd0.png)
14038|Yes, here is the behaviour on master:  ![ps-cursor-position](https://cloud.githubusercontent.com/assets/5047891/13840588/a2a02212-ec23-11e5-8e78-4088d547ae8e.gif)  It is still not what the OP wanted, but that can only be changed by providing different suggestions.
14039|"@kumarharsh do you have the eslint parser options configured for JSX/React? See below:  Also the error message should be prefixed with `[ESLint]`, this has been changed recently. If this is not the case can you update the vscode-eslint extension.  See the 'jsx' and `plugins` below  ``` json {     ""env"": {         ""browser"": true,         ""commonjs"": true,         ""es6"": true     },     ""extends"": ""eslint:recommended"",     ""parserOptions"": {         ""ecmaFeatures"": {             ""experimentalObjectRestSpread"": true,             ""jsx"": true         },         ""sourceType"": ""module""     },     ""plugins"": [         ""react""     ], ```"
14040|Looks good to me! Great work - merging!
14041|What you see is what's expected. The currently implemented folding strategy is based purely on the indentation of lines. A folding region starts when a line has a smaller indent than one or more following lines, and ends when there is a line with the same or smaller indent.  To be more smart and to, for example, use brackets, we will have to go one step further and introduce language agnostic folding regions. We have issue #3422 for this.
14042|This is supported in the market place.
14043|For instance those `+18` uri objects are held in some `RowCache.legacy` array and they carry outdated data (some path inside `/tmp/babel...` which doesn't exist anymore)
14044|![screen shot 2016-03-17 at 09 43 35](https://cloud.githubusercontent.com/assets/1794099/13840748/bc54d102-ec24-11e5-9a9a-70e54601ec42.png)
14045|"The initial issue is resolved with the February release:  Using Ctrl-Left:  ``` b('hello');| b('hello|'); b('|hello'); b|('hello'); |b('hello'); ```  Let's track Ctrl-Right in #3577"
14046|![screen shot 2016-03-17 at 09 49 45](https://cloud.githubusercontent.com/assets/1794099/13840867/987ba93a-ec25-11e5-9278-9c2ca5bd3814.png)
14047|Thanks for the clarification. This is #3903 (applies to both JS and TSX)
14048|@tinganho We delivered a fix in a update last Monday. Please update your VS Code installation. Thanks!
14049|Would be nice to have color picker like in Brackets. ![Image of Brackets Color picker](https://www.andrewmunsell.com/wp-content/uploads/2015/06/04.png)
14050|Thanks for takingthe time for a PR. We will tackle the issue in the next release. See #3803 for the discusions around the topic.
14051|"@jrieken talking about this ""Try to navigate to different projects by clicking on project count (showing in the status bar).""  @v-pavanp can you show me a screenshot of how ""Try to navigate to different projects by clicking on project count (showing in the status bar)."" works?"
14052|Actually I suspect this to be chokidar statting, not us.
14053|looks like our fileserver tbh  `@ fileService.js:536(anonymous function) @ flow.js:134`
14054|It shows the drop down / quick pick with the project files. Selection those will open the file.
14055|True...
14056|@jrieken ok thanks
14057|@v-pavanp please attach a video of this issue if you are able to reproduce, given I never saw this I will move it to April.
14058|Thanks for this @JVimes. We also think this can be a false positive, so I'm closing the issue.  We are going to send our bits around to a virus check team in Microsoft for further inspection, nevertheless.
14059|Wow, it was fast, thanks for fixing it! The credit for finding it goes to @asos-massimo.
14060|having said that it seems to behave OK. I see errors on the console but the explorer seems to recover
14061|This issue was moved to Microsoft/TypeScript-TmLanguage#128
14062|@v-pavanp the error message comes from the node debug adapter. The node debug adapter (and node itself) can deal with files that contain both forward and backward slashes. So if the file would exist, node could run it and there would be no error. But since the file doesn't exist the error is shown. There is no need for the node debug adapter to 'fix' the file path. The error message shows the path as specified by the user in the launch.json.
14063|#3008 is the underlying issue for this
14064|Closing as obsolete: We no longer have that quick fix
14065|Implemented for the March release. You can now configure all options offered by the foematter (beautify-html)
14066|@bpasero @joaomoreno let's use this issue to _test_/_compare_ the different profiling tools, cos' I don't get what the heap timeline shows. I don't get matching results with the heap snapshot comparison nor with the Timeline feature (see how heap and node usage grows in parallel).   ![screen shot 2016-03-17 at 10 52 42](https://cloud.githubusercontent.com/assets/1794099/13842617/7102375c-ec2f-11e5-94bc-96f44efab2f1.png)
14067|"@jrieken the difference to comparing snap shots is that it is easier to understand if some objects are still in memory because they leak or because they are not yet disposed from the previous run.  To give an example: imagine a component that only disposes its data the next time data is being displayed in that component. If you use a snapshot before showing data and after showing data, you would think the component leaks data. If you look at the timeline you will notice that the data is being disposed once the widget is used again. since you can repeat this process many times, it is easier to distinguish a real leak from something I would call a ""late dispose of things""."
14068|Not sure if we had any changes here, but I'm getting proposals in style elements: ![image](https://cloud.githubusercontent.com/assets/6461412/13842795/70fed4b2-ec30-11e5-908c-5aa61db07d98.png)  @dstorey If you have a reproducible example, please reopen the issue
14069|Giving to @weinand to verify, also @chuckries let us know if it still does not work for you
14070|I understand that and that's why I always run the action in question before I take the first snapshot, then repeat, and then take the second snapshot.
14071|>  always run the action in question before I take the first snapshot,   which I realised I have not mentioned in the steps about..
14072|This is unfortunate, but reflects reality.  The first time you choose an item, it is rendered without the details icon. The widget fires a request to the language service to ask if the item has details and then it repaints to show that it has details.  The aria alerts reflect what the widget paints. Most of the times, this request is so fast that you don't notice the flicker visually.  IMHO the data structures are flawed, they should have a boolean up front for each item that contains details. This would reduce spammy communication (the details could be resolved only when doing Ctrl+Space again to actually show details) and the fact that there are details would be known up front, instead of making a request on every selection change.
14073|For example in comment https://github.com/Microsoft/vscode/issues/4010#issuecomment-197767251 I suspect that a template from a previous tree refresh() was not disposed yet, but it is hard to know if this is true or not.  Looking at the timeline I find it easier to distinguish false positives from real leaks because you get a better feeling of what happens before and after you invoked an action. It also gives you a lot more freedom to select the range you want to compare for leak detection.
14074|@dbaeumer NVDA supports different modes. I think you have entered an object navigation mode of NVDA. I use `Insert+Space` to bring back NVDA into text input mode.
14075|@egamma updating the plugin fixed it. Actually, not I understood what that error is saying:  The eslint plugin highlights the `----` part on this object:  ``` borderTopRightRadius: geometry.input.radius borderBottomRightRadius: geometry.input.radius, ----------------------- ```  with the error:  ``` parsing error: unexpected token (null) ```  I thought this was a because maybe the eslint plugin was throwing an error due to some internal error, but it is trying to find an eslint rule **matching** the missing `comma` and finds nothing, so it outputs `(null)`. Maybe that's something which can be fixed?
14076|@weinand This is the ExpressApp created in Visual Studio using the started sample  [ExpressApp1.zip](https://github.com/Microsoft/vscode/files/177643/ExpressApp1.zip)
14077|![screen shot 2016-03-17 at 11 28 21](https://cloud.githubusercontent.com/assets/1794099/13843369/78134e42-ec33-11e5-983d-4f9120bb0429.png)  I understand all of that, but I don't understand how the heap grow in the picture above. `Snapshot 1` was taken before any action, `Snapshot 2` was taken after the first _ember serve & stop_ cycle and the growth could be templates, caches etc. Now `Snapshot 3` is taken after another cycle of serve&stop and in my model the heap should have not grown anymore.
14078|@weinand this is the TypeScript one  [ExpressApp2.zip](https://github.com/Microsoft/vscode/files/177646/ExpressApp2.zip)
14079|I looked at (2) For PHP we offer only 'Change All Occurrences' which looks at the current selection and finds occurrences based on the current settings of the 'Find' widget. It's basically find/replace, without the find widget. If you want to replace only full words, then you have to open the find widget and check the 'whole words' settings. That setting is persistent and then also 'Change All Occurrences' with follow this setting. There's also a keybinding shortcut (Alt+w) to toggle that while word settings without the need to open the find widget  Some other languages have a real 'rename symbol' support. We don't have that for PHP.   I'm closing this issue: (1) is expected, it has to do with the design of our themes: Use the Dark plus themes if you like variable highlighting (3) got fixed a while ago.
14080|I made a pass with Erich (he had wishes as well) and here is what the final result looks like: - no Jake - no description if superfluous - Sorted except External command - External command renamed to Others and moved to the end  ![capture](https://cloud.githubusercontent.com/assets/1931590/13843529/7b0c5de0-ec34-11e5-8d8f-cba7bd47ed4a.png)  Hope that makes everybody happy.
14081|@zersiax   From reading a bit the [NVDA user guide](http://www.nvaccess.org/files/nvda/documentation/userGuide.html), it looks like Escape switches back to browse mode if focus mode was previously switched to automatically.  We use `Escape` in many places in VSCode to dismiss or close things, including closing the suggestions list, dismissing messages, closing the find widget, etc.  Should we bind out of the box both `Escape` and `Alt+Escape` for these commands in order to have a way to dismiss/close things that does not collide with NVDA?
14082|This issue was moved to OmniSharp/omnisharp-vscode#100
14083|To me looking at the total heap size is wrong because it is up to V8 when to do GCs and bring down the heap. That must not necessarily mean there is a leak between the snapshots.   I just tried again with a very simple example (just 1 file and 1 folder) by deleting the file/folder and undoing that and comparing the snapshots. I do see heap increase but I do not see objects lying around that come from our world.
14084|> To me looking at the total heap size is wrong because it is up to V8 when to do GCs and bring down the heap. That must not necessarily mean there is a leak between the snapshots.  Prior to a heap snapshot a GC is performed otherwise the whole feature would be useless.  In the end it's our code that causes this and drilling a little deeper I see how the `(array)` portion keeps growing, which contains referenced to deoptimized code (FileStat.find for instance). From the profiler you see that method being hit often but somehow V8 cannot keep it native. This might not be a leak in the typical case but it's part of growing heap pressure.
14085|This was a issue with a Text mate infrastructure and has been fixed in the meantime.
14086|[ticks_fs.txt](https://github.com/Microsoft/vscode/files/177675/ticks_fs.txt)  scan for `LazyCompile:` the tilde means it cannot be compiled to native, the asterisk means it can. My theory is that code path become hot (like the explorer trying find the right position for X-thousand file events), the VM failing to compile some functions to native and dumping the deopt result onto the heap.
14087|Now tracked in https://github.com/OmniSharp/omnisharp-vscode/issues/101
14088|Now tracked in https://github.com/OmniSharp/omnisharp-vscode/issues/101
14089|Now tracked in https://github.com/OmniSharp/omnisharp-vscode/issues/101
14090|Now tracked in https://github.com/OmniSharp/omnisharp-vscode/issues/101
14091|Now tracked in https://github.com/OmniSharp/omnisharp-vscode/issues/101
14092|Thanks @Hywan !
14093|Thanks @Hywan !
14094|@sheldonbarnes Sorry for not getting back to you earlier. Your changes are fine, but I'd rather not extend the snippet syntax at this time. I know your suggestion has some nice properties, but I'd rather keep our story simple at this time.
14095|"To control this behaviour and get VS-style Ctrl+Right, please edit your `keybindings.json` and add:  ``` { ""key"":""ctrl+right"",       ""command"":""cursorWordStartRight"",       ""when"":""editorTextFocus"" } { ""key"":""ctrl+shift+right"", ""command"":""cursorWordStartRightSelect"", ""when"":""editorTextFocus"" } ```  This will overwrite the defaults:  ``` { ""key"":""ctrl+right"",       ""command"":""cursorWordEndRight"",       ""when"":""editorTextFocus"" } { ""key"":""ctrl+shift+right"", ""command"":""cursorWordEndRightSelect"", ""when"":""editorTextFocus"" } ```"
14096|@prehor Petr, first thanks for your help and sorry for getting back to you so late. I lost track of this issue. We consume the Ruby grammar from https://github.com/textmate/ruby.tmbundle. Would you mind making the pull request there, so we don't fork from that implementation?
14097|"@glen-84 I just pushed new word commands that allow, through the use of custom `keybindings.json` to pick which behaviour you want. Please also see #3577.  To get VS-style Ctrl+Delete, edit your `keybindings.json` and add:  ``` { ""key"":""ctrl+delete"",       ""command"":""deleteWordStartRight"",       ""when"":""editorTextFocus"" } ```  This will overwrite the default:  ``` { ""key"":""ctrl+delete"",       ""command"":""deleteWordRight"",            ""when"":""editorTextFocus"" } ```"
14098|Please also see #832 for getting VS-style Ctrl+Delete.
14099|@tinganho These pairs are defined per-language. Would you expect these pairs to be the same for all languages we support?  e.g. in JavaScript all except <> work as you expect, given JavaScript defines character pairs for the first 4.  fyi @joaomoreno
14100|@bpasero So apart from the crazy talk about VM internals and _heap snapshot_ vs _head timeline_ the problem in this concrete scenario is to not drill deep enough into the `(array)` etc items. I happen to stumble over an object with suspicious keys (file names) which is very large and voila I see a leak: https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/extfs.ts#L30  There is one brave object (`normalizedCache`) holding onto every path that was ever read from a directory.
