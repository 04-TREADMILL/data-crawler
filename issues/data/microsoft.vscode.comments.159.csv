15801|@vsccarl maybe the move operation is not fully finished when you try a second time? can you run with ProcMon to see when the file operations are done and then do the move after it is done?
15802|Yes i mean the default  textual completions.
15803|Nope, not yet but I can push it, until that which files would you else need to look at else then above ? Thank You !
15804|This may accomplish vertical text selection, but I think what the community wants is rectangular selection (of which multiple adjacent insertion-point cursors on the same column is a subset)  EDIT: I just found a separate UserVoice request for column-mode selection and editing here: https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7761618-implement-column-mode-selection-editing
15805|This is now support in the insiders build https://code.visualstudio.com/download?insiders=true pls see: https://code.visualstudio.com/download?insiders=true
15806|Thanks for catching this.  Will get on it.
15807|Good find, @jrieken .  This is not the only color that I've heard from users is in need of some tweaking.  I will enhance the contrast.
15808|We're thinking of doing some notification work in the future (i.e. a unified area for notifications).  This will address many other related issues with notifications.  While we wait to get that in the product, I can provide a temporary solution for this.
15809|I like the idea of having a higher level affordance that you can use to switch between coding and management. We might want to consider positioning the affordance at the top of the sidebar though for a couple of reasons: 1. In Monaco we found that many people overlooked the area at the bottom of the sidebar when looking for key functionality 2. Since conceptually the affordance is described and thought of as a parent of the coding and management 'modes' it seems to make sense to position it as a parent.  I don't have any firm ideas right now about what this might look like though.  Another thing we might consider too would be if we could allow the user to work with both views simultaneously, similar to how browser debugger tools can be snapped inside the browser or as a separate window. Doing so would allow the user to see the effects of changing any settings or installing an extension in the main coding window. Without this it could be a little laborious to switch to management mode, install an extension or change some setting , go back to coding mode, see if the extension or setting does what was expected, switch back to management mode, find another extension or setting, switch back to coding mode etc.  I know that this goes against the principle of not introducing any new UI but from a UX point of view I think this potentially provides a smoother workflow.
15810|In that case, managing horizontal scroll might be a problem. Swipe gesture could be supported when `Command` or `Control` key is pressed perhaps?
15811|You guys thought about using something like lucene to do that sort of pattern matching? Just index all the source in the background. Pretty quick and portable (but we don't use it for source indexing)  On Wed, Mar 30, 2016 at 9:55 PM, Benjamin Pasero notifications@github.com wrote:  > No worries, keep 'em coming [image: :+1:] >  > — > You are receiving this because you are subscribed to this thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/55#issuecomment-203329911  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
15812|Another issue with using a wiki over a repository; images need to be uploaded somewhere separate from the wiki as GitHub doesn't support images on the wiki like in issues. https://github.com/Microsoft/vscode/issues/4799
15813|@Microsoft/vscode is anyone opposed to including the documentation in the main repository under `./docs` (or `./doc`, `./documentation`, etc.) and turning off the wiki all together? This would help fix these issues with the wiki and potentially also improve the visibility of the developer documentation.  It can still have roughly the same structure: - `./docs/welcome.md` - `./docs/project-management/...` - `./docs/contributing/...` - `./docs/documentation/...`
15814|One problem with doing this is that the table of contents would be manual.
15815|I liked Bracket's extensions UX, they have a button on the top-right which opens up a modal dialog with extension/theme search. Regardless of the direction we go, the presence of a button on the UI will make extensions much more convenient and accessible.
15816|When considering the future direction, remember that differentiating green and red is one of the biggest color blindness problems.
15817|Unfortunately, chokidar is worse. =(  I modified the example code I gave earlier to use Chokidar.  It did reduce the # of events to one per file edit (which is better), but it was hit or miss whether or not the resulting read of the file included the contents of the file (which made it inconsistent).  I wrote a small script to automatically change my target file using node:  ``` javascript #!/usr/bin/env node  var fs = require('fs'); var file = 'watched.txt';  var input = fs.readFileSync(file); input += '.';  fs.writeFileSync(file, input); ```  This little script has the same behavior as VSCode. Two watch events with fs.watch, one with chokidar (but with a race condition on file read).  So... the good news is that this isn't a bug particular to VSCode.  The bad news is that it seems to be core to fs.write*  Emacs still does it correctly, so it might be worth it to figure out how to fix fs.write.  FWIW, My work around adds a 1ms timeout after the watch triggers and ignores watch events for that file that happen during that 1ms delay.
15818|@isidorn thanks for sharing your thoughts on this.  The icon is consistent with the icon in VS for extensions, so we will probably leave it unless we hear from users that it's not clear.  We should definitely keep an eye out for this kind of feedback during the Insiders release when we get the viewlet in the product, and we can respond quickly to that.  While we work out the viewlet ideas, I will decrease the size of this icon to visually blend better with the rest of the icons in the status bar.  That's undoubtedly throwing this icon off balance.
15819|Since we will be improving the extension experience soon and notification experiences, this shouldn't be any concern pretty soon.  I propose we leave this the way it is. Closing unless there are objections.
15820|These are some excellent ideas.  I think making management (settings, themes and extensions) as a mode of the product is a wise choice, because it would allow you to leave your editors all intact.  It also gives us more real estate and a neater, more consistent place to render these views.
15821|Related to #637
15822|Totally agree.  I think this will address your concern.  The heavy weight of the one stands in pretty clear contrast now to the lighter weight of the other.  I'll add this change to the product.  ![correctedicon](https://cloud.githubusercontent.com/assets/11839736/14162037/26983932-f69d-11e5-863d-5e171ae77fe7.png)
15823|Agreed this needs to be fixed.  I'm going to be modifying some other colors related to other issues, and will be sure to address this.  Is there any reason why we had the variable highlight be blue?  The only reason why I can think of is that it is a strong color that stands out.  When a user wants to know where a variable was defined, this could be useful.  Perhaps for the variable highlight we could use an outline, so that it's a strong visual indicator but is not confused as being a selection highlight (see below).  This also may eliminate confusion about variable instance match highlighting—where everything, including the selection is gray, and thus you cannot tell what the actual selection is.  In other words, blue highlight for the actual change selection, blue outline for the variable definition, and gray for instance match highlighting (which is not a change selection).  What do you think?  ![untitled-2](https://cloud.githubusercontent.com/assets/11839736/14162378/4077d81e-f6a0-11e5-90c0-32a22563b961.png)
15824|"Appears to be impractical to solve using `text-decoration: underline` in Chromium until it fully adopts the full CSS 3 spec on `text-underline-position`.  What I'll do is use a `border-bottom: 1px solid` instead.  Tested locally, and it looks good to me:  <img width=""454"" alt=""screen shot 2016-03-30 at 6 04 54 pm"" src=""https://cloud.githubusercontent.com/assets/11839736/14162585/ff32f530-f6a1-11e5-9998-211945249bae.png"">"
15825|I have just installed VS Code Insiders and found all the commands are translated. eg. when installing an extension instead of typing `ext` I have to type:   ![image](https://cloud.githubusercontent.com/assets/737120/14163219/d334fd0a-f725-11e5-8570-1176c23a29ba.png)  My Windows language is Chinese. I have to guess which Chinese word I should use when referring to the VS Code Docs, however which word should be used is decided by the translator. And as you can see it's too boring to input EAST Asia words.  There is a Chinese idiom 过犹不及 which means too much of a good thing.  p.s. [Change VS Code locale （修改 VS Code 的语言）](https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#localization)
15826|"A problem I can see with this is that it could encourage to take the easy way out. Given most extensions probably start out as a tool someone needs for their personal use, I could already see my lazy self:  ""Hmm, this will probably run on Windows just fine, but I should test it first.""  Now testing it will require me to reboot my computer, but because I am a lazy person I just mark the extension as incompatible and be done with it. It already does everything I personally need it to do after all.  Since Windows users do not even see the extension, there is little chance for a PR to come in, or even just a comment like ""it works without problems, just mark it as compatible"".  Not saying I can't see your point of view, just there is the potential of such a thing ending up being harmful to the extension ecosystem."
15827|Hi **@eshizhan**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
15828|I understand your point, but I think that the same way that a _lazy_ developer could choose the easier path and activate and extension only for selected platforms, he/she could publish an unfinished extension  with _known issues_, and maybe, never fix it.  At least being able to define compatible platforms, it prevents the users from installing extensions that will not work.
15829|An extension like Terminal Plus would be awesome too! https://atom.io/packages/terminal-plus
15830|The fact that we need to search source code might make Lucene a less ideal candidate. We also need to support regular expression searches.
15831|@jandrieu since you already have the code sample, why don't you file this against node.js directly and we link the issue to this one here?
15832|I have to restart vscode 1-2 times a day because the memory usage climbs over 1GB and things start feeling sluggish. It's using the amount of memory that a full blown IDE would, so there's definitely some leak going on.
15833|@vincent-ly can you share more details about the workspace you see this with?
15834|@bpasero There are about 30-40 js/scss/html files that uses a couple of bower components with gulp (without the vscode task runner). I work with 2 editor panes and frequently use the file search, pretty standard. The memory usage is under 100mb on startup, but builds up over time, even when minimized.   Does intellisense play a factor? I have Angular and jQuery type definitions installed.
15835|You can try our insider build where we worked on reduced memory pressure to see if that makes it better: http://code.visualstudio.com/download?insiders=true  Do you have extensions installed?
15836|@bpasero Just angular snippets  https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular1  I'll try the insider build and report back, thanks!
15837|[Stack Overflow](http://stackoverflow.com/) is probably the place to ask these sorts of questions. At first glance you might be running into something called content security policy by running the HTML file locally. Try moving your styles directly into `<style>` tags in the HTML file. If you want to find the root cause I recommend Googling for the problem first and then asking on Stack Overflow if nothing comes up. Good luck!
15838|It seems make is the inverse of yaml in the respect http://stackoverflow.com/a/2131227/1156119
15839|FYI I'm using the Insider build, and it's still broken.  ![2016-03-31 00_38_00-visual studio code - insiders](https://cloud.githubusercontent.com/assets/466713/14167470/ceac4ca4-f6d8-11e5-95b7-5210208ff5b4.png)
15840|"I changed our matching in the commands quick open to also match non-ascii beginning of words. This is not yet fuzzy matching, but returns a lot more results that make sense.  Basically the matching is now supporting any beginning of a word (e.g. ""gp"" matches ""Git: Pull"" as well as ""g p"" does)."
15841|Can you show me what is in your `PATH` variable?
15842|Also, link to #4679.
15843|Not sure what was the reason for the original color.  I think your change looks good, however it is hard to give feedback without first trying it out. I think this is one of those things where we have to just try it out. People will notice immediatly and you will get feedback.
15844|"You should show a hint about ""Alt"" every time user hides menu. I just waste an hour searching for how to unhide the menu."
15845|We do that for our 1.0 release. You can always access any commands (including the menu toggle) from the command palette (Ctrl+Shift+P).
15846|true.  On Thu, Mar 31, 2016 at 6:05 PM, Benjamin Pasero notifications@github.com wrote:  > The fact that we need to search source code might make Lucene a less ideal > candidate. We also need to support regular expression searches. >  > — > You are receiving this because you are subscribed to this thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/55#issuecomment-203754273  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
15847|Will do.
15848|Good catch.
15849|"I'm agree with you. It would be great to have a notifications center.  For extensions, status bar messages is the only way to display info for a short time without disturbing the user too much, but it is difficult to attract the attention. The only way is to show a warning|info|error message, but the user must interact with it which is not necessary in most cases. So, a notification center would be a great enhancement to track non blocking messages (displayed for 5 seconds only by default for example)."
15850|That the current design. When a more specific completion provider returns a non-empty result, less specific completion providers won't be checked anymore. We do that because we assume the provider is more accurate in that case.
15851|Yes, we have not found time to tackle this in March.
15852|Hi @xianghongai Thank you for filing this issue.  Can you please point me to a set of files (a zip archive) or a github repository that reproduces this for you?  I have tried opening a bunch of html/css/js files with this plugin installed, but I am not seeing the hang.
15853|@alefragnani If you could add also a code snippet that would be great. That way I can use this as test once we add language agnostic folding. Thanks a lot!
15854|@leegee I also cannot reproduce.
15855|Thanks @eshizhan !
15856|I would love it if we're able to reproduce the crash, if you have any futher steps or details I would very much appreciate it!
15857|duplicate of #3465
15858|@johnliu2016 can you please forward this to the translation team.
15859|I am sorry, I can no longer reproduce.  I have not changed anything in my set-up/the editor.  I guess it was an accumulation of things: having used the editor for about 10 hours a day for a couple of weeks or so, I rarely see a problem, but yesterday I found it frequently unresponsive, and had to pskill it several times.  Will open another ticket if it happens again and I can offer more info on how to reproduce it.
15860|@leegee also we fixed some memory leaks that are available in the insider build https://code.visualstudio.com/download?insiders=true
15861|@crabulik   The recommendation is to add a jsconfig.json and to exclude the 'non source' js files. We have improved the documentation, pls give it a read: https://github.com/Microsoft/vscode-docs/blob/vnext/docs/languages/javascript.md  > VS Code shows me warning, that TS engine died 5 times for the last 5 minutes;  Can you please try this again in the insiders build which has improvements in this area https://code.visualstudio.com/download?insiders=true. It should no longer crash and you should get guidance to exclude folders.  > Code Format works fine, but TS starts to analyse my JS code  This is expected since the JS support is now powered by TypeScript.  // @jrieken
15862|Excellent! I'm getting it now, thanks!  On 31 March 2016 at 09:46, Erich Gamma notifications@github.com wrote:  > @leegee https://github.com/leegee also we fixed some memory leaks that > are available in the insider build > https://code.visualstudio.com/download?insiders=true >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/4788#issuecomment-203823307
15863|Hi @pcgeek86 the warning ranges are produced by the powershell extension.
15864|I've tried to move it for you using (https://github-issue-mover.appspot.com/), but I ran into an error, sorry about that
15865|@dbaeumer ported loc team
15866|This code is gone
15867|Code is gone
15868|This issue was moved to Microsoft/TypeScript#7744
15869|We are closing the original file MyClass.ts and open the new file MyOtherClass.ts in terms what we send to the tsserver. Since the error is reported by the tsserver moving to TS project.
15870|@johnliu2016 Thanks!
15871|Hard to say. Most of the time it is a file layout thing as well. Can you try another thing. Can you run the tasks by pressing Ctrl+Shift+B and then show the output of the Task (Shift+Ctrl+U) and attach it here.
15872|Let's see how @daviwil wants to handle it.
15873|@weinand check it out and let me know what you think. I will also create a test plan item for this. Here it is #4819
15874|@Tyriar is this available in the current release? There was an update recently but it doesn't seem to include this (guessing it'll be in the next update?).
15875|Dups #4449
15876|+1 copyLinesDownAction and copyLinesUpAction are not the same! what we want is `copySelectionDownAction`  and `copySelectionUpAction`
15877|This has been fixed as part of #4792
15878|Not sure about @egamma case but @joaomoreno case is because of ownership. With Salsa we now validate the files with tsserver and no errors are produced. Since eslint-stylish uses the owner javascript Salsa clears all JS errors. May be for JS linters we should use a separate owner.
15879|This is a workbench concept that all globaly handled errors are shown to the user via message service are also logged to the console. In this scenario you would only want them to be shown in the message service. However we do not have that notion for the errors that are handled globaly by the workbench. @bpasero or am I missing something?
15880|Closing until user provides more details.
15881|My example is using .ts files and tslint.
15882|Thank's
15883|@delmyers if I understand correctly, you would like some more UI affordance to show the user which thread is currently stopped. If there are multiple threads, instead of showing 'Paused on breakpoint' we could say 'Breakpoint Thread {name}'. Or you had something else in mind?  Would you like to make a contribution for this or should we look into this?  ![screen shot 2016-03-31 at 12 05 01](https://cloud.githubusercontent.com/assets/1926584/14172540/d4fe6cbc-f738-11e5-9587-a04a90c7a093.png)
15884|SOLVED !: I never thought that warning could make the pretask fail.  I had such warning:   ``` daslicht:radio1 daslicht$ tsc  typings/main/ambient/bluebird/index.d.ts(21,13): error TS2300: Duplicate identifier 'Promise'. typings/main/ambient/bluebird/index.d.ts(358,11): error TS2300: Duplicate identifier 'Promise'. typings/main/ambient/bluebird/index.d.ts(670,19): error TS2300: Duplicate identifier 'Promise'. typings/main/ambient/es6-promise/index.d.ts(14,15): error TS2300: Duplicate identifier 'Promise'. typings/main/ambient/es6-promise/index.d.ts(45,16): error TS2300: Duplicate identifier 'Promise'. ```  After removing bluebird and all its dependencies the task is running !   :dancer:   Thank you !
15885|I agree we should add a hover to make the user experience nicer.  As for the squiggly being green and not red the JSON schema does not allow me to do this. Please create a feature request against @aeschli  I know Martin's point is that he is not showing this in red becuase the JSON syntax is not broken.
15886|Yes, we typically rather spam the dev console with anything that ends up in errors land.   Can you point to the code in debug land that logs these errors? We can maybe add another flag to explicitly bypass the logging to dev console.
15887|"@stevencl I think we need your help with the UX for this:  ![2016-03-31 13-56-02](https://cloud.githubusercontent.com/assets/1898161/14174972/604107e4-f748-11e5-9f98-5e664410ec28.png)  I think we should at least use a different font face, e.g. Italic to make it clear the ""Load more stack frames"" is not a frame but an action."
15888|I think I can investigate the `characterHardWrappingLineMapper.ts` to provide a correct CJK-aware wrapper with Kinsoku Shori.
15889|@egamma Thnx, it helped with Format Code  > The recommendation is to add a jsconfig.json and to exclude the 'non source' js files. We have improved the documentation, pls give it a read: https://github.com/Microsoft/vscode-docs/blob/vnext/docs/languages/javascript.md
15890|Maybe around line 188:  ``` typescript if (charCodeClass === BREAK_AFTER_CLASS) {     // This is a character that indicates that a break should happen after it     niceBreakOffset = i + 1;     niceBreakVisibleColumn = 0; } ```  We can add another code class `BREAK_IDEOGRAPHIC` and do similar things like this:  ``` typescript if (charCodeClass === BREAK_IDEOGRAPHIC && i < len - 1) {     var nextCode:number = lineText.charCodeAt(i + 1);     var nextClass:number = nextCode < characterClasses.length ? characterClasses[nextCode] : 0;     if(nextClass !== BREAK_AFTER_CLASS){         niceBreakOffset = i + 1;         niceBreakVisibleColumn = 0;     } } ```  To initialize `BREAK_IDEOGRAPHIC`, we can simply write this  ``` typescript for(i = 0x4E00; i <= 0x9FFF; i++) result[i] = BREAK_IDEOGRAPHIC; ...... ```
15891|Hi @aeschli , I will post a code snippet latter, when I go back to my home :smile: , but in the meantime you could see the same behavior using **breakpoints**.   If you set a **breakpoint** inside a function and fold the entire function, the **breakpoint** is presented in the folding line.  If that is the expected behavior, than it's ok... I just thought it should suppress the icon.  Thanks
15892|Hi **@be5invis**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
15893|**@be5invis**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
15894|Erros from the debug adapter are handled [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/node/rawDebugSession.ts#L82)
15895|@rkeithhill I have looked into this and the issue is that the powershell adapter sends the 'initialized' event before vscode sent the 'initialize' call. [Here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L54) we specify that the adapter can send the 'initialized' event at any time. However that does not seem to be the right approach since it can happen that VSCode has not yet recieved the 'capabilites' call, and is not aware if debug adapter supports `configurationDone` request. That is happening in this case, the 'initialized' event comes before the capabilites and VSCode thinks powershell does not support `configurationDone`. If there are breakpoints due to timing all seems to work out fine, since the 'initialized' comes a bit later.  @weinand is investigating what is the right approach to tackle this issue
15896|And where does it reach our code to print it to the console and user?
15897|My understanding was that because I do not handle this error - but I bubble it up, the workbench will handle it. And workbench handling it means - show it via message service and print to console. Am I mistaken?
15898|Right. If you want to handle errors for the user, just use the message service and prevent error bubbling?
15899|Makes sense that I can do it here but I still think some errors must bubble up - like the global workbench actions. Since for those I am not interecpting the error. Though for this case I can do as you suggested.
15900|@eligrey it's in the insiders build, not yet in stable.
