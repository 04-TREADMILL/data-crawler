12901|Thanks for the feedback, @isidorn!  I'll work through it and move the logic to `Thread`. I left a couple of replies/comments.  @felixfbecker, we wanted to support multi-threading in the debug adapters in a more efficient way.
12902|@weinand Thanks for the link!
12903|"@chuckries If a stack frame does not have source information, the debugger UI cannot ""infer"" a location from some other frame by ""walking its callstack looking for a frame that has valid source information"". That would be too much guessing in a language agnostic UI. So if you need this behaviour, just implement it in the debug adapter.  From your screenshot I do not really understand what is the problem because I only see the name of the frame?   @isidorn could you please look into the issue of ""default Source objects sets source available to true"""
12904|The issue is that when the exception goes unhandled and the debugger stops, it does not set the current location.   In this image I have just stopped but I do not know where I am.  ![image](https://cloud.githubusercontent.com/assets/6598594/13713069/07ae6c4c-e77c-11e5-8335-ce3b79c3e820.png)  After selecting the ConsoleApplication.... frame it looks like this: ![image](https://cloud.githubusercontent.com/assets/6598594/13713097/2ecd4e38-e77c-11e5-9ffb-c6602216eed9.png)  I believe that the location seen in the second screenshot should be the behavior when the debugger stops on the exception. The debug adapter should not control this sort of UI feature. It simply hands back a callstack. It is up to the UI to determine from those stack frames which should be set as the active frame. If there is no source info availalbe in frame[0], but there is source info available in frame[1], why would the debugger not set frame[1] as the active frame with the green arrow? The green arrow signifies that this is the current source location for the active frame, but it is not the current IP.
12905|Notepad++ uses Alt+Drag, too.
12906|I still cannot see the relevant information in your stackframes. Could you try to make the Call Stack viewlet wider so that we can see the right hand side of it. Like this:  ![picture](https://cloud.githubusercontent.com/assets/1898161/13713901/9b874c5a-e7cb-11e5-8661-60fa968976b3.png)  >  “The debug adapter should not control this sort of UI feature.”  This is not really true. The debug adapter is an adapter between a debugger API and the VS Code debugger UI. The VS Code debug protocol is a protocol for serving the VS Code debugger UI (and nothing else). It is not a protocol for serving any other tool. The VS Code debugger UI is debugger and language agnostic, that means that the debug adapter has to control how types, values and the structure of variables is presented in the UI. The same is true for other areas of the protocol.
12907|"For those who are remoting into a machine, check if your remoting client has a setting like ""show remote cursor pointer"". That helped a lot for me (remoting from Windows into Mac using NoMachine). Edit: Cursor lags, though. :/"
12908|Essentially <kbd>ctrl</kbd>+<kbd>tab</kbd> with the default keybindings set. However I want it to work when using [`closeFile` and `closeAllFiles` commands](http://www.growingwiththeweb.com/2016/03/simulating-tabs-in-vscode.html) so it behaves like <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> in most tab management systems.
12909|@chuckries after having had dinner, I think I understand now what the problem is. You are not talking about the CALL STACK viewlet (as your first screenshot suggested), but you are referring to the stack frame indication in the editor. You are missing the yellow (or green) line where the exception occurs. Yes, that's a bug. I thought you were missing the source and line information from the stack frames in the CALL STACK viewlet.
12910|"I apologize for not being clear. It seems like you understand my issue now. Thanks!   I simply dug into the code and tried to figure out why the stack frame indication was not being set correctly, and it is from the hard coding of 0 in  ``` ts this.setFocusedStackFrameAndEvaluate(callStack[0]); this.openOrRevealEditor(callStack[0].source, callStack[0].lineNumber, false, false).done(null, errors.onUnexpectedError); ```  This is where the ""call stack walk"" must be done. The frame object simply need to be iterated over to find one that has source. I believe this should set the stack frame indication correctly."
12911|"From User Voice - Maintain indentation level on copy and paste ""When you cut a block of code and paste it somewhere with a different indentation level (i.e. inside nested ifs) it'd be nice to get it properly indented, automatically on paste."""
12912|"From User Voice - Auto indenting line based on language's standard ""In PyCharm, when you type "":"" and press Enter then the next line is automatically indented to the appropriate level according to the chosen language's standard."""
12913|"From User Voice - Tab size per language ""One specific thing that I've came across though: I've set my tab size to 2 in my user settings file. That tab size is honored when I format a .ts or .js file. It is NOT honored when I auto format a .cs file - then it seems to go on a 4 space indent. Is this a separate setting?"""
12914|"From User Voice - CSS / Less indenting ""The only thing that's missing for me is the out of the box LESS indent functionality (all other file types I work with work just fine). I had to install a plugin that auto formats CSS but it's not exactly the same. It's also missing some features like preserving spaces/line breaks and so on... something that should be configurable if you're adding this support. """
12915|"From User Voice - Format issues with C# ""This needs to be added. I want to write my C# code with the K&R style, but every time I try to format it it screws everything up."""
12916|"From User Voice - HTML / CSHTML editing capabilities ""Just look at VS2015's capabilities during editing of an HTML or CSHTML file - replicate that."""
12917|"From User Voice - Auto formatting ""It should pick up the type of language based on the choice you made at the bottom right of the screen. If I open a .log file for instance that has xml in it, I would like it to autoformat to the xml setting I changed it too. using the editor.action.format ONLY works based on the file name not what I have told it the contents are. Definitely should appear on the context menu"""
12918|Currently there's no auto-indentation for CoffeeScript (e.g. function, condition, and loop bodies), and in some situations tab key produces 4 spaces in a 2 space file (default indentation settings).
12919|Of course reading it is optional, but it's very existence seems to support the idea that adding tabs in to VS Code is optional and that we should be debating it. A simple poll with the following question.  Will you continue to use VS Code if tabs aren't added soon? Yes/No  Would show that Microsoft would lose a massive proportion of it's potential userbase if they don't add it. Which means that from a commercial point of view, even if they have no need for the feature themselves, it would be commercial suicide for them not to do it. Ergo, this conversation is distracting and unnecessary.  Having said that, we're talking about the same company which still hasn't put extensions into their browser. So I guess anything is possible.  In all seriousness, the only conversation should now be about the best way to implement tabs. There is no longer a question mark over whether people want the feature so let's move the conversation on to something more constructive.
12920|The command is `workbench.action.quickOpen`, you can check this by opening up the default keybindings through the command palette and seeing what's assigned to <kbd>cmd</kbd>+<kbd>p</kbd>.
12921|Sure. [The Chrome dev tools lets you modify local storage values](http://stackoverflow.com/a/9404841/261019).
12922|Yes. The new update brings in a new way of launching Code from the command line. Following the instructions will let you update to that. I recommend doing it.
12923|By adding 'r' to the end of line 8 you should be able to recreate the issue in c#, or install my plugin and attempt to update multiple versions in a package.json https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens  ``` cs public class Main {   int someNumber = 0;    public void run1()   {     this.someNumber++;     this.someNumbe     } } ```
12924|@SofianHn Thanks a lot, Sofian!
12925|Autoformat like netbeans does...
12926|@geomorillo can you be more specific? What exactly does Netbeans do that is missing?
12927|Added one more option to my comment above (**Option #4**).  > ## 4) Highlight the current line number to show edge of gutter.  Decrease gutter width. >  > ![image](https://cloud.githubusercontent.com/assets/11839736/13718363/1d259eac-e79e-11e5-9190-9f77f3e3ef5c.png)  This is a more conservative, leaner design choice because it avoids a big line ruler or a heavy background color as used in option 3.  Sublime also does this approach, and we haven't heard anyone complain about it. ![image](https://cloud.githubusercontent.com/assets/11839736/13718474/2d786702-e79f-11e5-98af-a6825bb2f8af.png)
12928|Having just the current line/selection's left margin illustrated seems too narrow.  When the user is cursoring around fast and looking ahead, they might not be at the line they are looking at.  As such they will have no point of reference for where to go.  Seems like driving with narrow or short range headlights.
12929|@jeffmcaffer i'm curious, do you have this problem in sublime?
12930|I used Sublime for years and never had the issue of thinking there was an extra indent.
12931|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
12932|Why do you think that is? What is different between Sublime and VSCode given option 4, with perhaps some tweaks? i would love to nail that down so that we can perhaps have a lighter weight experience in Code.
12933|"@Tyriar I used the new version of VS Code for seconds and had the problem :-)  It could well be like a new pair of glasses (its my day for analogies).  Everything looks warped but after a week or two its all ok.  Then again, is it good that people need to ""get used to"" their tools?   As for sublime, I've not been using it so can't compare.  Perhaps people who are used to Sublime don't have the problem. For me the problem was completely addressed by @anseki's 0 column ruler suggestion."
12934|"@jeffmcaffer: what if we introduced a left-edge guide as very simple opt-in setting:  ``` {     // Show the left-edge of the code editor     ""editor.leftEdgeGuide"":true; } ```  Would this alleviate your concerns?  I'm concerned about adding this as a default for everyone, because it appears visually noisy for people who have never had a problem without it.  Additionally, we could justify adding the **Option 4** approach in by default."
12935|Would that be the explicit version of adding a 0 ruler?  A bit redundant but better discoverability and reduces the pressure on choice of default (if people can easily find and change the setting). I'm agnostic on Option 4.  It would not bother me but would not likely address the issue for me. Certainly would give it a try if it was there.
12936|"I think that's behaving as expected, unless the default was changed to `-n` even if it's not specified? @bpasero?  FYI here is the usage from a recent build on master, not all of these will work in 0.10.10:  ``` Usage: code [arguments] [paths...]  Options:   -d, --diff            Open a diff editor on two files.   --disable-extensions  Disable all installed extensions.   -g, --goto            Open the file at path at the line and column (add                         :line[:column] to path).   -h, --help            Print usage.   --locale=LOCALE       Use a specific locale, ""pseudo"" can be used to test                         localization.   -n, --new-window      Force a new instance of Code.   -r, --reuse-window    Force opening a file or folder in the last active                         window.   -v, --version         Print version.   -w, --wait            Wait for the window to be closed before returning. ```"
12937|After I download and install  asp 5 and other stuff , and then C# can be download and install, perhaps.  > On Mar 11, 2016, at 10:03 PM, Andre Weinand notifications@github.com wrote: >  > @aaronswiftming https://github.com/aaronswiftming what did you do to make it work? >  > — > Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/4004#issuecomment-195376922.
12938|It seems to work sometimes. I notice it happens when the file in each split editor is the same.  I also managed to get it into a broken state where it refused to close the active file. This happened when I had 3 editors open on a small css file.
12939|This issue was moved to Microsoft/vscode-docs#228
12940|Moved to https://github.com/Microsoft/vscode-docs/issues/228
12941|"I am highly skeptical of option 4. Its effectiveness would seem to decrease with the number of indented lines currently being shown.  The core problem seems to be users not being able to tell where their whitespace is. It's solved in Sublime by its vertical indent guides (which is also visible in the screenshot above), and not by highlighting the line number. In my opinion, the best solutions for the issue are: 1. Indent guides    - Pros: Works no matter the number of indents.    - Cons: Probably can't be implemented this close to release, also somewhat clutters the text area but could be turned on/off via options. Which may actually end up being a pro if this isn't a problem for those using 4-space indents, since they would see no change. 2. Use a different gutter background color    - Pros: Relatively simple to implement, better than a hard border (see below).    - Cons: Only indicates where whitespace for the first column starts. 3. VS-style folding lines    - Pros: If you're going to put something in that's effectively like a border, it might as well also solve the ""how much is this button going to collapse my text"" question.    - Cons: Only indicates where whitespace for the first column starts. 4. Add a border to the gutter    - Pros: Relatively simple to implement.    - Cons: It's a border (see below). 5. Set `editor.renderWhitespace` to true.    - Just kidding. No one shows this. It does solve the core problem without a border though!  \* This assumes a strategy of ""no color change or borders > color change > border"" in order to limit the creation of perceived UI sections."
12942|Duplicate of https://github.com/Microsoft/vscode/issues/178
12943|Ping @aeschli
12944|+1
12945|"In my case:  I'm using Sublime few years. I felt dissatisfied with undistinguishable indent. Then, I use `draw_indent_guides` and `draw_white_space`.  ![s01](https://cloud.githubusercontent.com/assets/4763469/13721643/53c8fc7e-e870-11e5-83ad-46eeabf9c113.png)  ""2 spaces indent"" also might be the cause of this issue...  I often look at another part of code without changing current line. Therefore I hope that the edge of code area (i.e. all lines) is indicated. I think that it is solved by just a little changing a background color of gutter. (no border line)"
12946|Two more actions performed in the 2nd window that have the same effect: Opening a folder, and closing a folder.
12947|When I am writing a line, of course current line is here. But I know indent at here before the current line marker indicates it, because I made that indent just now. When I am reading a code that was written, I may lose indent, and current line may not be here.
12948|"Powershell (I suspect this may be the same for other languages): Heredoc text is not folded as the end tag must have no white space before it. Often heredoc text has no leading whitespace on any line.  Here is the code I used for testing:  ``` function FunctionName  {     $a = @"" This is some sample text to  demonstrate a code folding issue withing VS Code.  ""@ } ```"
12949|Is there an easy way to update these grammar files separately?
12950|Browser extensions? Activ... NVM.
12951|"Honesty i see no reason for tabs. The love for tabs is just too damn up. In terms of getting actual work done shortcuts do everything needed , with search by regex, more metadata and a far better steam lined work process. They provide a basic esoteric need for, i dont know, something familiar. I get the feels like this is just a push to see if ms will serve the community, to see if they really are changing. Although not as pointless as the whole uppercase text in vs issue.  In terms of what was said earlier.  ""I don't think it takes time away from other improvements""  Personally i think it does , like for instance creating the ability for extensibility on the text editor window, so that extensions can be made for anyone wanting tabs. I am pretty sure the whole idea of vscode is to keep it as minimal and lightweight as possible, with the end user either adding extensions or extending it."
12952|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/112
12953|Afaik VS Code doesn't include a PHP debugger, so in case you are using my extension, you might want to move the issue to https://github.com/felixfbecker/vscode-php-debug
12954|Is git in your path? Eg can you run `git` from the command line?
12955|@4tron, of course there is conspiracy of the evil community to test microsoft here! Isn't there always one?   If tabs made any sense,  we would see other  editors using them. And if it was a really good way to organize multiple open content, maybe other kinds of software that have this need to organize multiple open content, like say, browsers for instance, would use them too. But of course they don't, because they don't make sense! Can you imagine something people use all the time like browser using tabs? Nonsense!  I say let's play safe. Let's first wait and see if some other good editor supports this new feature so we don't waste time and effort on something that doesn't actually work. Let's check visual studio, intellij,  eclipse,  atom,  sublime, monodevelop,  notepad++ or any other one that has a considerable user base. Once at least _some_ of these editors support this feature for a couple years without replacing it for something else,  then there will be some indication that this is an useful feature.  But let's not get ahead of ourselves. We need to have something like an issue tracker where people can express that desire directly and maybe let other people vote, so we can really make sure we're not doing this for nothing! We can only take action if it becomes one of the most requested features in the repository. Then we will know that it's not only a trend, but people found it useful for their daily work and want that feature here too.   But until that day, let's wait patiently. Text editors are brand new thing and nobody actually knows what kind of features are needed.
12956|> PowerShell here-string breaks folding logic.  > Here-string end marker must be placed on first column of new line.  the same thing happens with PHP heredoc.  Also, sections in INI files cannot get folded by indentation
12957|Please consider to also add a snippet for npm scripts, many people use them.
12958|Until you can select more than one page, could you maybe implement https://github.com/Microsoft/vscode/issues/3974 so at least the whole output could be copied at once, directly? I am also often in the position that I ask people to send me their logs and they cannot...
12959|I would also like to see this. Sometimes you want to quickly toggle this on and off. It makes sense to have a default setting but similar to how you can quickly switch between spaces/tabs now, a wrapping icon would make sense. For example, in Markdown / plain text I mostly want wrapping, while in code I don't like it.
12960|Afaik you dont need to escape new lines in PHP
12961|Ghehehe, hilarious!  Op za 12 mrt. 2016 om 11:57 schreef Natan Vivo notifications@github.com  > @4tron https://github.com/4tron, of course there is conspiracy of the > evil community to test microsoft here! Isn't there always one? >  > If tabs made any sense, we would see other editors using them. And if it > was a really good way to organize multiple open content, maybe other kinds > of software that have this need to organize multiple open content, like > say, browsers for instance, would use them too. But of course they don't, > because they don't make sense! Can you imagine something people use all the > time like browser using tabs? Nonsense! >  > I say let's play safe. Let's first wait and see if some other good editor > supports this new feature so we don't waste time and effort on something > that doesn't actually work. Let's check visual studio, intellij, eclipse, > atom, sublime, monodevelop, notepad++ or any other one that has a > considerable user base. Once at least _some_ of these editors support > this feature for a couple years without replacing it for something else, > then there will be some indication that this is an useful feature. >  > But let's not get ahead of ourselves. We need to have something like an > issue tracker where people can express that desire directly and maybe let > other people vote, so we can really make sure we're not doing this for > nothing! We can only take action if it becomes one of the most requested > features in the repository. Then we will know that it's not only a trend, > but people found it useful for their daily work and want that feature here > too. >  > But until that day, let's wait patiently. Text editors are brand new thing > and nobody actually knows what kind of features are needed. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-195715795.
12962|"@nvivo Are you really comparing a browser to text editor right now? I understand your overuse of sarcasm here, and it's great. The point i am trying to make is not one of whether tabs are useful or not. I like the idea of a lightwieght / minimal editor. This is just my opinion , I like the idea of the editor being extensible for the user based on their user preferences . That is what i want vscode to be working on. Then we can move this discussion to ""Why has no developer created an extension for this yet .. oh maybe i should because i like tabs and i would like that in this , and vscode can do that so yay, now i have a text editor that is similar to my browser"""
12963|"@4tron It looked to me like he was also comparing text editors to text editors. I think they're doing a great job at making vscode extensible, but I'm firmly in the camp that considers tabs should be an out-of-the-box feature. This notion ""Oh, you like tabs like all the other software you use? Google the problem, find recommendations explaining how to install the appropriate user-contributed extension, and you're good to go!"" doesn't fly. I imagine most users just expect tabs exist, and I strongly doubt there are very many people who would think that you'd find a tab bar by installing an extension. I'm pretty sure that's not precedented by any other piece of software ever. Why would people think to do that?"
12964|@TurkeyMan  His rhetoric did start with a comparison to browsers.  We are talking about developers here. I do think they would have the initiative if they wanted tabs. I am sorry i am against this idea, but i see no valid reason tabs, I `alt + q` in vs all the time.I just dont see any value added. this is my personal opinion , and maybe im crap dev for not understanding how tabs are suppose to be useful. I think this conversation is verbose and personally i would like to see vscode being opened as an isolated shell for almost complete customization and even business based models ie. where someone could enhance the customization to a focused degree for say drupal development or wordpress developement where the editors build is based around the ecosystem of the users codebase . That too me seems like a better problem to be solved.
12965|The downside to everything being an extension is you end up with weird undesired interactions between them. In vs code already using GitHistory on top of Smart File Reopener causes weird file closing issues.  Something as basic as tabs should be out-of-box. Now, as others have requested in this thread, opening groups of or creating relations between tabs is where extensions should come into the discussion.
12966|@4tron, It was funny, but I'm dead serious on the point.  External compiler services are something you may decide or not to support in a text editor. Integrated task runners are a nice to have feature.  Tabs are not in this class. Tabs are like windows, buttons and opening and saving files. There is no decision to make here, just have them there and move on, people expect it. This is not an advanced  custom thing that few people want to be supported by plugins, they're standard UI in _any OS everywhere_. People are used to it, and there is a reason why every other possible editor didn't require a petition to add them.  **And this is why discussing if tabs are good or not is stupid.** VS Code is not an UX experiment, it's an attempt to have a good .NET editor for all platforms. Make this damn thing useful for 90% of the people and you will succeed.  I honestly get your point about alternatives, but you just need to understand you're a very small minority. Believing most people asking for this are just trolls that want to test microsoft is just delusional.
12967|That point about it being a call to see if ms would change its stance on tabs , was half hearted, mainly because of the passion for tabs to be included. To the point where someone would not even try the editor because there were no tabs. I struggle to understand this. Lets not forget that it is still in Beta. So hopefully they will add tabs ( as optional please ).
12968|@4tron I tried it many times, and I don't use vscode regularly because it doesn't seem to scale to large projects well, and missing tabs is one of the main practical reasons that seems to be true to me. I mainly use it as a light text editor when I'm editing a small number of files, but as soon as I want to work on one of our large projects, vscode just doesn't work. Missing tabs, and the fact there's no notion of sub-projects (or 'solutions' as VS puts it) are the only blockers I'm currently aware of.  I just want to comment on this idea of adding everything with plugins though. That's a nice goal; having a great extension framework is important, but I think they need to be cautious about over-committing to that idea. I use VS, and while it drives me nuts, I find that I'm attached to it because it has a very high level of product quality which is what I expect from an MS product. I've tried every OSS alternative out there (and other proprietary tools), and they all just seem to fall short on the basic usability front (particularly when it comes to debugging experience). I **really** hope that the intent of vscode is not to be a light shell that everyone hacks features into randomly via extensions... there are already many other tools which fit that description, I don't find yet another one to be compelling. What I want from vscode is what I've always wished from VS; to be well designed from a usability perspective by professional UX designers, and to be CROSS PLATFORM.
12969|No sorry, no easy way. I will notify you when the first March build for insiders is ready (should be next week).
12970|Sorry for the delay, @Tyriar, you are right, that's the right fix. This Boolean is no longer needed, as always true, so I removed it. #2116 is now fixed. Thanks for your help!
12971|Hy coul you be a little more specific with developer console? you mean  F12 and inspect element?  On 03/11/2016 10:28 AM, Benjamin Pasero wrote:  > @VictorIancu https://github.com/VictorIancu something in the  > developer console when this happens? >  > — > Reply to this email directly or view it on GitHub  > https://github.com/Microsoft/vscode/issues/2512#issuecomment-195255026.
12972|@chrisdias ok, thank you. #4070
12973|I think those that are against tabs may be missing the point. I (we) do not want an all or nothing solution. All we are asking for is a simple option to turn on tabs (they can be hidden by default) that look and behave like those in the popular Atom editor. If you don't like them you will never even know that they exist. If you do then they can be enabled. And for those that have never used Atom and the multi-pane + tabs experience, I suggest you try it before completely discounting the argument for them. You may not like them, but you have to admit that they _are_ useful for many of us. If not for the excellent node.js debug capability of VS Code I would use Atom exclusively. I don't mind the working files. I think they can be useful, however, they do not make a good replacement for tabs and they are not really an alternate way of doing the same thing. It's like saying _You have a Honda Civic, why do you want a pickup truck?_ Well try loading 1200lbs of bamboo tongue and groove flooring into the back of your Civic and you'll see why. Both are vehicles but serve different purposes.   Like I said before, take tabs out of Visual Studio, Edge or any other Microsoft product for one release and see the reaction. It won't be pretty. We _can_ all have it both ways. We are asking for tabs to be an _optional_ not a required editor component. Can time be better spent on other editor development? Sure. Critical bug fixes and improvements that block use of the editor should **always** come first. However, I'm sure there have been a bunch of features added that do not rise to the level of being a critical improvement or fix. So if time is spent on those then there should be time set aside for a feature that the vast majority on this thread are asking for.  We love what VSCode has become in recent months and we are this engaged in this topic because we want it to be the best editor available. There is no room for negativity here. We are all passionate about what we want/don't want as developers. Nobody has a wrong opinion but opposing opinions must be honored as such and not simply discounted because you feel they are invalid.
12974|"I don't think there is a lot of ""passion for tabs"". What happens is that after @bpasero stated ""[I do not think tabs are a good way to show the list of open files](https://github.com/Microsoft/vscode/issues/224#issuecomment-166318985)"" and ""[So far I have not yet heard a good reason for tabs](https://github.com/Microsoft/vscode/issues/224#issuecomment-166834286)"", people will get more vocal trying to justify the request to the main project committer.  I'm amusingly frustrated to see all this discussion, and I'm a little bit offended because I use VS Code daily in my work and I want to have a good .NET editor on mac and linux, and I miss tabs a lot, and I didn't get that ""_wow! this is actually more useful_"" moment, but the response here seems to be ""_you just didn't realize we created something amazing! give it time and get used to it!_"".  Here are some actual issues I see by using VS Code daily for a couple months: - it makes no sense to me click the close icon in the window but keep the file in that list - I have to constantly keep cleaning that list manually to have a list where I see only the files I'm actually woking with - and the files I work with are not last ones I open or the ones I'm changing, it's the ones I want to keep open at the same time - it makes no sense to me to close an unsaved file and have it on that list with a marker - many times a day I do something, and the change is not reflected in the app because I closed the file and VS code didn't ask me to save it, which makes me waste time - one click opens the file, but only double click to put the file in the recently used section - so, I constantly open files that don't appear there - and then my muscle memory finds it easier to add or remove a space in the file then scroll to the file I'm looking at again and double click it - I find it annoying that you can't see the scrollbar once the list fills up unless you hover over it. Now, this is complicated because that's how the UI works in the editor. But see, I know the project and I know there must be more files in the folder view. I also know the structure of code, so I know there must be something more in the editor pane. But with the recents list, I have no idea. ""Is it full or did I forget to open that file? Didn't I open that file 1 minute ago? Let me open that file again...""  Now, I see that most of this would be resolved with an argument like ""_oh, but you're missing the point, it's a recently used files list, not an open files list. You are comparing it to tabs, and there are better ways to deal with open files. After some time you start to..._""  To which I'd gladly respond: ""_This whole thing doesn't make any sense to me and is actually making me unproductive. There is already a solution that works everywhere for decades. I don't want to fix something that was never a problem, and I honestly don't see this new solution as a better alternative. Can we just have something familiar that works and we're all used to? Thank you_""  I know all of this sounds arrogant. But I bet this is what most people are thinking but are either too shy or too polite to say.  Experimental UIs are great as alternatives and I'm all for having an option to switch between the two. But this is currently a forced experiment that prevents the other option, which is the most common and expected. And just like the Windows 8 Start Menu there is no way this ends well."
12975|"> To which I'd gladly respond: ""This whole thing doesn't make any sense to me and is actually making me unproductive. There is already a solution that works everywhere for decades. I don't want to fix something that was never a problem, and I honestly don't see this new solution as a better alternative. Can we just have something familiar that works and we're all used to? Thank you"" > ... > And just like the Windows 8 Start Menu there is no way this ends well.  I couldn't agree more."
12976|As code folding was once the most voted for feature, [so now is tabs](https://visualstudio.uservoice.com/forums/293070-visual-studio-code). The vscode team gave us folding.  I'll be surprised and dissapointed if tabs never come to fruition given the great track record of the vscode team's inclusion of top user requests in light of Microsoft's refreshing participation in the open source community.
12977|"@ianwesterfield Exactly, it's the top requested feature with thousands of votes. It's going to happen. This conversation is pointless and needs to move on to ""How exactly should tabs work?"""
12978|I commented before on the existence of a near-perfect implementation of tabs: Atom. They are easy to organize, have proper display of partial file paths if two tabs have the same file name and work extremely well in a window with multiple horizontal and/or vertical panes (which I think is another needed feature of VSCode). If VSCode had the same tab features as Atom, I think that would cover 99% of what everyone is asking for. And since Atom is also electron-based, implementation can function equally as well in VSCode. I'm not for a copy-cat solution of anything, however they (Atom) have done a great job implementing tabs and what they have is an excellent solution in that respect.
12979|There is an action to toggle word wrap in the View menu and there is a short cut - closing.
12980|Duplicate of #3804.
12981|Duplicate of #3894
12982|@jon64digital Maybe it's just me, but I think what prevents this conversation from evolving is a sense of frustration. This request is still unassigned in backlog, even with 6k+ votes and a vaguely worded reference in the March 31 iteration:  >  Improve the document management, stacking behaviour of editors  That feels like we still have to repeatedly justify the existence of tabs, let alone their behavior. At the very least, I suppose, that reference is one of three to **Eliminate Adoption Roadblockers**, but it's now March 12...  With that in mind, I think if they were to at least assign it to someone we could rest easy in what @waderyan said earlier and perhaps then the conversation can begin to evolve.  **EDIT** Maybe this lack of commitment from the VS Code team is a misunderstanding - after all the March iteration plan hasn't been updated since January 7.
12983|"I may have some more information. I have a large project with many JavaScript files. I also usually have several Code instances open on different projects directories. I'm starting to get ""Too many files open"" errors and Code will become confused. Sections of the editor display won't update and CPU usage seems high. Restarting Code seems to clear things up. Could it be that Code is not closing files?"
12984|@jayrosen1576 I agree - and I think the 1% of user requests that wouldn't be covered could then be addressed through extensions (e.g. opening files with relations in tabs groups, etc.).
12985|lol totally overlooked that
12986|I've recently seen VS Code (0.10.10-insiders) F5 attach hiccup - do nothing, or take an unusual amount of time in doing it - in OSX (10.11.3). Sporadic, so can't include steps to reproduce, but will comment further if I find a situation where it is.
12987|Just a personal preference: I think the existing behavior is perfect. `code` over and over focuses the already open editor, however opens a new window if I `code /someotherpath`
12988|"Yup - this is an issue with JS as well. Pretty annoying really.  Can't say this is a theme issue since, as you can see in the screenshot, the subsequent lines are not marked with ""string"" after the escaped first line:  <img width=""1440"" alt=""screen shot 2016-03-12 at 2 10 57 pm"" src=""https://cloud.githubusercontent.com/assets/15803541/13724727/7b88bb50-e85c-11e5-9c1b-d7d128b9c064.png"">"
12989|@felixfbecker You don't need to, you can, and most would say use `.`, but the problem here isn't coder preference. Rather, it is that `escape` isn't carrying `string` and other classes into subsequent lines.  @aeschli maybe removal of `php` and add `help-wanted` tag?
12990|@bgourlie @ghost This is now done on master, three styles (line, block and underline) can be set via `TextEditor.options`. Please also see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code
12991|@jpoon  Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code - it shows how to capture typed characters (not through keybinding rules).
12992|@aioutecism This is now possible on master. e.g.:  ``` javascript vscode.commands.executeCommand('setContext', 'isVimInsertMode', true); ```  Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code.
12993|@snowiow @guillermooo Thank you for your patience with this.  Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code - it is a sample that shows how to capture typed characters (not through keybinding rules).
12994|@jpoon Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code. It delegates typing back to the VS Code editor when in insertion mode.
12995|@guillermooo Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code - it shows how to capture typed characters (not through keybinding rules).
12996|Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code
12997|Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code
12998|@74th   Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for VS Code - it shows how to capture typed characters (not through keybinding rules).
12999|For those interested, I think the API on the vscode side is good enough now (on master) to support a good vim emulation extension.  Please see https://github.com/alexandrudima/vscode-vim if you are authoring a vim emulation extension for a sample using the new API.
13000|@jayrosen1576 Does atom allow you to link files so that you can have a split view which (for example) opens toolbar.html in the first frame, toolbar.js in the second and toolbar.css in the third?  This is just an example but it would be absolutely ideal. Somebody above said that Vim can do this but I checked out vim and wasn't keen on it for a number of reasons, but the tab thing sounds superb.
