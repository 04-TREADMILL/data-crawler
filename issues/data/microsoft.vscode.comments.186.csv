18501|"And yet in Omnisharp, they are saying the ""fix"" has been merged in, and yet it is still broken."
18502|@bpasero  I want to open multiple files by the way of multi-window, such as sublime text
18503|What is it you're looking for? After looking more closely at my PATH yesterday, it does have multiple git.exe locations, all within C:\Program Files\Git
18504|I'm not sure that `code --disable-extensions .` disables extensions, because I can still see extensions if i type `Show Installed Extensions` into command line  So my previous experiment may not have been clean.
18505|One other observation - I can see that when I hit `[Enter]` cursor goes to where it should be.. and then immediately goes to beginning of line.. :(
18506|@biij5698 you can do File > New Window and open files in there? Can you explain your scenario better?
18507|![folder](https://cloud.githubusercontent.com/assets/962340/14678647/9963bc14-06e4-11e6-8d9a-708813fa9703.gif)  maybe one of my addons is doing it. will test again with fresh install asap.
18508|@rakkarage yeah maybe, what is inside the folder?  Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions`
18509|I'm not going to paste my full %PATH% here but at the end there's:  C:\Users\jaakk_000\AppData\Local\Programs\Git\cmd;C:\Program Files (x86)\Microsoft VS Code\bin  Does a 32-bit (?) VS Code work with 64-bit git?
18510|.browse.VC.db https://marketplace.visualstudio.com/items/ms-vscode.cpptools this causes it :) thanks
18511|@rakkarage so what kind of file does it put in there?
18512|This is an issue with TypeScript. For JavaScript this actually works a lot better then for TypeScript despite using the same language service...
18513|This issue was moved to Microsoft/TypeScript#8218
18514|"As another data point, just yesterday I had Visual Studio **2015 Update 1** stage 3 files for deletion. Git version 2.7.2. Windows 10 Version 1511 (OS Build 10.586.218).  I had modified and committed 3 files in git locally, and I did a pull (within VS 2015's Team Explorer window) that also had the 3 files modified. Instead of merging them, it deleted them from the local file system. I **DID** have VS Code open at the same time, but I don't know if that is related.  ""git status"" locally had this output:   ``` $ git status On branch cross-cloud Your branch and 'origin/cross-cloud' have diverged, and have 1 and 1 different commit each, respectively.   (use ""git pull"" to merge the remote branch into yours) Changes not staged for commit:   (use ""git add/rm <file>..."" to update what will be committed)   (use ""git checkout -- <file>..."" to discard changes in working directory)          deleted:    shared/db_common.sh         deleted:    shared/vpn_common.sh         deleted:    shared/vpn_final_updates.sh  no changes added to commit (use ""git add"" and/or ""git commit -a"") ```  I used ""git checkout -- <file list>"" from the command line to fix this immediate issue.  Then doing a Pull from within VS 2015 did the exact same thing again.  I actually used VS Code to fix this by doing a pull in VS Code, which used its ""merge"" functionality to allow me to merge my commit changes with the remote commit changes.  BTW, I had VS 2013 do this same thing to me once long before VS Code was around."
18515|@dbaeumer I haven't really used run test/tasks much so I'm not the best to choose. Would something closer to debug like <kbd>f6</kbd> or <kbd>f7</kbd> make sense? I think <kbd>f6</kbd> is rebuild solution in Visual Studio.
18516|hard to understand... It can only be that we create an untitled document which then isn't sync over to the extension host...
18517|Moving to May in the hope that the additional assertion provides more insights
18518|Is the ms cpptools extension open sourced?   @bpasero `.browse.VC.db`
18519|Yes, please file this at https://github.com/Microsoft/vscppsamples/issues
18520|"An ""Open current folder"" button under the open Folder button or something equally easy would be a very welcome feature!"
18521|@bpasero I just tried the version you linked, and there is no change in behavior. It's doing the same thing as 1.0.0.  Looks like it still hasn't been fixed in Electron yet.
18522|I guess it is documented in https://github.com/Microsoft/vscppsamples/issues/14
18523|Ok thanks.
18524|I had that on my Linux Ubuntu 14.04.3 x64. I have fixed with the following steps: - I had removed visual-studio-code  ``` bash sudo apt purge visual-studio-code ``` - I had removed everything that was not deleted. I had found this with  ``` bash find ~ -name '*vscode*' find /usr -name '*vscode*' ```
18525|Definitely +1 on this issue :-)
18526|> The DebugService only updates the model with new threads when receiving a ThreadEvent (via a call to rawUpdate).  @edumunoz This does not seem to be true, the debugService updates the model both when receiving a [ThreadEvent](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L275) and a [StoppedEvent](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L245).  So in your case you should not send a 'threads' event to VSCode, a 'stopped' event should be enough. I tried your reproducable case and changed vscode to ignore your thread event, in that case I still can not expand all threads - but I see they are stopped and the C++ adapter returns an empty call stack for them.  To print all the communication coming from the adapter unocmment this [code](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/node/rawDebugSession.ts#L343) please.  @weinand currently we are behaving like described in the api doc. However I am not sure we should send a 'thread' request to the adapter on a 'stopped' event. The 'stopped' event has all the details VSCode needs. Is there something I am missing here, why do we need to send a 'thread' request to the adapter in this case.  Closing this issue for now. Will reopen if @edumunoz still sees the issue, or if vscode does not behave as our documentation specifies.
18527|Asigning to me to investigate
18528|@joewood could you please try to debug the same code with node-inspector?
18529|Duplicate of https://github.com/Microsoft/vscode/issues/2465
18530|@otbe While I wait for a proper release, how do I set `useCaseSensitiveFileNames`? Thanks!
18531|This is an Electron issue https://github.com/atom/atom/issues/10732
18532|@bpasero what are your thoughts on getting this in for April? My experience with playing around with user data to date is that it seems fairly contained and can be moved without any issues.  The reason I want to do this soon is I'd like to have a set root user data dir as one is required to run under `sudo` (https://github.com/Microsoft/vscode/issues/5561). That would mean that instead of: - `~/.vscode` - `~/.config/Code` - `~/.config/Code-Root`  We could have - `~/.vscode` - `~/.vscode/user-data` - `~/.vscode/user-data-root`  For migration something like this should work in `main.js`:  ``` if the regular config dir does not exists   if the old config dir does exist     copy the old config dir to the new location ```
18533|Today, while building my ts project I found that there are again two version of the ts files and error message is only displaying with one version. Tthat is really confusing me as both the files are identical but VSCode treat them differently. This is really annoying and confusing for end user so please fix this issue.  ![image](https://cloud.githubusercontent.com/assets/17735796/14684399/9e382f4a-06e4-11e6-92ad-63fb12581d0e.png)
18534|@isidorn  we need to send a 'thread' request to the adapter because the 'stopped' event does **not** provide the list of threads. It just has one 'threadId' (which does not even include the thread's name). In order to render the list of threads you need all of them and their names. And this information is not part of the stopped event
18535|Here's the error that it produces: ![multipledebugerror](https://cloud.githubusercontent.com/assets/12900364/14684522/323dda6e-06e5-11e6-844f-7a7aaadaa299.PNG)  The project is [node-js-sample](https://github.com/heroku/node-js-sample)
18536|@KalitaAlexey does this mean you have uninstalled and then installed VS Code again and now extension debugging works fine?
18537|This is closed in 1.0
18538|@weinand Yes.
18539|@vsccarl the `EADDRINUSE` error is an indication that your code tries to listen on the same port '5000' more than once. Please use a different port for the second program. This is not a VS Code problem.
18540|"@jakepearson  Instead of hacking the source of vscode/typescript you can use a nightly build of typescript (e.g. `1.9.0-dev.20160420`) and set `typescript.tsdk` in your user settings of vscode.  I utilize my project version of typescript for that:  ``` ""typescript.tsdk"": ""./node_modules/typescript/lib"" ```"
18541|@KalitaAlexey thanks for trying this. I still have no clue why this problem occurs and why it can be solved by reinstalling VS Code.  @bpasero do you have an explanation?
18542|@weinand It happens to me after I tried **VSCode for insiders** and then installed **VSCode 1.0**. I got insiders from https://code.visualstudio.com/download?insiders=true I got stable from https://code.visualstudio.com/download?insiders=true#stable-downloads
18543|This issue was moved to OmniSharp/omnisharp-vscode#225
18544|Yes, this is a dup of #446
18545|@fantacytyx  currently this item is on the backlog and has no planned date, sorry.  @RobertoMalatesta did you try the `Open Symbol by Name` action (typing # in the command palette followed by the symbol name).
18546|The python tokenizer uses the scope `keyword.operator` for `not` and `in` as well as for other operators such as `+` and `=` In the VS default themes (light and dark) we chose to color these with the default foreground color.  I'd recommend you to use e.g. Monokai or Solorize Light if you prefer the coloring of the operators.
18547|This issue was moved to OmniSharp/omnisharp-server#212
18548|This issue was moved to Microsoft/TypeScript-TmLanguage#146
18549|Would love that too. The Git tab is very handy but this is for another purpose - having colors like in Atom would be very complimentary to see at a glance what's changed and where (with the color propagating automatically up to the top directory). That's probably the feature I miss the most from Atom.  Usually, you don't have 10s or 100s of modified files uncommitted, so it's unlikely to look like a Christmas tree :)
18550|This issue was moved to Microsoft/TypeScript#8222
18551|This issue was moved to Microsoft/TypeScript-TmLanguage#147
18552|The switch is correct. It disables extensions for that specific run.
18553|I tried this on Windows so far. Will try on Mac.
18554|@jrieken: can you please check if you can reproduce this on the Mac. I can't under Windows. Just to be sure. Thanks !!
18555|This comment has instruction where to find the repository: https://github.com/Microsoft/vscode/issues/5330#issuecomment-212319726
18556|To clear stuff up: this happens on any file I tried to open.
18557|It was a mix up: updating by just overwriting yields a broken install, deleting the install and unzipping afresh in the emptied folder fixes the issue.
18558|@weinand got it, there was an issue around this which should get fixed via b06cd81 so @edumunoz make sure to try it with that commit included
18559|"We use the beautify-html library. It has a option '""html.format.unformatted"" that lists all html tags that should be kept on the same line. The default value is the list of elements named here: https://www.w3.org/TR/html5/dom.html#phrasing-content.  You see that 'template' as one of the tags that should not be formatted. To have it formatted, you have to define the setting yourself. E.g.  ``` json ""html.format.unformatted"": ""a,b,br,i,img,input,label,span,textarea,u,text"" ```"
18560|@otbe That worked. Thanks a bunch.
18561|caused by #3008
18562|Very nice pull request! Thanks @differentmatt !
18563|By analyzing the blame information on this pull request, we identified @joaomoreno, @dbaeumer and @bpasero to be potential reviewers
18564|@felixfbecker first of all, sorry for the slow response, this somehow went under my radar. Can you please try to reproduce this issue with the latest alpha vscode available [here](https://az764295.vo.msecnd.net/alpha/939cc3097a2fc3a6f7f10255def4b9618afb3791/VSCodeSetup-alpha.exe) that includes some of the potential fixes for this issue.  If you still see it, please attach a small php sample for which I can repro this. I will then switch to a windows machine and setup the php debugger to investigate further.  Thanks
18565|+1 Please map ctrl+- to editor view, or better yet, whichever view has focus. The icons in the top left changing size makes it obvious that the whole window is just one big webview ... personally, I would not expect the icons to be zoomable via ctrl-+
18566|- added the '.pug' file association - once the new name is established and e.g. the pug-lang.com website is up and ready, we can also rename the extension, the label and the language id.
18567|The build-in default themes do - by design- not highlight variable, method and function references. The dark/light theme colorize however declarations.  @chmln Which custom theme do you use?
18568|This issue was moved to Microsoft/TypeScript-TmLanguage#148
18569|- VSCode Version: 1.0.0 - OS Version: Ubuntu 15.10  Unsurprisingly (it was very unlikely to be platform-specific), the problem exists on Ubuntu too.
18570|Yes, that was intended. It used to be red bold and was IMO not very pretty. Now we use the default color for html tags.
18571|I looks like this is fixed now in 1.0 ![image](https://cloud.githubusercontent.com/assets/6461412/14690287/bbac73e4-074b-11e6-8a1b-29b516aac2ea.png)
18572|closing, assuming my assumption was right. Please comment if not...
18573|Thanks @Ikuyadeu
18574|related to #3008
18575|> Which custom theme to you use?  _One Dark_  I have tried all the popular color themes, and not a single one has colored variables, methods, etc.   Logically, that can be explained by two scenarios: - It is impossible to color variables, methods, and function references - All the color scheme authors are closet notepad fans
18576|![1](https://cloud.githubusercontent.com/assets/11352152/14690555/9bd18810-071a-11e6-92de-57084534303b.png) ![2](https://cloud.githubusercontent.com/assets/11352152/14690552/9bb22dd0-071a-11e6-85a3-60bd9c475373.png) ![3](https://cloud.githubusercontent.com/assets/11352152/14690551/9bb1f89c-071a-11e6-8b70-76169bf985fb.png) ![5](https://cloud.githubusercontent.com/assets/11352152/14690553/9bb3ea26-071a-11e6-8a9f-e93c5a48df2e.png) ![4](https://cloud.githubusercontent.com/assets/11352152/14690554/9bb4de22-071a-11e6-9b59-e58d6d7fc229.png)
18577|"@isidorn Tried the alpha release, but the problem described above still exists (stack disappears, exit ignored). When I try to continue the already-exited thread, my debug adapter sends an error response with ""Unknown Thread ID"". I also noticed another issue in the alpha build that is not in stable or insiders: the TerminatedEvent is ignored too.  Any PHP file will do for reproducing, like https://github.com/felixfbecker/vscode-php-debug/blob/master/testproject/hello_world.php. I would recommend you to use the whole testproject folder as it already includes a launch.json. Just set a breakpoint, select ""Listen for XDebug"" and start the same script twice from the command line, like in the demo GIF. I can assist you in setting up XDebug if you need help."
18578|The root issue here is that https://github.com/Microsoft/TypeScript-TmLanguage does not scope variables and method calls.
18579|That explains it. I see issues like https://github.com/Microsoft/TypeScript-TmLanguage/issues/72 so I surely can't be the first one to notice those shortcomings.
18580|"@joewood since you are the first who reports that node debug ""is unusable in VS Code 1.0"" it cannot be a wide spread issue. Could you please share some details about your problem so that we can investigate.  Since this issue is a test plan item of a feature that will be available in the April release, it would be great if you could file a proper bug against the 1.0 release."
18581|"It appears this only happens for your repro steps if you have `""go.useCodeSnippetsOnFunctionSuggest"": true`.    In that case, the item you are selecting in the completion list is a snippet.    It appears that when there are multiple cursorts, and a user tries to complete on a snippet, VS Code only inserts it in the first location.  That appears to be a bug/limitation in VS Code.  I'll move over to that repo."
18582|Sublime remembers last non-fullscreen window size and restore it when reopen. VSCode won't remember last non-fullscreen window size and atom will restore fullscreen when reopen. I think the sublime's behavior is the best.
18583|This has been corrected in the TextMate repository, but I have not tested the changes in VSCode.
18584|"thanks @lukehoban, here's my full user settings config for reference:  ``` json // Place your settings in this file to overwrite the default settings {     ""telemetry.enableTelemetry"": false,     ""telemetry.enableCrashReporter"": false,      ""diffEditor.renderSideBySide"": false,     ""explorer.workingFiles.maxVisible"": 12,      ""git.autofetch"": false,      ""editor.rulers"": [80],     ""editor.roundedSelection"": true,     ""editor.wrappingColumn"": 0,     ""editor.acceptSuggestionOnEnter"": false,     ""editor.renderWhitespace"": false,     ""editor.folding"": false,     ""editor.quickSuggestionsDelay"": 200,     ""editor.selectionHighlight"": false,      ""files.trimTrailingWhitespace"": true,     ""files.autoSave"": ""onFocusChange"",     ""files.associations"": {         ""*.sls"": ""yaml"",         ""telegraf*.conf"": ""toml"",         ""influxd*.conf"": ""toml""     },      ""go.buildOnSave"": false,     ""go.lintOnSave"": false,     ""go.vetOnSave"": true,     ""go.buildTags"": """",     ""go.buildFlags"": [],     ""go.lintFlags"": [],     ""go.vetFlags"": [],     ""go.coverOnSave"": false,     ""go.useCodeSnippetsOnFunctionSuggest"": true,     ""go.formatOnSave"": true,     ""go.formatTool"": ""gofmt"",     ""go.gopath"": ""/Users/sparrc/ws/go"",     ""go.gocodeAutoBuild"": false } ```"
18585|I made this to get everything working OOTB https://github.com/didierfranc/vscode-react-intellisense
18586|You use  ^P# when you're already knowing what you're looking for.  Its interaction is less immediate than a toggable right column that starting from tsconfig.js lists all symbols in a tree. The latter is a birds-eye view and inspector of the whole project structure. With that you can visually click-inspect an review the shape itself and the functionalities of the Project. Much like any C++ Editor/Rad has for C/C++   > > @fantacytyx currently this item is on the backlog and has no planned date, sorry.  Is this feature really in the backlog with no planned date? The lack of this and of some more effective file manager is a showstopper to VSC adoption on large projects then.
18587|By analyzing the blame information on this pull request, we identified @joaomoreno to be a potential reviewer
18588|I believe this is a duplicate of https://github.com/Microsoft/vscode/issues/3422, @pcgeek86 can you verify with the XML you're using?
18589|Nevermind, I just realised on re-launch, it opened the second window, not the first :( Would be nice if relaunch remembered all the windows I had open though!
18590|#4679
18591|Closing as duplicate of https://github.com/Microsoft/vscode/issues/4679
18592|Haven't seen this personally since then, closing.
18593|"Update to Insiders 1.0.1 now, and changed ""locale"" from ""zh-CN"" to ""en-US"", and then to ""zh-CN"", the command works now:  ![image](https://cloud.githubusercontent.com/assets/3265208/14696016/242c7168-07aa-11e6-9610-950a660cae58.png)  But I think we still shouldn't translate the words, just show what we types:  ![image](https://cloud.githubusercontent.com/assets/3265208/14696092/ce3b52c8-07aa-11e6-9ccf-5f35ef534166.png)"
18594|@Tyriar sure, it's the `c:\windows\system32\windowspowershell\v1.0\en-US\Microsoft.PowerShell.Commands.Management.dll-help.xml` file.  But yes, it appears to be a duplicate, hence the indentation-based code folding.
18595|@LearnShare   Yes, I agree to you. I think the command labels shouldn't be translated. If VSCode team think the command descriptions are necessary, maybe the localized command descriptions should appear following the english commands.  Anyone agree to me?
18596|"Swagger 2.0 defined a $ref as this object shown below, but the code at [jsonSchemaService.ts#L432](https://github.com/Microsoft/vscode/blob/master/extensions/json/server/src/jsonSchemaService.ts#L432) assumes its a string, instead of an object. It crashes on split.  ``` ""jsonReference"": {   ""type"": ""object"",     ""required"": [       ""$ref""     ],       ""additionalProperties"": false,         ""properties"": {     ""$ref"": {       ""type"": ""string""     }   } } ```"
18597|also need to change sidebar font
18598|Although I really like the willingness to improve the user experience, I have a few concerns I would like to put out there. There is this one thing I **really** dislike about atom - I have to leave my keyboard and use my mouse to install extensions. It's only a minute worth of time, but the experience is very jarring, and I have found myself trying to avoid installing packages until absolutely necessary, or trying out new themes at all. This was never the case with SublimeText, which _in spite of_ having a limited UI around extension discovery/installation, makes the experience of using new packages much faster.  Atom has it's `apm` which I imagine would be an equivalent of sublime's approach (but it lacks a discovery mechanism).  I have another flicker of an idea, which largely keeps the same flow as now, but also makes it more easier to read the docs and manage extensions:  ![vscode-mockup](https://cloud.githubusercontent.com/assets/760112/14699398/0fc442a4-07b5-11e6-9529-b6c0ee0a18e6.png)  Basically, a developer presses `ctrl + shift + p` and types `ext install`, the dropdown appears, and he moves to the desired package, and presses <kbd>ENTER</kbd>. This opens up the management page for the package, which has the README (if available) and the INSTALL button already highlighted - thus pressing <kbd>ENTER</kbd> again installs the plugin.  Maybe another action <kbd>Ctrl+Enter</kbd> can be added to do a **Quick Install** (bypassing the above-mentioned flow).
18599|is there a fix for this issue?
18600|@Tyriar happy to accept a PR on such a change and migration.
