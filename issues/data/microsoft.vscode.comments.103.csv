10201|This would be a great contribution! Would you like to [give it a try](https://github.com/Microsoft/vscode/tree/master/extensions/powershell) and submit a PR?
10202|:+1:
10203|@egamma  I finally figured out how to exclude 'tmp' and 'node_modules' correctly (no leading '/' and restart). Completions now show. Before all I got was 'Loading'. No visible crash, but also no useful behavior.
10204|Can you maybe provide a video recording of what you are seeing?  [LICEcap](http://www.cockos.com/licecap/) is a useful tool for this.
10205|@aeschli thanks, can you include your jsconfig.json you used for ember, I'm working on the change notes. I will not forget to mention the restart.
10206|+1
10207|@SetTrend since the VS Code debug console is not a real terminal (a 'tty'), some programs detect this fact and don't try to use colours (e.g. mocha). However, the debug console does support colours. You just have to force your program to output colours (e.g. by using the `--colors` flag of mocha). Alternatively you can use the external console by setting the launch config attribute `externalConsole` to true (remember, launch config Intellisense is your friend ;-)
10208|I also observed this - in my case before you can run the task the file needed to be saved to disk - in that case the tasks would be picked up.
10209|Duplicate of #3022
10210|Here  ![bug](https://cloud.githubusercontent.com/assets/2152815/13259057/319d352a-da6f-11e5-83fa-be0e94b9dec1.gif)
10211|Markdown preview does not show rulers (which is good)
10212|Fixed by #66
10213|Closing this. Please add more information if you have it.
10214|Very COOL. Thanks for the recording!
10215|@joaomoreno I don't think I'll be very efficient at fixing it, since I'm not on the dev team. It would take me quite a while to research the specifics about implementing syntax highlighting for VS Code, and then track down the problem.  My guess is that the problem lies somewhere here: https://github.com/Microsoft/vscode/blob/master/extensions/powershell/syntaxes/PowershellSyntax.tmLanguage#L525
10216|I did this with the unity integration and worked well.  ![screen shot 2016-02-23 at 9 11 51 am](https://cloud.githubusercontent.com/assets/1051190/13259787/c6788ca6-da0d-11e5-8956-190f99438aba.png)  ![screen shot 2016-02-23 at 9 13 00 am](https://cloud.githubusercontent.com/assets/1051190/13259800/d50631f6-da0d-11e5-88b0-96babbe7a602.png)
10217|"@alexandrudima Go files are always indented with tabs, aligned with spaces. So, given your description of the algorithm, I would expect Code to detect tab indentation when opening Go files. — But I suggest a different heuristic: that ""auto"" always evaluate to tabs-for-indent when opening `.go` files, superseding file content analysis.  edit: for the record, using the normal (?) Code build (installed via `brew cask`) I'm still getting the original/broken behavior."
10218|"no file in focus <img width=""996"" alt=""screen shot 2016-02-23 at 9 26 47 am"" src=""https://cloud.githubusercontent.com/assets/1051190/13260287/ac43072e-da0f-11e5-9a76-bcd01e3e077f.png"">  file in focus <img width=""998"" alt=""screen shot 2016-02-23 at 9 26 58 am"" src=""https://cloud.githubusercontent.com/assets/1051190/13260290/b112db44-da0f-11e5-83e9-d4eb43855d63.png"">"
10219|This issue was moved to Microsoft/TypeScript-TmLanguage#97
10220|FYI @daviwil
10221|Duplicate #3301
10222|Thanks for catching this.  I solved a similar issue to this before the test plan, so hopefully it will be a similar solution that I can apply to this. Thanks!
10223|Duplicate #3291
10224|Interesting. From your code snippet, it appears that `configuration` is indeed _captured_ but the theme somehow is not colouring it. Is there any editor theme that colors it? You can toggle between them using the <kbd>F1</kbd>, `Change Theme` action.  ping @aeschli
10225|@seanmcbreen u forgot the checkbox?
10226|I see what you mean by issues with side-effects.  One of the first things I accidentally hovered over was a `Write-Output` command that requires input and if it is not supplied to the command, the command asks the host to ask the user for the input.  Not a good experience while debugging.  I don't think we are going to be able to use `supportsEvaluateForHovers` safely.  I updated the alpha just a few minutes ago and reverted back to the original 0.4.1 PowerShell extension version.  The flaky behavior is still there.  Tips show once and then not again until I step the debugger.  If there is anything I can do to help you figure out what is going on with this approach, don't hesitate to ask.  When the data hover tips work, they're beautiful.  :-)
10227|I talked to Keith Hill on Skype this morning, and he pointed out that this bug is resolved in an alpha build, that I don't currently have access to. I'll close this ticket unless things change after the February release.  Cheers, Trevor Sullivan
10228|"@joaomoreno Actually, you were right. I just tested out changing the theme, and sure enough, it is colored. I never changed the them from the default (didn't even know this was available), so maybe the theme needs to be updated? Re-opening issue.  Despite the naming, my ""default"" theme was actually `Dark Visual Studio`, and **not** the `Dark+ (default dark)` theme.  <img width=""387"" alt=""screen shot 2016-02-23 at 11 23 47 am"" src=""https://cloud.githubusercontent.com/assets/466713/13262058/3c800f70-da20-11e5-906a-afb68bbf9200.png"">  <img width=""367"" alt=""screen shot 2016-02-23 at 11 23 55 am"" src=""https://cloud.githubusercontent.com/assets/466713/13262053/32038086-da20-11e5-91b6-a10a7cd1ab1b.png"">"
10229|Duplicate #3282
10230|Duplicate #3301
10231|I will investigate tomorrow / day after, can you just provide the simplest possible PS program for which this easily repros?
10232|"This comes from the `global-message-list` div (which is styled with a border).  It should be hidden when not being used, but as you can see in your screenshot, it seems to be showing when it shouldn't be; it's showing even when there's no message.  ``` <div class=""global-message-list"" aria-hidden=""false"" style=""top: 0px;""><ul class=""message-list""></ul></div> ```  Adding the class `hidden` whenever it's not showing a message should fix the problem.  @isidorn would you be able to handle this one since it's more logic-oriented?"
10233|Sure, I can look into it.
10234|"Here's the simplest repro:  ``` powershell # Set breakpoint on line 4 (last line) and run.  Hover over $date on # line 3 multiple times.  Hover tips displays only the first time. $date = Get-Date ""Date is $date"" ```  However this might give more insight into why stepping into another scope/stackframe helps:  ``` powershell # 1. Set a breakpoint on the last line of the script # 2. Run the script until it breaks on the breakpoint on `foo 0 5` # Hover over $date - be careful not to move the cursor over other # variables that could display a hover tip.  $date should display # a hover tip.  Move the cursor off and back onto $date - no tip. # Hover over $proc, also no tip. # 3. Press F11 to step into function foo.  Hover over $count in the # function parameter list.  You should see 5, then move the cursor # off and back onto $count, no tip.  Move over to $startIndex - also # no tip.  No move the cursor up to $date and $proc (outside the function). # Now these tips work correctly displaying hover tips every time you move # over these variables.  Move over $date *inside* the function and note it # works as well - every time.  Note: PowerShell uses ""dynamic"" scoping and # NOT lexical scoping so variables from higher up the call stack are visible # inside functions further down the call stack.  Weird but true.  :-) # 4. Continue to step through the foo function to observe only the first # hover tip from a variable inside the function (except $date) works.  $date = Get-Date $proc = Get-Process 'Code - Alpha'  function foo($startIndex, $count) {     $date     ""`$startIndex is $startIndex, `$count is $count""     for ($i = $startIndex; $i -lt $count; $i++) {         ""`$i is $i""     } }  foo 0 5 ```"
10235|Thanks for everyone's feedback.  I just spoke with @chrisdias.  After we reviewed responses from users who have seen the proposed (+/-) icons on issue #2948, we believe users actually like the idea of a (+/-) icon, but that the way we have icon represented is flawed; it's too heavy-weight, strong in contrast and it is aliased strangely.  I'm going to tone down the weight and contrast of these icons and fix the aliasing so they are very light and out of the way.  If we still aren't satisfied with how the icons look by the end of the day today, then let's revert all my changes back to the twisties and we can decide if we want to continue iterating on this later or just keep the twisties.  Thanks again for the feedback.
10236|Awesome. @aeschli, what can be done about this?
10237|Yeah... will probably never fix this. Sucks, but try to find some other way to write that code. Eg:  ``` javascript  const indent = `    `; const template = ` ${indent}bla bla ${indent}bla bla ${indent}bla bla`; ```
10238|I believe `Tab moves focus` is only relevant when an editor is in fact open, since it makes <kbd>Tab</kbd> move focus away from the editor itself. @alexandrudima is this correct?
10239|@bgashler1 for GA we should consider to achieve consistency with the explorer, that is if users prefer +/-we should use them in the navigator too. Having two sets of icons for the same purpose doesn't make sense to me.
10240|@egamma Thanks for the hint. It's an option that `eslint --init` generated. I removed it from the config and updated the gist.  Have a nice day!
10241|@weinand I think the reasoning is because Visual Studio uses +/- for folding and arrows in the explorer.
10242|@Tyriar I understand but that does not mean that we should not strive for some additional simplicity and elegance. IIRC the +/– icons made their first appearance in Windows 95 and they never existed on OS X.
10243|Seems to behave the same as Atom's default wrap-editor as well as the community-based [multi-wrap-editor](https://github.com/lexicalunit/multi-wrap-guide).
10244|@weinand I agree, I prefer the triangles personally as +/- look so busy.
10245|@weinand completely agree on simplicity. Feedback in https://github.com/Microsoft/vscode/issues/2948 was favorable to +/- for expand/collapse so Brad is time boxing the effort to see if we can achieve awesomeness. If not, we will revert back to same as in explorer.
10246|@alexandrudima, I tried to build from source today and the behavior didn't match that of Visual Studio, is that by design? For example `<cursor here>    }` Pressing `ctrl+del` with the above code still removes the `}` while VS2015 doesn't - VS only removes the whitespace.
10247|Created an issue for folding on a single line https://github.com/Microsoft/vscode/issues/3352, including a comparison with atom, brackets and sublime
10248|Based on a quick look at the referenced commit (b505eac92f5d9eaa824085675077c801a7881197) I believe the change only affects `ctrl+backspace` behavior and not `ctrl+del`. Since this issue is now closed it might be best to make a new issue and reference this one.
10249|I think this is intentional behavior since Code doesn't launch two instances for the same folder. Related discussion https://github.com/Microsoft/vscode/issues/48
10250|@SetTrend the debugger only exits if node exits. Node programs have the tendency not to exit under debugging. You will find the same behaviour with node-inspector so this is not a VS Code specific problem.
10251|@alexandrudima Tried it just now and I can't reproduce it either. I havn't updated TCmdr since last time, so it seems something in 0.10.8 update fixed it.  Closing the issue.
10252|Hi **@markymouse**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
10253|Hm, probably I used a different version of vscode engine locally and on server (or I had a newer one locally installed).
10254|Issue moved to [Microsoft/vscode-website #108](https://github.com/Microsoft/vscode-website/issues/108) via [**ZenHub.io**](https://www.zenhub.io/)
10255|Seeing the same thing.
10256|@weinand, very good point about these icons not being a paradigm used in OSX.  As @Tyriar was pointing out, I was merely trying ensure we are similar enough to feel part of the same brand family as Visual Studio.  If we don't like it by the end of the day, then I won't lose any sleep over it.  Being different isn't bad, as long as we are justifiably better.
10257|@joaomoreno I'm using Little Snitch on OS X as a firewall for outgoing requests:  ![2016-02-23 22-54-37](https://cloud.githubusercontent.com/assets/1898161/13268113/fa39992c-da80-11e5-8b85-693ccf0db17c.png)  But I could not see a noticable difference when blocking access to the caching service or even stopping the service for more than 5 minutes.  So i wasn't able to find any problems, but I couldn't see a noticeable speed difference either.
10258|You can also verify with the steps from #3303
10259|Another way to highlight the focus would be to change the color of the active panel.
10260|"I'm seeing this same issue in the latest Alpha build 1.9.0.   Hovering over ""import"" shows ""Parsing error: the import keyword is reserved (null)"". Hovering over ""export"" shows ""export= can only be used in a .ts file.""  ![image](https://cloud.githubusercontent.com/assets/2449568/13269431/dfab69f0-da44-11e5-9429-761c06c780af.png)  I tried creating a `jsconfig.json` file to fix the issue. Here are the contents.   ``` javascript {     ""compilerOptions"": {         ""target"": ""ES6"",         ""module"": ""commonjs""     } } ```  Didn't solve the syntax highlighting issue.   Additionally, I would expect a syntax error that isn't shown. In my example above `<Navigation />` should be highlighted but it is not."
10261|Ahh... I see... Thanks for pointing out the `externalConsole` alternative to me! :+1:   I noticed that the above code doesn't output _anything_, regardless whether I set `externalConsole` to true or false: <br/>  ##### using chalk._color_():  ![nooutput](https://cloud.githubusercontent.com/assets/9283914/13269438/f71250e8-da87-11e5-81fd-89ca08666a5b.png) (no text in debugger console) <br/>  ##### using console.log():  ![nooutput2](https://cloud.githubusercontent.com/assets/9283914/13269585/d65485b4-da88-11e5-8078-cdeb2f4f5a78.png) (visible text in debugger console) <br/> I'm not sure what I'm doing wrong here ... Can you perhaps tell me: is it me or is it perhaps VS Code who's making a mistake..?
10262|Thank's for enlightening me. Would you suggest this is more or less a Node bug? Then I would tend to create an issue there.  I feel it's quite confusing not to safely know whether a program has finished or not. Don't you, too?
10263|@Tyriar that isn't the behavior I'm seeing.  You say for the **same folder**.  The second instance launch attempt could/would be for a totally different folder.  That's the problem.  Folder1 is open in VSCode instance1, trying to open Folder2 for a 2nd VSCode instance from Windows Explorer fails.
10264|@weinand I think adding the source maps property to the template would be helpful. Adjusting the `outDir` value did not work for me. I cannot share this code but when I can I will create a sample which I can share on GitHub to demonstrate the issue.   I am working on a Mac with the latest version of VS Code.
10265|Let me know what you all think of the updates I pushed.  Smaller icons, lower contrast and perfect aliasing.  Hopefully this resolves some concerns.  Another reason why we should use the (+/-) icon is that when we eventually add vertical braces to indicate what chunk of code expand and collapse, the icon will stand better next to the brace because it's encapsulated by a square outline  Since twisties are not contained in a shape like a square, it will be hard to associate each with its paired vertical brace.
10266|So... wait for the next vscode to upgrade to 1.8? @joaomoreno   Thanks --
10267|I'm still a little bit confused by the resolution here. Are you saying users that use nvm must launch VS Code via the terminal in order to have it use the nvm version of node? This is currently the way I have to launch VS Code on OSX to have it use the nvm version.
10268|I tried to do this with CSS, but I think we'll need to make logic changes since CSS cannot easily change the right border of a dynamically sized element, in this case the div with class `.current-line`).  This would probably be safest for one of you to touch this close to release.  Changing this would, of course, affect more than just this theme.  @isidorn, do you think we should change this still, and if so do you know who would be best to assign this issue to?
10269|The only way I can see around this is to put a class on all selected text, so I can style it (and not just the overlays).  Is this possible?  Perhaps we could do that before GA?  Currently, I'm putting a `mix-blend-mode:difference` rule on all text in the editor.  Effectively, this inverts the text color when a white color passes behind it.
10270|@dbaeumer I think I still see this issue. I'm using the latest version with `tsdk` setting.  ![feb 24 2016 13 05](https://cloud.githubusercontent.com/assets/1324476/13276160/5326007c-daf7-11e5-831c-81ee2ef69b45.gif)
10271|Have you tried changing from `ts` to `tsx`?
10272|+1  I was actually surprised it did not update when changing them in the console. Since there is no way to change values by clicking them on the tree, this would be most useful.
10273|@bgashler1 thanks, these look much better.  Can folks who were against +- please take a look and see what you think? Here's my take: - The arrows are more consistent with the Explorer tree. However, we don't indent the arrows in the code as we do in the tree, so it doesn't look consistent. - While the hit area for the arrows is larger than the arrow itself, I still find myself feeling the need to get the mouse right over the arrow before I click. I don't have this feeling with the +- glyph because it is larger.  I feel like i have to concentrate more with the arrows. - and contrary to the above arguments :) the arrows are cleaner.
10274|"Mine runs at 120%+ (not sure about that math, but that's what it says). Fan starts spinning constantly until I kill the VSCode window. Interestingly it seems to happen on one project in particular (a large Node project with lots of files and `node_modules` stuff) and not on others. Not sure what other detail about that might be relevant.  <img width=""458"" alt=""screenshot 2016-02-23 22 02 53"" src=""https://cloud.githubusercontent.com/assets/194167/13276938/3c0eb5d8-da79-11e5-9d9c-8d3ea0005f69.png"">"
10275|This is what my commit will look like.  We cannot use background colors due to contrast issues.  So, I've changed the borders to be colorful.  Note that that the purplish-red against the green is intentional as I also wanted to be mindful of color blind users (both deuteranomaly and protanomaly).  ![image](https://cloud.githubusercontent.com/assets/11839736/13276978/b93154f8-da79-11e5-95f3-8e65a3a5ab41.png)
10276|"You should be able to find ""Visual Studio Code Alpha"" (or similar) on the launcher after hitting the Windows/Super key and searching for the application. I'll double check this works tomorrow."
10277|@chadbr This issue was about the development of VS Code itself. It couldn't be compiled against 1.8.2.  The next VS Code will indeed come with the 1.8.2 **language service**, but that's another matter.
10278|This would not work for languages which do not use punctuation to signify code blocks (i.e python)  Code Folding at the moment uses indentation and so will close everything up to the next line on the same indentation level as the folding line. The implementation would have to change to fold the closing bracket as this would cause issues in some languages
10279|I do not think this is important, it is just my feedback. I would assign it to the backlog and you can look into it in the future when you have time.
10280|Just tested this, and it seems to have been resolved with an earlier commit I made.  Assigning back to you for confirmation.
10281|@jrieken, how does this look to you?  It's gray now, so it's not misleading—in the case that a user is looking at Git output.  It's also lightweight and gracefully avoids becoming a viewlett. ![image](https://cloud.githubusercontent.com/assets/11839736/13278957/2f3762fa-da89-11e5-988e-a8aa49001f03.png)  `.monaco-workbench>.part.panel>.title { border-color: rgba(127, 127, 127, 0.34902); }`  FYI - @stevencl
10282|I can push this change if you're happy with it.
10283|Adding screenshot for reference  ![image](https://cloud.githubusercontent.com/assets/22350/13279102/75f2f410-dad5-11e5-9f8b-091b31f73bc4.png)  They look much _much_ better. I no longer feel the rush to disable this feature.
10284|Update:   when I changed back an `engine` to `0.10.x`, it [passed](https://travis-ci.org/obrejla/vscode-jsthis/jobs/111332293) in Linux Travis, but [failed](https://travis-ci.org/obrejla/vscode-jsthis/jobs/111332292) on Mac Travis.  Thanks.
10285|I added the following to my hosts file:  ``` 127.0.0.1 vscode.blob.core.windows.net ```  and it still works
10286|> Don't agree: the current zoom behavior is exactly what I want.  +1 It's quite a useful feature. Unfortunately zoom level that is set in work session isn't restored after VS Code is closed and the reopened (#291).
10287|As designed?
10288|:+1:
10289|ping @alexandrudima
10290|"> It would be great if these settings were stickier  I agree. Using `window.zoomLevel` setting is not always convenient. I suppose this should be as ""make and forget"" action (a user sets the desired zoom level and just works, and don't have to change settings for such feature)."
10291|Duplicate of #2806
10292|Won't fix.
10293|The prototype has a twistie because it has reference > 0 as returned by the adapter. On the vscode side we expand it lazily which means we only request children once the user clicks expand.  So this might be a feature request that variables with no children should not have reference > 0 Moving to @weinand
10294|@bgashler1 we will discuss this during the standup and if we decide to do it I can push it. Thanks
10295|Not sure I'd label this one as a feature request :), my end user impression is that there is a bug in the hover, in the tree, or in the debugger.
10296|@bgashler1 yes, the icons look better now.
10297|Why?
10298|Merging into #3342
10299|@Tyriar could you figure out an alternative keybinding for Ubuntu?
10300|I adopted the new logic over multiple commits, abfaf52532fd748ef8dca47636b319f1cc6930b0 adopts the new logic for `Ctrl+Delete`. The new logic does the following: - If there is a single whitespace, then it deletes the whitespace + the next word - If there is > 1 whitespace, then it deletes the whitespace
