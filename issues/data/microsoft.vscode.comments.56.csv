5501|`Ionide-webview` is very naive - since Atom allows direct DOM access, it's just HTML iframe showing arbitrary webpage.
5502|Yes now it's working.Thank you !
5503|I am using Ubuntu 14.04.This is the problem: ![proof](https://cloud.githubusercontent.com/assets/16511061/12128211/8bbd4aae-b404-11e5-8a2c-21b05b7f080d.png)
5504|@joaomoreno can we make this issue a feature request and put on the backlog?  the scenario is that i want to create a service which roams my extensions across machines.  I need a way to install the set of extensions outside of VS Code, or within VS Code but by calling some sort of API.
5505|@chrisdias i have found a way check out extension named at visual studio code settings sync. But it would be a good rather then all the things im doing manually externally the api should do the only input i should be providing some unique name or ID
5506|exactly, you should not have to recreate what the tool does when installing and uninstalling an extension.
5507|Aaaaah! Motivation to upgrade.  Thanks!
5508|Here's an earlier issue filed for the same feature request: https://github.com/Microsoft/vscode/issues/547
5509|@isidorn the adapterData is correctly passed within a session, but not across different sessions. So it does not seem to be persisted in breakpoints.
5510|One of the code.exe processes (code#3 in the log, attached) seems to be leaking. Commit started at about 200 MB at 5:30 PM, and reached 460 MB by 9:00 AM the next day, with a constant increase:  ![leak](https://cloud.githubusercontent.com/assets/1674237/12131088/bed3b2b6-b463-11e5-8d4b-2b0145e0c4b3.gif)  Handle count does not go up.  [vscode_memleak.zip](https://github.com/Microsoft/vscode/files/79216/vscode_memleak.zip)  There was no crash this time, perhaps because I did not have as many other memory-intensive programs running. Might be able to test this in a VM with a low commit limit later.  This log was created overnight with 3 large workspaces open in different windows. I'll try to narrow it down to a workspace I'm able to share.
5511|@mosamy: That is more of a work around for the poorly designed, hard-coded, implementation currently provided by VSCode.  A configurable option would be much more appropriate. The fact something like this was hard-coded at all makes me wonder what other hidden gems l'm bound to uncover.
5512|+1, the same question
5513|"Thanks for the suggestion!    There are really two things here - one is factoring our language services out as extensions and the second is what we build into the core distribution of VS Code.  We do build the TypeScript language service as an extension which you can find here: https://github.com/Microsoft/vscode/tree/master/extensions/typescript.  As you say, it is an excellent example of a fully featured language service that anyone can review and learn from.  Today the JavaScript language service is built into VS Code but not as an extension.  Our plan is to [adopt the Salsa project](https://github.com/Microsoft/vscode/wiki/Roadmap#javascript) from the TypeScript team that will enable one language service for both JavaScript and TypeScript.  This will be an extension to VS Code as well which everyone will be able to reference.  Regarding packaging, our current plan is to continue to include the TypeScript/JavaScript language services in the core VS Code distribution. The primary reason for this is that we want people to be productive with building web applications and extensions to VS Code without having to go through the trouble of downloading multiple packages. We consider these two scenarios core to VS Code, so we include them in the distribution.    What we hope to also provide in the future is the ability to download newer versions of this language service from the gallery. For example, let's say there is a new version of the Salsa language service that supports ""cool new feature X"" but it is not in VS Code yet.  You should be able to download the new version from the gallery and update your installation of VS Code to get the new functionality.  I hope this helps explain our thinking, thanks again for the suggestion.  Chris"
5514|"@Elusive138 it would be helpful to understand the details of the process that leaks. Can you find its PID and then print its full meta data using `ps aux | grep <pid>`?"
5515|Ah, maybe this is on Windows, not sure :)?
5516|@lucianFXD so code actually works normally after this point right? You say, the terminal freezes, but what really happens is that the terminal is launching Code and does not return from that process.  @joaomoreno do we have something like code.bat for Linux too so that you can run code and it returns immediately and hides any output? I see https://code.visualstudio.com/docs/editor/setup#_linux but I wonder if that one eats the output and returns immediately?
5517|"@bpasero The command line is:  ``` ""C:\Program Files (x86)\Microsoft VS Code\code.exe"" --type=renderer --no-sandbox --lang=en-US --app-user-model-id=Microsoft.VisualStudioCode --node-integration=true --device-scale-factor=1 --enable-delegated-renderer --num-raster-threads=4 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --disable-accelerated-video-decode --channel=""4896.1.1021371100\1043577992"" /prefetch:673131151 ```  Other details:  ![leaky-process-perf](https://cloud.githubusercontent.com/assets/1674237/12136253/d92c9502-b499-11e5-965c-b22198b975ef.png)  The process tree: ![leaky-process](https://cloud.githubusercontent.com/assets/1674237/12136227/9603608a-b499-11e5-9d52-e4f947e63cd6.png)  This is after another full day of use. As you can see, the process' memory usage appears to have risen linearly in that time (same workspace)."
5518|~~Ah... this isn't even the really bad one. The second-level `code.exe` below it was worse.~~  4772 was the process that leaked overnight. The other one seems to have risen up due to my use during the day... I think.
5519|@Elusive138 this looks like you have multiple windows open with Code is that true?
5520|@bpasero Yes, the test last night had three windows open with different workspaces. I'll be trying it tonight with just one, on a clean Ext JS workspace as mentioned above.
5521|Is there any extension to make it work again? I just have to stay on the lower version, for the vs code is the best ide for php I have ever seen.
5522|Sounds good!
5523|Closing as a duplicate of #132, thanks @Ciantic
5524|Thank you for the detailed repro steps!
5525|Closing.
5526|@msiniscalchi tasks are only available if you open a folder. The underlying reason is that task rely on a .vscode/tasks.json file and this can only exist in a folder case not when editing single files. I fully agree that this should be documented. I will do so for the next release
5527|Went with the approach to migrate this setting into settings.json.
5528|@MartynasZilinskas pls see https://code.visualstudio.com/docs/languages/typescript. In VSCode you can either use /// references or tsconfig.json to describe your project scope. If you want to avoid /// references you need to define the project using a tsconfig.json file.
5529|@isidorn I have extracted `isFullWidthCharacter` in https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/strings.ts#L420 . I suggest we share at least that, I wouldn't try to share the measuring code, as I need to do quite some tricks in the editor case.
5530|@SetTrend thanks for opening the separate issues. I will close this one.
5531|Awesome, thanks!
5532|:+1: backticks are so annoying to type
5533|What OS are you on?
5534|@weinand out of curiosity, what kind of data would that be? Isn't there `sourceReference` for virtual sources?
5535|@alexandrudima @jrieken ping
5536|@dbaeumer @bpasero ping
5537|@alexandrudima ping
5538|Thanks for filing this. I find it hard to understand what you mean by _could let's select to update_. Can you provide more details, or an example?
5539|@jrieken ping
5540|I assume: - this has nothing to do with the execution process - this is related to the buffering of stdout streams of the spawned process.
5541|We are improving the debug hover this milestone  (e.g we are adding a tree for complex variable inspection) so this should get fixed as a part of that. I will close once I verify this is no longer happening
5542|Being able to pass the view HTML to render would be great, as I'd like to make a extension similar to the Markdown one, which would render ReStructuredText in the preview mode just like parkdown does.
5543|@felixfbecker node-debug supports setting breakpoints in inlined source (that is source that lives in the source map which again might be inlined in the generated source). In order to restore these breakpoints on session start, node-debug needs to have enough information in the Source object to find the source map. The  'sourceReference' in Source is only valid for a session and cannot be used to persist 'virtual sources' (see comment in debugProtocol.d.ts).
5544|@AntonAderum Indeed, we don't currently support VKEY_OEM_8 nor VKEY_OEM_102 (see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/keybinding/electron-browser/nativeKeymap.ts#L183)
5545|Duplicate of #243
5546|I can't seem to reproduce.  ![image](https://cloud.githubusercontent.com/assets/22350/12140685/1d9e04b2-b46a-11e5-83f9-2c46638da393.png)  Which version of Code are you at?
5547|What do you mean by _grab_ and _pull in_? Can you be more descriptive? Can you provide a screenshot?
5548|We don't, we should definitely do one.
5549|I doubt if there is some optimization for iterator . It has no effect for the output about the time delay in all Iterator object.
5550|CC @gregvanl I think this belongs to vscode-docs
5551|I'd like to add the following alternative suggestion for coloring the Output panel:  In my above suggestion I was assuming that the error messages are getting emitted from the corresponding task runner's task in color. Looking from today's point of view I believe this was a false assumption.  Here's why:  The error messages sent to the Output panel are supposed to be piped through a so-called Problem Matcher filter. So the corresponding _Problem Matcher_ outputs each part of an error message. Thus, the VS Code implementation responsible for writing a Problem Matcher's output is actually responsible for reasonably coloring the output and knows which part of an error message it is writing.  In this case each part of the error message may be colored by the VS Code implementation responsible for reading/writing a Problem Matcher's output, and colors may be defined for each of an error message's part in the VS Code color scheme itself. No need to adapt any color information from the task runner task that's been emitting the error message.  Moreover, provided that my proposal of a `//# task` pragma comment (#1789) will be accepted, the `problemMatcher` property will assign a Problem Matcher for the output of a task runner's task. So coloring may then be applied there, too. And we can get rid of the (then redundant) `tasks.json` implementation.
5552|@weinand thanks, seems logical.
5553|@bpasero @joaomoreno I don't really see the need for a startup script here if this is just about returning control to the shell or silencing standard output.  If the user wishes to do so, they can start VSCode from the shell (assuming current directory is supposed to be opened):  code . &  This will return control to the shell immediately. If standard/error output is supposed to be silenced, this would be:  code . &> /dev/null &  Probably depends a bit on which camp you're in, personally I prefer applications that are started from a shell to stay attached to the shell (e.g. killable by ctrl+c on the shell afterwards), unless I specify otherwise using the commands described above.
5554|I no longer side this with our new debug hover work
5555|I think so.
5556|Great!  Looking forward to the improvements :)
5557|One potential requirement for this feature is that the content provider should be able to get notifications to refresh itself.  @jrieken's proposed API doesn't include that yet, but is it possible that this could be enabled as well?
5558|+1
5559|This issue was moved to Microsoft/vscode-debugadapter-node#9
5560|@felixfbecker I've moved this feature over to Microsoft/vscode-debugadapter-node#9
5561|"<img width=""1440"" alt=""screen shot 2016-01-06 at 7 36 43 am"" src=""https://cloud.githubusercontent.com/assets/11200966/12144959/626c20fa-b448-11e5-92f0-7087b6fa05c9.png"">  As shown in the picture, I opened my Documents folder, which contains 2 sub-folders, each with 3 or 4 files. However, the git tab shows there are 20435 files that have yet to be committed. From what I can tell, it is showing every file on my computer."
5562|I'm running openSUSE Tumbleweed, 64 bits. Do I need to be more specific?
5563|I'm having the same problem with my express app. Attach debugging stopped working when i updated to version 0.10.5. Launch debug seems to be working correctly.
5564|You must've accidentally created a git repository in your user home folder.  Open a Terminal, and type `ls ~/.git`. This will confirm that. You can remove it with `rm -r ~/.git`.
5565|No need, that's enough. This is **always** reproducible? Given the error message, other things should be crashing down...
5566|@massimocode this is currently not possible.
5567|@daviwil that or the other way around where the provider emits an event to tell the editor to refresh. That would cover the case of `virtual.md` being generated from `on_disk.file`.
5568|"You need to tell the TypeScript language service that you want to use external modules. By default TypeScript defaults to internal modules. The module system used by TypeScript can be controlled by the module property in the tsconfig.json file. For example  ``` json {     ""compilerOptions"": {         ""target"": ""ES5"",         ""module"": ""commonjs""     } } ```  to tell TS to use node's module system."
5569|I might have misunderstood the intent of this feature.  After re-reading your initial comments, it seems like this is to allow an extension to provide a new _text editor buffer_ with dynamically-generated, read-only content, sort of like how Visual Studio can give you a C# buffer with class shapes from an assembly generated from its metadata.  I think I was looking at this as a _rendered document buffer_ which appears to be a different thing entirely.  It seems that @cfjedimaster's initial request was along these lines as well if I'm understanding it correctly.  I suppose we'd need a different API for that?
5570|"Basically, I want to create a panel of content. For my purposes, the content would be something I'd then copy and paste into a blog. So for example, take my source code of <html> and convert it to &lt;html&gt;.  The actual ""panel"" could be read only or not - it doesn't really matter to me. If it was a basic web view then it should support form fields which in theory makes it writeable, but it wouldn't be an ""editor"" though.  Does that make sense?"
5571|Btw, if you get Brackets and my HTMLEscape extension, you can see an example of this in action. I don't expect it to work exactly like Brackets of course. :)
5572|"Perfect.   Thank you!  Cory Johnson 801-360-7864  On Wed, Jan 6, 2016 at 7:03 AM -0800, ""João Moreno"" notifications@github.com wrote:  You must've accidentally created a git repository in your user home folder.  Open a Terminal, and type `ls ~/.git`. This will confirm that. You can remove it with `rm -r ~/.git`.  ---  Reply to this email directly or view it on GitHub: https://github.com/Microsoft/vscode/issues/1817#issuecomment-169346535"
5573|"If you would prefer the term ""autocomplete""..."
5574|@cfjedimaster Ok, the HTMLEscape extension should be possible with it. The flow could be like so:  (1) register content provider for `html-escape`-scheme (2) register command that  (2.1) takes html from an (active) editor (2.2) generates escaped plain text & stores it along an uri with the afore scheme, like `html-escape://this/and/that`,  (2.3) tells vs code to open that document `workbench.openTextDocument(Uri.parse('html-escape://this/and/that'))`
5575|"""stores it along an uri"" - does this mean I need to take the string and escape it for a URL before doing so? Would I have the limit that URLs normally have in browsers (I forget the exact length)."
5576|Another thing that made me sad today is that we have:  `IResourceInput`, `ITextInput`, `IEditorInput`, `IFileInput` which all equal but also different.
5577|It's just that you are responsible for relating the uri to the string content. You don't need to encode it in the uri (for which btw no length contains apply locally), but you could for instance encode an array index, or the uri of the document to generate from etc. Since the uri travels between the main thread and the extension host short is obviously better. Tho, we might derive a UI label from it (TBD).
5578|there should be a command that allows to change the mine, like from the status bar.
5579|Ok. Don't think I grok that 100% quite yet, but when available, I can test. :) As an aside, I'm also happy to test this on a dev build of Code, just let me know. When I was a Brackets user, I used the _heck_ out of my extension as I blog quite a bit.
5580|In theory you can use it off the PR but I'll ping you once it's in master.
5581|Attributing this to Gatekeeper.
5582|Thanks!  On Wed, Jan 6, 2016 at 10:14 AM, Johannes Rieken notifications@github.com wrote:  > In theory you can use it off the PR but I'll ping you once it's in master. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/272#issuecomment-169373515.  ##   #   Raymond Camden, Developer Advocate for MobileFirst at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden
5583|@SteveLasker I am still waiting for answers regarding adding a `language` vs a language feature (https://github.com/Microsoft/vscode/issues/878#issuecomment-168615826)
5584|Here's the screenshot. Looks like after the update, my Git config settings are finally being respected :tongue:   ![screen shot 2016-01-06 at 11 22 49 am](https://cloud.githubusercontent.com/assets/1559447/12147614/d46feaf0-b467-11e5-80eb-3c2ee005d189.png)
5585|What do you mean? You just got the update now?
5586|No, sorry. I mean the last update, when ever that was. Earlier last month maybe? Or maybe even the one before that. Either way, it was fixed sometime during the last two updates.
5587|Can you remove the setting that disables git, make the error appear and show me what you see in the **Git Output**?
5588|Doesn't stop showing this, including loading animation on left ![screen shot 2016-01-06 at 11 37 11 am](https://cloud.githubusercontent.com/assets/1559447/12148014/0e10e780-b46a-11e5-9cf8-4e8fd3fc5084.png)
5589|Are you looking for input from us or the underlying implementation?  Sent from my phone  > On Jan 6, 2016, at 8:16 AM, Johannes Rieken notifications@github.com wrote: >  > @SteveLasker I am still waiting for answers regarding adding a language vs a language feature (#878 (comment)) >  > — > Reply to this email directly or view it on GitHub.
5590|Thank you for your reply!  Do you have any plans for when / if you think you will support those missing VKEY's?  Maybe its something that the community can help out with..  Cheers!
5591|"1. You want to contribute a file pattern to language mapping similar to `*.js -> JavaScript` (https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributeslanguages) but need some more powerful like glob-patterns 2. You want to contribute a language feature like IntelliSense using a DocumentFilter **independent** of the language of a document but purely based on a glob-pattern, like `{ pattern: ""*.js""}` instead of `{language: ""JavaScript""}`.   @SteveLasker, @PeterJausovec Please answer (1) or (2)."
5592|Yes, whenever Git has to HTTP-authenticate with the remote repo. The same bug happens on Debian Jessie. Up to now, other Git features seem to be working. Remote operations with SSH key authentication do work.
5593|Version   ![image](https://cloud.githubusercontent.com/assets/11217948/12149297/934f09b0-b468-11e5-908c-90427f5c917a.png)  Also you typed `return params` but `params` doesn't exist in your function, so that javascript error may be possibly preventing you from reproducing the bug
5594|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/29
5595|This issue was moved to Microsoft/TypeScript-TmLanguage#39
5596|PR delivered, thanks @basarat!
5597|This issue was moved to Microsoft/TypeScript-TmLanguage#40
5598|@jrieken Are you saying there is already a way to do it by sending a command?
5599|:+1: for consolidation, but I'm not sure how.  I originally added `ICodeEditorService` because I needed a means to go from a global context (keybinding dispatching) to the code editor that should receive the command without sticking pointers in the DOM. Since then, I think we also use the `ICodeEditorService` for syncing text editors to the extension host.  The `IModelService` acts as the syncing hub for all text buffers which I think is a lot better than before when the text syncing happened through the modes.  Hard to say where to cut from. Perhaps we should look at the users of `IEditorService` in the `platform` and `editor` layer, I think most of the times `IEditorService` is used for opening things. Perhaps that should be done somehow differently or renamed (e.g. `IEditorService` sometimes opens a web browser and not an editor...). Also `getActiveEditor` is a bit misleading (implies there is always an active editor?) as the focus could be in a viewlet or no editors are opened, in which case I'm not sure what that method returns.
5600|@bpasero Yes  this is the issue .I cannot type other commands in the terminal.
