15701|"you can customize your keybindings by adding the following   ``` json [     {         ""key"": ""tab"",         ""command"": ""tab"",         ""when"": ""editorTextFocus && !editorTabMovesFocus""     },     {         ""key"": ""tab"",         ""command"": ""jumpToNextSnippetPlaceholder"",         ""when"": ""editorTextFocus && inSnippetMode""     },     {         ""key"": ""tab"",         ""command"": ""acceptQuickFixSuggestion"",         ""when"": ""editorFocus && quickFixWidgetVisible""     },     {         ""key"": ""tab"",         ""command"": ""acceptSelectedSuggestion"",         ""when"": ""editorTextFocus && suggestWidgetVisible""     } ] ```  This will remove the emmet keybinding but give you back the other TAB related bindings.  We will look into making this easier."
15702|Do you have some errors shown in the lower right corner of your screen?
15703|I see.Thanks @Treri
15704|This is not supported right now. What would be cool is if you select the task in the quick box if you could provide params there. But this filters right now.
15705|Dups: #4613
15706|"fyi @egamma  One idea I had for adding support for this was to copy-paste the rule and prefix the command with a minus:  ``` { ""key"": ""tab"",                   ""command"": ""-editor.emmet.action.expandAbbreviation"",                                      ""when"": ""editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !editorTabMovesFocus"" } ```"
15707|@haisum thanks so much for sharing, what a coincidence that I am currently looking into improving our scoring algorithm.  Note however that this is not really talking about how to make find in files fast, rather how to score the results for the quick open box.
15708|@dbaeumer the potential harm by translating this is that we use that label as the id we store for the active channel. There might be some consequences before the first input of some channel comes to the user. All in all if you decide to translate this and ship as part of 1.0 please test that nothing gets broken in output switching by starting vscode in one language and then starting it in another language  Also try on a workspace with no git source control.
15709|@bpasero  yup I checked, it's not in much depth but I thought it may help in getting some perspective.
15710|@joaomoreno: actually the TS protocol contains the information about rest arguments. They have a isVariadic property on the SignatureHelpItem. May be we should expose something like this in our API. Simply saying we are on the first parameter is not correct from a caller perspective.
15711|Good catch.  To verify, have a prelaunchTask that produces an error. Try to debug, after an error is detected close action should stop debugging, continue action should start debugging.
15712|We could for example extend ParameterInformation in the vscode.d.ts with the variadic property. Then the UI could handle cases like too many parameters and rest parameters when rendering the signature help.
15713|@jrieken what is your take on this?
15714|@minggo @weinand package.json looks good to me as well. Our node debugger is using the same principal and all works fine. There are no specific requirments on Windows.  Are you sure that path exists on your machine? What happens if you open command prompt and do the following  ``` node fs.exists('C:/Users/elin/.vscode/extensions/cocos-debug/out/cocosFXDebug.js', (exists) => console.log(exists)) ```
15715|"From the screen shot it looks that one channel was already translated (the ""Extensions"" output channel)? So we already ship with this, I suggest to translate them all (including the ""Git"" one)."
15716|@isidorn I've added paging support to the debug protocol, vscode and node-debug.
15717|Let me know if I am link spamming here but I think this also seems relevant example. https://github.com/wincent/command-t/blob/master/doc/command-t.txt. It's open source and super fast vim plugin for file searching.
15718|@bpasero FYI.
15719|Talked to @egamma  and decided not to translate those for 1.0 since we don't understand the consequences.   Opened #4794
15720|I introduced an extra boost of +5 points for consecutive matches in a string. Other scorers seem to do that to boost those matches higher over others.
15721|:+1:
15722|No worries, keep 'em coming :+1:
15723|@andersekdahl I would be interested in getting access to the workspace for me to reproduce this, if possible?
15724|@isidorn  who generates the message `DebugAdapter bin folder not found on path`? This makes no sense because why should a 'bin' folder be on the path? Not even `node` must be on the path because we are forking the electron-node.
15725|Sorry, it is my fault. Because my Windows machine hide file types, so i copied `cocosFXDebug.js.map` into extension.
15726|@weinand we generate that message on the vscode side. I agree we should improve the message, how about `Debug adapter not found on the following path: {0}`
15727|I don't think that possible unfortunately. I'll see if I can create an isolated workspace to reproduce it and share that.
15728|"@isidorn ""not found on the path"" is misleading because it sounds like ""not found on the search PATH that you should configure in your profile"". We should just say: `Debug adapter executable '{0}' not found`"
15729|"Just installed CentOS 7. All seems to work fine.  <img width=""916"" alt=""screen shot 2016-03-30 at 11 09 36"" src=""https://cloud.githubusercontent.com/assets/22350/14137397/ef9c6fd2-f667-11e5-87df-3e588f1fbf57.png"">"
15730|@jandrieu I can reproduce with VS Code and other editors that use node for writing the file. It looks like the basic file watching facility in node.js on Linux reports 2 change events when writing to a file (see https://github.com/nodejs/node/issues/3042) and the first time you read from the file it is likely empty and only after gets the content filled in.   Are you able to switch to a better file watching library for your project? VS Code itself is using chokidar (https://github.com/paulmillr/chokidar) and I think they do a good job in normalizing duplicate file events like this one.
15731|@andersekdahl thanks. I just pushed a fix for our scorer and was wondering if it fixes this issue too. That would help me to verify quickly.
15732|I can't seem to reproduce it in another workspace. Can I get access to a build with your fix to test if it solves the issue?
15733|Is it this commit 914716033fb45fd437b89008bad1ecd0b5a38bf8? Building from source on that commit now.
15734|pls see #3555  and I've also update the roadmap accordingly, thanks for pointing this out.
15735|"@andersekdahl yes, that one will boost scores higher for consecutive matches. I would assume ""Overlay"" to be #1 after that change."
15736|Yeah, needs thinking but why not. Assigning to me and adding the API tag
15737|> I try to get my own and all exsiting Completion Items.  @raphael2711 By _all existing Completion Items_ do you mean the default textual completions?
15738|Can't build from source unfortunately, I have VS 2015 but I'm missing `cl.exe` and don't have a VS setup file to run to install it. Could you comment on this issue when your commit is in a public release?
15739|@isidorn backward compatibility: if `StackTraceResponse` has no `totalFrames` attribute, fall back to old semantics, that is do not show 'more' button.
15740|@andersekdahl building a version of it now that I can share to you.
15741|"@alexandrudima Isn't the ""when"" unneccessary in there?   ``` { ""key"": ""tab"", ""command"": ""-editor.emmet.action.expandAbbreviation""} ```  Would be sufficient I think. Looks clean syntax for me.  Though I'll write this also:  ``` { ""key"": ""tab"", ""removeCommand"": ""editor.emmet.action.expandAbbreviation""} ```  Just to see how that would look like, it would be more discernible from long list of keyboard shortcuts."
15742|@andersekdahl try with https://az764295.vo.msecnd.net/alpha/e261525aad152779f5fda7c253a0f62d92a529ff/VSCodeSetup-alpha.exe
15743|Looking at the code [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debugService.ts#L557). This should be immposible on latest. Can you please try to reproduce this on latest insiders - 0.10.13-insider.  If you can please find repro steps I will gladly reopen this bug
15744|That seems to fix it, thanks!  There are still some other things though. Typing `overlayindex` (without slash) gives me the same behaviour as the image I posted. And searching for just `overlay` gives me matches for two files named `overlay.xxx` but no match at all for files in the folder `Overlay`. The search seems to heavily promote search hits in file names and not the paths.
15745|This behavior is as expected, for some reason you preLaunchTask exited with error code 1 - which means there was an error. Though in some cases you might still be able to debug, thus we present the `Continue` action.  You probably tried running the task multiple times - thus there are two entries in the output.  If you want to understand the true cause of your issue, you should investigate why your task returns error code 1. Try running it isolated - outside of vscode and you will see the same error you see in the output.
15746|I cannot reproduce.
15747|@andersekdahl that is totally true yeah. actually I am running the scorer first over the file name and then over the file path to naturally promote file matches over path matches.
15748|"@andersekdahl I am still wondering why you would not get any match in ""overlay"" though for files that live in that folder.   E.g. in this workspace I have a folder ""lib"" and can search for files within:  ![image](https://cloud.githubusercontent.com/assets/900690/14139673/c0331892-f674-11e5-8708-82e17b4ecd13.png)"
15749|Yeah it's hard to tell. Like I said, I couldn't reproduce it in a test workspace. Could it have something to do with the size of the workspace?
15750|Treating this as duplicate of #637. Sorry for closing this earlier one.
15751|@isidorn I added a new broadcast you should listen to: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/thread/electron-browser/threadService.ts#L29
15752|@andersekdahl good point, there is an actual limit of results in quick open.
15753|For now I only added comments for 'Tab size'.  I will add more comments as we find places where the meaning is uncelar for the translators. That feels to me like a better approach than going through the code and figuring out where it is clear and where not.
15754|Let me present what I call the **Global Extensions Viewlet** solution.  [![image](https://cloud.githubusercontent.com/assets/22350/14143068/87c505e6-f689-11e5-9064-3a3e498793a7.png)](https://moqups.com/mail@joaomoreno.com/MD4BIKB5)  The idea is to use the sidebar area to manage your extensions. - Similar to viewlets you can get into it by clicking an icon in the activity bar. - Contrary to viewlets, this icon would be separated from the existing ones, indicating that it is a global concept instead of a workspace relative concept. - The user can search and browse through several categories: `All`, `Installed`, `Gallery`, `Outdated`, etc. - Clicking on an extension would show its details in a split view below the list. An optional `Read more` button could open the extension's `README.md` file in preview mode in an editor pane. - Notifications would be displayed globally in the icon in the sidebar, similar to the existing viewlets. - More detailed notifications would be displayed inline in each extension's row in the list and the detail view as well.  I like this because it is minimal, practical and solves many of the currently existing issues. It can also be implemented on top of our existing infrastructure.  The main concerns surrounding this is the breakage of the parent-child hierarchy we have with viewlets. You click a file in the parent Explorer view and it opens an editor in the child view. All viewlets work that way. The concern is that this solution would be confusing since clicking an extension would not open any editor view. IMO this can be solved by displaying this sidebar in a different style: render it with a different background color for example. This would provide the user some indication that this pane is somehow different and thus behaves differently.
15755|@bpasero I am not sure what y'all mean when you say a 1.0 candidate. I noticed this currently in the insiders release. Will this be fixed before the next actual release after 0.10.11?  Edit: I ask because as I [mentioned](https://github.com/Microsoft/vscode/issues/4755#issuecomment-203040905) in issue #4755, the coloring adds tangible value when debugging asynchronous code. This is definitely losing something if the coloring is no longer there.
15756|@bill-mybiz will be fixed post 1.0 release, end of March likely.
15757|And you can always configure to use an external console in the launch.json to get the full ASNI support in.
15758|Deleting `.vscode` and `.vscode-insiders` seemed to fix the issue for the user.
15759|Any reason in particular that the extension's README would not display in the editor view on click? There is a lot of good content/images in many extensions that will barely fix in the sidebar.
15760|Duplicate of https://github.com/Microsoft/vscode/issues/637
15761|Looks cool!  Don't you already have an extension's README in its Marketplace metadata?  Seems like you could just automatically show the README for any of the selected extensions, but maybe I'm missing something there.
15762|Marking as closed, given the initial report seems fixed.
15763|Fine by me, I'll see if I can create test cases for the other things I mentioned and open new issues if I can.
15764|Thanks for the quick replies btw!
15765|np :+1:
15766|The easy workaround for anyone hitting this is to just exclude with *_/_.js.map: true
15767|That would go into the same problem that we have for settings. Doing so would take an editor away, and you'd have to manually restore the state after you're done with extensions. It's sad that it happens with configuration settings today and we definitely don't want to go the same way with this.
15768|"I'd go a step further and not allow editors or (debug) output windows while managing extensions (or for the future managing aspect of the product, like settings, keybinding etc.) My reasoning is that managing the product and coding (typing, searching, debugging) are two fundamentally different tasks that deserve separation.  Our workbench is optimised for the `coding`-task with the 3-level parent-child relationship between the sidebar, the viewlets, and editors.  For the `managing-the-product`-task I propose a simpler 2-level parent child relation between the sidebar and the rest of the workbench window (think of a combined viewlet-editor-area). It gives more space to build such UIs and most importantly being a separate thing it will not interfere with my editor-viewlet-arrangements. It could look like shown below.  <img width=""890"" alt=""screen shot 2016-03-30 at 16 39 09"" src=""https://cloud.githubusercontent.com/assets/1794099/14146519/318295c2-f698-11e5-9f19-5a946416e6a8.png"">  The interaction would be like this: 1. The workbench is in default `Coding`-mode, the viewlet icons (Explorer, Search, Git, Debug) show at the top of the sidebar 2. At the bottom of the sidebar is a button to change into `Management`-mode 3. When selected the viewlet icons fold into one and move to the bottom, similar the management icons unfold and move to the top 4. The sidebar now allows me to switch between management-tasks, like Installing Extensions, Manage Updates, or Settings & Keybindings. 5. When the `coding`-button at the bottom of the sidebar is selected the product chances back into `Coding`-mode.  <img width=""890"" alt=""screen shot 2016-03-30 at 16 39 09 copy"" src=""https://cloud.githubusercontent.com/assets/1794099/14147115/81dc43f4-f69a-11e5-9c7c-5128c65dd1a3.png"">"
15769|+1, looks great!  What tool are you guys using for these mockups?
15770|Credits to @joaomoreno  for finding: https://moqups.com/
15771|@bpasero It sounds like it will be fine to use the external console. I'm still at a loss as to the 1.0 timeline...VS code is going from 0.10.11 to 1.0? Also, you are aware it is the end of March already? :-O   Regardless, I really appreciate all of the VS Code team's hard work and actively addressing issues such as these. :+1:
15772|Another user who wants either English back or supports English in addition to their native language. https://github.com/Microsoft/vscode/issues/4785  > How can i switch back to the English commands or the console can support both 'English' and 'Chinese'?When i'm coding, I have to switch the IME. >  > ![67cf555e-f664-11e5-9c1d-072d51adf8d0](https://cloud.githubusercontent.com/assets/2193314/14148727/7ea3b8ba-f655-11e5-9eb3-af55093c3194.png) >  > ![753ae82a-f664-11e5-8968-a89819e031ac](https://cloud.githubusercontent.com/assets/2193314/14148730/8180d89c-f655-11e5-82a1-9c8feaa5ef1b.png)
15773|Duplicate of https://github.com/Microsoft/vscode/issues/4691, thanks for the report :)
15774|This might be to do with node hitting the max path length on Windows.
15775|@ianwesterfield @ironcladlou @isinbahadir  to be clear, you would still want the working files to reveal the active file but not the folder view below?
15776|"@bill-mybiz sorry, I meant to say ""end of April"". We plan to release 1.0 (our next release) later in April, but have closed already for fixes."
15777|I can reproduce this on Ubuntu, only on truncated working files entries. Doesn't seem to reproduce in a minimal example https://output.jsbin.com/gatovemeha/edit/
15778|@bpasero @joaomoreno any comment on why this is used over `process.env`? I just fixed an issue with it recently because multi-line variables weren't working.
15779|C:\Users\jaakk_000>where git C:\Users\jaakk_000\AppData\Local\Programs\Git\cmd\git.exe
15780|We defer to extension developers for rich PHP development right now, closing this off.
15781|Will be addressed in https://github.com/Microsoft/vscode/issues/3998
15782|Will be addressed in https://github.com/Microsoft/vscode/issues/3998
15783|Will be addressed in https://github.com/Microsoft/vscode/issues/3998
15784|I am not able to reproduce. Can you try with our latest insider build?
15785|"The list of ""File > Open Recent"" is being populated from interactions from outside VS Code into vs code (e.g. drag and drop, terminal, open with) or using the native file dialog, not from actions within vs code. I assume the second time you open the file you used the native file dialog to open the file."
15786|Lets hope this gets fixed with future Chrome updates.
15787|@vsccarl can you check for the max path length? can you give me access to the workspace? did you run any task in the background or in vs code that could lock the node modules folder?
15788|Don't need to set `auto-save` to test this. Just make sure `insert_final_newline` is set to `true` in `.editorconfig`. Create a new file. Type in some lines and make sure the cursor is at the end of the file( the last position possible) and save the file. Cursor will jump to the next line.  // cc @alexandrudima
15789|I see. Yeah, I was using the file dialog to open the file. To clarify -- the issue wasn't with the method of opening the file, but that saving a new, from-scratch file through the file dialog doesn't add to the Open Recent list.
15790|"This might have something to do with the handling of the ""virtual"" last line. It's not a real line until it has content and it's own line ending. But from an editor's perspective, it is an empty line to render and show."
15791|> @ianwesterfield @ironcladlou @isinbahadir to be clear, you would still want the working files to reveal the active file but not the folder view below?  IMO, yes. I have no issue with the active file being highlighted in the working files section, but for the folder view below, I expect: 1. A way to keep the folder view static regardless of my working file 2. A command to reveal the current working file in the folder view
15792|@bpasero The max path that I found is 146 characters. I uploaded the project here [https://github.com/carltosc/nodejsSample.git](url) with the folder 'stuck' in .vscode. There weren't any tasks running that should have locked the folder. I can give you access to my machine if you need also.
15793|@bcmn I am not sure I can follow, if in Sublime Text I save an untitled file, it does not appear under File > Recently opened.
15794|@vsccarl and when you restart vscode, can you move the folder around? I cannot reproduce...
15795|@bpasero I installed the latest alpha updates and it was still reproducible. Restarting after allowed me to move it out of the .vscode directory. But now trying to move it to another directory gives the same issue.
15796|@bpasero Okay, its an arbitrary UI choice, then! Up to you. Displaying under Open Recent would seem most common (enough that I assumed it was an issue), and certainly more consistent with other Microsoft programs -- Visual Studio, Office suite, etc.  (I did say it was pedantic!)
15797|`getos` has approval now - @SofianHn if you get a chance could you point me at where the OS metrics are gathered?
15798|Looks like it came back in 0.10.13 ??
15799|Definitely need this resolved for PowerShell
15800|@bcmn ok I am not familiar how Visual Studio behaves here. We do show recent files you open within VS Code in quick open (Ctrl+P) as well as quick navigate (Ctrl+Tab), maybe you could get used to that?
