15501|Fixed by reverting the change for https://github.com/Microsoft/vscode/issues/797
15502|This was causing https://github.com/Microsoft/vscode/issues/4717, reverting my change.
15503|Marking as upstream. Imho this should work without special code from our end, or if any we have API to find out if a native dialog is opened or not.
15504|@jsloyer I cannot reproduce the behaviour you are describing. The call to `workspace.rootPath` is valid as you describe it.   Can you attach the reading from the console (Developer Tools) and try the snippet above when being enclosed in a `try-catch`-statement
15505|"How does the task.json need to look if you want to call it as PreLaunchTask?  I tried it like this, but it fails :   ``` ""preLaunchTask"": ""mytask"", ```  ``` {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""""],     ""problemMatcher"": ""$tsc"",      ""tasks"": [         {             ""taskName"": ""mytask"",             ""args"": [],             ""isBuildCommand"": true,             ""problemMatcher"": ""$tsc""         }     ] } ```  ``` Warning: global matchers and tasks can't be mixed. Ignoring global matchers. error TS6053: File '.ts' not found. error TS6053: File 'mytask.ts' not found. ```"
15506|I wonder if it would not be better to show this information in the status bar instead within the image. On the right hand side we show all the meta data around a text file (encoding, line endings, etc.) and we should do the same for binary files.
15507|LGTM, pushed to release/1.0.0.
15508|"If you only have one global task you can use the command name as a prelaunch task name.  ``` json {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""""],     ""problemMatcher"": ""$tsc"" }  ""preLaunchTask"": ""tsc"" ```"
15509|Dups #4363
15510|@Ctrl+C is copy in and editor. To not make this too context dependent I didn't bind Ctrl+C. It would only work in the Output Task Window and you might want to copy text there as well.  I can check if Ctrl+Shift+C is available.
15511|This specific delayer is a [ThrottledDelayer](https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/async.ts#L203). This means it won't fire a second request before the first one finishes. So I'm finding this quite weird.
15512|@donaldpipowitch This would definitely make for a great first contribution!
15513|I can't reproduce this using the latest alpha build.   ![bug](https://cloud.githubusercontent.com/assets/1931590/14103642/62633cac-f5a1-11e5-938c-f755dfd26128.gif)  Any additional steps / Info
15514|I suggest to set up Inno to automatically detect the language at installation time, just like what Code does. The picker would only show up in ambiguous cases and it only has an effect in the setup itself.
15515|@bpasero assigning to you since this is quick box related. Marking as candidate since we should look into fixing this for 1.0. Let me know if there is something I can do from the translation side.
15516|"OK I tried now :   ``` {     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Debug Node"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/app.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}/."",             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""preLaunchTask"": ""tsc"",             ""sourceMaps"": true,             ""outDir"": null         },         {             ""name"": ""Attach"",             ""type"": ""node"",             ""request"": ""attach"",             ""port"": 5858         }     ] } ```  ``` {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""""],     ""problemMatcher"": ""$tsc"" }  ```  But I get :  ``` The preLaunchTask 'tsc' terminated with exit code 2. ```"
15517|+1  I assign to you then.
15518|Fixed.
15519|Thanks for the information.  > the link is not working in west asia  cc @chrisdias @seanmcbreen @waderyan @egamma
15520|"Do you have a tsconfig.json. Then your args need to look like [""-p"", "".""]"
15521|Can you tell me under which path git is installed?  You can always set the path to `git.exe` using the `git.path` configuration setting.
15522|Yeah, closing as duplicate of #396
15523|Closing as we track this in another repo.
15524|@dbaeumer can you verify this on a clean German machine. When I tried to verify it on my hybrid version I still got the hybrid version.
15525|@Devdatta03  i can't reproduce this , did you set  focus on the editor?
15526|Not translating the command names doesn't make too much sense to me. Why only the command names? IMO we need to fix the filtering tracked in #4691. And aliases would only help if they are user definable since Restart Window would be translated as well.   In general I think the command palette filtering should be improved where the command provide can provide additional search and filter strings.  @bpasero I move this to you to consider improving the command palette with additional filter / search strings.
15527|@bogdanac what version of node are you using? Do you have a small code snippet that shows the problem?
15528|I will.
15529|will be verified as part of #4579
15530|assigning to Joao to verify.
15531|@weinand might you be massaging the paths in some special way? If not please give the bug back to me, though I do not think I am doing something special that would cause this
15532|Flagging as verified given the comment above.
15533|@SetTrend Very cool repro septs. however I do not see the `launch.json` as part of that repository? Have you tried setting the 'outDir' in your `launch.json` to point to your `output` folder
15534|Closing if favour of #214
15535|@SetTrend yes, please set 'sourceMaps' to true and 'outDir' to '${workspaceRoot)/output' and let me know if that works. If not I will reopen this issue.
15536|@chmllr sorry for that. I now see what you are talking about. This is a general issue in the tsserver we use. The corresponding issue in TS land is: https://github.com/Microsoft/TypeScript/issues/4526.  I will keep that issue closed since it dups https://github.com/Microsoft/TypeScript/issues/4526
15537|@bgashler1 The way I'm building the prototype/extension is that it will be filterable for now - but otherwise matching your designs. Again, this is all prototypal / proof of concept so anything can be added or removed.  Can you also provide a PSD of the design? You can email it to me if you'd like. That'll help me match the design as close as possible.
15538|@dbaeumer Great, thanks a lot!
15539|Pushed a change to always detach. This should fix the issues reported by Joao. Needs verification on all platforms.
15540|Here is what I see: Clicking on 'Lizenz anzeigen' opens a browser with the URL https://code.visualstudio.com/license?lang=de  which I think is correct. The page stills shows an English pre license so.
15541|@sahas- the launch config attribute 'program' must be a path. Specifying additional arguments in 'program' does not work and results in the error message you are seeing. Please add '--opts /Users/...' as two additional for the 'args' attribute.
15542|@weinand Could you please take a look? Is there any specific requirements on Windows?
15543|That would be pretty easy but if you look at Sublime and Atom they both have a smarter implementation that measures the width of the explorer items and uses the larger one as the sidebar width. Do the test! For example if you have an opened sidebar at its “optimal width” and you open some folder that contains longer file names, double clicking on the sidebar border will re-calculate a larger width. As described in #4660 I’d like to have the same behavior on VSCode.  So the idea was to use a static width (like indeed `DEFAULT_MIN_PART_WIDTH`) on the search and debugger viewlets, and let the file-explorer and the git-commiter viewlets implement a method that returns their optimal width.
15544|@isidorn the package.json looks good to me. Do you have an idea what's wrong here?
15545|Thank you. I'll make sure that I log issues re. docs with vscode-docs in the future. (Perhaps a note in the guide for contributions would be in order.)
15546|@jbpotonnier I have just tried on a fresh install of VSCode 0.10.11 on the Mac with the French azerty keyboard layout. Since I have a physical keyboard in English I type `Alt+5` and I get a `{`.  Is it possible that you have installed some extensions that bind `alt+5`. Does this reproduce if you run VSCode without extensions (the `--disable-extensions` flag)?
15547|I would suggest that we do not mix english strings together with other language strings but rather ask our users to change the language to english for the entire application (F1 > Configure Language).   I leave this decision up to our PM @chrisdias
15548|@mquandalle I see, there is currently no API to compute the optimal width of the explorer tree to prevent truncating of words, but maybe @joaomoreno could chime in on that topic.
15549|"Yes I have the following tsconfig:  ``` {     ""compilerOptions"": {         ""target"": ""es5"",         ""module"": ""commonjs"",         ""sourceMap"": true,         ""allowJs"": true     },    ""exclude"": [         ""node_modules"",         ""typings""     ] } ```  When I change the args in my tasks.json or launch json to:   ```  ""args"": [""-p"","".""], ```  I get :    ``` Errors detected while running the preLaunchTask 'tsc'. ```"
15550|"@jandrieu I can confirm the two files are byte-to-byte equal.  They also do not contain any special characters (all char codes are <=127), so I do not think this is an encoding issue.  I use the following code to check the two files:  ``` javascript var fs = require('fs');  var bytes1 = fs.readFileSync('menuItem.toggle.dust.code'); var bytes2 = fs.readFileSync('menuItem.toggle.dust.emacs');  // Check equality if (bytes1.length !== bytes2.length) {     console.log('different lengths');     process.exit(0); } for (var i = 0; i < bytes1.length; i++) {     if (bytes1[i] !== bytes2[i]) {         console.log('different byte at offset ' + i);         process.exit(0);     } }  console.log('byte-to-byte equality');  // Look for non-ASCII chars var asString = bytes1.toString('utf8'); for (var i = 0; i < asString.length; i++) {     var chCode = asString.charCodeAt(i);      if (chCode >= 0 && chCode <= 127) {         // nothing special         continue;     }     console.log('found non-ASCII char with chCode: ' + chCode); } console.log('finished looking for non-ASCII chars'); ```  And I get the following output:  ``` byte-to-byte equality finished looking for non-ASCII chars ```  Can you please provide more context? Do you run the dust rendering manually after saving the file or does it run on file change events.  Perhaps the problem is transient (i.e. the file is available on disk with 0 bytes for a short moment and then it gets filled up with content). If the dust rendering runs on file changes, perhaps it reads at a time when the file is empty (content not yet flushed by VSCode).  Come to think of it, I think I have experienced something similar while selfhosting on linux with VSCode. @Tyriar @aeschli Does the gulp watch sometime report ""File xyz.ts is not a module"" for you?  @bpasero How do we save files to disk on Linux?"
15551|I think the feature request label is appropriate for now...   The indentation detection code is language agnostic, so it just looks at the file contents (not at the tokens).  If we ever change that code to first tokenize the file and then guess, I agree that lines in multiline strings and lines in multiline comments should be omitted from the detection.
15552|@egamma @aeschli PR got accepted!
15553|:+1:
15554|I can confirm, it looks like we get a `keyCode = 3` when pressing `ctrl+pausebreak`, while for `pausebreak`, `shift+pausebreak` we get a `keyCode = 19`.
15555|@alexandrudima using fs.writeFile: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/node/fileService.ts#L265  But there is a case where we encode the contents of the file if the encoding is not UTF 8.
15556|Covered by https://github.com/waderyan/react-todo
15557|Covered by https://github.com/waderyan/react-todo
15558|Renamed _stash_ to **sash** in the title.  @bpasero @mquandalle It can be done, but it is non-trivial.
15559|Looked into this and I think the issue is not about finding Japanese input in general but rather how the filtering works in the command palette. There are different matchers being used and one of them is a camel case matcher that would match for a given input of `git pull` on `Git: Pull` only because we think `Git: Pull` is a valid camel case word with `G` and `P`. This however is not the case when using Japanese labels because our check for camel case only considers ASCII characters.   Matching on camel case in the command palette is questionable and should probably be revisited. I quickly checked to use another matcher approach with fully fuzzy matching (similar to files) and could not reproduce the issue there. However, changing our filtering for commands like that can have quite an impact and we also need to revisit the sorting in that case.  I would not do this for GA, but @egamma and @chrisdias should speak up.
15560|Ok, looks like `ctrl+pausebreak` sends a `keyCode = 3` which gets its own virtual key named `cancel`.  I can only assume there were or there are some keyboards on the wild that might have a special `cancel` key and the OS? decided to make `ctrl+pausebreak` be the equivalent of the `cancel` key.  I can add support for a new `cancel` key code in our world.  From https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v%3Dvs.85%29.aspx  ``` VK_CANCEL    0x03    Control-break processing ```
15561|@alexandrudima I don't think I have a special extension. I'll check tonight. EDIT: I just checked it is still not working, even with the `--disable-extensions` flag.
15562|"@isidorn Today I was running again into the problem that I cannot inspect the ""**proto**"" property in VS Code. Could you please consider to use Maps for storing variables? Those don't suffer from the problem that some variable names collide with some builtin object properties in JavaScript.  Since this is a serious bug, I've added the 'important' label and I think we should try to fix this for April."
15563|Maybe emacs goes for the old file rename trick when saving (to get an atomic save): - write to a tmp file - maybe remove destination file - rename tmp file as destination file
15564|+1
15565|@xianghongai Can you please create a new issue with reproducible steps?
15566|:+1:
15567|@alexandrudima can you point me to where you setup these keybindings?
15568|assigning to @weinand for verification
15569|Can I ask which repo? Also a question: How will it detect the language? Which language? I have also installed regular English VS Code in a Spanish OS
15570|Sure, here I do it for the find widget: `src\vs\editor\contrib\find\common\findController.ts`  But if I understand correctly, this issue is about the Find in Files, so not sure how that helps you.
15571|makes sense
15572|great thanks & closing.
15573|Is this automatically being picked up by VS Code?
15574|There was definitely a problem with this. Git's version might be something like `1.9.5.msysgit.2` which makes `semver` barf. Pushed fix to master and release.
15575|@isidorn verify by installing git 1.9.5
15576|@jrieken I traced this down to https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/search/browser/searchViewlet.ts#L1137  We seem to treat a regex pattern input by the user as non-regex-pattern if it has leading or trailing spaces. Do you remember why we do that?
15577|This just made my day. Works like a charm.
15578|@alexandrudima just as input what key-codes to use, thanks.
15579|@carlosmunozrodriguez We have another repository in which we track the things that ultimately make VS Code into an MS branded product. This is one of those things. More information about this [here](https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005).  There are helpful links about understanding how language detection will happen: - [Languages](http://www.jrsoftware.org/ishelp/topic_languagessection.htm) - [LanguageDetectionMethod](http://www.jrsoftware.org/ishelp/index.php?topic=setup_languagedetectionmethod) - [ShowLanguageDialog](http://www.jrsoftware.org/ishelp/index.php?topic=setup_showlanguagedialog)
15580|Thanks. Could you give me some hints or big picture where I should look at?
15581|@daslicht is your repository public somewhere. Then I have a look there.
15582|Sure. But now that I took a closer peek, this feels like it will go to the TypeScript people.  The parameter hints provider should be returning to us an [`IParameterHints` object](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/parameterHints/browser/parameterHintsModel.ts#L78) which contains information about the signature as well as [the current parameter](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/modes.ts#L420).  I have a feeling that TS is returning something like _this method got 1 (rest) argument and you're on the third parameter_. Which would be wrong. It should return something like _this method got 1 (rest) argument and you're on the first parameter_.  As one adds more parameters to a rest argument, the `currentParameter` should not change, IMO. Do you agree @dbaeumer?
15583|@jrieken I wrapped it in a `try-catch` and still no extra output.  Try placing the code in `src/vs/workbench/parts/git/browser/views/changes/changesView.ts` in the `render` method.  ``` try {             console.log(workspace.rootPath);         } catch(e) {             console.log(e);         } ```
15584|I just hit this in the smoke test: - Run the build task - View the error list: some errors are there - Ctrl click the file in which the errors occurred, in the output panel - View the error list: errors are gone!
15585|I now get a nice warning to install git > 2.0
15586|Moving to TypeScript for investigation
15587|This issue was moved to Microsoft/TypeScript#7725
15588|@alexandrudima I don't think I've seen that before.
15589|For some weird reason Chrome/Electron decides to fire the mouse-down event on our sash when the context menu opens from this context menu button.
15590|"@bpasero remember though that ""mixing languages"" may be natural depending on the language. I imagine typing `git pull` is far more natural to Japanese programmers than `git プル` which requires an extra effort to type due to the ime change."
15591|We fetch the schema dynamically whenever possible. I've just checked and this seems to be the case  ![image](https://cloud.githubusercontent.com/assets/172399/14111788/61927c40-f5cc-11e5-9536-98ed48d66254.png)
15592|Yeah, I see the issue for commands that are really close to their terminal counter parts.
15593|Maybe we should just document for those NLS strings that they should not get translated at all?
15594|+1
15595|Setting to `important` to catch your eye.
15596|@stephenmartindale no worries. It doesn't happen too often and is easy to move using https://github-issue-mover.appspot.com/ when it does. I'm a little hesitant to make the setup/contributing section any more busy.
15597|As far as I understand there is not `launch.json` invovled here, you do not have `preLaunchTask` set, you are just launching a task from `tasks.json`. Thus forwarding to @dbaeumer
15598|This is a feature request against our json schema which currently does not support his. Forwarding to @aeschli
15599|I believe go to symbol generally requires an extension to work, for example the C# extension https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp  Closing this, feel free to open a new issue if you have a particular language you're concerned about. It will likely be up to extensions to add this behavior though.
15600|Closing off as it would probably fix itself during an update.
