27101|I guess I've almost done exactly that. I just haven't emptied the Trash.  Deleted the app, emptied the trash, unzipped a new copy of the app. Same behavior. It always starts the first time after being replaced. Then, it never (almost never) starts from Finder again.
27102|"I guess the bug linked by me above, related to the node.js debugger extension, describes the same problem.  I prepared a simple project here for easily testing the ""jump in breakpoints"" via Docker for Windows / Mac.     https://github.com/delfinof/debugging-in-docker  My guess is that via the debugger, visual studio code receives some kind of update to the position of the breakpoints, and thinks they are relative to the ""typescript source"" instead of the ""compiled javascript"".  It is worth nothing that: - it happens only when attached to a remote instance. Attaching to a local running process does not produce any problem - it doesn't seem to be related to path separators, since it happens on Mac debugging Linux too."
27103|@shaneparsons the idea for this setting is to ignore watching folders for file changes that contain resources you do not work with (e.g. do not show in the explorer or search in). Taking out large folders from file watching will have a positive impact on performance.
27104|I would also add that we animate it closed into to the status bar.  This will serve two purposes: 1) Helps users understand that we are not terminating processes; we're just hiding the view 2) Helps users discover that they can drag this back out at any time from he status bar.
27105|Can not repro with default Chinese IME
27106|@Tyriar are you using a VM like parallels? I see this only in Parallels 10.
27107|Copy and pasting as a whole I get:  SyntaxError: Unexpected token      at Object.parse (native)     at <anonymous>:18:22     at Object.InjectedScript._evaluateOn (<anonymous>:878:140)     at Object.InjectedScript._evaluateAndWrap (<anonymous>:811:34)     at Object.InjectedScript.evaluate (<anonymous>:667:21)  Copying and pasting line by line I get an error on the line 'const result = ...' of  Uncaught ReferenceError: cp is not defined     at <anonymous>:2:16     at Object.InjectedScript._evaluateOn (<anonymous>:878:140)     at Object.InjectedScript._evaluateAndWrap (<anonymous>:811:34)     at Object.InjectedScript.evaluate (<anonymous>:667:21)
27108|I tried downloading, building, and running 1.2.1. I'm getting an error when I try to run. In summary, I did the following:  ``` git clone https://github.com/Microsoft/vscode.git  cd vscode/  git checkout -b issue_7927 fe7f407b95b7f78405846188259504b34ef72761  pyenv local 2.7.8   ./scripts/npm.sh install  npm run watch ```  and in another terminal: `./scripts/code.sh`  Here's the terminal output from the clone, build, and run watch window along with the output of runnung code.sh along with the console errors produced.  [vscode_clone_build.txt](https://github.com/Microsoft/vscode/files/328096/vscode_clone_build.txt) [vscode_run_and_errors.txt](https://github.com/Microsoft/vscode/files/328095/vscode_run_and_errors.txt)
27109|@scloudyy  Then the most likely reason is your input method. ‰∏™‰∫∫ËÆ§‰∏∫ÔºöÊêúÁãóËæìÂÖ•Ê≥ï‰πãÁ±ªÁöÑÊµÅÊ∞ìËΩØ‰ª∂ËøòÊòØ‰∏çÁî®ÁöÑÂ•Ω
27110|FWIW, in the integrated terminal, PATH is:  PATH=/Users/John/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
27111|I was able to take the solution provided by @smithgeek and tweak it to generate working relative paths:  ``` sourceRoot: function (file) {     return path.relative(file.relative, path.join(file.cwd, 'src')); } ```  Modify the `path.join` call to point to your source directory in the workspace.
27112|In the following error and specifically this path `/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket/code-oss-dev-dev-38ba65.sock`, ServiceProcessSocket is not a directory, but is a socket itself.  ``` silver:vscode hchapman$ ls -la /private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket srw-rw-rw-  1 hchapman  staff  0 Jun 20 22:31 /private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket ```  ``` silver:vscode hchapman$ ./scripts/code.sh Error: listen EACCES /var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/ COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket/code-oss-dev-dev-38ba65.sock     at Object.exports._errnoException (util.js:890:11)     at exports._exceptionWithHostPort (util.js:913:20)     at Server._listen2 (net.js:1221:19)     at listen (net.js:1270:10)     at Server.listen (net.js:1360:5)     at /Users/hchapman/Desktop/vscode/out/vs/base/parts/ipc/node/ipc.net.js:104:20     at new Promise_ctor (/Users/hchapman/Desktop/vscode/out/vs/base/common/winjs.base.raw.js:1901:17)     at Object.serve (/Users/hchapman/Desktop/vscode/out/vs/base/parts/ipc/node/ipc.net.js:101:16)     at setup (/Users/hchapman/Desktop/vscode/out/vs/code/electron-main/main.js:139:30)     at setupIPC (/Users/hchapman/Desktop/vscode/out/vs/code/electron-main/main.js:185:16)  ```
27113|@csholmq great :smiley:
27114|@bpasero this was on my laptop that dual boots Ubuntu and Windows.
27115|Is this something we can improve upon? Atom puts it in the status bar for example.
27116|"Yes, I was thinking the same thing: the main question is to know when to populate the input box. This is why I also posted something on #6190. Whatever the workflow is for that is related to this. The basic workflow would be:   1) Check existing commit message. 2) If exists, then load the box with that. 3) If doesn't exist, then check for template, load that.  4) If none, then populate with a default template.  So, I'd like to hear if @sijad has done anything towards the code of that issue. Perhaps it would be better to merge the issues as ""Improve git commit workflow"" or similar."
27117|"@bpasero Exactly, the current insiders implementation changes the old command id use of ""editor"" to be ""editorgroup"" and is a large breaking change.  I don't think we need to make this breaking change. I would leave ""editor"" as is and it refers to the 3 editor windows.  I would keep the term ""file"" and not rename it to ""editor""."
27118|@gregvanl I would appreciate if you could point me to the commands in particular how they should be. there is a list of commands in https://github.com/Microsoft/vscode/issues/6605
27119|"I am asking because it is not clear to me where you want to use ""file"" vs ""editor""."
27120|Sure, I thought of doing this last night but ran out of time.
27121|@gregvanl also to clarify: you would only change command ids and not other UI pieces?
27122|"The ""ElectronHelper"" only show up when VSCode does this. I will post here once it happens again."
27123|**Multiple terminals discussion** - Tabs   - Tabs would be more useful if there were notifications on the tabs   - They take up a lot of space and have a heavy feel - Dropdowns   - Let's keep it consistent for now with the output panel   - Adding numbers to the dropdown makes it easier to orient yourself - Making the terminal view more flexible   - Open the terminal as an editor tab?     - This could make things very messy     - No longer a way to consistently pull up the central terminal panel as you can now   - Make panels more flexible? #7161     - Adding the ability to position panels like VS could make vscode feel more heavy     - There are 4 panels now and more will likely be added, it's becoming more difficult to know what's going on in the hidden ones - Add telemetry to create new terminal instance #8011  **Decision**  Go with the current panel model approach and dropdown for now, add some telemetry to gauge usage.
27124|Observed: ![before-after-bug](https://cloud.githubusercontent.com/assets/16118166/16273139/83b51492-386e-11e6-827c-ab78816c1c4e.PNG)  Expected: ![before-after-expected](https://cloud.githubusercontent.com/assets/16118166/16273140/83c6ca3e-386e-11e6-9f53-f76e6a4b5fa1.PNG)
27125|"Here's Atom's editor [pane documentation](http://flight-manual.atom.io/using-atom/sections/panes)  They call out ""items"" to refer to non-file content in an editor pane: ""Each pane has its own ""items"" or files, which are represented by tabs.""  The rest of the documentation just continues to talk about ""files""."
27126|Most of the features can be implemented as an extension, but here are a couple reasons it might be better to implement this in vscode itself: 1. It uses code injection (#6201) to hide the replaced text, which is not officially supported and has some bugs. 2. Cursor movement still steps through each character of the hidden text. I have not found an ideal hook for overriding cursor movement: I can hook the `'cursorLeft'` command, but there seems to be no way to restore the original behavior, or I can set up keybindings that hook cursor movement keys. Neither of these options play well with potential extensions that change cursor movement behavior or a user's custom keybindings that choose alternatives to e.g. the left key (e.g. the vim extensions). 3. I've tried both `display: none` and `font-size: 0pt` to hide text, and both cause the cursor to disappear when at the left or right edges of the range where such a decoration is applied.  But my preference would be to have a supported way to hide text (e.g. through decorations) that handles cursor movement and cursor visibility properly, and then leave the rest to an extension.
27127|An alternative to ligatures is to use [prettify-symbols-mode](http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/), which [I've implemented as a plugin](https://github.com/siegebell/vsc-prettify-symbols-mode) for the insider's build of vscode (but note that it is of beta quality right now).
27128|"![image](https://cloud.githubusercontent.com/assets/900690/16274387/b2c90f0e-38a5-11e6-9093-9ff6def25895.png)  No mentioning of files in their commands that ""Close"" something."
27129|Essentially Atom solves this by calling an entry in a `Pane` an `Item` because it is not necessarily an editor to change the contents inside.
27130|@joaomoreno I actually wonder if this is also something that should go into the tabs widget because it is closely related to animations and timings. I thought about it once and could not come up with a good solution because our tabs are not even width.
27131|We decided to start with double click besides a tab to open a new untitled first.
27132|The latest C++ extension already supports totalFrames attribute.
27133|UX meeting decision:   ![image](https://cloud.githubusercontent.com/assets/900690/16274949/27f4a962-38a8-11e6-9237-f90aa69de97d.png)
27134|We decided to: - Assign `Alt+[1-9]` on Windows and Linux - Assign `Ctrl+[1-9]` on Mac  to not break too many users that expect our current behaviour.
27135|@Tyriar does it reproduce on Windows too for you or only Linux?
27136|@bill-mybiz good call I didn't spend much time on it. I'm not sure with the best practice to access to commit input and change its value.
27137|I'm also facing Issues with `ctrl`+`C` and other simmilar copy-paste shortcuts in the integrated terminal on Windows. I'm not sure what would be the best solution to this issue. Some people would enjoy copying and pasting using the default OS keyboard shortcuts, but it would be difficult to break a current running process (except for OS X). I strongly use this shortcut.  I'd rather remove the shortcut indicator in the right-button-menu for copy/paste/cut to avoid misunderstandings.
27138|Duplicate of https://github.com/Microsoft/vscode/issues/7345#event-700693361
27139|This is a consequence of both how vscode was designed and the fact that it's build on Chromium/Electron. The number of processes should not really matter from an end user perspective, it's the amount of work each process does and the communication between them that are important. Some more info here https://github.com/Microsoft/vscode/issues/5856#issuecomment-216274544
27140|I get this in powershell too. I don't use cygwin so it is not caused by that when I am in PowerShell.
27141|![markdownhighlighting](https://cloud.githubusercontent.com/assets/12818376/16278660/9dfe1d78-386c-11e6-8a90-fc012cbfa65c.png)
27142|Indented text also has this issue:  ``` > Hello ```
27143|"Awesome, getting closer... How about this?  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env });  console.log(result.stdout.slice(0, 10)); ```"
27144|"Oh I think your last output just gave us a hint... This looks **very** suspicious:  ``` Error: listen EACCES /var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/ COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket/code-oss-dev-dev-38ba65.sock ```  Might be related to both #7644 and #7343.  Let me ask you to do something for me. When you get Code open, run the following inside the Developer Tools:  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); const strip = s => s.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');  try {     console.log(JSON.parse(strip(result.stdout))); } catch (e) {     console.log(e); } ```  Let me know what you get."
27145|Yeah if we keep the current tab width model, this isn't possible at all.
27146|"Just want to make sure I'm doing the right thing, as it's not working at all. This is in VC Code's ""Chrome"" debugger tools, right? This is what I get for just the first two lines:  ``` const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; undefined  const cp = require('child_process'); undefined cp VM192:2 Uncaught ReferenceError: cp is not defined(‚Ä¶) ```"
27147|"If I do it line by line, but leave out the 'const's this is what I get:  ``` electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron"" cp = require('child_process'); Object {} env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); Object {TMPDIR: ""/var/folders/tf/3k7qp8615ml80kjsshq70hnr0000gp/T/"", __CF_USER_TEXT_ENCODING: ""0x1F6:0x0:0x0"", SHELL: ""/bin/bash"", HOME: ""/Users/John"", Apple_PubSub_Socket_Render: ""/private/tmp/com.apple.launchd.9xYPM04lS1/Render""‚Ä¶} command = `'${electron}' -p 'JSON.stringify(process.env)'`; ""'/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron' -p 'JSON.stringify(process.env)'"" result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env }); Object {status: 0, signal: null, output: Array[3], pid: 32113, stdout: Uint8Array[1224]‚Ä¶} console.log(result.stdout.slice(0, 10)); VM198:2 [27, 93, 49, 51, 51, 55, 59, 82, 101, 109] ```"
27148|xianghongai  > same error here...
27149|Yes, I most often open files by dragging them from explorer into VS Code, because I have another editor configured for my default text editor and File > Open is much slower than D'n'D. I would expect the recent files list to be updated no matter how I open files.
27150|Yes, things seem to work better now. I'll let you know if I see any further problems.
27151|How long is going to take to this feature be done ? At least a month ? more ? Will it be done ?
27152|By analyzing the blame information on this pull request, we identified @aeschli and @marvinhagemeister to be potential reviewers
27153|Hi **@alrra**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
27154|"Yes, it is. You can actually copy all the lines and paste them in the Console at once; you won't need to remove the `const` then.  Let's try to get a bit more... let's increase that slice to 100:  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env });  console.log(result.stdout.slice(0, 100)); ```  Can you get a hold of those 100 bytes?"
27155|Ok... I'm not sure why it worked that time... but ... here's what I get:  [27, 93, 49, 51, 51, 55, 59, 82, 101, 109, 111, 116, 101, 72, 111, 115, 116, 61, 74, 111, 104, 110, 64, 77, 97, 99, 80, 114, 111, 74, 111, 104, 110, 46, 108, 111, 99, 97, 108, 7, 27, 93, 49, 51, 51, 55, 59, 67, 117, 114, 114, 101, 110, 116, 68, 105, 114, 61, 47, 7, 27, 93, 49, 51, 51, 55, 59, 83, 104, 101, 108, 108, 73, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 86, 101, 114, 115, 105, 111, 110, 61, 50, 59, 115, 104, 101, 108, 108, 61, 98]
27156|Assigning to @bgashler1 since this is a overall UI issue
27157|@prashid how does the system behave with tabs disabled ?
27158|@alexandrudima not sure if you or @aeschli
27159|It choked on `JSON.parse`.  ``` SyntaxError: Unexpected token      at Object.parse (native)     at <anonymous>:18:22     at Object.InjectedScript._evaluateOn (<anonymous>:878:140)     at Object.InjectedScript._evaluateAndWrap (<anonymous>:811:34)     at Object.InjectedScript.evaluate (<anonymous>:667:21) ```   However, I just ran that manually like so:  ``` silver:~ hchapman$ cd Applications/Visual\ Studio\ Code.app/Contents/MacOS/ silver:MacOS hchapman$ ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ELECTRON_NO_ATTACH_CONSOLE=1 ./Electron -p 'JSON.stringify(process.env)' ```  The json environment is attached. [electron_env_json.txt](https://github.com/Microsoft/vscode/files/328672/electron_env_json.txt)
27160|@Ciantic do you have a tsconfig.json / jsconfig.json file ? If so how does it look like and is the file exporting the globalStyles part of the project
27161|Not sure if this is a workbench or editor issue
27162|"Awesome, it's definitely related to those other issues. What about this one? You'll get an array of numbers, just gimme those:  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env });  console.log(result.stdout.slice(0, 100)); ```"
27163|Awesome, thanks a lot for your help. It's definitely related to the iTerm2 integration you have in your shell... Just need to know how to circumvent this. Let me get back to you with a fix...
27164|``` [27, 93, 49, 51, 51, 55, 59, 82, 101, 109, 111, 116, 101, 72, 111, 115, 116, 61, 104, 99, 104, 97, 112, 109, 97, 110, 64, 115, 105, 108, 118, 101, 114, 46, 108, 111, 99, 97, 108, 7, 27, 93, 49, 51, 51, 55, 59, 67, 117, 114, 114, 101, 110, 116, 68, 105, 114, 61, 47, 85, 115, 101, 114, 115, 47, 104, 99, 104, 97, 112, 109, 97, 110, 47, 65, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 115, 47, 86, 105, 115, 117, 97, 108, 32, 83, 116, 117, 100, 105, 111] ```
27165|@aeschli FYI
27166|@wallverb is right. Their points are all correct.
27167|Thanks man, it's definitely a duplicate of #7343. I'll close it here and let's continue discussion over there. I'll look for a fix and will ask you to try it out soon. :+1:
27168|@sr105 has the same issue
27169|Thanks!
27170|It seems that removing the ANSI escape sequences is not enough (#7644). Both @jtsom and @sr105 have a few `Operating System Command` sequences that need proper parsing and understanding before we can get to node's output... Hmm...
27171|May be @joaomoreno as well.
27172|"@jtsom and @sr105, does this code throw an error?  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-lc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); const strip = s => s.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');  try {     console.log(JSON.parse(strip(result.stdout))); } catch (e) {     console.log(e); } ```"
27173|Closing. Did not receive a response in 14 days.
27174|"And finally, how about this one?  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); const strip = s => s.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '').replace(/\u001b\].*?\u0007/g, '');  try {     console.log(JSON.parse(strip(result.stdout))); } catch (e) {     console.log(e); } ```"
27175|I have similar issue that code-insiders does not respect my PATH variable (overrides with `PATH=/usr/bin:/bin:/usr/sbin:/sbin`). Your code @joaomoreno executes fine for me and it has proper `PATH` variable
27176|"@wallverb Is that the _latest_ one I published?  For reference, we might need to look for `/\u001b\].*?(\u0007|\u001b\\)/g`."
27177|"yes, the latest - the one that starts with ""And finally, how about this one?"" :) - in fact both of them works for me"
27178|Thanks for trying it out. Let's wait for @jtsom and @sr105 to confirm.
27179|I get an error for both of those:  ``` SyntaxError: Unexpected end of input     at Object.parse (native)     at <anonymous>:18:22 ```
27180|Duplicate of #7361. We don't support cygwin git, sorry.  We've been using Git for Windows successfully in the team, complete with SSH keys, options, line ending encodings et al. What is the actual issue you get with it?
27181|"Alright, thanks for the patience... can you then show me what you get with this one?  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); const strip = s => s.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '').replace(/\u001b\].*?\u0007/g, '');  console.log(strip(result.stdout)); ```"
27182|"Hmmm. So this is a dupe of a ticket that's closed because we've ""just never really looked into it""?  My issue is that I can use _exactly_ the same setup with Cygwin than on Linux without having to sort out the (rather clunky) Git for Windows options and separate management of SSH keys. It's just less friction for someone who has to work routinely on both environments. Personally, I would very much like _not_ to have to use Git for Windows _at all_ and just rely on the Cygwin binaries.  Also, you missed my suggestion of adding a `git.env` setting to set the environment for Git binaries, which is also useful on other platforms. Should I file an issue for that separately?"
27183|If #7361 were open we would close this one the same way. It is a duplicate, in any case.  Apologies for coming out harsh.  Let me expand a bit on _just never really looked into it_. Code already needs to support whichever version of git you have installed in whichever platform you are using it. It is a non-trivial task that gets another complexity fold as soon as we add git _flavours_. We've found that Git for Windows handles the great majority of the tasks users need and I've personally have yet to find a reason that would make me use cygwin instead.  Of course, I can be wrong and I'm definitely interested in someone proving me wrong. That's why I asked about the actual issue you face. If it is really something Git for Windows does not support, of course we'll reconsider our position towards cygwin, and we'll work towards that.
27184|It's all about integration. When you use Cygwin and its userland (bash, CLI tools, SSH, etc.), you don't need an extra terminal emulator like PuTTY, you can use standard Git plugins that rely on Perl/Python etc. seamlessly, and you don't need to set up a copy of your SSH keys anyplace else.   Right now, the current (stunted and incomplete) UNIX userland clone that ships with Git for Windows doesn't provide me those affordances. Also, I can't set GIT_AUTHOR_\* and GIT_COMMITTER_\* on a per-repo basis using Git for Windows - it's just a surreal amount of pain to deal with that kind of thing inside it, when it all works perfectly in Cygwin.  With an environment setting I might not only actually get Cygwin Git to work (I suspect it's just a matter of setting the right HOME and a few more variables) but also have GIT_\* settings set on a per-project basis for me inside VS Code. And this last bit will benefit every other platform, too.
27185|This is a bit unfortunate and a not so common real world case. It happens when: - There are no changes other than conflicting changes - The conflict resolution for **all** changes is to take `A` version  The command line `git` will create an _empty_ commit, since there is nothing to be done on the merge commit. Code will just not let you do a commit since it doesn't support empty commits.  We should maybe make Code aware that a merge is in progress, thus allowing the completion of the merge to follow.
27186|no errors, no output  Why do you need to strip out some of the text from the environment?
27187|Alright, let's keep this open for tracking the support. A PR would be much appreciated as we'll likely not have cycles to look into it any time soon.  Maybe next time I'm in the Lisbon office, I'll ping you and we'll get it working in an afternoon. :wink:
27188|"Great question. [This comment has the answer](https://github.com/Microsoft/vscode/issues/7644#issuecomment-226137884). It's not that I'm stripping from the environment, but from the output of spawning your `SHELL` which spawns `electron`. This may contain ANSI escape sequences.  OK, let's try without the `strip` just to know for sure what is in there:  ``` es6 const electron = ""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""; const cp = require('child_process'); const env = Object.assign({}, process.env, {     ATOM_SHELL_INTERNAL_RUN_AS_NODE: '1',     ELECTRON_NO_ATTACH_CONSOLE: '1' }); const command = `'${electron}' -p 'JSON.stringify(process.env)'`; const result = cp.spawnSync(process.env.SHELL, ['-ilc', command], {     detached: true,     stdio: ['ignore', 'pipe', process.stderr],     env,     encoding: 'utf8' }); const strip = s => s.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '').replace(/\u001b\].*?\u0007/g, '');  console.log(result.stdout); ```"
27189|Ah, I see.  ``` ]1337;RemoteHost=hchapman@silver.local]1337;CurrentDir=/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS]1337;ShellIntegrationVersion=2;shell=bash ```
27190|That is all you get? OK that is strange...  Do you have Code Insiders installed in `/Applications/Visual Studio Code - Insiders.app`?
27191|"No, but somehow your code seems to run with an incorrect path. All of the other times, it produced the same output, so I thought that the path was ignored somehow.  Fixed the path:  ``` ]1337;RemoteHost=hchapman@silver.local]1337;CurrentDir=/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS]1337;ShellIntegrationVersion=2;shell=bash{""MANPATH"":""/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"",""SSH_AGENT_PID"":""827"",""TERM_PROGRAM"":""iTerm.app"",""rvm_bin_path"":""/Users/hchapman/.rvm/bin"",""ATOM_SHELL_INTERNAL_RUN_AS_NODE"":""1"",""GEM_HOME"":""/Users/hchapman/.rvm/gems/ruby-2.3.0"",""SHELL"":""/usr/local/bin/bash"",""TERM"":""xterm-256color"",""CLICOLOR"":""1"",""HISTSIZE"":""1200"",""TMPDIR"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/"",""IRBRC"":""/Users/hchapman/.rvm/rubies/ruby-2.3.0/.irbrc"",""Apple_PubSub_Socket_Render"":""/private/tmp/com.apple.launchd.Pj34qiglL9/Render\nCOM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"",""COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET"":""/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"",""TERM_PROGRAM_VERSION"":""3.0.20160620-nightly"",""TERM_SESSION_ID"":""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"",""MY_RUBY_HOME"":""/Users/hchapman/.rvm/rubies/ruby-2.3.0"",""USER"":""hchapman"",""HISTFILESIZE"":""100000"",""_system_type"":""Darwin"",""rvm_path"":""/Users/hchapman/.rvm"",""SSH_AUTH_SOCK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T//ssh-XmPjAFOs3p2I/agent.826"",""__CF_USER_TEXT_ENCODING"":""0x1F5:0x0:0x0"",""PYENV_VIRTUALENV_INIT"":""1"",""GOOGLE_API_KEY"":""AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q"",""rvm_prefix"":""/Users/hchapman"",""PATH"":""/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/opt/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/MacGPG2/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/opt/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin"",""PWD"":""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS"",""ELECTRON_NO_ATTACH_CONSOLE"":""1"",""EDITOR"":""/Users/hchapman/.emacs.d/bin/edit.sh"",""LANG"":""en_US.UTF-8"",""\u001b]1337;RemoteHost"":""hchapman@silver.local\u0007\u001b]1337;CurrentDir=/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS\u0007\u001b]1337;ShellIntegrationVersion=2;shell=bash\u0007MANPATH=/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"",""ITERM_PROFILE"":""Default"",""_system_arch"":""x86_64"",""XPC_FLAGS"":""0x0"",""PS1"":""\\h:\\W \\u\\$ "",""ITERM_ORIG_PS1"":""\\h:\\W \\u\\$ "",""_system_version"":""10.11"",""XPC_SERVICE_NAME"":""0"",""HISTCONTROL"":""ignoreboth:erasedups"",""FIGNORE"":"":DS_Store:DS_Store:DS_Store"",""rvm_version"":""1.27.0 (latest)"",""HOME"":""/Users/hchapman"",""SHLVL"":""3"",""PYENV_SHELL"":""bash"",""VSCODE_NLS_CONFIG"":""{\""locale\"":\""en-us\"",\""availableLanguages\"":{}}"",""ITERM_PREV_PS1"":""\\h:\\W \\u\\$ "",""VSCODE_SHARED_IPC_HOOK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65-shared.sock"",""ITERM_SESSION_ID"":""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"",""LOGNAME"":""hchapman"",""VSCODE_IPC_HOOK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65.sock"",""GEM_PATH"":""/Users/hchapman/.rvm/gems/ruby-2.3.0:/Users/hchapman/.rvm/gems/ruby-2.3.0@global"",""VSCODE_PID"":""24055"",""DISPLAY"":""/private/tmp/com.apple.launchd.UckX2Pc0yA/org.macosforge.xquartz:0"",""SECURITYSESSIONID"":""186a7"",""RUBY_VERSION"":""ruby-2.3.0"",""_system_name"":""OSX"",""_"":""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS/Electron""} ```"
27192|Strange... can you now try adding the `strip()` back with the fixed path?
27193|"No errors  ``` {""MANPATH"":""/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"",""SSH_AGENT_PID"":""827"",""TERM_PROGRAM"":""iTerm.app"",""rvm_bin_path"":""/Users/hchapman/.rvm/bin"",""ATOM_SHELL_INTERNAL_RUN_AS_NODE"":""1"",""GEM_HOME"":""/Users/hchapman/.rvm/gems/ruby-2.3.0"",""SHELL"":""/usr/local/bin/bash"",""TERM"":""xterm-256color"",""CLICOLOR"":""1"",""HISTSIZE"":""1200"",""TMPDIR"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/"",""IRBRC"":""/Users/hchapman/.rvm/rubies/ruby-2.3.0/.irbrc"",""Apple_PubSub_Socket_Render"":""/private/tmp/com.apple.launchd.Pj34qiglL9/Render\nCOM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"",""COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET"":""/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"",""TERM_PROGRAM_VERSION"":""3.0.20160620-nightly"",""TERM_SESSION_ID"":""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"",""MY_RUBY_HOME"":""/Users/hchapman/.rvm/rubies/ruby-2.3.0"",""USER"":""hchapman"",""HISTFILESIZE"":""100000"",""_system_type"":""Darwin"",""rvm_path"":""/Users/hchapman/.rvm"",""SSH_AUTH_SOCK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T//ssh-XmPjAFOs3p2I/agent.826"",""__CF_USER_TEXT_ENCODING"":""0x1F5:0x0:0x0"",""PYENV_VIRTUALENV_INIT"":""1"",""GOOGLE_API_KEY"":""AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q"",""rvm_prefix"":""/Users/hchapman"",""PATH"":""/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/opt/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/MacGPG2/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/opt/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin"",""PWD"":""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS"",""ELECTRON_NO_ATTACH_CONSOLE"":""1"",""EDITOR"":""/Users/hchapman/.emacs.d/bin/edit.sh"",""LANG"":""en_US.UTF-8"",""\u001b]1337;RemoteHost"":""hchapman@silver.local\u0007\u001b]1337;CurrentDir=/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS\u0007\u001b]1337;ShellIntegrationVersion=2;shell=bash\u0007MANPATH=/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"",""ITERM_PROFILE"":""Default"",""_system_arch"":""x86_64"",""XPC_FLAGS"":""0x0"",""PS1"":""\\h:\\W \\u\\$ "",""ITERM_ORIG_PS1"":""\\h:\\W \\u\\$ "",""_system_version"":""10.11"",""XPC_SERVICE_NAME"":""0"",""HISTCONTROL"":""ignoreboth:erasedups"",""FIGNORE"":"":DS_Store:DS_Store:DS_Store"",""rvm_version"":""1.27.0 (latest)"",""HOME"":""/Users/hchapman"",""SHLVL"":""3"",""PYENV_SHELL"":""bash"",""VSCODE_NLS_CONFIG"":""{\""locale\"":\""en-us\"",\""availableLanguages\"":{}}"",""ITERM_PREV_PS1"":""\\h:\\W \\u\\$ "",""VSCODE_SHARED_IPC_HOOK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65-shared.sock"",""ITERM_SESSION_ID"":""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"",""LOGNAME"":""hchapman"",""VSCODE_IPC_HOOK"":""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65.sock"",""GEM_PATH"":""/Users/hchapman/.rvm/gems/ruby-2.3.0:/Users/hchapman/.rvm/gems/ruby-2.3.0@global"",""VSCODE_PID"":""24055"",""DISPLAY"":""/private/tmp/com.apple.launchd.UckX2Pc0yA/org.macosforge.xquartz:0"",""SECURITYSESSIONID"":""186a7"",""RUBY_VERSION"":""ruby-2.3.0"",""_system_name"":""OSX"",""_"":""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS/Electron""} ```"
27194|Awesome man, and I bet you can even wrap that around a `JSON.parse()` call.  We can wait for @jtsom's confirmation, but I'd say we caught it. :+1:
27195|"and with JSON.parse()...  ``` ]1337;RemoteHost : ""hchapman@silver.local]1337;CurrentDir=/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS]1337;ShellIntegrationVersion=2;shell=bashMANPATH=/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"" ATOM_SHELL_INTERNAL_RUN_AS_NODE : ""1"" Apple_PubSub_Socket_Render : ""/private/tmp/com.apple.launchd.Pj34qiglL9/Render‚ÜµCOM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"" CLICOLOR : ""1"" COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/HCHAPMAN/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET : ""/private/tmp/com.apple.launchd.0E1Ci88ccO/ServiceProcessSocket"" DISPLAY : ""/private/tmp/com.apple.launchd.UckX2Pc0yA/org.macosforge.xquartz:0"" EDITOR : ""/Users/hchapman/.emacs.d/bin/edit.sh"" ELECTRON_NO_ATTACH_CONSOLE : ""1"" FIGNORE : "":DS_Store:DS_Store:DS_Store"" GEM_HOME : ""/Users/hchapman/.rvm/gems/ruby-2.3.0"" GEM_PATH : ""/Users/hchapman/.rvm/gems/ruby-2.3.0:/Users/hchapman/.rvm/gems/ruby-2.3.0@global"" GOOGLE_API_KEY : ""AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q"" HISTCONTROL : ""ignoreboth:erasedups"" HISTFILESIZE : ""100000"" HISTSIZE : ""1200"" HOME : ""/Users/hchapman"" IRBRC : ""/Users/hchapman/.rvm/rubies/ruby-2.3.0/.irbrc"" ITERM_ORIG_PS1 : ""\h:\W \u\$ "" ITERM_PREV_PS1 : ""\h:\W \u\$ "" ITERM_PROFILE : ""Default"" ITERM_SESSION_ID : ""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"" LANG : ""en_US.UTF-8"" LOGNAME : ""hchapman"" MANPATH : ""/usr/local/MacGPG2/share/man:/opt/local/share/man:/usr/share/man:/usr/local/share/man:/usr/local/MacGPG2/share/man:/opt/local/share/man"" MY_RUBY_HOME : ""/Users/hchapman/.rvm/rubies/ruby-2.3.0"" PATH : ""/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/opt/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/MacGPG2/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0/bin:/Users/hchapman/.rvm/gems/ruby-2.3.0@global/bin:/Users/hchapman/.rvm/rubies/ruby-2.3.0/bin:/usr/local/Cellar/pyenv-virtualenv/20160315/shims:/Users/hchapman/.pyenv/shims:/opt/local/bin:/opt/local/sbin:/opt/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin:/Users/hchapman/Qt/5.7/clang_64/bin:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/tools:/Users/hchapman/work/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:/usr/local/opt/go/libexec/bin:/Users/hchapman/.iterm2_bin:/Users/hchapman/.rvm/bin"" PS1 : ""\h:\W \u\$ "" PWD : ""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS"" PYENV_SHELL : ""bash"" PYENV_VIRTUALENV_INIT : ""1"" RUBY_VERSION : ""ruby-2.3.0"" SECURITYSESSIONID : ""186a7"" SHELL : ""/usr/local/bin/bash"" SHLVL : ""3"" SSH_AGENT_PID : ""827"" SSH_AUTH_SOCK : ""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T//ssh-XmPjAFOs3p2I/agent.826"" TERM : ""xterm-256color"" TERM_PROGRAM : ""iTerm.app"" TERM_PROGRAM_VERSION : ""3.0.20160620-nightly"" TERM_SESSION_ID : ""w0t4p1:60A50844-9CFF-4452-A355-156810C97B38"" TMPDIR : ""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/"" USER : ""hchapman"" VSCODE_IPC_HOOK : ""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65.sock"" VSCODE_NLS_CONFIG : ""{""locale"":""en-us"",""availableLanguages"":{}}"" VSCODE_PID : ""24055"" VSCODE_SHARED_IPC_HOOK : ""/var/folders/7b/vbjdcfb515q7fs6vyq73_rbm0000gn/T/Code-38ba65-shared.sock"" XPC_FLAGS : ""0x0"" XPC_SERVICE_NAME : ""0"" _ : ""/Users/hchapman/Applications/Visual Studio Code.app/Contents/MacOS/Electron"" __CF_USER_TEXT_ENCODING : ""0x1F5:0x0:0x0"" _system_arch : ""x86_64"" _system_name : ""OSX"" _system_type : ""Darwin"" _system_version : ""10.11"" rvm_bin_path : ""/Users/hchapman/.rvm/bin"" rvm_path : ""/Users/hchapman/.rvm"" rvm_prefix : ""/Users/hchapman"" rvm_version : ""1.27.0 (latest)"" ```"
27196|"While not very exciting, I am getting behind on the term ""item"".  Items can be files, previews, readonly and synthetic views which are displayed in the editors.  The header could be ""OPEN ITEMS"" and we could have commands ""Close Item"" to close the top item in the editor stack and ""Close Editor"" to close the active editor."
27197|Thanks for all the help and confirmation!
27198|I also see issues when moving left and right. The visual cursor can get slightly out of sync with where it really is. Usually it is a space or 2 when it happens.
27199|"Look at my ""steps to reproduce"" above.  I get   [Ctrl =]   for ""zoom in""  Key mappings: { ""key"": ""ctrl+="",                ""command"": ""workbench.action.zoomIn"" }, { ""key"": ""ctrl+-"",                ""command"": ""workbench.action.zoomOut"" },  It should be { ""key"": ""ctrl++"",                ""command"": ""workbench.action.zoomIn"" },"
27200|"I can submit from the system I was using at work tomorrow, but for info, this is my home machine:  {""ATOM_SHELL_INTERNAL_RUN_AS_NODE"":""1"",""SHELL"":""/bin/bash"",""CLICOLOR"":""1"",""MINDSTORM_EMAIL_LOGIN"":""no-reply@shrewsburyrobotics.org"",""TMPDIR"":""/var/folders/r1/vf3lkqcn0s348hhzqr_7_yx40000gn/T/"",""Apple_PubSub_Socket_Render"":""/private/tmp/com.apple.launchd.o5VQT7kLZl/Render"",""USER"":""john"",""SSH_AUTH_SOCK"":""/private/tmp/com.apple.launchd.hfcn72pC7T/Listeners"",""__CF_USER_TEXT_ENCODING"":""0x1F5:0x0:0x0"",""LSCOLORS"":""dxfxcxdxbxegedabagacad"",""GOOGLE_API_KEY"":""AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q"",""PATH"":""/usr/local/heroku/bin:/Users/john/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/heroku/bin:/Users/john/.rbenv/shims"",""PWD"":""/"",""ELECTRON_NO_ATTACH_CONSOLE"":""1"",""XPC_FLAGS"":""0x0"",""RBENV_SHELL"":""bash"",""XPC_SERVICE_NAME"":""com.microsoft.VSCodeInsiders.5792"",""SHLVL"":""2"",""HOME"":""/Users/john"",""VSCODE_NLS_CONFIG"":""{\""locale\"":\""en-us\"",\""availableLanguages\"":{}}"",""VSCODE_SHARED_IPC_HOOK"":""/var/folders/r1/vf3lkqcn0s348hhzqr_7_yx40000gn/T/Code - Insiders-96d963-shared.sock"",""LOGNAME"":""john"",""VSCODE_IPC_HOOK"":""/var/folders/r1/vf3lkqcn0s348hhzqr_7_yx40000gn/T/Code - Insiders-96d963.sock"",""LC_CTYPE"":""en_US.UTF-8"",""PGDATA"":""/usr/local/var/postgres"",""HISCONTROL"":""ignoredups"",""VSCODE_PID"":""25092"",""_"":""/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron""}"
