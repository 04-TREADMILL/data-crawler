25201|I definitely agree it needs more info, but unfortunately I don't have any. I was editing a file, a relatively new file with maybe 5 lines or so. This is the first time I've ever seen it so I can't say how often it happens. I use Code a _heck_ of a lot, but as I said, this was the first time I saw it. I do have extensions too. I've got a bunch - need me to list em all?
25202|@tolgabalci Can you share your injection grammar?
25203|"The latest insiders build has a command `workbench.action.terminal.focus` which is both available in the `F1` command palette under ""Focus Terminal"" and available to attach to a keybinding."
25204|@bpasero This workaround could help the current problem but I think it would open doors for other new things. Currently the view is just a representation of the markers generated by the sources.. It is expected that all markers are valid and users are supposed to fix them in the files.   I think we need to come up with a nice story around managing markers.. May be more customizations or open apis or adding more capabilities to current view as you said.
25205|@J-Siu the variables are not defined because the code is minified and the variable names are scrambled. In the Local Scope, the `e` variable is most likely the incoming message. It would be very interesting to see what these messages are.
25206|cc @egamma @bpasero
25207|@Tyriar I would like to reproduce this and see where and how these errors are generated from.. Can you please provide steps how you got this?  Thanks
25208|:+1:
25209|Ah, well if you haven't used arch, you're missing out! Difficult to go back once you've seen the light ;)  Linking to arch repos or packages from the website is not necessary, that's not the arch way. Perhaps just a comment on the download page that vscode is available from the AUR (or pacman if it gets promoted) with the package name and a little Arch icon somewhere so people know it's available at a glance and that it's endorsed. That's the main attraction of arch, the community just take care of software distribution via pacman and the AUR. There's no manual package installs, no PPA's to wrangle or keep track of, no major version numbers or periodic releases. AUR is a backup plan for when software isn't present on official repos (it's never failed me yet!), but quality packages always seem to make it into 'community' or 'extra'.  Your cooperation with the maintainer is great. Nudge him with an early link to the new build before releases go live, and it might not hurt to incorporate a test into your test plan that the Arch package is available promptly prior to release, then you can send a prompt email if it's not.
25210|@alexandrudima: `git bisect` told me that 13cb5df0ae6c67d03b9248907bf428ff1df8585c seems to be the culprit üò®   It reproduces about 50% of the times I try, so there's some race condition somewhere... here are the repro steps: 1. Have a modified file in a git repo 2. Open that file in Code 3. Reload the window. 4. Sometimes the file won't have any diff decorations in the gutter. If you still see the decorations, reload the window until you don't see them.  Wanna review that change a bit? üëç
25211|Ok, I will look into it
25212|üëç for a way to get imports resolved via quick fix.
25213|"Same thing in Windows. Here's a screen capture  ![terminal focus](https://cloud.githubusercontent.com/assets/16612667/15931732/8fdde992-2e1e-11e6-8e0e-dba7349f26a7.gif)  Note that after selecting the text in the editor, I started hitting ""a"" repeatedly. Only the first appears in the console."
25214|Looks great, thanks! üçª
25215|Well, I just thought of running visual studio code as administrator. Did work without running any weird command :)
25216|"Yes, VSCode was closed. The event number is always 0. Events are generated, as soon a folder or file is selected in file explorer within the project workpace.  When a .ts file is selected in file explorer, codeHelper keeps on generating events for the selected ts file as long this file is selected, one event (or maybe two) per second, event nr. 0. Extract of output: `0|C:\ews\kepler\ICM___\icm-ng\components\app\app.component.ts`  Editing a File in Notepad++ results in three output lines in the codeHelper output (assumed this file is not selected in file explorer), the event number is always 0. Even when changing and saving the ts file, the number of the resulting event is 0."
25217|Looks great, just did a few tweaks, thanks! üçª
25218|Closed by #6897, thanks @tht13 !
25219|@tht13 what you said does not address the issue.
25220|@tallakh you are hitting https://github.com/Microsoft/vscode/issues/7481
25221|The default Mac select word is alt+shift+left and that doesn't work in those boxes.
25222|Awesome, thanks! üçª
25223|Fixed by #6896
25224|@J-Siu I have also looked at the attached CPU profile! Thank you!  It looks at after 50 seconds all the time is spent in [channel.onread](https://github.com/nodejs/node/blob/v5.10.0/lib/internal/child_process.js#L426).  Looking at nodejs's sources, the buffer can grow unbound if no `\n` is present and at each step the buffer is checked for a `\n` from its beginning.  My belief is that this `jsonBuffer` is growing continuously and a `\n` is never encountered, thus it does not get flushed.  If you get a chance, I would appreciate it if you could open `internal/child_process.js` and add a `console.log(jsonBuffer)`. You will then see everything the renderer process receives. My hope is that the contents we will get to see will elucidate what these messages contain and hopefully which process is sending them.  Here I am doing it on my machine: ![onread](https://cloud.githubusercontent.com/assets/5047891/15934017/3f669524-2e62-11e6-9dd0-8da9440019f8.gif)  Many thanks!
25225|@bpasero It is my belief that the buffer does not contain a `\n`, thus making it unbound and it might never enter the `while` loop, so best to add a `console.log(jsonBuffer)` on line 430
25226|@Andi-Lo HTML/PHP and TypeScript highlighting are not related. Please file a separate issue.
25227|Thanks! üéÜ
25228|You're right, I will delete the post and open a new issue.
25229|+1 Probably one of the most important features to have... It makes **no** sense not to have it in.
25230|@joaomoreno As far as I can remember it's always happened with the insiders build and has never been successful.
25231|We've made many changes in the core of VSCode, but given you were using these extensions before it doesn't make sense that they would all of the sudden cause a crash. Is there something different in your usage of VS Code? e.g. Did you start using the integrated terminal?
25232|Nope. Well, I tried the terminal just to see it in action. But I'm not using it regularly.
25233|Are you using the new integrated terminal?
25234|I'm working on Go and having the same issue.   I always get this:   ![](https://cldup.com/9NeeAWW8r8.png)  **UPDATE** It started to work again when I tried to debug it doing the following:  ``` go get -u github.com/nsf/gocode gocode close geocode -debug -s ```
25235|@joaomoreno I've tried reloading at least 20 times on both `master` and on the `insider` build from yesterday: ![image](https://cloud.githubusercontent.com/assets/5047891/15935842/15fabf38-2e69-11e6-8317-dd2da8181c80.png)  Can this be mac specific?
25236|My screenshot  was from Windows.
25237|Ok, I don't know what I did but I ended up reproducing it. Debugging shows that the worker initialization request got cancelled.
25238|@alexandrudima I tried to follow your instruction to add the console.log. But it seems to have no effect. One thing I notice is after I add the line, the file name tab did not change color as shown in your video.  I am attaching the console log generated using code --disable-extensions --logExtensionHostCommunication [console-1465484593252.log.zip](https://github.com/Microsoft/vscode/files/307318/console-1465484593252.log.zip)
25239|@J-Siu Sorry I forgot to mention that a `Ctrl+S` is needed.
25240|Steps that work more reliable for me:  Reload followed by quickly pressing `Ctrl+Shift+<` repeatedly before the editor has loaded.
25241|@alexandrudima That did it. However after I click files a few times, the console was suddenly filled up and the machine became so slow that I have to use my laptop to ssh back and kill the VSCode.  Is there a way to write the console log directly to a file?
25242|I guess this is not an issue. Sorry for the misunderstanding
25243|@J-Siu instead of the console log can you just set a breakpoint and post the values you get here? since there seems to be so much spam in the method, I guess the console cannot catch up with all the output.
25244|"@J-Siu Thank you so much for doing this.  Here is a code snippet that you can place instead of the console.log right after line 429:  Replace `C:\\Alex\\log.txt` with a file path to a folder that exists on your machine.  ``` var binding = process.binding('fs'); var fd = binding.open('C:\\Alex\\log.txt', 8 | 256 | 1, 0o666); var buff = Buffer.from(Date.now() + ': <<' + jsonBuffer + '>>\n'); binding.writeBuffer(fd, buff, 0, buff.length, null); binding.close(fd); ```  This is the sort of thing I get at `C:\\Alex\\log.txt`:  ``` 1465491223325: <<[""{\""seq\"":\""20\""}""] >> 1465491223481: <<[""{\""seq\"":\""21\""}""] >> 1465491223497: <<[""{\""seq\"":\""22\""}""] >> 1465491223511: <<[""{\""seq\"":\""23\""}""] >> 1465491223528: <<[""{\""seq\"":\""24\""}""] >> 1465491223546: <<[""{\""seq\"":\""25\""}""] >> 1465491223560: <<[""{\""seq\"":\""26\""}""] >> 1465491223666: <<[""{\""seq\"":\""27\""}""] >> 1465491223681: <<[""{\""seq\"":\""28\""}""] >> 1465491223785: <<[""{\""seq\"":\""29\""}""] >> 1465491223807: <<[""{\""seq\"":\""30\""}""] >> 1465491223834: <<[""{\""seq\"":\""31\""}""] >> 1465491223851: <<[""{\""seq\"":\""32\""}""] >> 1465491223916: <<[""{\""seq\"":\""33\""}""] >> 1465491223932: <<[""{\""seq\"":\""34\""}""] >> 1465491223948: <<[""{\""seq\"":\""35\""}""] >> 1465491225362: <<{""id"":8,""data"":0,""type"":1} >> 1465491225378: <<{""id"":3,""data"":""git fetch\n"",""type"":2} >> 1465491225606: <<[""{\""seq\"":\""36\""}""] >> 1465491226260: <<[""{\""seq\"":\""37\""}""] >> ```"
25245|@sandy081 try clone Tyriar/vscode-xml, run npm install, npm test and then open declares.d.ts
25246|+1.  Just noticed this today. I'm on Windows 10 with version 1.2.0 It seems to also still exist in 1.3.0-Insiders.
25247|What do you mean 'highly debugger specific'? Seems like it would be applicable to any other client implementing the debug protocol. I'm trying to make the config simpler, but adding a mandatory property that should have the same value 100% of the time has the opposite effect.
25248|this seems easy to implement, @AliMD is it ok I work on this?
25249|@piscean does this same occur using a regular cmd prompt? I'm assuming this us Windows.
25250|Great to know you were able to catch it! üëç
25251|@weinand is your terminal shell bash? Were you running anything in particular or just idling?
25252|Yes, Windows.  When I do this from a regular cmd prompt, it works correctly.  There is the debug spew mentioned in https://github.com/Microsoft/vscode/issues/5698, but not the syntax error dump mentioned above.
25253|@Tyriar I tried with bash and csh but did not see a difference. I was running a recursive ls. See step 2. from above.
25254|@weinand thanks, just woke up :stuck_out_tongue:
25255|> Are you using the new integrated terminal?  I'm not.  > We would appreciate any other details to repro this.  I tried it a bit more today, and, at least for me, it seems to always happen when I try to save. I press ctrl+S, but the save operation never completes (the black dot never goes away, and the file never actually gets saved). I then have to kill the process and try again. It happens maybe 5-10% of the time (or less) when I try to save (most save operations are successful and instant)  The files I'm editing are on a networked filesystem, which might be related, though I'm confident that that's not the direct cause, because (a) this has always worked in previous versions and (b) I'm not seeing this problem in other editors, including a 1.1 install of VS Code.
25256|Hi **@gontadu**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
25257|@weinand Thanks, looking forward to a fix.
25258|@roblourens with 'highly debugger specific' I was referring to the whole set of attributes that we had initially. I agree, 'cwd' is probably one of the generic attributes.  My reluctance to introduce any 'side channel' attributes not visible to the user in his launch config, comes from my bad experience with any implicit, behind-the-scene magic: if I see a launch config, I see the whole picture. If you want to glob for files automatically, why not making this explicit?  I've seen many project folders with nested sub projects that had their own launch configs. Globbing at the root folder will probably not exclude the sub projects, which might be confusing. Having an explicit attribute where a user can specify from where to start the globbing seems to me a more transparent and flexible approach.  Do you consider to have an optional attribute where the user could override the default globbing behaviour?
25259|Have you ever opened Code with `sudo`?
25260|Not that I remember. Is there a way I can check to see if I did and fix it?
25261|That's exactly the same thing for me, I think it might be .js file related because I have some html and php file open in different tabs and it never happened on those files, I initially thought it might be because the terminal was opened, but that wasn't the case, and I also thought it may be because their is a grunt watchify on the folders I am working on, but it's wasn't the case either, I have also started removing some plugins, which initially things seems fine, so I would attribute that to the plugin bug. But then I am still getting the same issue again.  Windows 7 I am on cooperate network.  I installed V1.1 to see if I could revert back but that problem still occurred. I am back on v1.2  Temporary solution for now is: After press CTRL  + S to save, the flickering starts to happen, as if it's trying to save but then cant save which sends it's in a endless loop. If I press CTRL + Z, to undo, it will stop and eventually save the file, the implication of that is, I lose the complete history of the file, so I can't further undo any actions, prior to me saving it. Solution B: Sometimes I also find if the flickering is happening, if I switch to debug to view git file changes, then this also terminate the flickering and saves the file also. Again I still lose the file history meaning I can't undo any changes made prior.  It's a pain to work with now.  I hope this is enough information.
25262|I agree in principle but it doesn't seem like magic to me because the user explicitly opened that folder. I would definitely allow them to override it for subprojects. I understand if you don't want to add it, at least specifying 'cwd' would still be simpler than figuring out 'webRoot' which is the property I want to get rid of.
25263|@roblourens I'm not sure that I understand 'cwd' any better than 'webRoot' in the context of a web project. But you can use/introduce whatever you want.  What I don't understand is why you think that 'figuring out webRoot' is difficult? If a user is asked to create a new launch config, she will pick the Chrome Debug type and that will create launch configs that have the `webRoot` attribute already set to `${projectRoot}`. So she does not even have to review the launch config but can just press F5. And if she later wants to narrow down the web root, the attribute is already there and she does not have to find (and understand) it first.
25264|"In a really simple web project, you have some files that get built to `root/out/script1.js` and `root/out/componentA/script2.js`, referenced by your .html or whatever, and they're served as `localhost/out/script1.js` so webRoot is your project root, or a simple path from the root. In more complex configs, it's not uncommon for the url to not totally match the path on disk. Like your node_modules are served as one path, some scripts from another path, other scripts are bundled in memory and don't exist on disk. So I have a task to support a more complex webRoot config which can mirror the server config. But I can also make lots of cases ""just work"" by doing some fuzzy matching.  And then even in simple cases, I've found that some people are confused about what it should be set to, and I want to make it as simple as possible."
25265|I am seeing this issue too.  If have id_rsa and GitHub_rsa files in my .ssh folder.  I am trying to use the id_rsa key to connect to vsts.
25266|I think I've seen {lambda} before too. @justsayno is Clink what powers cmder?
25267|Possibly related: https://github.com/Microsoft/vscode/issues/7077
25268|Yes it is. For all I know its completely unrelated (I don't know anything about how this integrated console works exactly). But it is quite similar to this:  https://github.com/cmderdev/cmder/issues/223
25269|What happens exactly and how is this related to vscode? Does vscode not find the CLI, if so what do you do to trigger the error?
25270|Fixed in the latest insiders already :sparkles:  Thanks a lot for the gif @mdickin, made it really easy to repro.
25271|+1 for this feature
25272|@alexandrudima is there a setting I can change in my `settings.json` to disable case-insensitivity? It's really annoying and I'd like if I could have it always be case sensitive.
25273|Apologies, I'm not sure why I thought that was relevant
25274|I believe VSCode should have an option in tasks definition whether output should appear in terminal or just normal output window
25275|@justsayno thanks for the link.  I'm going to mark as help wanted if anyone wants to contribute as I won't realistically have time to look at this for a long time.
25276|@sandy081 should probably reuse `explorer.autoReveal` rather than adding a new config imo.
25277|"Why not using the CSS property ""transition-duration"" for that? Seems to work quite well at first glance - if the lines that get invisible wouldn't disappear before the transition-duration is over. I am not sure how important smooth scrolling is when translate3d is not used (and thus transition-duration has no effect)."
25278|"I also had this problem. I think it might be related to moving several ""services"" to the same git repo. Example directory structure:  ``` app/ ‚îú‚îÄ‚îÄ .git/ ‚îú‚îÄ‚îÄ .gitignore ‚îú‚îÄ‚îÄ catalog-service/ |   ‚îú‚îÄ‚îÄ .vscode/ |       ‚îî‚îÄ‚îÄ launch.json |   ‚îú‚îÄ‚îÄ node_modules/ |   ‚îî‚îÄ‚îÄ server.js ‚îú‚îÄ‚îÄ user-service/ |   ‚îú‚îÄ‚îÄ .vscode/ |       ‚îî‚îÄ‚îÄ launch.json |   ‚îú‚îÄ‚îÄ node_modules/ |   ‚îî‚îÄ‚îÄ server.js ‚îî‚îÄ‚îÄ docker-compose.yml ```  Then doing `cd app/catalog-service/ && code .` will open vscode for the catalog service and everything works fine except debugging. Note that `launch.json` has `program: ""${workspaceRoot}/server.js""`.  ### Workaround  The workaround was to `cd app/ && code .` will open vscode for the root directory with all services (main git repo). Then set `launch.json` at the top level to  `program: ""${workspaceRoot}/catalog-service/server.js""`."
25279|@tallakh the fix for #7481 is available in the next Insider build.
25280|ctrl + backspace in powershell is also not working. It only removes one character, while in native powershell and powershell launched through native cmd it removes the whole previous word.  Edit: Nevermind, it appears that ctrl + backspace doesn't delete the whole word on 32 bit powershell, which is what I was running in VSCode.
25281|In the latest insider's release ctrl + left/right no longer produce '5D/5C', but only move one character at a time rather than whole words. ctrl + c produces nothing rather than '^c'.
25282|"As I see  from rpm postinst script (I uncommented code)  ``` sh if [ ""code"" != ""code-oss"" ]; then        if [ -d ""/etc/yum.repos.d"" ]; then                REPO_FILE=/etc/yum.repos.d/code.repo                rm -f $REPO_FILE                echo -e ""[code]\nname=Visual Studio Code\nbaseurl=https://vscode-update.azurewebsites.net/api/rpm/stable/x86_64/rpm"" > $REPO_FILE        fi fi ```  you gonna change user's repo configuration unconditionally on every package install/update. I have custom repo naming scheme and this kind of ""service"" from google-chrome was driving me nuts for a long time until I finally learned about a ""magic"" variable, which disabled this behaviour.  It's a bit sad that you gonna adopt this bad practice to change user's configuration in postinst script without asking him/her and it would be really nice if you'll adopt community approved method to provide repo for user which keeps in user's hands control over his/her configs.  A good example of such practice is described in Fedora wiki (https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)"
25283|@iavael thanks for your comments, at the very least we'll also adopt the magic variable and document it on the installation page. Once it's all working we will also provide documentation on adding the repository/key manually so you don't even need to touch the deb if you don't want to. A disclaimer could also be added to the deb's description if touching `yum.repos.d`/`sources.list.d` is a concern for many people.  If you're interested, here are some discussions we've had around the topic of individual distro repositories #7412
25284|Thanks @AAurelianus, it looks like the adoption of xterm.js has improved the powershell situation :fireworks:  Here is the open issue for <kbd>ctrl</kbd>+arrow https://github.com/sourcelair/xterm.js/issues/65 (it happens on Linux/bash too).
25285|> As far as I can see such a mechanism isn't exported. Would be great if it could be exported  @alexandrudima Was I right in that there isn't a way right now? Thanks for all your hard work on this :rose:  Also refs https://github.com/Microsoft/vscode/issues/7250
25286|I‚Äôm not sure that mine is actually checking successfully for updates. While it does say ‚ÄúLast checked at 10:26:39 PM‚Äù (or whatever), I know that there are now daily/nightly updates that I‚Äôm not being prompted to (re)install. It would be useful if there were a way to inlude the date as well as the time in the ‚ÄúLast checked‚Äù dialog, though the extra 11 or 12 character date might be unwieldy. Then again, there might be room.  Just installed the 1.3.0-insider, so we‚Äôll see what happens going forward.  > On Jun 6, 2016, at 12:54 PM, William George notifications@github.com wrote: >  > 1.1.1 seems to be fine for me too - Like yourself, wasn't paying attention to when it was fixed. >  > ‚Äî > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub https://github.com/Microsoft/vscode/issues/978#issuecomment-224018791, or mute the thread https://github.com/notifications/unsubscribe/AL_r5eS7ukez1SBfiLshDVZi5TyyRGRQks5qJFDWgaJpZM4GuMYS.
25287|"@alexandrudima   It took me a few tries to get this right and split the output correctly.  **Home directory**: /Volumes/HD2/JS  **Starting command(run from home)**: code --disable-extensions  **Code added**:  > var binding = process.binding('fs'); > var fd = binding.open('/Volumes/HD2/Downloads/console.log.txt', 8 | 256 | 1, 0o666); > var buff = Buffer.from(Date.now() + ': <<' + jsonBuffer + '>>\n'); > binding.writeBuffer(fd, buff, 0, buff.length, null); > binding.close(fd);  **Observation:** (1) My testing source folder is /Volumes/HD2/JS/Documents/code/JSDS/Test/angularjs2/qs. If VSCode auto load the folder then this issue almost happen everytime. If I close the folder and open it, it may not happen. (2) The log file growth very very fast, a few hundred M in just less than a minute.  **Log files:** The original log file is 653M (time stamp 1465516431090 to 1465516440973). I use following command to split it:  >  awk '/14655/{filename=""console-split.""NR"".txt""};{print > filename; close(filename)}' console.log.txt  Column 1-76 of split log:  > cut -c1-76 console-split.*.txt  > 1465516431090: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516431349: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516431681: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516432010: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516432304: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516432524: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516432779: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516433133: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516433363: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516433599: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516433932: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516434177: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516434435: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516434697: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516434969: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516435193: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516435424: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516435773: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516435995: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516436233: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516436513: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516436781: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516437117: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516437365: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516437601: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516437841: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516438144: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516438556: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516438905: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516439182: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516439460: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516439687: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516439915: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516440147: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516440376: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516440737: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status"" > 1465516440973: <<{""id"":4,""data"":{""repositoryRoot"":""/Volumes/HD2/JS"",""status""  File size before zip:  > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.01.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.02.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.03.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.04.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.05.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.06.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.07.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.08.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.09.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.10.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.11.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.12.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.13.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.14.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.15.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.16.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.17.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.18.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.19.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.20.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.21.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.22.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.23.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.24.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.25.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.26.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.27.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.28.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.29.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.30.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.31.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.32.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.33.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.34.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.35.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.36.txt > -rw-r--r--   1 JS  staff    18M Jun  9 21:21 console-split.37.txt > -rw-r--r--   1 JS  staff   653M Jun  9 19:54 console.log.txt  I uploaded 1, 2 and 37. [console-split.1.txt.zip](https://github.com/Microsoft/vscode/files/308200/console-split.1.txt.zip) [console-split.2.txt.zip](https://github.com/Microsoft/vscode/files/308202/console-split.2.txt.zip) [console-split.37.txt.zip](https://github.com/Microsoft/vscode/files/308201/console-split.37.txt.zip)"
25288|This is blocking me fixing https://github.com/sourcelair/xterm.js/issues/108
25289|Well, seems like it is a dup of #2771, #588
25290|I am using VS code only for PHP programming. I could use it a few seconds, a couple of keystrokes and it would freeze and never wake up again.  I just gave it another try and just uninstalled, then reinstalled it. It seems fine for now.  Even though all users are describing similar symptoms, we all seem to use it a tiny bit different and therefore it might all be related to completely different problems.  Anyway, it works fine for me at the moment.  Is there no debug more with log files or anything that we could append the next time this happens?
25291|Should it not be identical to our template?  ![image](https://cloud.githubusercontent.com/assets/900690/15954561/99642714-2ed8-11e6-99d5-1b49c5ace6df.png)
25292|I created an issue to look at after this for splitting the terminal panel so you can see multiple at once https://github.com/Microsoft/vscode/issues/7504
25293|@J-Siu great, thanks a lot! Can you reproduce the high CPU when disabling git via settings and restarting? The setting would be `git.enabled: false`  Also, what is your git version installed?  @joaomoreno the output in the files looks like having the form of `{ x, y, path, mimetype }` which is `IRawFileStatus` in https://github.com/Microsoft/vscode/blob/ben/7182/src/vs/workbench/parts/git/common/git.ts#L16
25294|Are you proposing to be able to split the panel side by side like the editor?
25295|@preexo @doyintade @calebegg are you guys using a specific version of Git or maybe GitHub for Windows? Does it reproduce if you disable Git via settings (`git.enabled: false`) after a restart?
25296|"We do this when ""running out of sources"" in https://github.com/Microsoft/vscode/blob/ben/7182/src/vs/workbench/electron-browser/index.html#L88 so that you can always reload even if the workbench fails to come up."
25297|Thanks a lot it worked for me too on Ubuntu 14.04 TLS
25298|@bpasero Atom's [term3](https://atom.io/packages/term3) has the capability apparently, the package doesn't seem to be working for me though. Would want to see if it's a reasonable experience first.
25299|@bpasero I mentioned in the issue https://github.com/Microsoft/vscode/issues/7497  > I can't figure out how to do new lines in the query string is the only issue, `\n`, `<br>` and `&lt;br&gt;` all seem to not work.
25300|@Tyriar oh I see so the terminal itself would split in the panel, we would not add splitting support to the panel?
