7801|Verified that the above example doesn't cause any exception.
7802|Quick fix works as well:  ![capture](https://cloud.githubusercontent.com/assets/1931590/12676887/9e371298-c695-11e5-9fee-97c8950da73d.png)
7803|@bpasero yes, it is unrelated to file watching. I was able to reproduce on 0.10.6 with a simple fs.readFileSync but not on 0.10.7.
7804|I will close this as fixed for 0.10.7 since all test cases we have that fail on 0.10.6 pass on 0.10.7 although we don't have the final answer why.   @bpasero can you please marked as verified.
7805|Actually I like having color in the hover. In Feb I will try to make a request to TS to better support this.
7806|"Thanks weinand,  it happens with node 5.5, too but regardless of VSC. Could reproduce it even by starting the commandline debugger and stepping through with ""next"".  `var util = require(""util"");  var obj = { 1: ""fasdadsaas"", 2: ""safsdafdsafsadfad"" };  var message = util.format(""Format the object: %O"", obj);  var i = 1;`  Thanks for the hint! mind"
7807|@mindruptive since you have a small reproducible snippet, I suggest to file a bug against node: https://github.com/nodejs/node/issues
7808|Thanks, I will. Best m
7809|Even if there is no context menu available for a focusable UI panel I think we should still allow the user to tab into it to set focus. This lets them know and discover the different UI panels and components. For example, a screen reader might read out something about the empty panel.
7810|Thanks :+1:
7811|Yeah, also a good point. In fact every tree has a meaningful aria label assigned now.
7812|@TejasCMehta; Fixed the problem for me!
7813|Thanks @stevencl, it's good that it's at least on the radar and there's some brainstorming going on.  > Our concern with adding tabs is that it introduces another set of problems that end up requiring the user to focus on the UI instead of the code.  I feel like I need to focus on the UI instead of the code right now though, so this argument cuts both ways. :)  > many users often end up with many tabs open containing files that they no longer need  It's interesting that you say this, since I sort of got the impression that part of the point of working files _was_ to encourage keeping more files open at once.  What you describe here is apt to happen with working files too, at least with the default keybindings (and is why I [played with](https://github.com/Microsoft/vscode/issues/224#issuecomment-166931316) switching the keybindings for closing the active editor and closing the working file completely).  When it comes down to it, if VS managed to optionally replicate the _behavior_ of tabs (which it seems like at least one of the things in #1133 relates to) while still keeping it on the side instead, that might be a good enough start.  Ctrl+tab order being MRU vs. order-of-appearance is another thing (Sublime allows both via different bindable commands).
7814|this is not JavaScript
7815|@dbaeumer I wonder why delete failed in the first place, I assume this is again a setup with a subst drive? I know a fix went into Electron to support moving to trash even from subst :)
7816|I verified that the attached file can not be opened anymore due to lowering of the maximum file size. @alexandrudima Can you have a look at @bpasero changes in the second change set?
7817|@egamma Erich? Maybe we just remove the (default) ?
7818|Adding @bgashler1 @chrisdias @stevencl for input
7819|It was added intentionally because of the scroll. Try to have a smaller pane and once the scroll bar is there it will overlap. I think it is decent this way but reopen if you have ideas :)
7820|Any roadmap on when this will be solved?
7821|I see, there is still some room even with scrollbars at least on mac:  ![image](https://cloud.githubusercontent.com/assets/900690/12678070/387ab308-c69d-11e5-9d8f-1a7376f57b45.png)
7822|Ok, reopening to experiment in debt week
7823|@stevencl, thanks for your response. I would like to comment on some of your points:  > [...] we are aware of the issues with the current experience for managing files and have a number of changes that we want to make to improve the experience.  I'm certainly looking forward to what seems to be a very bright future for VS Code. I was excited when I heard Microsoft was bringing such a powerful IDE as Visual Studio to worlds beyond Windows, and for embracing new paradigms of app development with Electron. Kudos for your work to date!  > One of our goals with VS Code is that as we make changes to the UI and the UX we ensure that VS Code remains a lightweight, powerful editor that allows users to focus on their code.  I don't think anyone can bring a convincing argument for tabs making interfaces weak, sluggish or distracting. In fact, there is far more horizontal space for tabs than there is vertical space above the project tree view. Having the working files live there, to me, makes the left of the window look far more cluttered than it has to be.   > Our concern with adding tabs is that it introduces another set of problems that end up requiring the user to focus on the UI instead of the code.  Would there be any reason to use anything beyond TextEdit or Notepad if it were all about focus on the code? Stipulating that functionality, for all intents and purposes, is the same across most editors, the UI/X used to reach that functionality and the quality thereof is really where a product sets itself apart.  > Our experience with Visual Studio for example has shown us that many users often end up with many tabs open containing files that they no longer need and that end up cluttering their workspace. This causes some issues when users are looking for files and other code assets.  Here is an argument that I don't think matters for or against tabs or a working files list; when working with more than one file, you will always have to break your focus to look for code assets.  Even so, the working files list still doesn't solve the problem. Too many working files causes the list to scroll and the list can't be expanded. So in stead of eventually scrolling tabs, you more quickly going to be scrolling down the working files list.  > [...] we truly are trying to maintain the minimal aesthetic that we believe provides a lightweight, powerful experience. We are simply being very careful about introducing new UI and UX into the product.  I can appreciate and support this stance to a degree. When the community raises it's voice, you must start talking about user adoption. Isn't that why you placed VS Code's lack of folding as a user adoption concern in your roadmap for March? Some things are just the way they are and for good reason. The Start Menu on Windows and the dock on OSX comes to mind.  > [...] I apologise again for making it look like we are navel gazing and not doing anything about this.  That's definitely not my take on it, so no worries there. For reasons I already stated, a healthy conversation about this can certainly only enhance the greater purpose that is the UI/X of VS Code.
7824|"Is it that they are default dark and default light themes? If so, how about ""default dark"" and ""default light""? I too thought it was odd for there to be two defaults."
7825|The issue is that `wbeditorcommon.asFileEditorInput(visibleEditors[i].input);` returns `null` for inputs which I created, and then I can not compare `input.resource`. So I need to get the resource of an opened editor in some other way.  Will look into it next week
7826|Box height is good now, but the text isn't aligned with the search text and buttons. ![image](https://cloud.githubusercontent.com/assets/6461412/12678646/1595633a-c6a0-11e5-8583-4b77e5a76e33.png)
7827|@bpasero has a fix...
7828|"I also want to chime in and just say that I think that I don't feel ""navel gazing"" is happening at all. The timing of this issue is partially at fault - November 19 doesn't give time to put it anywhere in December and possibly January depending on how far things are planned ahead. Also - this conversation that has started again is more important than just randomly implementing tabs because the users want it.  I do have to agree with ianwesterfield in that the working files interface isn't ideal and that there is more horizontal space than vertical space. Massive file lists and many files being switched between are vscode's current weaknesses in terms of managing working files. When you start hopping around 16 different files then being able to manage which split editor they belong to is something working files would be hard to beat tabs in. That being said, splitting the working files list into two different sections would be a reasonable solution.  However, stevencl made an argument that makes me very happy. ""It's entirely possible that after a few rounds of design and research on this that we end up introducing tabs. But we would only do so in the knowledge that this is the best way to improve the way that users manage the files and assets they work with, but does not end up cluttering the UI."" By actually trying new things can improvements come.  An easier way to manage the split windows would already be an improvement. I can make an argument for working files in that managing the windows can ALWAYS be in the same location. Managing tabs is more effort when you want to rearrange 2-4 splits (high resolution screen + atom = horizontal and vertical split when needed). So there is a possible solution that keeps the working files interface but rather extends it to be a bit more complex."
7829|I can reproduce but I am not sure this is a workbench or editor bug.
7830|Verified we ship vscode-testmate -> oniguruma
7831|You are a 🐒
7832|Thanks, I appreciate the opportunity to have this conversation.  @ianwesterfield, you're right about the working files and have highlighted one of the issues that we want to address. There are other issues too, many of which @kfranqueiro has highlighted. The current experience is definitely not the desired experience.  Having worked on the design of Visual Studio for a number of years though I have seen the UX problems that tabs can cause. I spent 18 months working on the preview tab experience in Visual Studio which is an attempt to reduce the 'tab hell' problem that @bpasero describes above.  We want to try to avoid getting into the position where this becomes necessary though. So we want to continue on our design deep dive to discover the options that are available to us and then settle on one. As I said earlier, it might well be that we end up with tabs. If we do, we will know that is the best approach we could create that will provide a great experience for managing files and other code assets.  Thanks for all the insights and descriptions of the issues you are currently having with how we manage files in VS Code.
7833|Closing - the january release notes recognize PRs.
7834|I would love to see that as well. Sometimes I need to replace just part of the string. For example a part of class name in CSS like `.block--modifier` but the default double click selects whole class. Making the behavior customizable would solve this.
7835|@stevencl, It's funny you should mention the preview tab - I love it. It's great how VS Code, Sublime, Atom, Brackets (via extension), etc. have a preview feature like this by default.  I'm very happy Microsoft has given us the opportunity to participate in ongoing design discussions by keeping this project open. If the users only had that voice during the redesign of the Start Menu, Windows might not have needed another release cycle to finally get massive on-boarding post Windows 7.
7836|![screen shot 2016-01-29 at 16 57 12](https://cloud.githubusercontent.com/assets/1794099/12680301/603db0dc-c6a9-11e5-8b0c-76be32ef9150.png)
7837|:+1: Ideally services live in common.
7838|:+1:  @stkb has it with his reference to the Visual Studio extension. Would love to see a similar extension for vscode.  Aside from the actual indent guide lines, a separate color for the lines in the currently active indent level (cursor line) really pluses the experience up.  I'm looking into the extension @JoeRobich is working on: [vscode-indent-guides](https://github.com/JoeRobich/vscode-indent-guides.git)
7839|> It's entirely possible that after a few rounds of design and research on this that we end up introducing tabs. But we would only do so in the knowledge that this is the best way to improve the way that users manage the files and assets they work with, but does not end up cluttering the UI.  Since I opened this issue, which seems to have resurfaced, I'll just like to add that I think this comment is quite satisfactory. I rather suspect tabs will appear, but I completely support exploring new ideas, and code is a great platform to do this. I love the work you guys have done so far. That said, just keep in mind that we do want to _use_ this, and the sooner I can use it as my primary editor the better, so I for one would appreciate if you could give us a familiar (still light-weight) experience that we can use productively and feel at-home in right now, and we can get on with our work. Then you can take all the time in the world to explore new horizons :) It's just that we're eagerly awaiting code to reach the magic line where we can adopt it full-time. For me, tabs are my only usability complaint, native compiling and debugging is my only technical one.  I don't think I'm the only tired and suffering windows user who's hopelessly addicted to visual studio. Salvation is just a couple of small issues and features beyond our grasp, it's progressing quickly, and I'm grateful for the opportunity to participate and watch with such visibility.  Sadly, Windows remains the worst dev platform/ecosystem, with a the best dev environment, and it's been that way for like, 15 years. Really weird. I don't know why, but it seems that for me, dev environment (productivity) trumps ecosystem in my balance, but it's a painful balance and I'll be as happy as a pig in mud when I can use VS in linux full-time! We're so close! I know you guys see this as a vehicle to explore new territory, and that's totally cool, but in the short term, we really just want VS on linux, (or osx, if you swing that way), as we have dreamed for a decade or so, and we can finally, after all these years, end our suffering! ;) `</dramatic_commentary>`  TL;DR, exploring is totally great and I'm confident you're committed to the best end-product you can make, but safe familiar solutions in the meantime perhaps?
7840|"@SetTrend Open the VSCode command prompt (`Ctrl+Shift+P`), type in user settings and select the option from the dropdown, then add a `""typescript.tsdk""` key to the JSON file on the right, with the value being the path to whichever tsdk you want to use."
7841|"@ianwesterfield are you using the ""Launch"" or the ""Attach"" config?"
7842|I can see how that last bit about the workaround would cause confusion. I'll move that over to #1552 so as not to confuse things.  This issue is regarding the Launch config.
7843|I have found one weird and somewhat impractical workaround with node --debug (default port) and node-inspector.  Same-module breakpoints in vscode begin working as expected after setting and hitting just one breakpoint using node-inspector in that module. Breakpoints set by vscode in other modules fail to hit until node-inspector first hits a breakpoint in the same module.  **UPDATE 2016/2/4**  I copied the project directory to another location and the issue was not reproducible. I pointed VS Code and node back over to the original location and, again, could not reproduce this behavior. Possibly something was wrong with the project directory? Now the only thing breaking are the breakpoints :+1:
7844|![jan 29 2016 19 03](https://cloud.githubusercontent.com/assets/1794099/12683720/199c126a-c6bb-11e5-9404-ec21856cc414.gif)  @WebFreak001 Can you give me some additional hints how this happens? I can't reproduce. Can you use the debugger to see if your provider gets hit in one or the other case?
7845|@TejasCMehta  Also worked for me.
7846|That's a bug. We will soon ship with a revamped JS language support and such things should be fixed then
7847|Its very strange as it only happens when I first try to complete a whitespace. Somehow calling the other auto complete service fixed the first one as seen here: ![](http://i.webfreak.org/F9645C.gif)  I am not sure what causes the issue or if it is already fixed on master but its definetly weird behaviour that only occurs when restarting. Does vscode cache the auto complete results? If so it might cache some earlier result but it bugs because I register multiple in one extension.
7848|This is actually really blocking when trying to include 2 different language completion providers. However I found out that the triggerCharacters properly call the completion. So why not just let ctrl-space use the same code as triggerCharacters does?
7849|Thanks for helping me out on this, Asad.  Great help, thanks!
7850|"@joaomoreno cool stuff, but is the info icon the right UI affordance for this?  I feel like you could just have blue text that says ""More"".  My two cents.  FYI @bgashler1 @stevencl"
7851|I took a few more dumps.   It seems opening .min.js files causes a huge jump in memory. Even after closing the files the memory doesn't seem to go down. Between all the memory dumps it seems DOM is the dominator.  Also not sure why there were two renderer processes. May be one of them was the chrome devtools. But I got very close to 1 gig.  https://www.dropbox.com/sh/3t238zx7l3vfpzx/AABCbFBNYLzHinkN7OTe6ubya?dl=0  I took a screenshot of the two processes consuming ~500MB of ram.
7852|@joaomoreno  Will do. Looking forward to the release.
7853|Yes, one is devtools. It is expected that memory goes up when you open files. But I would like to understand how a VS Code that is running over night without activity increases in memory use until it crashes.
7854|@SetTrend just checked we have this document in the docs: https://code.visualstudio.com/Docs/languages/typescript#_using-newer-typescript-versions
7855|:+1:  on the suggestion from @stevencl
7856|"It is not on top of our backlog currently, sorry.   As a workaround you can disable the built-in validation using  ``` json     ""sass.validate"": false ``` EDIT corrected to `false` thanks @rob3c for catching it.  and install extension like [stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint)."
7857|Hi **@k--kato**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
7858|**@k--kato**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
7859|:+1: I also want negated glob patterns since I use `Jakefile.js` to describe Jake tasks for my TypeScript project.
7860|Linux npm3 issue: https://github.com/Microsoft/vscode/issues/2474
7861|I was thinking that is related to update of nodejs.x86_64 package from 4.2.5-1nodesource.fc22 to 4.2.6-1nodesource.fc22. I downgraded package to confirm, but it is not.
7862|Do you know if a repo for the ASPNET Core debugging extension has been created yet? If so, perhaps a link could be posted here? (Google searches for it land here.) :smile:
7863|"@egamma : Thanks a lot for helping, Erich.  I agree with you, except for one regard: The document doesn't say _where_ to set this setting. I was assuming that this setting would be resident in an external ""technical"" compiler settings file (believing that TSC and TSC configuration was something external, like OP proposes) rather than in the intrinsic user preferences settings file. It didn't came to me to look at ""File > Preferences > User/Workspace Settings""."
7864|Appears to be related to inotify limit, maybe changed after system update.  The VSCode could verify and notify user as the Android Studio does:  External file changes sync may be slow: The current inotify(7) watch limit is too low. [More details](https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit). (show balloon
7865|Well the repro is: Start vs code. Open one or two js/ts files on a large folder with lots of .tsconfig files. Do some scrolling / editing. Close all working files. Put it in the even at 200c overnight. Cake!  On Friday, January 29, 2016, Benjamin Pasero notifications@github.com wrote:  > Yes, one is devtools. It is expected that memory goes up when you open > files. But I would like to understand how a VS Code that is running over > night without activity increases in memory use until it crashes. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-177087988.
7866|@nojvek Are the `.tsconfig`s necessary to repro? 'cause I've had crashes in the past without anything TS-related at all. Though I can't even repro those anymore...
7867|Our project just happens to have them. Could be a red herring.  On Saturday, January 30, 2016, Bob notifications@github.com wrote:  > @nojvek https://github.com/nojvek Are the .tsconfigs necessary to > repro? 'cause I've had crashes in the past without anything TS-related at > all. Though I can't even repro those anymore... >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-177198518.
7868|I see, then we should clarify this in the docs. Moving to vscode-docs.
7869|This issue was moved to Microsoft/vscode-docs#135
7870|@gregg-miskelly do you know?
7871|Hi **@Tyriar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
7872|Is the plan to fork or try upstream with issues like this? The [project](https://github.com/textmate/less.tmbundle) hasn't been active for 2+ years.
7873|@Tyriar In general we try upstream issues first, but since the project hasn't been active I suggest a fork.
7874|Hi **@Tyriar**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
7875|:+1:
7876|This issue was moved to OmniSharp/omnisharp-vscode#25
7877|fyi @Microsoft/vscode
7878|@bpasero I could not find one, neither.
7879|The ASP.NET Core debugger extension isn't public yet. We are getting really close though. It should be out there soon.
7880|The only .\* files we have in our folder are the .git folder and .gitignore
7881|@nojvek are you using a custom typescript server with the project, or the out of the box TS we ship in 0.10.6? The one we ship in 0.10.6 is TypeScript 1.7.5
7882|This is a known issue https://code.visualstudio.com/Docs/supporting/FAQ#_linux-error-enospc  Try this:  ``` fs.inotify.max_user_watches=16384 ```
7883|Any progress on this?
7884|VSCode message could be more friendly.
7885|Totally agree https://github.com/Microsoft/vscode/issues/50 :)
7886|We will make the Jan update available early next week.
7887|`typescript.tsdk` is in active use and works.   Did you try to set an absolute path name or install typescript globally.   In the january update Code picks up a locally installed typescript automatically.  @dbaeumer  fyi.
7888|@siegebell the January update will support for font ligatures, this might help for your scenario, please give it a try.
7889|Thanks, great to know you're getting close to going public. I'm looking forward to seeing it when it comes out!
7890|c#
7891|@bpasero I was running into the same issue on my machine. The recycle bin on this machine is configured the following, for all drives: ![image](https://cloud.githubusercontent.com/assets/2635154/12698655/de123704-c7a2-11e5-8bfe-4f7865706cb0.png)
7892|Win7?
7893|+1  Maybe its possible to add a language and\or file-ext attributes [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/views/explorerViewer.ts#L277) for themes to render icons?
7894|With this such feature, I could also implement the editor rulers via extension (if the VSC is not going to implement #1673 ) properly.   Instead of this... ![screen shot 2559-01-31 at 13 26 49](https://cloud.githubusercontent.com/assets/1087399/12700663/6e3dc660-c81e-11e5-923a-f72a2dd3f7f9.png)  Could be this... ![screen shot 2559-01-31 at 13 27 16](https://cloud.githubusercontent.com/assets/1087399/12700664/6eb210ba-c81e-11e5-92d1-8650fb1e36dc.png)
7895|@bpasero @nojvek if it is a memory issue on the JS side. You can diff the heap snap shot on Chrome.  1. Take a snapshot. 2. Do the action that causes memory leak. 3. Force garbage collection. Otherwise the next heap snapshot will include the objects. 4. Take another snapshot. 5. Diff both snapshot.  Everything can be done with in Chrome Devtools above. The force of garbage collection is in the timeline tab, the garbage icon. And the diffing is done by just choosing it on the snapshot explorer on the filter menu.  Just report which objects is retained and possible retain paths(just below the heap table). And that is all the data needed to fix this issue.  Don't need to wait a whole day to collect data about a crash :wink:
7896|+1 for C. At least until someone comes up with something aesthetically superior - because the quirky jumpiness of A and B is distractive and impairs the user experience. Great work @alexandrudima :+1:
7897|"Probably should change it to Cmd-Shift-G - which is the Mac OS X ""Go to Folder"" command in the Finder. So ""Go to file"" would be a similar command in VSCode, and do a similar thing."
7898|The Dropbox link I sent had three heat snapshots taken half an hour apart. I didn't do the force garbage collection. Will give that a trick.  On Sunday, January 31, 2016, Tingan Ho notifications@github.com wrote:  > @bpasero https://github.com/bpasero @nojvek https://github.com/nojvek > if it is a memory issue on the JS side. You can diff the heap snap shot on > Chrome. > 1. Take a snapshot. > 2. Do the action that causes memory leak. > 3. Force garbage collection. Otherwise the next heap snapshot will >    include the objects. > 4. Take another snapshot. > 5. Diff both snapshot. >  > Everything can be done with in Chrome Devtools above. The force of garbage > collection is in the timeline tab, the garbage icon. And the diffing is > done by just choosing it on the snapshot explorer on the filter menu. >  > Just report which objects is retained and possible retain paths(just below > the heap table). And that is all the data needed to fix this issue. >  > Don't need to wait a whole day to collect data about a crash [image: > :wink:] >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/508#issuecomment-177462412.
7899|It doesn't really matter what the command is as long as the users don't have to un-learn consistent behavior in all other Mac applications and the OS itself. One would also think printing would be a natural functionality for an application of this nature.   Also using F-keys is in reality never seen in Mac applications as they are not well supported on the native Mac keyboards.
7900|Or maybe I am wrong, because I found that this code works ...  var Emitter = require('events'); var emtr = new Emitter.EventEmitter();  But that is interesting, because the code runs in node in both cases. But vscode throws an error only on the first version of my code.
