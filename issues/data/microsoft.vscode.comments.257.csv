25601|@alexandrudima It was a formatting extension that applied formatting according to it's own settings. Should have checked that before making an issue...  Thanks for your help!
25602|Implementing this needs to consider the outDir property of the tsconfig.json file.
25603|The JSON validation is all internal and should not be referenced. For now you have to copy the code. Eventually I can extract it to a separate node module so it can be reused.
25604|@jrieken do we have an issue to provide more control here. If not I will open one.
25605|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/121
25606|Agree.
25607|Dups #3550.
25608|Will do as soon as it exists. So far we haven't it written down...
25609|@pufanalexandru Your issue seems to be a dup of #7245. Please see the instructions in there. Try to start without extensions to find out what cases the issue.
25610|"Well, you have have control over the behaviour cos it's defined as keybinding  ``` { ""key"": ""."",                     ""command"": ""^acceptSelectedSuggestion"",                                      ""when"": ""editorTextFocus && suggestWidgetVisible && suggestionSupportsAcceptOnKey && editorLangId == 'typescript'"" }, ```  The question if it makes sense to encode the provider of the suggestion, maybe even instead of the `acceptOnKey` condition."
25611|This is also occurring on OSX - very frequently.
25612|Yes, I already found and posted the solution thanks a lot for your help.
25613|@aeschli yes, it seems that this was the problem. Thanks!
25614|also refs https://github.com/Microsoft/vscode/issues/362 :rose:
25615|@Urahara is this project using typescript?
25616|Dup of #7291
25617|Great job - thanks!
25618|also...
25619|This should be fixed in vscode version 1.2 - please download the latest version and let us know if the problem still persits
25620|I'm trying to support correct indentation as Atom does, and find following interesting difference between VS Code, Atom and TextMate.  TextMate documents `increaseIndentPattern` and `decreaseIndentPattern` at https://manual.macromates.com/en/appendix . `increaseIndentPattern` matches a starting line and any lines after it will have an additional indentation, this functionality is handled correclty in all editors.  But when we come to `decreaseIndentPattern`, we are running into some problems. The documenation in TextMate site is not that clear, when a line matches `decreaseIndentPattern` regex, should we unindent the current line or lines after? IMHO, it should be current line as any previous line has additional indentation and it's the right time to unindent. This is also how Atom does it.  However, in our implementation as below  ``` /**   * Describes indentation rules for a language.   */ export interface IndentationRule {     /**      * If a line matches this pattern, then all the lines after it should be unindendented once (until another rule matches).      */     decreaseIndentPattern: RegExp; ```  Per comments we put in the definition, we are unindenting lines after but not the current line. I'm not sure if it's the root cause, but this makes `end` never gets correct unindentation.  There is also a long bebate to add `decreaseNextIndentPattern` to Atom in https://github.com/atom/atom/pull/6808 so I think we need to rethink what's the correct behavior of `decreaseIndentPattern`. I'll give TextMate a try once I'm back to my Mac to see what's the default behavior, before that I'd like to hear your voices. @alexandrudima , any thoughts?
25621|@Crazy7 works for me for debugging node applications that have a program that has whitespace in the path.  Can you please share a screenshot of how vscode failed to start debug?
25622|This issue is about .net and not node.js. I'll move it over...
25623|This issue was moved to OmniSharp/omnisharp-vscode#430
25624|This issue was moved to OmniSharp/omnisharp-vscode#431
25625|This should get adressed in the future by #4580  So closing as a dupilcate
25626|I think we should rather find a solution to have file watching supported on Windows 7.
25627|duplicate of https://github.com/Microsoft/vscode/issues/5552
25628|The v8 debugger protocol does not provide enough information for doing this. So this will require more code injection.
25629|By analyzing the blame information on this pull request, we identified @egamma and @joaomoreno to be potential reviewers
25630|@JimiC the error 'ENOENT' means that there is no executable `${workspaceRoot}/node_modules/.bin/electron`. Did you verify that an executable exists under that path? May be it needs an '.exe' ?
25631|"Yeap. Surprisingly when I switch to `""externalConsole"": true` it works and as I mentioned, on Linux and OS X I have no issues with either `""externalConsole"": true` or `""externalConsole"": false`. This is specific to Windows and with `""externalConsole"": false`.  Btw, a sample project is available at https://github.com/JimiC/evetron"
25632|"@weinand If I use `""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron.cmd""` it starts but still opens an external console when it shouldn't.  This is the content of `electron` in `.bin/`  ``` #!/bin/sh basedir=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")  case `uname` in     *CYGWIN*) basedir=`cygpath -w ""$basedir""`;; esac  if [ -x ""$basedir/node"" ]; then   ""$basedir/node""  ""$basedir/../electron-prebuilt/cli.js"" ""$@""   ret=$? else    node  ""$basedir/../electron-prebuilt/cli.js"" ""$@""   ret=$? fi exit $ret ```  and this is the content of `electron.cmd`  ``` @IF EXIST ""%~dp0\node.exe"" (   ""%~dp0\node.exe""  ""%~dp0\..\electron-prebuilt\cli.js"" %* ) ELSE (   @SETLOCAL   @SET PATHEXT=%PATHEXT:;.JS;=;%   node  ""%~dp0\..\electron-prebuilt\cli.js"" %* ) ```"
25633|@aeschli I think my problem is a little different. I did not lose complete syntax highlighting like @pufanalexandru did. For me the problem is just when the <?php ?> code is one line of code.  I disabled the extensions and restarted VSC but the problem persists. You can see what I mean in that screenchast:  ![phpbug](https://cloud.githubusercontent.com/assets/7545568/16002247/f2e26d16-3156-11e6-8224-6a3626dfd2bd.gif)
25634|@liyunzhi1993 This looks like an error with the C# extension, can you please file this bug in this repository https://github.com/OmniSharp/omnisharp-vscode
25635|We currently don't have API for this.  Git does support [hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) which would let you do something. Maybe worth a peek?
25636|> and I'm still puzzled why it only started with 1.2   Me too...
25637|@JimiC if an external console is used on WIndows, the command interpreter running in that console is probably automatically adding a '.exe' or '.cmd' to the path specified whereas the internal launching mechanism doesn't do this.  From the two scripts (electron.cmd and electron.sh) I get the impression that you could launch electron directly without specifying a `runtimeExecutable` because both scripts just rely on node.js and a 'cli.js'. Did you try to specify  `${workspaceRoot}/electron-prebuilt/cli.js` for `program` and add your `${workspaceRoot}/src/scripts/main.ts` to the `args` array?  (you'll probably have to tweak the path leading to cli.js from above, because I don't know where your 'electron-prebuilt' lives).
25638|Duplicate of #7597
25639|Duplicate of #7505
25640|@alexandrudima Not sure what happens in Linux.
25641|We use the address. Your computer resolves it to that IP address.  Can you show us a screenshot of the error?
25642|Can you give the Insiders release a try? It has a few fixes which can fix this issue.  https://code.visualstudio.com/blogs/2016/05/23/evolution-of-insiders
25643|But why did you configure your screen to have such a low contrast? This seems like a problem with your screen settings instead of a problem with Code itself. I'm sure you'll find many other applications having this issue, once you bring down your screen's contrast so much.
25644|"@weinand First the correct value for `program` is `""${workspaceRoot}/node_modules/electron-prebuilt/cli.js""` (no offence). Now in that case I have to comment out the `runtimeExecutable` and `runtimeArgs`. After doing that it starts but immediately throws an exception `A Javascript error occurred in the main process` (Syntax Error for `import`) because it expects to debug a `.js` and I have specified a `.ts` (Note: I use ES6 syntax in Typescript)."
25645|Dup of #4580 We will look into fixing this issue in June
25646|"Thanks for your reply Weinand,  Yes, I get up to date Sourcemap.   I found this issue while I'm developing my project, then I've tested it again with the imageboard sample application of TypscriptSamples from https://www.typescriptlang.org/samples/index.html.  I've compiled it by tsc and I cannot find inline sourcemap option of tsc, so I just set ""sourcemap: true"" at tsconfig.json. I've put the codes on https://github.com/jin-chong/VSC-remote-dbg-test It already has *.js.map as well.  You can test it like below: 1. Download or clone source codes onto Ubuntu(I've tested on Ubuntu 16 but it should be the same with other ubuntu version).  Node version is LTS (4.x) 2. The codes already have *.js.map.  However you can rebuild by just run ""tsc"" as this original readme.md says. 3. run ""npm install"" 4. run ""node --debug-brk app.js"" 5. On Windows computer (In my case, I've connected Ubuntu directory using Samba as network drive, but you can just copy files on to Windows directory ), open copied/shared source directory by VSC. 6. Put your Ubuntu IP address to ""address"" field, and Ubuntu src directory to ""remoteRoot"" field at launch.json on .vscode. 7. Run ""Attach"" debug.  VSC will show you app.js.  Open app.ts and try to set break point at line number 18.  It will move up to 15.  FYI, when I simulate remote debug at the same Ubuntu ( by set ""address"" to ""localhost""), it works fine.   Weinard.  I love Windows and really want to run VSC on Windows but I have to run demon on Ubuntu. I hope it is just my mistake or that would be great if there is any workaround before it gets it fixed.  Thanks a lot! Jin"
25647|Reviewed and updated all built-in themes.
25648|@JimiC yes, you do not need to specify the runtimeExecutable because you need 'node' in this case which is the default anyway. You can move your 'runtimeArgs' to 'args'.  Yes, Node debug cannot automatically map the argument 'main.ts' to the correct 'main.js'. It can only do this for the 'program' attribute.  BTW, VS Code node debug builds the final launch command from the attributes in the following way:  ``` <runtimeExecutable> <runtimeArgs> --debug-brk <program> <args> ```
25649|I'll ask around in in the team what is preferred.
25650|@weinand That's good to know but the fact here is to be able to debug using 'electron' instead of 'node'. What you said about console automatically adding '.exe' is true.  Because atm I'm afk I'll come back later with some screenies. At the meantime feel free to check out the sample project.
25651|@J-Siu Many thanks for your findings. It's helping us get to the problem's source. I still can't figure out why 1.2.0 would behave differently than 1.1.1, and I can't reproduce the following behaviour. Both behave the same to me.  >  The difference between 1.1.1 and 1.2.0 is that 1.1.1 will stop doing it after ~4sec, while 1.2.0 will go on indefinitely.
25652|This is strange. The shared process checks for its parent. And now so does the terminal process. If that doesn't work as we think it does... both are broken.
25653|Can't answer due to #7605
25654|Closing as duplicate of #6026, moving the discussion there
25655|Closing as duplicate of #6026, moving the discussion there
25656|Problem is that the `update`-logic is only triggered on document _save_ events, not on document _change_ [events](https://github.com/Microsoft/vscode/blob/kieferrm/markdown/src/vs/vscode.d.ts#L3475). Also but smallish is an extra fs-[read](https://github.com/Microsoft/vscode/blob/kieferrm/markdown/extensions/markdown/src/extension.ts#L139), instead of using the value form the TextDocument.
25657|It does work with the new, currently in-dev, version markdown extension
25658|@bpasero Only JS.
25659|Wasn't there before, now I have it, after the latest release.
25660|@dbaeumer Thanks for your hint. After reading your comment more carefully I realised that you said that all files referenced by the files in the `files` section _should_ also be taken into account, which is the behaviour described in the TypeScript documentation as well. It might indeed be the case that I had some referencing problems between my files. I will keep a watch on the behaviour to validate this solution. In the mean time, I consider the issue solved for my case.
25661|Seeing this as well in current insider build:  ![code_terminal](https://cloud.githubusercontent.com/assets/8385202/16006249/3aff97da-316c-11e6-844f-0632118c9590.png)
25662|@dbaeumer is the file locking issue with TypeScript also an issue for JS given Salsa?
25663|Full error from Developer console: ![image](https://cloud.githubusercontent.com/assets/5427083/16007190/3cec76f8-3171-11e6-910c-8ee1dd452983.png)  VSCode Versions: Latest Insiders OS: Win10
25664|"Hi, I can verify that this is also happening on VS Code latest insiders on Windows. Error from developer console attached below `messageService.ts:119 Cannot read property 'status' of null: TypeError: Cannot read property 'status' of null,    at c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:7:12524,    at Object.m [as _notify] (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:7980),    at Object.W.enter (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:12065),    at n.Class.define._run (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:13386),    at n.Class.define._chainedError (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:12745),    at n (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:10568),    at n.Class.define.then (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:14195),    at Object.N.enter (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:10637),    at n.Class.define._run (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:13386),    at n.Class.define._setCompleteValue (c:\Program Files (x86)\Microsoft VS Code Insiders\resources\app\out\vs\workbench\parts\git\node\gitApp.js:5:13080)e.doShow @ messageService.ts:119 index.html?config={""pathArguments""%3A[]%2C""programStart""%3A0%2C""enablePerformance""%3Afalse%2C""verbo…:28 [uncaught exception]: TypeError: Cannot read property 'status' of nullonError @ index.html?config={""pathArguments""%3A[]%2C""programStart""%3A0%2C""enablePerformance""%3Afalse%2C""verbo…:28`"
25665|This is bigger than just open, it will also create new files under the wrong directory, and save files under the wrong directory.  There are also issues with extensions. Take the Powershell Extension and PowerShell Editor Services(PSES). Through the PowerShell Extension, you can use PSES to write Editor Commands in  PowerShell and then execute them through the Command Palette. PSES properly hadnles 64 bit, but when it hands off to the editor, Code can't handle the translation.  A potential huge issue is editing a file under system32, and its editing the wrong file entirely and could potentially have a major impact on the user's system.
25666|This is being cause by Code not handling FileSystem redirection when running as 32bit process on a 64bit OS. Code is being redirected from C:\Windows\System32\drivers to C:\Windows\sysWOW64\drivers where is no \etc folder.  This is very problematic. If you create a new file, and save it to C:\Windows\System32\drivers, it saves under C:\Windows\sysWOW64\drivers.
25667|If you have code open a 64bit terminal, does this still occur?
25668|@cfjedimaster, just to confirm: it only happened once?
25669|Yep. I switched to Code pretty much at release, so I've been using it every day, all day, for quite some time, and I've only seen it once. Since it was close to a recent release though, I was a bit worried that it may be a new issue. But no repeat yet.
25670|Good job 🍻
25671|@calam1 Does setting `git.enabled` to `false`, and restarting, fix it for you?
25672|@jrieken thanks, I'll manage with that !
25673|@rockymontana, @epaga, @coggers, @tan9, @J-Siu, @apratheek, @tjsail33, @troplin  We've pushed a few fixes that help mitigate this issue. Do you mind giving these bits a try for a few minutes and let me know whether you still see constant high CPU and increasingly editor slowness? - [OS X](https://az764295.vo.msecnd.net/insider/2376a3e0a68b1023d304e620a8db8185665568f6/VSCode-darwin-insider-unsigned.zip) - [Windows](https://az764295.vo.msecnd.net/insider/2376a3e0a68b1023d304e620a8db8185665568f6/VSCode-win32-insider.zip)  Thanks!
25674|@weinand we already had this discussin with @stevencl on whether focus lost should close the breakpoint widget and we came to the conlucission to not do that. One of the reasons is as @edumunoz points out - users might want to copy & paste. Though we try to make it easy for the user to close the widget by simple pressing esc when focus is anywhere.
25675|See https://github.com/Microsoft/vscode/issues/7095 for some info on running 64 bit terminals.
25676|Duplicate of https://github.com/Microsoft/vscode/issues/7062
25677|This is fixed in master/insiders
25678|Seems fine (I've updated since I experienced this):  ![image](https://cloud.githubusercontent.com/assets/2193314/16010611/e0424f3e-3136-11e6-80a8-74d774294826.png)  I'm going to close this as it hasn't happened since, will reopen if I see again.
25679|What's the stance on platform conventions conformity? Currently vscode also expands a tree if you click on it, which doesn't conform with OS X conventions. I was ready to open a pr to change that, should I go ahead or is the project policy not to follow them so closely?
25680|For the recovery vscode build we have decided on a simple solution: we open the debug viewlet when the launch.json is generated for the first time. I understand this changes how the UI behaves, but making the vielwet more discoverable on first setting up debug is not that bad IMHO.  Later in June we will look to address this feature without changing the UI
25681|Thanks for the PR however when accepting PR swe try to have them contain the smallest possible change set required. Rewritting of imports is not required in order to fix the issue - so I would not accept those changes as part of this PR. If you have a good reason for using a different import style other PRs are welcome.
25682|"The error looks like: ![vscodeerror](https://cloud.githubusercontent.com/assets/19842971/16011063/261cbeb8-3141-11e6-9776-e0ee529befb7.PNG)  Any browser or utility I use (like ping) does not resolve it to the IP (as I understand it).  If I go to market.visualstudio.com in a browser, all is good.  If I use the IP there is a cert error because my company assigned the cert to ""market.visualstudio.com"" not the ip.  Maybe I am misunderstanding something."
25683|See https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005 for a explanation of the license.
25684|@tstringer agree and I think this is a good opportunity for a PR - we already register other debug actions in https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/debug.contribution.ts#L105  So it should not be a lot of work to just add the ones which are missing in your opinion
25685|duplicates #7597
25686|When can we expect an update? :-)
25687|Marked as candidate as it's a very simple change that's been reported a bunch of times.
25688|@thewhitetulip it's available for preview in the insiders build, it will hit stable in v1.2.0 (early July). In the meantime you can try use keybindings to work around it <kbd>ctrl</kbd>+<kbd>`</kbd> (toggle terminal) or <kbd>ctrl</kbd>+<kbd>1</kbd> (focus first editor)
25689|@Tyriar Me seeing this too. And I do not see the keyboard shortcut next to the Terminal label under views sections
25690|@Tyriar Thank you.  I have to appreciate the efforts you guys are taking into maintaining harmony with the community. Typically open source projects are run by control freaks who don't care what the user demands are. Much less communicate promptly with the rest of us.  Also thank you for this awesome editor!  Thank you!
25691|I renamed the command to `workbench.action.terminal.toggle`
25692|@sandy081 I don't think this should be candidate, it was renamed in the insiders build. I can even change this back if it will cause too many issues.
25693|Purpose of the rename was purely for consistency
25694|@Tyriar I was confused about the recovery build and hence marked it as a candidate.. Sorry for that.
25695|No worries :smiley: I will probably change it back to `toggleTerminal` though. It's not worth the hassle for all the people who've rebound the keybinding.
25696|Ok, I'll take a copy for the moment. Thx!
25697|Cherry picked to release/1.2
25698|So... if you run `ping marketplace.visualstudio.com` what IP do you get?
25699|It seems it is under control now. How is the limit determined? ![screen shot 2016-06-13 at 10 52 05](https://cloud.githubusercontent.com/assets/3171920/16012739/cd13e3a6-3158-11e6-8e05-df712a5589cb.png)
25700|Code doesn't remember credentials. If you are not being asked again, there is some credential manager in your git configuration that blocks it.
