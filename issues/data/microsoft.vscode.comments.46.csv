4501|start up VS Code with a English-US keyboard layout，it works good! Thanks  @bgse .
4502|same with me
4503|Check here, might be your issue:  https://github.com/Microsoft/vscode/issues/1463
4504|"Yes , I just followed the following instruction:  Using the Chrome Developers Tools •Run the  Developer: Toggle Developer Tools  command from the Command Palette in your development instance of Code to launch the Chrome tools.  The extension host process runs code implemented by a plugin. To debug extensions (including those packaged with Code) which run in the extension host process, you can use VS Code itself. Switch to the Debug viewlet, choose the  Attach to Extension Host  configuration, and press  F5 .  I try to debug suggestion Intellisense as following steps: 1. Open vscode source code using vscode 2. Run Chrome tools. ![21a](https://cloud.githubusercontent.com/assets/15098626/11922734/bbf1ab98-a7d4-11e5-8d37-04a6bef67f77.png) 3.Change the debug mode to ""Attach to Extension host"" ![21b](https://cloud.githubusercontent.com/assets/15098626/11922769/26f01240-a7d5-11e5-9998-566ea7e759ca.png) 4. Press F5 ,it will throw the Error ![21d](https://cloud.githubusercontent.com/assets/15098626/11922823/be008e30-a7d5-11e5-9cbf-3b1d5d873fa2.png)"
4505|This screenshot from the release notes suggests that it should work as I would have expected:  ![image](https://cloud.githubusercontent.com/assets/314188/11923229/32650b6e-a805-11e5-9b27-982ee92ae40b.png)
4506|https://github.com/Microsoft/vscode/issues/1463
4507|Feel free to open a new feature request for linux
4508|Actually it seems that some Linux distros might support this feature so i could enable it for Linux too, but I cannot get it to work on Ubuntu 15 at least. @ristomatti would you be willing to try it out on your Linux distro?
4509|Switching the input method to system default english(U.S.) really works
4510|The fix does not work for me unfortunately. I'm getting the following error when trying to install/update an extension. Looks like the port is added twice: getaddrinfo ENOTFOUND myproxy:8080 myproxy:8080:8080: Error: getaddrinfo ENOTFOUND myproxy:8080 myproxy:8080:8080,    at errnoException (dns.js:25:10),    at GetAddrInfoReqWrap.onlookup [as oncomplete](dns.js:76:26)  this is how the environment variable is set: HTTPS_PROXY=http://myproxy:8080/ I'm running vscode on Windows.
4511|"Same thing here, error when trying to browse extensions with 0.10.5: connect ETIMEDOUT 191.238.172.191:443  Both with manually set proxy:(""http.proxy"": ""proxyserver:8080"") and with none set, which should take the system settings(right?).  [edit:] Hmm yeah, as stated by others, it makes a difference how you define it: ""http.proxy"": ""http://proxyserver:8080"" Then the browsing of extensions then works, installing/updating however still gives: getaddrinfo ENOTFOUND myproxyip:8080 myproxyip:8080:8080"
4512|Please reopen if you need more help.
4513|@DDavo thanks, can you attach the full source too, it would be interesting to see the lines to the top where you define imports.
4514|See https://code.visualstudio.com/Docs/supporting/FAQ#_linux-error-enospc
4515|I am closing this as wont fix because I find it very disturbing that an application on startup would restore full screen. I know Parallels seems to do that and it drives me nuts all the time.
4516|is Wrong color marked ![image](https://cloud.githubusercontent.com/assets/5697068/11925731/732c7878-a7f9-11e5-8bbb-ed9ad43d5441.png)
4517|:+1:
4518|+1000 :+1:
4519|This seems TypeScript-TM specific.
4520|"@MrSkinny make sure to download from https://code.visualstudio.com. For me the SHA-256:  <img width=""769"" alt=""screen shot 2015-12-21 at 09 10 30"" src=""https://cloud.githubusercontent.com/assets/900690/11926156/c7ab0fd6-a7c2-11e5-9ea1-8840b2ab7d70.png"">"
4521|@jcward we cannot provide a close action without user interaction because of data loss. When you click the compare button you can revert your changes with the one from disk.
4522|Closing as duplicate.
4523|@gwynjudd this feature is currently limited to file matches only. what you see is the editor history which is  containing other editors too. We might expand this feature to other areas, but for now it is limited.
4524|@alexandrudima I completely missed your response, thank you so much for the help!
4525|Seems to be the SQL language colorer.
4526|This issue was moved to Microsoft/vscode-node-debug#30
4527|I need this, too!
4528|you can start up code  with a English-US keyboard layout rather than orther keyboard layout.
4529|Will #1510 be compatible with the chromium version, which has fixed this ? I mean, if Code will eventually update to the fixed chromium.....
4530|closing as duplicate of #1463
4531|@Onlytanya  oh ! thank
4532|sorry, for the hassle. we hope to get an update out soon
4533|is this our word definition?
4534|"Same here: setting `settings.json` with `""http.proxy"": ""192.168.201.6:8080""`. I used to be able to get the list of available packages but now even when searching I get the following error:  ``` connect ETIMEDOUT 191.238.172.191:443 ```  Steps to reproduce: 1. Add line `""http.proxy"": ""<server>:<port>""` in `C:\Users\<username>\AppData\Roaming\Code\User\settings.json` 2. CTRL + SHIFT + P `ext install case`  Expected: should show the extension list with the change case extension Actual: `connect ETIMEDOUT 191.238.172.191:443`"
4535|Looking at your screenshots I think you do not have a second instance of VSCode running. In total you need 2 vscode instances - the debugger and the debugee (the one reflecting your changes). From our [development docs](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#development-workflow) you are missing the following step it seems: `scripts\code --remote-debugging-port=9222`
4536|can you tell me the detail steps how to start two vscode instance , i just using the Chrome Developer Tools and the doc didn't tell me that need to using this command:  scripts\code --remote-debugging-port=9222
4537|What a great holiday present !! ![firacode-vscode](https://cloud.githubusercontent.com/assets/4367963/11927018/a4ea5e3c-a7c9-11e5-9bde-36a184320b0b.png)  Cursor is not visible in this shot, but now it can be placed anywhere correctly. Patch works as advertised here (Mac OSX, VSC 0.10.5)
4538|Please check the validate your changes part of the doc https://github.com/Microsoft/vscode/wiki/How-to-Contribute#validate-your-changes
4539|yes ,I have checked and it says that To debug code running in the render you can either use VS Code or the Chrome Developer Tools. so I just following the instruction: Using the Chrome Developers Tools •Run the  Developer: Toggle Developer Tools  command from the Command Palette in your development instance of Code to launch the Chrome tools.  The extension host process runs code implemented by a plugin. To debug extensions (including those packaged with Code) which run in the extension host process, you can use VS Code itself. Switch to the Debug viewlet, choose the  Attach to Extension Host  configuration, and press  F5 .
4540|BTW... I really don't want to bash Atom, it is a great editor.  But... Opening the minified .js from this patch inside 'Visual Studio Code.app' and searching for that replacement + replacing it worked without a flaw in VSCode.  That same operation crashed Atom (V 1.3.2) unfortunately. (had other crashes in Atom recently too, so it's not just a problem of minified js I guess)
4541|word, class, property ![1](https://cloud.githubusercontent.com/assets/9973357/11927175/acbffe16-a7db-11e5-82cf-4cb6debd08e0.png)  tab or click ![2](https://cloud.githubusercontent.com/assets/9973357/11927129/5cf7abcc-a7db-11e5-93e4-f75ab50ad105.png)  class БазоваяВыборка {     constructor(имяКлассаДиалогаЛиста) {            } }
4542|Sublime does this. A lot of Mac Applications do this and it's not disturbing to me at all. Potentially one for a configuration?
4543|"when I run the command  ""scripts\npm install"" on windows 10,it throw the following error ,do you know what's the problem?  C:\Users\v-blchen\vscode>scripts\npm install npm WARN install Couldn't install optional dependency: Unsupported npm WARN engine prettyjson@0.8.1: wanted: {""node"":"">= 0.6.0 < 0.11.0""} (current: {""node"":""5.2.0"",""npm"":""3.3.12""})  > alexandrudima-oniguruma@6.0.1 install C:\Users\v-blchen\vscode\node_modules\vscode-textmate\node_modules\alexandrudima-oniguruma > node-gyp rebuild  C:\Users\v-blchen\vscode\node_modules\vscode-textmate\node_modules\alexandrudima-oniguruma>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild )  else (node  rebuild ) Building the projects in this solution one at a time. To enable parallel build, please add the ""/m"" switch. TRACKER : error TRK0005: Failed to locate: ""CL.exe"". ??????????? [C:\Users\v-blchen\vscode\node_modules\vscode-textmate\node_modules\a lexandrudima-oniguruma\build\oniguruma.vcxproj]  gyp ERR! build error gyp ERR! stack Error: `C:\Program Files (x86)\MSBuild\14.0\bin\msbuild.exe` failed with exit code: 1 gyp ERR! stack     at ChildProcess.onExit (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\build.js:270:23) gyp ERR! stack     at emitTwo (events.js:88:13) gyp ERR! stack     at ChildProcess.emit (events.js:173:7) gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:201:12) gyp ERR! System Windows_NT 10.0.10240 gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild"" gyp ERR! cwd C:\Users\v-blchen\vscode\node_modules\vscode-textmate\node_modules\alexandrudima-oniguruma gyp ERR! node -v v5.2.0 gyp ERR! node-gyp -v v3.0.3 gyp ERR! not ok Code@0.10.4 C:\Users\v-blchen\vscode ├─┬ gulp@3.9.0 │ └─┬ chalk@1.1.1 │   └── escape-string-regexp@1.0.4 ├─┬ gulp-bom@1.0.0 │ └─┬ through2@2.0.0 │   └── readable-stream@2.0.5 ├─┬ gulp-filter@3.0.1 │ └─┬ streamfilter@1.0.5 │   └── readable-stream@2.0.5 ├─┬ gulp-minify-css@1.2.2 │ └── readable-stream@2.0.5 ├─┬ gulp-sourcemaps@1.6.0 │ └─┬ strip-bom@2.0.0 │   └── is-utf8@0.2.1 ├─┬ gulp-symdest@1.0.0 │ └─┬ vinyl-fs@1.0.0 │   └─┬ duplexify@3.4.2 │     └── readable-stream@2.0.5 ├─┬ gulp-watch@4.3.5 │ ├─┬ anymatch@1.3.0 │ │ └─┬ micromatch@2.3.7 │ │   └── braces@1.8.3 │ └── readable-stream@2.0.5 ├─┬ jsdom-no-contextify@3.1.0 │ ├─┬ htmlparser2@3.9.0 │ │ └── readable-stream@2.0.5 │ └─┬ request@2.67.0 │   └─┬ bl@1.0.0 │     └── readable-stream@2.0.5 └── sax@1.1.2  npm ERR! Windows_NT 10.0.10240 npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" npm ERR! node v5.2.0 npm ERR! npm  v3.3.12 npm ERR! code ELIFECYCLE  npm ERR! alexandrudima-oniguruma@6.0.1 install: `node-gyp rebuild` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the alexandrudima-oniguruma@6.0.1 install script 'node-gyp rebuild'. npm ERR! Make sure you have the latest version of node.js and npm installed. npm ERR! If you do, this is most likely a problem with the alexandrudima-oniguruma package, npm ERR! not with npm itself. npm ERR! Tell the author that this fails on your system: npm ERR!     node-gyp rebuild npm ERR! You can get their info via: npm ERR!     npm owner ls alexandrudima-oniguruma npm ERR! There is likely additional logging output above.  npm ERR! Please include the following file with any support request: npm ERR!     C:\Users\v-blchen\vscode\npm-debug.log"
4544|yeah, internally we have regular expression that defines a word. I guess we only match on a subset of the unicode characters. Thanks for pasting, with that I can play.
4545|This is an issue with the JS word def. Will take for Jan16
4546|vscode 0.10.5  I've set up cntlm on localhost:3128. I've set both http_proxy and https_proxy env variables.  Listing the extensions works (F1 -> ext install) but when selecting one to install, I'm getting the following error: **getaddrinfo ENOTFOUND localhost:3128 localhost:3128:3128**  When I remove the environment variables, it already fails when trying to list the extensions: **connect ETIMEDOUT 191.238.172.191:443**  So I would say, this is not yet fixed.
4547|Fair enough.
4548|...and you tricked me, my Sublime 3 does not reopen in full screen mode ;)
4549|Nor do other apps on my Mac, I wonder if this is some global setting.
4550|That is strange...  what version of OS X are you using?
4551|The way I did it without having to fix the editor itself was to edit `workbench.main.css` and add the `text-rendering: optimizeLegibility;` to a new selector: `token.keyword.operator` - if you use Code's Developer Tools, you can see that these are defined per-language/token type (for instance, the span surrounding `!=` in my Javascript file has the class `token comparison keyword operator js`).  This works, and avoids the broken line-selection in the editor, but there's a small tokenizing bug in JS: `!==` is not a single span, but rather 2: `<span>!=</span><span>=</span>`  and this prevents the ligature from matching.
4552|10.11 El Capitan.
4553|Did some investigation. When we open a file for saving, node will first truncate the file and then write to it. There is a small chance that the file ends up empty if the process quits before the write has happened. I was able to reproduce this in a small sample (writing to a large file and then terminating the process).  However I was not able to reproduce the 0-bytes being written to the file, so it must be something else.  There is also some discussion over at https://github.com/atom/atom/issues/3158 that indicates issues when the disk is running out of space.  We could provide an option to enable more atomic saving (write to a tmp file and then replace the file with one fs call), but it is also worth mentioning that other popular editors chose to disable this by default, because e.g. external file watchers might get confused that a file is constantly being replaced instead of changed.
4554|@bpasero Unsure if we have other scripts relying on that?
4555|Same here getting: **getaddrinfo ENOTFOUND localhost:3128 localhost:3128:3128** While installing extensions.
4556|I'm not sure is its correct comparison, but for example in Jetbrains Webstorm when I drag-drop files there I see a confirmation window, which protects from accidentally moving some files from one directory to another. Otherwise, you can somehow drag files with your mouse and not even notice that.
4557|"Exactly the same problem as @reinholdk  Tried both variables and settings.json Also found that if you will not specify ""http://"" before proxyserver:8080 it will timeout. So: http://myproxy:8080/ -> **getaddrinfo ENOTFOUND myproxy:8080 myproxy:8080:8080**  myproxy:8080 -> **connect ETIMEDOUT 191.238.172.191:443**"
4558|+1  Tabs are the default way to work even in Visual Studio, to not mention other text editors such as sublime.
4559|For those that are missing tabs, have you tried using `Ctrl+Tab` to navigate in the history of opened files?
4560|yeah. I think build might be.
4561|:+1:
4562|"same here - getting:  ``` getaddrinfo ENOTFOUND something.co.uk:80 something.co.uk:80:80 ```  This is the same using system http_proxy/https_proxy or user settings http.proxy  What is the extra "":80""? UPDATE: got it working by dropping the port number on http.proxy:  ``` javascript {     ""http.proxy"": ""http://something.co.uk"" } ```"
4563|@bpasero I'd be happy to do that. Just point me to the right direction what I need to do. Should I setup a Code development environment and then apply the pull request as a patch? Or is there a simpler way to do this?
4564|Stop spamming! You post or comments are notified by e-mail to all users who are watching this repository.
4565|The issue here is that the `setBreakpointsRequest` and the `stackTraceRequest` are 'disconnected'. I am sometimes sending the `setBreakpointsRequest` even though there has not been any stack traces yet.  Though what I can do, and what I will implement is that before sending the `setBreakpointsRequest`, I go through all the stack traces (if there are any) and try to search for the mathcing raw source. I will match only based on name of the raw source - since that is the only thing i can do.  If I find I would send the complete data, otherwise I would contine sending what I send now. So this would work only if the user is in a stopped state and is adding a breakpoint - but if I understand correctly that is exactly the case that you want to cover here.
4566|It would be great if we could right click a file and see the Git history for the file. If anyone knows of a nice OS X client that will allow me to easily find a file and view the history then let me know! I've found out how to do it on SourceTree but it's way too fiddly, and GitHub for Mac doesn't have such a feature.
4567|Or maybe you could implement it yourself instead of behaving like a petulant infant?
4568|+1
4569|@ristomatti yes if you can setup VS Code to run out of sources on your Linux box, you can basically just flip the boolean flags for `isWindows` to `isLinux` here to give it a try: https://github.com/Microsoft/vscode/commit/c34d2e771bb3e372e912e081a8bd8879a92a8c91
4570|@lisa0621 could it be you mean settings.json?
4571|Closing as duplicate of #105. It is high on our backlog.
4572|#105
4573|#105
4574|#105
4575|#105
4576|#105
4577|#105
4578|Yes. But the file remains in the `Ctrl+tab` context even after closing the file. The experience is not the same as that of Sublime / Atom.
4579|@jrieken @dbaeumer fyi
4580|@dbaeumer fyi
4581|@snehilmodani right, would it help if the list was showing only what you have in the working files section of the explorer? can you work with the working files list at least?
4582|Debug Node.js then produce .vscode/launch.json
4583|I face similar issues using the default dark theme with the OmniPascal plugin. Method names (`entity.name.function`) used to be yellow and operators (`keyword.operator`) used to be gray. Now it's all white. The default theme of the previous version looked better.
4584|@lisa0621 so to clarify, you zoomed in (from the view menu), then changed launch.json and the zoom was reset?
4585|That would be great!   On a side note: Isn't a layout with file names as tabs more user friendly. It is extensible to having one or more sections of tabs each with their own set of opened files. (Again i am taking Sublime Text as reference here)
4586|@bpasero Well, now I'm more than a bit concerned and not sure if you'd have any thoughts on what I should do.  I just downloaded again from code.visualstudio.com and get the same file with sha `eab49cfce612f66e66816efbc5341415d2f25c1c7e5ae98d57cfb91016007af5`  However, when I log into a private VPN and attempt download, I get the file with `0faafafed481652a059f04ab83c00161aed951a2414c6d5ef5363854ec4f0348`.    In both situations I check the SSL in my browser at the code.visualstudio.com homepage, and it identifies as cert issued by Microsoft IT SSL SHA2.    I tried downloading on VPN while in my Chrome browser normal profile and also incognito browser, and it gets the CORRECT file, which leads me to believe that if some kind of malicious redirect is occurring, it's not happening from Chrome, but at the network level?  And given I'm at home connecting directly via my ISP's router, there's some kind of man-in-the-middle happening?!    I have Sophos AV installed on my Mac and it didn't detect any problems with the suspect file, which means the only way I even know about this is the Mac OS was somehow able to decide it was dangerous when attempting to launch the .app.
4587|@MrSkinny can you compare the 2 applications (unzip the zip) to see where the changes are? See http://stackoverflow.com/questions/7938477/is-there-any-tool-to-find-any-difference-between-two-xcode-projects for a tool on Mac that can be used.
4588|I think having tabs or not is independent from having sections. Today you can open up to 3 editors side by side in VS Code and thus we do have sections. Since we do not have tabs, we do not add multiple files into these sections and you can also not have empty sections (which is a separate UX discussion).   Coming back to Ctrl+Tab: We in the team have always worked without tabs from day one and actually we did not even have the working files view for a long time and in fact not so many people in the team are using it. We found that for us it does not matter that much which file you had open or closed. Our minds are rather thinking about the chronological order of which file we edited last. So when I bring up Ctrl+Tab it will typically show me those files I was in last. I am not really looking at the number of files in there, I am only interested in the Top 5 ones at max. The advantage of this model is that you do not have to manage layouts and tabs at all. The management happens naturally while you navigate between files.   We can add a file picker for working files, but it would be interesting to hear if people can be convinced to use Ctrl+Tab as it is today and learn what the issues are.
4589|@bpasero I'll give `ctrl+tab` a shot, I just realized it can be used for going by to the previous file which is something I wanted and hadn't looked into yet until now. So that's nice.  By the way, regardless of whether one can get by / used to `ctrl+tab` as an alternative to tabs, new VS code users will probably be put off by the lack of tabs, so if only for marketshare reasons I'd recommend having a tabs option. Every other editor uses tabs (for better or worse), and not having them introduces a rather unnecessary entry barrier to VS code. I'm using VS code regardless of tab support because of its awesome typescript support, but if it wasn't for that I don't know if I would have kept at it the first few times I tried it.
4590|Yes, `Ctrl+Tab` is all about navigating back in history of files being worked on. You can press and hold the `Ctrl` key and press `Tab` repeated times to go back beyond 1 file.
4591|@rpanjwani can you clarify what happened to your changes? was the file empty when you reopened it after restart?
4592|`Ctrl+tab` is a wonderful thing to have and I totally am a fan of it. It is something even Atom misses out on.  Regarding Tabs and multiple files in each sections: Even in Sublime Text we can open 3 editors side by side but they still offer a sectional tabbed layout. I agree with you on the clutter and managing the layout of the editor would be quite a task but people are used to that anyways.  I would love to be a part of a social experiment where you are trying to convince us to get rid of our cluttered layout based interactions with our editors.
4593|Same issue here. This is not fixed, or at least there needs to be documentation stating what other value to set other than http.proxy in the settings.json file.   getaddrinfo ENOTFOUND myproxyname:9009 myproxyname:9009:9009
4594|Same here, I think it should be left open until it is fixed.
4595|"I think it's the same request as **""Provide an API for advanced source highlighting""**: https://github.com/Microsoft/vscode/issues/585"
4596|"<img width=""502"" alt=""screen shot 2015-12-21 at 15 32 14"" src=""https://cloud.githubusercontent.com/assets/900690/11932767/08c989ea-a7f8-11e5-89c0-bad37288e80b.png"">"
4597|> I agree with you on the clutter and managing the layout of the editor would be quite a task but people are used to that anyways.   Well I am sure we can find more UX examples where we used to be used to something and then we got used to something a lot better :). Think mobile phone keyboard vs smartphone touch interaction.  > I would love to be a part of a social experiment where you are trying to convince us to get rid of our cluttered layout based interactions with our editors.  Yes I think we will need to do something like this 2016. @stevencl fyi
4598|> Regarding Tabs and multiple files in each sections: Even in Sublime Text we can open 3 editors side by side but they still offer a sectional tabbed layout.  I agree on an option to allow for more stable sections so that we can have empty sections, but being able to see tabs in this section is just a visual representation of the files in there which in most cases grows so much that you end up not seeing anything. I do not think tabs are a good way to show the list of open files unless you manage these things actively and close them.
4599|@clojj Glad you're enjoying it :smile:. I just discovered these ligature fonts recently, and had to have them as well, heh. I believe #1510 would continue to work with the newer Chromium as it does with the current version. It doesn't add an offset to correct the bad coordinate; it outright replaces it with a new value calculated via other means (so even if the value provided by Chromium changes, #1510 will continue to produce the same output). The workaround would be wasteful (and probably confusing, heh) with newer Chromium, but shouldn't behave differently.  @jstclair That's an interesting approach as well: trying to select a subset of elements that need the style, but won't appear in locations that break the cursor. Unfortunately, even just applying it to operators can trigger the misplaced cursor, as operators can appear at the end of a line. e.g. in the following code, moving the cursor to the right side of the `&&` makes it render in incorrect locations.  ``` result = something &&          somethingElse &&          lastThing; ```  Additionally, applying it only to the operator class limits the places the fancy symbols show up; ligatures won't be displayed in other JS elements (comments, hexadecimal prefixes, etc.), nor will they appear in other languages (HTML, C#, plaintext, etc.)
4600|@joaomoreno fyi
