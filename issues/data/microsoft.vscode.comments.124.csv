12301|@joaomoreno wait, what about double click on the icon in the task bar, or right-click > open with, etc?
12302|Please don't do anything that prevents me from associating file types with `Code.exe` (I was so happy when you finally ditched Squirrel because it always versioned the binaries and that made it impossible to associate file types. Please don't break this again)
12303|+1
12304|":+1: to this - I think it's higher priority than 'would be nice' :) npm scripts are pretty much a standard ""node"" feature"
12305|Thanks for the example! I agree is a pain having to add each script! Hardly DRY :(
12306|@egamma  >    Have you tried a local install of eslint and it didn't work?  FYI In fact it even correctly handled multiple .eslintrc files - eg server and client
12307|Also, it should be trivial to read the package.json
12308|Yes you're right, great points. We can't move the IPC dance over the to cli code. But we can still run it there when using the `-w` flag. Otherwise, just run it as today. That would work, right?
12309|duplicate of https://github.com/Microsoft/vscode/issues/3903
12310|Syntax highlighting issue is a duplicate of https://github.com/Microsoft/vscode/issues/3903. Workaround is to switch to the Dark+/Light+ default themes.  For all other JS issues (intellisense, indentation) please create separate issues.
12311|Duplicate of https://github.com/Microsoft/vscode/issues/3903
12312|![vscode_version](https://cloud.githubusercontent.com/assets/8385202/13631124/4d13795c-e5e3-11e5-80b2-538425910098.png)  Windows 8.1
12313|Thanks for all the comments. I implemented the strategy that unfold will first try to unfold at the current cursor position. If the region at that location is not folded, unfold the first folded region inside that region.
12314|Duplicate of https://github.com/Microsoft/vscode/issues/3903
12315|Yes, that sounds like a good approach :).
12316|We incorrectly called it `0.10.11` initially. The right version is `0.10.10`, which matches 5b5f4db.
12317|This is due to having to [set that label](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/darwin/cli.contribution.ts#L221) before I know which quality you are running. cc @bpasero   The only thing I see I can do for now is to rename it to `Install Code command in PATH`, or similar.
12318|Do you have a jsconfig.json defined in your folder, pls see https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson?  Can you add a small example that illustrates the problem.
12319|We don't accept files with `CRLF`, and the hygiene checks for that. It's not that the copyright header makes it fail, its the rest of the file. Hygiene will barf if it finds any `CRLF`.
12320|All the code inside `extensions` is valid code that we want to check in. It should not be ignored.  But the `postinstall` hook shouldn't modify any of the files tracked by git. It should just touch stuff that is ignored by git like `node_modules` and `out` folders.  What files exactly are reported to be modified/added by git, when that `postinstall` hook runs, in your machine? Can you screenshot it? Give me a list.
12321|closing this as a duplicate of #1657 as we will go down the path of configuring what <kbd>Enter</kbd> does
12322|Thanks for your offer to help diagnose this further.   To isolate the problem further can you configure the `tsdk` setting in the downgraded version of Code (that works for you) to point to the same TypeScript version that ships with VS Code 0.10.10, that is 1.8.2. Do you still experience the crash?
12323|``` ?? extensions/json/server/installServerIntoExtension ?? extensions/json/server/installServerIntoExtension.cmd ?? extensions/vscode-api-tests/_mocha ?? extensions/vscode-api-tests/_mocha.cmd ?? extensions/vscode-api-tests/har-validator ?? extensions/vscode-api-tests/har-validator.cmd ?? extensions/vscode-api-tests/jade ?? extensions/vscode-api-tests/jade.cmd ?? extensions/vscode-api-tests/mkdirp ?? extensions/vscode-api-tests/mkdirp.cmd ?? extensions/vscode-api-tests/mocha ?? extensions/vscode-api-tests/mocha.cmd ?? extensions/vscode-api-tests/semver ?? extensions/vscode-api-tests/semver.cmd ?? extensions/vscode-api-tests/sshpk-conv ?? extensions/vscode-api-tests/sshpk-conv.cmd ?? extensions/vscode-api-tests/sshpk-sign ?? extensions/vscode-api-tests/sshpk-sign.cmd ?? extensions/vscode-api-tests/sshpk-verify ?? extensions/vscode-api-tests/sshpk-verify.cmd ?? extensions/vscode-api-tests/strip-bom ?? extensions/vscode-api-tests/strip-bom.cmd ?? extensions/vscode-api-tests/tsc ?? extensions/vscode-api-tests/tsc.cmd ?? extensions/vscode-api-tests/tsserver ?? extensions/vscode-api-tests/tsserver.cmd ?? extensions/vscode-api-tests/uuid ?? extensions/vscode-api-tests/uuid.cmd ```
12324|This looks like a duplicate of Microsoft/TypeScript#7292. Pls see https://github.com/Microsoft/vscode/issues/3791#issuecomment-193690551 for a work around.  Regarding  > Also, tab is behaving wrongly.  pls file a separate issue with steps for how to reproduce the wrong behaviour.
12325|@joaomoreno we know the quality upfront, don't we? could be in some global flags.ts thing.
12326|@joaomoreno should there be a `.gitattributes` file which takes care of this?
12327|What's currently implemented is a indentation based folding strategy. It purely looks at the indentation of the lines. When a line is followed by one or more line that have more indentation, then this is a foldable region. Empty lines are ignored. If you look at your screenshot, you see that strategy applied.  The next step will be to make folding strategy customizable, e.g. per language, to e.g. use brackets as beginning and end of a region. https://github.com/Microsoft/vscode/issues/3422 is the issue for that.
12328|@cleever automatic .d.ts acquisition is on the roadmap for [TypeScript 2.0](https://github.com/Microsoft/TypeScript/wiki/Roadmap). So the feature will come back and it will be even better.
12329|also, it **was** the copyright header which was making it fail, I double-checked that part.
12330|> It looks like the TSD has been deprecated.   correct and we have updated our docs. `tsd` still works for getting the typings.  > it looks like i have to add this line in all my javascript files. Is there any workaround to make vscode recognize this for all js files   This is no longer required since a while. You can add a [jsconfig.json](https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson) in the root folder of your project. Make sure that the `typings` folder is included in the project context.
12331|The resulting HTML seems to be the same but I believe since you added a timeout there is a mismatch between one property being set (e.g. active descendant) and the element with the ID being in the DOM?
12332|@Ravadre agreed that we should provide more guidance for how to exclude folders and also in the case of a crash. This is tracked in #3901
12333|@bill-mybiz your behaviour can be explained by not excluding folders in the jsconfig.json pls see this comment https://github.com/Microsoft/vscode/issues/3791#issuecomment-193848434.
12334|Ah, I didn't pay attention to the fact that the `extensions` folder was already present at root (had assumed it was inside src/).  So, basically when the postinstall script ran, on a Windows 10 machine, these new files have come. I assume these will have to be committed too?
12335|I miss tabs. I keep reaching for them, would be nice to ref two or three different open documents quickly.   What's the big deal? - The working files area is locked in height, same problem as too many tabs, except it's fiddly to manage (no mouse or scroll-wheel here). Tabs can be banished easily, giving the user the next document in the open file stack. - The Explorer column in Code is much wider than Sublimes, sometimes one wants to minimise it when running two apps side by side for space saving (Unity on left, Code on right for example). Tabs don't need any space saving to work, Code already has a nice empty area where they can go. - Tabs win for ease of use and space saving, no UX research necessary. They are quick to use and we all like them.  Please give us tabbed document management :)
12336|This is a duplicate of Microsoft/TypeScript#6700.
12337|Sorry @alexandrudima, I'm not sure what you are asking?
12338|Tagging for March to consider/discuss for March.
12339|Maybe we could start by increasing the default contrast and possibly increasing the border thickness? I would be concerned about possible misinterpretations of what a change in background colour means. If we can resolve this by being consistent with how we show focus on other elements that would be good.
12340|That's https://github.com/Microsoft/TypeScript-TmLanguage/issues/96  It will be fixed in the coming March release
12341|"I am seeing the same thing in ES6 template strings such as:  ``` let test = {    ""name"": `${name.variant}` }); ```"
12342|I didn't use Ctrl K, Ctrl I originally, wasn't aware of that. After clicking inside the tooltip with the mouse then pressing Ctrl K, Ctrl I, I am able to move focus inside the tooltip. But, I wonder how useful this will be? By requiring the user to use the mouse to reveal the hover and then click inside it, it seems like we are not fully enabling keyboard accessibility. Perhaps though there is another keyboard shortcut that I am not aware of that brings up the tooltip for the symbol located next to the cursor?
12343|duplicate of https://github.com/Microsoft/vscode/issues/3903
12344|"I suspect that you have no `jsconfig.json` file in your workspace. If you do not have one, then you ran into Microsoft/TypeScript#7292.   Does it work once you add a jsconfig.json like:  ``` json {     ""compilerOptions"": {         ""module"": ""commonjs""     } } ```"
12345|Caused by https://github.com/Microsoft/TypeScript-TmLanguage/issues/96  Will be fixed in the March release.
12346|Caused by https://github.com/Microsoft/TypeScript-TmLanguage/issues/96  Will be fixed in the March release.
12347|@JordanBelford I was thinking the same. @bpasero  How about syncing _WORKING FILES_ and _recently opened_?  I usually navigate through my files via `ctrl + tab` and `ctrl + shift + tab` but control which files I work with in _WORKING FILES_. Since open files automagically ends up in _WORKNG FILES_ it is nice a UX if I can control my files navigation through _WORKNG FILES_.
12348|@nbering would it be possible for you to share your workspace. Then we could try to reproduce this locally as well.
12349|@bpasero In case you guys go with my proposed file navigation flow, then _recently opened_ should be renamed to _working files_. About the _recently opened_ files feature - I don't have any need for it.
12350|Not sure if intended but delete is not highlighted too
12351|Closing this one in favor of #1777
12352|@Daynil   I cannot reproduce what you show in the comment above (with or without jsconfig.json) ![image](https://cloud.githubusercontent.com/assets/172399/13633509/ccd533c2-e5ef-11e5-988e-05fee8f24fe1.png)  Can you start with the minimal example from the screenshot, does this work for you? Next, can you and more of your setup until Intellisense breaks?  Also when adding/modifying the jsconfig.json can you make sure that run the 'Reload JavaScript' command.
12353|'delete' is also https://github.com/Microsoft/TypeScript-TmLanguage/issues/37
12354|@JanKok to get the problem in VSCode you need to define a problem matcher. The one you have configured is the one for the tsc compiler which will for sure not capture C problems. See the documentation here http://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher on how to configure a problem matcher for gcc. This could be used as a starting point.
12355|@garthk I will change the doc to make this limitation more obvious.
12356|@bpasero just found your answer: http://stackoverflow.com/questions/30813614/keyboard-shortcuts-for-navigating-working-files-in-vscode  > The shortcut is Cmd+K Up and Cmd+K Down (on Windows use the Ctrl key). > IMHO, that's is annoying. `Navigate history` is much nice - only it should be _WORKING FILES_.  Gonna [re-map the keyboard to work as I proposed](http://stackoverflow.com/questions/30813614/keyboard-shortcuts-for-navigating-working-files-in-vscode#answer-33625951) but is sorely missing the UI from the `Navigate history`.
12357|This issue was moved to Microsoft/TypeScript#7443
12358|We will revive the `javascript.validate.enable` setting Microsoft/vscode#3909.  This will remove the red squiggles, but this will not fix that Salsa doesn't understand these syntactic constructs. This means the code understanding experience is limited, e.g, when it comes to intellisense, go to definition.   @dlong500 @garthk from this feedback I conclude that these limitations are tolerable as long as the red squiggles do not get in your way. Is this correct?
12359|@alexandrudima do you have an idea how I can tell the screen reader the language of the UI? The language used to render the UI is available in process.env['VSCODE_NLS_CONFIG'].
12360|@alexandrudima please move back if there is something I can do here.
12361|+1, yo.
12362|@bpasero there is little I can do about that. The problems shows up if you configure the tsc/tsserver compiler with noLib:true and point to a different version of the lib (which we usually do for extensions). If you then open the lib version that ship with the tsserver in that context you get duplicate identifiers (which from a compiler perspective is actually correct).   Do you have steps how to get there? IMO the shipped lib.d.ts should not be loaded in that context. So it is actually a tsserver bug. Would be could to give the TS team steps
12363|> these limitations are tolerable as long as the red squiggles do not get in your way. Is this correct?  Yes, you _can_ say that. That's one major irritant because it's expected that linting run smoothly when transitioning from other editors. Linting and intellisense are separate things (from the user's perspective), and I think it's a more logical tradeoff that we'd lose intellisense support until Salsa comes up to speed.
12364|"The solution for this is to use OS specific settings in the tasks.json file. Something like  ``` json {     ""version"": ""0.1.0"",     ""command"": ""./folder/hello"",     ""windows"": {          ""command"": "".\folder\hello""     }     ""isShellCommand"": true, } ```  The task framework doesn't abstract over the OS you are running on like npm does for example."
12365|This doesn't happen in TS files.
12366|In JS you now get which is IMO the correct behavior:  ![capture](https://cloud.githubusercontent.com/assets/1931590/13634452/ff2b10fc-e5f5-11e5-91d7-9e2eb41325ab.png)
12367|@kumarharsh this explanation makes sense, thanks.
12368|Can you  pls sketch the folder structure (as is done here https://github.com/Microsoft/vscode/issues/3791#issuecomment-193780927) of your project and include the jsconfig.json you are using?  Without some more information we cannot track this down.
12369|For the project I have problem with, it is because the file is detected as JavaScript due to the shebang
12370|+1
12371|"I appreciate the work and staff, but I fail to see how is the ""new"" mechanic regarding the watching task is different from the one before (original post/subissue 2.)? I get slightly different warning but I still get it. The point was not to be bugged while relaunching. But I still get the prompt[terminate|close] -> regardless of the choice the launch won't occur until the next launch initiated by the user. Thats still 3 actions instead of one."
12372|@dbaeumer I dont have steps other than I see this often per day during normal selfhost, I would be very surprised if I am the only one that hits this.
12373|Btw I have seen errors/warnings show errors from *.d.ts files ever since we have the errors/warnings indicator in the status bar, so it is not a recent thing.
12374|this is a duplicate of #3666
12375|As discussed moving to you.
12376|To be clear: I never open the d.ts files, so I am not sure how the errors are coming into the system at all. I suggest to add some instrumentation code to see who resolved it.
12377|In our latest release you can quick open working files, you can also have a key binding for it. Use the ~ prefix in quick open to get that list.
12378|We changed our language detection and made the first line pattern the least important thing to respect.
12379|@weinand is a IPC broadcast good enough for you guys?
12380|"I'll add a ""me too"" to this issue. I am using VSCode with Unity and the project size is small, yet it's still chomping at my CPU (MBP, Yosemite)."
12381|@trojanfoe able to share this workspace with me? what OSX are you on?
12382|I am not sure if this is related but I have noticed that VS Code tends to crash during my work day if I open it and forget about it for awhile. I am at work for 11 hours and I generally open code first thing in the morning. At some point during the day my computer will slow down and start hanging until either it crashes or I force-kill it.   Just in case it might help...  The primary project I have open in VS Code is a relatively unmodified version of a shopping cart called BVCart (version 2004.7). I have around 25-30 working files right now and even just opening VS Code and not touching it all day leads to a crash.  The project is 1836 files and 130 folders totaling around 35MB and it is contained in a small git repository.
12383|An upvote from me too. This feature is needed, please.
12384|"@egamma This is a TypeScript project and there are no source js files in my ts files glob. But just for the fun of it, I added a jsconfig.json as follows in the root directory (alongside my tsconfig):  ``` {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""ES6""     },     ""exclude"": [         ""bin"",         ""bin-webpack"",         ""client/node_modules"",         ""client/platforms"",         ""client/plugins"",         ""client/resources"",         ""node_modules""     ] } ```  I tried both restart javascript project command and restarting vs code itself and there is no difference. There are still several seconds of lag with the trycatch snippet option (as well as with other ctrl+shift+spacebar intellisense). When I hit ctrl+space on ""trycatch"" to get the snippet intellisense option, it will consistently lag about 10sec. Ctrl+space thereafter will be immediate as long as I don't edit anything. But if I hit spacebar just after trycatch (to move the cursor off of the symbol), then left arrow (to return to the end of ""trycatch""), and then ctrl+space, there will be the 10 second lag again.  I also tried to explicitly exclude folders in tsconfig, but it is not allowed when using the files glob.  My project is available on GitHub [here](https://github.com/ibgib/stackGib)."
12385|And if i take `isWatching` flag away - It starts the task and nothing happens. I need to hit F5 again for the launch to occur. Actually without `isWatching` it works more like it should - since every subsequent relaunch doesn't invoke any prompts. The task is still a watching one, since it keeps running, and VSCode assumes it should continue running. I'm confused.
12386|+1
12387|Ahh, ok. Fair enough.  Latest version of Git for Windows is installed. The repo is very small, just a small angular app and it's stored on GitHub. It's slow for all of us. Basically any of the actions are slow. Syncing in particular.
12388|@egamma reviving that setting would be great. I think it allows me to fully switch to vscode :)
12389|+1
12390|The shebang issue is known and worked on.
12391|@MKHenson which version of tsc do you use for your gulp compliation. I suspect that there is a version mismatch wich results in different squiggles. You can control the TS version used by VSCode using the typescript.tsdk setting.
12392|@AlexeyRaga you need to configure the tasks as a watching task.
12393|@bpasero from discussions with @isidorn I got the impression that IPC broadcast is enough.
12394|@isidorn have you verified if the task is trigger at all?
12395|duplicate of https://github.com/Microsoft/vscode/issues/1533
12396|@dbaeumer I have verified I call the run on the taskService, how can I check if the task is actually triggered?
12397|@lyvius which version of VSCode are you on. I suspect this is the old JS support.
12398|Dups #3550
12399|This behavior changed in version 0.10.10, now it removes space in anonymous function. This is very annoying.
12400|Reverted 16a8d1d12fd2325eef98251f8c99e8f06c06dacb
