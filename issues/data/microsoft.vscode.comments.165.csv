16401|@joaomoreno giving back to you to follow up on the conversation.
16402|@abhinav-shah can you run this from the command line and attach the output:  `/Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron`
16403|Frankly speaking, I can't accept newly translated string from Loc team :(  Anyway it's already done. let's close this issue.
16404|@bgse Unfortunately we can't accept PRs on translations since the i18n files are machine generated. I will assign this issue to the translation team and will close the PR.
16405|See comments in #4909
16406|@bpasero is this something we can work on. I would like to hook up auto fix support for ESLint and doing this before save would really make a good story.
16407|Accidentely closed this, there is still an issue that I am looking into
16408|+1, will add a flag.
16409|I see. We don't cache this locally in your machine, though. We rely on a working Internet connection, since most likely you'd like to install an extension any way, which needs it.  We just implemented a better search experience that no longer relies on downloading the entire list of extensions but runs queries, resulting in a much lighter experience. #4849
16410|Yeah, stretch for April, otherwise May.
16411|Fixed yesterday
16412|@isidorn @weinand Any idea? Thanks.
16413|@dbaeumer cycled this loc issue to loc team.
16414|Why not cache the results initially though? I don't mean to access them without an internet connection, but when on a slow internet connection it would be great if you could quickly find an extension and mark it for installation then immediately continue with your work...
16415|Because caching introduces other problems such as: _I just published my extension, why is it not available for installation?_ or _I see this extension in the list but I can't install it_ (when a user deletes an extension).  #4839 is a good solution for a slow internet connection as well, since we won't download the information of all extensions but rather query for them.
16416|Ported to loc team
16417|Great, thanks!
16418|Thanks!
16419|Moved to OmniSharp/omnisharp-vscode#140
16420|LGTM. Thank you @JonathanMEdwards
16421|Thank you @JonathanMEdwards !
16422|This issue doesn't appear to be fixed yet.  ``` ts import { Element, ContentComponent, PageInfo, Data, autobind, DOMElement, RequestInfo } from '../Library/Index'; import { SocialNetworkLinksView } from './SocialNetworkLinksView';  interface MenuItemInfo {     text: string;     link: string;     ref: string; } ```  The interface above is not highlighted correctly in a tsx file.
16423|@roblourens is the previous instance of Code healthy in that moment? Can you try to do the same from the command line like this: - run code.exe --verbose for the first instance (from the directory where code is installed in program files) - run code.exe --verbose for the second instance and pass it a file to open - attach the output in case it fails
16424|@bpasero Could you list the needed acceptance criteria to get a pull request merged? Maybe I could help then.
16425|closing as duplicate of #1304
16426|@donaldpipowitch I would think this feature should: - be configurable with a flag in settings - provide the necessary icons for all themes (SVG)  Still, our PM/UX might decide to veto. @chrisdias @stevencl please chime in.
16427|hard and strech for April
16428|"@bpasero Thank you. Could you define ""be configurable with a flag in settings"" a little bit more? What do you want to configure? - show/hide icons - match existing (built in) icons to file patterns - change existing (built in) icons to custom icons - ...?"
16429|this is an node-internal module. what's it the call stack from your code that leads to this?
16430|It's a bit counter intuitive but: - `light` means that the the background color will be somewhat light, so the text itself will be dark - `dark` means that the background color will be somewhat dark, so the text itself will be light  Since your background color (`#333333`) is rather dark, you should use the `dark` theme, not the light one.  When I change the theme, _bump the version_ and republish, I do see an updated header in the marketplace. It should work for you too.
16431|I think the first step would be to allow to show/hide built in icons. Being able to customize icons from themes is a lot larger task and would probably fall into the category of being able to theme the entire workbench (#3112)
16432|Cool :+1:
16433|In the past we had explored icons in the explorer but we were concerned about the 'Christmas tree' effect (where the number of differently coloured icons is distracting rather than helpful). Perhaps it is due more to the icon designs we used at the time but when we experimented with this we found that when we took the icons away there was no negative impact on productivity or product satisfaction. So we went with that option as we have always tried to design the product so that the main focus is on the code and not on any of the UI.  However, after saying all of that, we're obviously not opposed to anything that helps users use the product more effectively so if the consensus is that this adds value, I am fine with it. I would just reiterate @bpasero's request that there should be an option to enable and disable the icons in the explorer.
16434|@jrieken i had removed the extension `cpptools`. can you try it by yourself?  1.In vscode, `Press F1`, `ext install cpptools`. 2.In cmd, `yo code` to create a new extension, and open it with vscode 3.In vscode, `Press F5`
16435|Can not reproduce on my machine, i even installed the go extension.  If you see this regularly on your machine, please do the following 1. create a public repository on github for which this is reproducable 2. try to create a minimal number of steps needed - e.g. is step 4 really neccessery?
16436|兄弟，别指望了，我很久之前就提过，他们的回答是目前已经支持带DOM头的文件编码检测，不带DOM的不检测，我弄了个插件检测编码的，现在编码是检测成功了，但是切换编码卡住了，他喵的切换的API不开放，未来很长一段时间这个功能都不会有，不介意的话可以等等我的插件上线，由于接口限制，插件只能到 `Change File Encoding`那一步，顺带把检测的编码告诉你，手动切换一下
16437|@joaomoreno Nice, thanks. Good work
16438|@SamVerschueren  I was a bit frustrated previously, so thank you for your time. I am using the Insider edition, and the code you wrote does indeed work. At some point yesterday in my attempt to fix my issue, I had downloaded typings, and installed several (node,browserify) d.ts files to my original project, and the fix you proposed above didn't work until I deleted the typings folder in my project. However, I couldn't duplicate that behavior in a new project. I'm happy just to get intellisense working again, so thanks for helping me out.
16439|"@joaomoreno - Here's an interesting story for you!  I had previously uninstalled and reinstalled VS Code Insiders and noticed that one file remained after the uninstall; ""Code - Insiders.exe."" It was locked from deleting even with admin rights. After rebooting it was either gone or I was able to delete (I can't remember). I figured this new update would go smoothly since I had started fresh, but I ran into the _same_ issue once again. Just for the heck of it, I checked to see if ""Code - Insiders.exe"" was being locked (using Lock Hunter) and the 64-bit version of Sysinternals Process Explorer was locking it. I closed it and was able to upgrade VS Code Insiders with no problems.  I run Process Explorer at startup (it's my default task manager) and have for years and I've never seen it lock an executable in all that time. At least now I know what's causing it. I have no idea why, but it's easy to close and re-open to get the install to work.  Thanks for all the help trying to help me track this down!"
16440|@iHuahua maybe as full file?
16441|"@aeschli @egamma  In my original post, the offensive extension is mentioned in message: "" HTML CSS Class Completion"" Here is the link: https://github.com/Zignd/HTML-CSS-Class-Completion Attached is the index.html file  [index.zip](https://github.com/Microsoft/vscode/files/204451/index.zip)"
16442|That is very interesting indeed! Does it also lock it in the new version? And it never locks the stable release `Code.exe`?
16443|thanks I'll make the change. must have been cached or delayed when i tried switching to dark.
16444|Is it possible to introduce setting to disable default snippets completely until this fixed? I'm rarely using default snippets for example and i'd choose to not have them instead messing with completion list.
16445|+1 – Atom, Sublime and jsbin.com (presumably others, too) all allow creation of multiple cursors with ⌘+click (on a Mac, at least). It'd be good to be forced to learn as few new shortcuts as possible when switching to a new editor.
16446|Thanks. I'll try it. Please be patient, it would be my first contribution to the vscode code base.
16447|Wish I had seen this earlier so I could have signed up. For what it's worth, I hope you never implement tabs. I have progressed from vim to TextMate to Sublime to Atom and now to VS Code (with a lot of IDEs along the way), so I have had a LOT of experience with tabs. To me they are a crutch that people use and never get past. Managing many open tabs on a large project is an exercise in frustration that adds one more chore that I don't need. Forget to close a few and it quickly becomes hopeless. To those few of you who have the discipline to never encounter this, kudos. But why spend the mental energy on an unnecessary task?  More importantly, I think tabs cause people to think in terms of FILES, when (for most code development) they should be focusing on functions, classes, namespaces - symbols. Files are an implementation detail in most cases that should not dominate your navigation. I think VS Code has a real opportunity to provide something new and better.  I realize that this is just MY preference, and I understand why a lot of people are asking for tabs to be optional. This may seem like a reasonable compromise, but it would be difficult to support two different navigation workflows well. Just try turning off the tabs plugin in Atom and see how many things don't work or work poorly because developers expect tabs to be there. So for my own selfish reasons I want the VS Code developers to focus on navigation that isn't tab (or even file) based.
16448|I get that behavior also on non-JSX functions.
16449|Ditto @indiejames
16450|If you implement tabs, please support multiple rows for many files.  I hate having a scrollbar on my tab bar.  My favorite tabs implementation is [Tabs Studio](https://tabsstudio.com/).  See also how files with the same basename can be automatically grouped together.
16451|"My workflow I open tabs while I work in Sublime as I need to. I don't leave tons of tabs open and I often use ""close all"" to bring things back to a clean slate.  I have been developing over 30 years across multiple IDEs and text editors. I don't see tabs as a crutch, the are a useful organizational tool. Yes they can get out of control if you have zillions of tabs, but I don't....  In terms of tabs leaning toward focus on files and such, code lives in files, and files ARE used for organization, and VS code is built around managing folders and files of code.  I totally get some may prefer not having tabs and I am not saying to get rid of what is there but having a supported tab workflow would be nice. On Tue, Apr 5, 2016 at 7:32 AM error notifications@github.com wrote:  > If you implement tabs, please support multiple rows for many files. I hate > having a scrollbar on my tab bar. My favorite tabs implementation is Tabs > Studio https://tabsstudio.com/. >  > — > You are receiving this because you were mentioned. >  > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-205834354"
16452|`yo code` should not install anything related to cpp. Please report the top of the stack as I believe this is something with the `cpp tools`
16453|"""It makes it easier for users to misuse the product"" is a terrible reason to not support a feature.  The tool is there to _facilitate_ workflows, not to _dictate_ them.  If a user can't find a comfortable workflow, that user is more likely to choose another tool where they can, rather than adapt to an unfamiliar paradigm.  I'm currently working on a few closely related files, jumping back and forth between them.  Every time I need to switch, I need to choose from the sidebar or a drop down, which takes 3-4 times as long as a tab."
16454|I can't send you a workspace, since all the code files in the workspace have a scary legal warning at the top of them. I _can_ provide you with logs and a more information (and easier repro steps) that do not need a workspace or any plugins. The error and corresponding logs look similar enough that it seems likely to be the same issue. Here is what I did: 1. Create a folder for a new project 2. Make a blank file in the project 3. Open the folder in VSC 4. Change the file in VSC 5. `git init` the folder 6. `git add -A` to add the file 7. The file will have closed in VSC, and is no longer showing as a working file  The issue happens regardless of using the commandline, or the VSC Git GUI to stage your commit.   These logs were obtained without any plugins loaded. Here are the logs:   ``` csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:45.006 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:55.049 csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:55.050 csharpWatcherService.ts:76 [File Watcher] [CHANGED] c:\Users\Some.User\src\gittest\.git\objects\1b\562f0e7ed75371bfdf55a5f2b700bc8885a3bf 2016-04-05 08:48:55.051 csharpWatcherService.ts:76 [File Watcher] [CHANGED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:55.051 csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index 2016-04-05 08:48:55.052 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\ 2016-04-05 08:48:55.164 csharpWatcherService.ts:76 [File Watcher]  >> normalized [DELETED] c:\Users\Some.User\src\gittest\ 2016-04-05 08:48:55.165 csharpWatcherService.ts:76 [File Watcher]  >> normalized [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:55.165 csharpWatcherService.ts:76 [File Watcher]  >> normalized [CHANGED] c:\Users\Some.User\src\gittest\.git\objects\1b\562f0e7ed75371bfdf55a5f2b700bc8885a3bf 2016-04-05 08:48:55.165 csharpWatcherService.ts:76 [File Watcher]  >> normalized [ADDED] c:\Users\Some.User\src\gittest\.git\index 2016-04-05 08:48:55.737 csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 08:48:55.738 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\.git\index.lock ```
16455|Fixed via f56ccb0
16456|Cache would explain it yeah. :+1:
16457|"@bogdanac most likely this is the same as https://github.com/Microsoft/vscode/issues/4966. If you can reproduce could you please confirm that this only occurs in ""inlined source"". You can find this information at the top of the editor:  ![2016-04-05 17-12-28](https://cloud.githubusercontent.com/assets/1898161/14287060/a8a24734-fb51-11e5-9e8a-67d873e0e75e.png)"
16458|is this implemented in the current stable vscode? or do i need to grab the latest from source?
16459|@JAForbes, @skyaddict: I was about to write a reply saying that it already works, but then a mystery was revealed. I can confirm that the search.excludes setting above works for excluding all subfolders of node_modules except for a folder named .local. That is 100% definitely working. However, I was not able to get the same set of patterns to work on a folder other than node_modules, or on individual files.  So this issue definitely still needs attention.
16460|@s-a Do you mean something like a minimap?
16461|Implemented by bb6f634ff5 and ddd2a37aff
16462|"Yes . Like sublime Text. I think in MSVS it is called scroll bar minimap. Am 05.04.2016 17:58 schrieb ""Alexandru Dima"" notifications@github.com:  > @s-a https://github.com/s-a Do you mean something like a minimap? >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/4961#issuecomment-205869184"
16463|@stevencl I understand your concerns, to some people it can be distracting. that's why I think the idea of being able to disable/enable it is a good one.  One other thing I want to suggest is the use of SVG icons, rather than raster types like png, that way the icons could be following the color scheme of the current theme and not be multi-colored and distracting.
16464|Looks like duplicate of #4905
16465|@indiejames   > but it would be difficult to support two different navigation workflows well. Just try turning of the tabs plugin in Atom and see how may things don't work or work poorly because developers expect tabs to be there. So for my own selfish reasons I want the VS Code developers to focus on navigation that isn't tab (or even file) based.  It's not too difficult to support two different navigation workflows or even more than two, what's **really** difficult is getting the design right!  If you really want to support tabs and working files or another workflow you need to go few steps backwards, do a zoom out and redesign navigation from the ground up, making workflows a strategy that people can choose from.  Creating an extension just to have tabs in the editor without considering use cases and how people are working with tabs or another workflow is just missing the cause which adds no real benefit and thus most likely be a failure.  There's a difference between code navigation and file navigation, when you code you surely need to  think about symbols rather than files but code lives in files and sometimes you need to deal with it too e.g. I don't open many tabs but when I'm working on multiple projects I usually have one file per project open that are related, I use hotkeys heavily but because tabs are always at the top, and when I look at the editor they are always there, it's probably psychological but it just helps me focus.  Your experience with tabs is unfortunate and I don't underestimate your experience at all, I don't know how you work but many of us like it and use it with great success.   I don't think that one experience is better than the other but having different experiences or even hybrid can be helpful and editors should honour my experience not go against it.
16466|FYI, in the Powershell extension scenario, the script didn't terminate unexpectedly from the extension's point of view.  It successfully completed execution of the script.  But I think because VSCode did not send the `disconnect` message (or we didn't send something to cause VSCode to send that message) - VSCode thinks the debug host terminated unexpectedly.
16467|Fixed for GA. You can give it a try from our insiders release today: http://code.visualstudio.com/Download#insiders
16468|We currently do not have API to set the encoding for files from extensions.
16469|@jrieken Hmm, we shouldn't be adding a `$` to the `$env:` suggestions anyway.  I'll see if I can figure out why that's happening, could be a bug on our side.  If the suggestion in that case is `AllUsers` instead of `$AllUsers`, would we be OK without changing the insertText range?
16470|And thanks a lot for making this change, by the way!  Will be a great benefit to PowerShell developers.
16471|@dchw maybe related to the git version you are using? which one are you on?
16472|"@dchw also do you have any extensions installed? can you try with ""code --disable-extensions""?"
16473|"I'd personally love to see this added, good quality icons that are easy to distinguish are very useful in reducing the time it takes to find a file in the file explorer. Plus when done right, it can makes the editor look quite beautiful.  Having said that, I don't see this working with a single icon set for dark and light themes. It should be extensible so that users can develop ""icon packs"" and plug them into any theme.  Re Christmas tree effect: They don't even need to be color icons or even on by default."
16474|I'm just completely avoiding using <kbd>alt</kbd>+`click` to add cursors until I can customize to make Windows and Linux consistent. Don't want to build muscle memory when it's going to change later.  @alexandrudima any thoughts on when you could get to this? It's blocking [adding cursors via mouse on Linux](https://github.com/Microsoft/vscode/issues/3091). I can take a shot at it if you give a high level approach.
16475|@bpasero: @stevencl and I have also seen several other issues come in involving the many varying ways we deliver notifications in the product (such as extension updates, extension tips/tricks, lightbulb for picking a project context, errors and warnings...).  Because of this, we should think about improving all notification experiences.  We can start by seeing what we're currently using and how we optimize and simplify how we deliver these.  I can start the work on this, and hopefully we can also discuss this in Edinburgh if there is time.
16476|@bpasero Here is the version of git I am using. I am using it from ConEmu (v. 150813g, 64-bit) via bash.  ``` $ git --version git version 2.7.0.windows.1 ```  The same thing happens when extensions are disabled. Just to be thorough, here are logs doing the same thing using the command `code . --verbose --disable-extensions`:  ``` csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 11:26:47.917 csharpWatcherService.ts:76 [File Watcher] [CHANGED] c:\Users\Some.User\src\gittest\.git\objects\bc\621a9d848be8912d1ad9dd1be8fd05d842524d 2016-04-05 11:26:47.918 csharpWatcherService.ts:76 [File Watcher] [CHANGED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 11:26:47.918 csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index 2016-04-05 11:26:47.918 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\ 2016-04-05 11:26:47.972 csharpWatcherService.ts:76 [File Watcher] [ADDED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 11:26:47.975 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\.git\index.lock 2016-04-05 11:26:48.097 csharpWatcherService.ts:76 [File Watcher]  >> normalized [DELETED] c:\Users\Some.User\src\gittest\ 2016-04-05 11:26:48.098 csharpWatcherService.ts:76 [File Watcher]  >> normalized [CHANGED] c:\Users\Some.User\src\gittest\.git\objects\bc\621a9d848be8912d1ad9dd1be8fd05d842524d 2016-04-05 11:26:48.098 csharpWatcherService.ts:76 [File Watcher]  >> normalized [ADDED] c:\Users\Some.User\src\gittest\.git\index 2016-04-05 11:26:57.706 csharpWatcherService.ts:76 [File Watcher] [DELETED] c:\Users\Some.User\src\gittest\.git\index.lock ```
16477|I know it works in the [insiders builds](https://code.visualstudio.com/Download#insiders).  To add to what others above are saying, I would also love to see functionality that starts the column selection from the point where you clicked (alt + left click drag, rebindable to middle click drag?) make it in to vscode. I think the shift-alt-leftclick version does add value, but it feels awkward to me, since I typically intend to start the column selection where I click.
16478|Updated, you are correct.
16479|@AmadeusW thanks for sharing.  We would love to get your feedback once we have a prototype of the changes.
16480|![image](https://cloud.githubusercontent.com/assets/1270662/14291918/fae8351c-fb65-11e5-9672-8094694c6e24.png)
16481|@mrmckeb what's your email address so I can send it to you?  Also, we totally appreciate your enthusiasm on prototyping this, but I do want to make sure we don't hurt any expectations as there's a possibility that we may not choose to officially support this feature.  We are seriously considering it, however.  Thanks for your help :)
16482|:+1:
16483|Thanks everyone.  I'll be sure to get a fix in for this.
16484|The extension UI is being discussed in https://github.com/Microsoft/vscode/issues/637, settings may be impacted by this.
16485|I just tried to reproduce on Windows 7 with git 2.6.3 and cannot: ![untitled](https://cloud.githubusercontent.com/assets/900690/14292708/8e158576-fb69-11e5-8083-689f77d39b8b.gif)
16486|It works on the insiders. Though it always fail on the first attempt. I didn't have this issue when using SublimeText. I wonder why it doesn't work directly? Could it be case sensitivity problems?
16487|How about the line cursor being thinner than in other themes?  On Tue, Apr 5, 2016 at 2:00 PM, Brad Gashler notifications@github.com wrote:  > Thanks everyone. I'll be sure to get a fix in for this. >  > — > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3605#issuecomment-205921338
16488|It can well be that the trash feature is not supported in this mounted drive environment. Maybe Sublime falls back to just deleting in that case?
16489|Ran it from command line: Didn't get any output  ➜  ~ /Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron
16490|I have the same problem in VS2015, TS 1.8.9, Gulp executes.  EDIT: Rollback to 1.8.0 or 1.7.3 didn't help
16491|@joaomoreno: Sure, we support numerous languages, though.  Do we have a list of file associations that are affected so I can design just for those?
16492|This is what PR #3200 already solves for this feature: - Icons packs as a standalone icon theme (they can also be included with colour themes) - 'No icons' as an option (currently defaults to this) - Capable of using SVG as icons - Colouring of file\folder resources  What it doesn't include is: - Exposing Icon or Colouring via javascript extensibility. - User theme settings (i.e. settings stored globally or with the .vscode folder)  I believe we're now just waiting for the 6 month goal plan as mentioned here https://github.com/Microsoft/vscode/pull/3200#issuecomment-196675666 to get the green light on this feature.
16493|Hi, after more searching I found that this was addressed already in issue #3936 Seems like a jsconfig.json file is now needed - see instructions there This fix did work for me.  This issue can be closed (or deleted)
16494|Personally I dislike the idea of having a UI management for extensions, I dislike it in Visual Studio and if anything I'd argue that this is nothing but annoyance!  Visual Studio has grown to be a stack of interfaces that I no longer use because I do everything in the command line much faster and I have a better experience with it than clicking on things.  I really hope that the Visual Studio team would realize one day that there should be one way to install extensions, install packages, install anything and it's the Package Manager Console! that's how I'd really like to do things.  **Now, to Visual Studio Code** what I'd really want to have is a Console that I can use to install extensions, install nuget packages, install npm packages or another kind of packages and the only thing it needs is Intellisense for packages but yeah definitely **unified experience for installing packages**.  Instead of tackling specific problems, I'd argue that a much better design is to let programmers handle it and what I mean by that is creating a Console that is extensible and is designed for installing packages, whatever the package might be, VSCode extensions, nuget, bower, npm, you name it.  Just to be clear, I mostly suggest the experience of the Package Manager Console available in Visual Stuidio to Visual Studio Code but taking it few steps farther.
16495|@abhinav-shah any chance you might have an older version of VS Code installed that Mac tries to open?
16496|@eyalsk be sure to :+1: https://github.com/Microsoft/vscode/issues/691 - It would enable something like this:  ``` code --install-ext=ms-vscode.csharp code --uninstall-ext=ms-vscode.csharp ```
16497|@bpasero Hmmm. That is  odd. I wonder if its something else in my environment, because following those exact steps in you gif causes the document to close on my machine (and also everyone on my team's machine).   Any ideas on other environmental things that could be affecting this? I suspect AV, but company restrictions prevent me from turning it off.
16498|Closing this off as per my last comment.
16499|@Tyriar thanks! ;)
16500|Can you try to run VS Code in verbose mode?  - find the Code.exe in the programs folder - execute `code.exe --verbose`  When you run the second instance you can do the same and it should print something to the console (as well as the first instance should print something).
