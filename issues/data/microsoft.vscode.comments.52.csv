5101|> This fix apparently didn't make the December (0.10.6 update). Hopefully it will make the next update?  Correct, pls check the milestone assigned to the issue.
5102|"I'd like to add that the problem I'm having with Ctrl+Left/Right is that for indented lines, it goes to the first word, not the first character on the line. (`|` is cursor)  ``` |       //press ctrl+right         //press| ctrl+right ```"
5103|I use rulers a lot as part of a standard code format that varies slightly from language to language and filetype to filetype. I have a need to set different rulers on a per-language, per-project basis. For example, text files will wrap at 77, assembly files at 88, HTML/PHP at 124...
5104|CC @dbaeumer
5105|CC @felixfbecker
5106|:+1:
5107|@egamma Thanks for that teaching moment.  :-)  I'm still learning my way around GitHub and tips like that really do help.
5108|Currently I'm abusing `launch` for this. But this has some issues. For example, when I launch, and then set a breakpoint before I have any connection with the debugger engine, VS Code sends me a setBreakpointsRequest that I cannot execute. I can only save the breakpoints and apply them later, but then I cannot validate the breakpoints and notify VS Code if some breakpoint was not valid. This problem should be resolved by a `listen` setting (VS Code should only send breakpoints after I sent some kind of ConnectionEvent).  Also, I'm currently abusing the Threads feature to allow multiple simultaneous connections to be debugged. Think about a PHP script that does multiple AJAX requests to the same PHP backend in parallel. This works only because PHP does not support real threads, but with java server pages this would not work. On every new connection I apply the breakpoints I got once for my main connection. In a `listen` model VS Code should instead send me the info for the new connection on a ConnectionEvent and should display multiple connections as an additional level over threads so I don't have to abuse threads for this.
5109|"> I guess the simple thing is that ""what gets recognised gets repeated"".   I like this and we will definitely work on improving the recognition with our next update, thanks much for your feedback."
5110|"@felixfbecker VSCode only sends you a setBreakpointsRequest as a response to the initialized event that the php-debug adapter is emitting. So you are in control! Try to send the initialized event if your debug adapter is ready to receive setBreakpointsRequests. No ""listen"" is required for this. We will introduce a ""listen"" only to give you a better name. But the flow of events will not change."
5111|"@felixfbecker VSCode does not know any difference between ""launch"" or ""attach"" (and in the future ""listen""). It is the debug protocol that should deal with the differences (example: an initialized event triggers VSCode to send all the breakpoints). If we need something new for threads (or pseudo-threads) we can work on this together..."
5112|:+1:  https://github.com/Microsoft/vscode/issues/324 is the issue with the discussion
5113|"@felixfbecker Below you can find the corresponding section of the Debugger API doc from the VSCode web site. IMO it clearly explains how the ""initialize event"" and the ""setBreakpoints"" request interacts. Since you haven't been able to use this information, the documentation seems to be lacking. Do you have any suggestions how to improve this?   ""Since VS Code persists breakpoints on behalf of the debug adapter, it has to register the breakpoints with the debug adapter when a session starts. Since VS Code does not know when is a good time for this, the debug adapter is expected to send an initialize event to VS Code to announce that it is ready to accept breakpoints. VS Code will then send all breakpoints by calling setBreakpoints and setExceptionBreakpoints in return. So don't forget to send the initialize event when you are ready to accept breakpoints. Otherwise persisted breakpoints are not restored."""
5114|@weinand This currently is implemented in php-debug: - user sets breakpoint - user hits F5 - debug engine connects - debug adapter sends InitializedEvent - VS Code sends breakpoints  But think about this scenario - user hits F5 - user sets breakpoints _before debug engine connects_ - VS Code sends setBreakpointRequest _before InitializedEvent_ - debug adapter has no way to validate the breakpoints - I therefor return `verified: false` for all, all breakpoints turn grey - debug engine connects - debug adapter sends InitializedEvent - VS Code sends breakpoints _again_, this time I can verify them  It is not that big of an issue though.
5115|@felixfbecker good scenario! Just let VSCode buffer all new breakpoints until the InitializedEvent is received.  @isidorn we should fix this. I've created #1702 for this.
5116|@felixfbecker this is in the works
5117|@weinand How will debugadapter-node handle the listen or arbitrary launch types?
5118|I am writing a modelines plugin that will support vim/emacs modelines as well as a Code-specific syntax. It's working fine for tabs/spaces and tab width settings, but I don't believe there is a way to set the language yet through the (documented) API. Can anyone more familiar with it than I am confirm whether this is the case?  If it's not possible then I guess I will have to release the plugin without this functionality and add it when there is an API for it.
5119|Yes we have tests that rely on that too, if you have the tests somewhere online I can try to run them on Mac/Linux from the command line to see whats going on.
5120|"It worked automatically for me on Windows 10 with git bash so I'm curious why it didn't work for you.  One of the options in the installer is to add VS Code to the Windows PATH which should work.  I just did the following though to confirm it working for me: 1. Confirmed the code/bin directory was included in my PATH 2. `code .` worked in git bash 3. Removed code/bin from PATH 4. Restarted git bash 5. `code .` did NOT work in git bash 6. Reinstalled VS Code and selected ""Add to PATH"" 7. Restarted git bash 8. `code .` worked in git bash"
5121|Are your tests that rely on `vscode.window`activeTextEditor` working?   Guess I'm doing something wrong on my end then. Our tests are here: https://github.com/VSCodeVim/Vim/tree/master/test
5122|@jpoon check out our tests that we manage to get run: https://github.com/Microsoft/vscode/tree/master/extensions/vscode-api-tests
5123|And are those tests working when you run them via Code?
5124|I already have add this but it cant work
5125|@tonn2y This is because you are using JavaScript not TypeScript. The type of the variable is determined at the point of declaration. i.e. for the parameter 'win' in your anonymous function, there is no way for the language service to know what type win will be. You could pass anything into it. Just because your own usage passes window into it, does not mean that it should definitely be of type window. However, perhaps that's an improvement that should be made? i.e. types being inferred from usages.  And in the case above where you do var todoList = this; the variable todoList is assigned the type of this. If no type can be detected, then it has no type (or type 'any'). You are then adding new properties dynamically which will not be 'added' to the variable's original type. Because of the nature of the TypeScript language service (which I believe powers the JS language service), you would only get suggestions based on the type detected at the point of declaring the variable.  However, in JavaScript it certainly would be nice if the language service could alter the type of the variable after it was declared, or detect its type based on usage (i.e. parameters), due to the lack of interfaces and type annotations, so that better code completion could be offered... Although I'm pretty sure this would not be desirable in TypeScript as you should be doing that using interfaces/type annotations.
5126|@tonn2y If you can use TypeScript in your project it's probably a good idea
5127|"@felixfbecker probably by using some reflection: if your subclass of DebugAdapter implements a method ""listenRequest"" and if your configuration schema has an entry for a ""listen"" request, ""listenRequest"" will be called."
5128|like this?  ``` js this[args.type + 'Request'](response, args); ```
5129|.
5130|.
5131|.
5132|Basically yes.
5133|.
5134|"I tested it now with Port 5859. Same issue as before, this does not fix it. VSC 10.6 will not complain when I am attaching the debugger to the running Electron app, it looks as if the debugger is properly attached but it will never stop at any break-point. VSC 10.5 is showing the same behavior as 10.6. Some change between 10.3 and 10.5 seems to be causing this.  Thanks again for looking into this.  {             ""name"": ""Attach"",             ""request"": ""attach"",             ""type"": ""node"",             // TCP/IP address. Default is ""localhost"".             //""address"": ""localhost"",             // Port to attach to.             ""port"": 5859,             ""sourceMaps"": false         }"
5135|@rscharnetzki what is your Electron setup? Do you have reproducible steps?
5136|agreed
5137|This is a new install of VS Code from last night. I tried your steps (removed code/bin from PATH, reinstalled VS Code w/Add to Path option selected, restarted computer, opened git bash tried typing code<Enter>) to no avail.  Is your VS Code installed to the `Program FIles (x86)` directory? I think that might be part of the problem. ![image](https://cloud.githubusercontent.com/assets/9885322/12052593/8c8193b2-aede-11e5-8fb9-ee52879decd3.png)
5138|I realize now that I was referring to the powershell tool from the [github installation](https://desktop.github.com/) not `git-bash`. Apologies for wasting your time with that.  I just installed `git-bash` and I had to use `code.cmd` instead of `code`. So try that out
5139|@hoovercj yep. Thus the issue report. I'm not good enough w/bash to create a little script to run. Also, for some reason, creating an alias isn't working for me.   That all being said, i think this should be part of the default install given how many people use git bash.
5140|@weinand I am not experiencing this anymore. I am wondering if there was a difference between the TypeScript code and sourceMaps and the debugger got confused.
5141|I am seeing this too.
5142|Reopen with more info.
5143|"Closing, this seems TypeScript related, I suggest you follow up with them. Note that you need TS 1.6 or 1.7 so that it finds the tsconfig.json, otherwise you need to add ""-p"" and point it to the file."
5144|:+1:
5145|Dupe
5146|@joaomoreno fyi
5147|@weinand @isidorn fyi
5148|I feel like I am only seeing this when you do a case-insensitive search.
5149|You're welcome! :-)
5150|How are you guys thinking thinking this would be implemented? Would this menu item to toggle soft wrap (referenced from #324) only affect the currently opened document? Besides that, the only other thing I think you can do is to directly modify the user's settings.json file.  Regarding discoverability (with no disrespect or condescension intended), the typical way to modify settings in Code is with the settings.json file. If I were looking for a setting to wrap text, that's where I would look first.
5151|"The following shell script ported from `code.cmd` worked for me. You can put it in the bin directory and simply name it `code`. You should then be able to execute `code`, `code .`, or `code path/to/dir/`.  Correct me if I'm wrong, @AshleyGrant, but I think your suggestion was that a script like this be automatically placed in in the bin directory on installation? (I checked and yes, that is what atom does). If so, I'm not a shell expert so I'm not sure if it needs tweaked to be production ready, but it should be an easy change for the team to make if they agree with you.  ``` shell #!/bin/sh export ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 directory=$(dirname ""$0"") ""$directory/../Code.exe"" ""$directory/code.js"" $* ```"
5152|":+1: seems possible with our Electron version. Interestingly the ""Cancel"" button typically does not have a mnemonic it seems."
5153|Man you rock!  Such a quick resolution for a minor issue.
5154|The extension is published, if anyone is interested. https://marketplace.visualstudio.com/items/chrislajoie.vscode-modelines
5155|Personally I'd want it exposed through the view menu and potentially with a hotkey (something like <kbd>ctrl</kbd>(+<kbd>shift</kbd>?)+<kbd>w</kbd>). I would also want it to just affect the present file until it's closed or removed from working files.
5156|There is an extension for this: https://marketplace.visualstudio.com/items/steve8708.Align
5157|Does this only work with JavaScript? It isn't working in my C# file.  Edit:  Actually this isn't working for me at all.  Edit again:  I see, you need to make a selection.
5158|It would be nice if I didn't have to select the items I want to align and it just knew which ones to align.
5159|"Adding this div below the `.view-overlays` div seems to do it:  ``` html <style> .ruler-thing {     position: absolute;     height: 100%;     width: 80ch;     border-right: 1px solid white; } </style>  <div class=""ruler-thing""></div> ```  I'll see about making the width and color configurable, and try making a PR this weekend.  I think Kroc's idea could be done by an extension that switches settings based on what file type is open. That would allow for all types of settings to be changed, including the ruler width."
5160|Makes sense.. user settings are applied globally, but line wrapping is something that perhaps most people would only want to enable temporarily, and only on a specific file. What you suggested would accomplish that.
5161|Facing the same issue.  Just updated to the new version. Error : Plugin host terminated unexpectedly. Please restart VSCode to recover. - version is 0.10.6 - happens for all the folders - The error occurs when opening a new window without a folder - no extensions installed   The only trigger that i can think about is, i was trying to install an extension but i am behind a proxy so cant install it. After this incident i started getting the above mentioned error.
5162|you mean's it  doesn't support dynamic attribute definition? ![image](https://cloud.githubusercontent.com/assets/2756249/12059798/4445acfe-af9d-11e5-8809-3a9c82a33b07.png) ![image](https://cloud.githubusercontent.com/assets/2756249/12059808/68580132-af9d-11e5-91d2-07d85ee3bca3.png)
5163|"removing the `""ATOM_SHELL_INTERNAL_RUN_AS_NODE"": ""0""` from my config seemed to solve the issue.  this was OK to keep in as of electron `v0.30.x`"
5164|@bpasero I'm a tad more lost after doing quite a bit more research on this topic actually and I'm not 100% sure that it can be solved, at least not yet.  The initial issue with *.prototype.includes is very minor and can be remedied by adding a polyfill.  On to the larger issue at hand, When targeting ES6 in the tsconfig.json file, the transpilation is perfect and transpiles to ES6 just fine.  The problem is when trying to transpile down to ES5 or ES3, which is quite necessary when working with modern browsers and current development tools such as Jasmine or Karma.    I understand that these are ES6 features and the typescript compiler transpiles down to the respective JavaScript version that the syntax is attached to.  When it comes to generator functions, .includes(...) and other ES6 features, since this isn't TypeScript syntax, the compiler targets the appropriate JS version and pushes it down accordingly.  I thought I could chain up transpilation and solve my problem but alas even Babel doesn't seem to support generators.  I transpiled to ES6 from TypeScript, then transpiled to ES5 using es2015 presets with babel.  No dice, it doesn't seem to know what to do with symbol.iterator...  If anyone has any input or advice I'm all for it :).
5165|@bpasero if you target ES6 in the tsconfig.json that is at the root of the opened folder, VS Code will use lib.es6.d.ts, so yes it solves what I was going at.    Anyone else having this issue, make sure you setup a tsconfig.json and set the target appropriately for the compilerOptions
5166|:+1:
5167|"I have already attached that. I press CTRL+SHIFT+B It cant Compile, then i write ""tsc app.ts"" on command prompt. it give me lots of erros. and some of them are ""Cannot Compile unless --module flag is provided.. """
5168|Keith explains the need for this really well.  We've already had requests from users to be able to choose between the 64-bit and 32-bit PowerShell hosts in the debugger since that has an impact on whether certain features can be used in the PowerShell runtime.  If there's a good way for us to solve this problem using the existing launch.json design, we'll be happy to use that for the time being.
5169|work  not well. maybe I need test it in yii2
5170|Sorry for nagging, but could you give an approximate fix date for this bug?
5171|@bubifengyun If the debug adapter is not working please open an issue at my repository.
5172|I believe that a broad range of feature requests for VSCode fit into the bracket of persisting configuration choices on a per-project basis (word-wrap, tab-settings, rulers &c.), so that code formatting standards can be carried from user to user. No editors currently do this comprehensively enough, and I would opt for VSCode over Atom / Notepad++ if I could ensure that people who access my code would get the same tabs/rulers as I use (which I should stress, vary from one filetype to another).  That however, is a different bug/issue; for basic ruler support, a custom width option is crucial. Multiple rulers is nice, but not critical (an extension could handle this). A lot of people like to combine the ruler with the word-wrapping options, so you have to be careful of the complexities that creates. Again, per file-type ruler widths is a feature no other editor has.  Kind regards, Kroc Camen.
5173|@felixfbecker OK, thanks for your great work. I will debug yii2 using vscode-phpdebug
5174|I can elaborate on what is causing issue for people.  If GitHub desktop is opened, it will break VS Code ability to push/pull. Closing GitHub desktop, _DOES NOT_ fix VS Code GitHub sync.   Instead you have to - 1. Close GitHub Desktop and VS Code.  2. Run `git config --global credential.helper wincred` from Powershell or Cmd. 3. Reopen VS Code, you now have ability to push/pull without entering in username and password.   Opening GitHub Desktop will break this. There seems to be a conflict of some sort that is causing this issue.
5175|Hi **@basarat**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
5176|"I've seen the same thing with other files (it was a TypeScript file this time):  ``` $ git rebase upstream/master First, rewinding head to replay your work on top of it... error: unable to create file gulp-typescript/gulp-typescript.d.ts (Permission denied) Fast-forwarded master to upstream/master.  $ git rebase upstream/master gulp-typescript/gulp-typescript.d.ts: Permission denied Current branch master is up to date.  $ git rebase upstream/master Cannot rebase: You have unstaged changes. Please commit or stash them.  $ git status On branch master Your branch is ahead of 'origin/master' by 627 commits.   (use ""git push"" to publish your local commits) Changes not staged for commit:   (use ""git add/rm <file>..."" to update what will be committed)   (use ""git checkout -- <file>..."" to discard changes in working directory)          deleted:    gulp-typescript/gulp-typescript.d.ts  no changes added to commit (use ""git add"" and/or ""git commit -a"") ```  The file was open inside VS Code.  Windows 10.  Edit: This might actually be #901."
5177|Hi **@sijad**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
5178|Hi **@wadeanderson7**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Wade Anderson). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
5179|I was working on unit tests and could've used more instructions so I added them to the README.
5180|Never mind. It's happening again. Still haven't been able to figure out what triggers this behavior.
5181|i've updated this based on latest findings. I thought it was just for Edge, but noticed that Edge 13 shows up when I added a new feature. The previous Edge13 features were for features where the string was too long to show the version numbers.  It applies to all browsers that don't include a version number in the string.
5182|Oops, accidentally hit submit twice. Duplicate of #1739.
5183|Yep. Tests work when running with Code. Here's one of the failed builds: https://travis-ci.org/VSCodeVim/Vim/builds/99793291  ```   1) Mode Handler ctor:      TypeError: Cannot read property 'selection' of undefined       at new Motion (src/motion/motion.ts:22:61)       at new ModeHandler (src/mode/modeHandler.ts:19:24)       at Context.<anonymous> (test/mode/modeHandler.test.ts:8:27) ```  where line 22 of motion.ts is:  ```     public constructor(mode : MotionMode = null) {         let currentPosition = vscode.window.activeTextEditor.selection.active; ```
5184|@jpoon in that test I am not seeing code that would open a text editor, so I wonder how the tests run green when running inside Code, maybe you can explain: https://github.com/VSCodeVim/Vim/blob/master/test/motion.test.ts  Does it make any difference if you run the tests locally using the same command you run in travis?
5185|>  I am not seeing code that would open a text editor  :bulb:  -- that was it!  When running in Code, it seems as though the tests automatically open a text editor, hence didn't need to do it explicitly. After refactoring my tests to open an editor....  https://travis-ci.org/VSCodeVim/Vim/builds/99801078 :tada:   Thanks @bpasero .
5186|@jwulf I have the same issue: I use the workaround with eslint + the corresponding vscode extension but the linting simply does not appear in vscode when I edit my .jsx files. However: - running eslint in command-line does show that there are some problems - linting does display when I edit _.js_ files in vscode
5187|An alternate option would be to add a setting for empty file default (tab or spaces) and/or add a setting for each file type.
5188|@khrome83 I tried several times your workaround and it is not working.
5189|As a Go developer, I find this feature extremely useful in Sublime or IntelliJ Idea. For instance, my small project imports code from Go core library or may import some 3rd party library. So I need to be able to quickly navigate to them and read that code.
5190|@jpoon very cool!
5191|\+ 1 I usually have the editor split and closing a tab is a bit more intuitive than having 10+ working files.  I also usually am only working on a subset of files and like to keep those handy. 5/5 is easier to manage than a list of 10 for me personally. I am also actively moving between them continuously. Tabs also do help in that there is a visual indication that you have too much open - the 'tab hell' shown by @bpasero.  I do accept that tabs aren't necessarily the holy grail of window management. However, for languages or projects where multiple sets of files are to be worked on, tabs would be less effort to manage.  A simple example would be `.cpp` and '.h' with tabs it would be two clicks both focused on top of the window whereas with working files it would be 3-4 clicks with working files which require you to select the editor in question and then select the new file to edit.  Tabs and custom tabs would also allow for some interesting extensions to be added easier. An example is a console or a plot tab. These would either require special entries in the file selector section or would have to be discarded on close with the current system. I very regularly come back to my plots so closing the window would then require it to be re-plotted. Or the console would be closed and the data inside lost.  However, if a suitable alternative is available then I would be happy to test it. I just feel the horizontal real estate on current screens is larger than the vertical real estate which the current window management design does not take advantage of. Though I would dislike it if tabs were larger vertically than the current names in each window.
5192|\+ 1  I use 2 on the left and one on the right in atom often and this is missed in VSCode.
5193|@FabioCarpi code is not adding a BOM but it is also not removing a bom if such exists in a file.
5194|"From #1750   Program exit file save confirmation dialog should provide acceleration keys.  The code at:  https://github.com/Microsoft/vscode/blob/6319a1e050de957531595511c6999aea653a5c21/src/vs/workbench/parts/files/electron-browser/textFileServices.ts#l175-l177 <br/> should read:  ``` ts const save = { label: resourcesToConfirm.length > 1 ? nls.localize('saveAll', ""Save All"") : nls.localize('save', ""&Save""), result: ConfirmResult.SAVE }; const dontSave = { label: nls.localize('dontSave', ""Do&n't Save""), result: ConfirmResult.DONT_SAVE }; const cancel = { label: nls.localize('cancel', ""&Cancel""), result: ConfirmResult.CANCEL }; ```"
5195|#1693
5196|Yes, this is similar to the plugin for the brackets IDE.   Very useful for wrapping html elements around selected text.  http://www.granneman.com/webdev/editors/brackets/extensions/surround/ https://github.com/pedelman/brackets-surround  +1 from me!
5197|"I just noticed I missed the ampersand on the ""Save All"" option. The suggestion should correctly read:  ``` ts const save = { label: resourcesToConfirm.length > 1 ? nls.localize('saveAll', ""&Save All"") : nls.localize('save', ""&Save""), result: ConfirmResult.SAVE }; const dontSave = { label: nls.localize('dontSave', ""Do&n't Save""), result: ConfirmResult.DONT_SAVE }; const cancel = { label: nls.localize('cancel', ""&Cancel""), result: ConfirmResult.CANCEL }; ```"
5198|@SetTrend as a tip, if you're not on a 16:9 monitor, you can toggle the side bar with Ctrl+B
5199|I agree this setting is very bad designed. There should be `insertSpaces`, `tabSize` and `autoDetectIndentation` or something like that, with the former being the default for new files and the latter being a boolean if the editor should auto detect these for existing files. This should default to `true`.  Or, even better, merge editorconfig extension into core and read values from editorconfig in user home directory.
5200|I don't have this problem
