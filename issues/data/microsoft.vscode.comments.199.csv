19801|Could it be that you use G-Sync functionality from Nvidia? See https://github.com/Microsoft/vscode/issues/3743
19802|This issue was moved to OmniSharp/omnisharp-vscode#254
19803|Not so sure about removing mime altogether. They do bring quite a bit of detail into the input and models themselves. Disregarding file extensions, they do help in caching the knowledge of _I know this is a JavaScript file because I read `#!/bin/env node` at the top of it_. But that's a separate discussion.  As for _the diff editor should always take the same mode for both sides_, that's why I mentioned _if the left hand side input's mimetype is inconclusive_. If the mimetype, coming in from the file extension or from the contents, is not inconclusive I suggest we do nothing and that's just life.  Finally, addressing the last point, if you rename a file from `foo.js` to `foo.ts`, that change appears in the diff editor and TypeScript colouring on the left would be ideal.
19804|As input for the discussion: The problem with `always`, `default`, and `never` is that people that set it to `never` won't get completions in documents for which no language service exists. I don't think that's desirable. Also, `never` can be confusing cos textual suggestion can also come from a language service meaning someone that has set it to `never` can still see suggestions with kind [text](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2002).
19805|The continue action has always passed the `threadId` of the thread to continue, however there was an issue in the vscode UI and we would react as if all the threads continued. However, the go adapter ignores the `threadId` and continues all the threads, so it was working properly because of the issue we had.  I was looking into the [delve api](https://godoc.org/github.com/derekparker/delve/service/rpc2#RPCServer) and it seems like it is not possible to continue only one thread for go.  So for this milestone I propose to introduce a hacky check if we vscode is talking to go behave like previously, and in May we will have to solve this in a nicer way - e.g. each debugger could specify in it's capabilites if it supports continuing only one thread.  fyi @lukehoban @weinand
19806|I will update the docs around the preview command
19807|Sounds like a regression, assigning to april to investigate
19808|Indeed, it is a dup of #747 which got resolved with our upgrade to Electron v0.37.6 which includes Chromium 49
19809|The workaround is no longer needed, we got the Chromium fix with our upgrade to Electron v0.37.6 which includes Chromium 49
19810|Well we cannot remove the mime thing but would probably replace it with something that is closer to the mode ids we already have in our system.  I like the idea of using the right hand sides mode for the left hand side if the left hand side uses plain text mode otherwise. Is that what you suggest?
19811|@Janne252 Given your extension does something workspace specific, perhaps it doesn't crash in the extension development case because you are opening different folders?  @bpasero When the extension host crashes, do we have any additional information printed somewhere?
19812|"@alexandrudima only the exit code of the process. on Mac there is a chance to get at the crash dump using the ""Console"" application:  ![image](https://cloud.githubusercontent.com/assets/900690/14878612/e9f5c910-0d24-11e6-9489-3a3d898eed0d.png)"
19813|@Janne252 can you monitor the memory consumption of the extension host process to see if maybe the scanning of the workspace consumes lots of memory?
19814|I think `editor.selectionHighlight` does not stop semantic highlighting, so I don't think we have any option to disable semantic highlighting (from https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/wordHighlighter/common/wordHighlighter.ts#L120)
19815|"@xtianus79 @unional if you see issues with the file watcher, can you run ""code --verbose"" from the command line and open dev tools console to see the raw file events printed? once you see something not updating, check the console for the output please."
19816|@isidorn can you point me to the issue that 'VSCode would react as if all threads continued'? Which debugger ran into it?
19817|"I recently noticed code has a ""safe mode' to disable ALL plugins and invoked via a command line switch. You should doc that in same place too."
19818|This was caused by [Chromium issue 487028](https://code.google.com/p/chromium/issues/detail?id=487028). We got the Chromium fix with our upgrade to Electron v0.37.6 which includes Chromium 49.
19819|@weinand https://github.com/Microsoft/vscode/issues/1703
19820|"I always get a comma:  ``` json {     ""dependencies"": {        d        ""hui"": ""latest"",        ""angular-latest"": ""latest""     } } ```  Code assist after `d`: Completes to  `""d-style"": ""latest"",` ✔️  Code assist after `""d`: Completes to  `""d-style"": ""latest"",` ✔️  Code assist inside `""d""`:Completes to  `""d-style"": ""latest"",` ✔️   ``` json {     ""dependencies"": {        ""hui"": ""latest"",        ""angular-latest"": ""latest"",        d     } } ```  Code assist after `d`: Completes to  `""d-style"": ""latest""`  ✔️  Code assist after `""d`: Completes to  `""d-style"": ""latest""` ✔️  Code assist inside `""d""`:Completes to  `""d-style"": ""latest"",` ❌   Let me know if you saw another issue."
19821|Today, the column selection is piggy-backed onto the multi-cursor support (i.e. it is logically represented and consists of multiple cursors). This makes it indeed behave differently than Visual Studio, for example.  That being said, with the exception of empty lines (virtual whitespace) we are not that far:  ![column-select](https://cloud.githubusercontent.com/assets/5047891/14878983/df8ffbce-0d26-11e6-94d8-8885a73f0655.gif)  @dvlsg We have multi-cursors since v0.1.0. Please see https://code.visualstudio.com/docs/editor/editingevolved#_selection-multicursor
19822|It is ok to leave open our upstream issues to keep track on them. Thanks for finding out about Atom
19823|For april we changed a bit when we show the internal console, we only show it on the very first debug launch, not on every. So it is less spammy. We would like to get feedback on that behavior and then in may we will introduce a setting or try another heuristic, thus moving this to may
19824|+1  Should be just check at /.vscode/extensions in project folder the same way as global extensions
19825|Oh this is duplicated to #347
19826|I can't do it on styles alone.  The data type that hover gets when rendering something is:  ``` typescript export interface IComputeExtraInfoResult {     range: editorCommon.IRange;     value?: string;     htmlContent?: IHTMLContentElement[];     className?: string; } ```  Basically, a mode just needs to return `htmlContent`. There is no distinction between the textual parts of the information and the code parts of it, when comparing it to the suggestion world:  ``` typescript export interface ISuggestion {     label: string;     codeSnippet: string;     type: SuggestionType;     typeLabel?: string;     documentationLabel?: string;     filterText?: string;     sortText?: string;     noAutoAccept?: boolean;     overwriteBefore?: number;     overwriteAfter?: number; } ```  To fix this we might have to go the other way and render suggestions' documentations in fixed-width fonts, similarly to hover... which I would be very sad about.  cc @alexandrudima @jrieken @egamma
19827|"Actually, just saw that the html content does distinguish between code and otherwise... maybe we can work with that.  <img width=""539"" alt=""screen shot 2016-04-28 at 10 50 24"" src=""https://cloud.githubusercontent.com/assets/22350/14880429/09960dac-0d2f-11e6-8e3e-103e160e3988.png"">"
19828|related to #5902 and #5614
19829|pls review by looking at the change
19830|pls review the change
19831|+1 also. Would love to work on an extension for inline evaluation of Typescript/Javascript using something like this.  Something similar to how Jetbrain's tools show inline results in a simple text representation as comments at the end of each line could also be good, but I think allowing more visual representations with arbitrary HTML would be much more valuable and obviously flexible.  I've made a few attempts at doing this myself but I don't really know where to start.
19832|The doc is [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHostApiCommands.ts#L160) from which  @gregvanl will generate this page: https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands
19833|please verify by code review
19834|@joaomoreno Careful cos the content can be full markdown, meaning again code and also other formatting instructions. Tho, you can use [this](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/htmlContentRenderer.ts#L29) - like the hover does.
19835|I can do this, which is pretty cool.  ![image](https://cloud.githubusercontent.com/assets/22350/14881718/82792c8a-0d35-11e6-84a3-0faaa32b7b44.png)  We can go further, with both widgets. Not in endgame though. Pushing to May and to [joaomoreno/vscode, branch `hover-ui`](https://github.com/joaomoreno/vscode/tree/hover-ui).
19836|This is happening because the string is too large and the editor decides to place the hover as high as possible to show the most data. To solve this we need to introduce a max string length to show in the hover
19837|"@vsccarl Sometimes Ctrl+Alt+Up and Ctrl+Alt+Down are ""eaten"" by the video graphics driver at the OS level before they reach us. Please see https://superuser.com/questions/279756/how-to-disable-the-screen-orientation-hotkeys-in-windows-xp for example, which also shows how to disable them in the graphics driver."
19838|The search in selection feature is indeed currently limited to a selection that contains at least one full line.
19839|**verifier**: unsure if we have new nls files already, if not check the code
19840|@pflannery Which command do you use to properly attach vscode within ConEmu?  Regular `-new_window` flag actually opens a command prompt then creates a new Window for vscode 😕   ![image](https://cloud.githubusercontent.com/assets/2091902/14882074/23f47c8a-0d37-11e6-831b-0e3bd0810389.png)
19841|**verifier** install backspace++ before testing this
19842|Currently, the define keybinding button, after typing in the keybinding will insert a snippet at the cursor location. It is possible that the list of keybindings is empty, in which case a comma should not be inserted, or that the list contains other items (like in the gif), in which case the comman should be inserted, or it is possible that the cursor is in the middle of a keybinding rule, in which case the snippet should be inserted after the current keybinding rule.  Covering the last case correctly is not trivial.
19843|The whole system become caton
19844|@NikosEfthias It is possible with Alt+click, but there is no way to change it to Ctrl+click.
19845|@mquandalle is correct, we own the scrolling from JS.  We need to distribute the scrolling from point X to point Y through multiple frames in our code. Definitely a nice thing to have.
19846|@dkundel What keyboard layout do you have?
19847|> max string length to show in the hover  which is probably not a bad idea considering the space you have the loads of data some strings, arrays, etc contain
19848|"@robpaveza It is an accessibility requirement that Tab is not ""trapped"" in widgets.  The only widget we have that traps ""Tab"" is the editor itself and that can be toggled via Ctrl+M.  To get from the Replace text box to the Find text box, I use Shift-Tab or Ctrl+F."
19849|"@bbenoist right button mouse click on conemu tabbar , ""Attach to"" feature, then pick already running app.  But it's not related to topic - it's about integrating console to vscode, not the integrating app to conemu.  **UPD** I tried to split consoles and got same error..."
19850|"@gamelover42 I could not reproduce.  Maybe you are not focusing in ""file1"" in step 8? [No blinking cursor?]  fyi @bpasero @bgashler1 This might be caused by our poor focus affordance on editors.  ![5105](https://cloud.githubusercontent.com/assets/5047891/14882759/9fb16718-0d3a-11e6-87ed-599bee4ceb84.gif)"
19851|"Finally the problem was on the server configuration. He has to have active permission ""through folders"""
19852|"surely no such good as sublimetext. sublimetext much good.  >.>  ---  @ndhuyfit google ""vs code keybindings"" then we is easy able to runs the browser with the html file"
19853|I think we have two options:  A) Move the sash target area lower, more on top the status bar -- I think dragging up the debug console is a less used gesture than scrolling horizontally by dragging the scrollbar.  B) Increase the height of the horizontal scrollbar. Now, the vertical scrollbar is 14px wide, while the horizontal one is 10px high.  @isidorn @bgashler1 Thoughts?
19854|Currently, the `renderWhitespace` option only renders leading and trailing whitespace.
19855|"@ccirello You can always create a theme that uses black for example as the only color for all syntax elements. Can you elaborate why you want a ""Disable Syntax Highlight"" command?"
19856|I think it is an OOM crash. I don't think we do anything stupid on Ctrl+C: - we create a big fat JS string with all the text - we call event.clipboardData.setData('text/plain', text);  Most likely this crashes when creating the big fat JS string with all the text.
19857|@bpasero Is there something I can inherit by the fact that html preview is an editor?
19858|"@T0toro From your screenshot, I see at the bottom you might be using a vim emulation extension.  Since our codebase does not contain any invocation for a function called ""Ignore"" I believe it is an extension you have installed that throws this error.  Can you please share with us the list of extensions you have installed: `F1 > Extensions: Show installed extensions`"
19859|Closing as there isn't nice way to doing this.
19860|@agrabhi ping
19861|@coe-jeubanks is correct.  We only substitute leading tabs when inserting snippets.
19862|This is fixed since we have adopted project Salsa
19863|Closing this as we have moved to project Salsa. Let's discuss new issues separately.
19864|We have moved to project Salsa for JavaScript and this shouldn't happen anymore.
19865|@transtone All the keybindings can be customized via `keybindings.json`. Also, extensions can customize them.  Here is for example an extension that changes the default keybindings to be Sublime-Style: https://github.com/Microsoft/vscode-sublime-keybindings  IMHO this is a great opportunity to get started with writing an extension. More documentation on writing an extension at https://code.visualstudio.com/docs/extensions/overview
19866|@DanB91 [this code](https://github.com/Microsoft/vscode/issues/981#issuecomment-162330360)  is a suggestion.
19867|@cfjedimaster We have an open PR #5423 that would make it that pressing subsequent Enter, the inserted whitespace gets trimmed.  Also, are you finding this behaviour annoying in a certain programming language, or when doing something specific, most of the feedback we got so far is that indenting to the right spot is a helpful feature, and not an annoyance, so I'm wondering if you're hitting a use-case where this doesn't work as expected.
19868|"It would be also nice to be just able to use the ""play"" button to start a task instead of navigating trough a menu. Maybe an option for each task , serial , parallel ..."
19869|@lizhaode We enforce this limit as it could lead to an OOM crash.  I think we could raise the limit once we optimize the way in which we read a file.  Currently, we read it in chunks and concatenate them in one huge string, only to split the string up by newline characters again very soon thereafter. This causes unnecessary memory pressure on v8.
19870|"I'm thinking we need to add a setting called `fixedTabSize: true|false` or something like that.  @eladts I wonder how other editors deal with this. i.e. Do emacs and vim offer an equivalent setting to switch behaviour?"
19871|We don't have a shared CSS rule for this yet, but could probably add it.
19872|Ok, closing then.
19873|I'm finding it only an issue in HTML, maybe because I tend to have specific ways of indenting in HTML, specifically I keep head and body at the same level as html.  #5423 doesn't look to be exactly what I want - I really just want no white space inserted at all. I hit enter, and my cursor will be at position 1 in the next line.
19874|Another example - given form fields where I'm wrapping each label and input in a particular div, I like to have them all at the same indentation level.
19875|"@zersiax I really like the idea of F6 as a quick way to navigate between regions. With F6, you could very quickly navigate and focus the message which would result in it being read again. I have noticed NVDA has a shortcut for reading the status bar (which unfortunately doesn't work with us as there is no aria role for a status bar), but maybe we could add a keyboard shortcut that quickly presents the high-level status of vscode. e.g.  - ""Explorer viewlet, two side-by-side editors, one error message"" - ""Git viewlet, one diff editor opened"" - ""Debug viewlet, in debug mode, stopped in fileA.js, one editor opened""  Thus, you could press Shift-F6 to get a quick overview of what's going on and F6 to navigate to each region.  If we go for such an approach, it means we need to rethink a bit how we do aria alerts, as they should not be a fire and forget sort of thing.  @bpasero From the original repro steps, suggestions do not appear when creating a new file so no aria alert calls occur from the suggest widget or from the editor. Have you instrumented the `vs/base/browser/ui/aria` -> `alert` method and found such calls with these steps?"
19876|That is a cool idea. Currently, the keybinding dispatching ignores only modifier keys (does not try to dispatch them unless they are accompanied by a non-modifier key).
19877|@alexandrudima  the problem is alt click is reserved on linux by the X
19878|We need to investigate if it possible to determine if there is a RDP session in progress and perhaps render things differently. We can start with disabling all animations for example.
19879|That looks so cool
19880|**@all** People interested in running shell commands from current version of vscode (without any extra window) can take a look at [Shell](https://marketplace.visualstudio.com/items?itemName=bbenoist.Shell) which is an small extension I built weeks ago.  @koutsenko I know its kind of off-topic but some could have been be interested it it anyway. #143 is about productivity when using both vscode and a terminal.  In that sense, I believe that ConEmu's splitting options and alternatives on other platforms such as [Xmonad](http://xmonad.org/) and [Awesome](https://awesome.naquadah.org/) are worth being notified to people :wink:  Sorry if some felt polluted by my question. I have opened [an issue (#5941)](https://github.com/Microsoft/vscode/issues/5941) to move the discussion around my problem out.
19881|For performance reasons, we detect the keyboard layout once, when you first press a key. We then cache this information until a restart. AFAIK there is no browser event to know when the keyboard layout has changed, so we would need to poll on the keyboard layout. It is unfortunate.
19882|@slayerxj I can recomment using `editor.fontSize` for increased editor font size. And @bpasero we really need a setting for setting the explorer font size.  The `Ctrl+=` triggers a zoom similar to how it triggers a zoom in a web browser.  We use `translate3d` to scroll the editor, which introduces a new composition layer. This is generally a very good thing, as Chromium can render the editor independently of the other parts of the workbench. However, Chromium falls back to grayscale antialiasing in various cases, such as if a composition layer is transparent, or sits at non-integer coordinates and there was one more case which I forget now.  We always use translate3d with integer coordinates, but the zoom in of 125% makes all those nice integers into floats. So I think Chromium then falls back to grayscale anitaliasing.  The only thing I can do is to disable `translate3d` when using zoom in, but that will lead to slower scrolling, longer paint times, etc. IMHO we should simply provide a setting for the explorer font size.
19883|accessibility
19884|"I believe there is more to it. I am using the Dvorak keyboard layout. If the first key combination I press is ""Cmd-,"", VS Code acts as if I hit 'Cmd-w"" -- the QWERTY key. There is no switching of layouts in this case and the only layout configured on my system is Dvorak."
19885|Hey @stevencl  Thanks for the great work and here is my 2 cents about the close button to the left. When there are many files open and the tabs are getting shrinked, the small space for each tab will only be enough to show the close button which will make it easier to accidentally close the tab instead of selecting it.   Dirty indicator icon can still stay on the left since it does only indicate file status, but moving close button to the right will let us easily recognise the filename and will prevent accidental close action.
19886|@Beingbook this looks this issue https://github.com/Microsoft/vscode-eslint/issues/71
19887|I agree that the horizontal scrollbar is more important than dragging the panel up. I am fine with both A and B
19888|unsure if this is @joaomoreno or @bpasero
19889|@isidorn That sounds like good behavior.  I'll be happy to provide feedback.
19890|@alexandrudima and me talked about this and I think we came to the conclusion that the editor navigation history is something that should be provided by the editor itself and not by listening to events from the outside.
19891|@zersiax trying to reproduce the issue and cannot, here are my steps: - cmd+shift+p - git commit  => an info shows up and is read to me when I use NVDA.  Does this simple test case not work for you already?
19892|@realitylord Nice find. Nothing I tried on our side (messing extensively with the font family) helped. I have filed https://bugs.chromium.org/p/chromium/issues/detail?id=607528 against Chromium
19893|There is still an issue when I have the preview in slot 2 and focus is in 1 and I Cmd+2 to pass focus to the webview. Focus does not move over (e.g. keyboard arrow up and down for scrolling does not work in that case).
19894|Well, `never` means never, no matter whether a language service exists or otherwise. I think it covers it pretty well.  As for the second part, I think that is quite alright. A dictionary extension can always send out suggestions with kind `text`. What the setting addresses is the collection of words that can be found in the current document.
19895|I actually don't even get `text/plain` but `application/unknown`. When hitting the latter we'd do it, yeah.
19896|Just got this after opening global settings, then opening workspace settings and I think closing the readonly editor on the left.
19897|Autocomplete: #2465  What do you mean by _tip_?
19898|Verified that things work with image links now. I think in the end this is something Electron should provide so that a webview - after being created - will never attempt to change its location and you get an event to handle this.
19899|@stevencl Mock-ups look great and description of functionality sounds spot-on. My initial impression though, is that the tabs are kinda big... perhaps bigger than they need to be, and appear to waste some space. I understand the trade-off between stylish presentation and functionality, but this is a dev tool, practical design trumps style for sure. I'm sure you've experimented with this calibration however, so I look forward to trying it out!
19900|It used to be used by more UI contributions...  Now, if I'm not mistaken, it is used by menus and [the feedback widget](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/feedback/electron-browser/feedbackStatusbarItem.ts#L59), although the use in the latter does have a bit of a type mess...  What do you suggest?
