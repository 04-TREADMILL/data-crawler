1101|"@joaomoreno You are absolutely right. In case others got same misunderstanding, this should be:  ``` // Path to the git executable     ""git.path"": ""c:\tools\git\bin\git.exe""  ```"
1102|:+1:
1103|Related to #337
1104|We are planning an update end of this week.
1105|Thanks, fixed alternatively: https://github.com/Microsoft/vscode/commit/c00ea5bf4115b27055386134d41e122cfaa61a7a
1106|Thanks Andre, closing this issue since it is not on the VSCode side. Please file this bug against the unity plugin.
1107|@isidorn, I have the same behaviour as @jel-massih. Here is the console log:  [issue30.txt](https://github.com/Microsoft/vscode/files/41417/issue30.txt)
1108|This looks like an exception on the node-debug side, moving to Andre
1109|Closing as duplicate of https://github.com/atom/electron/issues/3530
1110|@mithun-daa currently not, but it seems you want a lot more, also the ability to alter the input after the call to showInputBox.
1111|Duplicate of #69
1112|@bpasero Will it works with MS NTLM proxy?
1113|Is `mainline` a remote branch or a tag? Also what do you get when running `git status`?
1114|Reverted back some changes. ![image](https://cloud.githubusercontent.com/assets/6461412/11333995/39201cf8-91d2-11e5-88b5-aedad639f780.png)  Note that - our markdown colorizer does (and always did) colorize only very few constructs. - the goal is to switch to a good text make tokenizer, so we don't want to invest too much into the Monarch definitions.
1115|Please do not combine multiple issues into a single.  It is currently not supported to increase the font size of the file explorer, you can zoom in the entire workspace.  Cursor blinking is not supported.
1116|Thanks!
1117|"Has the same issue. I'm on Windows 10 Pro 64 bit and the Code always stop working around half an hour or so. Well... It's not responding to any input (although the task manager didn't say ""Not responding""). But after a while, the Code will show, ""... not responding. Are you want to quit or wait?""-like prompt."
1118|@daviwil David, I wait for you to review and approve the change.
1119|Duplicate of #192
1120|@dstorey Really nice, thanks so much. One thing: CSS.plist is from https://github.com/textmate/css.tmbundle. Would you mind also make a pull request there, so we stay in sync? I can also do it, just let me know.
1121|Hi **@joaomoreno**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Joao Moreno). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1122|Not sure, @aeschli can you comment, it uses your proxy work.
1123|Thanks Martin!
1124|@kurotsukikaitou are you editing PHP?
1125|We support everything from iconv-lite: https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings
1126|@bpasero Yes I am. Is there any particular issue regarding php editing?
1127|I guess this mentality is baked into your ethos.  `This is so trippy`: https://youtu.be/5DqJwmzG6Fk?t=7m24s  Please spare a thought for users from other platforms.
1128|Hi **@joaomoreno**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Joao Moreno). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1129|You mentioned the 3 files we have to keep in sync. The tokenizer will always be separate as we want to use the text mate tokenizer from the community and don't want to branch off.  Code reuse between languages is tricky. For runtime, each language is packaged separately. If we reference the htmlTags file from CSS that whole file and dependencies end up in the CSS package, increasing the memory foot print of CSS. We would have to break it up in small pieces and make sure it stays useful for both HTML and CSS.  Eventually CSS and HTML will become real VS code extensions. Right now they are implemented in an old style and are located in our VSCode repo. They would each go in their own git repo. Code sharing would then have to be done through a common node module that provides the shared code. So I think for now I'd rather avoid that and live with two separate tables.
1130|Same to me.  **Tag**,**Attribute**,**ClassName** are all in blue.  ![image](https://cloud.githubusercontent.com/assets/5742670/11334553/d4aad80a-9210-11e5-84a7-1a606662ed64.png)
1131|textmate/javascript.tmbundle#44 got accepted, so merging in the change as well. Thanks a lot, @Jakeii !
1132|@egamma, would be great!
1133|I have similar problem on Windows. fonts are blurry.  ![](https://yabumi.cc/15133ece61d27a8b120bd7f1.png)
1134|Yeah think this is being tracked in #140 .
1135|We use the text mate bundle from https://github.com/textmate/c.tmbundle which doesn't seem to support raw string.
1136|Using --extensionDevelopmentPath=.\extensions\typescript didn't work either. I get some wired error message complaining about the fact the extensions/typescript/out/typescriptMain couldn't be found.
1137|Fixed by #294
1138|--extensionDevelopmentPath must be an absolute path. Using an absolute path loads the extension however setting a breakpoint in TS still doesn't work.
1139|Well you certainly would have to port the Electron / file system read/write stuff
1140|Fixed by #290
1141|What kind of functionality is required here? Is navigating to working files section with a shortcut enough? Maybe we can navigate through the sections while focused to the sidebar via Ctrl + Up and Ctrl + Down arrow?
1142|"Does the eslint workaround work when the file is named `*.jsx`? I have an `app.jsx` file, and `""eslint.enable:true`, and I get syntax highlighting and no spurious errors - but I don't think I'm getting eslinting."
1143|Andre pointed out that the TS extension doesn't generate source maps. Added the flag. Now I can set breakpoints in TS but I the breakpoint gets hit I see:  ![image](https://cloud.githubusercontent.com/assets/1931590/11335568/8dcb6aea-91dd-11e5-9298-9d5cb4bab780.png)
1144|Ok. If I try to modify it in order to support raw strings, then should I try to create a pull request for this repository, for the textmate one  one or for both?
1145|Sorry I don't know how MS NTLM is related to HTTP proxies. Do you have more information, @KindDragon ?
1146|Right, had a look of Electron, 77% C++ code, wouldn't be one day's work to port over ARM. :)  BTW, I used to think VS Code is done in Cordova, why now Electron? What is the reasoning behind?
1147|For both would be perfect. Otherwise it also works if you do it for text mate first and once accepted, I bring it over.
1148|Ok I'll check when I'll have some time. Regards.
1149|"A problemMatcher has a severity property. The property will be used as a default value when no severity can be located in the message itself. In you case:  ``` json             ""problemMatcher"": {                 ...                 ""severity"": ""warning""                 ...             }  ```  Should do the trick."
1150|Same issue here, but with a corporate proxy and authentication (no certificate). I get a getaddrinfo ENOTFOUND marketplace.visualstudio.com vmarketplace.visualstudio.com:443 (although I'm able to check & install upgrades with http_proxy and https_proxy env variables).
1151|"The idea was to file path autodetection support. Something like:  ""fileLocation"": [""autoDetect""]  It would check whether a path appears to be relative or absolute (e.g. starts with / or a drive letter). Would that help in your case."
1152|This issue was moved to Microsoft/vscode-jshint#4
1153|@bpasero I'd like to work on such an extension, but is there any guidance?  For example, I think I might get started from the markdown language support. Will it be enough to follow these? - https://github.com/lextm/vscode/tree/master/extensions/markdown - https://github.com/lextm/vscode/tree/master/src/vs/languages/markdown
1154|Yes, #160
1155|Our docs are a good start: https://code.visualstudio.com/docs/extensions/overview
1156|I would accept help here if someone has an idea for efficient Linux file watching.
1157|I see. So a lot of people experience this issue. Kudos to you guys for finding the cause pretty fast. :3
1158|@PooLP are you able to build Code locally and could help me identify the issue? Might be easier than me trying to setup a Sharepoint locally with WebDav.  Also, when you say it does not work, does the explorer show empty or do you get an error earlier? Can you open the developer console when this happens to see if something is printed (from Help menu, last entry).
1159|I mean NTLM authentication for HTTP proxy. Python PIP manager for example support HTTP proxy, but doesn't support NTLM authentication.
1160|"@isidorn for me the problem is easily reproducible: open the dev tools console and step through the loop by keeping F10 pressed (and auto-repeat starts). You don't need a watch for this. After some time the 'index' problem occurs but the CALL STACK continues to update (line numbers of the top frame changes). But the VARIABLES view is stuck: it doesn't update and you cannot drill down into variables.  I've debugged the problem and here is my analysis:  After some time the UI sends a 'scope' request with an invalid frame id. This can happen if node-debug already got another 'step' request which has invalidated the frames of the previous step. Since node-debug did not check for this situation sufficiently, a ""Cannot read property 'index' of undefined"" occurs. I've fixed this problem by returning a proper error. However, the variables UI still doesn't work because it doesn't seem to be able to recover from exceptions or proper errors returned from the 'scope' request.  Could you please try to reproduce with my steps from above and then try to fix the issue that the variables view does not recover from an exception/error returned from the 'scope' request."
1161|Yes, this will work fine! we can toggle through the settings, but honestly nobody is going to change the default setting if you set ctrl+tab to open working files :smile:
1162|Thank you guys for listening, looking forward for updates!
1163|@aeschli I discussed this with Alex and there are two ways we came up with how that can happen: - make JSON an extension that provides API. The JSHint extension would then prereq the JSON extension - make the JSON validator an npm module (may be depending on the VSCode API) which is used by JSHINT.
1164|Thanks for the analysis. I will look into it following your steps.
1165|That would solve my problem, yes.
1166|Reopening - this is a valid feature request
1167|Sure...
1168|@bpasero Thanks. Will spend some time on that.  A few tasks before attacking on, - [x] port TextMate syntax highlighting files to VS Code - [x] follow Microsoft's materials (doc+sample) to learn the extension model - [x] pack up the extension and test it out - [x] publish the extension  Finish the above quick tasks, and we should have a basic reST extension running in VS Code.  To move on to build full language support just like Markdown, the tasks become more challenging, - [ ] build a language server following [this guide](https://code.visualstudio.com/docs/extensions/example-language-server) - [ ] write the glue code to talk to the language server - [x] enable preview (0.0.7+)  To build the language server, there seem to be [a few options](http://stackoverflow.com/questions/2746692/restructuredtext-tool-support) but it takes a while to be familiar with them.
1169|We have a FILE_SAVING event but a) it is not exposed to extensions and b) it currently expects modifications to happen sync and not async, which would be a requirement when we talk from editor to extensions.
1170|If I use the eslint workaround, can I still get intellisense to work?
1171|Just so that you know: It is currently not possible to open a preview in HTML from an extension like it is possible for markdown.
1172|+1
1173|@bpasero Thanks for the tip. I glanced at the markdown language support and found that, 1. It happens to be based on an open source Markdown parser in JavaScript. 2. The glue code not only links that parser to VS Code, but also makes the preview work.  It would be difficult to find a reStructuredText parser in JavaScript right now. Existing ones rely on either Python or JVM.  Probably I will refer to languages such as PowerShell or Python to provide syntax highlighting first.
1174|`new_instance`?
1175|I have a lot of thoughts about this. I wrote a lot of details about it, the top section has my conclusions and below that is how I got to the conclusions:  ---  # Conclusions - The only way to properly display the full comments _(assuming these are either comments parsed from code or documentation from a static source)_ is to use a separate window. The comments must support displaying whitespace _(line-breaks at the very least)_ from their source, otherwise Monaco is going to be ignoring existing standards _(example: C# XML comments support using `<para/>` as a line break)_.  - The only problem with this solution is @joaomoreno thinks it's ugly and likely unnecessary; I have no doubt that there are others who agree with him. The best solution is to have a user preference called something like `Intellisense Full Comments`: When disabled the current functionality is used _(I know that some people prefer a quick one-line summary)_; When enabled a separate window is displayed that contains the full comments **including** whitespace (line-breaks at the very least). The full comments displayed in a separate window should look as close to the original comments/documentation as possible, unless the language specific comment syntax explicitly ignores whitespace/line breaks because it has explicit mechanisms for rendering them. - Parameter documentation should not be displayed in the full comments as it's displayed as parameter hints. If a language doesn't have well-defined parameter hints, then the source comments/documentation should be displayed in the full comments window.  - All non-parameter documentation should be displayed in comments (both full comments and the one-liner version) _(meaning don't strip out things like the returns tag the way Visual Studio does)_. - The full comments window should ideally be able to render syntax highlighting on the comments _(I know this is out of scope, I'm just listing what would be ideal)_. [Example below:](http://sevin7676.github.io/Ace.Tern/demo.html#javascript)  ![image](https://cloud.githubusercontent.com/assets/5360920/11337366/79e069b8-91ba-11e5-9ebc-981aba176143.png) - Ideally, the 'method signature' in the intellisense popup should be rendered using syntax highlighting the same way Visual Studio does it _(I know this is out of scope-  I'm just listing what would be ideal.)_. Example: In the picture below the section outlined in red should use syntax highlighting of the corresponding language _(JavaScript in this case)_   ![image](https://cloud.githubusercontent.com/assets/5360920/11337191/1361f3a6-91b9-11e5-8520-7eed88d95d98.png)  ---  # Details  First, there are two different ways people want to use feature that displays comments about the function that is being selected: 1. People like me: I want to see as much information as possible about the function (basically all of the comments). I have a very large code base and I use comments extensively on every function to document high level information about it, this lets me quickly determine information about the function without having to re-check the source of the function. I use this method in place of external documentation 2. People not like me: Want to see a very brief description of the function to remember what its general purpose is. These people will look at external documentation or the source of the function to get more information. Many libraries (like .NET core libs) don’t’ provide sufficient documentation in the comments that intellisense reads, which forces you to look at external documentation or the source (assuming it's open source- or you have to decompile it).   ---  The only way to satisfy both groups of people is to have a user preference for which mode should be used. I already had this discussion for [Tern](https://github.com/ternjs/tern/pull/425#issuecomment-64892296).   Tern has a ‘fullDocs’ option that when enabled returns the full parsed comments and when disabled returns the first sentence of the comments. However, Tern is just the comment parser, which is not exactly what we are discussing here. Instead, we are assuming that the full comments are already returned and we want to determine how they are displayed.  The issue of how the comments are displayed in the popup is more complex than it seems at first glance, because each language has a different structure for comments, some of which include comment sections that are currently not displayed in the comments for the preview of the function (such as parameter information).   ---  _I see a few questions that need to be answered to implement this properly:_  # Which parts of the comments should **not** be displayed in the intellisense comments preview?  I think this is already answered: The parameters should not be displayed (assuming the comment syntax supports parameters) because they will be displayed as parameter hints when inside the function call. However, it's worth noting that Visual Studio also hides the `returns` section of the comments (if any) from the intellisense comments preview (Monaco includes this section). I strongly prefer showing the returns section in the comments preview (Visual Studio's behavior drives me nuts in this case).   Example function (JavaScript):  ``` javascript /**  * Performs Magic  * @param a - anything  * @returns awesomeness  * @note this does nothing  */ function magic(a){     return a; } ```  ##### Monaco:  ![image](https://cloud.githubusercontent.com/assets/5360920/11336441/536b0416-91b3-11e5-99fa-60a0400553ae.png)  ##### Visual Studio 2015:  ![image](https://cloud.githubusercontent.com/assets/5360920/11336462/741ea5b4-91b3-11e5-9591-b8c975c51b88.png)  ##### To further complicate things, Visual Studio treats different languages differently (C#):  ![image](https://cloud.githubusercontent.com/assets/5360920/11336517/e78332e0-91b3-11e5-98b6-9807847064f0.png)  I think the best solution is to be consistent between languages (don't do what Visual Studio is doing).  ---  # Should line breaks and whitespace be included in the comments preview?  Currently vscode is not doing this (mainly because its only showing one line). This is absolutely an issue for people who like to read the full comments, especially when you consider that C#'s comment syntax even includes an explicit line break (`<para/>`) .   Again, I think the best solution is to include whitespace in the comments (line breaks and whitespaces including tabs) - the goal should be to show the comments in the structure that they were written in. However, it's more complex than this because each language-specific comment syntax has different rules. Example: - C# XML comments have explicit line breaks, therefore whitespace (including line breaks) should be ignored unless using the explicit line break sequence.   The result should be include white-space and line breaks unless the comment syntax has its own explicit mechanisms for this, in which case they must be parsed and turned into the appropriate spacing.    ---  # How should full comments with line-breaks be displayed?  This is the main point of this thread. So far we have the following ideas: -  Make the selected item in the intellisense popup taller than the others to potentially allow for multiple lines.   _I think this would be a decent solution but only if you allow the selected section to also scroll vertically, because an arbitrary height is not going to fit all comments (especially with line breaks)._ - Make the selected area auto scroll (horizontally) if it's too big.  _I think this is a terrible solution. It prevents line breaks from being displayed (which is non-sense when you have language specific comment syntaxes that support explicit line breaks). Also, the whole point of the comments is to be able to quickly get information you need- waiting on some random auto-scroller to start and scroll at an arbitrary speed would destroy the `quick` part of getting the information._ - Use a separate window for displaying full comments.  _This is the solution most editors use and I think it's the best solution. However, @joaomoreno  hates this because its `ugly`._
1176|It's not behaviour I've come across (I'd be interested in the editors in which it is present, it's in none of the ones I use regularly). If it is deliberate, then it's confusing, as the behaviour is inconsistent. Without knowing what the electric characters are for the mode, I don't know how it's going to react when I select some text and type a character. If I type 'a' it replaces the selection. If I type (maybe, who knows, it's pot luck) '(', then it doesn't replace the selection.  Confusing. Even more confusing is that if I make a selection and press (, then the text is surrounded by parent. Make a selection and press ), and it's replaced. So the behaviour on ( is different to the behaviour on ). To me, that's wrong.
1177|Arkady,  Have you tried cntlm (http://cntlm.sourceforge.net)? I used it a few months ago with success in order to use several command line tools with our NTLM-authentication based proxy.  On Mon, Nov 23, 2015 at 12:29 PM, Arkady Shapkin notifications@github.com wrote:  > I mean NTLM authentication for HTTP proxy. Python PIP manager for example > support HTTP proxy, but doesn't support NTLM authentication. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/69#issuecomment-158919690.
1178|Our settings typically follow this pattern `window.reopenFolders` for example.
1179|Already supported: the command is 'Expand Select', 'Shrink Select'.
1180|What do you get when running `git remote -v`?
1181|Closing as duplicate of #160
1182|@Morgy93 maybe use process explorer to analyze which process within code.exe actually causes the slowness, we start with more then one process and it would be interesting if one of them is spiking and consuming most startup time.
1183|I think you need to read this issue: #160
1184|"Also can you try running ""code.exe --disable-gpu"" from a command prompt from the installation folder of code to see if it makes any difference?"
1185|"Also can you try running ""code.exe --disable-gpu"" from a command prompt from the installation folder of code to see if it makes any difference?"
1186|Thanks h2u, I did have a read through but missed this one sounds like my problem will close this post :)
1187|@bpasero Sadly --disable-gpu doesn't help. Maybe here's something that helps? (Phew, a lot of parameters..) ![vscode](https://cloud.githubusercontent.com/assets/7961978/11339524/3019958a-91fa-11e5-9969-93a65860f60d.PNG)  I'll have a look at this process explorer thing in the meanwhile..
1188|Hi **@Protectator**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
1189|@rodrigoestevao Sorry for that, there has been some major changes in the way we tokenize and colorize, and we weren't able to stay compatible. We now use text mate grammar files to drive our colorizer with the advantage that they playing nicely with text mate themes and there is a bigger community that maintains these grammars. There are now plenty of themes to choose from and I hope you find one that you like.
1190|In case of an error I now set the scopes to []. This way all consectuive step attepts should recover the variables view.  Please note that I was still unable to repro this on my machine, so please verify instead of me. Thanks
1191|Ok, so: - You manually create a launch.json file - You open the debug viewlet but you do not see the configurations in the launch dropdown  Did I understand your steps properly? Because I can not reproduce this beahvior. Providing more precise steps would be useful, especially how you add the launch.json
1192|"@joaomoreno  Our project settings force the insertion of tabs:  `.vscode/settings.json`  ``` // Place your settings in this file to overwrite default and user settings. {     ""editor.insertSpaces"": false, // <---- THIS IS THE ONE     ""files.trimTrailingWhitespace"": true, ... } ```"
1193|Should this only act on when there is no definite hint about the file's indentation? E.g.: new files.
1194|Hi **@aasierra**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
1195|@zwb1988 I have proposed a fix here https://github.com/Microsoft/vscode/pull/501
1196|Looks good to me!  @Jaykul is one of the maintainers of the PowerShell TextMate bundle from Sublime Text (that gets used virtually everywhere: GitHub, Sublime, Atom, and now VS Code).  I consider him an expert in the area :)
1197|Closing this is a duplicate of #140.
1198|@aasierra Cool. I have found out that normal search has exactly the same issue. I see you changed the constant LIMIT_FIND_COUNT, the method findMatches will apply the same rule to the normal search (if I am not mistaken).  Don't know how will this change affect the searching performance in a huge file thought (like a file size in MB or GB).
1199|"The settings get applied by the workbench to each editor regardless the model being for an empty file or not. If this setting is left out, then the model is used for guessing. If the guessing code is not confident, it falls back to insertSpaces:false, tabSize:4. The fallback values have no configuration story.   I think our intent here is to say: ""all TypeScript, CSS and JS files should use tabs"". This sounds to me as a great usecase for [.editorconfig](https://marketplace.visualstudio.com/items/chrisdias.vscodeEditorConfig)"
1200|@zwb1988 Yep regarding huge files at the very least I changed it to this to hopefully get things talked about. Also increasing for all search types was done intentionally to increase search limit for everything not just Regex as I am sure other users will be confused why normal searches do not match everything as well.
