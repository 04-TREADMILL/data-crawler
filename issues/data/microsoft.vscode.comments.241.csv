24001|NEEEEED! I use this constantly! feels alien without it and so long winded..
24002|I also have this issue but can't find out the fix by this, Pls Detail!
24003|+1 this is a must have
24004|This would be very valuable for the CppTools extension as well - we're currently bundling native binaries for the language service and debugger integration for every platform we support, and it's getting unwieldy.  Being able to acquire only the binaries relevant to the platform would be a big gain for us.
24005|I tested with the latest release 1.1.1 on Mac, the behavior is same as before. Really hope this can be solved soon and provide the experience like it on Windows  Thanks for your great work
24006|## With Tabs  ![tabs-02a-light](https://cloud.githubusercontent.com/assets/11839736/15731500/75d4de42-282a-11e6-9573-691d6d9d2fe3.png) ![tabs-02a](https://cloud.githubusercontent.com/assets/11839736/15731501/75d51dd0-282a-11e6-9f89-92da4d46eae8.png)  ## Tabs disabled  ![tabs-disabled-02a](https://cloud.githubusercontent.com/assets/11839736/15731825/c434f962-282c-11e6-9e77-5fbe7726e27a.png)
24007|"@Tyriar how to use in os x   ``` { ""key"": ""ctrl+shift+t"",          ""command"": ""launcher.terminal"" } ```  no use"
24008|See the refinement here https://github.com/Microsoft/vscode/issues/7058#issuecomment-223175779
24009|See the refinement here https://github.com/Microsoft/vscode/issues/7058#issuecomment-223175779
24010|@bpasero here are the icons (I modified existing icons to fit our current icon style and this particular need). [stackView icons.zip](https://github.com/Microsoft/vscode/files/294711/stackView.icons.zip)
24011|The change is not working since the outline style is not applied to the webview but to the body of the displayed document(s).
24012|@Tyriar In Windows, I can't copy string from terminal page, I think this feature is necessary
24013|I think this issue is kind of a dup of #6978
24014|@xJoeyv please take a look at https://github.com/rubyide/vscode-ruby/wiki to check whether you have installed the dependencies correctly, otherwise please file an issue there.
24015|"@joaomoreno, here is the output:  ``` process.env['VSCODE_NLS_CONFIG'] ""{""locale"":""en-us"",""availableLanguages"":{}} COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/LUCNOC/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET=/private/tmp/com.apple.launchd.onuhsKavd2/ServiceProcessSocket""  window.location.search ""?config=%7B%22pathArguments%22%3A%5B%5D%2C%22programStart%22%3A0%2C%22enablePerformance%22%3Afalse%2C%22verboseLogging%22%3Afalse%2C%22debugBrkExtensionHost%22%3Afalse%2C%22logExtensionHostCommunication%22%3Afalse%2C%22openNewWindow%22%3Afalse%2C%22openInSameWindow%22%3Afalse%2C%22gotoLineMode%22%3Afalse%2C%22diffMode%22%3Afalse%2C%22disableExtensions%22%3Afalse%2C%22waitForWindowClose%22%3Afalse%2C%22execPath%22%3A%22%2FApplications%2FVisual%20Studio%20Code.app%2FContents%2FMacOS%2FElectron%22%2C%22workspacePath%22%3A%22%2FUsers%2Flucnoc%2FDocuments%2Frtlogs.git%22%2C%22filesToOpen%22%3A%5B%5D%2C%22filesToCreate%22%3A%5B%5D%2C%22filesToDiff%22%3A%5B%5D%2C%22extensionsToInstall%22%3A%5B%5D%2C%22appName%22%3A%22Visual%20Studio%20Code%22%2C%22applicationName%22%3A%22code%22%2C%22darwinBundleIdentifier%22%3A%22com.microsoft.VSCode%22%2C%22appRoot%22%3A%22%2FApplications%2FVisual%20Studio%20Code.app%2FContents%2FResources%2Fapp%22%2C%22version%22%3A%221.1.1%22%2C%22commitHash%22%3A%22def9e32467ad6e4f48787d38caf190acbfee5880%22%2C%22appSettingsHome%22%3A%22%2FUsers%2Flucnoc%2FLibrary%2FApplication%20Support%2FCode%2FUser%22%2C%22appSettingsPath%22%3A%22%2FUsers%2Flucnoc%2FLibrary%2FApplication%20Support%2FCode%2FUser%2Fsettings.json%22%2C%22appKeybindingsPath%22%3A%22%2FUsers%2Flucnoc%2FLibrary%2FApplication%20Support%2FCode%2FUser%2Fkeybindings.json%22%2C%22userExtensionsHome%22%3A%22%2FUsers%2Flucnoc%2F.vscode%2Fextensions%22%2C%22extensionTips%22%3A%7B%22ms-vscode.csharp%22%3A%22%7B**%2F*.cs%2C**%2Fproject.json%2C**%2Fglobal.json%2C**%2F*.csproj%2C**%2F*.sln%7D%22%2C%22ms-vscode.mono-debug%22%3A%22%7B**%2F*.cs%2C**%2F*.csproj%2C**%2F*.sln%7D%22%2C%22msjsdiag.debugger-for-chrome%22%3A%22%7B**%2F*.ts%2C**%2F*.tsx**%2F*.js%2C**%2F*.jsx%2C**%2F*.es6%7D%22%2C%22lukehoban.Go%22%3A%22**%2F*.go%22%2C%22ms-vscode.PowerShell%22%3A%22%7B**%2F*.ps%2C**%2F*.ps1%7D%22%2C%22austin.code-gnu-global%22%3A%22%7B**%2F*.c%2C**%2F*.cpp%2C**%2F*.h%7D%22%2C%22Ionide.Ionide-fsharp%22%3A%22%7B**%2F*.fsx%2C**%2F*.fsi%2C**%2F*.fs%2C**%2F*.ml%2C**%2F*.mli%7D%22%2C%22dbaeumer.vscode-eslint%22%3A%22%7B**%2F*.js%2C**%2F*.jsx%2C**%2F*.es6%7D%22%2C%22eg2.tslint%22%3A%22%7B**%2F*.ts%2C**%2F*.tsx%7D%22%2C%22Kasik96.format-indent%22%3A%22%7B**%2F*.php%7D%22%2C%22felixfbecker.php-debug%22%3A%22%7B**%2F*.php%7D%22%2C%22linyang95.phpmd%22%3A%22%7B**%2F*.php%7D%22%2C%22ikappas.phpcs%22%3A%22%7B**%2F*.php%7D%22%2C%22tht13.python%22%3A%22%7B**%2F*.py%7D%22%2C%22donjayamanne.python%22%3A%22%7B**%2F*.py%7D%22%2C%22magicstack.MagicPython%22%3A%22%7B**%2F*.py%7D%22%2C%22saviorisdead.RustyCode%22%3A%22%7B**%2F*.rs%2C**%2F*.rslib%7D%22%2C%22hars.CppSnippets%22%3A%22%7B**%2F*.cpp%2C**%2F*.cc%2C**%2F*.h%7D%22%2C%22mitaki28.vscode-clang%22%3A%22%7B**%2F*.cpp%2C**%2F*.cc%2C**%2F*.h%7D%22%2C%22ms-vscode.cpptools%22%3A%22%7B**%2F*.c%2C**%2F*.cpp%2C**%2F*.cc%2C**%2F.cxx%2C**%2F*.hh%2C**%2F*.hpp%2C**%2F*.hxx%2C**%2F*.h%7D%22%2C%22seanmcbreen.Spell%22%3A%22%7B**%2F*.md%7D%22%2C%22ms-vscode.Theme-MarkdownKit%22%3A%22%7B**%2F*.md%7D%22%2C%22DavidAnson.vscode-markdownlint%22%3A%22%7B**%2F*.md%7D%22%7D%2C%22mainIPCHandle%22%3A%22%2Fvar%2Ffolders%2F9c%2Fgkt2df7j11b965s2c1tgxvk80000gn%2FT%2FCode-91fbfd.sock%22%2C%22sharedIPCHandle%22%3A%22%2Fvar%2Ffolders%2F9c%2Fgkt2df7j11b965s2c1tgxvk80000gn%2FT%2FCode-91fbfd-shared.sock%22%2C%22isBuilt%22%3Atrue%2C%22crashReporter%22%3A%7B%22productName%22%3A%22VSCode%22%2C%22companyName%22%3A%22Microsoft%22%2C%22submitURL%22%3A%22https%3A%2F%2Fticinocrashreporter.azurewebsites.net%2Fcrash%22%2C%22extra%22%3A%7B%22vscode_sessionId%22%3A%22%24(sessionId)%22%2C%22vscode_version%22%3A%22%24(version)%22%2C%22vscode_commit%22%3A%22%24(commit)%22%7D%7D%2C%22extensionsGallery%22%3A%7B%22serviceUrl%22%3A%22https%3A%2F%2Fmarketplace.visualstudio.com%2F_apis%2Fpublic%2Fgallery%22%2C%22cacheUrl%22%3A%22https%3A%2F%2Fvscode.blob.core.windows.net%2Fgallery%2Findex%22%2C%22itemUrl%22%3A%22https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%22%7D%2C%22welcomePage%22%3A%22https%3A%2F%2Fgo.microsoft.com%2Ffwlink%2F%3FLinkId%3D723048%22%2C%22productDownloadUrl%22%3A%22https%3A%2F%2Fcode.visualstudio.com%22%2C%22releaseNotesUrl%22%3A%22https%3A%2F%2Fgo.microsoft.com%2Ffwlink%2F%3FLinkID%3D533483%23vscode%22%2C%22licenseUrl%22%3A%22https%3A%2F%2Fgo.microsoft.com%2Ffwlink%2F%3FLinkID%3D533485%22%2C%22updateFeedUrl%22%3A%22https%3A%2F%2Fvscode-update.azurewebsites.net%2Fapi%2Fupdate%2Fdarwin%2Fstable%2Fdef9e32467ad6e4f48787d38caf190acbfee5880%22%2C%22updateChannel%22%3A%22stable%22%2C%22aiConfig%22%3A%7B%22key%22%3A%228aa6e059-82b6-46f6-8138-5a43aa3dd621%22%2C%22asimovKey%22%3A%22AIF-444c3af9-8e69-4462-ab49-4191e6ad1916%22%7D%2C%22sendASmile%22%3A%7B%22reportIssueUrl%22%3A%22https%3A%2F%2Fgo.microsoft.com%2Ffwlink%2F%3FLinkId%3D534872%22%2C%22requestFeatureUrl%22%3A%22https%3A%2F%2Fgo.microsoft.com%2Ffwlink%2F%3FLinkID%3D533482%22%7D%2C%22enableTelemetry%22%3Atrue%2C%22userEnv%22%3A%7B%22SHELL%22%3A%22%2Fbin%2Fbash%22%2C%22TMPDIR%22%3A%22%2Fvar%2Ffolders%2F9c%2Fgkt2df7j11b965s2c1tgxvk80000gn%2FT%2F%22%2C%22Apple_PubSub_Socket_Render%22%3A%22%2Fprivate%2Ftmp%2Fcom.apple.launchd.xFgRZxUhDl%2FRender%22%2C%22USER%22%3A%22lucnoc%22%2C%22SSH_AUTH_SOCK%22%3A%22%2Fprivate%2Ftmp%2Fcom.apple.launchd.kqCbyP2x79%2FListeners%22%2C%22__CF_USER_TEXT_ENCODING%22%3A%220x1F5%3A0x0%3A0x0%22%2C%22GOOGLE_API_KEY%22%3A%22AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q%22%2C%22PATH%22%3A%22%2Fopt%2Flocal%2Fbin%3A%2Fopt%2Flocal%2Fsbin%3A%2Fopt%2Flocal%2Fbin%3A%2Fopt%2Flocal%2Fsbin%3A%2Fopt%2Flocal%2Fbin%3A%2Fopt%2Flocal%2Fsbin%3A%2Fusr%2Flocal%2Fbin%3A%2Fusr%2Fbin%3A%2Fbin%3A%2Fusr%2Fsbin%3A%2Fsbin%3A%2Fopt%2FX11%2Fbin%3A%2Fusr%2Flocal%2Fmongodb%2Fbin%3A%2FUsers%2Flucnoc%2Fbin%3A%2Fusr%2Flocal%2Fbin%22%2C%22PWD%22%3A%22%2F%22%2C%22EDITOR%22%3A%22emacs%22%2C%22XPC_FLAGS%22%3A%220x0%22%2C%22XPC_SERVICE_NAME%22%3A%22com.microsoft.VSCode.74912%22%2C%22SHLVL%22%3A%221%22%2C%22HOME%22%3A%22%2FUsers%2Flucnoc%22%2C%22VSCODE_NLS_CONFIG%22%3A%22%7B%5C%22locale%5C%22%3A%5C%22en-us%5C%22%2C%5C%22availableLanguages%5C%22%3A%7B%7D%7D%5CnCOM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS%2FUSERS%2FLUCNOC%2FLIBRARY%2FAPPLICATION_SUPPORT%2FGOOGLE%2FCHROME_SOCKET%3D%2Fprivate%2Ftmp%2Fcom.apple.launchd.onuhsKavd2%2FServiceProcessSocket%22%2C%22LOGNAME%22%3A%22lucnoc%22%2C%22PKG_CONFIG_PATH%22%3A%22%2Fusr%2Flocal%2Flib%2Fpkgconfig%3A%22%2C%22MONGO_PATH%22%3A%22%2Fusr%2Flocal%2Fmongodb%22%2C%22DISPLAY%22%3A%22%2Fprivate%2Ftmp%2Fcom.apple.launchd.h09Nl1vodu%2Forg.macosforge.xquartz%3A0%22%2C%22PHP_AUTOCONF%22%3A%22%2Fusr%2Flocal%2Fbin%2Fautoconf%22%2C%22_%22%3A%22%2Fusr%2Fbin%2Fenv%5Cn%22%7D%2C%22recentFiles%22%3A%5B%5D%2C%22recentFolders%22%3A%5B%22%2FUsers%2Flucnoc%2FDocuments%2Frtlogs.git%22%5D%7D"" ```"
24016|+1, the only way to get more audience for now is more downloads, which makes extensions less detectable.  Speaking of relevance, do we need to implement some special alogrithm to define `relevance`? For instance, when people search for php extensions, a debugger+intellisense extensions is more relevant than a theming extension, regardless of the name.
24017|"@willin try this:  ``` json { ""key"": ""ctrl+shift+t"", ""command"": ""workbench.action.terminal.toggleTerminal"" }, ```  @builden polishing the copy and paste experience is planned for the June release https://github.com/Microsoft/vscode/issues/6451"
24018|Thanks everyone for your contributions! I'm going to lock the conversation to prevent pinging all the participants for smaller issues. If you find any other problems please check out the [existing issue list](https://github.com/Microsoft/vscode/labels/integrated-terminal) and [create a new one](https://github.com/Microsoft/vscode/issues/new) if necessary.
24019|Apparently click packages is the old name for snappy packages which is captured here https://github.com/Microsoft/vscode/issues/5458  The caveats sounds like an issue, `xdg-open` which is used by Electron to open URLs is an example of something that may break.
24020|Hey @sergiusens, thanks a lot for your work on this. The snap file size is 92mb compared to 30-45 for the other package types, are snaps not compressed by default or was this just left out?  We probably won't delve into distributing a snap until at least [#1577514](https://bugs.launchpad.net/snapcraft/+bug/1577514) is fixed. It sounds like it will be an Electron fix that will then take time for us to uplevel to.  I only thing I can see that's preventing your commits landing in master is moving the build resources (parts, snapcraft.yaml) to `resources/linux/snap` and the build artifacts to `.build/linux/snap`. If you get around to upleveling your branch and making those changes we'd be glad to merge a PR and add it to the CI build.
24021|The terminal is currently only available in the Insiders build, you can download it here code.visualstudio.com/insiders
24022|Thanks @spywhere, closing as dupe
24023|It's entirely possible that it's just simply too early to jump on the click / Flatpak bandwagons. Fair enough.  I do think we'll see these evolve to have similar inter-app communication APIs that Android, WinRT and possibly iOS offers for their sandboxed apps.  Maybe in a fanciful future Linux utopia, we could have Flatpak and click instead of RPMs and DEBs, and have a far more comprehensive coverage of compatible distributions? :P
24024|@Tyriar even with signed bits, I would like to just click a button in VS Code that downloads the package and opens the package manager to run the update.
24025|Thanks.
24026|Here are the command ids: `workbench.action.git.globalOpenChange` and `workbench.action.git.globalOpenFile`
24027|Sorry I have to reopen this because I notice that the UI is freezing when I do a `gulp watch` from the command line while having Code open. I profiled the explorer refresh again as well as starting a profile before running `gulp watch` and measuring after this is done (vscode sourcecode workspace):  **Explorer refresh new** ![image](https://cloud.githubusercontent.com/assets/900690/15734620/e712d5de-2891-11e6-9026-e12db2390f65.png)  **Explorer refresh old** ![image](https://cloud.githubusercontent.com/assets/900690/15734628/06cc9fc2-2892-11e6-9d8c-8570883129f4.png)  **Compile all new** ![image](https://cloud.githubusercontent.com/assets/900690/15734633/0fa09d10-2892-11e6-8b74-f48791c76646.png)  **Compile all old** ![image](https://cloud.githubusercontent.com/assets/900690/15734644/1c99f052-2892-11e6-9c2c-21cd464d95b9.png)  [profiles.zip](https://github.com/Microsoft/vscode/files/294849/profiles.zip)
24028|@bpasero when the repo is signed it will be the OS notifying the user, not VS Code. Then just launch the updater and press the button just like with the majority of the software on the system.  There is potential to streamline this further but it would come after the repo is signed. For example show a message box which runs `sudo apt-get update && sudo apt-get install -y code` (on Ubuntu anyhow) after an admin prompt then restarts code.
24029|@Tyriar note that i have any update info disabled on my Ubuntu because I had it so many times that an update would totally break my Linux in Parallels. I would still prefer a way to do this from within the application.  How does Chrome do it?
24030|I added a new setting `window.restoreFullscreen` which by default is false.  I also restore full screen independently from this setting if you apply an update and VS Code restarts after you had been in full screen mode.
24031|- How does it look when just one or two tabs are open? Do they stay that size, or do they grow? - How does it look when the view is split? - The second screenshot shows a very tiny `src` below the active tab, is that a glitch? How will we should the path of the file? - In the no-tabs design, the actions to the right look broken, almost to the point of screen cheese. If the user explicitly disables tabs, why not simply remove that notion and just put the `x` button all the way to the far end of the actions and remove the lighter (darker, in light theme) grey background colour?
24032|Not sure if this is still happening with new opened editors view.
24033|This should work ok now.
24034|"> How does it look when just one or two tabs are open? Do they stay that size, or do they grow?  We think that we want to keep all tabs the same width up to a maximum width but we would not let them span the entire width even if it is free. For example, if the max width is 200px and all tabs are smaller than 200px, we just use that. If one tab is larger, it gets the extra size and takes it away from the other tabs if possible. We would still try to keep all other tabs equal width if possible. We think that we do not want to crop the tab title (name of the file) at all, so once a tab title is cropped, it pushes other tabs out of the view. That way you do not end up with tiny cropped tabs that are hard to use and in most cases all tabs should show up with equal width.  > How does it look when the view is split?  Every group has its own concept of tabs and actions, so a split duplicates the little action area where you see the ""..."", split action and stacks action.  > The second screenshot shows a very tiny `src` below the active tab, is that a glitch? How will we should the path of the file?  I would not put the path of the file below the tab because there is likely not enough space if we keep the title height of the editor part.  > In the no-tabs design, the actions to the right look broken, almost to the point of screen cheese. If the user explicitly disables tabs, why not simply remove that notion and just put the `x` button all the way to the far end of the actions and remove the lighter (darker, in light theme) grey background colour?  We want to try this design to emphasize the fact that there are actions targeting the currently active editor and actions that target the group. Having all of the actions mix together is not very intuitive. So we would like to try a design where this becomes clearer. I would try it out to see how bad the experience is and then continue the discussion. If the background color looks like screen cheese we can also just try to put a separator between editor actions and the group actions."
24035|The problem isnot solved. the same problem occured in version 1.1.1
24036|@Tyriar Please have a look, I hope that was the idea! :wink:
24037|@bpasero our system is modeled basically exactly after how Chrome's works. It's what Atom has been wanting to do as well.
24038|This issue was moved to OmniSharp/omnisharp-roslyn#572
24039|@Tyriar Do you run node in 32 or 64bit? The former has a heap limit of around 1GB, after that you get into GC hell
24040|So you can not update from within the application?
24041|I am very sorry to hear you are having issues with VS Code. I wonder if this issue is being caused by an installed extension. Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions` and try your steps again to see if it reproduces. If you see it is an issue with the extension, please file it against the extension repository itself.
24042|@bpasero I don't understand how that is related to `gulp watch`? This is outside of VS Code and triggered by file events?
24043|@kisstkondoros really nice work! Made a bunch of comments, mainly just names and shuffling things around.
24044|@bpasero I'd think it's unwise to go against convention for starters and roll our own update system. Calling into `apt-get`, or whatever the OS' package management system is (if it can be detected) from within VS Code seems achievable.  Users do have a choice in package managers though, so we may try to update via apt-get when it was installed using aptitude or something. Apparently this was [a problem in the past but not anymore](https://raphaelhertzog.com/2011/06/20/apt-get-aptitude-%E2%80%A6-pick-the-right-debian-package-manager-for-you/), but that's just one example.
24045|Duplicate of https://github.com/Microsoft/vscode/issues/6451
24046|What sort of command did you run? Also do you have screenshot(s) showing the issue?
24047|@jchannon I haven't used these before. Do I install from https://github.com/powerline/fonts and then use some special characters in my prompt?
24048|@jrieken not sure, sounds reasonable though. I'll check it out when I'm in the office.
24049|Ubuntu 16.04:  ![image](https://cloud.githubusercontent.com/assets/2193314/15737035/88f09344-2858-11e6-9aae-c2e8d6d45f57.png)
24050|HI,  Here what i perform on terminal ![screenshot from 2016-06-02 12 53 54](https://cloud.githubusercontent.com/assets/8169482/15737019/3bfb33dc-28c1-11e6-8ef2-e6aacaca095c.png)  When i reduced terminal size then i was not able to scroll to see entire output i.e scrolling was not working and i am not able to run any command.  ![screenshot from 2016-06-02 12 53 42](https://cloud.githubusercontent.com/assets/8169482/15737079/8d6066b6-28c1-11e6-91fd-072d163b85bd.png)
24051|"Seems relevant:  > Names and Tokens >  > [4]       NameStartChar      ::=      "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF] > [4a]      NameChar       ::=      NameStartChar | ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040] > [5]       Name       ::=      NameStartChar (NameChar)* > [6]       Names      ::=      Name (#x20 Name)* > [7]       Nmtoken    ::=      (NameChar)+ > [8]       Nmtokens       ::=      Nmtoken (#x20 Nmtoken)*  https://www.w3.org/TR/REC-xml/#sec-common-syn"
24052|@rajeevkumarsharma thanks, I think this fits into the class of bugs that can be fixed by https://github.com/Microsoft/vscode/issues/6838
24053|@alexandrudima I verified this worked as expected in january. Not sure if something changed in between
24054|ctrl + c , here copy selected area (missing in vscode terminal), insted it produces ^C  it's my elementary os terminal with this feature ![screenshot from 2016-06-02 13 00 46](https://cloud.githubusercontent.com/assets/8169482/15737322/130bfe82-28c3-11e6-983a-6125108b6c8d.png)  ctrl + v, here paste whatever is in clipboard (missing in vscode terminal), insted it produces ^V  ![screenshot from 2016-06-02 13 01 06](https://cloud.githubusercontent.com/assets/8169482/15737346/324fc90e-28c3-11e6-9b8e-1063b3b1e49b.png)  also it warn me if copy some command from web and what ti paste here with ctrl + v  ![screenshot from 2016-06-02 13 13 02](https://cloud.githubusercontent.com/assets/8169482/15737463/c227ca18-28c3-11e6-8fc7-0f87b45b1f7d.png)
24055|Yep there is definitely a problem there, still can't figure out how, though...  In a terminal, what do you get with `$SHELL -ilc env`?
24056|We can mix black-screen and xtrem feature into out vscode terminal
24057|The marketplace has implemented a relevance sort order. We can jump onto it. Here are some query results, for reference.  A good one:  ![screen shot 2016-06-02 at 09 53 02](https://cloud.githubusercontent.com/assets/22350/15737727/ec469462-28a7-11e6-9519-efe982668337.png)  An OK one:  ![screen shot 2016-06-02 at 09 53 21](https://cloud.githubusercontent.com/assets/22350/15737728/ec47d85e-28a7-11e6-9761-22f4a490ab89.png)  Hmm:  ![screen shot 2016-06-02 at 09 53 11](https://cloud.githubusercontent.com/assets/22350/15737729/ec48176a-28a7-11e6-8cdb-f2523978469b.png)  You can get the same results by [running a search](https://marketplace.visualstudio.com/search?term=c&target=VSCode&sortBy=Relevance) in the marketplace page.  If we do the jump, we should make sure the relevance is better tuned.
24058|@Tyriar yeah sure, I think, vscode terminal should have features from both black-screen and xterm.
24059|might be an optimisation I removed to do nothing in case of an already normal string...
24060|@jrieken This is hover. And clearly the div in the hover is able to render chinese characters. Shouldn't this be forwarded to the csharp guys?
24061|@bpasero The current solution is also temporary. Would a `Do not ask again for this version` button work?
24062|"Please excuse my horrible Paint skills. IMHO the icon with the 3 files (that is currently the seargent icon ![image](https://cloud.githubusercontent.com/assets/22350/15738180/5f196fb2-28aa-11e6-83d8-420331e6794a.png)) should not be an icon, but should be painted custom. I also think no other actions should be in that area except the ""seargent"" icon. e.g.:  The idea is that the area to the right of the single tab or multi-tab is a fully clickable area, **it is not an icon**, but it is somehow painted to show the idea that there are other tabs under/not visible. I certainly fail at drawing this, shadows and co would help, but does it make sense?  When you would hover over that area it would light up somehow to indicate that it is clickable and that it allows you to go to the other tabs behind/not visible.  As for the actions, IMHO they should either go away entirely (I haven't seen a tab UI that includes actions in the tabs!) or go to the left of the 'x'. But if we do tabs, IMHO the area to the right contains **just the tabs** and not a mix of some actions + some tab management actions (and yes split editors should not be there! - maybe that is solved by drag & drop a tab towards the right of the screen creates a new side or something - goes from 1 to 2 vertical things)  ![image](https://cloud.githubusercontent.com/assets/5047891/15737749/08c4dcac-28a8-11e6-82da-1f08b445cd82.png)"
24063|This was fixed in Microsoft/vscode-vsce#66. Extension developers need to update to the latest vsce.
24064|Created DonJayamanne/pythonVSCode#145
24065|Created DonJayamanne/javaVSCode#5
24066|Duplicates #6679   Please follow #6679 for updates
24067|"> Every group has its own concept of tabs and actions, so a split duplicates the little action area where you see the ""..."", split action and stacks action.  Space's going to be pretty tight once we start duplicating that three-action box.  > > The second screenshot shows a very tiny src below the active tab, is that a glitch? How will we should the path of the file? >  > I would not put the path of the file below the tab because there is likely not enough space if we keep the title height of the editor part.  Meaning: it will not be put anywhere?  > I would try it out to see how bad the experience is and then continue the discussion. If the background color looks like screen cheese we can also just try to put a separator between editor actions and the group actions.  The experience isn't going to be bad: the actions are useful and visible; it just doesn't look good. A separator would fix it perfectly."
24068|"There's a ""never show again"" button which seems to work fine?"
24069|Removed the disclaimer instead, since the marketplace is case insensitive after all...
24070|The lack of auto correcting tabs is probably the biggest downfall of this editor, I dread any time that I have to move code around because it always ends up in me having to re format everything
24071|Oh... @bpasero ?
24072|"Tracing this shows that the format request fails in the tsserver. Formatting a tsx file results in:  ``` Sending request: format (4). Response expected: yes. Current queue length: 0 Arguments: {     ""file"": ""p:/mseng/VSCode/Playgrounds/ts/test.tsx"",     ""line"": 1,     ""offset"": 1,     ""endLine"": 3,     ""endOffset"": 2 }  Response received: format (4). Request took 86 ms. Success: false . Message: Error processing request. Debug Failure. False expression:  ```  Formatting any other file afterwards results in   ``` Sending request: format (8). Response expected: yes. Current queue length: 0 Arguments: {     ""file"": ""p:/mseng/VSCode/Playgrounds/ts/m.ts"",     ""line"": 1,     ""offset"": 1,     ""endLine"": 3,     ""endOffset"": 16 }  Response received: format (8). Request took 2 ms. Success: false . Message: Error processing request. Debug Failure. False expression:  ```  as well. Moving to TS team."
24073|This issue was moved to Microsoft/TypeScript#8933
24074|Nope just use those fonts, install OH MY ZSH and then maybe set the theme to be something like here: https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2  On 2 June 2016 at 08:23, Daniel Imms notifications@github.com wrote:  > @jchannon https://github.com/jchannon I haven't used these before. Do I > install from https://github.com/powerline/fonts and then use some special > characters in my prompt? >  > — > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/7116#issuecomment-223215260, > or mute the thread > https://github.com/notifications/unsubscribe/AAGapsnbtsqn89HTPu7Vgbt514PEogGDks5qHoTZgaJpZM4IsPeG > .
24075|Main is fine with me as well. How do we call the middle when three are open? Center. Then center would be an option as well since it doesn't introduce a new term.
24076|@Aukstkalnis thanks. Now I see. Need to think about how to best address this.
24077|+1
24078|+1
24079|Spend a while bashing at xterm.js and created a bunch of issues https://github.com/sourcelair/xterm.js/issues. It certainly seems to be in a better state than term.js imo, I haven't played much with it actually within vscode yet though.
24080|I have `explorer.autoReveal` as false and use a keybinding on `workbench.files.action.showActiveFileInExplorer` to accomplish this. You can also get to it from the command palette.  ![image](https://cloud.githubusercontent.com/assets/2193314/15741021/802d545e-286c-11e6-9140-1763fa038cc7.png)
24081|Thanks, that helps a lot. I must have overlooked it. Nevertheless the right click menu would be useful.
24082|"@johnf76 Since I do not (yet) have any experience with debugging meteor with VS Code, I could only speculate what the problem might be (and I will stay away from that until I know more details).  (BTW, a quick Internet search showed that debugging meteor server side is possible with VS Code: https://forums.meteor.com/t/using-visual-studio-code-for-meteor-development/21058)  First some facts about node debugging in VS Code: - VS Code itself doesn't do anything with source maps; it is completely ignorant about them and sees them only as files (if they are not filtered anyway). So restarting VS Code cannot not 'recreate' or 'update' source maps. So if you are seeing this behaviour there must be something else going on that I'm not aware of.  - the node.js debugging extension of VS Code ('node-debug') manages source maps (besides communicating to the node runtime). Node-debug is a separate process that is started for every debug session that is for every 'launch' or 'attach' (A VS Code debug session is indicated through the orange coloured status bar). Node-debug tries to locate the source maps and caches them until the session ends. So if you 'attach' to meteor and then stop the session, all cached state is gone. The next 'attach' tries to locate the source maps again. So debug sessions are isolated from each other. However, if the underlying node runtime continues to run across session, it could very well keep some state across session.  What does step 6 (""Break out of meteor instance (ctrl-c)"") from above mean? Does it kill the underlying node.js?"
24083|"@isidorn am I right that this feature does not change the structure of the launch config that arrives in the debug adapter?  Example:  ``` json {    ""type"": ""node"",    ""request"": ""launch"",    ""runtimeExecutable"": ""mynode"",    ""Windows"": {      ""runtimeExecutable"": ""mynode.exe""     } } ```  arrives in the debug adapter on OS X and linux as:  ``` json {    ""type"": ""node"",    ""request"": ""launch"",    ""runtimeExecutable"": ""mynode""  } ```  and on Windows as:  ``` json {    ""type"": ""node"",    ""request"": ""launch"",    ""runtimeExecutable"": ""mynode.exe""  } ```"
24084|"@weinand no, I also send the ""windows"" part to each adapter. I could remove it - but we are not doing that for any other property so far - removing it from the launch.json"
24085|@isidorn This is the default behavior from our tree library. I think this is true at all places where tree is being used.   I agree that this is not looking nice. Will look into this. Thanks.
24086|@isidorn please do that on the VS Code side
24087|"@isidorn and what are you sending to the adapter in this case:  ``` json {    ""type"": ""node"",    ""request"": ""launch"",    ""Windows"": {      ""runtimeExecutable"": ""mynode.exe""     },    ""OSX"": {      ""runtimeExecutable"": ""mynode""     },    ""linux"": {      ""runtimeExecutable"": ""mynode""     } } ```"
24088|It is more promiment for your use case because the tree does not take the full area which you have. I think you can look into having a tree controller which could ovewrite onClick methods to not focus the tree - check that out.
24089|"on windows  ``` {    ""type"": ""node"",    ""request"": ""launch"",    ""runtimeExecutable"": ""mynode.exe"",    ""Windows"": {      ""runtimeExecutable"": ""mynode.exe""     },    ""OSX"": {      ""runtimeExecutable"": ""mynode""     },    ""linux"": {      ""runtimeExecutable"": ""mynode""     } } ```"
24090|@isidorn I agree that we need a nice toggle icon here.. I already asked Steven for this.
24091|thats fine 👍
24092|@isidorn intellisense inside the OS sections works?
24093|any new findings?
24094|"Excuse my ignorance but doesn't OSX use ""mynode.app""? @isidorn And what about `outDir` (when using Electron with Typescript)?"
24095|@jrieken the gulp watch causes file events to be triggered in relatively short time frame that probably spam our listeners in the window that all do normalization.  I think spamming file events is a sensitive topic for the workbench because many listeners are in the UI thread and most of them do path/uri magic. We could try to pull out more of that to the file watcher process but nevertheless it is a good test case for measuring performance in path/uri land.
24096|@alexandrudima I am not sure why you are so opposed to putting actions into the area to the right of the tab-group. I think we can add actions there as long as they are for group management. The only actions in there are moving groups around, closing all in the group and we argue that the split action is important enough that it should be there as well. I think we can copy from other tab UIs but we can also evolve the UI to be better.   To give an example, Eclipse uses tabs and also decided to use the space to the right for actions:  ![image](https://cloud.githubusercontent.com/assets/900690/15743791/323b1ff4-28c8-11e6-8d82-fc9986f87644.png)  I find this a very good use of space in that otherwise empty area.  @joaomoreno we will not show the path when you enable tabs but you can see the path on hover. When disabling tabs we show the path as today.
24097|@Tyriar @joaomoreno I am used to an experience for update where I acknowledge the update from within VS Code and it runs. Currently on Linux I **never** update because this experience does not exist. I am asking to make the same experience possible on Linux for stable and insiders.
24098|"@dbaeumer it might be confusing though that ""center"" shows something if you have only 1 editor open and when you open a second group, ""center"" is suddently showing something else because the new group opens in center and does not contain the editors from the first group."
24099|"@JimiC ""mynode.app"" is the name of the application folder (aka ""application bundle'"") which the Finders shows as the application ""mynode"" in the UI. But mynode.app is not an executable in the OS sense, so you can not use it with the ""runtimeExecutable"" attribute from above. For ""runtimeExecutable"" you have to specify a file that has the executable bit set, e.g. ""/usr/local/bin/node"".  re 'outDir': the platform specific sections support the same attributes as the enclosing scope."
24100|I see. Thanks
