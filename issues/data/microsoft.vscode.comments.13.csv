1201|@zwb1988 Although, regarding large files, the way lines are stored I believe will allow for a large amount to not have issues but when it gets large it should act the same as other text editors might.
1202|Is there any mode specific configuration instead? YAML actually banned tabs, so our editor putting one in there is just wrong. That is true for our project as it is for every user out there writing YAML.
1203|`window.launchNewInstance`, `window.alwaysLaunchNewInstance`?
1204|@joaomoreno  I am also not a big fan of our current behaviour. Maybe we should change the default of `editor.autoClosingBrackets` to off by default?
1205|@Morgy93 yes please, there are processes within the one that is selected in your screen shot that could cause that one to take so long.
1206|Against it.  Pop up Atom, Sublime Text, Textmate and see what happens there. I'd say it's pretty standard. Additionally, the confusion is always an undo away.
1207|Well thats good but does not really capture the case that we only do so if you are passing in no arguments. I thought about `window.noArgsLaunchNewInstance` but its ugly.
1208|I've run into this too, I want the behavior of `auto` but fallback to space, not tab. Not sure if atom does anything special here or just falls back to space by default.
1209|I think this is something we add from our custom markdown parser and is not supported in general.
1210|@Tyriar This is great! Thank you so much! :heart:
1211|Do/can the settings have descriptions to go along with them? Adding `noArgs` to the start kind of feels like adding `byDefault`, which is implied.
1212|> Have you tried cntlm (http://cntlm.sourceforge.net)?  Yes, I use it when I have to, but it would be better without it. Just use proxy from system settings.
1213|Oh yeah:  ![image](https://cloud.githubusercontent.com/assets/900690/11341364/7ab7dde2-9202-11e5-83b4-d2247a6dce0b.png)
1214|Awesome! Thanks for the fix, @Jaykul!
1215|It appears #471 is a duplicate of this issue.  It has a workaround that worked for me by creating a symbolic link of the `/usr/local/lib/dnx/runtimes` folder to `~/.dnx/runtimes`
1216|No, thank you! This whole open source thing might even get me off Sublime ;-)
1217|I did a fresh install and this is still occuring.  I will try copying the build folder from an installation that does work.  Doing identical install steps on a Windows10 PC and everything works fine.  @joaomoreno Unable to re-open
1218|Yes - one or both of these does seem necessary to make the debug console usable.
1219|@dbaeumer I favor the JSON extension idea over the npm module. I also envision this JSON extension being useful for the [ESLint extension](https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint). There is a schema available for it [here](http://json.schemastore.org/eslintrc), so it could also leverage this proposed JSON extension's API to inject another item into `json.schemas`.  Let me know if there's anything I can do to help out.
1220|Oh sorry about that, thought anyone could reopen stuff.  Do you have Visual Studio installed? Do you mind providing the output of `.\scripts\node.bat install`?
1221|@alexandrudima Looks like omnisharp:fetch failed?
1222|@aeschli sure, I can look at making a PR to TextMate. I did a similar update to Atom when it was new, which I guess wasn't pushed back to TextMate as this version was further out of date than that version. I guess there are a fair few of these files of different vintages across the different editors that use TextMate plists.
1223|"@bpasero I took this one: https://technet.microsoft.com/de-de/sysinternals/processexplorer.aspx But the output is most likely the same:  ![vscode2](https://cloud.githubusercontent.com/assets/7961978/11342492/fad06c06-9207-11e5-87af-3d47384bcb5b.PNG)  ``` ""C:\Program Files (x86)\Microsoft VS Code\code.exe"" --type=renderer --no-sandbox --lang=de --app-user-model-id=Microsoft.VisualStudioCode --node-integration=true --enable-pinch --device-scale-factor=1 --enable-delegated-renderer --num-raster-threads=2 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --channel=""11656.1.1109162074\190479848"" /prefetch:673131151 ```  ![vscode3](https://cloud.githubusercontent.com/assets/7961978/11342649/b6d45da4-9208-11e5-8d7e-68a06cdc4385.PNG)  Don't really know what's important for you within this tool, so please be a bit more precise. :)"
1224|"From the command line, time to load has improved.    When the editor appears, the drawing of the interface is notable, compared to normal.    Another difference is that instead of two code.exe tasks, there is just one (until it loads and then there are 4).  From: Benjamin Pasero [mailto:notifications@github.com]  Sent: Monday, November 23, 2015 9:32 AM To: Microsoft/vscode vscode@noreply.github.com Cc: bobwoodard bob@bobwoodard.com Subject: Re: [vscode] VMW Workstation: VS Code hits 97% CPU and won't start for a couple of minutes (#106)  Also can you try running ""code.exe --disable-gpu"" from a command prompt from the installation folder of code to see if it makes any difference?  — Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/106#issuecomment-158951440 .  https://github.com/notifications/beacon/AFSxmbPyzz4TjNJSdRQSUd_dmxq5EZaVks5pIxrSgaJpZM4GlDTJ.gif"
1225|Hi **@bpasero**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Benjamin Pasero). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
1226|Yes, running with this command will disable the process for GPU acceleration. So you say the user interface is now drawing slower but the startup time is normal?
1227|@aasierra Yes, the build failure is unrelated to your change.  I see the need to highlight more than the first 1k results, but I feel reluctant to remove the limit altogether. It is not so much a problem to find all these matches, but afterwards they are converted into model decorations (tracked ranges) and the view model converts them again for fast painting times (in case of wrapping).  I'm thinking about 20MB files where as you begin typing in the find widget there could be >1M find matches. From my playing with it, I am certain the model/view model are not in such a good shape to deal with these many decorations at this time.  I will do some additional testing to see if there is something low hanging, otherwise an alternative solution (for unlimited find results highlighting) would be to make the entire find widget not rely on decorations and bake the concept into the view  -- to get O(viewport) complexity.
1228|@Morgy93 I am using process explorer and it allows to group processes hierarchically and then I can expand the renderer process of code.exe to see spawned children within:  ![image](https://cloud.githubusercontent.com/assets/900690/11343051/904405f2-920a-11e5-84f3-9578a1cb9941.png)  Can you use the same tool and then see if any of the processes within the renderer is busy or actually really the renderer?
1229|Output of `git branch -vv` :   ```   jspm   02fc9ea [origin/jspm: behind 3] Added reference to bootstrap web font; Initial version of bundle gulp task * master 800eb62 [origin/master] Changes on source maps configuration ```
1230|Yeah, I have VS 2012, 2013 and 2015 installed  Here is the output: [output.txt](https://github.com/Microsoft/vscode/files/41793/output.txt)
1231|Pop up Visual Studio(!), Eclipse, Notepad++. No such behaviour there. This is NOT standard.
1232|@isidorn @stevencl With the latest fixes in VS Code and node-debug I'm no longer able to reproduce the problem on OS X. Steven could you please try on Windows?
1233|Updated to only use All Files when user specifies a mime type other than text/plain.  I return the name rather than empty when it is text/plain, so file name looks like `Untitled-2.*.*` [but is fixed in Electron 0.34.2+, where it should look like `untitled-2`].
1234|Startup time is still slow, just quicker than without it.  When it comes up, it’s hard to describe, but rather than just snapping into place on the screen, it seems like I see the outside border and the inside parts start to appear.  It happens quickly, just not all at once.  From: Benjamin Pasero [mailto:notifications@github.com]  Sent: Monday, November 23, 2015 11:46 AM To: Microsoft/vscode vscode@noreply.github.com Cc: bobwoodard bob@bobwoodard.com Subject: Re: [vscode] VMW Workstation: VS Code hits 97% CPU and won't start for a couple of minutes (#106)  Yes, running with this command will disable the process for GPU acceleration. So you say the user interface is now drawing slower but the startup time is normal?  — Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/106#issuecomment-158991900 .  https://github.com/notifications/beacon/AFSxmUL_U-hwt7wK9ZPOxSspfqRE8zOKks5pIzpSgaJpZM4GlDTJ.gif
1235|"I tested again, saw the list of debug environments, and verified that selecting Node.js here creates launch.json correctly.  However, it is very easy to miss the prompt for debug environments because it is visually disconnected from the click that initiated it.  One stray click and you are stuck with an empty configurations array.  I think many people will face this issue.  As a quick fix, how about adding ""Empty"" to the list of environments and continue to re-prompt for the environment until one is explicitly selected.  This would avoid case where missing it the first time puts you into a bad state."
1236|Sure, will open a bug there :)  As for workarounds - sure, they work. But these are workarounds rather than a robust solution.
1237|@alexandrudima @bpasero Any thoughts on this?  Any chance there is a workaround?  This is currently blocking addressing the top piece of feedback on `vscode-go` and I'm not sure how to workaround it.
1238|@fhelwanger Intellisense seems to work but it is not always relevant.
1239|Thanks.
1240|"@fish520   AFAIK these keybindings are ""stolen"" at a very low level by some display driver: http://superuser.com/questions/279756/how-to-disable-the-screen-orientation-hotkeys-in-windows-xp  So you can: - disable the hot keys from your display driver if you don't use them; - or change the VSCode keyboard shortcuts for add cursors (e.g. binding them to `Ctrl`+`Arrow`):  ``` { ""key"": ""ctrl+up"",           ""command"": ""editor.action.insertCursorAbove"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+down"",         ""command"": ""editor.action.insertCursorBelow"",                                      ""when"": ""editorTextFocus"" }, ```"
1241|@74th would `TextEditor.revealRange` with no/default `revealType` work for you?
1242|Hi Coreh, thanks for catching this issue.  Please feel free to do the PR if you would like :)
1243|Thanks for fixing this!
1244|Thanks. This ide is really nice to work in compared to the others I have tried for golang.
1245|After investigating this a bit further, I have some more questions: - Do you send a 'thread' event (with the reason 'started') once a new thread gets created in your adapter. This event notifies VSCode that there is a new thread and in the mono case I can see new threads even though no breakpoints got hit on those threads - The current implemenation will only call the stackTrace request for the stopped thread, not for all the threads, which I believe is correct behavior. If you stop on Thread A I do not think it is necessery to check the state of thread B, since you have to report first that something changed in B  Let me know what you think
1246|In case other people are having trouble and find this report: I had problems because I only had the coreclr runtime installed.  Although most things work with coreclr now, Omnisharp seems to search for Mono specifically.  If it's not there, it tries to run it anyway.  This doesn't work but fails silently, meaning that Code starts but with c# completion unavailable.
1247|`alt+shift+up` actually conflicts as well, which conflicts on atom's defaults.
1248|Might it be a duplicate of #458 ?
1249|This is strange. You never saw them enabled? There are no staged/unstaged changes?
1250|@dbaeumer now I wait for the task to finish if it is not a watching task. You can review it debugService.ts#592
1251|This would be a great extension to write, @ole1986
1252|Thanks, but that's not a solution at all. The severities `Note` and `Warning` are now handled correctly but `Fatal` has now the new default severity too. Is there a way to declare my own mapping for severities?
1253|"Mainline is a remote branch.  When I run git status I get: # On branch mainline # Your branch and 'origin/mainline' have diverged, # and have 1 and 7 different commits each, respectively.  When I run git branch -vv I get: * mainline         bac18a4 [origin/mainline: ahead 1, behind 7]  Vscode is correctly identifying mainline as a branch since when I run ""git checkout"" in Vscode (by clcking on the status bar) the dropdown list shows ""mainline  Branch at bac18a40""."
1254|How did this go?  > I will try copying the build folder from an installation that does work.
1255|@bpasero Actually that's just what I did, but there is no other process before the editor is fully loaded. Have a look at the comparison:  I am starting VS Code and wait for the UI to load a bit (nothing changed till here): ![screenshot- 21](https://cloud.githubusercontent.com/assets/7961978/11349000/0a568594-922a-11e5-8add-0aae1ddefae7.jpg)  Then suddenly I get the no response error message and still nothing changed: ![screenshot- 22](https://cloud.githubusercontent.com/assets/7961978/11349011/25026020-922a-11e5-953e-4c16cf307d41.jpg)  Just after waiting for a little longer, the editor is fully loaded and two new processes spawned within the one which was consuming the cpu power. ![screenshot- 23](https://cloud.githubusercontent.com/assets/7961978/11349050/667ec1f6-922a-11e5-87d5-d9002bed0396.jpg)  That's pretty much everything that happens. Maybe I provide Teamviewer access or something similar to you and you play around with it for yourself? I don't mind struggling around with it like that, but maybe that boosts the process of solving the problem. :)
1256|Ok so using the `onig_scanner.node` from the release build fixed this issue....  Im fine with closing this out as it will be incredibly hard to reproduce, especially if nobody else is experiencing this.
1257|I also tried building the onig_scanner.node file manually with VS2010 (v100) and VS2013 (v120) (using the binding.sln solution) and same issue happens with both versions.
1258|Thank you
1259|Output of `git status` :    ``` # On branch master # Your branch is ahead of 'origin/master' by 1 commit. # nothing to commit (working directory clean) ```  ![ss1](https://cloud.githubusercontent.com/assets/6760808/11349506/58816a50-920b-11e5-86fe-1e069ef87e63.jpg)  I have never seen those options (sync, pull, push) enabled.  git version 1.7.9.5 on Ubuntu 12.04 32-bit
1260|Ok, thanks, now i understand.  @ZombieProtectionAgency its OK to submit feature requests here, we will eventually move from User Voice to here for those.  Questions should be on Stack Overflow.
1261|good point, thanks!
1262|Just to let you know: I just installed version 0.9.2 from this source https://az764295.vo.msecnd.net/public/0.9.2/VSCodeSetup.exe over my existing installation and VS Code started up fast again. Now I installed the latest release from the official website over the 0.9.2 installation and .. see.. it's slow again. So I assume that there are code changes between 0.9.2 and 0.10.1 which cause this issue.
1263|Hi, opening GIT bash in the folder & running I get $ git remote -v origin  https://github.com/joe912/taggle.git (fetch) origin  https://github.com/joe912/taggle.git (push)
1264|Thank you! It works!
1265|Also agree that ES6 should be default.
1266|@aeschli Thanks for the detailed explanation! I was a little bit wondering if textmate schemes are technically the better approach, because they rely very much on single-line regexes, and as soon as you put some keywords on another line the regex and thereby the highlighting breaks. I found the Codemirror/Brackets approach with a complete lexer/parser for the highlighting better suited for this problem. But I totally see the point in reusing the whole ecosystem of existing textmate schemes.  Is 0.10.1 already using a textmate scheme for typescript? I am wondering because I have a typescript source file where the highlight is totally broken up from a specific line (without a syntax error) in Atom (which is also using textmate schemes), but it looks fine in VS Code - good for VS code :)
1267|Actually, hmm, thinking about it that's probably related to the `tslint` extensions I've installed.
1268|Yes, verified, tslint's problem. Sorry.
1269|Import paths in vscode are relative to the `src/` directory. `vs/base/browser/keyboardEvent.ts` refers to [src/vs/base/browser/keyboardEvent.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/keyboardEvent.ts).
1270|Hi **@akamud**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
1271|Hi **@waywardmonkeys**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
1272|got it, thanks.
1273|Hi **@waywardmonkeys**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
1274|Hi **@waywardmonkeys**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
1275|@kinosang Nice to meet you.
1276|@flooooh I am looking for a way to use the git module outside of vscode, but also suggesting that the team consider breaking vscode into smaller, independent modules.  Like I mention, I am not very familiar with Typescript, but I am familiar with CommonJS, AMD, ES6 modules through years of experience using module loaders (Node, Brunch, Webpack, Babel / ES6, etc) so it looks like the way vscode has been implemented seems quite non-standard to me (eg, absolute paths). If you are going to break it up, relative paths within each module and absolute paths to node_modules is becoming / has become the standard, node and browser way to manage dependencies.  The reason I mentioned `vs/base/browser/keyboardEvent.ts` was `it seems to be pulling in vs/base/browser/keyboardEvent.ts but I cannot figure out where the dependency is from`. Today was the first day I've tried Typescript and the output was pretty unhelpful to figure out where that dependency was being pulled in from. Ideally, a compiler should include the stack trace of where the module was required from to help the user troubleshoot.  Let me know if the vscode team is considering breaking up vscode into modules!
1277|Please do this. It gets really annoying when you are selecting text to copy and then it takes you to definition. Currently this is my biggest beef with vscode.  Is there away to turn this off. I have searched the setting files and cannot find a setting that would match the click to definition behavior.
1278|ok . .  **not manually**...  1. ![click the debug button](https://cloud.githubusercontent.com/assets/5109966/11356296/816e0a86-9297-11e5-8578-fc230a2a443c.png)  2. ![selected the node js](https://cloud.githubusercontent.com/assets/5109966/11356297/891b7f0c-9297-11e5-9100-37ee03f6909e.png)  3. ![need restart](https://cloud.githubusercontent.com/assets/5109966/11356301/9141ae40-9297-11e5-8fab-a7603afe0a24.png)  can't open the dropdown menu ,need restart the VSCode.  thx.
1279|![screenshot from 2015-11-24 10 14 09](https://cloud.githubusercontent.com/assets/10231751/11358029/26659742-9294-11e5-954b-bf0f9437253a.png)
1280|@Morgy93 good insights, thanks. Especially good to know that 0.9.2 loads fast for you. There are two things that changed for the 0.10.x release: Lots of code changes on our end but also an update to the cross platform framework (Electron).   First of all we need to understand if this is caused by code changes or by Electron. The easiest to start with is to set you up to run Code from its sources so that we can tweak changes and rapidly see if it helps.  Can you follow https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source and when you launch code see if you see the same issue of slow startup?
1281|@jmm the explorer should always be in sync with the file system, otherwise this indicates a problem with our file watcher. On what OS are you on? And can you reproduce the issue repeatadly?
1282|"View | Move Sidebar"
1283|"The quick open situation will be fixed for the next release.  I am having a hard time finding a solution for the ""Go to definition"" problem though. I could disable the entire feature as soon as text is selected but that will likely frustrate other users.  If you are curious how this is implemented, check it out in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/goToDeclaration/browser/goToDeclaration.ts#L226"
1284|Version <= 0.10.1  Same here.
1285|+1, now I have to write all css properties in one line to avoid this problem temporary.
1286|ES6 should be the default. I normally can't be bothered creating a file to get syntax highlighting and close VS Code and go use a different editor.
1287|@dbaeumer I think all we need is letting you (and others) configure the default JSON settings. There we associate a file pattern with a schema URL. Right now these settings are in an unpractical form (all in one array), but I want to bring them to a key-value scheme (pattern - schema URI), so each mapping can be configured separately.
1288|@dstorey Lets submit the pull request and see if they take it. The experiences so far have been good, with a quick turnaround. Our goal is to avoid a branch as long as we can, so either side can profit from bug fixes.
1289|@alexandrudima Could not find the limit anywhere to make it into a configuration option. Is there such a hard limit after all?
1290|One more thing, what's your git version?
1291|Very interesting. What do you see in the bottom left corner of VS Code? Maybe related: #376
1292|#281 Git remote options (push, pull & sync) are disabled
1293|Pretty strange. The only thing that comes to mind is bit architecture, but we pretty much set 32 bits [all](https://github.com/Microsoft/vscode/blob/master/scripts/npm.bat#L6) [the](https://github.com/Microsoft/vscode/blob/master/build/gulpfile.vscode.js#L114) [way](https://github.com/Microsoft/vscode/blob/master/build/gulpfile.vscode.js#L114).  Closing it, hope you can still work in your Windows 10 box.
1294|Yeah this is known. Hope you don't mind that I renamed this issue.
1295|I find this very useful too.
1296|[GitHub Desktop](https://desktop.github.com/) clones every repository using the `https` protocol and creates `~/.ssh/github_rsa` and `~/.ssh/github_rsa.pub` which it somehow uses for auth. `git` (or `ssh`) by default only looks for `~/.ssh/id_rsa` and `~/.ssh/id_rsa.pub` when using authentication.  We need to: - [ ] Find out how GitHub Desktop is able to use pubkey auth with the `https` protocol - [ ] Make VSCode use that `github_rsa` key when pulling/pushing from a GitHub repository.
1297|"For SharePoint, use a O365 SharePoint site, With IE, on any library click in Ribbon ""Open with Explorer"" and create a network drive with adress (Warning, the time to create a network drive is short)  ![o365webdav](https://cloud.githubusercontent.com/assets/582733/11361597/dba2860c-928e-11e5-939d-a7a4f26173f1.jpg)  For error I have this : ![vsc-error](https://cloud.githubusercontent.com/assets/582733/11361483/2653e192-928e-11e5-9cf4-f2fa179155ce.jpg)  I must see if I have the tools for build locally.  Thanks, and sorry for time response and for my english ^^."
1298|"@Tyriar I only use Linux in a VM. I think for me some keybindings are lost due to the VM runner.  If you run Linux natively, I would love some help to figure out what would be better default keybindings for `editor.action.insertCursorAbove` and `editor.action.insertCursorBelow`:  ``` { ""key"": ""ctrl+meta+up"",          ""command"": ""editor.action.insertCursorAbove"",                                      ""when"": ""editorTextFocus"" }, { ""key"": ""ctrl+meta+down"",        ""command"": ""editor.action.insertCursorBelow"",                                      ""when"": ""editorTextFocus"" }, ```"
1299|Really is... Need to fix!
1300|Yes, there is a hard limit imposed while computing of 1000 occurences in  https://github.com/Microsoft/vscode/blob/497788c0bcd20859f736d585b49c208af8dd518f/src/vs/editor/common/modes/abstractModeWorker.ts#L253
