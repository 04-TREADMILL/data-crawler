8801|Sorry @danielschmitz I misread your comment on adding `workbench.action.tasks.runTask`. Though I created a ticket for the same popup behavior with `workbench.action.tasks.build`.  https://github.com/Microsoft/vscode/issues/2840
8802|+1  I 'd really like to see that.
8803|Moved to OmniSharp/omnisharp-vscode#32
8804|"Not sure if I should address this here, but: Any plans on adopting new stuff from [OmniSharp](https://github.com/OmniSharp/omnisharp-roslyn/) ?  [OmniSharp crashes](https://github.com/Microsoft/vscode/issues/1535) are still present for me in the latest (recent, ""January""-one) build.  As far as I understand (from OmniSharp issuetracker), they had a lot of major changes recently.  Would love to know an insight ;)"
8805|Same here! Cant work with it currently! It also intents completly wrong when i create a newline. (With a tab instead of spaces also...)
8806|> It also intents completly wrong when i create a newline. (With a tab instead of spaces also...)  That's something else and was introduced in the previous version as well. If `editor.insertSpaces` is set to `auto` it detects the indentation used by the opened file. But if you create a new file, it can't detect the indentation type so it uses `spaces` instead. Some issues regarding this have been raised already and should be discussed over there. Here it is: https://github.com/Microsoft/vscode/issues/1747
8807|This looks like Mac OS behavior for the select before the editor knows that the select requires different behavior. It's just not catching that first select. Once the file is in the working files section then the editor has it in memory...this is me speculating, though, and watching what is happening.
8808|This is a duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/32
8809|Hi **@mkosieradzki**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8810|"Can somebody provide a link for VSCode 0.10.6? Its impossible to work on HTML with this Version. Hope to have it fixed soon.  @SamVerschueren  What i mean is the following. (Extension .jsx, file is not empty, it has 70 lines) This behaviour was definetly not present before.  Steps to reproduce: 1. .jsx file (maybe also other ones) 2. Indent somewhere in a function, move the cursor to another line and save the file (be sure to have ""remove leading whitespace"" option enabled) 3. Go back to that line and press TAB.  ![indentation](https://cloud.githubusercontent.com/assets/5446019/12918426/6984adfa-cf3f-11e5-8eee-892cbfe86839.gif)"
8811|@philipgiuliani Ok, that's definitely something else. Create a new issue for that one if you don't mind as it's not the same as this one and then they can separately being tracked by the team.
8812|@SamVerschueren Thank you! Done in the following issue https://github.com/Microsoft/vscode/issues/2845.
8813|//cc @bpasero @alexandrudima
8814|"By the way, if I remove the line  ""runtimeExecutable"": ""${workspaceRoot}/electron.exe"" and using node.exe instead, everything works fine."
8815|+1
8816|Previous releases are at https://github.com/Microsoft/vscode/wiki/Previous-Releases
8817|Cool. I'm going to investigate when I get to work today. I'll make sure I have my environment set up properly and then send y'all some more context to help with debugging.
8818|"After looking at it more, it's very obvious that when highlighting any line, your caret stays on the same line you've highlighted which means when you press delete on an entire line, the line itself doesn't get deleted so you end up having to press delete twice to remove one line. This is also linked to the inability to highlight an empty line since it doesn't place the caret on the line below; it simply places the caret at the end of the highlighted line.  _When I say ""highlighting a line"" I mean when placing the cursor on a line number and left clicking._  **What currently happens:** 1    // Line 1 content **2    // Line 2 content - highlighted line****&lt;caret&gt;** 3    // Line 3 content 4    // Line 4 content 5    // Line 5 content  **Outcome of what currently happens when pressing Delete/Backspace:** 1    // Line 1 content **2    &lt;caret&gt;** 3    // Line 3 content 4    // Line 4 content 5    // Line 5 content  ---  **What should happen:** 1    // Line 1 content **2    // Line 2 content - highlighted line** 3    **&lt;caret&gt;**// Line 3 content 4    // Line 4 content 5    // Line 5 content  **Outcome of what should happen when pressing Delete/Backspace:** 1    // Line 1 content 2    **&lt;caret&gt;**// Line 3 content 3    // Line 4 content 4    // Line 5 content"
8819|@jamietre VS Code 0.10.8 (available probably today) supports inlined source and includes a fix for https://github.com/Microsoft/vscode-node-debug/issues/23.  But I don't think that inlined source will fix all your problems. Inlined source is helpful if you try to debug generated JavaScript and don't have the source in your workspace. In this case VS Code is now able to show the source (but it won't allow you edit the source). An indication that the source is coming from inlined source is visible in the editor's header:  ![2016-01-22 16-24-31](https://cloud.githubusercontent.com/assets/1898161/12920140/b82ccd0e-cf47-11e5-9011-7934ed7fa657.png)  On the other hand, if you have the source in your workspace VS Code will ignore the inlined source und open the source from the workspace (because it is more useful to open the source in an editor where you can actually edit the source).  This means that if you see the inlined source despite the fact that the source is available in the workspace, then you still have a source map issue (and I'm still interested in investigating the problem).
8820|"Wow - ask and ye shall receive! Thanks!  I have not been generating inline source code in my source maps, because it has not been supported. I think per our conversation on vscode-node-debug repo, my latest issue is simply the ""debugger"" statements showing the compiled code. I am going to try a few scenarios to be sure there's really a problem and I understand how it manifests and will file a report then.  But generally speaking I'm thrilled inline source code is supported because it just makes things simpler, particularly when debugging code that's in someone else's control.  Thanks for the incredible work on VS Code in the last few months, it's quickly becoming the most valuable tool in my toolbox."
8821|@alexandrudima What is required is the ability to press down <kbd>Alt + Shift</kbd> (or some other key combination, I'm not sure what the consensus is), drag select between an initial and final position in the code, and end up with a selection of all characters within the bounding box of these two positions. Obviously this is complicated by things like line wrap, but this is the general idea.
8822|~~I have been experimenting a bit and dropping a `jsconfig.json` in my project seems to do the trick and no longer shows these errors. Is that the way to achieve this?~~  I jumped too early. A `jsconfig.json` fixes the first error with the import but not the second one with the export.
8823|Btw, if you install typescript globally, this should be the default location. So VSC could just look there by default.
8824|"@prashaantt I had the same problem, the jsconfig.json fixed it for me, thanks.  To the second problem, It doesn't show an error for me, maybe it's because I have this in my jsconfig.json: `{     ""compilerOptions"": {         ""target"": ""ES6""     },     ""exclude"": [         ""node_modules""     ] }`"
8825|"@tmkbry I have a similar config as yours, plus the `""module"": ""commonjs""` inside `compilerOptions`, but I can't get rid of the squigglies on the export either way.  EDIT: I think ideally the module should be `es6` but `jsconfig.json` reports an error for that, which otherwise is acceptable inside a `tsconfig.json`."
8826|The checks failed probably due to repository not building correctly at the specific moment. How can I rerun checks?
8827|Here is the code:  ``` c# public GameObject[] GetItems(string name){     List<GameObject> items = new List<GameObject>();     foreach(InventoryItem i in inventoryItems){         if(i.itemName == name){             items.Add(i.gameObject);         }     }     return items.ToArray(); }  public GameObject[] GetItems<T>(){     List<GameObject> items = new List<GameObject>();     foreach(var i in inventoryItems){         if(i.GetType() == typeof(T)){             items.Add(i.gameObject);         }     }     return items.ToArray(); } ```  **Note:** the type hinting in the foreach also isn't highlighted.
8828|This issue was moved to OmniSharp/omnisharp-vscode#33
8829|A bit more context: the error `Cannot read property 'kind' of undefined` happens on every keystroke and it does not occur for example in JavaScript or Markdown files .
8830|Hi **@mkosieradzki**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8831|It's 9 Feb 2016 and this problem still exists. Fortunately, this solution (`Electron` -> `Atom` rename and unpacking the `.zip` again) still works. Thanks!
8832|:thumbsup: Middle click already works for pasting the filename to create a new file...
8833|"You make an interesting point about the Git viewlet and not switching back to the Explorer. But, that is a different workflow for me at least. I may be doing a partial commit or I may want to do a Publish after the commit (which I love by the way).  Unlike pressing stop in the debugger, there is no clear end to the source code control workflow.  I suggest we establish a hypothesis and measure it. We can get data on what the workflow is through the product after people stop debugging.  We can measure how many people do ""X"" within some time range (say 30sec) after stopping the debugging session and produce a heat map showing what the common tasks are.  Hypothesis: Most people will switch to the Explorer View after stopping the debug session such that we should automatically switch to the viewlet when pressing Stop, as in Visual Studio.  Timeline: 30 sec, how often people get from Stop to the following events:  Stop -> View Explorer Stop -> Quick Navigation Stop -> Any debugging activity Stop -> Other  Assigning to @SofianHn to crunch the numbers."
8834|Yeah I just saw this in the latest update.  I see the value but it definitely needs some UX love.  As @isidorn stated, it makes the widget way too wide (think split editor scenarios) and when expanded everything looks poorly aligned.  I would considering place that text actually left aligned underneath all the controls, to look more like status text.    I don't have a mock for you unfortunately, but I think @bgashler1 can help you out there.  Or if I have free cycles later this month. ;)
8835|@bgashler1 - can you mock this up and then work with @alexandrudima on this?
8836|@SamVerschueren you can get the right GitHub code coloring for `.editorconfig` files by using the `ini` file type, see?  ``` ini root = true  [*] indent_style = tab  [{package.json,*.yml}] indent_style = space indent_size = 2 ```
8837|@jedmao Thanks :)
8838|Ok, so this works:  ``` js export default function () { } ```  but this doesn't:  ``` js export default () => { } ```  Awesome!
8839|(Perhaps I should leave this issue open, just in case there's anything the Code team can do to make this alt syntax work too.)
8840|:+1:
8841|The launcher script assumes some files/dirs exist. To get it to work under Linux as is, the following symlinks can be created:  ``` bash sudo ln -s <path_to_built_vscode> /usr/share/code ln -s <path_to_repo_with_change>/resources/common/bin/launcher.js <path_to_built_vscode>/launcher.js ```  Exposing code.sh to path and doing this setup will be handled in https://github.com/Microsoft/vscode/issues/2679 and https://github.com/Microsoft/vscode/issues/229
8842|"I saw stuff on Twitter that made me pop in. Object nav is  a set of 4 or 5 keys for directly exploring the object hierarchy of the application.  What exactly object hierarchy means in this case is a bit interesting, but it's not UIA.  NVDA has an internal abstraction over the idea of accessibility object, and browsers are treated specially.  I believe Aria can let you change this, but Aria may not be working very well in Chromium.  The basic keys (on the laptop layout) are shift+nvda+the arrow keys. Left and right for previous and next object, up for go to parent, down for go to children. When it works well and if the application is bad at providing navigation keystrokes, it can certainly be faster.  When the application doesn't provide or provides insufficient keyboard support, it can be a lifesaver.  I would personally expect any intermediate to advanced NVDA user (so, like, everyone who'd use VSCode) to know about and use this feature on a semi-frequent basis. It is worth noting that Aria-label is an interesting case where it doesn't always do what you'd expect.  Simply putting it on stuff will probably work here, but please please please test.  I've seen so many places on the web where people are using Aria-label and it fails to be read at all for stupid reasons that nevertheless don't have good solutions (on the NVDA side of things, don't even get me started on how annoying it is that the Aria spec doesn't say what AT must do). And finally, I don't know if it's a problem here, but I feel like it's worth mentioning.  A lot of the other Visual Studio stuff and a lot of the MS installers use really bad labels in addition to the horrible accessibility on offer.  To give an example which probably doesn't apply, ""Git Commit Text:"" is way better than ""This is the git commit text"" or, god forbid ""Put the git commit text here.""  Syllable minimization is a very important thing, and I see very little attention paid to it in general and especially in other Microsoft developer products (count the ""This button xx"" instances in various installers, my screen reader already tells me ""button"" and ""this"" is redundant...and then the rest of the label just repeats the actual text on the button--also already read). Keep it up. The story for good programming editors for blind programmers is Notepad++, and Notepad++ has a ton of annoying issues.  Everything else is stuff by other blind people and it's all buggy, to put it kindly.  Do a good job here, and the blind people will come at least."
8843|:+1:
8844|Another instance that I can't work around:  ``` js import { connect } from 'react-redux';  const mapStateToProps = (state) => { ... };  class App extends React.Component { ... }  export default connect(mapStateToProps)(App); // here be the relentless squiggly ```  The `export` throws the same error as before: `'export=' can only be used in a .ts file`.
8845|I'm going to discuss VS Code accessibility with someone at MS in a few days, I will certainly bring these points up since they are on the mark :)
8846|The plan for this is to roll this into code.sh in https://github.com/Microsoft/vscode/pull/2650 which will consolidate launch logic across all platforms for bash-compatible terminals.
8847|> This happens in 10.8, and it also happened in the last one before that.  @havremunken by the last one before that you mean 10.7 (insiders) or 10.6?  FYI @dbaeumer
8848|As mentioned in #2596, the correct place for the fix for this to go is [`resources/common/bin/code.sh`](https://github.com/Microsoft/vscode/blob/master/resources/common/bin/code.sh) and have that put in the `PATH` when elected on installation.
8849|The script has been created, moving the OSX portion of this issue to https://github.com/Microsoft/vscode/issues/2859
8850|I think (2) happens on javascript as well (so it might be for all languages)
8851|Sure no problem.
8852|I'm seeing a potentially related issue with SQL files if I highlight some lines and try to indent them with tab.  ![screen recording 2016-02-09 at 03 27 pm](https://cloud.githubusercontent.com/assets/1039369/12929612/b2f7de88-cf41-11e5-9280-9560a9be490e.gif)  This one is strange because, in addition to killing all the text, Command + Z refuses to undo the action!  If I manually indent the first line with 4 spaces and highlight the rest, hitting tab works as expected.
8853|@aeschli I got an expected value error so I removed the last comma. I got passed that but then I don't get the option of the new language in the language mode options and if I select javascript it breaks (the whole highlighting is off). I'm using vs code 0.10.8
8854|"@bpasero I definitely don't see the output you pasted above. I even tried changing my engine from `^0.10.8` to `^0.10.6` to make sure my settings were consistent w/ yours and still no output like that.  Then, I tried changing my `vscode` dev dependency from `^0.11.x` to `0.11.1` like @mattacosta did above and I'm still not seeing your output.  Is there always going to be an engine version consistent with the version displayed in `Visual Studio Code -> Help -> About`?  Lastly, you said there ""was"" a bug. That gave me more qeustions: 1. Does that mean this bug was fixed?    1. Was it fixed in the [February milestone](https://github.com/Microsoft/vscode/milestones/Feb%202016)?       1. How does that help me now or how can I take advantage of that now?       2. Do I need to wait until the February release to use the `^0.11.x` vscode dev dependency? If so, perhaps the January release notes need to be updated to inform others of the same issue. 2. Do you have more details about this bug or can you link me the issue?"
8855|@bpasero there are many file types including typescript, java script, css, less, aspx, cs  ##   Gwyn Judd  -------- Original message -------- From: Benjamin Pasero Date:02/09/2016 22:49 (GMT+12:00) To: Microsoft/vscode Cc: Gwyn Judd Subject: Re: [vscode] Crash when running overnight (#508)  @gwynjuddhttps://github.com/gwynjudd is this a JS only workspace or other file types like PHP included?  ##   Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/508#issuecomment-181786273.
8856|nope. its a default visual code on a default windows 10 fast ring machine that i don't even personal things on, its so default. well other than my PROMPT and Path variables. obviously. Path is just to include PHP so vscode will lint and PROMPT because i was really bored one day.
8857|before the update  ![capture](https://cloud.githubusercontent.com/assets/881944/12930315/31b9d640-cf3d-11e5-87f5-96d6fdf70fa5.PNG)
8858|the variables are a gross pastel with dark+, most of the other themes though seem to skip variables as well.
8859|+1
8860|The commits seem to be successful so far but I keep getting the crash messages
8861|In a Hyper-V Windows Insider guest, I did a clean install of the original setup.exe and then did the upgrade.  There was no problem.  So I uninstalled VSCode on my developer machine and repeated the same process.  The error still showed up. However, when I deleted user/my-account/.vscode and restarted VSCode, everything is fine. I think this is an artifact of an earlier strangeness in .vscode unrelated to the update.  It could be related to a failed attempt I had at compiling VSCode from source.
8862|Same here. Tried to override them but didn't work :/ Kinda annoying. Hope they will fix it very soon. It would be nice to be able to supress warnings from external files
8863|@Tyriar Sounds great! In that case, I'll close this PR and leave it for you guys to merge into the other `code.sh` script.
8864|@jamesqo thanks for the PR!
8865|@nchammas Thats the following issue i think https://github.com/Microsoft/vscode/issues/2829
8866|Oh, good catch!
8867|Having a similar issue with SQL files if I highlight some lines and try to indent them with tab.  ![screen recording 2016-02-09 at 03 27 pm](https://cloud.githubusercontent.com/assets/1039369/12929612/b2f7de88-cf41-11e5-9280-9560a9be490e.gif)  This one is strange because, in addition to killing all the text, Command + Z refuses to undo the action!  If I manually indent the first line with 4 spaces and highlight the rest, hitting tab works as expected.
8868|I've added a sample that illustrates how to use `TextContentProviders` and the `vscode.previewHtml` commands.  Pls see: https://github.com/Microsoft/vscode-extension-samples/blob/master/textdocumentprovider-sample/README.md
8869|@peterbourgon I've just published the extension [rewrap](https://marketplace.visualstudio.com/items?itemName=stkb.rewrap). The readme is a bit hastily put together so hope you can work it out. At the moment it only supports C-style comments (// and /\* ... */) so adding more languages is the next priority. Would appreciate any feedback you have :)
8870|The `vscode` devDependency is for the vscode _node package_. This is not the same as the VS Code application, which is managed separately. So it has nothing to do with any Jan/Feb/whenever release, and is available now.  Also, here's the issue that was fixed in 0.11.1: https://github.com/Microsoft/vscode-extension-vscode/issues/10  Have you tried running vscode's install script from your package.json though?
8871|@jedmao does TabSanity work in vscode? Or are you saying they should add it? Because this behavior is killing me slowly. Is there a work around for this? I care about 1, 2, 3 the most.
8872|It appears this issue has been resolved for a while.  If anyone still has problems, please feel free to reopen.
8873|@jamesmenera, TabSanity does not work in vscode. I'm proposing it be baked into the editor itself. There is no workaround, currently.
8874|@mattacosta I'm aware that `vscode` is just an npm package. My question was concerning the engine setting.  I didn't run vscode's install script from package.json, because I'm not interested in that solution. I'm interested in solutions that don't require adding instructions to my README and work out-of-the-box for future contributors. Now, if you're suggesting I make it a post install script, that might be doable, but the release notes and guides don't say anything about this and I'd prefer to follow the golden path.  That said, I'm going to attempt using the post install script until this project evolves. Thanks for the link to the issue!
8875|Cloned the main branch and built - seeing the source, but not the same files as in the release.  I might be reading the code wrong, but it seems...  `gulp.task('minify-vscode', ['clean-minified-vscode', 'optimize-vscode'], common.minifyTask('out-vscode', false));`  ... is telling gulp-sourcemap to not include the the source map comment for workbench.main, however missing this sounds like Chrome won't know where to get the source from, which would normally I guess be in this missing comment. Is this accurate?
8876|"Actually, while I'm thinking about it, this comment exists to mention @jcsteh.  He might be interested in this, given that VSCode accessibility is the first time I can personally recall Microsoft acknowledging that NVDA exists publicly, as opposed to just saying ""narrator and other assistive technology"" or something to that effect."
8877|"@jameslkingsley What you're describing is standard behaviour for pretty much every editor I've used recently, e.g. Sublime, Atom, GEdit etc.  When you've selected a line and the caret is at the end of that line, pressing delete means ""replace selection with nothing"", with ""replace selection"" being the confusion here I think.  ""Delete line"" is a separate action, you can do that with Ctrl+Shift+k and it will delete the current line your caret is in, or the lines that are in your current selection.  If you wish to delete a line by using the replace selection action, you'll have to move the caret to the start of the line below. The keyboard shortcut for Shift+DownArrow will select a line and move the caret to the start of the line below for example, and you can just press delete and the line is gone.  I'd argue that VSCode just needs better visual cues for line selection, like Atom which does highlight the whole line regardless of it having characters or not. It does show the linebreak marker selected (you can see it in the ""empty"" lines in my screenshot above), but that tends to be easy to miss in large selections."
8878|I will note that I was getting daily plugin crashes _before_ updating to Version 0.10.8.  I'm using the Mac version, btw.  I predominantly code JavaScript, Jade, JSON and HTML pretty much so those are really the only plugins I've exercised on this.  Before the update, a system restart would run clean for at least an hour.  I will also note that I have only 4GB of RAM and that after loading **mongod**, the **mongo shell**, an **npm start** and a **PhoneGap Developer app** it pulls down the available RAM to less than half of that.  It's not outside of the realm of possibilities that the plugin crashes are low-memory related.
8879|Just some clarifications:  > Object nav is  a set of 4 or 5 keys for directly exploring the object hierarchy of the application.  What exactly object hierarchy means in this case is a bit interesting, but it's not UIA.   In this case, it's based on MSAA/IAccessible2, since that's what Chromium exposes. However, NVDA does tweak the tree a bit, particularly if simple review is enabled (which it is by default).  > NVDA has an internal abstraction over the idea of accessibility object, and browsers are treated specially.  For object nav, browsers aren't really treated specially at all. They are for browse mode, but that's an entirely different issue and I suspect irrelevant for Code.  > I believe Aria can let you change this, but Aria may not be working very well in Chromium.  ARIA lets you change the hierarchy using aria-owns. This is now implemented in Chromium, though it was fairly recent; I don't know what version of Chromium you're using here.  > It is worth noting that Aria-label is an interesting case where it doesn't always do what you'd expect.  When you're not dealing with browse mode and you're primarily dealing with interactive controls, aria-label should work as you expect. I'm guessing browse mode isn't used here; it certainly wouldn't make sense to do this.
8880|@OutsourcedGuru, The plugin crashes could be due to a number of reasons and have nothing to do with VS Code - those only have to do with the plugins. The issue that I'm more concerned about here is that how the recovery happens and how VS Code handles itself when a plugin crashes. Plug-ins that crash would ideally be beyond the scope of this repository. :)  PS: I normally run on a system with 16G, I've also used it in VM with just 2GB, and they seem to have worked just fine with the set of extensions that I use. So, I doubt its VSCode - but if you did infact notice something concrete, that would be something to explore futher.
8881|Hi **@colinbate**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
8882|Created a [wiki](https://github.com/Microsoft/vscode/wiki/Requested-Extensions) to capture these. Also will migrate other requests from User Voice.   It would be great if that is a living document for adding extension requests and checking them off. We can pick some off for iteration planning and encourage the community (both in and outside of Microsoft) to pick from that list.
8883|**@colinbate**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
8884|It seems only one check was actually rerun.
8885|Hi **@mkosieradzki**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8886|Hi **@mkosieradzki**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8887|"This is certainly related to my PR #2872 where I fixed a similar issue with JavaScript and TypeScript. The issue is that the language grammar parses the `-` and `>` as separate operators. Therefore they end up in separate `span`s in the editor, so the font can't do its thing.  I don't know much about Rust, but I just quickly tried to fix the arrow in a similar way, and it seems to work. You can try it for yourself by opening this file under your VS Code install:  ``` resources\app\extensions\rust\syntaxes\rust.json ```  (similar location in the application bundle on the Mac)  and on line 305 adding `|->|<=|>=` after the `+`."
8888|Another way we can make it happen is by having the vertical scrollbar take up all the space except on a hover event which makes room for a horizontal scroll bar.  I like this approach as well as the first approach I suggested, but what do you guys think? ![horizontalscrollbars](https://cloud.githubusercontent.com/assets/11839736/12938616/055eb808-cf6b-11e5-9b0e-4f82bee065c2.gif)
8889|## This is my proposal  ![2220-find-and-replace-c](https://cloud.githubusercontent.com/assets/11839736/12939667/c8d8fc66-cf76-11e5-8cb1-847ad4bd3578.gif)  ![2220-find-and-replace-c](https://cloud.githubusercontent.com/assets/11839736/12939614/366ddad6-cf76-11e5-992a-aee6cd0f0b17.png)  ## Compared to current  Notice the space that we could save with this new approach (**206 px**). ![original-vs-design-c](https://cloud.githubusercontent.com/assets/11839736/12939703/427e0a98-cf77-11e5-8242-eabbe13239cd.png)  ## Addressing alignment  We can address alignment problems between index/count and the adjacent buttons by changing the max-width as pictured above.  `.monaco-editor .find-widget .matchesCount { min-width: 46px; }`  Thoughts?
8890|Brilliant Thanks. cant wait.
8891|"Sorry, I realised that I did not mention the necessary postinstall script. I updated the new & noteworthy. Any extension consuming the VS Code npm module 0.11.x needs to add the following to the package.json:  ``` ""scripts"": {     ""postinstall"": ""node ./node_modules/vscode/bin/install"" } ```"
8892|Sorry about not being more specific - I didn't use the insiders version so previous to me would be 10.6.
8893|I'm encountering this same problem after upgrading from node 4.2.3 to 4.2.6.
8894|@alexandrudima This issue is thoroughly discussed here https://github.com/editorconfig/editorconfig-vscode/issues/3
8895|It works!  ``` > EditorConfig@0.2.1 postinstall z:\Documents\GitHub\vscode-editorconfig > node ./node_modules/vscode/bin/install  Detected VS Code engine version: ^0.10.8 Found minimal version that qualifies engine range: 0.10.8 Fetching vscode.d.ts from: https://raw.githubusercontent.com/Microsoft/vscode/0.10.8/src/vs/vscode.d.ts vscode.d.ts successfully installed! ```  Still, I think others could well benefit from this in the release notes, right where it mentions the `^0.11.x` dev dependency.
8896|"@weinand I checked with my colleague and he uses the C/C++ GDB Hardware Debugging plugin `7.0.0.201202111925 org.eclipse.cdt.debug.gdbjtag.feature.group Eclipse CDT`  ![gdbsession](https://cloud.githubusercontent.com/assets/1297882/12941238/b7c7d000-cfd0-11e5-8056-c428cc913d68.gif)  And this is what goes on in the Console (not same session):  ``` (gdb)  398-data-evaluate-expression ArOS100usTimerU32 398^done,value=""5711095"" (gdb)  399-data-evaluate-expression ArOS100usTimerU32 399^done,value=""5729299"" (gdb)  400-data-evaluate-expression ArOS100usTimerU32 400^done,value=""5746632"" (gdb)  ```  As you can see, he starts up the debugging and then it stays in Suspended. Super helpful in embedded projects where you have e.g. current control loops running (in our case motor control) that you can't afford to breakpoint."
8897|this is nodejs/node#4917. Since it has nothing to do with VS Code I'm closing this.
8898|I have the same problem using the `!==` in JS (using Fira Code).  ![image](https://cloud.githubusercontent.com/assets/390540/12941372/af44f09e-cff7-11e5-8f72-e8ffc95caa8c.png)  The `===` by itself works well:  ![image](https://cloud.githubusercontent.com/assets/390540/12941362/970be0c8-cff7-11e5-8516-600aae30bfb7.png)  edit: Oh @colinbate, I just saw your PR — awesome!
8899|"I also encounter this issue on developing my extension mitaki28/vscode-clang#4 ([source](https://github.com/mitaki28/vscode-clang/blob/20072b4322ede6cfe5b8120a24470a6547745292/src/configuration.ts#L39-L47)). Finally I identified its cause.  ## Environment - VSCode: Version 0.10.6, 0.10.8 - OS: Mac OS X 10.9  However, it will occur in any environment because it seems to be a bug of `OutputChannel` implementation.  ## Condition -  ""Output"" pane have never been opened since current vscode instance was launched.  ## Problem  If we execute the following `test.command`:  ``` typescript let chan = vscode.window.createOutputChannel('Test'); vscode.commands.registerCommand('test.command', () => {     chan.append('1');     chan.append('2');     chan.show(); });  ```  then, an ""Output"" pane will be opened and it will show not `12` but `122`.  ## Cause  Firstly, I found that `OutputChannel` is just a frontend of `OutputService` and ""Output"" pane is managed by `OutputEditorInput`.  `OutputEditorInput` shows `OutputService.getOutput()` directly when ""Output"" pane is created ([source](https://github.com/Microsoft/vscode/blob/a07ab40d86b7c8742af782135cd483b722a18bdc/src/vs/workbench/parts/output/common/outputEditorInput.ts#L84)). However it does not consider _queued_ Output.  When `OutputService.append(str)` is called, result of `OutputService.getOutput()` is updated immediately ([source](https://github.com/Microsoft/vscode/blob/6d10f0e9bfec964ccecd77bd7eae38e546359b1d/src/vs/workbench/parts/output/common/outputServices.ts#L90-L104)).  Not only that `OutputService` sends `str` to `OutputEditorInput` after some delay except for first call of `OutputService.append` ([source](https://github.com/Microsoft/vscode/blob/6d10f0e9bfec964ccecd77bd7eae38e546359b1d/src/vs/workbench/parts/output/common/outputServices.ts#L107-L145)).  So the above example works as below:  ``` typescript chan.append('1'); // OutputService.getOutput() == '1', queue == '' // `OutputService` sends '1' immediately because it is first call of `OutputService.append`. // `OutputEditorInput` does nothing because `OutputEditorInput` have not listen `OutputService` yet. chan.append('2'); // OutputService.getOutput() == '12', queue == '2' chan.show(); // `OutputEditorInput` starts listening `OutputService` // ""Output"" pane is created // `OutputEditorInput` shows `OutputService.getOutput()` (== '12') // `OutputService` sends '2' (after some delay) // `OutputEditorInput` receives and appends '2', so it shows '122' ```"
8900|Ctrl + O doesn't work for you?!!
