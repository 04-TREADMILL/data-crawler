21801|@weinand as I understand it the main part of it is https://github.com/Microsoft/vscode/issues/5462 (OS X support for custom terminal launch settings https://github.com/Microsoft/vscode/pull/3495 )
21802|+1
21803|"@Tyriar on a different mac where I have no problem (same OS version) permissions are similar - however I notice that there are 2 files (I have only one install -- the time might be from last update).  ``` srwxr-xr-x  1 luciano  staff  0 May 17 13:14 /var/folders/gb/nxt19fq129d5mrfxt1l2mcc80000gn/T/vscode-8f6c21accac61bf60cabea3163e25b8237afb5af.sock srwxr-xr-x  1 luciano  staff  0 May 17 13:14 /var/folders/gb/nxt19fq129d5mrfxt1l2mcc80000gn/T/vscode-f64e36f52c213b608ac83eae61e61d9ec195606e.sock ```  These files are there even when vscode is not running. On the mac where it does not work instead I have only one file and it disappears when vscode is not running.  The s I believe denotes a socket link -- see man ls under ""The Long Format"" and in wikipeadia https://en.wikipedia.org/wiki/Ls"
21804|:+1:
21805|@m3talsmith this will land in the May release (early June), thanks again! :fireworks:
21806|@bpasero : To track this issue, can we link this to original issue?
21807|@weinand you're right. As told applescript run `cd` and it will be saved in shell history. I just thought it's cleaner I'm going to revert applescript
21808|By analyzing the blame information on this pull request, we identified @SofianHn and @bpasero to be potential reviewers
21809|The focus border also shifts the images a few pixels  ![image](https://cloud.githubusercontent.com/assets/2193314/15346566/39689240-1c6e-11e6-80e6-a02119c7b11d.png)
21810|End result for focus (first) and enabled (second) styles:  ![image](https://cloud.githubusercontent.com/assets/2193314/15346623/caa859ca-1c6e-11e6-9b3c-64651728f425.png)  /cc @bgashler1
21811|Thanks for jumping on it so quickly @Tyriar !
21812|One workaround is to copy the shortcut and use that one instead.
21813|"Works for me immediately after saving for both:  ``` externalTerminal.windowsExec"": ""C:\\Users\\daimms\\Downloads\\cmder\\Cmder.exe"" ```  and  ``` ""externalTerminal.windowsExec"": ""C:/Users/daimms/Downloads/cmder/Cmder.exe"" ```  Not sure why it would work for me and not you... I did find #6466 while trying to repro this though."
21814|https://github.com/electron/electron/issues/4261
21815|https://github.com/electron/electron/issues/2947
21816|Not sure why Cmder doesn't like the cwd, it works when I run `Cmder.exe /start <dir>` via cmd.exe though.
21817|Looks like that is it, no repro on Linux.
21818|Check your settings for excludes:  ![image](https://cloud.githubusercontent.com/assets/900690/15348093/c968ab74-1cc7-11e6-9b24-18b54d4af0dc.png)
21819|A number of days has past without answer on the questions asked. I am thereby going to close this issue to clean up our backlog of issues. Once you can answer on the questions, the issue can be reopened again. Thanks for understanding this process!
21820|@Tyriar and as I've found out, you can't build behind the proxy -- electron-retrieving scripts don't honour npm nor git proxy settings.
21821|@sijad I'm not suggesting to revert the PR to use the AppleScript because that will complicate the launch settings: What do you specify in the setting instead of `Terminal.app`? I think your PR is fine, I just wanted to understand what the PR does and how VS Code's existing behavior will change.
21822|New insight: The problem only occures, when the typescript project (folder) is hosted on the internal harddrive, which is encrypted by bitlocker. When copying the project to a (non-encrypted) usb stick, vscode woks without problems in that location. Also the parallel running gulp watch-compile-serve task is running as expected. Are there known issues for typescript watchers on encrypted drives?
21823|@weinand it's still possible to use AppleScript to lunch Terminal application
21824|@sijad sure, instead of specifying `Terminal.app` in the settings, I can specify an AppleScript based application. But the AppleScript would not be the default and VS Code would not ship with it.
21825|I think this should be in a core package.
21826|@mat-mcloughlin did this work in the end?
21827|Yes it did. Thanks
21828|Looks good, thanks @sandy081 !
21829|+1
21830|@vsccarl please use the issue search to first find duplicates. Thanks.
21831|@sumonto VS Code detects external file changes: in 'autosave' mode it picks up changes silently, in 'manual save' mode it allows you to merge changes with a compare/merge editor on save.  If this doesn't work for you please provide details steps for how to reproduce the problem.
21832|Fixed, please try again. Sorry.
21833|@MichaelT0 python is not part of VS Code but a separate extension. Please file this error against the python extension you are using.
21834|+1
21835|**@niceb5y**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
21836|Waiting for linguistic input.
21837|@sharang1 could you please answer my questions from above.
21838|What time is it can support ?
21839|@Tyriar  What time is it can support ?
21840|@RobertoMalatesta VS Code supports the 'Go to Symbol...' action which allows you to quickly navigate to a method, property inside a typescript file.   ![image](https://cloud.githubusercontent.com/assets/172399/15360689/e2bc68ee-1d0e-11e6-95d2-188ad70c5f5f.png)
21841|Here is one of the best Atom vim plugins https://github.com/t9md/atom-vim-mode-plus
21842|@adriatic thanks for sharing.   > Regardless, it would be nice if the editor, at least, did not generate red squiggly error messages every time I used a language feature it didn't understand.  You can turn off the built-in syntax checks this is documented [here](https://code.visualstudio.com/docs/languages/javascript#_disable-syntax-validation-when-using-non-es6-constructs).  In general, VS code JavaScript support is powered by TypeScript and TypeScript follows the rule to only implement features until they are at stage 3 with TC39.  Pls see https://github.com/Microsoft/TypeScript/issues/2103#issuecomment-182195915.   Actually decorators are supported today. The other ESNext features are on the roadmap https://github.com/Microsoft/TypeScript/wiki/Roadmap.
21843|What do you mean with input method, computer language?
21844|Fixed via 2d052f7
21845|Great find!
21846|This tripped me up today.  It's really confusing for `git checkout` to actually be doing `git checkout -b` when what I'm actually trying to accomplish is checkout a remote branch.
21847|This is related to #3385.  Definitely confusing behavior that will trip people up.
21848|"I'm having trouble with the html code formatting too. Sometimes it seems to work other times it doesn't. I'm specifically using aurelia templates: which look like:   ``` <template>  <require from=""./menu-bar.css""></require>   <div class=""menu-bar"">        <div class=""dropdown"">     <button class=""dropbtn"">File</button>     <div class=""dropdown-content"">       <a href=""#"">Link 1</a>       <a href=""#"">Link 2</a>       <a href=""#"">Link 3</a>     </div>   </div>  </div> </template> ```"
21849|:+1:  a tree version of that for the whole project or folder would be excellent
21850|"EDIT: Sorry!! My fault, I miss configed gulp sourcemaps plugin. Sorry again.  @weinand I'am using vscode 1.1.0 on Windows10, my breakpoint set on a ts file does not get hit. But when I set stopOnEntry to true, vscode can stop at the first statement in the ts file, at this moment, if I set a new breakpoint, the new breakpoint will just work!! I noticed that at the left below corner of debug view, in the BREAKPOINTS window, the breakpoint that can not get hit that I'v set when in editing mode, is displaying `√ main.ts 6 src`, which `src` is correct dir of this file, and the breakpoint that gets hit that I've set in debug mode is displaying `√ main.ts 6 \`.  What would cause this?  My config:  ``` {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/src/main.ts"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": ""default"",             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": true,             ""outDir"": ""${workspaceRoot}/dist""         }, ```  My `tsconfig.json`  ``` {     ""files"": [         ""src/main.ts""     ],     ""compilerOptions"": {         ""noImplicitAny"": true,         ""target"": ""es6"",         ""module"": ""commonjs"",         ""sourceMap"": true,         ""allowJs"": true,         ""outDir"": ""./dist""     } } ```"
21851|@bpasero it looks like there are some methods missing in the code base to do this, http://electron.atom.io/docs/api/auto-updater/.  Are you all copying in some methods to handle the updates or how does that work?  Also as of electron 0.34.0 the electron auto updater is available on windows now.  any thoughts on replacing https://github.com/Microsoft/vscode/blob/b24be3a8cefb387df045d465936285656f2fe44e/src/vs/code/electron-main/auto-updater.win32.ts with it?
21852|@joaomoreno can chime in on the questions.
21853|@isidorn FYI - this is the task I'll work on once your change is in Master.  I'll put this on the June Milestone.
21854|Thanks, didn't know about that. I'll see what other editors do.
21855|@jrieken looks like Sublime and Atom's terminal-plus actually uses <kbd>ctrl</kbd> instead of <kbd>cmd</kbd>. It doesn't look like we do this anywhere in the code yet though in which case it's probably a bit change to allow it.  I might just leave it blank on Mac for now as the [other commonly (but lesser) used shortcuts](https://atom.io/packages/term3) I found conflict with Ubuntu OS shortcuts.
21856|:+1: I love this idea. Currently we don't have real update for extensions, it's just a combination of uninstallation and new installation.  A possible workaround I can come up with for now is storing data to cloud, just like how we handle trace data.
21857|@biij5698 follow #48 to track the issue.
21858|Always run into this issue when pasting large json content into VS Code.  After the window is back alive, try scroll the content up and down, the window will freeze again.
21859|I'll look into it, we haven't tested on openSUSE yet.
21860|This was added a few versions ago:  ``` Visual Studio Code v1.1.0  Usage: code [arguments] [paths...]  Options:   -d, --diff            Open a diff editor. Requires to pass two file paths                         as arguments.   --disable-extensions  Disable all installed extensions.   -g, --goto            Open the file at path at the line and column (add                         :line[:column] to path).   -h, --help            Print usage.   --locale <locale>     The locale to use (e.g. en-US or zh-TW).   -n, --new-window      Force a new instance of Code.   -r, --reuse-window    Force opening a file or folder in the last active                         window.   --user-data-dir <dir> Specifies the directory that user data is kept in,                         useful when running as root.   -v, --version         Print version.   -w, --wait            Wait for the window to be closed before returning.   --list-extensions     List the installed extensions.   --install-extension <extension>                         Installs an extension.   --uninstall-extension <extension>                         Uninstalls an extension. ```  Can you provide OS and if on Linux/OSX run `whereis code` and provide the output?
21861|They're also documented on the website https://code.visualstudio.com/Docs/editor/codebasics#_additional-command-line-arguments
21862|Possibly related: https://github.com/Microsoft/vscode/pull/5116
21863|<kbd>ctrl</kbd>+click was also considered to add an additional cursor on Linux but not done because currently <kbd>ctrl</kbd>+click opens links in the document (#3091).
21864|Hmm, maybe it's just a bug then.  I'm using Arch Linux x86_64 using the [AUR package](https://aur.archlinux.org/packages/visual-studio-code/) for visual-studio-code. The output of `whereis visual-studio-code` (which is the name it was installed as) gives: `visual-studio-code: /usr/bin/visual-studio-code`  EDIT: `whereis code` gives `code: /opt/visual-studio-code/bin/code` although `code` is not in my $PATH.  After trying most of the above options, it looks like none of them are writing to stdout or stderr, `--version` and `--help` open vscode as if no options were given, and by default, vscode does not return immediately as I would expect should happen without the `-w` option. `diff`, `-r`, and `-n` seem to work as expected.  Here is the about information given from Help -> About in vscode: Version 1.1.1 Commit def9e32467ad6e4f48787d38caf190acbfee5880 Date 2016-05-13T13:38:00.094Z Shell 0.37.6 Renderer 49.0.2623.75 Node 5.10.0
21865|I installed openSUSE Leap 42.1 with Gnome on VirtualBox, then downloaded the rpm and used the YaST2 GUI to install it:  ![image](https://cloud.githubusercontent.com/assets/2193314/15371225/59085988-1cef-11e6-9f9a-ea9c28ce85ea.png)  `code` seems to work fine:  ![image](https://cloud.githubusercontent.com/assets/2193314/15371246/705eb910-1cef-11e6-9db9-45de9b46c448.png)  Did you install git in some strange way and/or are you disconnected from the internet?
21866|The problem is likely because you're using an unofficial package that's not configured correctly. I'm guessing `/usr/bin/visual-studio-code` points at `<path>/code` instead of `<path>/bin/code`, that's likely how you fix it.  Some command line options will work, some that are evaluated before electron is touched (like `--help`, `--version`) however won't.
21867|Ah, that seems to work. Thanks! I'll fix the AUR package for it as well.
21868|@Lindenk cheers. Is there something I could do to help improve the quality of the package? I'm not too familiar with Arch Linux/AUR.
21869|Original Standard setting no modifications. 1. Open test.txt in Vim 2. Open test.txt in VS Code 3. Use vim to add 2 lines  test line test line 4. Save file in vim  5. VS Code automatically loads the changes 6. Go back to vim 7. Delete the 2 add lines 8. Save file in vim 9. Select back VS Code. 10. The lines are not deleted, or the file is not autoloaded.         In this case I did not modify the file using VS.
21870|It looks like it was just a bug in the install script for the package, but thanks for the offer. The AUR is essentially just a community repository of build scripts for software that isn't in the offical repository, so, as long as the script builds the package correctly and has the correct dependancies, it should work as expected.
21871|@Lindenk the problem is if it's building from the vscode repository, it won't build vscode in full as there's a small portion of the configuration that's closed. Would the AUR package be able to leverage a properly packaged .tar.gz file? If so in what format should it be?
21872|@Lindenk I'd love for installs on Arch Linux to be just as easy as deb/rpms are via the website.
21873|@Lindenk I created https://github.com/Microsoft/vscode/issues/6495, if you could provide any insight on that issue it would be helpful :)
21874|The build script for the package downloads the binary from [here](https://az764295.vo.msecnd.net/stable/https://az764295.vo.msecnd.net/stable/def9e32467ad6e4f48787d38caf190acbfee5880/VSCode-linux-ia32-stable.zipVSCode-linux-x64-stable.zip) which seems to be the official build. Then it's extracted, installed and symlinked it to the (hopefully) correct locations. The script itself is managed by the community and is generally the standard for non-official Arch Linux packages. If you'd like to skim the script it's available [here](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=visual-studio-code), but, other than the package getting a large amount of community support and being taken on by an official Arch Linux maintainer, I think keeping it as a package on the AUR is the most convenient way to provide vscode to the Arch Linux community.
21875|@Lindenk ok using VSCode-linux-x64-stable.zip should be relatively safe, you're just missing out on the post/pre install stuff in the deb/rpms files (mainly just the symlink at this point): - https://github.com/Microsoft/vscode/tree/master/resources/linux/debian - https://github.com/Microsoft/vscode/tree/master/resources/linux/rpm  We're totally open to contributions if a .tar.gz that contained some install script would be better for example.
21876|To clarify: the community packages are awesome, I just want to make sure the heavy lifting is done on our build system so things like this issue are avoided in the future :smiley:
21877|I can reproduce this problem with VS Code 1.1.1 on OS X if I open the file in VS Code without a workspace, e.g. with `code test.txt` from the command line. If I open the enclosing folder in VS Code and then select 'test.txt' I cannot reproduce.  @sumonto Are you opening 'test.txt' as a single file (VS Code has violet status bar) or as a file in a workspace (blue status bar)?
21878|As long as a standard compressed build is provided (as it currently is as a .zip achive), a package can be easily maintained by the Arch Linux community. The package is located [here](https://aur.archlinux.org/packages/visual-studio-code/) though and, if there are any breaking changes to the way vscode should be installed, leaving a comment or contacting the maintainer of the package would be helpful.  Also, as someone has pointed out in the comments for the package, building from source would be prefered by some members of the community and if there would be any problems in doing so pointing them out would also be helpful.
21879|As a single file without any workspace.   Thanks  ``` _____________________________ ```  From: Andre Weinand notifications@github.com Sent: Wednesday, May 18, 2016 12:44 PM Subject: Re: [Microsoft/vscode] VS Code to detect and notify if file modified outside of VS Code. (#6440) To: Microsoft/vscode vscode@noreply.github.com Cc: sumonto sg1000@hotmail.com, Mention mention@noreply.github.com  I can reproduce this problem with VS Code 1.1.1 on OS X if I open the file in VS Code without a workspace, e.g. with code test.txt from the command line. If I open the enclosing folder in VS Code and then select 'text.txt' I cannot reproduce.  @sumonto Are you opening 'test.txt' as a single file (VS Code has violet status bar) or as a file in a workspace (blue status bar)?     — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub
21880|@jmzagorski do you have an files.exclude filter in your settings file that hides *.js files?
21881|Instead of showing an annoying warning, the drag-and-drop interaction could implement a larger hysteresis which forces the user to drag the mouse at least 30 pixels before a move operation is detected.
21882|@Lindenk unfortunately some of our build process needs to remain closed at least for the time being as it integrates with our private CI system and build servers. Since it's an electron app however, building from source is primarily just minifying and optimizing javascript (using a bunch of npm modules). I'm curious about the reasons people would want to be able to build from original source when pretty much all of it is available at https://github.com/Microsoft/vscode?  I'll be sure to ping you if I fiddle with things that may affect the package.
21883|Well, thanks for the help and interest! Usually these kinds of problems are pretty rare, but ultimately I would expect an install script to be difficult to maintain on your end in case something Arch Linux related causes breaking changes. I'll post a link to the other issue in the IRC in case anyone else in the community has some better input on the subject.
21884|@isvforall your snippet works fine for me in VS Code 1.1.1 with node 5.11.0:  ![2016-05-18 22-03-36](https://cloud.githubusercontent.com/assets/1898161/15373177/8d5c25ca-1d44-11e6-98d2-b6dc84878a57.png)  (BTW, the Map is empty, so it cannot show any content)  What version of node are you using?
21885|The reason people would like to build from original source is to use different options for a build, and to target specific architectures or toolchains. There may be an architecture that you have not built for that somebody wishes to maintain the project for.
21886|I cannot reproduce this with VS Code 1.1.1 on Windows 10. What is the extension of the newly created document?
21887|@sumonto VS Code has no builtin functionality for C/C++ intellisense. What extension did you install for C/C++ support? If you have a C/C++ extension installed but it does not show intellisense please file a bug against that extension.
21888|Forgot to mentionned :  My tsc is version 1.8.9
21889|@sandy081 I'm not seeing this in VS Code 1.1 on OS X (probably because I use a different keyboard layout). Who is stealing the Cmd + ` shortcut?
21890|I am using C/C++ Complete from Microsoft on OS X  Date: Wed, 18 May 2016 13:17:49 -0700 From: notifications@github.com To: vscode@noreply.github.com CC: sg1000@hotmail.com; mention@noreply.github.com Subject: Re: [Microsoft/vscode] Unable to see intellisense on C/C++ file. (#6499)  @sumonto VS Code has no builtin functionality for C/C++ intellisense. What extension did you install for C/C++ support?  If you have a C/C++ extension installed but it does not show intellisense please file a bug against that extension.  — You are receiving this because you were mentioned. Reply to this email directly or view it on GitHub
21891|"![Terminal](https://cloud.githubusercontent.com/assets/10746682/15373731/42c7e6f4-1d47-11e6-9cd8-07ba1299cda9.png)  Here is the predefined keyboard short-cut  { ""key"": ""cmd+`"",                 ""command"": ""workbench.action.terminal.toggleTerminal"" },  Bad thing is that, even if I over-ride this with other shortcut say ctrl+` the previous one is still not released."
21892|@weinand I think `Map` should show `__proto__ : Map {}` like `__proto__ : Object {}` for empty object. My node version is 6.0.0
21893|@kevr related: https://github.com/Microsoft/vscode/issues/6442 :P  Thanks for the explanation, I'll see if we can improve the situation.
21894|Hi, I'm the maintainer of the linked Arch Linux package. I actually prefer the official zip archive, it lets me avoid lots of unnecessary build dependencies. There is also another package that builds from source; some people seem to prefer that.  Anyway, the current zip file is fine but as @Lindenk said, if you could somehow publish a list of breaking changes _before_ release, that would be great. In the past, various binaries and images moved directories or went from upper case to lower case without any heads up and it broke the PKGBUILD.
21895|@weinand There is already a bug filed for this  - https://github.com/Microsoft/vscode/issues/6481  Dup of https://github.com/Microsoft/vscode/issues/6481
21896|@isvforall the node debugger protocol does not return **proto** for Set and Map.
21897|@sandy081 that's the new integrated terminal (that is only visible in the alpha build).
21898|@weinand I've just tested with node v5.11.0, `Set` shows own content, but it doesn't work for node v6.0.0
21899|Thanks for chiming in @dcelasun, I wasn't aware of the Arch Linux package until now so it was impossible to notify you :P  I think this issue will go towards solving the issue of notification as after these discussion I'd like to do the following: 1. Distribute a .tar.gz package and deprecate the Linux .zip (as per platform conventions) 2. Create a .pkg.tar.gz so that your `PKGBUILD` can defer the installation logic to the `.INSTALL`  That way the vscode repository contains the logic for installing on Arch Linux, so I'll be able to change it and test if there are refactors, new post install steps, etc. This will also save a bunch of duplication on your part if you wanted to support the insiders build too. @dcelasun I'm interested in your thoughts on this plan.  FYI the improving open source builds discussion is captured in https://github.com/Microsoft/vscode/issues/3029
21900|@isvforall yes, VSCode 1.1.1 does not yet support node 6.x but VS Code - Alpha does.
