7601|> [...] the intellisense issue is due the backspace extension. It takes over the backspace keybinding and make the corresponding modification. How does intellisense handle the backspace? Not as a keybinding, right?  The keybinding is done [here](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/suggest/browser/suggest.ts#L220).
7602|:+1:
7603|:+1:
7604|-1 to fix this in Jan
7605|@Tyriar no it is there, use npm 2 and everything just works fine. are you saying you dont have this file in vscode-api-tests? what version of vscode module do you have in vscode-api-tests/node_modules?
7606|Agree!
7607|[CPU-20160128T145132.cpuprofile.zip](https://github.com/Microsoft/vscode/files/108259/CPU-20160128T145132.cpuprofile.zip)
7608|@joaomoreno fyi
7609|Yeah, always has been like that. I am currently not detecting focus changes from one preview to the other, only back to the workbench.
7610|Guys just add NODE_TLS_REJECT_UNAUTHORIZED=0 in your system variables =D restart vscode.  now workin for me i get from where http://stackoverflow.com/questions/33820733/error-unable-to-verify-the-first-certificate-how-to-trust-all-certificates
7611|@egamma fyi would be interesting if you get a outline now of the elements in our UI, I associated the following landmarks: - `main` for the editor part - `navigation` for the activity part - `complementary` for the panel and side bar - `contentinfo` for the status bar
7612|"@bpasero Just added an option: `""ariaLabel""`. Can you please adopt it in the workbench editors?  Here is the message I get in Visual Studio:  ![image](https://cloud.githubusercontent.com/assets/5047891/12646432/6113686e-c5d0-11e5-8251-14c75f1f99d8.png)  I would not go with such a long message. Maybe [editor name|file name] + 'text editor'?"
7613|@dbaeumer Moving this to Feb given the current workaround for Salsa.
7614|This issue was moved to Microsoft/TypeScript#6691
7615|These are already missing in the corresponding response from the tsserver. Moving to TypeScript
7616|Since node is commonjs you need to add a jsconfig.json and define the module type commonjs.  It works for me once I add a jsconfig.json in your setup.
7617|This issue was moved to Microsoft/TypeScript#6692
7618|This is caused by us rendering the strings as markdown and the description starts with a '-'.   Change the description to (no dash after name) then the hover is rendered properly. `@param {string} name The name of the person.`  This also looks like the suggested style, see http://www.2ality.com/2011/08/jsdoc-intro.html
7619|Where can I get brutalo?
7620|Happened again (no sleep-wake cycle):  I added a new folder to the repo, made a commit, did a git pull (which probably did a rebase) and then a git push  ``` [15:02:19] 'watch-client' errored after 31 min [15:02:19] Error: EISDIR, open 'c:\Alex\src\vscode\out\vs\editor\contrib\accessibility\browser'     at Error (native) ```
7621|The proposal `getNa` is not helpful and it should not be proposed, even when it is an identifier at this point.  We have changed the icons in the proposal to distinguish inferred and proposal better. ![proposal2](https://cloud.githubusercontent.com/assets/172399/12647353/011b9b16-c5d5-11e5-814b-686a8e1e4ea3.png)  ![completion](https://cloud.githubusercontent.com/assets/172399/12647278/a350504e-c5d4-11e5-8ef7-4ac8af636622.png)  Moving to Salsa
7622|This issue was moved to Microsoft/TypeScript#6693
7623|there you go [language-brutalo.zip](https://github.com/Microsoft/vscode/files/108309/language-brutalo.zip)
7624|@bpasero it was definitely not there, only `compile` was in that dir. I can check the version tonight.
7625|Giving bug label to get it in verification
7626|I am not sure we should announce the file name as part of the editor, we should clarify this is what others do (why is VS not?) and then we can add it. For now I added the following labels: - readonly editor (e.g. a file on the index): Readonly text editor - writeable editor for untitled file: Untitled file text editor - readonly diff editor: Readonly text diff editor - writeable diff editor: Text diff editor - writeable file: Text file editor - output panel: Output panel
7627|Giving bug label to get it in verification queries
7628|btw - I suspect event with [those](https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/tree/browser/treeModel.ts#L163) tiny objects to be a source of garbage (seen when recording heap allocations)
7629|Make sure its version is 0.11.0
7630|This would be great!
7631|Closing, people are tired :)
7632|:+1:
7633|"Maybe just have the inital `launch.json` attach configuration generated with   ``` ""localRoot"": ""${workspaceRoot}"" ```"
7634|Works, but found https://github.com/Microsoft/vscode/issues/2495
7635|Note that you are editing a document with no schema associated. In that case we look for similar nodes and give these as proposals. I fixed that the value of the currently edited property is no longer proposed. There is still issue #2496 that adds funny proposal.  In the context of a Azure RM Deployment template you should have a schema association.
7636|![jan 28 2016 16 17](https://cloud.githubusercontent.com/assets/1794099/12648528/b6eb5526-c5da-11e5-987c-7e5a45fe1534.gif)  there you go
7637|@bpasero I made you a reviewer
7638|@isidorn I can't see any weirdness. Can you please provide some steps. I tested ts and js and they behave the same. Both honoring indent setting.  Please be aware that if a indent of for example 4 spaces exist and you have insert tab and tab size > 4 then format on type from TS will stil insert 4 spaces to align the code correctly.
7639|``` var t = {   name: isidor, // this line gets indented all the way to the start once I press enter after name property } ```
7640|One idea is to use `npm@3` on the build machines to try to reduce node module nesting.
7641|@tinganho the mounted file system shouldn't make a difference. Does this work for you if you take the minimal tsconfig.json I used ?
7642|> That's fine for languages where we have no sophisticated completion processor, but looks bad for languages that pretend to have a 'smart' completion processor.  Well, I love it in TypeScript even tho it's smart. Textual completion proposes variable names, completes in comments and in strings, etc. Such a flag should only be used when having great confidence, like in member completion.   One option will be to add a `isComplete` flag to the `CompletionList` tho that's a big hammer. I can image some smart extension wanting to add quick fixes as completion proposals - like _add method_ when doing unsuccessful member completion. We have to make sure we don't disable such scenarios with such a hammer.
7643|Thanks :+1:
7644|Nice solution. Merged.
7645|To verify check the documentation for tasks.json. There is now a sentence at the beginning addressing this.
7646|tslint should have not been in there to begin with - I have updated `vsce` in the hope it doesn't contain dev-dependencies
7647|There is nothing we can do about this. Adding verified label
7648|Dup of #2320
7649|Dup of #2320
7650|Setting verified label. Issue got moved to TS.
7651|Setting verified label. Close approved by creator.
7652|Fixed in `distro`
7653|`tslint` doesn't even seem to be a dev dependency as per [Omnisharp/Omnisharp-vscode](https://github.com/Omnisharp/Omnisharp-vscode). Maybe clean your `node_modules` folder and run `npm install` from scratch?
7654|That sounds excellent.
7655|Debt week.
7656|Same happens for TS.
7657|yeah - it seems like vsce skips dev dependencies instead of taking only dependencies
7658|Microsoft/vscode-vsce#58
7659|I added a completion proposal for keys in properties if there is no scheme. If there is a scheme we know all the properties and it would be strange to offer a different property. I was also looking at support for values, but the completion proposal would show up all the time, even for stuff like true and false. Could be useful, but I have to look at that another time (not in the endgame)
7660|@dbaeumer I think it only happens on `tsx` files. Check the `autobind` function below:  (I edit and save and an error is not reflected. I change tab and input some keys and the error is appearing.)  ![jan 28 2016 23 55](https://cloud.githubusercontent.com/assets/1324476/12649686/a1e66694-c61a-11e5-8ae3-8b43827bcb78.gif)
7661|Nice, I like ${file}
7662|@jrieken steps?
7663|The URL attribute is no longer required. If you have a scheme you can provide the URL as scheme id or not at all. In that case a internal identifier is used.
7664|:+1: and spaces to tabs please
7665|"""Show Details"" resulted in this:  ``` Exception Name: NSRangeException Description: -[NSTaggedPointerString getCharacters:range:]: Range {0, 13} out of bounds; string length 1 User Info: (null)  0   CoreFoundation                      0x00007fff9b678ae2 __exceptionPreprocess + 178 1   libobjc.A.dylib                     0x00007fff9251af7e objc_exception_throw + 48 2   CoreFoundation                      0x00007fff9b67898d +[NSException raise:format:] + 205 3   CoreFoundation                      0x00007fff9b613aba -[NSTaggedPointerString getCharacters:range:] + 394 4   AppKit                              0x00007fff8c0f4bbf __55-[NSTextInputContext handleTSMEvent:completionHandler:]_block_invoke718 + 150 5   AppKit                              0x00007fff8c0f7ad1 -[NSTextInputContext(NSInputContext_WithCompletion) attributedSubstringForProposedRange:completionHandler:] + 201 6   AppKit                              0x00007fff8c0f4abb __55-[NSTextInputContext handleTSMEvent:completionHandler:]_block_invoke708 + 113 7   AppKit                              0x00007fff8c0eedda -[NSTextInputContext tryHandleTSMEvent_attributedSubstringForProposedRange_withContext:dispatchCondition:dispatchWork:continuation:] + 101 8   AppKit                              0x00007fff8c0f49ce __55-[NSTextInputContext handleTSMEvent:completionHandler:]_block_invoke702 + 517 9   AppKit                              0x00007fff8bac3f2f -[NSTextInputContext handleTSMEvent:completionHandler:] + 2429 10  AppKit                              0x00007fff8bac3546 _NSTSMEventHandler + 324 11  HIToolbox                           0x00007fff8d98f7be _ZL23DispatchEventToHandlersP14EventTargetRecP14OpaqueEventRefP14HandlerCallRec + 1231 12  HIToolbox                           0x00007fff8d98ec48 _ZL30SendEventToEventTargetInternalP14OpaqueEventRefP20OpaqueEventTargetRefP14HandlerCallRec + 404 13  HIToolbox                           0x00007fff8d98eaab SendEventToEventTargetWithOptions + 43 14  HIToolbox                           0x00007fff8d9e3f7d SendTSMEvent_WithCompletionHandler + 417 15  HIToolbox                           0x00007fff8db96105 __SendTextInputEvent_WithCompletionHandler_block_invoke + 586 16  HIToolbox                           0x00007fff8db943fd SendTextInputEvent_WithCompletionHandler + 1228 17  HIToolbox                           0x00007fff8dc00474 -[IMKInputSession _postEvent:completionHandler:] + 184 18  HIToolbox                           0x00007fff8dc0ff2a -[IMKInputSession _copyUniCharsForRange:intoBuffer:ofLength:completionHandler:] + 533 19  HIToolbox                           0x00007fff8dc107ab -[IMKInputSession _coreAttributesFromRange:whichAttributes:completionHandler:] + 332 20  HIToolbox                           0x00007fff8dc127f9 -[IMKInputSession attributedSubstringFromRange:completionHandler:] + 205 21  HIToolbox                           0x00007fff8dc02ff5 __61-[IMKInputSession imkxpc_attributedSubstringFromRange:reply:]_block_invoke + 542 22  CoreFoundation                      0x00007fff9b5884ac __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 12 23  CoreFoundation                      0x00007fff9b57a165 __CFRunLoopDoBlocks + 341 24  CoreFoundation                      0x00007fff9b579ecb __CFRunLoopRun + 2347 25  CoreFoundation                      0x00007fff9b579338 CFRunLoopRunSpecific + 296 26  HIToolbox                           0x00007fff8dbea588 -[IMKClientXPCInvocation invocationAwaitXPCReply] + 444 27  HIToolbox                           0x00007fff8dbf1dce __49-[IMKInputSession handleEvent:completionHandler:]_block_invoke_2494 + 1845 28  HIToolbox                           0x00007fff8dbf117a __49-[IMKInputSession handleEvent:completionHandler:]_block_invoke_2451 + 680 29  HIToolbox                           0x00007fff8dbd7568 -[IMKClient switchedInputMode:completionHandler:] + 418 30  HIToolbox                           0x00007fff8dbefed4 -[IMKInputSession tryHandleEventSwitchedInputMode:eventWasHandled:continuationHandler:] + 133 31  HIToolbox                           0x00007fff8dbf0e8f __49-[IMKInputSession handleEvent:completionHandler:]_block_invoke450 + 193 32  HIToolbox                           0x00007fff8dbf0c9a __49-[IMKInputSession handleEvent:completionHandler:]_block_invoke + 373 33  HIToolbox                           0x00007fff8dbfca23 -[IMKInputSession _eventIsOn:completionHandler:] + 1886 34  HIToolbox                           0x00007fff8dbf0498 -[IMKInputSession handleEvent:completionHandler:] + 895 35  HIToolbox                           0x00007fff8dba3a29 IMKInputSessionProcessEventRefWithCompletionHandler + 128 36  HIToolbox                           0x00007fff8dba2ee1 InputMethodInstanceProcessEventRef_WithCompletionHandler + 109 37  HIToolbox                           0x00007fff8db9374f __TSMEventToInputMethod_WithCompletionHandler_block_invoke + 124 38  HIToolbox                           0x00007fff8db97632 __SendTSMDocumentLockEvent_WithCompletionHandler_block_invoke + 95 39  HIToolbox                           0x00007fff8d9e6b41 ___ZL23DispatchEventToHandlersP14EventTargetRecP14OpaqueEventRefP14HandlerCallRec_block_invoke + 108 40  AppKit                              0x00007fff8bac3a3c -[NSTextInputContext handleTSMEvent:completionHandler:] + 1162 41  AppKit                              0x00007fff8bac3546 _NSTSMEventHandler + 324 42  HIToolbox                           0x00007fff8d98f7be _ZL23DispatchEventToHandlersP14EventTargetRecP14OpaqueEventRefP14HandlerCallRec + 1231 43  HIToolbox                           0x00007fff8d98ec48 _ZL30SendEventToEventTargetInternalP14OpaqueEventRefP20OpaqueEventTargetRefP14HandlerCallRec + 404 44  HIToolbox                           0x00007fff8d98eaab SendEventToEventTargetWithOptions + 43 45  HIToolbox                           0x00007fff8d9e3f7d SendTSMEvent_WithCompletionHandler + 417 46  HIToolbox                           0x00007fff8db93686 TrySendLockEvent_BeforeEventToInputMethod_WithContinuationHandler + 351 47  HIToolbox                           0x00007fff8db934c3 TSMEventToInputMethod_WithCompletionHandler + 154 48  HIToolbox                           0x00007fff8db93409 TSMEventToKeyboardInputMethod_WithCompletionHandler + 127 49  HIToolbox                           0x00007fff8d9e348f TSMKeyEvent_WithCompletionHandler + 657 50  HIToolbox                           0x00007fff8d9e31c5 __TSMProcessRawKeyEventWithOptionsAndCompletionHandler_block_invoke_4 + 251 51  HIToolbox                           0x00007fff8d9e3033 __TSMProcessRawKeyEventWithOptionsAndCompletionHandler_block_invoke_3 + 325 52  HIToolbox                           0x00007fff8d9e2d71 __TSMProcessRawKeyEventWithOptionsAndCompletionHandler_block_invoke_2 + 261 53  HIToolbox                           0x00007fff8d9e2b3a __TSMProcessRawKeyEventWithOptionsAndCompletionHandler_block_invoke + 253 54  HIToolbox                           0x00007fff8d9e21f0 TSMProcessRawKeyEventWithOptionsAndCompletionHandler + 3199 55  AppKit                              0x00007fff8c0f5f33 __61-[NSTextInputContext _handleEvent:options:completionHandler:]_block_invoke955 + 131 56  AppKit                              0x00007fff8bac1d81 -[NSTextInputContext tryTSMProcessRawKeyEvent:dispatchCondition:setupForDispatch:furtherCondition:dispatchWork:continuation:] + 131 57  AppKit                              0x00007fff8bac1ad3 -[NSTextInputContext _handleEvent:options:completionHandler:] + 1266 58  AppKit                              0x00007fff8bac15a6 -[NSTextInputContext handleEvent:] + 109 59  AppKit                              0x00007fff8bac14af -[NSView interpretKeyEvents:] + 204 60  Electron Framework                  0x00000001034dc1c2 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 7506546 61  Electron Framework                  0x00000001034dbc55 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 7505157 62  Electron Framework                  0x000000010496d1ce _CTFontManagerUnregisterFontForData + 19205790 63  AppKit                              0x00007fff8bffc715 -[NSWindow _reallySendEvent:isDelayedEvent:] + 2108 64  AppKit                              0x00007fff8b954735 -[NSWindow sendEvent:] + 517 65  Electron Framework                  0x0000000102d13711 _ZN4base17scoped_nsprotocolIP6NSMenuEC2ES2_ + 641 66  AppKit                              0x00007fff8b95157b -[NSApplication sendEvent:] + 4382 67  Electron Framework                  0x0000000102cfd90b _ZN4base8internal15RunnableAdapterIMN4atom12LoginHandlerEFvvEE3RunEPS3_ + 187 68  AppKit                              0x00007fff8b88403a -[NSApplication run] + 796 69  Electron Framework                  0x0000000102dfdb21 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 304081 70  Electron Framework                  0x0000000102dfd13c _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 301548 71  Electron Framework                  0x0000000102e33cc3 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 525683 72  Electron Framework                  0x00000001032f334b _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5503995 73  Electron Framework                  0x00000001032f3285 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5503797 74  Electron Framework                  0x00000001032f5732 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5513186 75  Electron Framework                  0x00000001032ef5df _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5488271 76  Electron Framework                  0x00000001032794dc _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5004684 77  Electron Framework                  0x0000000103278b36 _ZN4base8internal30DstRangeRelationToSrcRangeImplIilLNS0_21IntegerRepresentationE1ELS2_1ELNS0_26NumericRangeRepresentationE0EE5CheckEl + 5002214 78  Electron Framework                  0x0000000102c7e84d AtomMain + 77 79  Electron                            0x0000000102c78e56 main + 38 80  libdyld.dylib                       0x00007fff8aa455ad start + 1 ```"
7666|open twice the same CS file, while things start to load, change on editor to another non CS file. should not throw
7667|This is a feature request which does not even appear to work in chrome and sublime text. Moving it to the backlog
7668|We should take this to UX meeting.
7669|Very related to https://github.com/Microsoft/vscode/issues/2500
7670|(needs UX thinking)
7671|@aeschli I believe this broke some tests.
7672|"@erichocean @mathiasvr There is indeed a difference between 0.10.4 and 0.10.5  The difference is that starting with 0.10.5 we have code in that reverts a questionable feature implemented by Chromium only on the mac -- [B.2.4 Optionally fixed virtual key codes](https://www.w3.org/TR/DOM-Level-3-Events/#h-optionally-fixed-virtual-key-codes). This is in the w3c spec to support ""legacy content expecting US-English keyboard layout"", which is not the case with VS Code. We had to revert this feature because it caused keyboard input to be unreliable -- please see #1302 for an example on how this issue manifests itself.  I have checked on @isidorn mac that we do the right thing. i.e. when you open the default keybindings we inform that you must press `cmd+z` to get the comment line toggle. ![screen shot 2016-01-28 at 17 37 45](https://cloud.githubusercontent.com/assets/1926584/12651208/e9b54d58-c5e5-11e5-9a6a-373c2e286158.png)  Please read further about different keyboard layouts in the documentation https://code.visualstudio.com/docs/customization/keybindings#_keyboard-layouts  Also, what would be needed to give a better user experience would be to be able to contribute keybindings based on keyboard layouts as asked in #1240"
7673|"@dbaeumer I can reproduce on Windows 10. Here are some things I see that are weird: - it reproduces only once I open a TS file, so I speculate TS-Server locks the file - it does not reproduce in 0.10.7-dev - it does also not reproduce for me when I run 0.10.6 ""out of dev""  I am puzzled what kind of difference it could make to run 0.10.6 built or ""out of dev"" with regards to file locking."
7674|related to #2490
7675|@bpasero please assinge to someone to verify
7676|"The problem is, your extension registers the same extension as the built-in JavaScript extension under a different language id. Since the December release we have a better Javascript grammar that also supports ES6. If you still want to replace the grammar, all you have is an section 'grammar' Note that the built-in JavaScript has id `javascript`  ``` json {     ""name"": ""js-next"",     ""displayName"": ""Javascript Next"",     ""description"": ""Javascript Next Highlighting"",     ""version"": ""0.0.1"",     ""publisher"": ""ricmed205"",     ""engines"": {         ""vscode"": ""^0.10.1""     },     ""categories"": [         ""Languages""     ],     ""contributes"": {         ""grammars"": [{             ""language"": ""javascript"",             ""scopeName"": ""source.js"",             ""path"": ""./syntaxes/js.tmLanguage""         }]     },     ""extensionDependencies"": [         ""vscode.javascript""     ], } ```"
7677|duplicate of #2342
7678|I'm curious why there's so much pushback on implementing tabs. Technically it isn't difficult and there's already working files implemented; why not both and let the users decide?   This sounds almost like spaces v. tabs, 2.0
7679|I debugged it and this is a tsserver behavior. When pressing enter after Isidor, VSCode inserts the right indention but the tsserver returns and edit that deletes that indention. IMO the tsserver should be smart and if Isidor is ended with , adjust the indention since there is a high likelihood that the user inserts another property.
7680|This issue was moved to Microsoft/TypeScript#6700
7681|As puzzles as I am :-). As said today I was not able to reproduce this in the upcoming 0.10.7-dev build with the identical tsserver bits. When testing under 0.10.6 I noticed that the first file the tsserver reads get locked. But I have no explanation for it.  @bpasero you mentioned today that you disabled asar support. Could it be that asar support is still on in 0.10.6 when using code.exe as a node environment and in 0.10.7 it is off. That could be an explanation for the behavior.
7682|+1
7683|Not working for me. See screen shot:  ![capture](https://cloud.githubusercontent.com/assets/1931590/12657437/97e236a8-c603-11e5-8dd3-7248680eba91.png)  ![capture](https://cloud.githubusercontent.com/assets/1931590/12657480/c6c9122a-c603-11e5-811f-5f93f1e99c7e.png)
7684|Verified as duplicate
7685|No ping received. Closing as verified.
7686|I got a successful dump of around 300MB used by the --renderer process. It crashed 10 seconds after I took the dump.  It seems the bulk of the usage is in the DOM tree.  https://www.dropbox.com/s/dk5exyke3fqgahk/VS.heapsnapshot?dl=0  Hope this helps.
7687|![image](https://cloud.githubusercontent.com/assets/6461412/12658754/40b7ea82-c60b-11e5-8207-3286b5f3dd43.png)
7688|![image](https://cloud.githubusercontent.com/assets/6461412/12658739/251f25f6-c60b-11e5-8595-203fe57eadd4.png)
7689|Hi **@waderyan**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
7690|@dbaeumer What build are you?
7691|Just tried it and it works for me with your script, I think a1bd50f63fd8185a13495ff3d4c67396109e4e71 fixed this too.
7692|I have just tried running the following script 6 times until I got 100% CPU in task manager:  ``` javascript var n = 0; for (var i = 0; i < Math.pow(2,32); i++) {     if (i % 10000000 === 0) {         console.log(i, n);     }     n = (n + i) % 133337; } ```  Then I changed the source code of the editor to render all the lines all the time (to slow things down further). Typing was lagging a bit, but it did not lose keypresses. I think a1bd50f fixed the problem.
7693|Works for me with Version 0.10.7-alpha Commit a5a983da6c98263aa603c2ca27b1a7297c7d9e1f  ![image](https://cloud.githubusercontent.com/assets/6461412/12660707/61b93a42-c615-11e5-819f-f2258bd6272a.png)
7694|I confirm node 4.2.6 fixes the issue. According to release note s they fixed some debugger issues. Thanks
7695|"@bpasero Ha! It's ok. Xplat is confusing in these smaller issues. ctrl-tab is useful! But as it is a ""recently opened"" list, I see other things that are, well, recently opened but aren't currently in the ""Working Files"" area, so I can toggle between the two or three _really most recently_ opened, which generally are in the Working Files area. So I guess that's ok. I'd still like the other thing, though.  :-)"
7696|`useCodeSnippetsOnMethodSuggest` option for JS and TS works beautifully! I wonder why it isn't enabled by default. Thanks @jrieken :+1:
7697|+1  I use Untabify but agree that this should be a core feature.
7698|@aeschli looks good!
7699|There is an extension I created a while back that achieves this, it automatically updates files on save so if you touch the file it will normalize the whitespace. - Marketplace: https://marketplace.visualstudio.com/items?itemName=sandcastle.whitespace - GitHub: https://github.com/sandcastle/vscode-whitespace
7700|"For posterity see #2374: - switch to Korean input    ![image](https://cloud.githubusercontent.com/assets/5047891/12664712/3a02b15a-c632-11e5-8489-63bb2cb21599.png) - Press g k s r m f (it should be ""한글"") - Press space - You should get ""한글"""
