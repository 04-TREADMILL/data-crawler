23901|Closing as duplicate of #1796.
23902|Yes - it reproduces every time I have wrong casing
23903|Dupe of https://github.com/Microsoft/vscode/issues/6042 As explained in that issue our hover logic is very limited atm. The issue here is that data property lives inside another `non-public members` property.
23904|duplicates #6679   Please refer or follow #6679 for more updates
23905|I am closing this as duplicates #6679 if this issue is specific to errors and warnings. Otherwise, please reopen this for a particular issue/usecase.  Refer to #6679 for updates on problems panel
23906|I pushed the change that dimissing hte process picker silently aborts the debug session - let me know if we should show an info message in that case.  Also feedback on following wording is welcome. When extension writer hovers over `variables` in `package.json` we say 'Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command.'  When there is an interactive variable which is not contributed we say: 'Adapter {0} does not contribute variable {1} that is specified in launch configuration.'
23907|Why not make it settable in user settings?
23908|@lucnoc, we are circling this out. Let me ask you to do a couple of things: - In the Developer Tools' Console, give me the value you get when running `process.env['VSCODE_NLS_CONFIG']`. - Also, give me the value you get when running `window.location.search`.
23909|@bpasero What I did is clicking on the sergeant icon. If I only have one editor open I would expect that the system talks about the middle edt in both the command and the blue group label
23910|Can not repro
23911|Yes, we do have full support to externalize strings in extensions. All extensions in the vscode repository should be externalized so what we for example do in TS or JSON can be copied.  If markdown moves to its own repository and out of vscode then the story is more or less the same. You can use vscode-nls to do the string marking as in the normal extension code. To do the actual string extraction during build time there is another npm module that can be used called vscode-nls-dev.  Although not an extension vscode-node-debug uses both npm modules to do their internationalization work.  @kieferrm please ping me if you need any additional information.
23912|Looking forward to it !
23913|Can not repro any more. There have been a lot of changes coming in regarding open editors so some might have fixed this. Please reopen if you still see this.
23914|Sorry, if I've missed that, but how do we enable tabs ? Are they available in the latest insider build, as I have it, but no trace of tabs there. I also still see 'working files' in explorer, while it seems it should be replaced by 'Opened Editors' as stated in #6536.
23915|@Aukstkalnis could you still provide me with the output of running build.bat. You seem to call a g++ compiler and the error format mostly depends on compiler and its version.
23916|@bpasero good question. I would say any action that opens an editor.
23917|To verify: make sure the `openOnSessionStart` behaves as expected both when launching and when restarting debug sessions.
23918|@edumunoz since node.js supports 'Attach to Process' too, I've added the full process picker flow to [node-debug](https://github.com/Microsoft/vscode-node-debug). This includes: - node-debug's 'attach' request accepts a new optional 'processId' attribute - [`extension.ts`](https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/extension.ts) implements an `extension.pickNodeProcess` command - [`package.json`](https://github.com/Microsoft/vscode-node-debug/blob/master/package.json) makes this command available as an action variable `action.PickProcess` (Please note: since there is no `command`  contribution for the `extension.pickNodeProcess` command, it is not available through the command palette),  - the initial node-js launch.json contains an 'Attach to Process' launch config  I've already modified the process picker in `extension.ts` slightly to better understand the OS X application bundle structure. I plan to add code that filters all processes that are not node or electron (because it doesn't make sense - or it is even dangerous - to try to attach to them).  @gregg-miskelly, @roblourens, @daviwil, @rkeithhill, @felixfbecker, @rebornix, @MSLaguana, @lukehoban: this feature is useful if you want to add process, url, or port pickers to your launch configs. Here is a  [video](https://dl.dropboxusercontent.com/u/2433608/AttachToProcess.mp4).  Please be aware that this is just a first cut and things might change until the end of this sprint. But we'd appreciate any feedback.
23919|Closing until more info is provided
23920|I understand the pain point but our main scenario with ts is to use source maps.
23921|Works with latest vscode that will be released the following week ![screen shot 2016-06-01 at 11 34 36](https://cloud.githubusercontent.com/assets/1926584/15704884/df244b8c-27ec-11e6-9f5b-7caaa1f79128.png)
23922|I'm sorry but I don't understand. Are you saying somehow I can use a map to put my breakpoints in the .ts file instead?
23923|Yes - please check this document https://code.visualstudio.com/Docs/editor/debugging **_JavaScript Source Maps**_ section
23924|@Tyriar, thanks for your feedback. It's done. I've added a small disclaimer and enhanced the rollback functionality to avoid potential conflicts with vs code updates.
23925|I hope this extension will be a warning bell for vs code team that something is not going well and people started to write extensions which are modifying vscode files directly.
23926|I get this output:  c:\Users\aukstkalnis.de\Desktop\ConsoleApplication1>g++ -c hello.cpp  In file included from hello.cpp:1:0: warning.h:5:5: error: expected '}' before 'TestWarning_three'      TestWarning_three      ^ warning.h:6:1: error: expected initializer before '}' token  };  ^ warning.h:6:1: error: expected declaration before '}' token c:\Users\aukstkalnis.de\Desktop\ConsoleApplication1>g++ -c main.cpp  In file included from main.cpp:4:0: warning.h:5:5: error: expected '}' before 'TestWarning_three'      TestWarning_three      ^ warning.h:6:1: error: expected initializer before '}' token  };  ^ warning.h:6:1: error: expected declaration before '}' token
23927|In this case the monaco tree row still thinks it has `:hover` and this rule gets applied  `.explorer-viewlet .explorer-open-editors .monaco-tree .monaco-tree-row:hover > .content .monaco-action-bar: { visibility: visible }`  @joaomoreno any tips on what might be going wrong here? Why would an html element think it is still being hovered over while that is not the case
23928|Closing as there's a workaround.
23929|Chromium rendering issue.
23930|Then nothing that can be done here
23931|Installed Code today and the first thing I tested was tabs, the next thing I tested was hot_exit, disappointed on both counts. However I can live without tabs, as `ctrl+tab` works as expected. Will not be making the switch or recommending Code to anyone soon because of hot_exit. Guess I'll be sticking to Sublime Text for now.
23932|What is happening on this?
23933|Is there anything I can do to help troubleshoot this (log file, debug mode, ...) ?
23934|Just found another extension that crashes: Go (https://marketplace.visualstudio.com/items?itemName=lukehoban.Go)  As soon as I open a Go file I get the same error as with C#. Still no problem with reStructuredText or PowerShell extensions.
23935|@alexandrudima I'm on 1.2.0-insider and it isn't implemented.
23936|All on windows 7? They all start external processes to do the real work, maybe something on your machine isn't happy with that. Can you open the Omnisharp Log (View > Output > Omnisharp) and also the console from dev tools? (F1 > Developer Tool)
23937|Actually, it looks like it doesn't complete properly with a single variable reference either. If you just do the same snippet without the mirror, pressing enter should place the cursor after the snippet. What it actually does is just keep the variable highlighted.
23938|Yeah it works in regular powershell terminal, and it also works if you launch powershell from a cmd.exe prompt.  ![](https://raw.githubusercontent.com/gerane/PowerShell/master/Images/ConsoleKeys.gif)
23939|Here is an example of what it looks like inside of Code.  ![](https://raw.githubusercontent.com/gerane/PowerShell/master/Images/VSCodeKeys.gif)  The only way to clear the line is to delete every character. There is also no way to copy text in the history or in the prompt. Pasting text is also very difficult.
23940|Yes, all on the Windows 7 Pro PC.  The Output > Extensions output window shows nothing (it's just empty). The console shows the same errors as the window:  Extension host terminated unexpectedly. Please reload the window to recover. Extension host terminated unexpectedly. Code:  3221225477  Signal:  null Error from the extension host: channel closed
23941|:+1:
23942|Future version of Code will have a correct version in there.
23943|Nothing in `Output > Omnisharp Log`?
23944|"Not sure about middle but maybe it should be something like ""`main`""."
23945|Nice, thanks!
23946|Yeah that would make most sense I guess.
23947|@npandrei can you try to read the file using node.js to see if that returns empty already?
23948|Might be our auto detection?
23949|@weinand does the extension that implements the process picker need to be the same extension that has the debug adapter, or can the two extensions be different? In one of our attach scenarios, we would need them to be different.
23950|@gregg-miskelly I did not yet verify it, but it is an explicit design goal that a process picker can live in a different extension than a debug adapter. So if it does not work, it would be a bug.
23951|I just tried a similarly clean TypeScript project: No `node_modules` directory, and only 2 files (both `.ts`). I saw the console message again and didn't get any Intellisense.  _Edit: I previously wasn't seeing the console message, but it's there now._
23952|@weinand Excellent.   One other question: looking at the node implementation at least, it looks like this facility is pretty generic, and not necessarily specific to picking processes. For example, if we wanted, could we set the launch configuration program to be '${action.getCurrentCSharpOutputProgram}' which would run code in the C# extension to get the output path to the current project? Is or this mechanism really specific to attach to process. (NOTE: I am not sure if we would really want to do this. But I am curious if we could).
23953|👍
23954|@Tyriar I meant that, even using `-n` doesn't work.  Try this:  ``` code . code -n . ```  Expected results are a new instance opening. But it simply transfers focus to the running instance.
23955|They are there I just grouped them because the list of entries in that menu is getting very large.  ![screen shot 2016-06-01 at 19 03 56](https://cloud.githubusercontent.com/assets/900690/15718453/9f911fce-282b-11e6-8e43-4d22e9ad6964.png)  /cc @sandy081 you might want to put your problems and errors also under the panel category once you push to master.
23956|The smoothness is still blocked by signing, I feel like just doing it ourselves and owning the keys.
23957|@gerane see my comments on https://github.com/Microsoft/vscode/issues/6684#issuecomment-221459969 about my experiences with 64-bit powershell, back when powershell was the default.  Right now the default is `%COMSPEC%` which defines the default terminal for the environment, if powershell.exe or cmd.exe is used, it's grabbed off the path. So we're leaving it up to powershell and windows which bitness is selected.
23958|@gregg-miskelly yes, your use-case is perfectly valid. The action-variable concept is basically a mechanism to call a function implemented in an extension (aka 'command') with the launch config as a parameter and return a string. So it does not have to involve any UI at all (and of course it is in no way specific for attaching to a process).  (And because we are really running a 'command' and not necessarily a UI 'action' we are already discussing to rename the variables to '${command.xxxxx}').
23959|Duplicate of #6455, will be coming in 1.3.0
23960|Can you share some details about the workspace? What kind of code , how many files?
23961|We discussed at the UX meeting today and agreed that we would refine the button layout like so:  ![image](https://cloud.githubusercontent.com/assets/1704059/15719955/30eed364-282a-11e6-8cfd-1384b3ce40ad.png)  Brad will tidy up the mockups I created and copy them up to the deck with our visual designs.
23962|We discussed at the UX meeting today and agreed that we would refine the button layout like so:  ![image](https://cloud.githubusercontent.com/assets/1704059/15719955/30eed364-282a-11e6-8cfd-1384b3ce40ad.png)  Note the different overflow icon. Brad will work with the icon team in Redmond to get a new icon similar to this.  Assigning to Brad so that he can get the icon.
23963|We discussed at the UX meeting today and agreed that we would refine the button layout like so:  ![image](https://cloud.githubusercontent.com/assets/1704059/15719955/30eed364-282a-11e6-8cfd-1384b3ce40ad.png)  Brad will tidy up the mockups I created and copy them up to the deck with our visual designs.
23964|I updated comments in the #7058, #7059 and #7060 issues.  For the Error List we suggested that we go with the current implementation and get feedback from the insiders once it is published. We will set up a series of interviews with insiders to get their feedback after they have had a chance to use the bits.  We did not have time to discuss the other items on the agenda.
23965|- 1   Would be very useful for my surface book and its dead sleep :)
23966|This is great, I've wanted something like this. FYI @Auchenberg. We could use this to pick tabs/targets to attach to.  Can the debug adapter call those actions from its own code? It doesn't require a launch.json variable, right?
23967|@hashhar I was agreeing with you :smiley: I think that is the only thing `-n` is supposed to do but it doesn't seem to work.
23968|@Tyriar On Windows, this is not going to be the desired way for this to function. Is it planned to be changed?  **%SystemRoot%\sysnative** does not actually exist, it functions as a folder redirect for 64bit systems. So if a 64bit system uses **%SystemRoot%\sysnative** it is reditected to **%SystemRoot%\System32**.  **%SystemRoot%\SysWOW64** is actually what is being executed when running in a 32bit process on a 64bit machine. A 32 process targeting **%SystemRoot%\System32** is redirected to **%SystemRoot%\SysWOW64** and is the root of the problems. For a 32 bit process to actually run **%SystemRoot%\System32**, it has to use **%SystemRoot%\Sysnative** redirect. There are countless issues this will cause in the long run, any many of them may be silent to the end user. They may not find out until their code gets closer to production.  Here is a shorter diagram:  **32Bit on 64Bit >> %SystemRoot%\System32\ >> %SystemRoot%\SysWOW64\** **32Bit on 32Bit >> %SystemRoot%\System32\ >> %SystemRoot%\System32\**  **32Bit on 64Bit >> %SystemRoot%\Sysnative\ >> %SystemRoot%\System32\**
23969|These keys may be a limitation of winpty, or at least the quite old version that is being used.  Copying and pasting hasn't been looked at yet, the experience is terrible on all platforms. See https://github.com/Microsoft/vscode/issues/6451 https://github.com/Microsoft/vscode/issues/6945
23970|@Tyriar `%SystemRoot%\sysnative` is a Redirect. It is how a 32bit process on a 64bit OS accesses `%SystemRoot%\System32` .   If a 32bit process attempts to `%SystemRoot%\System32` it is redirected to `%SystemRoot%\SysWOW64\`
23971|2 - 3 files open at once, Javascript.
23972|Thanks @robertohuertasm.  @asvetliakov I really want this feature too, the team is spread a little thin at the moment is the main blocker for this.
23973|@lllopo they're not available yet. The stacks/open editors were merged in for v1.3.0 and will be available in Insiders next week when daily builds become available.
23974|@weinand I don't get why this requires a launch.json variable. Why can't the debug adapter simply ask VS Code to display a quick pick UI with some values and VS Code returns the user pick?
23975|"Thanks for the info @gerane, really useful!  So you would suggest that [getWindowsShell](https://github.com/Microsoft/vscode/blob/3c96e9277955f3f573fa498c235b5029112b4c76/src/vs/base/node/processes.ts#L79), which powers both internal and external terminals, becomes `""%SystemRoot%\sysnative\cmd.exe""` or something similar? After the environment variable is resolved, querying `c:\Windows\sysnative\cmd.exe` should work?  Then maybe add a note about `%SystemRoot%\sysnative` in the Windows shell config descriptions? I'd prefer to avoid messing with the paths that users enter in their settings.json."
23976|The debug adapter is a separate black-box process and has no access to VS Code APIs.
23977|The debug protocol could easily introduce a request/event for this.
23978|This looks awesome so far!  One question:  > this feature is useful if you want to add process, url, or port pickers to your launch configs  Does this mean the action syntax can be used in other variables aside from processId?  Also, is `action.` a special keyword in the variable syntax?  I didn't see any place where it's registered other than the `variables` section.
23979|@felixfbecker Assuming there is a way to do this from debug adapter code, this is better because the debug adapter can call arbitrary code using any of the normal Extension APIs. It's not just for quick pickers. Assuming I'm reading this right, if so, I think @weinand is underselling it :)
23980|@roblourens As I understand it the debug adapter is not calling anything, instead the _user_ sets an action in launch.json and then VS Code asks the adapter to act on that. I would prefer if the adapter could trigger UI actions at own will.
23981|This is also harmful imo as lesser known niche extensions will never get installed unless they're found via browsing the web interface.
23982|It appears this got fixed after a newer request on the same issue (#4637)
23983|"This has nothing to do with the issue but I read you talking about numbers and just wanted to ask:  The maximun number of characters per line (internally) is 10k, right? I mean no matter if I set my settings to:  ``` ""editor.wrappingColumn"": -1, ```  It won't display more than 10k characters, instead I see three dots after the last character.  I think it would be a good idea to remove this internal limitation or at least notify it in the description. Unless it causes some kind of disaster :P"
23984|@Tyriar I am not very familiar with TS or JS, so I can't show you exactly how it would function in getWindowsShell. I mainly interact with PowerShell and a tiny bit of C#.   You would need to check the OS Arch and Process Arch, or since code doesn't have a 64 bit client, just check OS Arch, and if 64bit use sysnative. You can test this out by opening both `%SystemRoot%\System32\cmd.exe` and `%SystemRoot%\syswow64\cmd.exe` to see how these act.  Sysnative does not exist for a session that has normal access to `%SystemRoot%\System32\`. So 64bit  Process on 64bit OS and 32bit Process on 32bit OS can't use sysnative. Sysnative is just for use for 32 bit processes on a 64 bit OS.   If you use `C:\Windows\syswow64\cmd.exe` and run `dir %SystemRoot%\sysnative\` it will return the contents of a `C:\windows\sysnative\` directory even though it really doesn't exist. It is actually returning the contents of `C:\windows\system32\`.   Then if you use `C:\windows\system32\cmd.exe` and run `dir %SystemRoot%\sysnative\` you get a File Not Found error.  I just wanted to bring up that this is a bigger issue on Windows than most realize. I have been heavily burned by this in the past and it cost me months of my time and a lot of gray hairs. I just wanted to try to help others avoid the same issues I have gone through in the past. Sometimes you don't realize an issue is even present until after the damage is done when dealing with Windows 32 bit redirections.   Even just running normal command line tools it is executing the 32bit versions instead of the 64 bit versions which could have some undesired results. Just look at reg.exe for example, most people don't use it's **/reg:32** or **/reg:64** flags, so it might not target the key they think it is targeting.
23985|This seems a little trivial to fix. Could you point me to the file that handles the command line arguments?
23986|Do you mean you want to run multiple processes at once? #6458 will probably solve this.
23987|Ok, well I guess resolving this will involve: - Using a 64-bit terminal if available over `%COMSPEC%` as the default for internal and external terminals - (Maybe) Add a note to the config descriptions to guide Powershell users to choosing the correct bitness.
23988|@hashhar it may be harder than you think due to the process management/sharing involved. Here are some relevant files: - CLI: https://github.com/Microsoft/vscode/blob/master/src/vs/code/node/cli.ts - Electron main: https://github.com/Microsoft/vscode/blob/master/src/vs/code/electron-main/main.ts
23989|You should be able to write an extension to do this, you would need to include a syntax highlighter in the extension though. I'm not sure we would want to integrate something like this into the core editor (concerned about feature bloat).
23990|A couple other related issues: - I think ctlr+= and ctrl+- (or ⌘=, ⌘-)should not zoom the entire interface, if possible. It's not as useful as zooming the document (except as maybe an accessibility setting). - There's no ctrl+0 (or ⌘0) to restore zoom to the normal level - Pinch to zoom (at least on OS X) actually _scrolls_ the editor view, instead of zooming in/out
23991|"@Tyriar I thought about this issue again. Actually its enough for me, if I could enter text into the terminal when there is a process runnung. Its just I can not type anything when ""ng serve"" is done. I followed your link and found your statement:  ""I think pretty early on we will get the feature request to support multiple terminals. As soon as you run a program from the terminal, you cannot use it anymore.""  Right, you can not use it anymore, thats my problem. Its a fire and forget terminal ;-) Multiple terminal sound logical then to me."
23992|@bastienJS `ng serve` continues to run though, so the terminal is not supposed to have control until the process is terminated??
23993|The way this normally is implemented is:  ``` javascript // inside the swipe left start event handler if (window.scrollX == 0) {   // actually register swipe  } ```  (And the same logic for the other direction.)  That way if the user can scroll left, they need to do so, remove their hands of the trackpad, then swipe _again_ to trigger the navigation. (Really hard to activate by accident)  It's also important to check if this works as expected with natural scrolling disabled.  Visual/animated feedback might be a bit tricky, but I think a v1 without it would be mostly fine.
23994|"In a web context we would like the ability to populate the ""target selector UI"" with targets that isn't coming from a specific process. Think web apps running on a phone or HoloLens.  Looking at the current format for a target, it's very specific to local processes such as Node:  ``` {    label: basename(executable),    description: pid,    detail: cmd,    pid: pid } ```  I could easily imagine us wanting to add a icon next to the debug target for the favicons and another icon to show the device type. Can we expand the format, or is that what the `detail` property is intended for?  Could we remove `""processName"": ""${action.PickProcess}""` completely from the config and made an implementation detail in the extension? I don't see why the choice of action should be surfaced to the end-user developer.  For the web we currently have two defacto formats: One to describe [devices](https://github.com/RemoteDebug/remotedebug-mdns-spec), and another for [debug tagets](https://github.com/buggerjs/bugger-daemon#api)."
23995|@Tyriar Well I just would like to have it like it worked in WebStorm. There a integrated terminal has an exit button terminating the process within the terminal :-)  I think there are even 2 use cases:  1) Exit an always running process within a integrated terminal to run something different 2) Start another process in the same/another terminal in parallel.
23996|@felixfbecker I was thinking that the debug adapter was calling that action from its process, but actually that doesn't make sense, I guess I misunderstood. So yeah it would be nice to have support in the debug protocol for calling code that uses the vscode extension APIs.
23997|Ah ok, yeah I think I'll close this in favor of #6458. That will include a UI where you can kill terminal instances.
23998|"Some answers/clarification:  As @MSLaguana correctly stated: a debug adapter is a separate black-box process that has no access to VS Code APIs (and has no UI on its own). Any debugger UI that uses the VS Code debugger protocol can use debug adapters. Opening up the debug adapter to all VS Code APIs would blur this clear separation of concerns and would make it hard to use debug adapters in a different context than VS Code. In addition if the debug adapter would be able to create its own UI, that would most likely clash with the generic VS Code debugger UI. So @roblourens and @felixfbecker: a debug adapter can **not** call those actions from its own code.  @daviwil the `${action.xxxxx}` syntax follows the already existing environment variable syntax `${env.PATH}` and currently it can be used everywhere in a launch.json (and probably soon in tasks.json as well). In our current implementation action variables are contributed in the `variables` section of the `debugger` contribution:  ``` json ""variables"": {    ""PickProcess"": ""extension.pickNodeProcess"" } ```  @auchenberg every debug extension is free to implement whatever picker or other UI they need (as long as it uses the VS Code API). The ProcessPicker implemented for node.js is just an example or a starting point; it is not a shared component that should be used in other debug extensions.  If the Chrome Debugger extension wants to use the QuickPick UI but likes to use the attributes of a QP item in different ways, you can do so in your own picker implementation. If you need a richer UI experience for the QuickPick UI please create feature requests.  @auchenberg as mentioned earlier it will not be possible to directly call UI from the debug **adapter**. But it is possible to call UI from the debug **extension**. So if you want to present your pick UI independent from a launch config and its action variables, you can do so in the VS Code May release: we added API for launching a debug session programatically. So in the debug extension you can create a launch config 'in memory' and start a session with it. For creating the launch config you could use whatever UI is available in the VS Code extension API."
23999|"Unfortunately no. The Output window only lists ""Extensions"", ""Git"" and ""Tasks"" : http://imgur.com/WyczdxC  I definitively have C# installed though: http://imgur.com/YDglUif"
24000|Yes, I'm on OSX.
