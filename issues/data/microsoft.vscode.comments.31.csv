3001|Sublime shows the same problem, so it looks like a problem in the grammar, not our textmate engine.
3002|And well to avoid some inconvenience you can add a command to show the menu temporary.
3003|This issue was moved to Microsoft/TypeScript-TmLanguage#21
3004|Again, that's unrelated to commands. The editor manager doesn't execute sync with the command happening but batches editor/doc changes for performance reasons
3005|see how this is invoked: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/common/mainThreadEditors.ts#L337
3006|Thanks. What is the name of the process? even better can you attach a screen shot of process explorer before it happens?
3007|@egamma should I wait until January then? Or no?
3008|Thanks for the insights guys. First, I'll move this to omnisharp, then we tackle it there. @wolfspider I hear there is two changes (1) IPv4, IPv6 and (2) don't wait. Is that right. Do you want to do a PR against OmniSharp?
3009|@rstat1 this just means we will not work on it so feel free to do the PR.
3010|This issue was moved to OmniSharp/omnisharp-roslyn#360
3011|@lucasrivoiro ping
3012|Please use ctrl+alt+down/up  (the action is called insert cursor below/above)
3013|Yes but with care only. With the Dec15 update you can invoke this command `https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/common/extHostLanguageFeatureCommands.ts#L55` to retrieve the same list of completions the UI would show. Note, that it will recurse into your `provideCompletionItems` call so that you must guard yourself to not recurse endless.
3014|Duplicate of #913
3015|Did you enable ES6 in the jsconfig.json?
3016|Pls see: https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source
3017|I have enabled ES6 in the jsconfig.json ![image](https://cloud.githubusercontent.com/assets/9499016/11623323/15a3154c-9d07-11e5-8c7e-5ef0fff3f669.png) but show like this
3018|Thanks!
3019|From the call stack it looks like this is vscode-go initiated.
3020|This issue was moved to Microsoft/vscode-go#147
3021|Thanks for the clarification. This is a coloring issue.
3022|More debugging insights. We only allow 750 source files per project and since we don't exclude `jspm_packages` by default we reach that limit before reaching to the deep a/b/c/d/e/f-folder. I will make `jspm_packages` be excluded by default.
3023|duplicate of #71  There seems to be an extension to solve your problem: https://marketplace.visualstudio.com/items/DotJoshJohnson.xml
3024|Oh no, let me take this.
3025|I have enabled ES6 in the jsconfig.js such as ![image](https://cloud.githubusercontent.com/assets/9499016/11623454/faf2543c-9d07-11e5-8274-8881d4cd8e54.png)  function test({a = 'foo', b = 'bar'}) {}  can show correct, but in this way i must trans a object param
3026|@jrieken  I thought of that and did add both to `jsconfig.json` exclude. Still not working well. Can you reproduce this? I will try it on another PC later to make sure it's not something local.  ![image](https://cloud.githubusercontent.com/assets/1427723/11623701/504e7342-9cd7-11e5-9f73-4ee95681eb4e.png)
3027|duplicate of #133. Verified that this is fixed now (for December release)
3028|perfect, thank you!  ctrl+alt+down/up does not do anything on my machine, maybe because of my apple keyboard (+ key remapper). anyway after remapping it to shift+alt it works.
3029|Verified that this got fixed by #133.
3030|yeah, I could reproduce and fixed it on master.
3031|Note that we don't have any intellisense for href completion in HTML, so it's doesn't depend on whether the string starts with '~/'
3032|Submitted atom/node-oniguruma#46 that addresses the slow tokenization of long strings with multi-byte characters. Until they accept the PR, I have published a forked module on npm and adopted it in 0f49124c93854f8ac44256a0d7111f74aa88446e .  Tried out the original CSS file and the file now opens fine on linux.
3033|@DelvarWorld , sorry, that you had an unhappy experience. We are about to close Issue #703. It wasn't a single issue but there were several issues behind the same symptom (and no, it wasn't a file system issue). The fix will be in the December update (pls see #917).   > Not documented in any way!  We are always interested in improving our documentation. Please let us know what you would like to see in the JS documentation: https://code.visualstudio.com/Docs/languages/javascript.   > Furthermore, could you please edit this blog post to make the images of text into actual text? >http://blogs.msdn.com/b/vscode/archive/2015/07/06/vs-code-es6.aspx Classic Microsoft :)  I was about to do it, but then there is a link to a repository with full source code at the end,
3034|The recommendation is to have the typings folder with the .d.ts files as a peer of the jsconfig.json.  See also https://github.com/Microsoft/vscode-samples
3035|Thanks for the pull request, however we use a virtual tree and thus we can not set the element height: inherit. Try adding multiple lines that wrap to the repl and try scrolling - it will not work.  We actually plan to address this issue in the next couple of days by using a monospace font and computing the height of every tree row. If all goes according to plan we should have some word wrapping in the debug console for the next update.
3036|I understood and tackles these tasks - [x] files are ignored when path contains `js`, like `foo/bar/js-project/far.js` - [x] paths are ignored when path-segments start with `temp`, like `foo/bar/templateEngine.js` - [x] js files in `jspm_packages` folder flood project - [x] problem with exclude patterns - [ ] [defer] problem with files without ending but shebang  Anyone, please speak up if you don't see your issue(s) addressed by that.
3037|@bpasero duplicate of atom/electron#3530?
3038|"the question is I have the typings folder and jsconfig.json  ``` json {   ""compilerOptions"": {     ""target"": ""ES6"",     ""module"": ""commonjs"",     ""experimentalDecorators"": true   } } ```"
3039|Did you try to put the typings folder in the same folder as the jsconfig.json. This is what I meant with 'peer' to jsconfig.json.
3040|my typings folder and jsconfig.json are in the project root dir
3041|@egamma yes, we do not support 10.8, same as Atom.
3042|So it is the same layout as in the sample layout. Does the sample  https://github.com/Microsoft/vscode-samples work for you? If not what is the difference between your code and the sample? Can you check whether this is related to #703
3043|There is a delay. I think what you are looking for is a less aggressive auto save, i.e., only on focus lost? You know that you can also turn off auto save.
3044|the sample project  have the same problem win8 + 64
3045|How do other IDEs do it? Is there an efficient way to determine a subset of files to hash (e.g. with their modified timestamps)?
3046|Here you go. This is moments before the crash.  ![code-crash](https://cloud.githubusercontent.com/assets/6029412/11626048/ea7bc39a-9cdf-11e5-8eea-841339aff346.png)
3047|"And here are the details of the of the process:  The command line is: `""C:\Program Files (x86)\Microsoft VS Code\code.exe"" --type=renderer --no-sandbox --lang=en-US --app-user-model-id=Microsoft.VisualStudioCode --node-integration=true --enable-pinch --device-scale-factor=1 --enable-delegated-renderer --num-raster-threads=4 --gpu-rasterization-msaa-sample-count=8 --content-image-texture-target=3553 --video-image-texture-target=3553 --channel=""4212.1.1281448818\2102388047"" /prefetch:673131151`  ![code-crash-details](https://cloud.githubusercontent.com/assets/6029412/11626134/af46baf4-9ce0-11e5-8f15-3790d6499e91.png)"
3048|Also these: - vs/workbench/services/untitled/browser/untitledEditorService - vs/workbench/browser/parts/editor/untitledEditorModel - {EventType} from 'vs/workbench/browser/events';
3049|@alexandrudima fyi
3050|Yeah, its a consequence of never finishing our componentized build. Some service interfaces still point to types defined in browser land (e.g. editorInput) because eventually there is a dependency to DOM things like builder or HTMLElement.
3051|Is this for both jsconfig and tsconfig? For tsconfig please file the issue against microsoft/typescript. Jsconfig attempts to be a subset and feature compatible with jsconfig.
3052|For `jsconfig` it was fixed as part of the work for #703
3053|If we sell commands as a way to do more things from extensions, I think we need a way for the extension writer to synchronize on the result of invoking an action. How would an extension otherwise make sure that after invoking a command the state on the PH is in sync? E.g. I want to close all editors and then open another editor, wouldn't that collide?
3054|Hi **@EgorMatirov**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
3055|Well, that subset is exactly what you get from `git diff-index HEAD`. One solution would be to simply implement the hashing only on Windows... I'm not super happy about it though.
3056|And you have found the only place in which we do that.   Everyone is invited to fix the problem we that we have with editors, the active editor, visible editors etc. For instance, the complexity comes from the workbench API not being aware of embedded editors, from `EDITOR_INPUT_CHANGED` being fired on focus lost/gain etc, from us treating the combination of one editor and one model as editor in the API etc, etc.
3057|The problem exists on other platforms too, probably due to https://github.com/jrieken/gulp-tsb/commit/e758da462e4ff2749db3b347e88252c119473a33
3058|"I am not sure how that is related to synchronizing UI state over to the PH side. I think you solved these problems because eventually the visible-editors number goes down to 0 when I invoke the ""Close all Editors"" action. Doing **anything** on the main side can eventually result in state being synchronized to the plugin host side from **any** action an extension invokes."
3059|Related to #1031
3060|Hi **@start**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
3061|I just test the samples project MAC OSX also has this problem
3062|This looks like a buffer sync issue. Need to check whether tsserver 1.7.x already supports sending the content of a buffer on open which should avoid this.  @mohsen1 after closing and reopening VS Code is the error still there or does it disappear?
3063|https://github.com/Microsoft/vscode/issues/713
3064|These tests might fail due to timing. I think the diff algorithm has some timeouts, if a certain amount of time has passed it gives up on computing the diff.
3065|Wouldn't the number of files to hash be proportional to what the user touched (typically manually)? Would it be that much of a performance issue? Over here everybody has by himself walked into this issue already so I don't think the current way is the way to go.
3066|pressing `AltGr+X` in all OSes results in `Ctrl+Alt+X` where X is a key code. So to map `AltGr+P` for example you would map `Ctrl+Alt+P`
3067|Are there any updates regarding this feature?
3068|@jrieken a view model property which we could at the beginning at to the end of the message.
3069|Also related with: https://github.com/Microsoft/vscode/issues/353
3070|Closing and re-opening fixed the issue.
3071|Thanks @start. css.plist is a copy from https://github.com/textmate/css.tmbundle.and has become outdated.In issue #599 we discussed if we want to to switch to the one from https://github.com/atom/language-css. We have to decide on that first. @dstorey FYI
3072|@egamma yes, but what i mean is more like a save when idle, where the idle period is configurable. For example, autosave is triggered 10 seconds after I stop typing.   I currently have auto save turned off, but I miss not having to worry about saving.   @b12k save on focus would also work. A combination of both would be best :D
3073|Status: It is on the backlog and we do not plan to provide this feature for the next milestone (December).
3074|@EthraZa can you please open a separate issue for the JS behavior. This is independent of the TS problem you described here.
3075|I see it fixed with https://github.com/Microsoft/vscode/commit/92cba7e9fe78c87fa10a4931657d86be66123c96 and https://github.com/Microsoft/vscode/commit/b71ce1948a88eeed6aa84d4eab46e16d49de0c0d
3076|Hi Martin,  Ok, I understand. But my point is that css intellesense does not work. So my question is how to solve this.  Kind regards, Ad.  Op 7 dec. 2015 om 10:52 heeft Martin Aeschlimann notifications@github.com het volgende geschreven:  Note that we don't have any intellisense for href completion in HTML, so it's doesn't depend on whether the string starts with '~/'  — Reply to this email directly or view it on GitHub https://github.com/Microsoft/vscode/issues/1005#issuecomment-162466875.
3077|Hi,   Yes I know about that page, but isnt that just how to juild and debug? I have been doing that, but how do I build a stand alone release non debug biild?
3078|Not yet, but it is high on our back log.
3079|Doesn't work for me. I tried to map the open curly to alt-gr-7. Following your tip, I mapped it to Ctrl+Alt+7, which is working, if I press that combination. But if I press alt-gr+7, it still writes 7
3080|Some of the gulp tasks are minimally documented here https://github.com/Microsoft/vscode/wiki/Code-Build-Process
3081|"**TL;DR** the file will now open, no hang, the text won't be colorized.  I looked into this for quite a while, logging all the way down to the C++ code in oniguruma, trying to find any possible mistakes or low hanging caching opportunities. The underlying problem is due to how TextMate syntaxes are specified, where a list of regular expressions must be searched for in the current string in the order specified in the grammar. Then the regular expression that matched closest to the current scanning position is chosen.  This often times leads to unnecessary regex matching at far-ahead positions. For example, in this specific file I could see the `comment-line` rule of the JavaScript tokenizer matching numerous times inside the strings containing `""http://....""`. This is due to the `comment-line` rule being specified in the syntax file (via various state transitions) ""before"" the `qstring-double` which means that it will always be checked first. One can argue that strings should be checked first, but even if I change the syntax and reorder the rules such that `qstring-double` is before `comment-line`, I can easily produce the counter-example where there is a test file with numerous comments and unnecessary matches of `qstring-double`.  I have checked what others editors using TextMate grammars do and I found that Sublime refuses to colorize any line longer than `16384 (2^14)` chars. From my testing, I have found acceptable times (below 50ms tokenization) for lines up to 20k, so I have set our limit to `20k`."
3082|This should work now, we follow the same steps during development, pls reopen if it still doesn't work for with the latest code.
3083|Thank you @MattiasPernhult -- there were a few glitches that occurred when using it on a long line (wrapping), so I've made it to consistently use the view coordinates. Also created a test for it.  Thank you! :+1:
3084|How long is it before you guys next do a release @alexandrudima ?
3085|@david-driscoll can you share an example of where intellisense did not return results when you expected them?
3086|Sure, I'm not saying we should keep it this way :+1: Let me sketch up something.
3087|That's a very good question, I just tried to see if I could replicate the behavior I was seeing, and I was not able to get it to happen anymore.  To be fair I use vs code fairly irregularly, so it's possible it was fixed in the version I just updated too.  I'll try again tonight from my laptop, which is where I saw the issue in the first place.
3088|@david-driscoll thanks. what I am trying to understand is if fuzzy matching should be applied to anywhere in the UI including intellisense, or selectively, starting with the picker. While I can see the value for the picker, I am not yet convinced for intellisense because I feel that I would never type a sub-string of a method to complete, I would always start with the first letters. And we do have camel case matching, so you can still type the upper case letters of a type to complete it, so we are having something very similar there.
3089|"From a ""feeling"" point of view I shared many of the same principles that were ingrained from VS / R#.  Then once I started dog-fooding atom building `OmniSharp` with `omnisharp-atom` I finally understood how useful it can be, it was a huge mental shift, and it's hard to shift back (not impossible mind you).  By letting fuzzy search everywhere even if you only know a few characters in the method, you can find the result with some insane speed and precision once you get used to it.  There are some problems too, because when you're filtering large lists, you're expanding the result set as well, which could have performance implications as well.  I'm not saying it is for everyone, and I'm not even sure if it fits the ""vision"" for vscode that the team  has, that's up to you guys to decide. :smile:"
3090|@jrieken what about files that contain several dots ? like `foo.bar.dialog.js` ?
3091|"> I was about to do it, but then there is a link to a repository with full source code at the end,  Do you think that when coming across a blog and seeing the block of text one needs embedded in an image, the first thing a developer is going to do is scroll to the end of the blog post looking for an unlabeled, obfuscated link to an unrelated part of a codebase? If you have the ability to do, please edit the blog post (and the documentation) to show text instead of an image. I don't see the point of intentionally making every developer have to scour for an external link they don't know exists, to a repository not obviously related to jsconfig.json, following it, losing context of the blog post, assuming they know exactly where to look for the file in the directory structure, then clicking on it.  Pushback against saving time for every single developer who comes to the blog and documentation because ""there is a link"" is disheartening. Please think of how newcomers approach your docs and tools."
3092|One more!
3093|> Please let us know what you would like to see in the JS documentation   Not sure if you're just messing with me now, since you quoted me asking where `filesGlob` is documented, and linked to a page that doesn't mention `filesGlob`, then asked me what should be added to the docs.
3094|I definitely understand where you're coming from.  However, the team for Visual Studio 2015 made this decision on their own just to differentiate it from multiple legacy versions (which was causing challenges to users).  This was not a brand update or refresh; it was just to solve a problem.  We don't have that same problem, and carrying it over to VS Code isn't something our team wants to do at this time.  We hope you understand.
3095|"@SteveALee, are you referring to the ""BETA"" flag that appears in the top left corner or the yellow banner below the logo?"
3096|Done #1081
3097|To reproduce the issue, I installed Sean's spell checker (version 0.4.1) and then made a copy under a new ms-vscode folder and updated the version (0.4.2) and publisher in the package.json.
3098|I was testing this on release version 0.10.3.  I haven't tried this with a nightly build.
3099|@bgashler1 thanks for the explanation.
3100|oh the little drawings are suposed to form dices :)
