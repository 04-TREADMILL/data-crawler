16101|"@claudiusraphael this issue is talking about the ""flipped cursor"" over the line numbers on the left of the editor.  Is this the cursor you are not seeing correctly?  What exactly is the problem you're seeing (if you can snap a photo of your screen, that would be helpful)."
16102|@felixfbecker just a prompt to elevate on save will save a lot of time.
16103|@bpasero kind of. so i just resize it once and it will save my size, then any instance, no matter if 1st, 2nd or 3rd will open with my size. well, any other app does like this.
16104|Duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
16105|"Right now, i have no screenshot available, but as soon as i got into that condition again AND remember that i asked for a solution ;) i will spend a bucket full;  What brought me to the idea that it is (at least) in relation to this issue, is that the area whereas the cursor showed the (seemingly based on missing graphic - comparable to a javascript that can't get the image to be loaded quick enough due to async call, so in the end is missing at runtime) is the one that is described here as base for the 'flipping-cursor-problem';  As i already told, i could not see a fixed|reproducible way to 'enable' the 'weird cursor'. But from the last things i remember, whereas the cursor got humbled that way, just showing off it's ghost, instead of the normal VS-Code- or System-|-Cursor|-Pointer, it have had happened when e.g.: enabling the debugger, changing view-modes, adding by-intellisense-parsible definitions AND : hovering the before-described-area , if you understand what i am talking about; sorry, i am not used to the VS-Code-specific terms.  Maybe you have an idea, whereas and how i could watch|debug VS-Code itself by a condition that would alert an activation of the flipping-cursor-issue and therefore probably leads to a reproducible pointer-ghost-issue?  :) Sorry, no other way to explain it, right now.  But thanks, for your fast response."
16106|"@bpasero tried fixing this as this https://github.com/asotog/vscode/commit/d3cac5b26e57521dc39f8390e3cdf76c1f917342 so from settings default to  ```       ""files.exclude"": {         ""**/.git"": true,         ""**/.DS_Store"": true,         ""VCS"": true     }, ```"
16107|Hi **@asotog**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
16108|**@asotog**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
16109|I think it'll be an often inconvenience for developers. A common example is to disregard indentation when specifying an inline html template in a javascript file. Here is an example from angular app::  ``` javascript export function componentDirective(): ng.IDirective {     return {         template: ` <div>     <p>There's going to be a lot of html here and having its indentation start from the beginning is helpful in this case</p> </div> `,         scope: true,         controllerAs: '$ctrl',         bindToController: true,         controller: componentController     } } ```
16110|@claudiusraphael if I'm understanding you correctly, then this cursor disappearing problem you are having is happening not just in VSCode, but it's also happening throughout your operating system.  Or is it just within VS Code?
16111|Reopening until I test this on Windows, since I also fixed the blurry cursor on Windows
16112|Duplicate #3586
16113|This issue is currently assigned to the backlog. Every sprint we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning
16114|@regs01 I suggest you open a separate issue on that topic as this one here talks about a different problem.
16115|#224 should address this too
16116|#224 should address this.
16117|Looks like this extension might be just what you're looking for https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case
16118|Thank @Tyriar , I searched in internal commands but didn't find it. Next time I'll search the store too.  Have a nice day  `:-)`
16119|+1
16120|hi tha
16121|@bpasero I'd say that the point made by @regs01 and this are highly related. So much so, that fixing this unless explicitly overridden should fix that as well naturally.   The idea is that whenever a window is created, it should now use the last saved size. Now, the intricate detail here is that the last saved size should never be the maximized size. (If the window is maximized when it quits, it should rather save the size before maximization with an isMaximized flag). And any window that's created uses this size and flag on creation.
16122|Pseudocode (It doesn't reflect electron's api. Just the idea. Variables names may also be exceedingly verbose on purpose):   **createWindow:**  ``` js let { w, h, x, y, isMaximized } = getSavedSizeObject(); sizeTracker.setAll(w, h, x, y, isMaximized); window.create(w, h, x, y);  if (isMaximized) window.maximize(); window.show(); ```  **windowResize**:  ``` js if (window.isMaximized) { sizeTracker.setIsMaximized(true); } else { sizeTracker.setAll(w, h, x, y, false); } ```  **saveSize:**  ``` js let { w, h, x, y, isMaximized } = sizeTracker.get();  saveSizeObject(w, h, x, y, isMaximized); ```  Note: sizeTracker is nothing but a simple in memory representation that tracks the size. Implicitly, the last window to quit wins. All the above points should be solved by adaptation of this pseudo code. And it will comply with the windows convention (and what one would naturally expect from any well behaving application). Should fit well with general Linux desktop managers as well.   If for whatever reason, a platform with weird conventions (perhaps the Mac? I have no idea) requires different handling, they can very well be hooked in the above pseudo code.
16123|@prasannavl I am not entirely convinced that the one issue is the same as the other. your issue talks about the fact that when you maximize a window from a certain size and then restart and restore, the previous size is not restored. I see this as an actual bug we should fix eventually.  The other point is about how new windows should be sized when you open them. I am not sure there is a solution that makes everyone happy. Yes, you could just pick the window size of the window that is the last active one, but from a UX perspective we decided not to create a window with the exact same dimensions because it can make it hard to actually notice that you have 2 windows open now. That is why we decide to fall back to the default size and you will notice that any further window you open from that point will cascade the window a little bit so that they are not exactly overlapping.  Now, you could also argue that maybe the window that opens should inherit a size that was associated with that folder when you previously opened it. Imagine we would remember each window dimensions for each folder opened and restore it if you ever open that folder again. Still, this might not fix the UX issue of overlapping windows.  I would be open to discuss other solutions but I would think that discussion should happen in another work item.
16124|:100: , I am very annoyed by intellisense popping up when deleting text.
16125|@bpasero The problem you mention can be solved this way, in a manner to keep everyone reasonably happy until more advanced configurations are added (if at all worth going through the trouble, which I don't think it is if the below can be implemented).  If its the first window opened by the application, use the same size.  If it is indeed a new one, cascade x, and y a bit. Now in order to do this, first check x + width, and y + height to make sure its not outside bounds of the visible screen. If it is, reduce the cascade values by half and try again, until its either zero, or succeeds. If all fails, now do the same thing again, with negative cascades as it approaches zero again.   The nifty little trick here, will be that, `don't use the sizeTracker.setAll` pseudo code above on window creation when its a non-first window. It will however work during resizes. So, the cool thing is, now the user size will always be respected, even though new windows cascade.  The new window's locations never gets saved. But the moment a user manually touches the window size, (by resize, movement etc), it gets saved as the new size.
16126|"PS: You could also very well, just let the platform's window manager handle the secondary window positions, by ignoring the x and y completely. Windows should handle the cascading on its own (Win32 should, but not sure if electron overrides it) I would consider that as a first stage to the solution.   **Aside:** Isn't that how ""Windows"" was historically named? It managed ""windows"" before all the OS intricacies came into play. Let's just get out of the way and let it do what it does best! ;)"
16127|I am quite sure that the framework we use (Electron) on Windows does not provide any functionality to position the window in a clever way, but I can try again.
16128|I haven’t look at Chromium49 smooth scrolling yet, but it seems to me that this wouldn’t help VSCode scrolling that is managed using CSS `transform3D` and absolute positioning.
16129|@jgillich this has already been elaborated here https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005, hasn;t it?
16130|@alexandrudima @dbaeumer  Are there anything I did not cover?
16131|// CC @asthana86
16132|Looks like this issue was created for testing purposes only, closing.
16133|@bpasero While I'm not highly familiar with electron at the moment, I do know enough to agree that it doesn't provide any clever positioning. But what I was pointing at was that, does electron let the platform manager natively handle its position, or does it override the native functionality and thereby dum it down?  If its the former, then should be easy or I'm afraid the logic that I mentioned using the cascade, or similar has to be implemented. But considering the fact that you already do cascade it, can't we just use the same cascade logic that you already do, but just with the saved size instead of the default fallback size?
16134|@egamma Well, given how vital extensions are to a editor like VS Code, I couldn't quite believe what I read and had to ask for confirmation.
16135|This issue was moved to Microsoft/vscode-cordova#88
16136|The list of recommendataions is a curated list and cordova is not on this list, so this works as designed.
16137|@hulang actually all you need is to install the jquery.d.ts from the definitly typed repository, pls see https://code.visualstudio.com/docs/languages/javascript#_snippets-for-javascript.
16138|@alfalabs reopening, but now please provide detailled information about your setup: - which extensions do you have installed - attach the html file that caused the hang
16139|+1
16140|I just wanted to say exactly same. It's been pretty common in Windows to cascade windows. I was saying use same size, but i didn't say anything about same position, right because of cascading.  So there is a logic that could work flawlessly 1. First instance should open with saved size, saved position and saved state (maximized/restored). 2. Second instanced should only utilize saved size, but not position and state. If it's not possible to cascade it, then just use random position. State, though, is debatable. Some might would prefer all instances maximized.
16141|Yes, it worked for me too (I did a complete Windows reinstall)
16142|Just to make sure we are talking about the same, CSS variables would enable support for   https://drafts.csswg.org/css-variables https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables https://www.polymer-project.org/1.0/docs/devguide/styling.html  ![image](https://cloud.githubusercontent.com/assets/863731/14228451/bdb13682-f915-11e5-99c7-5b62b2fd2ea0.png)
16143|"@weinand I've tested this with the release 0.10.13-insider from March 29th and it does not seem to be resolved: If I put a breakpoint in the line before ""debugger"" it actually stops, but at the call to System.register in the transpiled code:  ![image](https://cloud.githubusercontent.com/assets/16635831/14228475/2e3ec77a-f916-11e5-83ba-ef8aa68d4830.png)  Sorry if I'm being to impatient!"
16144|Using polymer which is a mix of html and javascript, shift + option + f doesn't work on it.  You can use this as a test base for formating https://github.com/PolymerElements/polymer-starter-kit
16145|.deb packages are coming in the upcoming release which will installs a .desktop entry as well as a bin command. It's currently available on the insiders build: http://code.visualstudio.com/insiders
16146|duplicate of #4769
16147|@mtrivolli as I said: this is in the alpha release, **not** in the insider release. And I did not say that the issue is resolved.
16148|Ping @bgashler1
16149|@jgillich I think there has been a slight misunderstanding: If you read one of the [following comments in #60](https://github.com/Microsoft/vscode/issues/60#issuecomment-162411071), it says that you just need to modify a configuration file for it to work. I've just added 3 lines to the configuration file and that enabled the extension manager!
16150|Has been fixed for our next release. You can try it out from our insiders release: http://code.visualstudio.com/Download#insiders
16151|@xianghongai so in what encoding is this file?
16152|@apalchys there can be many reasons why moving to trash does not work (e.g. you are on a SUBST drive, or mounted network). The bug that deleting permanently fails is fixed for our current release. You can try it from our insiders release: http://code.visualstudio.com/Download#insiders
16153|Something seems to trigger a DELETE event on c:\Users\Some.User\src\some-project. Can you share the workspace with me and the setup to reproduce?
16154|Allright, let me update the issue to reflect the discussion.
16155|Or PowerShell
16156|Duplicate of https://github.com/Microsoft/vscode/issues/241
16157|Please reopen if this still happens with our latest cli work.
16158|Thanks, @weinand , for your very informative answer!  With your information I was now able to update the source map paths assignment. I uploaded an update to GitHub to reflect the changes I made.  However, the TypeScript source is still not used by the debugger:  ![typescript](https://cloud.githubusercontent.com/assets/9283914/14231895/c1f31f1a-f994-11e5-8496-eec9f564063b.png)  Is that the bug you have spotted? Or is it due to #2544 ? Shouldn't we re-open #2544 anyway? It contains action items to solve an issue which haven't been implemented yet. The feature request therein is still valid.
16159|Does electron API method `app.addRecentDocument()` not working ? I tried to debug the app but didn't find how to debug other than UI thread...
16160|As a Chinese user who do l10n work for Mozilla Firefox, I strongly suggest you DO NOT translate command strings in command panel. I have to try to translate all the command I want to use to Chinese exactly identical to your translation, that is very painful. You can just give out an explanation which is shown when mouse is on the command name and just translate the explanation.
16161|@bpasero Confirm. it is fixed in 0.10.13-insider.  Thanks.
16162|I agree. Atom let's you also install extensions from the command line with the `apm install` command. Something similar would be nice for VSCode as well. I use OS X, Linux and Windows, keeping my settings in sync is possible with Git, but the extensions has to be managed manually.
16163|It does but there is more requirements for this to work on Windows.
16164|The `task` jumplist seems to work (where you can ask for a new window). Why is it different ?
16165|Yes, tasks seem to be a different concept that work without issues.
16166|It's either    1) An issue with vscode in the registry 2) Electron is failing at [SHAddToRecentDocs](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762105%28v=vs.85%29.aspx). Problem with SHAddToRecentDocs is that it doesn't return a result so it's hard to determine whats going on.  or both.
16167|same issue is happening to me on atom too https://github.com/atom/atom/issues/4241#issuecomment-204981921
16168|See https://github.com/atom/electron/blob/master/docs/tutorial/desktop-environment-integration.md#windows-notes
16169|This recently came available in Electron 0.37.4 but I am really wondering how this feature would work together with horizontal scrolling?
16170|@bpasero Override when `fn` key is pressed maybe? :smile:
16171|@bpasero Just tried with latest Atom beta and i can get files to appear in the jump list but only using the file menu - https://github.com/atom/atom/issues/4241#issuecomment-204994777
16172|VS Code switched away from using Squirrel for Windows for installation so it is well possible that Atom includes installation procedures that make it possible to show files in the jump list and VS Code's installer needs to do the same. Would still like to find out what exactly is needed.
16173|Macros (q) and Multiline editing (v<number>j>) are needed.  Neovim integration would be awesome.
16174|Sorry guys, I've put xflux launch command to my ~/.profile file I think, that vs code re-execute this file and that's why xflux starts again
16175|After using @danlofquist and @peterblazejewicz solutions, I had to reinstall VS Code C# extension to get it working. Thanks!
16176|Hi @Tyriar, I just try again and it is still reproduceable (at least on my machine :smile:)  Here's a screencast: ![vscode](https://cloud.githubusercontent.com/assets/679475/14234319/52fa6a54-f995-11e5-822b-4780f27b8e83.gif)
16177|"@isidorn I _think_ we have this fixed.  The fix behaves correctly in the Insiders build but not the Alpha build.  Strangely, it appears the Insider build at 0.10.13 is a bit ahead of the Alpha build at 0.10.12.  So I'm hoping that the Insiders build has been ""fixed"" whereas the Alpha build hasn't.  If this remains the case, I would consider this bug fixed.  **My only ask is that the debug protocol docs be updated to clarify this message ordering issue.**"
16178|@isidorn your analysis makes sense but if I send the 'initializedEvent' **after** the 'InitializeRequest' has returned the Capabilities I see in Mock Debug that the 'LaunchRequest' arrives before the 'setBreakpointsRequest'. As a consequence no breakpoints are hit because the program has already terminated.  So here is the old sequence for Mock Debug:  ``` initializeRequest     send InitializedEvent     return Capabilities setBreakPointsRequest launchRequest configurationDoneRequest ```  This sequence looks already broken because the 'configurationDoneRequest' comes after the 'launchRequest'. But since 'setBreakPointsRequest' comes before 'launchRequest', breakpoints are hit.  If I send the InitializedEvent after returning the Capabilities I see this sequence:  ``` initializeRequest     return Capabilities     send InitializedEvent launchRequest setBreakPointsRequest configurationDoneRequest ```  This sequence is even more broken: here the 'setBreakPointsRequest' comes **after** the 'launchRequest'.  I will fix the protocol doc and I will create a [new issue](https://github.com/Microsoft/vscode/issues/4902) for the ordering problem.
16179|@SetTrend I've pulled your changes and did a 'gulp tsc' on Windows 10 but the `sourceRoot` in the map file still lacks another '..'. After adding it, VS Code opens the TypeScript for me:  ![2016-04-03 22-03-33](https://cloud.githubusercontent.com/assets/1898161/14234646/16f401ca-f9e8-11e5-9153-a336fff2157a.png)  BTW, the trace output in your screenshot looks different then my Windows 10 screenshot:  ![2016-04-03 22-06-49](https://cloud.githubusercontent.com/assets/1898161/14234662/76d3f758-f9e8-11e5-8846-0602aaa36f87.png)  Your 'src' paths on the right hand side start with 'file://' whereas mine do not. This might be another issue...
16180|"@weinand Hehe, that is why we have code in the PowerShell extension to capture ""launch info"" from the `launchRequest` message and not actually launch until we've received both messages (launchRequest and configurationDoneRequest) regardless of the order they come in.  That said, this is not an ideal situation."
16181|Would this feature allow me to exclude *_/_.css but not *_/_.cssx.css? Can anyone think of a way this could be done now?
16182|"Strange... Perhaps it's because I have some [spaces in the path (see this issue)](https://github.com/nodejs/node/issues/5060)?  Actually I found the three `""..""` in the path alright. Have you seen my code in the `tsc` task:  ``` js .pipe(pi.sourcemaps.write(path.relative(dest, mapsRoot)   // relative to gulp.dest() folder                          , { includeContent: false                            , sourceRoot: path.relative(mapsRoot, tsRoot)  // TypeScript source root, relative to maps root                            })) ```  The path is getting calculated. The trace log gives the correct path to the TypeScript file. It just isn't used."
16183|@SetTrend yes, the space in the path could be the reason why the 'src' pathes start with 'file://'. I will try to reproduce.  I'll try again to explain why 'sourceRoot' is wrong (no, I will not debug the code in the gulp script because VS Code only uses the resulting source map ;-)  Here is the concatenation based on the source map v3 spec:  ``` src = <location of source map> + <sourceRoot> + <sources entry> src = 'output/maps/js/X' + '../../../src/typescript' + 'X/Test.ts' src = 'output/src/typescript/X/Test.ts' ```  The resulting path still has an 'output' segment.  And the trace log shows the erroneous 'output' segment as well.  Here is the result of the correct input:  ``` src = 'output/maps/js/X' + '../../../../src/typescript' + 'X/Test.ts' src = 'src/typescript/X/Test.ts' ```
16184|@SetTrend no, spaces in paths do not result in pathes starting with 'file://':  ![2016-04-03 23-27-42](https://cloud.githubusercontent.com/assets/1898161/14235069/001d9af4-f9f4-11e5-8b73-ab3523e0217d.png)
16185|My big 4 (before anything else imo): - [ ] open - [ ] wq - [ ] yyp - [ ] line number command support like `:2,10dd`
16186|Me too
16187|April release will have a new flag `autoReveal` (default: `true`) to control this behaviour. In addition there is a new command `Show Active File in Explorer`
16188|The repo has been moved to https://github.com/vscode-restructuredtext/vscode-restructuredtext and preview feature has been added since 0.0.7.
16189|Failures are caused by 94ccb58... Use concrete types
16190|// @asthana86 - pls adopt
16191|This is by design, you need to open a folder to perform all file operations.
16192|@joaomoreno We talked about this
16193|Very creepy yeah
16194|cc @bpasero any thoughts?
16195|The TS/JS language service does not yet support Rest/Spread properties, pls see https://github.com/Microsoft/TypeScript/issues/2103.
16196|The change is to let `saveAs()` go through the same code as `TextFileEditorModel.save()` so that appropriate events are being fired. This fixes two issues: - API listeners will get notified on text document being saved both for untitled documents as well as existing documents that get `saved as` another file - our save participant can participate and trim trailing whitespace if this is configured for the resulting file  This needs some verification from non-extension-side: - you can still save untitled files - you can still save files as another file name - you do the above both in case the target exists as well if it does not exist - the UI updates accordingly when the save is done - any previously selected encoding is carried over to the new file  And from the extension-side - you get the event for untitled files as well as files that get `saved as`
16197|Exactly -- that's why I filed a bug report, because Code mishandles version-controlled files. Note that what git actually does is to add the file to version control, whilst Code removes it from version control. As a user, I expect renaming a file to have no side-effects -- certainly not to change its state in version control.
16198|Thank you for filing this. Duplicate of #313
16199|The dock issue might well be https://github.com/Microsoft/vscode/issues/4443  I never saw a reload in selfhost crash the extension host in dev though...
16200|> How are you currently filtering the proposals against the text that is being completed? What's the goal for filtering, just to discard any completions that don't seem the follow from the previous text?  Yes, it's about discarding completions that don't match the previous text. The actual filtering is an [OR](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/common/modes/modesFilters.ts#L35) of(prefix, substring, camel case) and at a later step the best matching result is picked from the remaining items.
