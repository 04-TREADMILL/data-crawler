27401|@isidorn FYI.
27402|Can you please file corresponding requests for C++ & Go in their repositories.
27403|"@sandy081   ``` Version 1.3.0-insider Commit de66522e06d74752d48d92e934dcd026050355ba Date 2016-06-24T05:07:35.941Z Shell 0.37.6 Renderer 49.0.2623.75 Node 5.10.0 ```  This can use ""*.ts"". I think all insider verions has fixed this issue."
27404|Thanks for confirming. Closing this.
27405|I found a workaround - use `ln -s`.
27406|@bpasero I consider this different from #2686. This is about having multiple OS windows with one VSCode instance. One sidebar, one command bar and being able to drag editors out from one OS window into another OS window.  Do you think the work done for #2686 will also allow this?
27407|This gets filtered in the UI. We should remove that filtering code.
27408|Check it out: now you not only get notifications, but how many and you'll be able to see exactly which extensions need update.  ![image](https://cloud.githubusercontent.com/assets/22350/16334871/de7d32c4-3a03-11e6-92f9-199948a72eca.png)  This feature is under heavy changes, so if you don't see this behaviour yet, wait a day or two.
27409|Good ðŸ‘€
27410|This doesn't seem to be a problem with VS Code at all, but with git and your machine. If you run those commands from the command line, do you get the same behaviour? If you shutdown Code and run them, do you get the same behaviour?
27411|Dups https://github.com/Microsoft/TypeScript/issues/9081.   Closing since this needs to be addressed in TS land.
27412|@NikosEfthias no we don't. We only spawn gulp as a separate process.
27413|Thanks @joaomoreno for the claryfication :) It must be something with my installation then because I don't get the count on the vertical bar icon.  ![image](https://cloud.githubusercontent.com/assets/1633401/16335187/a4ef6c7a-39db-11e6-8235-4c859f809c8d.png)
27414|Assigning first to @weinand to add protocol additions - if all looks good there then I can make changes on the vscode side.
27415|"I don't know if it is the right place to ask, but does anyone know how to prevent vscode to STOP formatting html code like  ``` html <table        id=""tablps""        name=""tableHeadings""        onclick=""sel""        class=""table-striped table table-responsive"" > </table> ```  to this version.  ``` html <table id=""tablps"" name=""tableHeadings"" onclick=""sel"" class=""table-striped table table-responsive"">  </table> ```"
27416|@dbaeumer The JSON language service just validates the documents given by the language client. It currently does not remove the makers when the document is closed. Dirk, let me know if that's what is expected from the language service.
27417|Duplicate https://github.com/Microsoft/vscode/issues/7493
27418|@nojvek please correct me if I'm wrong but the purpose of the `afterEdit` flag is to help the adapter distinguish between the following two cases: - user has modified breakpoints without editing the underlying source - source was edited which results in new breakpoint locations
27419|Fixed in master
27420|https://github.com/Microsoft/monaco-editor/issues/22 thinks that the z-index is the problem.  @joaomoreno You were involved in that change...
27421|You don't have it yet.  ![image](https://cloud.githubusercontent.com/assets/22350/16335826/22e03e20-3a09-11e6-99ca-12e15eaebbfc.png)  Just be patient, it will come with the next update.
27422|We can simply revert ff9bf52. Should we?
27423|Just removing the z-index seems to fix the issue. Do you know why it is there?
27424|I just tried version 1.2 with the settings as in 1. above. Still does nothing. Should the newer version have fixed anything?
27425|No idea...
27426|Since this is still under discussion, I reverted Problems views to be consistent with other bottom views.
27427|No, the only change we pushed was about warning if the syntax of `http.proxy` was invalid. Unfortunately we still don't have a fix for your issue.
27428|@jrieken Could you please provide a link?
27429|Thanks for looking into the issue, @aeschli !
27430|there is another duplicate issue https://github.com/Microsoft/vscode/issues/6992 and I've put my knowledge there. `markdown-it` (our current markdown engine) does support generating scroll map for Editor's to implement sync-preview. The only thing left here is adding handlers inside TextEditor.
27431|It happens in both stable and insiders. Please note I just updated them to the latest version and applied the setting regarding 64 bit cmd . I also updated the OS. The error message seems to be different now:  ![vscode](https://cloud.githubusercontent.com/assets/7761828/16339317/4f4b82a8-3a22-11e6-9254-6624d40420d6.PNG)  ![vscodeinsiders](https://cloud.githubusercontent.com/assets/7761828/16339324/58f0aec8-3a22-11e6-9595-e02085e4ab74.PNG)  ![capture](https://cloud.githubusercontent.com/assets/7761828/16345983/35f2fd86-3a45-11e6-891f-a6edce807307.PNG)
27432|Thank you for getting back to me. I generated the .js and map.js files into a /lib directory. Now when I run the Attach I get trace information with successful mapping. It does not stop on the breakpoints though.  ![sourcemap](https://cloud.githubusercontent.com/assets/9270069/16339595/6f47e09e-3a1b-11e6-8a89-3901a6dde822.jpg)
27433|VS Code might have the same problem as Atom that all the extensions will have to be recompiled if the user migrates from 32bit to 64bit so that might actually be non-trivial to do.
27434|I go back and forth now between Visual Studio 2015 and Visual Studio Code because of this one issue of not being able to find line-breaks and replacing them.  Any potential upcoming fixes for this?
27435|@bpasero Adding you as an assignee in case you want to fix this for June. Else, unassign yourself and put it for July.
27436|Hi Andre,  That is true. It's basically signaling the debugAdapter that the sourcemaps won't be accurate so wait till the script is parsed again.  The premise is this:  The v8 vm, chakra, clr and newer VMs can hot load source with their debug api's. Having VScode hot load code is a very attractive feature.  On Friday, June 24, 2016, Andre Weinand notifications@github.com wrote:  > @nojvek https://github.com/nojvek please correct me if I'm wrong but > the purpose of the afterEdit flag is to help the adapter distinguish > between the following two cases: > - user has modified breakpoints without editing the underlying source > - source was edited which results in new breakpoint locations >  > â€” > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub > https://github.com/Microsoft/vscode/issues/8077#issuecomment-228312531, > or mute the thread > https://github.com/notifications/unsubscribe/AA-JVMB4s5JgvZs1CbjSCMBLveUAwBx7ks5qO7K1gaJpZM4I9XTk > .
27437|I think excluding private/internal scheme file events at extension host does not look like a cleaner. As most of the users are interested to see the problems in preview / diff editors. Asking all extensions to do the clean up does not also help.  Here is another idea: - For all internal (private, vscode) and inmemory scheme resources, let us (say IModelService) do the clean up during model dispose phase.   I think this is cleaner and simpler solution.
27438|Salsa is part of TypeScript (basically the `allowJs` flag): https://github.com/Microsoft/TypeScript
27439|> tab-complete action  Not so sure what that means?
27440|Yeah, our decorations are implemented like that
27441|Not sure about `onClick` but we could enrich the [`TextEditorSelectionChangeEvent`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L511) with some sort of hint
27442|> For all internal (private, vscode) and inmemory scheme resources, let us (say IModelService) do the clean up during model dispose phase.  That's were we came from ;-)  I think it's OK to exclude some documents from the extension host but only if they are **readonly**, like left-hand-side diff, synthetic configurations document, etc.
27443|"@bpasero @alexandrudima I'm really confused: aren't keys named `{{language}}.something` in the settings file expressing per language settings? Example:  [JavaScript Configuration - Language specific settings](https://code.visualstudio.com/docs/customization/userandworkspace#_settings-file-sections)  ``` json // Defines space handling after a comma delimiter ""javascript.format.insertSpaceAfterCommaDelimiter"": true, ```  More specifically I saw an `html.format.wrapLineLength` prop in the default settings and tried to apply it to JS as `javascript.format.wrapLineLength` but it doesn't work. @nchammas also reported in #6925 that it doesn't even work for HTML.  ``` json // Maximum amount of characters per line (0 = disable). ""html.format.wrapLineLength"": 120, ```"
27444|Ah, thanks, I didn't see that one! Could you add the integrated-terminal to #547? I missed #547 because I only looked through all the integrated-terminal issues for duplicates.
27445|I tried excluding from extension host but I felt that is not the single point of place.  - I excluded documents from all events (add, change, remove), Otherwise some extensions are able to validate. - Excluding from all events causing some extensions to break. They are looking for document data on active editor change.  Probably we can discuss on Monday and figure out a solution.
27446|I would be also interested to know the story behind coming from cleaning up during model dispose :)
27447|this can probably be closed now:  https://github.com/Microsoft/monaco-editor
27448|@kieferrm fyi
27449|By analyzing the blame information on this pull request, we identified @egamma and @bpasero to be potential reviewers
27450|Hi **@shahmirn**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
27451|I created a symlink and it worked for me: http://stackoverflow.com/questions/36508177/visual-studio-code-cannot-detect-cygwin-git-exe-path/37980938#37980938
27452|Is there a Developer's Guide available to set up the environment? Perhaps debugging on my machine can help solving that issue.
27453|@davidanthoff done :smiley:
27454|@profabe that won't help much beyond what you can already do. The terminal process ([terminalProcess.js](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/terminal/electron-browser/terminalProcess.js)), the thing that's crashing, cannot be debugged as it's running in a different process.  Something you could do is make sure that `ENV` in [terminalService.ts' `createTerminalProcess function](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/terminal/electron-browser/terminalService.ts#L187) is being filled as expected, in particular the `PTY*` environment variables. You can do this through devtools (Help > Toggle Developer Tools) by adding a breakpoint in `createTerminalProcess`.  You can see in [terminalProcess.js](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/terminal/electron-browser/terminalProcess.js) that `%PTYSHELL%` is called, passing in the args `%PTYSHELLARG1%`, `%PTYSHELLARG2%`, ... and the current working directory is set to `%PTYCWD%`.
27455|"I'm investigating this for the [julia](https://github.com/JuliaEditorSupport/julia-vscode) extension.  I generally see two possible implementations right now: 1) something that uses the terminal support from #143 and #6458, and has no debugger integration. 2) something fancier that is integrated with the debugger.  For 1), all I would need is some API that I can use from my extension that opens up a new terminal window in the #6458 UI. The API should allow me to just pass in a command line that should start for that terminal (i.e. that command line would come from my extension call, not from some global terminal configuration). Ideally the API would also allow me to somehow ""track"" that specific terminal, i.e. it would be great if my extension would get events when the terminal is closed/hidden/terminates etc. @Tyriar is some of that maybe even already possible in insider builds? My extension would then add commands like ""julia: open REPL"", ""julia: send current selection to REPL"", ""julia: send current file content to REPL"".  Sending individual code to this julia instance would actually not work via just pasting that code into the REPL. instead my extension would communicate with that julia instance via a socket. This would enable some cool things, for example one could execute a specific line of code in a specific module in the julia instance, something that would not be possible if the ""send to REPL"" command was a stock VS code command that just sent the code via the STDIN/STDOUT to the julia REPL.  I'll have to think a bit more about 2). But my gut feeling is that something along the lines of @weinand would actually be the right design. I.e. the julia REPL is actually started via a debug adapter, and that this debug session is just active for the whole duration of the julia REPL running. The UI of this julia instance would ideally still be based on the terminal UI (the julia REPL is pretty cool and I would hate to lose its features).  I don't know whether there is enough interest in VS Code in the julia community to ever get something along the lines of 2) off the ground, but something like 1) seems pretty straightforward, so I would actually prefer if we could somehow enable that scenario first and then worry about 2) later."
27456|"I see that UI now on Windows. The drop down shows things like ""1: xterm"". Why ""xterm""? I'm using PowerShell, might make more sense if that term shows up (like ""bash"" in your screen shot)."
27457|@davidanthoff thanks for the quick feedback, I'll see if I can look at this for June https://github.com/Microsoft/vscode/issues/8116
27458|That was fast!
27459|@blachawk Try Notepad++ - as a hyperfast application it's much more suitable as a regex evaluator than VS2015 is)
27460|@dbaeumer finally I've reached a state which can push this forward (I hope) and published it in the mentioned post. Thank you for the motivation!
27461|Sorry. I want an event that happens when a user presses tab when the completion window is open, and I want to have a string passed as an argument which is the text that was inserted.
27462|Yeah, that would be great.
27463|@bpasero Can you please restore the original title of this issue and reopen it? There are 2 separate logical issues: 1. Refreshing the explorer pane via keyboard command. 2. Keeping the explorer automatically in sync with the file system.  Item # 1 is the subject and original title of this GitHub issue, but it was taken over by the other issue. That the explorer should always stay in sync with the file system is a separate issue for the following reasons: 1. It doesn't. 2. There's no telling if / when it will. (And there doesn't appear to be any activity on it since March 24 except for adding it to the _Backlog_ milestone.) 3. There's already a command / control to refresh the explorer for whatever reason (we've already discussed a great one ;) -- problems with syncing). This GitHub issue is about activating it via keyboard instead of pointing device.  Thanks!
27464|"@bpasero I've added a relayout call, but I'm not sure if that's the right way to fix this issue.  Also the code  ``` aria.status(message);  ```  seems to be obsolete, if we show the results in a div with   ``` aria-hidden=""false"" ```  What do you think?"
27465|A translation/localization API (so that extensions could install support for new locales) would be really neat.
27466|"So I took a further look of the request / response records, and it seems that VSCode is not sending the correct file name for the `navto` command:  [open a/main.ts, and try to search the `afunc` symbol]  ``` Sending request: navto (33). Response expected: yes. Current queue length: 0 Arguments: {     ""file"": ""c:/Users/zhengbli/Documents/playground/testMultipleProjects/a/main.ts"",     ""searchValue"": ""afun"" } ```  This is the correct behavior.  [Then open b/main.ts, and try to search the `bfunc` symbol]  ``` Sending request: navto (37). Response expected: yes. Current queue length: 0 Arguments: {     ""file"": ""c:/Users/zhengbli/Documents/playground/testMultipleProjects/a/main.ts"",     ""searchValue"": ""bfun"" } ```  This doesn't seem right, as the `file` argument is still the a/main.ts instead of the current file. Then the symbol search won't be in the right project."
27467|Ooops, github emails went to spam folder :(  Yes I use that extension, latest version of VSCode fixed it 1.2.1  Thank you and sorry for not responding sooner.
27468|"@bpasero Any more updates on this? I see you tagged ""needs more info"" -- what can I do to help you diagnose? This is still happening very frequently for me."
27469|@mrmlnc Thanks for the well documented Pull Request.  I've looked into the emmet preferences API and I don't fully understand your explanation of why you did not use `emmet.loadPreferences()`. It takes a JSON object with the preferences that could be taken from the VS Code configuration. `emmet.loadPreferences` calles `preferences.load` which calls `preferences.set` which sets the value of the preference.   If `emmet.loadPreferences` has limitations why do you not just iterate over the VS Code emmet configuraton settings and then call emmet.preferences.set(key, value) for each setting?
27470|I discovered somethign odd, when debuggng: I can not set a breakpoint at line 146 and 147. Only before and after (sourcemap issue?). Also the env variables are not available in the watch view Did I do something wrong? By the way: This screenshot was taken with stable,   ![capture](https://cloud.githubusercontent.com/assets/7761828/16351741/34ce2642-3a68-11e6-8f28-479d254a4ce2.PNG)
27471|"I tried using strace to attach to what I assume is the renderer process (I guessed that the one with highest CPU would be the renderer) and I found that right before vscode freezes, this process crashes, and it looks like it sends a crash report. Is there some data I can give to you to help track down the crash report on your end? The `vscode_sessionId` is given from strace as ""890d6112-675f-40fb-89df-c00cc4a7"""
27472|"I have a similar problem with two other apps: GitHub ""Atom"" editor and ""Brave"" browser. I believe all three apps use the ""Electron"" shell and ""Squirrel"" for software updates."
27473|@gravejester I meant that `$?` is not present in the test case used in the two comparison links in the description.
27474|I've experienced some issues before with sourcemaps, maybe you could try looking at the .js file and try using the variable name used there?
27475|It's picking up title's style due to the title scope.  ``` .monaco-workbench > .part.editor > .content.multiple-editors .one-editor-container .title, .monaco-workbench > .part.editor > .content.multiple-editors .one-editor-container .title .title-label a, .monaco-workbench > .part.editor > .content.multiple-editors .one-editor-container .title .title-label span {     cursor: -webkit-grab; } ```  /cc @bpasero
27476|@jrieken I just sent a request to our icon graphic design team.  They should be on it soon :)
27477|"The short term solution is probably to remove the ""title"" scope as it seems incorrect, in the long term the title classes should be less generic so they don't mess with the grammar styles."
27478|"Now I see, set throws an exception, when the setting is not defined...  ``` javascript             Object.keys(prefs).forEach(function(k) {                 var v = prefs[k];                 if (!(k in defaults)) {                     throw new Error('Property ""' + k + '"" is not defined. You should define it first with `define` method of current module');                 } ```"
27479|OK, I now catch the exception when the preferences isn't defined yet and then I define the setting.  I also use the approach to merge in the editor settings before an emmet operation and then I reset them after. This simplifies the implementation. Please review.
27480|By analyzing the blame information on this pull request, we identified @kisstkondoros to be a potential reviewer
27481|@bernardocaldas @DonJayamanne you can try this out in Insiders tomorrow via the command palette, there is no keybinding though as everything seems to be taken (modifiers+enter, ctrl+shift+r)
27482|Added support for settings thanks to PR #7926.  I'm closing this issue, please file new issues with features that you are missing.
27483|I've merged and tweaked the PR. More PRs :heart:
27484|Emmet preferences are now supported in the settings file. I assume disabling emmet vendor prefixes can be done through a setting?
27485|I can't reproduce on Insiders, two finger trackpad scroll seems to work just fine? OS X Yosemite 10.10.5 on a 2014 MacBook Pro.
27486|@Tyriar, does this change also allow an extension developer to send some text to the terminal window? What I would like to do is, use the terminal to for debugging python code.
27487|New to php development and am using wamp, I'm getting the same message. Not sure how to validate the php file or use the setting exactly. Can someone give me the step by step version so my wordpress themes can update?
27488|It sends the selected text in the editor only, it's a command so it doesn't take arguments. I think https://github.com/Microsoft/vscode/issues/547 is what you're after.
27489|This seems to be working fine using the new xterm-level copy and paste. The keybinding is currently <kbd>ctrl</kbd>+<kbd>ins</kbd> for copy and <kbd>shift</kbd>+<kbd>ins</kbd> to paste but I plan on making this configurable in https://github.com/Microsoft/vscode/issues/6451 and https://github.com/sourcelair/xterm.js/issues/118
27490|@egamma, unfortunately, we are both wrong.  ### My version  Method `emmet.loadPreferences()` only works with the values described in the documentation (full list [click](https://gist.github.com/mrmlnc/406dfab83c4cafcc1fdc1e0e5cd2abfb)). Defining settings (`emmet.preferences.define()`) need only for undocumented settings (for example, `less.propertyEnd`). For described values in the documentation enough use `emmet.preferences.set()`. Thus, can only use the method `emmet.loadPreferences()` for load preferences and `emmet.preferences.reset()` for reset preferences.  ### Your version  More likely, most users will not use the Emmet preferences and syntaxProfiles. Thus, the setting and resetting of settings when each action is not the best idea (deoptimization?).  For example:  ![2016-06-25_11-22-02](https://cloud.githubusercontent.com/assets/7034281/16355694/4414ac48-3ac7-11e6-9858-425994f3e007.gif)  ### My proposal  Use the methods `emmet.preferences.reset()` and `emmet.loadPreferences()` once during initialization and when changing settings. PR or demo repository? :construction_worker:   P.S.: Sorry for my English.
27491|@nojvek I don't think that the debugAdapter is involved here. What is needed is access to the language model in the debug console (and all other places where language specific code is edited). The intellisense experience in the debug console should be the same as in the editor (and the editor doesn't use the debugAdapter for this).
27492|We have this since merging the MD extension to master: `vscode-light`, `vscode-dark`, or `vscode-high-contrast` (https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/html/browser/webview.ts#L46)
27493|@aeschli Is this in reach or still needed that now things became extensions? I'd like to fix #6320
27494|Sorry, again we didn't get to this... Tho we added a [`storagePath`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2967) property for those extension that want to store state that doesn't fit into mementos but needs files/folders
27495|@bpasero Is this low hanging? Can I use the usual trick with a ResourceEditorInput?
27496|Closing with the option to revisit the fix
27497|"I have the same issue on Linux Mint debian edition (LMDE 2 Betsy) and deb package Tried to install with GUI and via command line, no luck.  messageService.ts:119Error from the extension host: spawn /usr/share/code/code (deleted) ENOENTe.doShow @ messageService.ts:119 ipc.cp.ts:156IPC ""Watcher"" errored with Error: spawn /usr/share/code/code (deleted) ENOENT ipc.cp.ts:156IPC ""Git"" errored with Error: spawn /usr/share/code/code (deleted) ENOENT  Now getting same problem on 1.2.0 after uninstalling 1.2.1 and reinstalling 1.2.0"
27498|@mrmlnc    > More likely, most users will not use the Emmet preferences and syntaxProfiles. Thus, the setting and resetting of settings when each action is not the best idea (deoptimization?).  I made some small changes so that there is no overhead when the user doesn't have emmet preferences. I must say I like the simplicity of the current code compared to the original PR. However, if the simple code is not correct, then it needs to be fixed :smile:.   I'll also implement a solution that uses your approach and then we can compare. OK?
27499|I guess we're not going to get any acceptance on this for any kind of meaningful flexibility.  I hope we don't have to end up making an accessibility fork of VS Code.
27500|@egamma, good idea.  >  I must say I like the simplicity of the current code compared to the original PR. However, if the simple code is not correct, then it needs to be fixed :smile:.  The thing is that i originally thought to allow users to change all settings. But looking at the code of Emmet i realized that they are meaningless.  My vision settings for Emmet: [mrmlnc/vscode/../emmetActions.ts](https://gist.github.com/mrmlnc/3345b7d2a709e125d517e91ad1b9ca6f)
