20101|+1
20102|@rkeithhill yeah, it is in the breakpoints veiwlet :) Today is last game of endgame, which means we only look at critical bugs, thus I will investigate why is this not fixed on monday, though that means it will only be available in our may release. I myself have seen this working in action. Are you sure the adapter sends verified false for these breakpoitns?
20103|I like your approach of deriving the font size and line height from the editor settings more than introducing separate settings.
20104|"It's likely a bug instead of a feature. Per current implementation of TextFileService,  _[electron-browser/textFileServices.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/electron-browser/textFileServices.ts#L51)_  ``` public beforeShutdown(): boolean | TPromise<boolean> {     super.beforeShutdown(); // implemented in browser/textFileServices.ts      // Dirty files need treatment on shutdown     if (this.getDirty().length) {             ...             return this.confirmBeforeShutdown(); // we still have dirty files around, so confirm normally     }     return false; // all good, no veto } ```  _[browser/textFileServices.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/textFileServices.ts#L235)_  ``` public beforeShutdown(): boolean | TPromise<boolean> {     // Propagate to working files model     this.workingFilesModel.shutdown();     return false; // no veto } ```  We'll see that `workingFilesModel` persistence happens before `confirmBeforeShutdown`. However, in `confirmBeforeShutdown` we might update `workingFilesModel` if there are still some unsaved newly-created files, but the update will be lost as we won't save `workingFilesModel` to local storage anymore.  IMHO, a proper fix is moving `workingFilesModel.shutdown` from event `onWillShutdown` to event `onShutdown` since the definition of `ILifecycleService.onShutdown` is `Fired when no client is preventing the shutdown from happening. Can be used to dispose heavy resources like running processes. Can also be used to save UI state to storage`. Saving working file status to storage in this phase is acceptable. What do you think?"
20105|"supplement: when I change namespace  ""Wd3.Test"" -> ""Wd3"" is work Steps to Reproduce: 1.  ![5](https://cloud.githubusercontent.com/assets/14134768/14913131/514af342-0e33-11e6-8f26-1483a2d20764.png)  2. ![6](https://cloud.githubusercontent.com/assets/14134768/14913133/556e8646-0e33-11e6-89c6-e8038cd64288.png)"
20106|@sarbbottam Don't you think that this essential feature should be part of the core?
20107|Assigning to @egamma for verification
20108|"Ok I see. This is because VScode are automatically in french and I need to type ""tÃ¢ches"" on place of tasks.  It is very disturbing to have the commands in French;)  I look of pass vscode in english ^^"
20109|![screen shot 2016-04-29 at 12 04 57](https://cloud.githubusercontent.com/assets/10454741/14913359/c5ddf0e6-0e02-11e6-8b64-a1482642ad9d.png)  ### CSS  ``` css .monaco-tree-row .content .sub-content .explorer-item.folder-icon {     padding-left: 22px;     background: url(./parts/files/browser/media/Folder_inverse.svg) 1px 4px no-repeat; } .monaco-tree-row.expanded .content .sub-content .explorer-item.folder-icon {     padding-left: 22px;     background: url(./parts/files/browser/media/Folder_opened.svg) 1px 4px no-repeat;     background-size: 16px; } .explorer-item.text-file-icon {     padding-left: 22px;     background: url(./parts/files/browser/media/File.svg) 1px 3px no-repeat;     background-size: 16px; } ```  ### Icons  [icons.zip](https://github.com/Microsoft/vscode/files/242099/icons.zip)
20110|actually a duplicate of #2741
20111|duplicate of #1431
20112|@shardulm94 Unsure if it works but you explore adding a [completion item provider](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2140) that returns completions of kind [Snippet](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2016). With that you should get support for placeholders
20113|@isidorn Isn't there a command for this? Then `executeCommand` should do it
20114|duplicate of  #4958
20115|closing this cos this it is by design.
20116|@f111fei Still should be the same flow for pattern matching. Also it should be able to make condition menu from current focused area. Menu could be shown or hidden from selected text so, yeah, I think it could be the same
20117|You can do that using the language server protocol: https://github.com/Microsoft/vscode-languageserver-protocol/blob/master/README.md. Basically you describe JSON messages that are exchanged between vscode and your process. The powershell extension for VS code is done like that. @dbaeumer can give you more details around that.
20118|@jrieken, I think you misunderstood my question as Iâ€™m not talking at all about expression interpolation but about tagged template literal. In my example the `Relay.QL` tag is used to indicate that the string is using the GraphQL language. Iâ€™ve seen similar examples for the `jade` template language, something like:  ``` es6 class MyComponent extends React.Component {   render() {     return jade`        h1 Hello world     `;   } } ```  My question is how a VSCode extension could provide language services (again: auto-completion, snippets, syntax highlighting, etc.) for some specific tagged string in ES6 code.
20119|@bpasero Given virtual document etc and the API command, can't we just expose the underlying command?
20120|@jrieken That's cool but it still differ from writing extension directly. Basically we could write code and that's work immediately is far more convenient
20121|closing as duplicate of #547
20122|actually also a duplicate. first issue was #824
20123|- [ ] set/get encoding - [ ] set/get charset
20124|duplicate of #426
20125|closing as duplicate of #426
20126|I can nicely repro on my win vm with Joh's sample, but not on my real win machine. There are two issues: - Step jumps over too many lines -> our node debug simly gets the wrong stack trace when asking for the stack trace from node in this case - Step instead of steps just continues -> our node debug adapter is not getting a 'break' event from node, so it never enters a stopped state.  So it seems to be an issue in node for both of these issues. It might be the different chromium versions used between electron and nodejs.  Not sure what we can do here, even though this makes the extension debugging experience worse it is seldomly happening and only on windows.  @egamma opinion welcome
20127|@alexandrudima Isn't this possible with the `executeCommand`-api and the `type` commands?
20128|In the future both worlds will become more and more similar and should share the protocol implementation for C#
20129|Dup of #4615
20130|As soon as Electron is out with Chrome 50 support, V8 versions should be aligned again and we should re-test this.
20131|@jrieken the command I am using in the explorer currently only works with files that exists on disk (https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/fileActions.ts#L1270). we would have to introduce a new command that can deal with any resource and then use it from that action too.
20132|Sorry my mistake...   That's an interesting question! Your extension should register a [CompletionItemProvider](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L3420). You can do that for different kinds of document/files (see [DocumentSelector](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L1292)), like only for certain typescript files, but not (yet) for a specific scope inside the document. The model is collaborative so your provider only has to return result for its domain and the rest will be done by other providers for the language, e.g. [TypeScript](https://github.com/Microsoft/vscode/blob/master/extensions/typescript/src/features/completionItemProvider.ts#L69).  You might wonder if you can re-use syntax trees or type information which today you unfortunately cannot. An ideas is to expose the connection to the TypeScript service from the TypeScript extension but that's not done. Speak up if you need that.
20133|k. seems easy, let's do that in May
20134|"I don't click sir :) What I was referring to is the ctrl hotkey, which stops screenreader speech completely. Its often used if a screenreader starts reading outa bit of text that you don't care about or have already heard. You can just interrupt it and go on with your work, more efficient that way. But in this case the inclusion of the whole 'press alt+f1"" etc.  will make people press that hotkey if they quickly want to resume working after having run something like git commit which would make them not hear the alert as well."
20135|Code looks good. Behavior I am seeing could be describe by `editorService,getActiveEditorInput()` returning the wrong input if two editors open, out of workspace is active and the other one in workspace not active.
20136|@zersiax understood. @alexandrudima so maybe we should only have the accessibility help in the editor once and afterwards we do not have it anymore so that it is not being read each time you focus the editor?
20137|@isidorn that is very unlikely, it would break pretty much everything. getActiveEditor always targets the one editor that was last focussed.
20138|The problem is that the derivation is not so smooth across all platforms... gotta figure that out platform per platform. ðŸ‘Ž
20139|![untitled](https://cloud.githubusercontent.com/assets/900690/14914456/83212950-0e0a-11e6-8340-a02d7685b66c.gif)  @isidorn please plan for May, this is pretty bad. I had selfhost running for a while, did not use output at all and I stop getting output for git.
20140|@bpasero   I use `npm shrinkwrap` to update `npm-shrinkwrap.json`. But the file is different from [you](https://github.com/Microsoft/vscode/blob/master/npm-shrinkwrap.json).  Its about `120KB`  and  `3500 lines`.  os version : `windows 7`  npm version : `3.8.3`  How do you update npm-shrinkwrap.json now?
20141|"I cannot be suggest my function name in another file in PHP or JavaScript  On Thu, Apr 28, 2016 at 5:17 PM, Patrick Lienau notifications@github.com wrote:  > surely no such good as sublimetext. sublimetext much good. >  > .> >  > --- >  > @ndhuyfit https://github.com/ndhuyfit google ""vs code keybindings"" >  > â€” > You are receiving this because you were mentioned. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/5930#issuecomment-215378000  ##   ---  _Nguyen Duc Huy_ Department of Software Engineering Faculty of Information Technology University of Science, VNU (HCMC) 227 Nguyen Van Cu St., Dist. 5. HCMC, Vietnam ndhuy@fit.hcmus.edu.vn - www.fit.hcmus.edu.vn/~ndhuy"
20142|@bpasero Sorry yes it's the HTML Preview extension: https://marketplace.visualstudio.com/items?itemName=tht13.html-preview-vscode by @tht13
20143|Actually it looks like an issue that should be opened with the extension.  I'll move it. Thanks!
20144|Opened an issue with the extension so I'll close this, thanks again. https://github.com/tht13/html-preview-vscode/issues/3
20145|Please verify by reviewing the change
20146|@joaomoreno I installed rcedit and after the binary is built with `gulp vscode-win32` I run the following.  It might be worthwhile updating the wiki with this.  ``` rcedit '..\VSCode-win32\VSCode.exe' --set-icon resources\win32\code.ico ```
20147|@jrieken Maybe it is obvious, but maybe you need to present/frame the change...
20148|@aeschli I do not understand how this stack trace is possible, so there is no attached change.
20149|You shouldn't need to do that manually. `gulp vscode-win32` will do that for you... I'm curious in knowing why it didn't
20150|@jrieken query strings cause the browser to not cache
20151|I can no longer easily reproduce, will let you know if I get steps
20152|@bbenoist You are using a year old build. Code is working properly in actual ConEmu. [Why not to update?](https://conemu.github.io/en/OldBuild.html#update-your-installation)
20153|@alexandrudima look the the whole method. there was parameter `id` which was used to cache. That's the `id` of the service to create and not the `id` of dependencies that needed to be created first
20154|@aeschli you are on a linux machine, and all this should work out of the box so giving to you to verify.
20155|@joaomoreno did it the last time and could comment how he produced that file.
20156|@bpasero For verification please open a file dominated by long lines and toggle word wrap.
20157|Tricky. We must run `npm shrinkwrap` on all 3 platforms and sort of do a _merge_ between them. This is due to some `optionalDependencies` which will only install some dependencies on some platforms.
20158|@jrieken you also filed a bug that the thread is not expanded on stoped. So giving to you to verify this, since it is in the end the same issue
20159|Yes, this is the current limitation of our prelaunch task in debug world. Namely, after a prelaunch task is run, we check if there are errors anywhere in the workspace, not errors related to the prealaunch task. Thus if you have any errors you will still get the notificaiton (thus we have the 'debug anyway' button). When you see this do you see some errors in your workspace in the lower left corner of your screen?
20160|Is there already any support for embedded languages in VSCode? For instance a `php` language would say that things outside of the php tags should be handled by the `html` language service.  The idea would be to do something similar for ES6 template strings, so that in the two above examples GraphQL and Jade extensions could provide their servicesâ€”and that could potentially be useful for other embedded languages as well such as SQL queries  As you say I could provide an extra TypeScript/JavaScript extension that wouldnâ€™t do anything outside of its desired scope, however thatâ€™s sounds to be too hacky and wouldnâ€™t allow things like syntactic coloration. I would prefer a build-in abstraction for embedded languages.  (BTW I canâ€™t re-open this issue, but if fixing it requires some changes in VSCode maybe it should be re-opened?)
20161|@isidorn If it's duplicate just tag it as that
20162|@joaomoreno  Its a manual merge? And I use `npm shrinkwrap` on windows 7,  `npm-shrinkwrap.json` is about `3500 lines` **very** different from yours `400 lines`.  Here is my `npm-shrinkwrap.json`  [npm-shrinkwrap.txt](https://github.com/Microsoft/vscode/files/242526/npm-shrinkwrap.txt)  What should I do?
20163|I really need this feature before I switch to VS code. It's very handy, easy to quit the editor. Many times, I intentionally leave some of my temporary work unsaved in Sublime for many days.
20164|Adding a verified label since we no longer use that module, no other way to verify this
20165|@bpasero I can always remove all message service messages on debug start which does not seem smart. I do not see any other api in message service except hideAll, but I can look into it more
20166|Exposing the scopes when registering a provider is this: #719.  The syntax colouring is done with TextMate grammars which have the context of injection. Tho our support for them isn't all there yet. Assigning to @alexandrudima for the details.
20167|@bpasero @alexandrudima Is there some way to investigate what's going on here? Debug logs or something?  **EDIT**: Nevermind, it's working this morning, after a reboot.
20168|Please verify by code review
20169|Oh and we don't shrinkwrap dev dependencies! So, you should clean everything up, and run `npm install --production` to not install dev dependencies... sorry for that!
20170|so, on windows I see this...  ``` Cannot find module '../build/Release/pty.node' messageService.ts:128 An unknown error occurred. Please consult the log for more details. ```
20171|pty.js doesn't seem to build on at least my machine...
20172|@joaomoreno Soga. Thanks!!!
20173|Neeeein!!
20174|We have new nls files - I updated it yesterday evening and I see new debug strings transalted. However this is still in english for me. I do not think critical -> moving to may
20175|@bpasero Works fine, but if I put a whitespace between the line and column it does not work.
20176|@alexandrudima a bit of help for verification?
20177|@isidorn Do you expect me to make another except for this: https://github.com/Microsoft/vscode/blob/master/extensions/typescript/src/utils/projectStatus.ts#L198
20178|~~The correct~~ Another place for this is User Voice: https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/11329521-find-and-replace  Please add votes there (also).
20179|It would be good to have it as part of the core.  On Fri, Apr 29, 2016, 2:59 AM Jan Niklas Hasse notifications@github.com wrote:  > @sarbbottam https://github.com/sarbbottam Don't you think that this > essential feature should be part of the core? >  > â€” > You are receiving this because you were mentioned. >  > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/1666#issuecomment-215674208
20180|Assigning to your for clarification. Unsure when and how the translations happen for extensions.   fyi @isidorn who did the nls input
20181|How about code just analyses the opened file and suggest to install the language extension if one exists on the marketplace?
20182|Can you reopen this issue to keep track of it? Thanks :)
20183|"Yes there are, but what in heavens does that have to do with a preLaunch task, I might even run a totally unrelated command. One that has nothing to do with my workspace.  And the errors are mainly because the ecosystem is not stable yet and omnisharp sometimes complains about assembly version mismatches or those pcl issues like ""The type object is defined in an assembly that is not referenced."" However, dotnet build has no problems with these so called errors."
20184|@dbaeumer did the input to the translation team before he left for vacation. I picked up the input and consumed it inside vscode and vscode-node-debug
20185|As mentioned in my previous comment this is the current limitaiton of the prelaunch task, we currently have no way to get errors produced by a specific task. Thus forwarding this to @dbaeumer
20186|Adding both flags madispe suggested also seem solve problems with the latest stable version. No need for the Insiders build as far as I see. But I didn't test it excessively. Maybe the problems will come back.
20187|Is just exitcode (as you do have that) not enough for these tasks?
20188|Yes it is not enough, as watching tasks do not exit for instance. Though feel free to experiment - maybe check if it is a watching task, PRs are welcome :)
20189|I don't get the cancellation event when using the <kbd>Escape</kbd> key, only when pressing the `x` of the references widget.
20190|@Maximus5   > You are using a year old build.  You're right, the version which is tagged as stable on ConEmu Download page is 1 year old:  ![capture](https://cloud.githubusercontent.com/assets/2091902/14919671/1d27a0a0-0e2a-11e6-9057-3ba60e052732.JPG)  > Code is working properly in actual ConEmu.  I've tested version 160301 preview but it still does not changes anything:  ![capture2](https://cloud.githubusercontent.com/assets/2091902/14920460/1370a346-0e2e-11e6-9c0f-df361a3e6938.JPG)  Now trying version 160428 alpha...  > Why not to update?  Because I prefer to use stable versions unless it's missing a feature I find important...
20191|Still no change with 160428 alpha :cry: :  ![capture](https://cloud.githubusercontent.com/assets/2091902/14920562/8fabdb24-0e2e-11e6-8487-ab7ede634455.JPG)
20192|nice find.
20193|@joaomoreno Install Thai language, type on keyboard. Cursor should be at the end of the line.
20194|Much drama.
20195|Every call to show() returns a function to hide().
20196|I can totally reproduce this.
20197|yes, turns out, I had `tsdk` setting pointing to some location, in `settings.json`, removing it solved the issue even with `formatOnType:true`. @dbaeumer thanks for pointing this out, I do not have salsa version showing in bottom right corder any more, is that how it should be?
20198|"Yes we set verified to false. Is there anything else in this response message that might be wrong?  Log file snippet from debug session:  ```     WRITE MESSAGE:      {       ""type"": ""response"",       ""request_seq"": ""3"",       ""command"": ""setBreakpoints"",       ""success"": true,       ""body"": {         ""breakpoints"": [           {             ""verified"": false,             ""message"": ""Source does not exist, breakpoint not set."",             ""source"": ""c:\\Users\\Keith\\.vscode-alpha\\extensions\\ms-vscode.PowerShell-0.5.0\\examples\\DebugTest.ps1"",             ""line"": 18,             ""column"": null           }         ]       }     } ```"
20199|@bpasero The output can be preventable by setting `ELECTRON_NO_ATTACH_CONSOLE` before spawning `Code.exe`, as expected. I will push this change and test all platforms.  @egamma @aeschli I promoted this to an April candidate, do you agree?
20200|Wow these Icons make it look like a whole new editor!  If anyone makes it so Icons can be added they should make sure people can add Icon packs to the marketplace that can be used with the editor.
