26901|Duplicate of https://github.com/Microsoft/vscode/issues/7911 - should be fixed soon.
26902|So I've got the code up and going, and I've had an initial grok of the overall code. Whew! 8-O  Here's a naive screenshot from just directly setting the input's value just after it is created/initialized:  ![01 super_naive_git_vs_code_message](https://cloud.githubusercontent.com/assets/1253349/16235012/e1b871a0-3798-11e6-95cf-f25439506837.png)  So apparently, there are quite a few pieces that could be involved and I thought I would talk about it here. (I don't think I'm fully committed enough to start a PR, but maybe that would be more appropriate.)  **EDIT: I'm adding to/editing this list in order to keep all of this reference information in a single place.** - Git Service   - [`Git`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/node/git.lib.ts#L126) and [`Repository`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/node/git.lib.ts#L260)     - Wraps git CLI and current repository   - [`[I]RawGitService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/node/rawGitService.ts#L15)     - On node side, wraps `Repository` calls.     - On browser side, wraps git channel client   - [`IGitService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/common/git.ts#L293)     - Wraps `IRawGitService` to expose desired interaction at the consumer level.     - Browser implementation, [`GitService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/gitServices.ts#L382)     - Electron implementation, [`ElectronGitService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/electron-browser/electronGitService.ts#L149)       - Thin wrapper used to locate git and instantiate the correct `IGitChannel`.        - I am unsure why there are some extra implementations specific to electron browser as opposed to just the browser.   - [`[I]GitChannel`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/common/gitIpc.ts#L93) and [`GitChannelClient`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/common/gitIpc.ts#L134)     - Exposes git `call` methods to the client (browser).   - [`gitApp`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/node/gitApp.ts)     - Where the service is instantiated on the node side. - [`ChangesView`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/views/changes/changesView.ts#L49)   - [`commitInputBox`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/views/changes/changesView.ts#L69) : [`InputBox.InputBox`](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/ui/inputbox/inputBox.ts#L58) - [`GitAction`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/gitActions.ts#L63)   - Base class to enable command-pattern actions which encapsulate git service calls in objects.   - Many base and implementation classes in this file.     - e.g. `InitAction`, `BaseStageAction`, `StageAction`, `BaseUndoAction`, `UndoAction`, etc.   - Extends/implements [`[I]Action`](https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/actions.ts), which seems to also indicate that these actions are tied to a visual component, like a stage/undo button. But this is uncertain, as there are also workbench versions of these, such as [`WorkbenchStageAction`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/git/browser/gitActions.contribution.ts#L249)  So according to other places like [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/browser/debugViewer.ts#L100) and [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/views/explorerViewer.ts#L299), the accepted way to initialize the `InputBox`'s value is simply setting it after creation as I did in the naive example:  ``` this.commitInputBox.value = 'Hey, this is some test initial value.' ```  But this is only created once it seems, so I can't put it here. If we do a commit, then the input is cleared and it won't be recreated for the next commit.   Anyway, it's time to switch to something else for the time being. If y'all have another approach you're gonna take care of, or if you have thoughts on this approach for a possible PR, I'm all ears. I'm going to look at this again here in the near future.
26903|I believe this is already fixed, can you see if you can reproduce in the [Insiders build](https://code.visualstudio.com/insiders)?  If not, could you open developer tools (via help menu) and check for errors in the console?
26904|Are you scrolling using mouse/trackpad? Can you try <kbd>ctrl</kbd>+<kbd>shift</kbd>+arrow/page up/page down (or whatever the OS X equivalent is).
26905|Duplicate of https://github.com/Microsoft/vscode/issues/7062
26906|Duplicate of https://github.com/Microsoft/vscode/issues/7062
26907|The problem here is knowing which key sequences vscode should capture and which should be passed to the terminal. If vscode consumes <kbd>F1</kbd> then any terminal applications that rely on this will no longer work. Going to leave this one for now unless many people report as there is always the workaround of closing the terminal or using the other keybindings.
26908|Can you try this out in the insiders build to see if that fixes your problem? Otherwise it's an issue with our environment parsing code.
26909|Additional: - Close panel 'x' button should be a minimize button '_' #7932 - @gregvanl is wanting to do an early preview of terminal docs, this will be blocked until new terminal and close terminal buttons are determined (assuming a simple dropdown is going in for June).
26910|This seems like it would be a perfect combination for issue #7830 about allowing for more powerful git messages. Whatever the persistence mechanism would be for previous git commit message (probably the git COMMIT_EDITMSG), if none listed, it could then check for the [`commit.template` config setting](https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Basic-Client-Configuration). In that issue, I've also made some notes as to my investigation into the architecture/process.  @sijad Are you still working on this, and if so, could you include the template in the workflow?
26911|@Tyriar Thanks! It now works the way I'd expect as of version Insiders 1.3.0-insider (06d108b4a0aa6c031e7c1e61a463c069809d6019
26912|Hi **@r0flbear**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
26913|Would be really nice if it was on the left side on OS X, as well.
26914|@coreh I doubt that would happen as it would need to be applied globally or be inconsistent (working files, find, tabs, etc.). Lots of work in design/maintaining 2 behaviors for little payoff imo. In general we tend to go for consistency across platforms, adopting some platform-specific behaviors where it's easy and makes sense.
26915|Any progress? I'd like to rename my extension `be5invis.julia` into `be5invis.syntax-julia`, but the old one cannot be removed.
26916|Ideally it should say `âŒ˜+` on the menu, and be bound to both that and `âŒ˜=`, that way you don't need to use shift.
26917|This seems fixed by https://github.com/Microsoft/vscode/commit/5474147bb83618975409dad7d8aa96151d7d1ea1
26918|Makes sense. Y'all are moving so fast with the features and improvements that it's easy to forget the resources are actually finite.  Maybe someday ðŸ™ƒ
26919|"Still problems with 1.2.1.  You set breakpoint in the .ts file, the debugger stops when the breakpoint is hit, but the ""red dot"" in the ts file is moved to the corresponding line in the js file.  How we can help? I have a test project running with docker for windows + vscode in case you need it for further investigation."
26920|No planned activity.
26921|"@rebornix had some good suggestions, like just placing styles in the ""markdown.styles"" file.  I think this is fine, as I wasn't entirely happy with how the file handling was being done with previously.  So I've updated the readme:  ---  ## Using Markdown-it Plugins  To use a markdown-it plugin for markdown preview rendering, you will need to provide the name and settings for each plugin in your ""markdown.plugins"" workspace configuration.  An example configuration is shown here:  ``` json     ""markdown.styles"": [ ""file:///Path/To/katex.min.css"" ],     ""markdown.plugins"": [         {             ""name"": ""markdown-it-katex"",             ""options"": { ""throwOnError"": false }         }     ] ```  This configuration will tell the markdown extension to load the plugin ""markdown-it-katex"" with the options `{ ""throwOnError"": false }`.  This particular plugin requires additional styling to work properly, so you can place the references for these stylesheets in your ""markdown.styles"" workspace configuration.  The stylesheet in the ""markdown.styles"" may be either a URL, a `file:///...` or simply a filename like `styles.css` which then should be placed in the root directory of your workspace.  Before the markdown extension can load markdown-it plugin properly, you must install the node package.  You can do this anywhere where the markdown extension can find your plugin.  So you can for instance install the package locally in the `extensions/markdown` folder using with  ``` sh npm install markdown-it-katex ```  or globally with  ``` sh npm install -g markdown-it-katex ```  ---  Here it is in action:  ![markdown-math](https://cloud.githubusercontent.com/assets/12069845/16246078/4af34930-37c9-11e6-9e5a-53b7381d8314.png)  Edit: Of course I meant 2\pi for integrating :)"
26922|"@delfinof it would help a lot if you could produce a screen recording that shows what you are doing and how and when the ""red dot"" moves."
26923|By analyzing the blame information on this pull request, we identified @egamma to be a potential reviewer
26924|Hi **@narma**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
26925|I also have this issue.  Opening vscode on the command line (`$ code-insiders`) makes the problem go away.
26926|I have the same issue with Windows 7
26927|@johnfn what version of VS Code are you using? We've fixed something in that area last week.
26928|By analyzing the blame information on this pull request, we identified @egamma and @dbaeumer to be potential reviewers
26929|Fwiw I used the new command line arguments setting to add -l and that made it work for me.
26930|@weinand I updated earlier today.
26931|@joaomoreno VS Code should use the system global paths in /etc/profile (which has the Homebrew added /usr/local/lib path), right?
26932|"Remote debugging scenarios with source maps are a bit special and VS Code support for this is weak. Some tipps and tricks: - VS Code can only find source maps for remote files if the source maps are inlined in the generated files. Use `""inlineSourceMap"": true` in your tsconfig.json. -  keep a copy of the generated JavaScript file (with the inlined source map) in the local workspace so that VS Code can more easily map breakpoints from source to generated file. - use the `remoteRoot` attribute to map remote paths back to local paths."
26933|@rebornix, Thank you for explanation. I understand.  > you can mitigate the issue by replacing the spaces by &#32;  I was able to display! thanks!
26934|Just made a release of [alm](alm.tools) that uses monaco : `0.1.0`. Let me [know how it goes](https://github.com/alm-tools/alm) :rose:
26935|"@vogler Try Insider build and you will see the ""Unstage"" feature."
26936|as csvn says, fresh clone & build fails because of this.
26937|@Maus3rVonDutch  Thanks for this temporarily solution! The only ugly way obviously is to set it up, otherwise it would be brilliant.
26938|@bpasero with tabs enabled, opened a c# project and vscode is crashing error couple of minutes after latest update to insider commit hash: 5474147bb83618975409dad7d8aa96151d7d1ea1 . NOTE: I had previously not enabled tabs until now
26939|@isidorn How will this screw up the debug configurations? The clean way to implement this would be to also add a new variable like ${file-location} for use in the debug configurations. That way your configs are always relative to the location of the launch.json and not the workspace root.
26940|Will VSCode use this newly extracted Monaco? Will they be synchronised? Will they diverge?
26941|I would be a proponent of never seeing the message and having it automatically update in the background. That's how evergreen ought to be, yeah?
26942|I'm eager to see that there is no popup window anymore, Besides, it would be perfect if the Windows binary doesn't require admin privilege (just a wish, not ask for it as I know there must be some limits).  I have Insider build on both my devbox and laptop, so the first thing to do everything during coffee time is manually re-installing VS Code twice. We may want to put this issue in the backlog to make true vscode-windows-insider lovers life easier.
26943|"but can not formate code.please view output window for details. Command failed: autopep8 --diff ""d:\Program Files (x86)\Visual Studio 2015\Projects\Python\Demo\main.py"" 'autopep8' ï¿½ï¿½ï¿½ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½î£¬Ò²ï¿½ï¿½ï¿½Ç¿ï¿½ï¿½ï¿½ï¿½ÐµÄ³ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½"
26944|any update on this? i am using v1.2.1
26945|Done-Done criteria: - [x] Test Plan Item created - [x] Keyboard accessible - [x] Screen reader accessible - [x] Works with the different themes, including the high contrast theme - [x] Telemetry events in place - [x] Release notes updated
26946|Insiders build seems not to have this problem. Although it does have problem with scrolling of terminal as described in here: #7817
26947|1. shift+fn+up/down arrow allows to scroll on my OSX 10.11.5 (insider build) 2. Scrolling with trackpad does not scroll 3. Trying to highlight more text from terminal that is visible does not trigger scroll (although this also does not work in 1.2.1)
26948|I have many projects, some of them are GBK encoded, other are UTF-8 encoded, so what can I do for setting different encoding for each project. appreciate for any help @egamma
26949|@eByte23 can you verify this is related to having tabs enabled or not by trying without tabs?
26950|DND is really quite broken on Linux...
26951|@bpasero still happening when tabs are disabled, but no where near the severity with tabs enabled.  But is heavily noticeable and reproducible when working with images, clicking between large images quickly in both insider and v1.2.1
26952|@eByte23 I suggest to open a new issue on that with as much detail as you can provide (e.g. does memory grow?).
26953|Sure can do. I haven't done a huge amount of investigation around it yet but I'll get some in-depth details for you a bit later.
26954|Will add further details later e.g. memory usage, dumps etc.. /cc @bpasero (If you want to track)
26955|It got solved when followed this [SO](http://stackoverflow.com/a/17437601/2869667)
26956|@eByte23 how large are those images? can you attach the files you use?
26957|ES5 doesn't contain this method.
26958|@bpasero This is an annoying problem,every time when I run the build script i have to close vscode first,but my present job require electron,so I have to consider other editor?
26959|@bpasero I can't provide the images as the are client images probably copyrighted also.  But here are the sizes and types ![image](https://cloud.githubusercontent.com/assets/8544875/16256008/1a190ed4-3892-11e6-8271-b66e8a1cb53c.png)
26960|cc @jrieken
26961|Duplicate of #2330
26962|but guys i tried Long Path Tool to clean this mess and it worked properly
26963|@kieferrm seems pretty hard at work getting everything ready for the next release.  I'm going to close this for now, and maybe reopen it later.  It's a pretty trivial pull-request, so this can be easily reopened at any time.  Thanks @rebornix for taking a look at it, you had some good suggestions.  Just to recap the status of the pull-request for future reference: - Put built in plugins into a builtInPlugins list, and then merge the list with the userPlugins.  This allows users to override default plugins and their settings (if, for instance, they wanted to use a different hilighter). - Add a remark to the README.md that userPlugins and styles can overwrite the default styles/plugins.
26964|Oh. It had always returned error code 0 with those errors...  `3.9.0` might've changed it, it's worthwhile to look into.
26965|@weinand I think we are good for that if no user noticed the issue in the explorer for the last 2 years :)
26966|Can confirm this is happening for me as well (just updated to 1.2.1 and currently on Windows 10). Behaviour is exactly as shown in VitorLuizC's image, except that I have no special characters in my path, and in fact the problem still occurs with no folders or files open and just the initial untitled document displayed.  I recently upgraded to Windows 10 from Windows 7 and the problem was not present while on Windows 7.
26967|Can you remove `C:\Program Files (x86)\Microsoft VS Code` from your `PATH` and try again? It should've been removed during the setup phase...
26968|@ktajeran Great to know, thanks for the insights!  @bpasero Heard of this before?
26969|I am not a big fan of our hover when it has lots of contents because the content blends too easy into the other contents of the editor making it hard to read.  ![image](https://cloud.githubusercontent.com/assets/900690/16224554/c9e51f4c-37a2-11e6-8c17-06b18d24fc45.png)  At the minimum the hover should have a different background color. Also in this example the JS doc comments look very similar to the actual method signature. I would love if both could be made more distinct so that its clear the one is documentation and the other is signature.  /cc @joaomoreno @bgashler1 @stevencl @alexandrudima
26970|Thanks. And the files you open are all of the same file type and similar size?
26971|Let's boil it down a bit. I've renamed the issue to better focus on what I think is that you want to achieve.  How will you manage the templates? Will you have a collection of them? How will you store them? How will you show a template picker, for when the user needs to type a commit message?  All those questions need to be answered before diving into the code.
26972|cc @egamma This could be an alternative for renaming.
26973|I don't really understand the question. Opening the Developer Tools (<kbd>F1</kbd>, `Developer`) and typing `process.env.PATH` in the console will print out the `PATH`.
26974|@vogler You've caught it all. ðŸ˜„ There's quite a bit of work to be done there.
26975|I will see if there is a way to prevent the locking from happening.
26976|Invoke command palette and type `reload` then you can reload JavaScript/TypeScript/Window :)
26977|Just varying of all those types, it was happening switch between the biggest file in the list to others very quickly
26978|but a button on side pane would be great
26979|When we install new extensions in Extension Viewlet, the install button will be greyed out after clicking it. This can be another option.
26980|> What I have heard is vscode.previewHtml is not render animation and execute javascript am I wrong?   That isn't true
26981|@rebornix well i didint know that thanks :)
26982|"It's a very destructive action that is only really needed for developers of vscode or users that install an extension and dismiss the dialog. I'm going to close this off since I don't see this happening.  If you need to use it more frequently for some reason I recommend either adding a keybinding or accessing it via command palette (I use <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>p</kbd>, ""rew"", <kbd>enter</kbd> on Linux)"
26983|I had no idea about this command until I saw @Tyriar used it. A button on the side pane would be intuitive but we can't move all commands to it, @Vishal-Isharani right?  Maybe we can have something like Ubuntu hot key map when you press `Windows` button for a few seconds, this might be a good extension, what do you think @Tyriar
26984|@egamma @aeschli - [I've managed to implement a rudimentary prettify symbols mode](https://github.com/siegebell/vsc-prettify-symbols-mode) using #7181 (before & after decorations) -- thanks!  But there are a couple bugs in #7181 and limitations elsewhere that need to be addressed, so I'll be filing a few more related issues soon.
26985|Woohoo!
26986|@kumarharsh this might be caused by a bug we know exists in TS server which holds locks onto directories. However this should only affect renaming or deleting folders, not creating them. Can you reproduce the problem with normal text files? So in you steps close all TS/JS files, restart VS Code and move a tracked text file into that folder.
26987|"@rebornix I don't think it's a common case for users to need to reload outside of the extension install prompt. If they do you can always add a simple keybinding to make it easy:  ``` json { ""key"": ""alt+ctrl+r"", ""command"": ""workbench.action.reloadWindow"" } ```  On adding it to the side panel, we need to be _very_ careful when adding buttons to the UI, especially prominent places like on the activity bar. The UI is intentionally minimalistic in order to keep the UI lightweight, both in performance and perceived 'heaviness'. Doing something like this would be going against that design decision."
26988|vscode 1.3.0-insider; commit a6aa32032  I'm using your feature with an injection attack (for `display: none` or `font-size: 0pt`; see #6201) to visually replace one string with another (#2402).  Here are a couple issues I'm seeing: 1. The `before` decoration does not work if its range is empty and it falls at the end of a line. The `after` decoration does not work if its range is empty and falls at the beginning of a line. 2. `contentText` does not preserve syntax coloring.
26989|@joaomoreno assigning to you since the new extension management code has properites metadata and id
26990|@bpasero looks like a problem with the file system watcher under Linux.
26991|@TurkeyMan assuming that you have the C++ extension installed. This is a dup of https://github.com/Microsoft/vscppsamples/issues/68.
26992|Please ping if this is not the case.
26993|Still having this issue.  El Capitan 10.11.5 (15F34) Visual Studio Code 1.2.1 (1.2.1)
26994|Very likely caused by git.
26995|This issue was moved to PowerShell/vscode-powershell#214
26996|Nothing in latest insiders. Did it miss the train?
26997|@notoriousFF could you provide me with the command line of the ElectronHelper executable. This would help understanding what is causing this.  @bpasero does this ring a bell?
26998|@sandy081 we should open the error list now. Right.
26999|@jrieken assigning to you since he installs the legacy tools.
27000|YES! The code is there, just forgot to set it up. Good ðŸ‘€
