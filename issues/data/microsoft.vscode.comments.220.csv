21901|well that was dumb of me ha. I must have set that when I was taking the tutorial on VS code way back when. Sorry!
21902|+1 on switching to `tar.gz`, zip files always felt alien on Linux.  However, I think 2 is a bad idea. Not only it would increase maintenance burden on your end, it would also make it less flexible for distros. For example, Arch's packaging conventions differ from most distros and the filesystem layout is a bit different as well. Keeping up with such changes (which are not infrequent with Arch) should be on distro maintainers.  What I would suggest, is an official _packaging_ changelog that gets published a few days before every release. Something like: - Version 2016.2   - foo.bin moved from foo/bar to /foo/bar/bin   - Code.png renamed to code.png   - New feature X needs dependency Y  This would not only provide us with a heads up, but also help keep track of what changed and when. Does this sound feasible at all? If not, at the very least an unofficial tarball a few days before release would give us some time update the PKGBUILD and fix any potential breakage.
21903|Broken link? Possibly related to #3008 (see also #4386).
21904|@dcelasun :+1: good points :)  Would the [log for ./resources/linux](https://github.com/Microsoft/vscode/commits/master/resources/linux) be sufficient to check for required package changes? This contains the the metadata and post/pre install script files for the deb and rpm packages.
21905|ok wrong product
21906|The vscode-themes repo is closed source atm is why you're seeing a 404.
21907|Ah it's generated code anyway so probably wouldn't make sense to PR.
21908|"https://github.com/electron/electron/issues/38 was closed ""because nobody cares about it"". This pretty much renders the built-in terminal unusable on the Mac.  Two open vscode windows with a terminal take 280% on my 4-core mac making it sound like a helicopter ready for take-off."
21909|@weinand   > the node debugger protocol does not return proto for Set and Map.  What it means? I was thinking that node.js and Chrome use the same v8 debugger protocol.  I was debugging that snippet in Chrome, and Chrome shows a `__proto__` for `Map`:  ![chrome](https://cloud.githubusercontent.com/assets/706913/15377222/fbd19eec-1d6a-11e6-8a63-381320cfd95e.png)  Also I have created a node.js project in WebStorm, and it is also show me a `__proto__` for `Map`  in debug mode:  ![idea](https://cloud.githubusercontent.com/assets/706913/15377238/46a264d8-1d6b-11e6-93d8-ab422fb1ff7d.png)
21910|@isvforall no, neither Chrome Dev Tools nor WebStorm use the v8 debugger protocol. The Chrome Dev Tools use the Chrome Debugging Protocol which is not (yet) supported by node and WebStorm uses code injection to implement its own debug protocol. Node-inspector uses the v8 debugger protocol. Try it to compare it with VS Code.  VS Code uses the v8 debugger protocol but it has to work around the limitations by a combination of code injection and use of eval. Supporting `__proto__` on Maps and Sets is possible but it has not a high priority on my todo list. But feel free to submit a PR.
21911|"I  already added ""**/node_modules"": false in settings.json. Looks like it is fixed now as I am getting proper result. Clarification:  1. Do we expect recently open files should be display in ""quick open"" window if it is part of exclusion? Bug https://github.com/Microsoft/vscode/issues/6502  2. Why there is file with .yml is showing up in the result when we are targeting for typings file (.d.ts) 3. I could see on MAC Ipaddr.test.coffee file is showing up in the result. Windows: ![image](https://cloud.githubusercontent.com/assets/17735796/15377625/f60fe508-1d11-11e6-8c4a-4fd07bdb52c8.png)  MAC: <img width=""618"" alt=""screen shot 2016-05-18 at 4 04 41 pm"" src=""https://cloud.githubusercontent.com/assets/17735796/15377790/149f51ba-1d13-11e6-8edc-c08f77cde9fb.png"">"
21912|I have been trying to work out the cause here. I am finding that the source is correctly displayed if the Source.name is uniquely set. So it appears that VSCode is somehow associating the source with a name, and not calling the backend if it thinks that the source is already available by name? This seems to me a) undocumented behaviour, b) not as per spec because if sourceReference is set then shouldn't the backend be always called to retrieve the source?
21913|I'm having the exact same problem, also on OS X.   I can run Code on a different user account, but not my own.
21914|@kieferrm it can be worked around by running the pty.js process in a child process, see https://github.com/atom-archive/terminal/issues/3#issuecomment-21086414
21915|I have implemented the fix that the name for each dynamically generated source includes the pointer address of the source - making each name unique. This appears to work with the example script supplied above. I have also updated the package.  It would be great if you can confirm the semantics of the sourceReference feature.   Does sourceReference have to be unique within a session? Does the source name have to be unique within a session?
21916|Created the repo https://github.com/Microsoft/vscode-wiki
21917|@dbaeumer The accelerator looks combination of 'Ctrl' key and 'Z', 'Ctrl' is translated as is in English for Fareast languages, not sure why such appearance on running build.
21918|@bpasero, @joaomoreno I figured it out.  Since electron now supports an installer for windows, will vscode switch to that and replace [auto-updater.win32.ts](https://github.com/Microsoft/vscode/blob/b24be3a8cefb387df045d465936285656f2fe44e/src/vs/code/electron-main/auto-updater.win32.ts)?
21919|This is ready to go from a community perspective, we just need to sync the changes manually until the sync job is setup.
21920|Thanks for reporting, fixed :smiley:
21921|@bpasero please verify once a new build goes out (tests are currently failing on your side).
21922|@SamuelGustafsson The software  ![image](https://cloud.githubusercontent.com/assets/8599885/15383032/401ddafa-1dc2-11e6-954f-36a19683f327.png) default english(U.S.) really works
21923|I like that but that needs tree support.
21924|Actually it rather depends on how large the spacing is in the explorer and I know we changed that number to be lower.  https://github.com/Microsoft/vscode/issues/1414
21925|@jsloyer unlikely, we have moved away from Squirrel for Windows a long time ago and use a scriptable installer instead.
21926|It looks like it fails to connect to or create the socket. moving to @joaomoreno to see if he has more ideas.
21927|We should apply the excludes to the editor history too.
21928|The search is fuzzy, so *.d.ts matches partially on the path and partially on the file. Please check that the coffee file is really installed on both OS, maybe it was not.
21929|@bpasero the drag-delta used in the hysteresis does not need to be coupled to the item spacing (Actually coupling the drag-delta to the item spacing means **not** to use a hysteresis). Here is an example: consider an item spacing of 10 and a drag-delta of 30. This means that the user first has to drag an item by 30 pixels (3 items) before the move operation is detected, but then the user can continue to drag the item back so that it is only 10 pixel away from the start position. So the 30 does not mean that the user can only move items to locations that are at least 30 pixels away.  (Try to remove an item from the OS X Dock: you will have to drag it out of the Dock by quite some distance before a 'remove' is detected).
21930|Fixed.  SRC: Convert Indentation to Tabs NEW TGT: Einzug in Tabstopps konvertieren
21931|Yep, that seems good to me :+1:
21932|Good point!
21933|If `sourceReference > 0` then it has to be unique within a session. `sourceName` should not have to be unqiue within a session. However I looked now in the code and there seems to be a limitation that you hit in how we are doing caching of these sources. So in practice it should be unique until we fix this issue.
21934|+1
21935|@johnliu2016 The character in parenthesis are for the mnemonic key. In language with latin characters this nicely aligns with the text (e.g In German the File menu is called Datei and the mnemonic key is d denoted in the translation with &&Datei). However in Chinese we can't use an Chinese character as the mnemonic key (would require a different input method and I don't know if this would be feasible at all). So the translators put the mnemonic key into parenthesis at the end of the Chinese text as a latin character.  Actually I have to admit that I don't know what the standard is here. @johnliu2016 can you check another product (for example MS Word) and see what they do when running in a Chinese locale.
21936|@chrisdias, @egamma: this might be something we need to reconsider as well. I agree that the latin character in parenthesis looks wired.
21937|@bpasero is there another way to define an mnemonic key than putting && into the text. Can this be done via API?
21938|"@MLefebvreICO could you please enable TS logging. This can be done by adding the following setting:  ``` json {     ""typescript.tsserver.trace"": ""messages"" } ```  Then open the output window and switch to the TypeScript channel. Could you provide me with the log data printed there. That would help to understand why intellisense stops working"
21939|"@liuyajuntm you can specify the output directory in the tsconfig.json:  ``` json {     ""compilerOptions"": {         ""target"": ""es5"",         ""module"": ""commonjs"",         ""moduleResolution"": ""node"",         ""sourceMap"": ""true"",         ""outDir"": ""../out"",         ...     } } ```"
21940|This issue was moved to Microsoft/TypeScript#8683
21941|I mark this as a dup of  #6496. If we allow overriding the command we need to consider options as well.
21942|OK thank you for confirming. Requiring source reference to be unique is also a limitation in my view as languages like Lua can have hundreds of dynamically generated functions each with their own source snippet. Can it not be more granular like maintaining unique source reference for a given stack instantiation?  Alternative could sourceReference be a string? Reason for asking all this is that in Lua the VM gives me access to the source. So I simply need to pass a reference that I can decode back. Right now I am passing the stack depth but as per your note that will not work as it will not be unique. If source reference is a string I can encode more information.‎ I could encode stack depth plus the address of the source. From: Isidor Nikolic Sent: Thursday, 19 May 2016 8:47 AM To: Microsoft/vscode Reply To: Microsoft/vscode Cc: Dibyendu Majumdar; Author Subject: Re: [Microsoft/vscode] VSCode debugger front end is not showing the source correctly when sourceReference is not 0 (#6360)  If sourceReference > 0 then it has to be unique within a session. sourceName should not have to be unqiue within a session. However I looked now in the code and there seems to be a limitation that you hit in how we are doing caching of these sources. So in practice it should be unique until we fix this issue.  — You are receiving this because you authored the thread. Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/6360#issuecomment-220251420
21943|This issue was moved to Microsoft/TypeScript#8684
21944|@Tyriar I think <kbd>ctrl+`</kbd> is fine. We do the same for <kbd>Ctrl+Space</kbd>
21945|@Brakkar Sorry, the correct command line should have been tsc -w -p .   tsc currently only support recompile on save. We don't support recompiling on type. However VS Code support auto save which goes then nicely with tsc in watch mode.  Any objection to close this issue?
21946|@v-pavanp it looks like you are testing the 'ben/stacks' branch. This branch is work in progress and is not ready for testing.
21947|"@dbaeumer putting a Latin character surrounded by parenthesis at the string end is the convention of mnemonics localization for Fareast languages (CHS, CHT, JPN and KOR). @Darren usage this mnemonics keys (also known as hotkeys) is pressing key combination (e.g. File menu, 'Alt' + F) to invoke the menu through keyboard. @dbaeumer What seems strange to me is the appearance of accelerator of submenu 'Undo' under menu 'Edit', usually it's like ""Ctrl + Z"", we localize the short form of the CtrlKey to Fareast languages as is in English."
21948|@dbaeumer ok thanks, everything is clear now. I will post a suggestion on uservoice. Maybe this should be clarified in the docs on the site, unless I missed it.
21949|@v-pavanp this branch is not yet meant for testing.
21950|dupe of #6192
21951|@v-pavanp this branch is work in progress and not yet meant for testing.
21952|@v-pavanp this branch is work in progress and not meant for testing.
21953|@magnasteyr thanks for the additional details and the log. The createFile event is actually a create file handle event. It doesn't create the underlying file. Modification to a file can be tracked using the WriteFile event. Could you please check again if you see any WriteFile operations.  I am using Code on a bitlocker encrypted primary drive on Windows 10 without any problems. From how I know bitlocker works I think it will not result in any additional file modification events. Do machines which don't show the behavior have an unencrypted drive?
21954|@v-pavanp this branch is work in progress and not meant for testing.
21955|"@outcoldman are you interesting in providing a PR for ""kind"" design."
21956|@nadako could you check whether the problem matcher now works with the changes from #6233
21957|@johnliu2016 the character you see is the Symbol for Command on the Mac.
21958|The reason for the uniquness is that we somehow need to identify them on the VSCode side. Unique per stack frame instantitation makes sense, however this would require us to drop our source cache per each step - so we would have to first experiment with how this behaves in practice. Making it a string also makes sense, however that would change our protocol and break other debug adapters. Adding @weinand to get his opinion on the matter
21959|@johnliu2016  These hotkeys do not work on OSX,  I have tried 'Alt' + F, 'Ctrl'+F and 'CMD'+F, none works for me. That's the part that confuses me much, looks ugly is another thing, other applications like Safari, Atom do not have such hotkeys hints(ie, hotkeys in brackets instead of on the right).
21960|FWIW, OS X Human Interface Guidelines  for menu bars,   https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/MenuBarMenus.html  Since vscode is cross-platform, I think it is important to bring native user experience to users on different platforms.
21961|Thanks @Darren. Mistook the OS scenario. @dbaeumer, my previous comment was based on Windows OS (sorry lack of OSX environment to test other product), if same loc work being shared targeting various platforms, I'd agree on separate consideration to fit this case.
21962|"You would need to enable watching in the node_modules folder:  ``` ""files.watcherExclude"": {         ""**/.git/objects/**"": true,         ""**/node_modules/**"": false     } ```  We chose to exclude large folders from watching due to performance issues."
21963|"Also, another case, inline comment in the third line, removes color of 'private' in the forth line:  <img width=""473"" alt=""capture d ecran 2016-05-19 a 12 00 28"" src=""https://cloud.githubusercontent.com/assets/5489200/15389928/83fa27dc-1db9-11e6-9b8c-0cc7e72f0b9f.png"">"
21964|I could verify this issue on linux.
21965|Thank you for the update.   Just a quick question, is this a new change as I can do not remember seeing this in older versions.
21966|"I've changed the filter settings of procmon to: - Process Name is  Code.exe - Operation contains File - Path begins with my_workspace_folder   and after that I opend the my_workspace_folder with code. But I could not find ""WriteFile"" opertions by process Code.exe in the output.   The procmon logfile is attached to this thread.   [ProcmonCode.zip](https://github.com/Microsoft/vscode/files/272386/ProcmonCode.zip)  The machines which are working correct are using an external ssd drive (unencrypted)."
21967|Another insight: The very same problem happens on the machines currently using the ssd drive, when opening a ts project from the internal c:-drive.
21968|Yeah, I think 1.0.
21969|@alexandrudima  _Exactly the same_ problem if I open a **minified** json file (just around 104kb) _most of the time_ (not every time). And even if it works well when opening the file, it's really slow. Then, if you press `ctrl` + `end`, it will become 'no responding'. I can provide 2 versions of that [json file](https://gist.github.com/neilsustc/eaa47016ae8fd792f60c55608f08e5e7) for test  windows 10 pro insider preview build 14342 vscode v1.1.1
21970|@dbaeumer  I just added it to my `settings.json`file. However, I do not have an option TypeScript in the dropdown of the output window even after restarting vscode.   Am I missing something here ?  EDIT:  Note that I do not compile with `tsc` directly, but with a gulp command. That should not interfere with the autocompletion.
21971|After playing with my files and everything, it finally appeared.  For now, here's the output, but it didn't crash in that part. Do you prefer that I send one once it stopped working ?  As for now : http://pastebin.com/raw/DZwegjDX
21972|This would be great.  Atom does this and I've grown accustomed to it.
21973|fixed with https://github.com/Microsoft/vscode-node-debug/commit/c700457140de6be80fce2bf0fee964bb55b4d6d0
21974|@dbaeumer I would prefer if somebody else will take this work.
21975|I hate to make people sound stupid but if you make the delta too high then when a first time user tries to drag a folder right next to another and it doesn't work they'll assume you can't drag and drop folders in VSC.  Can you simply add an option that we can enable folder drag-n-drop alerts?  To me this sounds like a much better option than playing around with drag deltas which appear to be working well.
21976|@mkyjakova '{0}' is a placeholder for an error message from the operating system (which is probably not  translated).
21977|Well but you would get feedback directly that you can move. We just want to prevent accidental moves.
21978|@helzgate the value 30 from above was just an (exaggerated) example.  Since I'm suffering from the same problem as you (but hate modal dialogs coming in my way), I tried to find a less intrusive way to help with this problem: instead of showing a brutal dialog in the top center of the window when the problem occurs, we could try to avoid the problem in the first place.  /cc @stevencl
21979|By analyzing the blame information on this pull request, we identified @egamma and @alexandrudima to be potential reviewers
21980|Hi **@sandy081**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Sandeep Somavarapu). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
21981|Setting this to June as we are wrapping up the May milestone and did not have a chance to investigate, let me know if you guys need it before and I will put back to May
21982|@outcoldman Fair. I created https://github.com/Microsoft/vscode/issues/6538 and https://github.com/Microsoft/vscode/issues/6539 to track this work.   Any objection to close this PR.
21983|@MLefebvreICO yes, I prefer having a trace when it stopped working since the trace will have information why the request failed.
21984|Reassigning to @alexandrudima to react on additional comments.
21985|"@bpasero it looks like the Mac doesn't have mnemonic support for Menus (at least Andre isn't aware of any). To make this look nice we either need to strip the last 3 characters ""(x)"" from a menu label under OS X when running on a fareast language or we need two different keys with different translations.   Moving to you to consider the best solution."
21986|@magnasteyr the ProcmonCode.zip attached is empty for me.  Would you be able to share your project. Then I would setup a Windows 7 machine and see if I can reproduce this ?
21987|By analyzing the blame information on this pull request, we identified @egamma to be a potential reviewer
21988|Hi **@lance**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
21989|It should not rely on the project, the same behaviour also happens when working on the angular quickstart project or on any other typescript project.  I have also tried to host the project on our NetApp storage. In this case the problem does NOT occure. It only occures, when it is on the local internal (C:) drive.  Here is the procmon logfile once again, sorry it was my mistake before... [ProcmonCode.zip](https://github.com/Microsoft/vscode/files/272837/ProcmonCode.zip)
21990|@isidorn I've added an attribute `allThreadsContinued` to the `ContinueResponse`. Please interpret it as follows: - if it is missing or if its value is true, implement the old VS Code 1.0 behaviour: show all threads as running.  - if the value is false show only the thread with the specified thread id as running.  @hbenl and @felixfbecker since you both need the single thread behaviour I suggest that you start to return the `allThreadsContinued: false` from the implementation of your continueRequest. VS Code 1.2.0 will be the first version that makes use of it.  @felixfbecker please let us know when we can remove our php workaround.
21991|the fix: https://github.com/Microsoft/vscode-debugadapter-node/commit/6e704e8fef40f0050ff8559d00873c3b1e48ba11
21992|So what about the StoppedEvent - does VS Code assume that only a single thread has stopped (note that the threadId in this event is not optional)? If so, maybe making the threadId optional would make sense (otherwise debug adapters implementing the stop/continue all model would have to send one event per thread).
21993|@dbaeumer Steps to reproduce in 1.0: 1. Open a JavaScript file, and type an expression like `__foo;`. 2. Now type `_` and the intelisense suggests `___foo`.
21994|duplicated -> #6525
21995|@jrieken I'll look into how that's done then :+1:
21996|Nice work!
21997|@bpasero - Still reproes in 1.1.1, but now I can always launch a second one from the command line, but not from windows explorer. In task manager, I see a new Code.exe process appear, then disappear after a couple seconds, and no new Code window.
21998|@johnliu2016 can you clarify what pattern I should look for to remove these mnemonics on Mac? Are you always just adding 3 characters at the end of the label in the form of `(<letter>)`?
21999|After playing around with this for a while, it's definitely not consistently opening the currently opened folder or it's parent.
22000|Related: https://github.com/Microsoft/vscode/issues/3988
