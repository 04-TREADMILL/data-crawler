12701|VSCode calls that Tasks ;-)
12702|I tried before using tasks. It was awkward.  On Fri, Mar 11, 2016 at 2:04 PM, Andre Weinand notifications@github.com wrote:  > VSCode calls that Tasks ;-) >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2780#issuecomment-195123868.  ##   Justin Romaine Senior Systems Architect Spark Dental Technology justin.romaine@gmail.com ph 021 764 506 hm 09 445 9166
12703|While fiddling with the config directories it might be worth tackling a portable version at the same time https://github.com/Microsoft/vscode/issues/329
12704|Alright, I did some extra exploration. I could not isolate the issue specifically, but it does seem to be somehow related to my project, though I'm not sure how exactly.  I pointed VSCode 0.10.9 at Typescript 1.8.2 and it worked fine. I upgraded 0.10.10, set to the same typescript version and it did not work.  However, 0.10.10 did work with another typescript project I had on my machine. Unfortunately, I cannot share the project that is not working as I am legally obligated to keep that information private.  I can give some details about the project, though and maybe you can help narrow this down.  The project is an Ionic/Cordova application built on their starter project. The project has `gulp` installed with `gulp-typescript`. External typescript references are being managed by `typings`. The typescript project uses internal modules with the `--outFile` option.  The project that is working also uses internal modules and `--outFile`, and is structured very similarly but just uses `npm` to manage tasks. It also uses `typings` to manage external typescript references. I tried setting everything but the file paths to the same in tsconfig.json and the broken project still does not work.  In summary: the issue seems to be project-specific but not an issue with typescript, because it works with the same version of typescript in the back-version of vscode.
12705|So the freezing happens when calling with `./code`, not just `./code &`? What console output are you getting? Does the window and/or UI appear?  What's coming in March may fix your problems, it's a new launch script and CLI. The launch logic past the command line args parsing hasn't changed much.
12706|It seems to be starting in the directory above now which is good. I'll reopen if I can reproduce what I think I saw.
12707|@alexandrudima What do you think we should make the <kbd>alt</kbd>+click shortcut on Linux? <kbd>alt</kbd>+click can't be used because it conflicts on the OS-level. I was thinking <kbd>alt</kbd>+<kbd>shift</kbd>+click previously but it seems that's used to expand the selection of the last selection without touching the others.  Atom uses <kbd>ctrl</kbd>+click, but that would conflict with link clicking in VSCode. Would adding <kbd>ctrl</kbd> to the shortcuts such that <kbd>alt</kbd>+<kbd>ctrl</kbd>+click adds a cursor and <kbd>alt</kbd>+<kbd>ctrl</kbd>+<kbd>shift</kbd>+click expands the last cursor selection work?
12708|Hi **@edumunoz**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
12709|ok I'll try.  2016-03-10 23:27 GMT+08:00 Benjamin Pasero notifications@github.com:  > @AndyYSWoo https://github.com/AndyYSWoo another theory I have is that > maybe it happens always in the same file when the editor colors the file. > These coloring rules are defined with regular expressions and certain input > might cause bad things to happen. Next time it happens it would be > interesting if you could remember the file you wanted to open. >  > Another guess I had is git: We periodically do something in the > background. It is unlikely this would cause the crash, but to outrule this, > can you see if setting git.enabled: false still causes crashing? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-194904354.
12710|I changed my username on Github after linking my account with my corporate account. Hence it's asking for CLA.  Anyway of re-triggering msftclas? I have already unlinked and re-linked my account again, so it shows the correct username on my corporate profile.
12711|@pflannery I glanced over and found you are using png. Will this work well on retina display?
12712|@Code-DJ it's really only in order to get it to work and show its working. The example icon pack will be removed before it's merged.
12713|Keep in mind when implementing this that we want to support background color in tmThemes https://github.com/Microsoft/vscode/issues/3429
12714|This would be included in extensions/ eventually right? Thoughts: - Intellisense is on which is pretty annoying for commit messages - I created https://github.com/Microsoft/vscode/issues/3991 to add styles for the new/changed/deleted file styles - My `.gitconfig` looks great
12715|Interesting, so you say the explorer is always sharp but the editor is not for you?
12716|View: Show Explorer (Cmd+Shift+E).
12717|So the freezing happens when calling with ./code -- yes.  It freezes after a few hours of usage, not instantly. VS Window remains frozen. Console output is in the above comment, here's another   ``` [marius@localhost VSCode-linux-x64]$ ./code --verbose bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell ### VSCode main.js ### /home/data/apps/VSCode-linux-x64/resources/app { pathArguments: [],   programStart: 0,   workers: -1,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   pluginHomePath: undefined,   pluginDevelopmentPath: undefined,   pluginTestsPath: undefined,   disablePlugins: false,   locale: undefined } Lifecycle#unload() 1 IPC#vscode-workbenchLoaded IPC#vscode-openFilePicker IPC#vscode-openFilePicker  <--- Last few GCs --->  68220044 ms: Mark-sweep 1395.1 (1457.6) -> 1395.1 (1457.6) MB, 3072.1 / 17 ms [allocation failure] [GC in old space requested]. 68223139 ms: Mark-sweep 1395.1 (1457.6) -> 1395.1 (1457.6) MB, 3095.2 / 17 ms [allocation failure] [GC in old space requested]. 68226240 ms: Mark-sweep 1395.1 (1457.6) -> 1395.1 (1457.6) MB, 3100.4 / 25 ms [last resort gc]. 68229369 ms: Mark-sweep 1395.1 (1457.6) -> 1395.1 (1457.6) MB, 3129.3 / 25 ms [last resort gc].   <--- JS stacktrace --->  ==== JS stack trace =========================================  Security context: 0x1460a833a859 <String[7]: file://>     1: _completed [file:////home/data/apps/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:~23] [pc=0x10d614784c73] (this=0x1dcb3a08cef1 <JS Object>,e=0x950159041b9 <undefined>)     2: arguments adaptor frame: 0->1     6: bound  [native v8natives.js:1208] [pc=0x10d606d9c670] (this=0x1460a8346061 <JS Global Object>)  ==== Details =======================================...  Failed to get crash dump id.  Lifecycle#window-before-close 1 Lifecycle#unload() 1 Lifecycle#window-before-close 1 Lifecycle#unload() 1 [VS Code]: detected unresponsive Lifecycle#window-all-closed Lifecycle#before-quit App#dispose: deleting running instance handle ```
12718|This has been fixed and will be available in the march vscode release https://github.com/Microsoft/vscode/issues/3829
12719|When you say copying it you mean you pressed <kbd>ctrl c</kbd>? On what vscode version are you? You would like a copy button in the context menu?  Also be aware of this limitation https://github.com/Microsoft/vscode/issues/2163
12720|"@zersiax ok I am removing the extra 'shortcut'. As for 'commands' being read, I thought it would be nice that you get to know in what context you are. The widget used for the commands list is very dynamic, it shows a lot of other things, not only commands. For example, we use "">"" as prefix in the input field to show commands, once you remove "">"" you end up in the list of files. If you type ""?"" you end up in a list of help entries that teach you how to use the widget with other prefixes.  I use this pattern in other places too, e.g. debug. When I use voice over I can see that voice over appends more contextual information with comma, for example ""file.ts, files explorer, list box"". I thought I would pick up this way of adding context to a label by adding my own context (the ""List box"" is added by voice over based on the ARIA role).  Appreciate feedback if this is too verbose or actually helpful."
12721|@justin-romano please file an issue about setting up tasks being awkward.
12722|duplicate of https://github.com/Microsoft/vscode/issues/3936, work around is also provided in ths issue.
12723|Closing this looks like a duplicate of https://github.com/Microsoft/vscode/issues/3936
12724|@joaomoreno Are you sure that's a dupe? More folks seem to run into this with the 10.10 update and it seems our extension delete story is broken
12725|@egamma good ideas, here is the new look depending on what you do:  **Untitled file** ![image](https://cloud.githubusercontent.com/assets/900690/13696449/b930a9be-e766-11e5-9408-cfbb2b468f8c.png)  **File with extension** ![image](https://cloud.githubusercontent.com/assets/900690/13696451/bced0b88-e766-11e5-8174-8100411b7698.png)  **File without extension** ![image](https://cloud.githubusercontent.com/assets/900690/13696457/c404e60c-e766-11e5-8692-5044b4520b4e.png)  Should we stop showing the info message for workspace settings at all?
12726|#3012
12727|@tht13 if you set the GITHUB_TOKEN environment variable, this issue is gone.
12728|Thanks @bpasero  :smile:
12729|@tht13 actually I pushed a new version of vscode@0.11.8 that in case of GH rate limit error just falls back to a well known list of tags. So you should be good either way.
12730|sorry, no update yet. taking as input for a broader icons/glyph story which includes status bar, symbol icons (e.g. for symbol search et al), editor decorations etc
12731|@VictorIancu something in the developer console when this happens?
12732|**@edumunoz**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
12733|@dbaeumer how would we know that it's a generated file?
12734|This looks like a good chance for endgame leak testing.
12735|Looks like a good chance for endgame leak testing if it still happens.
12736|@bpasero I don't see how that will be useful? Everything happens now in a separate process.
12737|This has nothing to do with the _extension delete story_. This is the update through Inno Setup. It's a bundled extension, not a user installed one.  On update, Inno Setup makes sure Code is shutdown. Code makes sure the renderers and main processes are shut down. The renderers make sure the extension hosts are shut down. The extension hosts call `deactivate` on the extensions. Apparently, Omnisharp fails to respect that and keeps something running long after Code is shutdown. Inno Seutp fails to remove the directory and moves on.  There is really nothing I can do besides filing an issue to Omnisharp for them to figure out why their server is still running.  That and document the problem in FAQ, like discussed yesterday with @egamma and suggested by @gregvanl.
12738|We found out about the issue and here is what happens: - user opens a large folder in VS Code - VS Code installs a watcher on the root of the folder from another process - watcher starts to walk the folder in a way that memory increases a lot - eventually the process dies with out of memory - VS Code detects this and starts the watcher again because we typically never want to loose the watching information - this goes on and on forever and simply results in constant and high CPU use  We also verified that chokidar was not falling back to polling.  The fixes for March are: - allow the user to configure excludes from the new `files.watcherExclude` setting - add node_modules to the excluded folders by default - do not restart chokidar after 5 failing attempts  For the future, we are looking into https://github.com/Microsoft/vscode/issues/3998
12739|We found out about the issue and here is what happens: - user opens a large folder in VS Code - VS Code installs a watcher on the root of the folder from another process - watcher starts to walk the folder in a way that memory increases a lot - eventually the process dies with out of memory - VS Code detects this and starts the watcher again because we typically never want to loose the watching information - this goes on and on forever and simply results in constant and high CPU use  We also verified that chokidar was not falling back to polling.  The fixes for March are: - allow the user to configure excludes from the new `files.watcherExclude` setting - add node_modules to the excluded folders by default - do not restart chokidar after 5 failing attempts  For the future, we are looking into https://github.com/Microsoft/vscode/issues/3998
12740|We found out about the issue and here is what happens: - user opens a large folder in VS Code - VS Code installs a watcher on the root of the folder from another process - watcher starts to walk the folder in a way that memory increases a lot - eventually the process dies with out of memory - VS Code detects this and starts the watcher again because we typically never want to loose the watching information - this goes on and on forever and simply results in constant and high CPU use  We also verified that chokidar was not falling back to polling.  The fixes for March are: - allow the user to configure excludes from the new `files.watcherExclude` setting - add node_modules to the excluded folders by default - do not restart chokidar after 5 failing attempts  For the future, we are looking into https://github.com/Microsoft/vscode/issues/3998
12741|Closing in favor of https://github.com/Microsoft/vscode/issues/3998
12742|@jrieken yeah looks like this should move to salsa if it still happens
12743|@weinand Just having to to do <kbd>Ctrl</kbd>+<kbd>P</kbd> `task run` everytime I want to launch my program is not good UX. <kbd>Ctrl</kbd>+<kbd>F5</kbd> is much nicer
12744|@stkb It does crash :scream: Will drill into this asap. Thanks for reporting such awesome steps.
12745|@felixfbecker can you reassign the shortcut?
12746|@alexandrudima This is happening with the `textualSuggest` and us never returning from `MirrorModel._wordenize`
12747|"<img width=""839"" alt=""screen shot 2016-03-11 at 09 59 21"" src=""https://cloud.githubusercontent.com/assets/1794099/13697778/094a8466-e770-11e5-861c-a6796ede7834.png"">"
12748|The failing edit tree looks like this:  ``` [1,8] [1,9] '\n' [3,17] [3,18] '\n' [3,18] [3,18] '    ' [4,1] [4,5] '        ' ```  To test do the following - in file formattingProvider.ts uncomment the additional settings in the method getFormatOptions at the end of the file. - build and run. Create ts file with the content  ``` typescript class A {     someProperty = false;     someMethod() {     this.someMethod();     } } ``` - format the file
12749|Afaik VS Code only allows `isTestCommand` and `isBuildCommand`. There is no `isLaunchCommand`, so typing `task run` cannot be avoided. But even if there was `isLaunchCommand`, having this done over the debug system would still be nicer, because you could only have _one_ `isLaunchCommand`, while <kbd>Ctrl</kbd>+<kbd>F5</kbd> would always use the currently selected launch config.
12750|👌🏼  Sent from my iPhone  > On 11 Mar 2016, at 08:39, Benjamin Pasero notifications@github.com wrote: >  > Closed #774. >  > — > Reply to this email directly or view it on GitHub.
12751|C# is now an extension, instructions to isntall are here https://code.visualstudio.com/Docs/languages/csharp#_installing-c35-support
12752|From a debug protocol perspective I suggest to rename the `stopAllThreads` attribute on the StoppedEvent to `allThreadsStopped`. `stopAllThreads` sounds like an action, whereas `allThreadsStopped` makes clear that this is additional information on the StoppedEvent.  @isidorn could you please review the PR from the front-end perspective.
12753|+1
12754|@chrisdias: just to be clear. What I can add is lang='de-DE'. The OS talks 2 digit language with variants not three digit.
12755|Note that you can customize the templates using Preferences > User Snippets. For that reason I don't think we should run a formatter on them, as this would change the snippet. The creator of the snippet might have added empty lines and such on purpose.
12756|This issue was moved to textmate/c.tmbundle#38
12757|We don't have that yet. I'll add it to our backlog.
12758|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/11
12759|Even better :+1:
12760|@stkb wondering if you have shipped your extension with such a word definition. Now we will throw an exception from `setLanguageConfiguration` which might be to harsh. The rule is that a word definition must not match the empty string.
12761|We currently only look at the indentation of a line to determine the folding regions. As the comments in this example all start on the first line, they are not counted to any region that starts earlier. To implement your request we need to add more language knowledge to the folding regions. We have issue https://github.com/Microsoft/vscode/issues/3422 for this
12762|Tab behind a word invokes emmet. @egamma Does emmet have specific php support?
12763|Thank you.
12764|maybe we aren't waiting long enough ;-) since this seems to be reality should we be less strict wrt empty folders in the ext-folder?
12765|it's working now
12766|@jrieken Thanks, it's in the [vscode-elm](https://github.com/sbrink/vscode-elm) extension, and was of course a bug, so throwing an error seems fine. It just didn't get noticed until v10.10 where I experienced the crashes. Have submitted a fix there.  Some other people have also reported crashes with that extension (sbrink/vscode-elm#41), but hopefully that was the reason.
12767|Fixed. If German is picked by VSCode as the best language I append ?lang=de to the URL.
12768|This problem was https://github.com/Microsoft/TypeScript-TmLanguage/issues/84 which is now fixed and will be fixed in the March release.
12769|ahh :) It makes sense then. I thought the commands pallet was just that and in that case it would've been a little verbose. But I think in this case it's just right :)
12770|@jrieken I think the best we can do is to look if we find a tsconfig.json file in one of the parents directory.
12771|This issue was moved to Microsoft/TypeScript#7478
12772|This issue was moved to Microsoft/TypeScript#7479
12773|I cannot reproduce this with a simple extension. I assume you have `:` registered as completion trigger character. Any chance the subsequent request isn't getting a valid result?
12774|Absolutely. All in for that.
12775|@bpasero I move this to you since this is a general workbench issue. We can only specify command line args once. I am in favour of closing this. Supporting this is a lot of work for a corner case we fix.
12776|With the March release VS Code will support to 'run' a program (in addition to 'debug' it). The shortcut is <kbd>Ctrl</kbd>+<kbd>F5</kbd>.  If you want to support this in your debug adapter, just check for the boolean attribute `noDebug` in the arguments passed to the **launchRequest**. If it is 'true' don't enable debug mode but just 'run' it. VS Code will maintain a debug session while the program is running and pressing the 'Stop' button sends a **disconnectRequest** request where you can stop your program. If your debug adapter doesn't support 'Run', it will fall back to 'Debug'.  /cc @lukehoban @daviwil @roblourens @rkeithhill @gregg-miskelly @felixfbecker @rebornix @MSLaguana @DonJayamanne
12777|Cool!
12778|@bill-mybiz I am still unsure whether you are seeing this in TS or JS. Would you be willing to share your workspace? That would ease tracking this down?
12779|@dbaeumer we actually pass all command line arguments from the second instance to the first but I am not sure where --locale needs to be picked up in order to get the translation.  I would think this is not really a usecase for a user though.
12780|@isidorn: I agree the promise should always complete. Do you have steps in which it doesn't. Please be aware that it completes when the process running the task completes. So if you have a watching task it can take a long time until it does.
12781|Files and symbols category. Sorry about the delay...
12782|If I understand right, this is a similar snippet:  ``` less .btn-group {   .btn:  } ```  and you try to do code completion after the `:`  This is a bit of a tricky case for the LESS parser to detect, and never worked. Why you get some results in CSS is that the CSS parser went into error recovery after seing the inner class name.
12783|@dbaeumer well my case is that I have a watching task. And the `run` promise never completes because the task is not terminating. I would still expect the promise to complete since I am calling `run`, the task has just been ran thus the promise should complete imho. If you do not agree, then how should I get a task summary for a task just `run` with a never completing promise?  For repro steps: 1. Generate hello world extension 2. Put breakpoint in `debugService.ts:645` 3. F5, notice `Promise` never completes
12784|@isidorn thanks. Was able to reproduce. Lets look to fix this for March
12785|It has value when the user is using tsdk to use another version than the one we bundle. So I suggest to only show the version in the status bar when the tsdk setting is set.
12786|This issue was moved to textmate/c.tmbundle#39
12787|Python and C would be different issues and not related.  This issue has to do with the C++ grammar. It's not a regression.
12788|@shadow-cs steps?
12789|Yes your snippet is similar. I though previously I had been using code with less and it had selector intellisense. CSS though the selectors already work when there is no error(using straight CSS)
12790|Closing this, as general functionality is there. Test plan: https://github.com/Microsoft/vscode/issues/4006
12791|I understand how this can happen but only during a short update window and not permanently. @pflannery Do you have a snippet which helps me to reproduce this?
12792|May I suggest that you also test `git add -p` and pressing <kbd>E</kbd> to edit a hunk?
12793|To anyone concerned wondering on status, it seems the chromium bug reported has been picked up by someone who seems to know their stuff. It was smart to leave the ARIA code in but commented since we'll be needing it soon I predict. Also, another disadvantage of only using alerts is the fact these don't get reported on the braille display. This is fine for general alerts, but for this having that work properly could actually be a huge productivity booster. My guess is that the ARIA way of doingthings rather than alert will make this happen, which is a big plus. I'll report in once I know more.
12794|@felixfbecker now we just need coloring I guess ;)  ![image](https://cloud.githubusercontent.com/assets/900690/13701458/5b9f1674-e788-11e5-8779-be4ff21df750.png)
12795|Getting there:   ![image](https://cloud.githubusercontent.com/assets/900690/13701528/bd8ae69c-e788-11e5-835b-e4455a8f840f.png)
12796|@bpasero Nice. I use this very often.
12797|@lfurzewaddock As a workaround you should use `fsPath` (which also handles network shares). The real fix is to use a 'scheme'-dependent encoding. Fixing this might have unwanted consequences because we use the URI often as a key in persisted storage
12798|great
12799|OK @jrieken, `fsPath` will work on all 3 platforms (Win, Mac and Linux) too?  Out of interest if I implemented 'scheme'-dependent encoding locally for my extension, I would check `editor.document.uri.scheme.toString()` then encode which property? In other words which property holds the raw/untouched path, recommended to be encoded depending on the scheme to work on all platforms?
12800|Which is an information piece I'd like to get from tsserver TBH
