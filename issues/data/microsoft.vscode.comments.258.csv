25701|Over 5000 changes. Note that these are **active changes**, not files in repository.
25702|@elemongw How would the user expand a directory, then?
25703|Yeah sorry I should be more specific. Currently wherever you click in the line, the tree expands. The standard behaviour is to expand only when the little arrow that is before the folder name is clicked.
25704|"I don't know why but the fix doesn't work for me... Actually the fix work but it doesn't help me as it supposed to do... I always end up somewhere else in the code...  I posted on stackoverflow my issue and i'm searching to disable this feature...  http://stackoverflow.com/questions/37683703/how-to-disable-ctrl-click-in-vs-code  Just found this issue ! This is pretty annoying :/ !  And i would rather be able to just remove the feature than ""patching"" it and changing my way to use ctrl+...  --- Usage I generally do this :  `ctrl down + mouse down + mouse move + mouse up + C/V`  So as you can see the only way is to be able to modify the key bind i guest ?"
25705|Would be great to be able to split integrated terminal / task output in the bottom pane.
25706|cc @bpasero what do you think?
25707|Perfect.  That did the trick.   Thanks much, David
25708|Note that decoration types are kept until you call dispose on them. I will have a look, but it's clear you can't create too many of them. With the latest change you don't need to create a decoration type for every attachment text, but can refine the type by defining before & after attachments on the decoration itself. These decoration are more expensive to be build (css rules need to be added) but are cleaned up as soon as not shown anymore.
25709|@bargeruns that would be this one https://github.com/Microsoft/vscode/issues/7161 :smiley:
25710|Duplicate of https://github.com/Microsoft/vscode/issues/2973
25711|Duplicate of https://github.com/Microsoft/vscode/issues/6451
25712|Upstream issue blocking configurable copy/paste: https://github.com/sourcelair/xterm.js/issues/118  xterm.js did recently add <kbd>ctrl</kbd>+<kbd>insert</kbd> to copy and <kbd>shift</kbd>+<kbd>insert</kbd> to paste in https://github.com/sourcelair/xterm.js/pull/107, so this will be the 'workaround' until https://github.com/sourcelair/xterm.js/issues/118 gets done.
25713|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/81
25714|I strive for a consistent experience across platforms personally (tweaking keybindings/settings where necessary). I seldom use OS X though and Linux/Windows are fairly similar.
25715|Closing this off as the conflicts are pretty significant. Hoping to have another crack at this in July debt week.
25716|Going to push back to July as I was too busy with Linux packaging improvements early this month.
25717|By analyzing the blame information on this pull request, we identified @egamma and @joaomoreno to be potential reviewers
25718|Hi **@robspassky**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
25719|@isidorn :+1: sounds good, appreciate your support on this!  I'll start working on the code and get the PR through as soon as possible.
25720|Whoops, sorry -- this was just a test!
25721|This is still an issue, and would be nice if it were resolved.
25722|Ah, I have misunderstood some things.  Sorry about that.  First, you question was on point: I am using a proxy, though it is automatically detected by most applications.  There is no system level proxy settings.  This is not a VS Code problem, but an issue with proxy settings.  I just pulled the proxy from http://wpad/wpad.dat  I will close this in a bit or you can close it, but I was wondering as an aside: will auto detect proxy settings make it into VS Code at some point (using wpad)? (Edit: I will start a new suggestion)
25723|Added a small section to https://github.com/Microsoft/vscode/wiki/How-to-Contribute#packaging
25724|I am just chiming in on this to suggest that if PAC files are supported, it would be useful to support WPAD files as well for automatic proxy detection.  I don't know if this is so much a bug as a feature suggestion (but that is up to you guys).
25725|Running `ls -lR /usr/share` on Linux I saw the renderer process max out a CPU while the command was running, but memory stayed relatively low at around ~150MiB max terminalProcess (average around 80) and 250MiB for renderer (average around 200). terminalProcess dropped to 55MiB when it was done.
25726|This is likely related to https://github.com/Microsoft/vscode/issues/7554
25727|Upstream issue: https://github.com/sourcelair/xterm.js/issues/126
25728|"@weinand   Pic 1  ``` ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron"" ""externalConsole"": false ```  ![untitled1](https://cloud.githubusercontent.com/assets/1716442/16018247/50bc04ec-31ac-11e6-9902-a6c831ced139.png)  Pic 2  ``` ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron"" ""externalConsole"": true ```  ![untitled2](https://cloud.githubusercontent.com/assets/1716442/16018248/50bde6d6-31ac-11e6-9f23-97f24381046c.png)  Pic 3  ``` ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron.cmd"" ""externalConsole"": false ```  ![untitled3](https://cloud.githubusercontent.com/assets/1716442/16018249/50db3272-31ac-11e6-9d9d-30cab60acaba.png)  Pic 4  ``` ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/electron.cmd"" ""externalConsole"": true ```  ![untitled4](https://cloud.githubusercontent.com/assets/1716442/16018246/50b83722-31ac-11e6-868a-a3c54dd4265e.png)  Something worth mentioning is that when using settings of Pic 3 the console is launched as an Electron process (weird?!)  Hoping the screenies will give an insight to the strange (bug?) behavior."
25729|The command was renamed to `workbench.action.terminal.toggle` and will be switched back to `workbench.action.terminal.toggleTerminal` in tomorrow's build. Going to wait until there is some command deprecation method before changing it.
25730|pty.js issue: https://github.com/chjj/pty.js/issues/141
25731|Yes, that did seem to make a difference.  I’ll let you know if the problem pops up again. FYI I updated to 1.2 instead of the nightly build. On June 13, 2016 at 2:30:32 AM, João Moreno (notifications@github.com) wrote:  Can you give the Insiders release a try? It has a few fixes which can fix this issue.  https://code.visualstudio.com/blogs/2016/05/23/evolution-of-insiders  — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub, or mute the thread.
25732|"Just FYI if I use  ``` ""program"": ""${workspaceRoot}/node_modules/electron-prebuilt/cli.js"", ""args"": [""bin/resources/app/main.js"", ""--enable-logging""], ""externalConsole"": false, ```  I get the same behavior as Pic 3.  If I exclude `""--enable-logging""` I get the expected behavior (no console pops up) but I have no logging in the Debug Console (or at least I think I have not)."
25733|It would be very helpful if task console output is colorized in the _Tasks_ window just like it is in the _Terminal_ (ctrl+`) window.
25734|Turns out the version of [backspace-plusplus ](https://marketplace.visualstudio.com/items?itemName=jrieken.backspace-plusplus)I was using didn't work well VSCode 1.2.0. Latest version seem fine.
25735|Max CPU is fixed by my PR https://github.com/sourcelair/xterm.js/pull/128
25736|This was caused by the terminal doing DOM manipulation for all data that was coming in. Even for commands that completed in seconds, if they produced a lot of output, they would take a long time to display in the UI. https://github.com/sourcelair/xterm.js/pull/128 fixes this for the most part; the terminal will still take longer to execute for high-data commands than the pty, but it can be killed.
25737|This will probably be fixed by sourcelair/xterm.js#128 as well as there will no longer be a bazillion DOM manipulations when running `ls -lR /usr/share`.
25738|Landed in insiders
25739|This is fixed in latest, likely to do with colors 16-255 not being defined previously.
25740|+1
25741|Ok - I just got it again. I used the CLI to open code in a project. Reopen worked. Is there any log I can check? Anything I can do when Code is in the state itself?
25742|This might seem a bit pushy, but is there anywhere i can keep an eye on the progress of this?  (Can't seem to find anything newer than this)  It's a feature i really miss, as i'm starting to thoroughly enjoy VSCode on Ubuntu with .NET Core and so on. (Also useful whilst learning Mvc)
25743|By analyzing the blame information on this pull request, we identified @isidorn and @bpasero to be potential reviewers
25744|Hi **@tstringer**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <p>         It looks like you're a Microsoft contributor (Thomas Stringer). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.     </p>  TTYL, MSBOT;
25745|@isidorn I've created the PR here: https://github.com/Microsoft/vscode/pull/7627 Let me know if this looks good or if there's something you want me to change. Thanks!
25746|By analyzing the blame information on this pull request, we identified @jrieken to be a potential reviewer
25747|Hi **@cbreeden**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
25748|This should be unblocked now?
25749|"Found that this was a duplicated of this issue: https://github.com/Microsoft/vscode/issues/7433  Removing the entries which was somehow added to my user keybindings.json resolved the issue.  ``` { ""key"": ""shift+alt+left"",     ""command"": ""cursorColumnSelectLeft"",                                   ""when"": ""editorTextFocus"" }, { ""key"": ""shift+alt+right"",    ""command"": ""cursorColumnSelectRight"",                                   ""when"": ""editorTextFocus"" }, ```"
25750|Another weird problem: pressing up*3 and down*3 multiple times screws up the current line.
25751|Looks like a recent regression, doesn't repro on 1.2.0
25752|This issue hasn't been updated in a while but I wanted to report that I have the exact same issue (on arch linux) and can provide any details you required to try and figure this out as I would love to use vscode again (worked up until the March release I believe and then it hasn't worked for me since).
25753|"The hack ""works"" (x2go via LXDE) but then seems to break other apps like VLC for me (under normal desktop login, nothing remote)."
25754|> Note that decoration types are kept until you call dispose on them.  I call `dispose` in the provided test code for all decoration types. There still must be something somewhere that is not cleaned up.  > With the latest change you don't need to create a decoration type for every attachment text, but can refine the type by defining before & after attachments on the decoration itself.  Oh, it's awesome, I didn't realise that, thanks for noting it. It fits my scenario much better than creating a lot of decoration types.
25755|By analyzing the blame information on this pull request, we identified @isidorn and @outcoldman to be potential reviewers
25756|@isidorn  I create a new PR for this. So I will close this. https://github.com/Microsoft/vscode/pull/7636
25757|@alexandrudima This can be merge?
25758|I'd like to second this feature request. Right now not being able to turn that off is the only thing stopping me from using VSCode as my main editor.
25759|I second this. Preview feature is supposed to go with the language mode instead of file extensions. BTW, I think it's also Okay to preview txt files even if it's recognized as plain text, just like what we have in Atom.
25760|On my machine, the cs files are still using the system default icons instead of Visual Studio Code even if I installed both latest stable and nightly-build version. Wait for others' observation.
25761|"@cfjedimaster the full core dump should appear when you open the ""Console"" application and search for it under ""User Diagnostics Reports"".  Does it always happen for the same folder you open? What folder is that?"
25762|@lzantal are you using https://github.com/DonJayamanne/pythonVSCode extension for django debugging?
25763|@cbreeden thanks for your help on this, it's a valid bug fix and we ran into this issue several times and felt really painfull! We've had a fix for this issue while implementing Markdown Extension Extraction, see https://github.com/Microsoft/vscode/blob/kieferrm/markdown/src/vs/workbench/parts/html/browser/webview.html#L109 . Sorry for the late reminder :)  I'm Okay to have this merged first, totally up to @jrieken . If we want to merge this PR, my only comment is use another `contentDocument.write` instead of string concat.
25764|Oh nice.  I was writing a markdown editor extension myself when I came across this.  No need to merge this if @jrieken is on his way to merging the Markdown Extension.  I suppose this means that we will be able to change out the markdown rendering engine and even perhaps have access to those buttons in on top of the documents.  Exciting stuff :) I'll wait, thanks for the response. :+1:
25765|Personally I prefer sticky tabbing instead of window splitting as the window size is always too small ... something like tmux window would be great :)
25766|+1
25767|Thanks. My plan is to merge the markdown branch this week.
25768|I can also pitch in and say I am experiencing this more often than before. I have a largeish repository of `.js` files (around 50k lines of code), I usually never close any windows (why would I need to?). What happens is that editing gets slower and slower over time, and then after a further while, sometimes just leaving Code sitting there doing nothing, I get the above crash report window.  I never open via CLI, and it does not really seem to be related to a specific folder.  I am also on Mac OS X 10.11.5.
25769|Guys there are now buttons for upvoting, please don't comment +1 anymore, it doesn't add any value to the discussion but creates a notification for everyone participating and clutters the thread ![image](https://cloud.githubusercontent.com/assets/10532611/16033636/61d410ba-320d-11e6-90d9-1213683c5c8a.png)
25770|Discussion on settings names continues in https://github.com/Microsoft/vscode/issues/7643
25771|Discussion on settings names continues in https://github.com/Microsoft/vscode/issues/7643
25772|@dbaeumer I would say yes since JS files will be handled by Salsa which will install the TS file watcher. To be sure @Urahara could do the following: - reproduce the problem - use handle.exe (https://technet.microsoft.com/en-us/sysinternals/handle.aspx) to find out which process is holding a lock to the folder or files inside a folder that can't be deleted.  Post the process, including its command line here. Then we can be sure which process is holding the lock.
25773|Great job - thanks 🍻  For consistency I have also added `EnableAllBreakpoints` as a global workbench action.
25774|My two cents: for me a setting always reads easier if a verb is included. May be we missed the boat but would it be possible to group these under workbench.editor. So something like `workbench.editor.showTabs', 'workbench.editor.openAsPreview', 'workbench.editor.openPositioning'.
25775|@mocanu-razvan great. I will close the issue then.
25776|Closing the issue then.
25777|For the first iteration of settings is `workbench.quickOpenPreviews` really necessery? I would just start with `workbench.previewEditors` and if users ask then add `quickOpenPreviews`.
25778|Can I suggest we expose this same functionality via a command as well - for extension developers. This way extension developers can launch the integrated terminal window and run some commands to set up the environment or launch a program for CLI debugging.
25779|@jrieken may be I am misunderstanding it but the keybinding is currently not sensitive to a scope. From the discussion I see a need to disable '.' as a accept character in comments and strings. But to my understanding there is no way to control this right now. Is your suggestion to expand the key binding feature with a scope or should we add that information to a completion item.
25780|I think this wouldn't fly so late in the game. Besides, we're trying to achieve OS consistency in keybindings, but product consistency in UI, so we'd probably not take just clicking the twisty for expanding/collapsing.
25781|How would the behavior be if I set previewEditors = false and use quick Open and there is no setting. I would expect it to open as non preview as well. If that is the case then I think we don't need quickOpenPreviews unless users ask for it.
25782|Yes we absolutely want to get there. Can you show me how your wpad proxy is configured in your system?
25783|Forwarded to marketplace team.
25784|@cuganator Do you see any interesting messages? What if you run with `--verbose`? What do you see exactly?
25785|Excellent, thanks. We will push an update to the stable release this week with these fixes.
25786|Yes this is designed behavior - we were inspired by the chrome debugger which behaves that way. When the breakpoint is disabled making it jump to the original assigned position feels natural to me.  Closing as designed, but I have no strong opinion here so if @edumunoz or @weinand have strong preference I can easily be conviced to go in another direction.
25787|Closing this PR for now, will reopen if @jsloyer provides more arguments and answers to the questions above.
25788|Why is it called a 'preview'? I find this confusing, especially as there is the Markdown preview. what about `workbench.editorTabs.reuse': 'never', 'openFromExplorer', 'always'`
25789|If `preview` is confusing for people we should just use the term `pin` and just negate the setting. We do not use it anywhere else.
25790|`workbench.editorOpenPositioning` - `left` Left of current tab - `right` Right of current tab - `last` Always last  See also: https://chrome.google.com/webstore/detail/tab-position-options/fjccjnfkdkdmjohojoggodkigkjkkjhl
25791|@admmasters Thanks for filing the issue.. Since you are on insiders and which is now getting updated everyday, can you please try on latest 1.3.0 insider ? Because, I see this issue is not appearing to me on latest.   Thanks
25792|Great job - I agree with the reasons you outlined above.  The cache was originally added because the workbench would complain if two editor models get instantiated with the same uri - there would be an error message in the console with lots of characters 'a' since @alexandrudima tries to hide sensitive uri information.  However I am no longer seeing any hickups even if we do not use a cache - thus we sometimes tell the workbench to open two different editor input objects with the same associated uris.
25793|I'm currently working on refactoring the SCSS support. It will be 100% functional again later today. Sorry and thanks for reporting the issue. If you are on todays build, first open an css file, then switch to the scss file and intellisense should work.
25794|@juliantrd Can you please let me know which setting option you are mentioning about. Thanks.
25795|For people asking about all the options, yes we have individual users for each and every option I added (e.g. https://github.com/Microsoft/vscode/issues/5554, https://github.com/Microsoft/vscode/issues/2754, https://github.com/Microsoft/vscode/issues/6507 to control the preview behaviour).
25796|@Junebuggy12 I am guessing you forgot to update the problem description. Closing it for now. Please reopen with proper details.  Thanks.
25797|If the support like Chrome, always position the close button to the mouse position, it is too perfect! 😲   ![Chrome tabs](https://img.alicdn.com/tps/TB1Kd6TKpXXXXa9XXXXXXXXXXXX-506-187.gif)
25798|@yisibl chrome has it easy because each tab has the same width. this is not true for us. I have extracted https://github.com/Microsoft/vscode/issues/7646
25799|@bpasero Can we change the same width? Complete file name can be displayed when hover.  Atom 1.9:  ![Atom tabs](https://img.alicdn.com/tps/TB1dDvzKpXXXXX1XVXXXXXXXXXX-765-166.png)
25800|Demo ![Chrome tabs](https://img.alicdn.com/tps/TB1Kd6TKpXXXXa9XXXXXXXXXXXX-506-187.gif)
