18901|Our folding is based purely on indentation. You'd have to fix the indentation to get it working. Issue #3422 is about adding language smartness to folding. In the case of html this would mean that the indentation strategy knows about opening and closing tags.
18902|This issue was moved to OmniSharp/omnisharp-server#215
18903|This issue was moved to Microsoft/vscppsamples#28
18904|This is a technical limitation and can't be fixed. There is a main process that starts everything and determines the language to be used (necessary for menus which for example are shared on Mac). This process doesn't restart on a window reload.
18905|> please explain that in more detail, I do not see the allocation of an array with 10000 elements  sorry, wrong link. [this](https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/glob.ts#L238) will become an array with 1000 elements.   > Also, how does this help for the case of the bounding condition being hit?  It does not help. If cache you should respect recency of your items. Also, I doubt if your caches for glob buy you anything. You replaced a simple regular expression with a iterating over object members, array creation, and map lookup. If you think using a regex ala `^**/*.\w$` is a perf problem just use string math.
18906|I disagree: The return info is correctly shown when you select the method in intellisense. In this show situation it is all about method parameter hints. So to not confuse we only show the info for the parameter. Of what value is it if I complete the first parameter to know what value the function returns.
18907|I think we left that out in the assumption that TypeScript uses commonjs as default anyways. @egamma might know more
18908|Agree. Moving to the TS team which provides the formatter.
18909|This issue was moved to Microsoft/TypeScript#8246
18910|I also see this when launching `code-alpha --locale=DE`. However these titles still have the localize call - which has not been changed since 1.0.0 (when they were localized). What changed is when these views are registered, but this should not influence the translations right?  Forwarding to @dbaeumer
18911|I believe this is designed behavior and also how we behave in 1.0.0. The original code window is used for debugging, so IMHO all debugging information should be displayed in the original window, like the `console.log`. Otherwise the experience would be disconnected for the user - to inspect variables he woudl go to original window but to inspect log to the dev host window.  @bpasero opinions welcome  Closing this for now as designed.
18912|Similar to #5633 this is designed behavior. The dev host window console is not indented to be used to inspect the dev host behvaior, for that you have the console in the original vs code.  Also closing as designed. Feel free to provide arguments as to why you disagree and we can reopen the issue.
18913|FYI @edumunoz also created #5643
18914|perf test says it doesn't really matter. sometimes caches win, sometimes no caches win. The trivia regexes should be unrolled into string math
18915|awesome!
18916|I was too optimistic planning this for April. The current implementation is based of token/scope information in TM grammars. The issue is that each grammar does it different, like `scope` from above where it seems to include the leading whitespace. We redo this with a implementation that doesn't rely on  token information
18917|It doesn't. However have you moved or renamed files or nls keys.? This could explain why these strings are now in English.
18918|FYI also created test plan item #5644, so let me know if you think of some scenarios that should be tested
18919|This is OK.
18920|@dbaeumer I have renamed the file where these nls string live. But it is still the same nls key. Does that mean the translation will be picked up with latest?
18921|We have a feature request #981 to be able to define more than one command and to run more than one task. Any objection to close as dup?
18922|Actually, I don't think this is an API request but an issue with TypeScript. With sample below is says the active signature has three parameter but the it also says the fourth is the active one.  ``` function aaa(b: boolean, n: number, ...more: any[]) {  }   aaa(true, 1, ddd, <CARET>) ```  ![screen shot 2016-04-22 at 10 07 18](https://cloud.githubusercontent.com/assets/1794099/14735602/117faaa8-0872-11e6-8a42-7b74cdef06ec.png)
18923|Yes.
18924|@dbaeumer where can i follow new features ?
18925|Closing this then since it will fixed when we get newer translations
18926|For every iteration we run we create a plan that describes what we want to achieve during that iteration. The one for April is here: https://github.com/Microsoft/vscode/issues/4888.   We already started discussions on how to best solve the multi command / multi tasks problem but haven't landed on a final solution yet. One idea was to provide a better terminal integration because that gives more freedom.
18927|@bgse known issue. I opened a issue in the TS repository for this.
18928|Thanks!
18929|@dbaeumer What would you prefer, explicit `MessageOptions` or alternatively a property on the `MessageItem` signalling it replaces _Close_?  Historically, I added the close action by default such that there is always an affordance to close when no message items are present. So with the `MessageOptions` someone could say don't show close but also provide no alternative which isn't valid. Moving the _replaces close_ information into the `MessageItem` avoids that problem but someone could set that on all items which is a little bogus. What do you think?
18930|spelled out  ``` export interface MessageOptions {  noClose: boolean; }  export function showWarningMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T>;  // repeat for Info and Error... ```  or letting the MessageItem signal  ``` export interface MessageItem {           title: string;     isCloseAffordance?: boolean; } ```
18931|It seems TypeScript told me that a lot more files are part of that project... @dbaeumer In what repo does that happen?
18932|Thanks @bpasero for reviewing. Fixed it.
18933|Cool ☺️
18934|Anyway they should check extension before adding them to the market.
18935|It looks like this bug is fixed. Can't reproduce anymore.
18936|We're using https://github.com/textmate/sql.tmbundle.  From the discussion in atom/language-sql#13 it looks like this is about different dialects of SQL. You seem to use the MySQL dialect, where '\' is not an escape character. Just removing it wouldn't work, as it would break other users. I guess we need to add separate language support for MySQL.
18937|thank you for answer @dbaeumer
18938|@djabraham Awesome! Let me know if I can help!
18939|- A thread that exits should disappear from the call stack view
18940|@isidorn Tested, everything works as it should! Great work
18941|"@bpasero Thank you for investigation.  ok, `⌘ + ~ (tilde)` gave us meet the operation as desired.  ![keycast_insider_workaround_licecap](https://cloud.githubusercontent.com/assets/13635244/14736771/98c78148-08b3-11e6-804a-a497fa092d48.gif)  It is global setting does not work for OS X.  Leave the guide just in case.  **Summary:** - This problem is Electron bug. - `⌘ + F1`(Move Focus to Next Window) does not work in vscode insider 1.0.1 or later (or Electron version: 0.37.6, At the moment)  **Workaround:**  - Switching of only vscode windows is possible in `⌘ + ~ (tilde)`. Other window switches in `⌘ + F1`. - If you want to change the global settings,  Please change the shortcut key  `⌘ + F1` to `⌘ + ~ (tilde)` .  <img width=""780"" alt=""2016-04-22 17 57 32"" src=""https://cloud.githubusercontent.com/assets/13635244/14736811/cc9dc194-08b3-11e6-8abb-a527ba7238b5.png"">"
18942|@isidorn does it make a difference if you only request one stackframe on a stoppedevent?
18943|@isidorn what version of node is that?
18944|"The error that the node adapter gets from node is   ``` message:""Internal error: illegal access"" request_seq:25 seq:155 success:false type:""response"" __proto__:Object ```  It happens [here](https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/nodeDebug.ts#L1527) Not sure if related https://github.com/node-inspector/node-inspector/issues/413 So it seems that the adapter has no access to the new node running as part of the extension host.  Will continue investigating, pasting info here maybe @weinand, @bpasero  have a suggestion"
18945|Dups: #974 & #3550
18946|@weinand It does not seem to make a difference if I request only 1 stack frame. node version: 5.10.1  I also sometimes get the following errors ![screen shot 2016-04-22 at 12 11 17](https://cloud.githubusercontent.com/assets/1926584/14738685/55f3064c-0883-11e6-9aa8-9ccbf7e96b3c.png)
18947|@isidorn does it make adifference if you do not request variables for stackframes at all?
18948|@weinand if I do not request variables it is quite faster (a bit faster than node inspector)
18949|Linguist confirmed new translation. Fixed now.  SRC: Select All Occurences of Find Match NEW TGT: 一致項目のすべての出現個所を選択
18950|Pushed.
18951|Pushed the suggestion from https://github.com/Microsoft/vscode/issues/5260#issuecomment-213006409
18952|I fixed another bad dependency (`message service` <=> `quick open service`). For the remaining one (`keybinding service` <=> `status service`) I think I need more infrastructure.  @jrieken facing some issues and have some feedback. in no particular order:  **UntitledEditorService**  > That is not true. We do create it very early but it doesn't have all services yet.  The instantiation service is not created early enough so that it can be used for other services. For example the `UntitledEditorService` needs the `InstantiationService` but I cannot pass it in properly because we do not create it early enough.  **Registries**  Should we do something like you do for telemetry appenders for registries too (`this.instantiationService.invokeFunction(TelemetryExtensions.TelemetryAppenders.activate)`)? Though in the end that is not much different from setting the instantiation service directly.  **ThreadService**, **KeybindingService**  Moving to you, not sure if @alexandrudima should own it though
18953|@roterdam yes I tried lower and upper case but it could not find any match. tried also looking for BIG_REQUEST, big_request, BIG-REQUEST per the similar atom issue but no variants I tried could be found.  strangely while atom and electron bugs are still open some are saying it works fine with rdp using atom 1.5.4, so wondering what version of electron is used for vscode 1.0.0, maybe it is working in the latest version  vnc performance seems ok to me since I'm just using it on a local network, I had to futz around with display settings to get a good experience whereas rdp seemed to automatically scale the screen just right for me.
18954|@jrieken not sure if you or Marin owns CSS.
18955|There are two use cases: Give the user a chance to finish his typing before starting the search. The other is to give the symbol search time to also participate.   Once we tackle a faster search index that does not need to hit the disk all the time, I would think we can lift this delay.
18956|I think we should do that in the quick fix UI. When there is more than one action we should offer _Apply all_
18957|Good catch!
18958|Given the workaround, removing the important label.
18959|This issue was moved to Microsoft/TypeScript-TmLanguage#152
18960|@joaloez what hangs exactly? can you provide more information on the setup?
18961|You can change this behaviour from the `window.openFilesInNewWindow` setting.
18962|I did not hear about this issue before. Unrelated: You should really find a way to return these errors back to the adapter and display them somehow, the error in https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/nodeDebug.ts#L1527 seems totally not being used?
18963|Step 1:  ![1](https://cloud.githubusercontent.com/assets/18613356/14741813/441514fe-0899-11e6-81d6-b1ad949385a6.PNG)  Step 2:  It does nothing and disappears from the menu on the left  ![2](https://cloud.githubusercontent.com/assets/18613356/14741729/a6c06e74-0898-11e6-8394-166164637d56.PNG)
18964|"Configure the test runners in the index.js file. By default we use ""tdd"" and that allows you to use suite() and test()."
18965|it seems like the main side doesn't send the full configuration to the extension host, esp. the default values which should have been derived from the extensions (package.json) are missing.   The snapshot shows what we send to the extension host. No mentioning of `guides` tho of `tslint` cos that is already configured for me.  ![screen shot 2016-04-22 at 14 54 32](https://cloud.githubusercontent.com/assets/1794099/14742013/469f0238-089a-11e6-86b0-8ebab7736cb3.png)
18966|Nice! :beers:
18967|Joao and me were looking into this now and we came to the conclussion that here is no leak due to: 1. If you run the program emitting more and more output debug is holding onto those output objects in order to display them so it is expected that the memory is growing. Btw this is limited to 10000 elements. 2. If you run the program 5 times, and compare runs from 2 to 4 you can notice that there is no increase in memory and no extra objects are alocated on the heap.
18968|@jrieken if you disagree ping me and I can come to your desk and show you what I see
18969|Yes,very good! It's time to read all the config file..Thanks!
18970|I believe this was introduced with https://github.com/Microsoft/vscode/commit/31ce12f023580d67a66d14843e7f9983caadbe56. We now send the configuration over to the extension host before we have loaded the values/defaults from the extensions (their package.json). This happens when extensions are detected and when the `configuration` contributions are [processed](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/configuration/common/configurationRegistry.ts#L111). The configuration service should either block until after that.
18971|"@joaloez could it be that this share is very slow in general? does vs code show up eventually? if yes, can you do this: - when it is loaded, open developer tools from the help menu - click on the ""Profiles"" tab - click on ""Collect JavaScript CPU profile"" - F1 > Reload Window - when this is fully loaded click on ""Stop"" - Save the profile and attach it here or send me on benjpas@microsoft.com  Thanks!"
18972|@aeschli I press enter on the theme. Ya just clicking in the explorer
18973|⚡
18974|ESLint does exactly what you recommend. The use case for an action / command is to bind it to a short cut. Easier to trigger then setting a cursor on a problem, clicking the light bulb, .... I doubt that a lot of devs do F1 > .....
18975|Now if the breakpoint is unverified we show the message on hover and we show the whole breakpoint grayed out - same as how we show all breakpoints when you deactivate them. Let me know if you like it
18976|This isn't a MySQL thing, even though the OP described it that way, or otherwise stated, it is _also_ a SQL Server syntax issue. In any case, separate sql dialects probably need separate rules. There is also the question of what the default should be.
18977|> The instantiation service is not created early enough so that it can be used for other services.   But that isn't a limitation of the instantiation service but the shell isn't using it properly. There is nothing bad if it creates the service at the beginning of [`initServiceCollection`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/shell.ts#L297). The separation between instantiation service and service collection is only not allow down-level consumers of the former to alter it. Tho, if you have both you can modify the service collection and thereby the instantiation service.  > Though in the end that is not much different from setting the instantiation service directly.\  Yes, the ideas is that those things are extension-like. Ideas are still floating but image us discovering certain files from disk (according to a `xyz.contribution.ts` pattern), loading the file, and invoking the active function. My goal is to reduce the number of registries. Take telemetry, where we have the service, service extensions, and the registry. The registry is just unnecessary glue because the telemetry appenders cannot be discovered and then have access to the telemetry service. We should change that.
18978|Let me try to recap: - we use a cache to avoid calling NFC normalize on a path but this cache can grow quickly and then it is useless for other paths. this cache uses a counter at least so that there is no lookup cost. a better cache here would be to remove the oldest paths and store the newest (MRU). given our eager ASCII check I am also easy to ditch this cache altogether. - we use a cache to store the RegExp from a string glob pattern. this cache is currently unbounded. we use a similar cache here (https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/filters.ts#L301). the idea is to avoid having to create this RegExp all the time. I would not want to remove this cache. Also, the expensive getOwnPropertyNames() to check for the size of the cache is only called if the pattern was not cached yet (https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/glob.ts#L238) - we use a new cache for detecting if a glob pattern is trivial or not. to test this we are running 3 different patterns over the glob pattern. each glob pattern is used many thousand times in many different places so this means an additional 3 regexp.matches() call for each thing that gets glob-matched. so we cache the fact if a glob pattern is trivial or not because why would we want to compute this info over and over again if the glob patterns are unlikely to change. I can also not see where this cache is slow or computational intense because iterating over its property names only happens if the pattern was not yet cached (see https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/glob.ts#L254). we could remove these caches though and just store the fact that a pattern is trivial together with its RegExp that we already cache anyways  Thoughts?
18979|yeah, we should do that. With [120 \* 100](https://github.com/Microsoft/vscode/issues/4192#issuecomment-199231635) I should have reached your limit
18980|> But that isn't a limitation of the instantiation service but the shell isn't using it properly.  Happy to hear that it is just the Shell not using it properly, so can you propose a change to be able to use the instantiation service properly and have it ready to be passed into UntitledEditorService?  +1 for ditching our static registries and replacing them with something better
18981|Anyone :)?
18982|This is super super bad, I just hit this while in transit. We have to do something about it for April, it feels you are sitting in front of a web browser that tries to connect to the file that is on disk.
18983|@Microsoft/vscode to get some attention and maybe collect ideas. We could maybe: - take out telemetry from the critical path of opening a file - detect that the system is offline and just not try to connect (Electron has APIs for this)
18984|pushed, tho beware that you have no telling if all services are there yet. that's why we need some sort of signal - which today is setInstantiationService by convention.
18985|+2 the telemetry service should not run in the main thread but like search and fs watch in a separate process
18986|as an easy workaround we can use a `setTimeout` trick [here](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/telemetry/browser/telemetryService.ts#L178) to get off the critical path.
18987|stretch for april, tho rain on sunday
18988|Yes this was also my assumption, but I've found a mail message from March about the `module` attribute in JS.  From @billti about the `module` attribute:      > This is more a down-level compile setting. It specifies what the emitted module format will be. It defaults to CommonJS, unless you are targeting ES2015 emit.   We are targetting `es2015`, so it looks like we should add it.
18989|Rain on Saturday and snow on Sunday :-)
18990|@isidorn   Using the debug viewlet in the empty folder setup is a corner case. We will do another insider update on Monday and this can wait until then.
18991|Can not reproduce this with a small node 5.10 attach sample. So somehow trying to attach to node inside extension host makes the difference here. I do not believe this is important since this will not get surfaced to the users. Removing that tag, @aeschli let me know if you disagree.
18992|**+1** Unfortunately it's a common omission from text editors, presumably due to simplicity of line-based text representation / search model. But nevertheless it's a very useful feature for day-to-day work.  Please please fix!
18993|@mbana we made good progress on this during the April `decompression` iteration (e.g. #4640). However, we need more time to work on docs. It is a candidate for May but we do not have the May iteration plan yet.
18994|> NFC - We should know whether a cache pays off or not. For me caching feels like a last resort because the actual operation couldn't be made fast. Tho if we cache it should honour some sort of recency and not be full and useless after `n` operations  > filters.ts - Please stop pointing me to more unbounded caches.  > glob  I understand the intent and want that thing to be fast. Instead of caching we should maybe nuke the trivia regexes and use code, like the pseudo below (no string, nor array allocations!)  ``` args.indexOf('**/*.') === 0 && for (i = 5; i < args.len; i++) {   args.charCodeAt(i) === one_of(A-Za-z_.) } ```  Then we can reconsider if caching is still needed and iff so we should do a better cache. Given the constraint I'd propose something like this - start with two empty arrays - one for the keys, one for recency counters - use binary search (runs as log_n like maps) to find an item in the first array; for a new items the result is the inverse of its [insertion point](https://github.com/Microsoft/vscode/blob/master/src/vs/base/test/common/arrays.test.ts#L46) - iff new splice the item into the array (unsure of the costs) - update the second array at the same index with a recency indication (some increasing number, like Date.now without a meaning) - when the `length` has reached a certain limit, like 80% of max throw out n% of the _oldest_ items. - (extra) use a third aligned array to keep data (when not used as set but map)  I believe that's better then maps because we don't need `Object.keys` calls, get recency, and finding the insertion point is fast (log_n). Unsure about [splice](https://gamealchemist.wordpress.com/2013/05/01/lets-get-those-javascript-arrays-to-work-fast/) since it create an array...
18995|Saturday is this: http://www.redbull.com/us/en/bike/events/1331753879682/uci-mtb-world-cup-2016-round-2-cairns-australia
18996|@bpasero  looks like your guess is good, see this issue and this comment https://github.com/NativeScript/nativescript-cli/issues/1029#issuecomment-147467771.  > the log says that both reg.exe and xcopy.exe are missing. Please verify that your windows and windows system directories are correctly set in PATH environment variable as first entries  Since this is caused by a misconfiguration from the user we should protect against this exception and not treat this as an error telemetry event.
18997|I sent to your email the log. I've been waiting five minutes and not the directory opened Thanks
18998|The instantiation service has no more way to just ask for a service (used to be `getService`). This change was made because people started to use the instantiation service as service accessor, not as an instantiation service.   It's arguable if the workbench was also an offender or not. I understand the concern - How about an extra flag to the `createInstance`-call that will throw an error if dependencies aren't met? - the instantiation service knows that.   Another idea is to bring shell and workbench closer together. It seems they both created services which are inter-dependent. And I wonder why that is? Ideally service creation happens in one place and the service collection doesn't travel.
18999|Is the CSS embedded in HTML? Can you paste the code and show where request suggestions?
19000|"In the example  ""src/Main.hx:3: characters 8-29 : String should be Int""  I think the mapping must be as follows:  file: 1, line: 2, column: 4 endLine: 2, endColumn: 5 message: 7  Your mapping sets endLine to 3 which is undefined. Due to the code in problemMatcher#createLocation (line 283) a problem with only line and column is created. Since this points to a blank we even don't expand this to a word.  I see the problem you have since the error messages seem to be dynamic. You either need to tweak the pattern so that group indexes stay stable (hard to say if feasible). Another idea is to have two problem matchers for now which each have a static pattern.  @nadako please note that I am away on vacation for two weeks.  @jrieken can you help @nadako and merge the PR"
