4801|Yes, 10.8 is no longer supported.
4802|@mathiask88 thanks, the node.js version we use depends on whatever Electron picks up, so I think eventually we will benefit from this change.
4803|I guess this is not supported @jrieken
4804|Yes, thats the one :+1:
4805|We improved this for 0.10.5. @joaomoreno fyi
4806|This is a good reference: https://nodejs.org/en/docs/es6/. Someone should implement a tslint/eslint rule that checks with that list
4807|That's true. We have advanced the TS version but not yet the language service we use for JavaScript. That will come very soon. Stay tuned.
4808|@jrieken I can reproduce, somehow the viewletService is not defined in the command.
4809|@khrome83 Is this in a JS or TS file?
4810|Once we released 0.10.6, we need to revisit this issue and see if speed is still slow. i am not sure this is #1463 because that bug causes code to not even start.
4811|@alexandrudima I remember we talked about this once, I forgot the resolution though :)
4812|Nope. We have made ES6 the default and that's all we can do at this point. Once we have adopted project salsa we can revisit.
4813|Yes, another user was also reporting that the installer was unable to delete the extensions folder. @joaomoreno fyi
4814|In fact, if we use https proxy to get our contents from 191.238.172.191:443, we must add a tag like 'rejectUnauthorized': false in requests module. then all thing done.
4815|Good catch!
4816|"So far I have not yet heard a good reason for tabs compared to having just a list of ""working files"" somewhere. Being able to take a file and drag it out into a new window is clearly not a benefit of a tab system, it is a feature which you can have without tabs.  Is it that people really want to open files in tabs, move them around and close them eventually? Is this because you are so used to it or is there actually a value in doing so? Is the value being able to set an active working file set that you later on dismiss to start something new? I wonder what is so good in having tabs that you cannot achieve with another way of representation. And I am not accepting the argument that everyone is used to tabs :). A lot of people are used to saving files and still there are editors with auto save capability and people seem to like it."
4817|I will keep you in the loop once we sketch out the API for this.
4818|"Even if it is not by default, giving the user the choice to activate the tabs feature through some option would be almost as good for me.  For example, what about letting the user move/drag the ""working Files"" section to the top (converting them into tabs lets say). Again, the user may choose how he wants to work and I think that is great!"
4819|"@pcgeek86 You should be able to do that by typing the filename. For Jan it will event look pretty:  <img width=""900"" alt=""screen shot 2015-12-23 at 10 17 49"" src=""https://cloud.githubusercontent.com/assets/1794099/11973801/70e8eb6c-a95e-11e5-9ee7-fedc7de3491d.png"">"
4820|Closing because we don't want the API to be used for extending other extensions. If, let's say you want to enrich TypeScript, you should use API that extension exposes.
4821|This is in progress
4822|@vadimcn thanks for the feedback! We are aware of some of the issues you mentioned. Currently we are looking into improving/fixing issues around our thread architecture and this will probably be improved for our January release. Will keep you updated.
4823|Well for the workbench editor service there is not just code editors. There are other editors like the markdown preview, so we cannot just say the workbench editor service is just about code editors.
4824|One proposal I would make is to ditch the `IEditorService` from `common` and have the functionality be defined in `editor`. Then we can get rid of the useless abstraction of editors.
4825|@bpasero That's what I want to discuss. A preview is not an editor at all, but sits in the space an editor usually takes. And those editor that toggle in-place could maybe be modelled like the diff editor is
4826|Another thing we should explore/disucss and I admit I know little about it is whether we can do more with just URI and less with editor inputs
4827|Our current JS language service cannot do that yet
4828|+1 for talking, but maybe in person also when Alex is back :)
4829|+1
4830|I'm on 0.10.5. Can't comment on whether it's improved from prior versions, but it's still not 'fast'.
4831|Could be as simple as having a function in the `QuickPickOptions`, like so  ``` javascript const options:vscode.QuickPickOptions = {   placeholder: 'Pick something',   onDidFocusItem: item => { console.log(item); } } ```
4832|related to #540.   We could extend the `InputBoxOptions` to allow to provide a validator
4833|Found it. Thanks!
4834|Yes, it really work!
4835|Hi **@sdenel**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
4836|as @jrieken  mentioned, other javascript extension supports es7 functions. @calebboyd temporally, you could fix it through changing javascript file extension `jsx` from `js`
4837|@jrieken this is a JS file.
4838|"@bpasero this is happening in a different file as well, but it is varied about ""when"" it happens.   In the below code, only `* @returns {ATSNode<TextNode>} text node` causes it.  ``` javascript // Node Creation  /**  * @private  * @param  {string} value - string to be inserted as text  *   * @returns {ATSNode<TextNode>} text node  */ var createTextNode = function (value) {     return {         node: '#text',         value: value,         parent: null     }; };   /**  * Creates a document node.  *  * @function createDocument  * @memberof TreeAdapter  *  * @returns {ASTNode<Document>} document  */ treeAdapter.createDocument = function() {     return {         node: '#document',         quirksMode: false,         children: []     }; }; ```"
4839|![issue](https://cloud.githubusercontent.com/assets/1844739/11976795/81e1a94e-a941-11e5-8813-9893adff0e8b.PNG)  Here is a screenshot of the issue, showing the red underline.  [sample.txt](https://github.com/Microsoft/vscode/files/70776/sample.txt)  This is the JS file from the screenshot example. I renamed it to text to upload it.
4840|Good catch. The JS parser tries to resolve some JSDoc constructs but doesn't seem to understand generics
4841|Sorry for the noise, I will do changes in my own branch and come back later.
4842|> Switching the input method to system default english(U.S.) really works  This really works!
4843|ok
4844|I have a development server on my domain that's running Bonobo Git Server set up to use Windows authentication. My credentials work everywhere except in VS Code. I get a similar authentication error with the trailing slash.
4845|Same as me, Chinese keyboard layout.
4846|For me it's not so much the appearance of tabs as the behavior of them that I miss.  (For example, you can get Sublime Text to look kind of like VS Code in that you can hide the tab bar and show the open files in the sidebar instead...but they still behave exactly like the tabs do.)  The first thing I ever do with VS Code is swap its close file and close active editor keyboard shortcuts, so that ctrl+W actually closes a file when I press it, rather than still leaving it in working files and cluttering up ctrl+tab.  But even then, every time I close a file, I am greeted with a blank screen and have to ctrl+tab just to show the most recent still-open working file (heck, when it's the last one, I seem to also need to hit enter after ctrl+tab; not sure what that's about).  In any other editor, I'd immediately be greeted by either the most recent or adjacent open file (tab) upon closing the current one.  Additionally, ctrl+tab between working files appears to work in most-recent order, as opposed to tabs which usually operate in the order they appear or are arranged.  (I've seen some editors support both.)  I don't use split windows, so if any of these behavioral differences have anything to do with that, it's lost on me.  Maybe I'd understand it better if I understood it from that angle, but wouldn't no-split still be the most common use case?  At any rate, it's small but frequent bits of friction like these that keep me away from VS Code and going back to other editors.  Yes, you could say it's that VS Code operates differently from what I'm used to.  But when what I'm used to _works_, and VS Code operating differently causes friction that I'd sooner use a different editor to avoid having to deal with, it's kind of a big deal.
4847|Yes, I can see a model where the editor area behaves similar to tabs without showing tabs. We want to explore this next year.   Btw there is an extension that - once you close an editor - opens the next one from working files. If you combine that with changing the keybinding as @kfranqueiro suggests, you get pretty close imho.
4848|Here is the link: https://marketplace.visualstudio.com/items/bigous.file-smart-reopener-vscode
4849|Please use markdown for now as workaround.
4850|@isidorn fyi
4851|@alexandrudima fyi
4852|@alexandrudima fyi
4853|@alexandrudima fyi
4854|@alexandrudima fyi
4855|@alexandrudima fyi
4856|@alexandrudima fyi
4857|@alexandrudima fyi
4858|@alexandrudima fyi
4859|Currently this is not supported. In order to do this you need to open two instances of vscode
4860|@dbaeumer fyi
4861|"This works for me, notices the top-level {} that you seem to have removed, they are required.  ``` json {     ""Test Snippet"": {         ""prefix"": ""gep13"",         ""body"": [             ""test $1""         ],         ""description"": ""Your snippet description here.""     } } ```"
4862|@egamma sorry, but I also have those:  ![image](https://cloud.githubusercontent.com/assets/1271146/11980782/37fbb64a-a995-11e5-8740-36f5a9c7a5d0.png)  Can you confirm exactly what you mean by working?  I have an expectation that when editing any file with a `.md` or `.markdown` extension, that when I type `gep13` I should have an option to expand that into the snippet, but that is not happening for me.  Is there anything that I can do to debug this further?
4863|:+1:
4864|> Can you confirm exactly what you mean by working?  The gep13 snippet shows up when I edit a markdown file.  Here are my steps: - preferences>user snippets - select `markdown` in the quick box - add the snippet to the file that opens  Now open a markdown file - type `gep` and press `ctrl-space`, the snippet shows up.
4865|Ah, interesting, the `Ctrl-Space` is required.  In the Latex extension, and the Cake extension, the snippets there seemed to automatically appear, without the need for pressing `Ctrl-Space`.  What magic is happening in those extensions to make that just work?  For example, in the Latex extension, I was able to type `cha` and the snippet appeared automatically, without the need to press `ctrl-space`.  Thanks!
4866|Nice
4867|this isn't just source path mapping btw, it doesn't support remote debugging for node either although maybe that's done on purpose and isn't a lot of work to re-enable/enable that.
4868|I am making progress on this feature request. I would like to avoid showing the dirty indication in the workbench at all cost because imho that is distracting. However this means, if you have configured auto save delay to be 10 seconds, the file will not be saved after that time without indication to the user. Any feedback on this is appreciated.
4869|I am making progress on this feature request. I would like to avoid showing the dirty indication in the workbench at all cost because imho that is distracting. However this means, if you have configured auto save on focus change, the file will not be saved until one of these conditions without indication to the user:  - you switch to another file or close the file - you quit the app - you move to another app so that code looses focus  Any feedback on this is appreciated.
4870|@silverbp yes, remote debugging requires more (for one, node's debug port cannot be accessed externally so a proxy or forwarding mechanism is always required). But this feature-request is only about the path matching aspect.
4871|what is project salsa?
4872|Really wish this is fixed ASAP. Its not breaking but it is incredibly annoying to work with. The error message blocks the top and the name of files and just a headache to view
4873|@foysal94 I know right! They're working on it though based on the status changes
4874|"Could you disable them for lines with cursors in them?  Compare the `Editing` paragraph on https://medium.com/@larsenwork/ligatures-coding-fonts-5375ab47ef8e as well as these settings for the [Atom editor](https://github.com/atom/atom):  ``` less * {   -webkit-font-smoothing: antialiased;   -webkit-font-feature-settings: ""liga"" on, ""calt"" on; }  atom-text-editor::shadow .cursor-line {   -webkit-font-feature-settings: ""liga"" off, ""calt"" off; }  div.find-and-replace atom-text-editor::shadow .line {   -webkit-font-feature-settings: ""liga"" off, ""calt"" off; } ```"
4875|Using the 'write to a copy, then rename' technique to achieve more atomic writes is a useful and viable solution but I wanted to also mention some additional, alternative approaches based on the file system itself. These would provide a more 'thorough' solution to the issue, and would also apply to other text editors and external tools (compilers, code generators, refactoring tools etc.).  First, the file contains 4436 bytes of the 'NUL' (0) character, which basically means it got replaced by a block of zeros, there is no special encoding to it.  I had this happen to me before (same 0 data, for a code file of approximately the same length), but with the 'full' visual studio. This appeared after I recovered from a sudden power failure. Fortunately I had a shortcut that triggers 'one-click' backups (which also immediately syncs the resulting compressed file to google drive). I initiated it several seconds before this happened, so I managed to recover the data without any loss.  I can speculate a part of the reason this happened because the file system was set to use ['writeback mode/write caching mode'](http://thewindowsclub.thewindowsclubco.netdna-cdn.com/wp-content/uploads/2013/01/disk-caching.jpg) (this is the default setting in windows), so although the new file content was probably cached in memory (possibly in full) the OS only managed to flush the metadata, but not the data itself by the time the system crashed. The metadata, which included some pointer(s) to a physical area of the disk (that probably happened to be initially filled with zeroes), and the file size, were written, but the data itself was not.  In Linux the default setting for ext3/ext4 is to use what is called 'ordered mode', it is a journaling mode where the file system takes care to only flush metadata after the data is physically flushed to disk (a form of a write barrier). As far as I'm aware NTFS does not support ordered mode/write barriers. However, I'm not sure if ordered mode would have been sufficient to prevent data loss here. Using a 'full' journaling mode (not supported by NTFS), which is explained below, would prevent failures of this sort as the data is written twice (once to the journal, and then to its physical location). Another alternative is using an allocate-on-write file system like btrfs (linux) or ReFS (windows - details on how to enable and use it below).  If I were using linux I would have probably created a separate `ext4` partition and mount it with `data=journal` (or alternatively use `btrfs` instead) and keep all my code and development files there (no need to set for the whole system to run in this mode as it would significantly reduce performance, `data=ordered` is probably sufficient and is [very good in performance](https://fsi-viewer.blogspot.com/2011/10/filesystem-benchmarks-part-i.html) for general usage).  From [the ext4 documentation](https://www.kernel.org/doc/Documentation/filesystems/ext4.txt):  ``` Data Mode ========= There are 3 different data modes:  * writeback mode In data=writeback mode, ext4 does not journal data at all.  This mode provides a similar level of journaling as that of XFS, JFS, and ReiserFS in its default mode - metadata journaling.  A crash+recovery can cause incorrect data to appear in files which were written shortly before the crash.  This mode will typically provide the best ext4 performance.  * ordered mode In data=ordered mode, ext4 only officially journals metadata, but it logically groups metadata information related to data changes with the data blocks into a single unit called a transaction.  When it's time to write the new metadata out to disk, the associated data blocks are written first.  In general, this mode performs slightly slower than writeback but significantly faster than journal mode.  * journal mode data=journal mode provides full data and metadata journaling.  All new data is written to the journal first, and then to its final location. In the event of a crash, the journal can be replayed, bringing both data and metadata into a consistent state.  This mode is the slowest except when data needs to be read from and written to disk at the same time where it outperforms all others modes.  Enabling this mode will disable delayed allocation and O_DIRECT support. ```  In windows 8 or later, it is possible to [enable single volumes to be formatted with ReFS instead of NTFS](https://www.jmedved.com/2015/03/refs-on-windows-81/). ReFS is an 'allocate-on-write' file system and should provide a higher level of reliability than NTFS (both metadata and data blocks are never overwritten, so the possiblity of data loss due to power or program failures is reduced). However, to get the maximum level of 'resiliency' (mostly data recovery in case of corruption) it is currently recommended to be used with a multiple disk array rather than a single one (and also cannot be used as a boot partition).   From http://theithollow.com/2014/01/13/microsofts-resilient-file-system-refs/   ``` Torn Writes  One of the new things that ReFS helps with is a “torn write”.  In NTFS the file  system overwrites metadata and data structures during a modify operation.  During  this modify operation data is read off the disk and then new data is written on top  of the old data, becoming the new data.  Torn writes occur when this process can’t  complete fully.  Think about what could happen if a power failure occurred during  the write operation.  Maybe some of the new data is there, and some of the old data  is available, but neither are consistent and there is no way to roll this back.   With ReFS new data will be written to a different location and when the write is  complete, the file system then references the new location as the up to date data.  This process is known as “Copy on Write”.  Now during a power failure, if the write  doesn’t complete fully the original data is still consistent. ```  As an experiment, I went ahead and created a single disk 8GB ReFS partition exclusively for storing source code and similar data. I will need some time to evaluate what kind of benefit this setup would have but I believe it should provide a meaningful improvement in data safety and crash-resilience. One disadvantage is that by default ReFS has a cluster size of 64kb which may be too large for source files, which tend to be relatively small (e.g. after copying 5593 files to the new volume, where many are small, windows reported the directory to have a total of 584MB of allocated size but only 272MB of actual size). I read somewhere it might be possible to change this but it is not mentioned as an option for the `format` command. Also, the link I provided has instructions on how to enable integrity checking (`format .. -I:enable``), though in a case of a failure it would not be possible to fix the problem without some form of a mirrored array (this is handled when the volume is created using [Storage Spaces](https://en.wikipedia.org/wiki/Features_new_to_Windows_8#Storage_Spaces), I believe).
4876|FWIW the next update to PowerShell's line editor (PSReadline), which supports multiline editing, will support Ctrl+Enter to insert line above and Ctrl+Shift+Enter to insert line below. https://github.com/PowerShell/PSReadLine/pull/6
4877|@jrappen You could, but there's also a fix that makes them render correctly whether it's the current line or not; it's detailed in the discussion of the original issue (#192).
4878|We own the docker extension for VS Code (https://github.com/microsoft/vscode-docker) and as I mentioned earlier, we would like to provide support for files that match the pattern `dockerfile*` (e.g. Dockerfile.dev, Dockerfile-blah, etc.). We want all files that match the pattern above to have the same features as the current Dockerfile pattern has. For example, if I open a `dockerfile` in VS Code today, I get syntax highlighting and all that magic. However, if I open a file named `dockerfile.debug` I don't get any of that.
4879|Found here : https://az764295.vo.msecnd.net/public/0.10.5/VSCode-darwin.zip
4880|@bpasero I don't know if any indication is needed. This setting isn't something most people are going to change, I think. Those who do make the change should be aware that there is a delay.  If some sort of indication is really needed, perhaps something along the lines of number of dirty files? It would be similar to how the git icon has the number of modified files. The number of modified files sets a precedent. So, its not as if it would get any more distracting for anyone who thinks the dirty dots are.. uh.. dirty.
4881|Would it be possible to add a thin line (1px) style?  PuTTY has an `Underline` style as well. I don't use it personally, but it may be useful to extensions.
4882|@jrieken Awesome, thanks. Seems a little confusing that the default would be to show errors from all files, but that might just be me. :)   Cheers, Trevor Sullivan
4883|"There's a very good summary of various crash resistence properties of common (though mostly linux-only) file systems in this paper:  [All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications](https://www.usenix.org/conference/osdi14/technical-sessions/presentation/pillai)  ![Persistence property chart](http://i.imgur.com/rmyaY25.png)  Unfortunately `ReFS` is not included in the paper but I believe it should have properties similar to `btrfs`.  For the most common case of overwriting source files, which usually do not exceed 64kb (a single ReFS block/cluster), the write should be atomic in ReFS. For multi-block appends (not overwrites), it depends. The paper describes these writes as ""Multi-block prefix append"", and states:  > Current file systems do not provide atomic multi-block > appends; appends can be broken down into multiple operations. > However, most file systems seemingly guarantee > that some prefix of the data written (e.g., the first 10 > blocks of a larger append) will be appended atomically.  So I speculate that with large block sizes, appending to files up to, say, half a megabyte or so may be atomic in btrfs/ReFS, but I can't know for sure. It depends on how the writes are batched and ordered.  For atomic _overwrites_ beyond the block size (usually 4kb to 64kb), using the sequence: 1. Create a secondary, temporary, file and write the new content to it (`fopen`, `fwrite`). 2. Flush the new file to the physical media (`fsync`). 3. Rename the new copy to the old copy (`rename`).  Should work (though the `fsync` part is important for it to provide full reliability).  Note the temporary file doesn't have to be created in the same directory as the old one. Using some dedicated temporary directory could also be a possibility, but I'm not 100% sure (this may prevent problems with file watchers etc)."
4884|Yeah I used markdown to make sure I called the image right then used html because the image needs to be 100%.  Once I know the image was good I could live with the broken image.  That was my workaround for now.
4885|I just find it interesting that other editors seem to keep all dirty indicators but save after some condition. That is not really a benefit to me, I really like that I also do not have to see any dirty indicators whatsoever because the application takes care of it.
4886|Good summaries, thanks. One gotcha with rename is that at least on Windows you cannot rename across different drive letters. So it is good to keep the temporary file outside of the workspace to prevent the issues of file watchers (external tools) picking it up, but you cannot just store it in the default tmp location if the target workspace is on a different drive.
4887|pls see https://github.com/Microsoft/TypeScript/issues/4789
4888|Yes this is an inconsistency. Full extensions get auto (7x24) completion by default (e.g. latex, cake), some built-in extensions like Markdown do not.
4889|@egamma gotcha, ok, so the world makes sense again, at least for now :smile: Thanks for all your help with this!
4890|fixed by PR https://github.com/Microsoft/vscode-node-debug/pull/31
4891|fixed by https://github.com/Microsoft/vscode-node-debug/pull/31
4892|@weinand Somewhere along the line node is no longer binding the debug port to 127.0.0.1, because you can now get to it externally, at least on node 5.0+. I was using balance to forward the port out of the container, but it's no longer required. I guess I was referring to the fact that vscode no longer supports an address property when attaching to a node process.
4893|@weinand for instance with node cli, I can do: `node debug 192.168.99.100:5858` but vscode only lets you attach to a port and doesn't let you specify the address.
4894|It's grate!!!
4895|The specific problem that I observed with this was that after changing the line endings in VS Code UI, the offsets reported back from `document.offsetAt` appear to be incorrect.  As far as I can tell extensions can't reliably work around this.
4896|I was also getting this when running on Ubuntu. I was trying to attach to a standard expressjs app and it would not hit any of the break point. If I used Launch it worked fine.
4897|"> So far I have not yet heard a good reason for tabs compared to having just a list of ""working files"" somewhere. Being able to take a file and drag it out into a new window is clearly not a benefit of a tab system, it is a feature which you can have without tabs.  Sure, it may be possible to do it in a different way... but why? Unless you have some significant improvement or innovation to offer.  > Is it that people really want to open files in tabs, move them around and close them eventually?  Yes  > Is this because you are so used to it or is there actually a value in doing so?  Partly habit, but also because nobody has presented anything significantly superior yet. Innovation should present a significant advantage if it's going to insist that people fight and retrain against their decades old habits.  > Is the value being able to set an active working file set that you later on dismiss to start something new?  I'm not quite sure I understand this sentence exactly; are you trying to describe an alternative where you work on terms of multiple 'working file' sets? Difficult to imagine. I'm not sure that would be universally useful. For legacy, maintenance, and re-factor tasks, I think it would be a severe disadvantage to work this way, since your working set is usually not known in advance, rather, it's emergent as you work. The traditional model already works fine in these workflows.  > I wonder what is so good in having tabs that you cannot achieve with another way of representation.  From a different perspective; consider space utilisation. There _already is_ a tab at the top of the code window, it's where the filename is, it just doesn't have the tab rectangle around the name (it even behaves like a tab; if you middle-click, it closes!). To the right of the filename above the code window is currently empty wasted space (where tabs should be). At the top left of the workspace is the 'working files' list; this is doubly wasted space since it just doesn't need to exist, it's space could be moved to the gap where tabs usually are, filling in that wasted space.  I also find a further practical difference than space utilisation and habitual tendency; I like to have the tabs associated with the editor window that they are bound to. I usually have at least 2, 3, often 4 code windows open (in vs-proper), and each has a couple of associated tabs. Perhaps in one window I have `widget.cpp/.h`, and in the other I have `gizmo.cpp/.h/.inl`. These tabs are logically associated with the code window they are attached to, and I find that pleasing.  > And I am not accepting the argument that everyone is used to tabs :). A lot of people are used to saving files and still there are editors with auto save capability and people seem to like it.  Well, accept it or not, people find it to be a reasonable and strong argument. But I'll reserve my judgement if you have something significantly better in mind. By all means, if you think you can meaningfully improve on tabs, give it a shot, but don't stubbornly force it through on account of 'trendy' innovation alone ;) .. It needs to be substantially superior to eject the status quot.  I can only say that the current 'working files' list is definitely not superior. It basically is tabs, just arranged vertically, except with the disadvantages that the tabs are detached from the editor window they're bound, and the list is living in wasted space while the usual location for tabs is empty. I also don't like that the 'working files' list has a dynamic height, which means the project tree moves around vertically, and I suspect I would like it even less if the 'working files' had a fixed height and vertical scroll bar instead.  It's just not superior to regular tabs, and therefore offers no compelling reason to adapt... in my opinion :)"
4898|@bpasero There was no file. I had just been coding into a file for a while without saving it. I turned on auto-save feature afterwards, but I think it should be on by default.
4899|update 0.10.6
4900|"I guess the simple thing is that ""what gets recognised gets repeated"".   So you can reward contributions with recognition and it's an easy and infinite currency for you to spend on building the community. :-)  Here's an example from a Red Hat security update: https://rhn.redhat.com/errata/RHSA-2015-1539.html  The original issue trackers are still restricted under the security embargo, but I'd wager that David Jorm raised the issue, and it got addressed by a combination of people from there. And Red Hat want their user community to engage with them around security issues they discover, so they use recognition to drive that."
