12101|... and looking at the file that is in question, `resources/darwin/bin/code.sh`, that should've been obvious to me from the start. Derp. :sheep:
12102|@7brutus7 np, I'm glad that I got another test case for the fix ;-)
12103|No worries, thanks for keeping an eye out!
12104|Awesome.
12105|@nicco91 thanks for the tip. changing to dark+/light+ solved the issue (temporarily at least).
12106|Closing as _don't see it anymore_.
12107|Pushed a change so that (per workspace) you can decide to never show the info message again!
12108|#3791
12109|@zersiax actually we seem to use real unicode characters to represent the keybinding. Would you think that is ok or should we find a readable label here?  One example is: ⇧⌘Y
12110|As it stands I don't think these unicode characters are currently supported. I recommend using readable labels in this case, e.g. ctrl, alt, Windows, End, not sure what the conventions are for things like page-up and page-down.
12111|#3791
12112|"I had to remove a comment with the work ""code"" in it.  that fixed it."
12113|Hey , Thanks I'll check that out.
12114|@egamma I added the jsconfig.json as you had suggested. That did not fix the issue. However, if I restart VS Code, then intellisense works again. Are the jsconfig.json properties being cached somehow? (that would be fixed on a restart?)
12115|I wonder if there is an environment variable alternative to `--debug-brk`?  **Update:** Ah from the document under the [configuration](https://www.npmjs.com/package/node-inspector#configuration) section.  > environment variables prefixed with node-inspector_
12116|not implemented as such but fair request
12117|@alexandrudima fyi
12118|Can you provide some more information about your project setup, what kind of project? What is your `jsconfig.json`? What libraries are you using.
12119|@allencage I don't know what paths you are referring to, but make sure to read at least this section of the 0.10.10 release notes: https://code.visualstudio.com/Updates#_debugging So try to fix the paths by prepending a `${workspaceRoot}`
12120|@egamma > Does the problem matcher work and return the errors properly. You can test this by opening View > Show Errors and Warnings.  View > Errors and Warnings brings up the input window at the top of the Code window and on the line below that it says `No errors or warnings.`  @isidorn Is the March release available yet? According to https://code.visualstudio.com/docs?dv=linux64 February is the latest. I'll be happy to try out the latest if you tell me how to get it.  By the way, the February download file I have is named VSCode-linux-x64-stable.zip. Shouldn't there be a version number in the name so one can tell the releases apart?
12121|Haha that user feedback came from me among others :) Yes, in this case that is even more important. I think just 'list opened'  and 'list closed'  or something similar should be enough, definitely not longer, for announcing the intelliSense popping up. As for what to announce for the suggestions, for that I would need to know what is on the screen visually. For example, in Visual Studio when methods are autocompleted using IntelliSense I think it gives the short synopsis as well, at least for screenreaders. Are we interested in doing that as well for Code? Or do we just report the current autocompletion and give some kind of mechanism for the user to report the help text using a hotkey, if the help text even exists in Code?
12122|The web view is past GA and tracked in #2414
12123|closing as duplicate of #1657
12124|@JanKok I got the months confused in my previous comment. I updated the comment now, so in february it should work, but the watch task bug will be fixed in march release
12125|We definitely need some sort of 'solution'. I'm a native dev, and this almost always involves building a set of libs/dll's and then referring to them from some host app project. Once we have multiple projects, we also need a 'startup project' for when we press 'run'.
12126|@alexandrudima on OS X VS Code freezes when trying to open the jade file.
12127|:+1:
12128|@zersiax ok makes sense
12129|Hi egamma, The project folder containing the js files are in the SharePoint database. SharePoint is installed on my test server. I open project files via SharePoint WEBDAV protocol in VSC.  Note: For css, js and html files, intellisense is working normal.  So intellisense is lost.  Before it worked.
12130|I implemented your last suggestion. This also fixes #3484.
12131|Added `workbench.git.action.globalOpenFile` global workbench action.
12132|Fixed by #3814
12133|duplicate of #3111
12134|FYI an official rpm file is going to be provided with the March release https://github.com/Microsoft/vscode/issues/3595, the repository will likely come later.
12135|@MaxOlsson what node version are you using?
12136|It looks like `os.homedir()` [was not added till Node 4](https://github.com/nodejs/node/issues/3148).  I updated to Node 4 and things now work.  I would like to suggest updating the wiki to state Node 4 is required, not Node 0.12.  I would do it but it looks like I don't have the rights to update the wiki.
12137|@sghung   > I added the jsconfig.json as you had suggested.   OK, can you confirm that you didn't have a jsconfig.json when Intellisense didn't work?  > Are the jsconfig.json properties being cached somehow? (that would be fixed on a restart?)  yes, but you do not have to restart you can execute `Reload JavaScript Project`.
12138|Most likely this is a node issue: https://github.com/nodejs/node-v0.x-archive/issues/9028
12139|@gourangaAngularjs what node version is this?
12140|@TurkeyMan what debug extension are you referring to?
12141|I could not reproduce this anymore.
12142|I had the same issue. I did a clean OS restart before attempting the update as well, but that didn't help. I eventually had to uninstall Code first, and then manually clear out the old folder before the install would work.
12143|This is the most mature one so far: https://github.com/WebFreak001/code-debug With respect to my issue, I'm sure the plugin is limited by the available UI and debug 'features' that it can support and populate with data. Memory view and registers are easy to populate with data from the debug engines. Disassembly might be some work on both sides, but it's very important.
12144|@h2u are you using a php extension for VS Code?
12145|Actually, it's still there. Just tried it again with a super simple setup, newest version of everything.
12146|Can one of this family of bugs be reopened? I have this issue on Windows 10 x64, with disabled Recycle Bin, not on a subst drive, but drive does have Bitlocker on.
12147|"@Ravadre please notice that the `jsconfig.json` I included in this issue was just for this particular project setup. In general you exclude the folders with generated or `library` JS code, pls see https://code.visualstudio.com/Updates#_languages-javascript the section 'Migration'  Something like  ``` json {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""ES6""     },     ""exclude"": [         ""node_modules"",         ""jspm_packages"",         ""client/jspm_packages     ] } ```"
12148|Naturally, the obvious reference point for disassembly/interleaved-source view look+feel is VS. A major bonus on top of VS would be the ability for the debug engine to annotate each line of assembly with some additional data, like opcode timings/latency, etc, so debug engine can help identify pipeline stalls and such. This may not require any support from vscode, but just something to keep in mind.
12149|I suspect you run out of memory because you do not exclude some of the folders in the project in the jsconfig.json.  Therefore Does your project include a `jsconfig.json`? If yes, can you include it?  If it doesn't have a jsconfig.json, can you create one following the migration guide: https://code.visualstudio.com/Updates#_languages-javascript section Migration guide.  In the past Code excluded some folders automatically, this is not done automatically anymore and you need to define the exclude folders in the jsconfig.json.
12150|"@egamma Yes, I can confirm that I did not have a jsconfig.json file in my workspace (in VS Code 0.10.8, I didn't need a jsconfig.json for intellisense to work).  Thanks for the tip regarding Reload JavaScript Project, that worked. Now to workaround this issue I do: 1. Test Intellisense not working in project 2. Add jsconfig.json  3. Test intellisense not working in project 4. Run ""Reload JavaScript Project"" command 5. Test Intellisense now works in project"
12151|_What_ should work? F8 doesn't step through the gcc errors. Should I use a different problem matcher?
12152|Currently there is no way to configure a trigger sequence but only single characters. Still, the issue would continue to exist as most people run with 24x7 IntelliSense enabled. I tend to favour an option that configures if `enter` should accept a suggestion or not - for simplicity and ease of learning independent of the language.
12153|see #1657 for more on this
12154|@egamma Migration section, which for some reason I missed when I read changelog yesterday explains a lot. It also perfectly explains why removing jsconfig helped. I guess most time I spent on testing was futile :disappointed: .   Possibly, one thing I think could be useful to add would be some sort of a message to inform user that TS engine crashes because of (possibly?) running out of memory. Right now forgetting to exclude 1-2 jspm/node directories can mean that Code will constantly parse those file in the background (which means high IO, allocating lots of memory) over and over again.  Thanks for help!
12155|@egamma pushed a change to have an action in the mode picker that hints a user to the fact that this is configurable now, feedback welcome:  ![image](https://cloud.githubusercontent.com/assets/900690/13608354/bfc3b6fe-e554-11e5-8d82-3bb0d27a218c.png)
12156|@vitaminj suggest to start a new issue with specific steps.
12157|+1
12158|Ok, here another demo:  ![animation](https://cloud.githubusercontent.com/assets/10532611/13608454/2696f238-e555-11e5-9454-b83a43a19a31.gif)  As you can see, I have two threads running, and I continue one so it ends. The adapter is correctly sending a `ThreadEvent` with `exited`, but VS Code UI does not update, in fact, it still displays the old stack trace, it is impossible to control the second thread anymore (it shows _pause_ instead of _run_ icon) and even after stopping the stack trace is still displayed. When I click scopes in the variables section Code still tries to request variables for the exited thread.  Here the last piece of log:  ``` -> continueRequest { type: 'request',   seq: 23,   command: 'continue',   arguments: { threadId: 1 } } <- continueResponse Response {   seq: 0,   type: 'response',   request_seq: 23,   command: 'continue',   success: true } <- threadEvent ThreadEvent {   seq: 0,   type: 'event',   event: 'thread',   body: { reason: 'exited', threadId: 1 } } ```  The IDs are correct, see this snippet:  ``` <- threadsResponse Response {   seq: 0,   type: 'response',   request_seq: 11,   command: 'threads',   success: true,   body:     { threads:        [ Thread { id: 1, name: 'Request 1 (5:37:28 PM)' },         Thread { id: 2, name: 'Request 2 (5:37:50 PM)' } ] } } ```
12159|An alternative idea is to configure what <kbd>Enter</kbd> should do when completions are shown. We could add an option to accept a completion on <kbd>Tab</kbd> only (ala `editor.acceptSuggestionOnEnter: false`). That's helps us to know what the user actually wants. In addition, we can add <kbd>Shift+Enter</kbd> to accept a completion and <kbd>Shift+Tab</kbd> to insert a `tab` (when completions are shown).
12160|Sorry for not being clear, the following should work: if a task returns an error code VSCode will not launch the program.
12161|+1 for tabs!
12162|I vote for adding tabs too.
12163|thanks :)
12164|+1
12165|:+1:
12166|"@egamma   > Have you tried a local install of eslint and it didn't work?  I'm not sure  When I installed the extension I had a project open with no local eslint and I got this `Failed to load eslint library. Please install eslint in your workspace folder using 'npm install eslint' or globally using 'npm install -g eslint' and then press Retry.`  Good.  However, neither neither the release notes or the ESLint extensions instructions actually tell me how to use it :(  In another project with eslint locally installed ido not see that warning. however I'm not sure if it is only installed on extension load or on project load. From the command line I get this  <pre> . brian@0.1.0 lint C:\projects\brian . eslint --env node src/server/**/*.js && eslint --env browser src/client/**/*.jsx C:\projects\brian\src\client\index.jsx   28:49  error  'appState' is missing in props validation             react/prop-types   28:58  error  'appState.timer' is missing in props validation       react/prop-types   36:18  error  'appState' is missing in props validation             react/prop-types   36:27  error  'appState.resetTimer' is missing in props validation  react/prop-types ✖ 4 problems (4 errors, 0 warnings) </pre>  But see nothing when I open the file in VS studio  Here is my eslint config  <pre> {     ""ecmaFeatures"": {         ""ecmaVersion"": 6,         ""jsx"": true,         ""modules"": true     },     ""env"": {         ""es6"": true,         ""browser"": true,         ""node"": true     },     ""parser"": ""babel-eslint"",     ""plugins"": [         ""react""     ],     ""extends"": [""plugin:react/recommended""] } </pre>"
12167|My project not include a jsconfig.json I do not know what the role of js config.json..  Note: For css, json and html files, intellisense is working normal. Intellisense not work only for js files.
12168|I noticed a change with the recent update with how this behaved.  For PHP, could we have this as an editable option or something?   As I would personally prefer it grab the preceding '$' character when double-click selecting.
12169|JavaScript is more complex than css, html, and json, therefore a complex project needs a jsconfig.json. In the past we have automatically excluded some folders from being analyzed we no longer do this and for this reason you now need a jsconfig.json file.  > I do not know what the role of js config.json.  `jsconfig.json` is documented here https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson
12170|**Correction** - I get red squiggles for the errors in question. So it works just fine.  However I get another error - probably not ESLint but I can't tell the source. I'm using decorators and get this  <pre> const appState =  new class AppState {     @observable timer = 0; </pre>  `'property declarations' can only be used in a .ts file. (property) AppState.timer: number`  Is this a syntax problem with TS and decorators? I can raise another bug if useful
12171|Sorry, but this is a known limitation we have documented in the release notes.  As a work around can you try to use this extension https://marketplace.visualstudio.com/items?itemName=jrieken.tsd-recommender
12172|"@jpierson I don't see how node-inspector can help here? I'm looking for a way to pass a port number to an npm script. Ideally something like this:  ``` npm run-script debug port=1234 ```  VS Code would use this to pass a debug port to node and subsequently VS Code would try to attach to that port.  And the npm script would look like this:  ``` json     ""scripts"": {         ""debug"": ""node --debug-brk=${port} program.js"",     }, ```"
12173|That's not what I'm seeing, as I reported in item #1 above. If I edit an error into my C program and hit the start button in Code, make runs and returns error code 2. The Code goes on and tries to run the program.
12174|@jrieken :+1: on the `editor.acceptSuggestionOnEnter: false`.
12175|Seems to be related with issue #3791  I tried the suggestions of the discussion, but seems not working, also, I don't like the idea of create configuration files for everything or add references directly on the file.
12176|"here's the code:  ``` js import React from 'react'; import {connect} from 'react-redux';  import {Blade} from 'c/shared/blade/'; import ChangePassword from 'c/profile/ChangePassword';  const mapStateToProps = s => ({   ...s.changePassword });  @connect(mapStateToProps) export default class ChangePasswordContainer extends React.Component {   render() {     return (       <Blade         title=""Change Password""         closeUrlPath=""/profile""         lockToggle         style={{width: 400}}         >         <ChangePassword {...this.props} />       </Blade>     );   }; } ```"
12177|No, i don't use any php extensions.
12178|>  Also, when coding, after line break the cursor get back to the start of the line.  Currently having the same issue. You see the cursor aligned just fine for a frame after you press enter, and suddenly the cursor is at the start of the line.  https://github.com/Microsoft/vscode/issues/3797
12179|Did not work
12180|Does the task finish - if yes, then it would be great if you could create a new issue and if you could include a minimal repository for which you can reproduce this so we investigate. If the task is a watching task which does not finish - this will be fixed in the next vscode release
12181|Landed, this should be in the March release. Thanks for pinging @kitsonk, it was trivial to implement after the Feb command line improvements :smiley:
12182|Duplicate of https://github.com/Microsoft/vscode/issues/3797
12183|@Tyriar we have to handle the case where VS Code is already running. In that case, running code from command line will terminate instantly and delegate the opening of another window to the already running process.
12184|@bpasero also please code review  @mitaki28 @havremunken thanks for great steps!
12185|> Another approach may be to update newConfigFile from platform/configuration/common.ts to resolve the environment variables when setting the config values.  You mean `platform/configuration/common/model.ts`, I assume?
12186|There is no chance to this feature come back in near future? Or a better alternative? This was one of my favorite features.
12187|Here's how my setup looks when I'm getting the issue, with the jsconfig.json set up as directed by @egamma :  ![intellisense](https://cloud.githubusercontent.com/assets/4650666/13611203/e5f1eeb4-e526-11e5-81a3-c74757aa76cd.png)
12188|+1
12189|@bpasero can it be launched as a standalone process instead of a shared process if `--wait` is present? I'm assuming sharedProcess.ts is responsible for this?
12190|+1. I don't have functional code highlight in js. it's not clear if there's a workaround. if there is, please post here
12191|"@bpasero Looks like your guess is correct in my case. Anything else you want me to check?  <img width=""417"" alt=""screenshot 2016-03-08 12 38 38"" src=""https://cloud.githubusercontent.com/assets/194167/13611960/b553bc0c-e52a-11e5-86bf-c50efe71d1ad.png"">"
12192|would very much like this fixed.  I'm forever moving left but ending up at the end of the previous line.  Very disorienting.  Thanks @kumarharsh
12193|This is the error that got swallowed by the require:  ``` javascript Error: Module version mismatch. Expected 47, got 46.     at Error (native)     at Object.Module._extensions..node (module.js:440:18)     at Module.load (module.js:357:32)     at Function.Module._load (module.js:314:12)     at Module.require (module.js:367:17)     at require (internal/module.js:16:19)     at Object.<anonymous> (/Users/Brian/Projects/vscode/node_modules/chokidar/node_modules/fsevents/fsevents.js:9:14)     at Module._compile (module.js:413:34)     at Object.Module._extensions..js (module.js:422:10)     at Module.load (module.js:357:32) ```
12194|The TFS project is not a shared folder and there are no symbolic links. The root folder DOES contain spaces. Changing the outDir did not resolve the problem.   I will say that this same project under TFS DOES work on my mac using VSCode so it seems to be something Windows related.
12195|The make task finishes with a return code = 2. If Code is testing for return code == 1 (the usual Unix error return code) then that might explain why Code isn't stopping on the error. Other than that, I don't think I'm doing anything at all special. I'll open a new issue for this tonight if you haven't already resolved it by then. :-)
12196|It cannot because there is an application shared folder for chrome where e.g. local storage and index dB goes. I am not sure how that folder reacts to 2 processes fighting over its resources. Maybe we can still signal to the launch script when the window closes, e.g. through a named pipe / socket.
12197|It would be very convenient :+1:
12198|Same issue, really annoying.
12199|"I can also see this bug. All the interactions with the git remote, like the git fetch when opening the project in vsc or a manual git pull from within vsc give the ""Missing ipc hook"" error. Since I provide the user in the URL, my output looks like this:  ``` git pull Missing ipc hook error: unable to read askpass response from '/home/melo/Downloads/Apps/VSCode-linux-x64/resources/app/out/vs/workbench/parts/git/electron-main/askpass.sh' fatal: could not read Password for 'https://user@my.gitblit.server:8443': No such device or address ```"
12200|We had an Electron client project which had a similar requirement (it was protocol handlers that were launching other instances of the app).  @devpaul was able to deal with it.  He is on vacation this week, but maybe he might see it and can provide some advice.
