2201|@egamma I was able to reproduce this and it is actually a timing issue (race condition). The problem is that the tsserver (even 1.6.x version) listen to changes of the tsconfig.json file. VSCode re-requests all diagnostics when the tsconfig.json file changes. If the tsserver hasn't processed the file event of the tsconfig.json change event yet the old diagnostic values are computed.   The real fix would be that the tsserver informs the editor about a change to the tsconfig.json file and then the editor can request diagnostics. As a workaround we can add a timeout in VSCode. However that might not always work.
2202|I opened https://github.com/Microsoft/TypeScript/issues/5829 for a real fix in tsserver land. I will put in a work around on our end to make the race condition less likely.
2203|@waywardmonkeys thanks !
2204|@Wosi currently not. I reopen the issue.
2205|@isidorn makes sense. However you could even be smarter with watching tasks as well. You could add a listener for state changes on the task and the wait for the first 'inactive' event.
2206|"Appologies, I meant the function name in function calls. Here is an example showing setTimeout using the default ""Dark"" theme in TypeScript (Left) and JavaScript (Right) ![screenshot](http://i.imgur.com/vQJO749.png)"
2207|Merged PR into master (by hand). Received problems when trying to auto merge.
2208|Also happened on my MAC,  OSX10.11. What is the Electron Helper? ![clipboard 1](https://cloud.githubusercontent.com/assets/1228378/11470645/72c315be-979a-11e5-87f0-423d238fc13e.png)
2209|"@74th the `isdarwin`, `iswindows` and `islinux` are not really needed since the rule in `package.json` > `keybindings` can be authored conditional on those already.  Regarding using the `keyIdentifier`, I cannot make a change that adds support for dispatching on characters (e.g. `""@""`) only on mac. This breaks our cross-OS story.  I think what you really want is a keypress ""trap"" mode. This would allow to remove many of the `keybindings` rules in your `package.json` (such as `a`, `b`, `shift+a`, etc.). Currently, if a keybinding has no rule, it falls through the rule engine that runs on `keydown` and will therefore produce visible text that gets dispatched to the editor's `type` command handler.   I am thinking a vim mode would want to ""trap"" all keybindings producing text and prevent them from reaching the `type` command, but instead redirecting them to their own command handler. I think everything else is more or less a workaround.   The approach to catch all keybindings is a smart workaround for now, but it is also non-realistic (i.e. would you add in there a rule for ü and all other possible characters)"
2210|I have the same with Python, in the insider preview email sent out for the 0.10.0 release it warned that closing bracket insertion, closing quote insertion and auto indenting would be removed due to a bug but that they would be re implemented with 0.10.1 Bracket auto closing has been implemented, but auto indentation and quotes have not.  If I remember correctly the email also stated that Python would not be the only language affected by this bug
2211|I had same experience when completionItemProvider reject the promise. I'm not sure but It might be related to #693 .
2212|"Yes, for example this item in _Layout.cshtml: `<link rel=""stylesheet"" href=""~/css/bootstrap.css"" />` - even though it's properly found when I run the app (`dnx web` from the command line in Mac OS X) when I cmd-click, I get an offer to create the file with the tilde in it: `File not found ([$PATH-to-project-root/Views/Shared/~/css/bootstrap.css)` If I create the file, then I have a new folder called `~` with the rest of the path in it below."
2213|"@dbaeumer I'm working on completion on #633 try that with this code  ``` typescript interface IDosomething{     getInfo(callback:(another:()=>void)=>void) } var x:IDosomething; x.getI ```  then try to complete x.getI with tab. you will get flowing error and suggestion, completion and quick-info won't work any more (need to reload). in this case the cause is nested function (which I'm working on it) however it should not impact the rest of application.  [4363:1130/154007:INFO:CONSOLE(47)] ""WARNING: Promise with no error callback:undefined"", source: file:////home/user/vscode/out/vs/base/common/winjs.base.js (47) [4363:1130/154007:INFO:CONSOLE(48)] ""Error: Promise did not implement oncancel"", source: file:////home/user/vscode/out/vs/base/common/winjs.base.js (48)"
2214|"``` Make ifndef VERBOSE .SILENT: endif  ifdef RELEASE FONT_NAME=Hack endif ifndef RELEASE FONT_NAME=Hack-dev endif  FOLDER_ROOT=$(shell pwd)/ FOLDER_SOURCE=$(FOLDER_ROOT)source/ufo/Hack/ FOLDER_BUILD=$(FOLDER_ROOT)build/ FOLDER_OTF=$(FOLDER_BUILD)otf/ FOLDER_TTF=$(FOLDER_BUILD)ttf/ FOLDER_WEBFONTS=$(FOLDER_BUILD)webfonts/ FOLDER_PREBUILD=$(FOLDER_ROOT)prebuild/ FOLDER_TOOLS=$(FOLDER_ROOT)tools/ FOLDER_TEMP=$(FOLDER_BUILD)temp/ FILE_VERSION=$(FOLDER_PREBUILD)version.txt  # If the first argument is ""version""... ifeq (version,$(firstword $(MAKECMDGOALS)))   # use the second argument as version   SET_VERSION := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))   # ...and turn it into do-nothing target   $(eval $(SET_VERSION):;@:) endif  # external commands all: check make_temp build_otf build_ttf copy_otf copy_ttf webfonts cleanup desktop: check_desktop make_temp build_otf build_ttf copy_otf copy_ttf cleanup check: check_tools_otf check_tools_ttf check_tools_svg check_tools_eot check_tools_woff check_tools_woff2 check_desktop: check_tools_otf check_tools_ttf check_webfonts: check_desktop check_tools_subsetting check_tools_svg check_tools_eot check_tools_woff check_tools_woff2 otf: make_temp build_otf copy_otf cleanup ttf: make_temp build_otf build_ttf copy_ttf cleanup version: version_set webfonts: check_webfonts make_temp build_otf build_ttf build_subsets build_svg build_eot build_woff build_woff2 copy_webfonts update_css cleanup  # build chains build_otf: check_tools_otf build_otf_copy_ufo build_otf_setversion build_otf_run hinting_otf build_ttf: check_tools_ttf build_ttf_run hinting_ttf build_subsets: check_tools_subsetting build_subset_latin1 build_svg: check_tools_svg build_svg_run build_eot: check_tools_eot build_eot_run build_woff: check_tools_woff build_woff_run build_woff2: check_tools_woff2 build_woff2_run  # set version from $(SET_VERSION) in build file version_set:     if [ x$(SET_VERSION)y == xy ]; then \     echo ""Usage: make version 1.234\n""; \     exit 2; \     fi     printf ""$(SET_VERSION)"" > $(FILE_VERSION)     echo ""Version set to $(SET_VERSION).\n""  # create temporary build folder make_temp:     printf ""Creating temporary folder... ""     mkdir -p $(FOLDER_TEMP)     echo ""done""  # clean up temporary build files cleanup:     printf ""Cleaning up... ""     rm -f $(FOLDER_SOURCE)current.fpr     rm -rf $(FOLDER_TEMP)     rm -f $(FOLDER_PREBUILD)/*/features.fea     rm -f $(FOLDER_PREBUILD)/*/FontMenuNameDB     echo ""done""  # check if all tools required for build are available check_tools_otf: check_tool_makeotf check_tool_ttx check_tools_ttf: check_tool_fontforge check_tools_subsetting: check_tool_fonttools check_tools_svg: check_tools_eot: check_tool_sfnttool check_tools_woff: check_tool_sfnt2woff_zopfli check_tools_woff2: check_tool_woff2  check_tool_makeotf:     printf ""Checking if MakeOTF is available... ""     command -v makeotf >/dev/null 2>&1 || { echo ""no\n\nPlease install MakeOTF, which is part of the Adobe Font Development Kit for OpenType.\n"" >&2; exit 1; }     echo ""yes""  check_tool_ttx:     printf ""Checking if TTX is available... ""     command -v ttx >/dev/null 2>&1 || { echo ""no\n\nPlease install TTX, which is part of the Adobe Font Development Kit for OpenType.\n"" >&2; exit 1; }     echo ""yes""  check_tool_fontforge:     printf ""Checking if FontForge is available... ""     command -v fontforge >/dev/null 2>&1 || { echo ""no\n\nPlease install FontForge.\n"" >&2; exit 1; }     echo ""yes""  check_tool_fonttools:     printf ""Checking if fonttools are available... ""     command -v pyftsubset >/dev/null 2>&1 || { echo ""no\n\nPlease install fonttools (Behdad’s fork).\n"" >&2; exit 1; }     echo ""yes""  check_tool_java:     printf ""Checking if Java is available... ""     command -v java >/dev/null 2>&1 || { echo ""no\n\nPlease install Java.\n"" >&2; exit 1; }     echo ""yes""  check_tool_sfnttool: check_tool_java     printf ""Checking if sfnttool is available... ""     [ -r $(FOLDER_TOOLS)sfnttool.jar ] || { echo ""no\n\nPlease install sfnttool or sfntly.\n"" >&2; exit 1; }     echo ""yes""  check_tool_sfnt2woff_zopfli:     printf ""Checking if sfnt2woff-zopfli is available... ""     command -v sfnt2woff-zopfli >/dev/null 2>&1 || { echo ""no\n\nPlease install sfnt2woff-zopfli.\n"" >&2; exit 1; }     echo ""yes""  check_tool_woff2:     printf ""Checking if woff2 is available... ""     command -v woff2_compress >/dev/null 2>&1 || { echo ""no\n\nPlease install woff2.\n"" >&2; exit 1; }     echo ""yes""  # copy UFO sources build_otf_copy_ufo:     printf ""Copying UFO sources... ""     cd $(FOLDER_TEMP); \     cp -R $(FOLDER_SOURCE)Hack-Regular.ufo    ./$(FONT_NAME)-Regular.ufo; \     cp -R $(FOLDER_SOURCE)Hack-Italic.ufo     ./$(FONT_NAME)-Italic.ufo; \     cp -R $(FOLDER_SOURCE)Hack-Bold.ufo       ./$(FONT_NAME)-Bold.ufo; \     cp -R $(FOLDER_SOURCE)Hack-BoldItalic.ufo ./$(FONT_NAME)-BoldItalic.ufo     echo ""done""   # add version info to OTF feature files build_otf_setversion:     [ -r $(FILE_VERSION) ] || { echo ""Version is undefined. Call make version 1.234 first.\n""; exit 2; }     printf ""Preparing versioned OTF feature files... ""     VERSION_CURRENT=`cat $(FILE_VERSION)`; \     cd $(FOLDER_PREBUILD); \     cp Hack-Regular/features.fea.template    Hack-Regular/features.fea; \     cp Hack-Italic/features.fea.template     Hack-Italic/features.fea; \     cp Hack-Bold/features.fea.template       Hack-Bold/features.fea; \     cp Hack-BoldItalic/features.fea.template Hack-BoldItalic/features.fea; \     find . -type f -name ""features.fea"" -exec sed -i.bak s/xVERSIONx/$$VERSION_CURRENT/g {} +; \     find . -type f -name ""features.fea"" -exec sed -i.bak s/xFONT_NAMEx/$(FONT_NAME)/g {} +; \     rm -f */features.fea.bak; \     cp Hack-Regular/FontMenuNameDB.template    Hack-Regular/FontMenuNameDB; \     cp Hack-Italic/FontMenuNameDB.template     Hack-Italic/FontMenuNameDB; \     cp Hack-Bold/FontMenuNameDB.template       Hack-Bold/FontMenuNameDB; \     cp Hack-BoldItalic/FontMenuNameDB.template Hack-BoldItalic/FontMenuNameDB; \     find . -type f -name ""FontMenuNameDB"" -exec sed -i.bak s/xFONT_NAMEx/$(FONT_NAME)/g {} +; \     rm -f */FontMenuNameDB.bak     cd $(FOLDER_TEMP); \     find . -type f -name ""fontinfo.plist"" -exec sed -i.bak s/\>Hack-/\>$(FONT_NAME)-/g {} +; \     find . -type f -name ""fontinfo.plist"" -exec sed -i.bak s/\>Hack\</\>$(FONT_NAME)\</g {} +; \     find . -type f -name ""fontinfo.plist"" -exec sed -i.bak s/\>Hack\ /\>$(FONT_NAME)\ /g {} +; \     rm -f */*/fontinfo.plist.bak; \     echo ""done""  # build OTF from UFO using MakeOTF and the tables build_otf_run:     printf ""Building OTF font Regular... ""     cd $(FOLDER_PREBUILD)Hack-Regular; \     makeotf -f $(FOLDER_TEMP)$(FONT_NAME)-Regular.ufo -o $(FOLDER_TEMP)$(FONT_NAME)-Regular.otf -mf FontMenuNameDB -ff features.fea -osbOn 6 -fs -ga -gf GlyphOrderAndAliasDB -r     echo ""done""      printf ""Building OTF font Italic... ""     cd $(FOLDER_PREBUILD)Hack-Italic; \     makeotf -f $(FOLDER_TEMP)$(FONT_NAME)-Italic.ufo -o $(FOLDER_TEMP)$(FONT_NAME)-Italic.otf -mf FontMenuNameDB -ff features.fea -i -osbOn 6 -fs -ga -gf GlyphOrderAndAliasDB -r     echo ""done""      printf ""Building OTF font Bold... ""     cd $(FOLDER_PREBUILD)Hack-Bold; \     makeotf -f $(FOLDER_TEMP)$(FONT_NAME)-Bold.ufo -o $(FOLDER_TEMP)$(FONT_NAME)-Bold.otf -mf FontMenuNameDB -ff features.fea -b -osbOn 6 -fs -ga -gf GlyphOrderAndAliasDB -r     echo ""done""      printf ""Building OTF font BoldItalic... ""     cd $(FOLDER_PREBUILD)Hack-BoldItalic; \     makeotf -f $(FOLDER_TEMP)$(FONT_NAME)-BoldItalic.ufo -o $(FOLDER_TEMP)$(FONT_NAME)-BoldItalic.otf -mf FontMenuNameDB -ff features.fea -b -i -osbOn 6 -fs -ga -gf GlyphOrderAndAliasDB -r     echo ""done""  # build TTF from OTF using FontForge Python scripting build_ttf_run:     cd $(FOLDER_TEMP); \     printf ""Building TTF font Regular... ""; \     fontforge -c ""f = open('$(FONT_NAME)-Regular.otf'); f.generate('$(FONT_NAME)-Regular.ttf'); quit();"" \     echo ""done""; \     printf ""Building TTF font Italic... ""; \     fontforge -c ""f = open('$(FONT_NAME)-Italic.otf'); f.generate('$(FONT_NAME)-Italic.ttf'); quit();"" \     echo ""done""; \     printf ""Building TTF font Bold... ""; \     fontforge -c ""f = open('$(FONT_NAME)-Bold.otf'); f.generate('$(FONT_NAME)-Bold.ttf'); quit();"" \     echo ""done""; \     printf ""Building TTF font BoldItalic... ""; \     fontforge -c ""f = open('$(FONT_NAME)-BoldItalic.otf'); f.generate('$(FONT_NAME)-BoldItalic.ttf'); quit();""; \     echo ""done""  build_subsets: build_subset_latin1  # build Latin1 subset build_subset_latin1:     cd $(FOLDER_TEMP); \     printf ""Subsetting TTF font Regular to Latin1... ""; \     pyftsubset $(FONT_NAME)-Regular.ttf --unicodes=41-5a,61-7a \     echo ""done""; \     printf ""Subsetting TTF font Italic to Latin1... ""; \     pyftsubset $(FONT_NAME)-Italic.ttf --unicodes=41-5a,61-7a \     echo ""done""; \     printf ""Subsetting TTF font Bold to Latin1... ""; \     pyftsubset $(FONT_NAME)-Bold.ttf --unicodes=41-5a,61-7a \     echo ""done""; \     printf ""Subsetting TTF font BoldItalic to Latin1... ""; \     pyftsubset $(FONT_NAME)-BoldItalic.ttf --unicodes=41-5a,61-7a \     echo ""done""  # build SVG build_svg_run:     # TODO  # build EOT build_eot_run:     printf ""Building Latin subset EOT fonts... ""     cd $(FOLDER_TEMP); \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-regular-latin-webfont.ttf    hack-regular-latin-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-italic-latin-webfont.ttf     hack-italic-latin-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-bold-latin-webfont.ttf       hack-bold-latin-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-bolditalic-latin-webfont.ttf hack-bolditalic-latin-webfont.eot     echo ""done""      printf ""Building complete EOT fonts... ""     cd $(FOLDER_TEMP); \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-regular-webfont.ttf    hack-regular-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-italic-webfont.ttf     hack-italic-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-bold-webfont.ttf       hack-bold-webfont.eot; \     java -jar $(FOLDER_TOOLS)sfnttool.jar -e -x hack-bolditalic-webfont.ttf hack-bolditalic-webfont.eot     echo ""done""  # build WOFF build_woff_run:     # TODO  # build WOFF2 build_woff2_run:     # TODO  # hint OTF using AFDKO Adobe autohinter hinting_otf:     cd $(FOLDER_TEMP); \     printf ""Hinting OTF font Regular... ""; \     autohint $(FONT_NAME)-Regular.otf; \     echo ""done""; \     printf ""Hinting OTF font Italic... ""; \     autohint $(FONT_NAME)-Italic.otf; \     echo ""done""; \     printf ""Hinting OTF font Bold... ""; \     autohint $(FONT_NAME)-Bold.otf; \     echo ""done""; \     printf ""Hinting OTF font BoldItalic... ""; \     autohint $(FONT_NAME)-BoldItalic.otf; \     echo ""done""  # hint TTF using ttfautohint and our hint files hinting_ttf:     cd $(FOLDER_TEMP); \     mkdir hinted; \     printf ""Hinting TTF font Regular... ""; \     ttfautohint -l 4 -r 80 -G 350 -x 0 -H 181 -D latn -f latn -w G -W -t -X """" -I -m $(FOLDER_PREBUILD)Hack-Regular/ttfautohint.txt $(FONT_NAME)-Regular.ttf hinted/$(FONT_NAME)-Regular.ttf; \     echo ""done""; \     printf ""Hinting TTF font Italic... ""; \     ttfautohint -l 4 -r 80 -G 350 -x 0 -H 145 -D latn -f latn -w G -W -t -X """" -I -m $(FOLDER_PREBUILD)Hack-Italic/ttfautohint.txt $(FONT_NAME)-Italic.ttf hinted/$(FONT_NAME)-Italic.ttf; \     echo ""done""; \     printf ""Hinting TTF font Bold... ""; \     ttfautohint -l 4 -r 80 -G 350 -x 0 -H 260 -D latn -f latn -w G -W -t -X """" -I -m $(FOLDER_PREBUILD)Hack-Bold/ttfautohint.txt $(FONT_NAME)-Bold.ttf hinted/$(FONT_NAME)-Bold.ttf; \     echo ""done""; \     printf ""Hinting TTF font BoldItalic... ""; \     ttfautohint -l 4 -r 80 -G 350 -x 0 -H 265 -D latn -f latn -w G -W -t -X """" -I -m $(FOLDER_PREBUILD)Hack-BoldItalic/ttfautohint.txt $(FONT_NAME)-BoldItalic.ttf hinted/$(FONT_NAME)-BoldItalic.ttf; \     echo ""done""; \     printf ""Overwriting unhinted fonts with hinted ones... ""; \     mv hinted/*.ttf .; \     rmdir hinted; \     echo ""done""  # copy OTF to build folder copy_otf:     printf ""Copying OTF fonts to build/otf... ""     cp $(FOLDER_TEMP)*.otf $(FOLDER_OTF)     echo ""done""  # copy TTF to release folder copy_ttf:     printf ""Copying TTF fonts to build/ttf... ""     cp $(FOLDER_TEMP)*.ttf $(FOLDER_TTF)     echo ""done""  # copy web fonts to build folder copy_webfonts:     printf ""Copying Latin subset EOT fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-latin-webfont.eot    $(FOLDER_WEBFONTS)fonts/eot/latin/hack-regular-latin-webfont.eot; \     cp hack-italic-latin-webfont.eot     $(FOLDER_WEBFONTS)fonts/eot/latin/hack-italic-latin-webfont.eot; \     cp hack-bold-latin-webfont.eot       $(FOLDER_WEBFONTS)fonts/eot/latin/hack-bold-latin-webfont.eot; \     cp hack-bolditalic-latin-webfont.eot $(FOLDER_WEBFONTS)fonts/eot/latin/hack-bolditalic-latin-webfont.eot; \     echo ""done""      printf ""Copying complete EOT fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-webfont.eot    $(FOLDER_WEBFONTS)fonts/eot/hack-regular-webfont.eot; \     cp hack-italic-webfont.eot     $(FOLDER_WEBFONTS)fonts/eot/hack-italic-webfont.eot; \     cp hack-bold-webfont.eot       $(FOLDER_WEBFONTS)fonts/eot/hack-bold-webfont.eot; \     cp hack-bolditalic-webfont.eot $(FOLDER_WEBFONTS)fonts/eot/hack-bolditalic-webfont.eot; \     echo ""done""      printf ""Copying Latin subset SVG fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-latin-webfont.svg    $(FOLDER_WEBFONTS)fonts/svg/latin/hack-regular-latin-webfont.svg; \     cp hack-italic-latin-webfont.svg     $(FOLDER_WEBFONTS)fonts/svg/latin/hack-italic-latin-webfont.svg; \     cp hack-bold-latin-webfont.svg       $(FOLDER_WEBFONTS)fonts/svg/latin/hack-bold-latin-webfont.svg; \     cp hack-bolditalic-latin-webfont.svg $(FOLDER_WEBFONTS)fonts/svg/latin/hack-bolditalic-latin-webfont.svg; \     echo ""done""      printf ""Copying complete SVG fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-webfont.svg    $(FOLDER_WEBFONTS)fonts/svg/hack-regular-webfont.svg; \     cp hack-italic-webfont.svg     $(FOLDER_WEBFONTS)fonts/svg/hack-italic-webfont.svg; \     cp hack-bold-webfont.svg       $(FOLDER_WEBFONTS)fonts/svg/hack-bold-webfont.svg; \     cp hack-bolditalic-webfont.svg $(FOLDER_WEBFONTS)fonts/svg/hack-bolditalic-webfont.svg; \     echo ""done""      printf ""Copying Latin subset web TTF fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-latin-webfont.ttf    $(FOLDER_WEBFONTS)fonts/web-ttf/latin/hack-regular-latin-webfont.ttf; \     cp hack-italic-latin-webfont.ttf     $(FOLDER_WEBFONTS)fonts/web-ttf/latin/hack-italic-latin-webfont.ttf; \     cp hack-bold-latin-webfont.ttf       $(FOLDER_WEBFONTS)fonts/web-ttf/latin/hack-bold-latin-webfont.ttf; \     cp hack-bolditalic-latin-webfont.ttf $(FOLDER_WEBFONTS)fonts/web-ttf/latin/hack-bolditalic-latin-webfont.ttf; \     echo ""done""      printf ""Copying complete web TTF fonts... ""     cp hack-regular-webfont.ttf    $(FOLDER_WEBFONTS)fonts/web-ttf/hack-regular-webfont.ttf; \     cp hack-italic-webfont.ttf     $(FOLDER_WEBFONTS)fonts/web-ttf/hack-italic-webfont.ttf; \     cp hack-bold-webfont.ttf       $(FOLDER_WEBFONTS)fonts/web-ttf/hack-bold-webfont.ttf; \     cp hack-bolditalic-webfont.ttf $(FOLDER_WEBFONTS)fonts/web-ttf/hack-bolditalic-webfont.ttf; \     echo ""done""      printf ""Copying Latin subset WOFF fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-latin-webfont.woff    $(FOLDER_WEBFONTS)fonts/woff/latin/hack-regular-latin-webfont.woff; \     cp hack-italic-latin-webfont.woff     $(FOLDER_WEBFONTS)fonts/woff/latin/hack-italic-latin-webfont.woff; \     cp hack-bold-latin-webfont.woff       $(FOLDER_WEBFONTS)fonts/woff/latin/hack-bold-latin-webfont.woff; \     cp hack-bolditalic-latin-webfont.woff $(FOLDER_WEBFONTS)fonts/woff/latin/hack-bolditalic-latin-webfont.woff; \     echo ""done""      printf ""Copying complete WOFF fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-webfont.woff    $(FOLDER_WEBFONTS)fonts/woff/hack-regular-webfont.woff; \     cp hack-italic-webfont.woff     $(FOLDER_WEBFONTS)fonts/woff/hack-italic-webfont.woff; \     cp hack-bold-webfont.woff       $(FOLDER_WEBFONTS)fonts/woff/hack-bold-webfont.woff; \     cp hack-bolditalic-webfont.woff $(FOLDER_WEBFONTS)fonts/woff/hack-bolditalic-webfont.woff; \     echo ""done""      printf ""Copying Latin subset WOFF2 fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-latin-webfont.woff2    $(FOLDER_WEBFONTS)fonts/woff2/latin/hack-regular-latin-webfont.woff2; \     cp hack-italic-latin-webfont.woff2     $(FOLDER_WEBFONTS)fonts/woff2/latin/hack-italic-latin-webfont.woff2; \     cp hack-bold-latin-webfont.woff2       $(FOLDER_WEBFONTS)fonts/woff2/latin/hack-bold-latin-webfont.woff2; \     cp hack-bolditalic-latin-webfont.woff2 $(FOLDER_WEBFONTS)fonts/woff2/latin/hack-bolditalic-latin-webfont.woff2; \     echo ""done""      printf ""Copying complete WOFF2 fonts... ""     cd $(FOLDER_TEMP); \     cp hack-regular-webfont.woff2    $(FOLDER_WEBFONTS)fonts/woff2/hack-regular-webfont.woff2; \     cp hack-italic-webfont.woff2     $(FOLDER_WEBFONTS)fonts/woff2/hack-italic-webfont.woff2; \     cp hack-bold-webfont.woff2       $(FOLDER_WEBFONTS)fonts/woff2/hack-bold-webfont.woff2; \     cp hack-bolditalic-webfont.woff2 $(FOLDER_WEBFONTS)fonts/woff2/hack-bolditalic-webfont.woff2; \     echo ""done""  # update CSS files with current version update_css:     # TODO ```"
2215|Captured in the wiki https://github.com/Microsoft/vscode/wiki/Releases-and-Branches
2216|It seems to **not** have been fixed. Using VSCode 0.10.2 I get this: ![unreadable-error](https://cloud.githubusercontent.com/assets/43763/11472204/41fa85fe-976b-11e5-91ff-3d92ff4497f1.png) ![unreadable-error-version](https://cloud.githubusercontent.com/assets/43763/11472208/44b6fb56-976b-11e5-8944-9577f6a4c25b.png)
2217|"i.e.   If there's a package where I've included the typings.d.ts file.   i.e. Angular2  and I type a decorator like:  _@Comp_onent  If I hit ctrl+space after @Comp, I'd like it to finish the word Component, but I'd also like it to add the import to the top of the file if it exists if it's unique, or a mechanism to add the import through a hotkey of some sort.   I'm wondering if this is planned?   It seems like it might be possible with an extension, but I'm not sure.  e.g.  import {component} from ""angular2/angular2"""
2218|Hello, That's the thing. There were changes there. However I did not put in any messages just because I did not want to. Should I add messages every time I commit? Thank you!
2219|"@vitorgalvao Please see #713 for a detailed explanation of what's going on.  From my ""blind"" switching to Portuguese keyboard layout under windows, I think the toggle line comment is `Ctrl+~` out of the box for VSCode (the `~^` key)."
2220|+1 This is very annoying, and as others have mentioned - this is a key feature.
2221|Should this be a quick fix proposal?
2222|@aeschli please verify what is still open from the above issues
2223|apologies about this. I guess its not. Kindly move to the appropriate area as required. Or let me know if this is something I can do myself. Thanks
2224|Plan is to use the TypeScript provided textmate grammar for JavaScript
2225|@aeschli can you consult with the F# extension what should be done here, e.g., should we adopt the grammar from atom?
2226|@jrieken My project is about 25 .js-files in different subdirectories. The tree is up to 3 directories deep.
2227|Yes, you really should. :+1:
2228|> joaomoreno it never works for me to be sarcastic !
2229|I created #820 for XML
2230|Closing for now. Please comment if you disagree on the suggested guideline.
2231|+1
2232|We already have a native app mutex node module which we could use for this.
2233|Kinda like #637 (this one was earlier though ;))
2234|@Johnaka, is it fixed?
2235|Fixed function calls in in light and dark themes. Note that they are now black resp. white as they used to be. The color was not intended. The light and dark theme only use a reduced number of colors and themes.
2236|@jublo Thanks a lot for the entire file, I found and fixed an issue in Microsoft/vscode-textmate#8 that was causing the entire file to be colored in red after line 28. The file should now be colored like this (updated to vscode-textmate@1.0.8 in d5dde44):  ![image](https://cloud.githubusercontent.com/assets/5047891/11475808/915c9506-977f-11e5-96b9-91c8b595de2f.png)  As to the actual issue you report (that selection is invisible, I could not reproduce it under windows nor mac). Does the selection issue occur with other themes or after a restart of VSCode?  @aeschli Did we change something recently since 0.10.2 that would impact how we handle theme-ing and current word matches colors?
2237|Closing, as works for me. Please reply to my @ tag if you more information
2238|thank you @weinand for the help on this one!
2239|The markdown tokenizer only emits a very limited set of tokens for now. This will change once we use the text mate grammar.
2240|@T18970237136 @malekpour stay tuned. we plan to do something regarding the editor soon
2241|@activebiz No worries, you filed the issue in the right spot. I was suggesting a solution to @dbaeumer :)
2242|@regs01 What version of VSCode are you using? I think we have improved this very recently in 0.10.2.
2243|duplicate of #23
2244|:+1: Also `trimTrailingWhitespaces` is missing
2245|@tht13 Indeed, in 0.10.0 we did the large switch from monarch based tokenizers (hand written by us) to textmate bundles (mostly from the community).  Between the recovery build 0.10.1 and 0.9.x what is now missing is the quote surround/auto-completion. We need to bring this back
2246|Nice 1 :)
2247|Did you try the emmet completion? Enter 'template' and press tab will complete to `<template></template>` Closing as works for me. Please reply if this isn't what you meant.
2248|@guillermooo on win10, after switching kb layout to es-ES, I can trigger the above rule with the key that produces this character (`º`).
2249|Haven't tried yet, but in any case the docs should probably be updated to reflect that `\\` is a bindable key?
2250|"well, the key that is bound is `VK_OEM_5` (https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85)). It is the key that when pressed produces a `keydown` event with the `keyCode = 220` under Chromium. On the US standard layout it is physically labeled as `\|`.  We do keybinding dispatching during the browser `keydown` event. It has to be done during `keydown` because browsers mostly do not generate `keypress` events if no characters are produced (e.g. `ctrl+enter` will generate a `keydown` and a `keyup` but not a `keypress`). The `keydown` event unfortunately has the nasty characteristic that it doesn't give any hint as to what the physicial key label would be.  In this case, to add a rule for it in `keybindings.json`, we must use `\\` because this is JSON and JSON gives a special meaning to `\` in strings. The following would be illegal JSON:  ``` json {     ""key"": ""\"",     ""command"": ""actions.find"",     ""when"": ""editorTextFocus"" } ```"
2251|@jrieken I think we don't support rich language features for jsx, right?
2252|> In this case, to add a rule for it in keybindings.json, we must use \ because this is JSON and JSON gives a special meaning to \ in strings. The following would be illegal JSON:  Yup, I get that. My point is that from the current docs it isn't clear that `\` is bindable at all. So for completeness, it may be beneficial to add `\` to the list of accepted keys. I just wrote `\\` earlier becaue I though the GitHub MD parser would be thrown off. But I don't know if I'm making any sense!
2253|Correct, the plan is to collaborate with the TS team on Salsa Microsoft/TypeScript#4789
2254|@alexandrudima I'm using the Hack font.
2255|I think @weinand hit this exact same issue (bold text + Hack font) on OSX and we fixed it with 014193f  @jublo can you please check that indeed this is a dup of #39: - use Hack font - open a markdown file - have some bold markup, e.g. `abc **text** xyz` - try to select around the bold text
2256|@alexandrudima See here:  ![image](https://cloud.githubusercontent.com/assets/6348321/11478414/252eded0-978d-11e5-8bbc-44fd2491bf66.png)
2257|@alexandrudima Do I assume correctly that this is going to be fixed in 0.11.0 or 1.0.0 (whichever comes first)?
2258|@guillermooo Thank you for being patient with me :+1:    Pushed Microsoft/vscode-docs@184dd52 to add `\` to the list. We publish to the website often, should be picked up at https://code.visualstudio.com/Docs soon.
2259|@jublo Thank you!  The selection rendering fix is in master, it will come out with the December update.   We will update the [wiki](https://github.com/Microsoft/vscode/wiki/December-2015-Plan----Work-in-Progress---) as we work out the exact dates.
2260|"Ok, I think I understand. In your `_Layout.cshtml` you use:  ``` html <link rel=""stylesheet"" href=""~/css/bootstrap.css"" /> ```  `~` is something Razor understands and resolves it at runtime to an actual path (possibly something that is configurable). Probably in this case at runtime it will be:  ``` html <link rel=""stylesheet"" href=""/css/bootstrap.css"" /> ```  When you `Ctrl+click` on the detected link, VSCode wants to open the file but VSCode fails to understand the special meaning of `~`."
2261|@hashhar Thank you for the additional details
2262|For now, you can use eslint as a workaround: https://github.com/Microsoft/vscode/issues/140#issuecomment-158673051
2263|Thanks @alexandrudima.  For now we've successfully worked around this by collapsing the edits before returning them.  This appears to be working, but requires a lot more logic processing the edits in the extension than I'd like.  I find it odd that the edits are currently treated as being relative to the original document, vs. being a consecutive set of edits relative to the state of the document after applying all the previous edits.  The later would have ensured there are no ambiguities (and matches what would really happen if the edits were user input against a document).  But perhaps that's not an option at this stage.  Either way - would be good to get a validation error returned so we can catch this and identify places where it's failing (and to document the requirements on the `TextEdit[]`).
2264|And also HTML role attribute should auto-complete.
2265|Definitely ES6 should be the default in my opinion
2266|"Hi @dbaeumer. I'm using version ^1.6.2. I'm a bit wary of changing the typescript.tsdk setting because this code is being used in production.   Is there any other way to disable validation? I also tried adding `""javascript.validate.enable"": false` to settings.json without any luck."
2267|If I may add, XML as a whole is not highlighting correctly. All text is red. Windows, 0.10.2.
2268|@AdamDotNet that should be fixed in an upcoming release.
2269|@zbandhan that was added in 98f95641 and successive commits.
2270|Hi **@DickvdBrink**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
2271|We replaced our tokenizers to text mate tokenizers. As these tokenizers create very different tokens, some of the colors changed unintentionally. I polished the light and dark theme to be in the spirit of what we had. here's how it looks now (for the December release). I kept the yellow for function and method declaration. ![image](https://cloud.githubusercontent.com/assets/6461412/11482237/11c8213e-97a2-11e5-92ce-bd4f0f479259.png)
2272|This is an issue with the sourcemaps, it's only affecting winjs for now so I did a workaround.
2273|@AdamDotNet It's bug #23
2274|"Sorry, but it still seems inconsistent with Visual Studio itself. One of the (many) things I like about Code is that it _looks_ like Visual Studio right out of the box so I have a consistent experience on all 3 platforms. This is no longer the case.  My main issue is the use of the keyword color (in this case, blue) for the namespace and class names themselves (ie. ""space"" and ""Foo""). This is rather confusing for me since the _use_ of a namespace and class name is not blue.  I also have a (more minor) issue with the use of yellow for function and macro names as that yellow is also used for constants (like 5 above). It's also equally inconsistent with namespace and class names as they are only colored yellow in their declaration/signature, not their use.  I'm not asking for anything as fancy as Visual Studio coloring. I think even leaving function, macro, namespace, and class names as white would be better than trying to color them this way."
2275|This issue was moved to atom/language-csharp#42
2276|@dstorey Then I wait for your new version? Otherwise I can also update to the Atom grammar and you can build on that. Let me know what you prefer.
2277|On Linux it's doing the same. I too would expect a ctrl+del (or ctrl+d?) to remove the line, not remove the next element.  2015-11-30 17:58 GMT-02:00 Dick van den Brink notifications@github.com:  > See my gif; I did test this on a Windows machine with a TypeScript file > I didn't expect it to remove the // or the . when pressing ctrl+del > If this is the right behaviour, feel free to close :) > [image: ctrl del] > https://cloud.githubusercontent.com/assets/765657/11482759/f0538eaa-97a4-11e5-9275-34bd81ab11c2.gif >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/832.
2278|Hmz, I would have thought it would do the same as it did on first line (`function test`) so only remove the whitespace  **edit** To clarify, I would expect it to remove white space only, because of my cursor position. If it was at the beginning of the word it it does remove it (like expected)
2279|@aeschli merged back into htmlTags.ts and externalized the strings. Let me know what should be done about attribution, currently a link to the doc exists in a comment in the code.
2280|Hi **@DickvdBrink**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <p>The agreement was validated by Microsoft and real humans are currently evaluating your PR.</p>  TTYL, MSBOT;
2281|@danlofquist thank you ! uninstall/reinstall solved my problem too. I can go back to work now :)
2282|"@alexandrudima  > For now, please don't write code depending / working around these wrong return values as we plan to fix them.  Are you implying these commands should be ""private"" or unstable? What is the supported API to get the symbols for a document by URI?"
2283|We're using the grammar from https://github.com/ionide/ionide-fsharp. Our grammar is up to date on version 1.4.11.
2284|Filed as https://github.com/ionide/ionide-fsharp/issues/186
2285|+1 for svn support. But I would like also to be able to commit/update
2286|Here is the verbose output  ``` ./Electron --verbose ### VSCode main.js ### /Applications/Visual Studio Code.app/Contents/Resources/app { pathArguments: [],   programStart: 0,   workers: -1,   enablePerformance: false,   verboseLogging: true,   debugPluginHostPort: undefined,   debugBrkPluginHost: undefined,   logPluginHostCommunication: false,   firstrun: false,   openNewWindow: false,   openInSameWindow: false,   gotoLineMode: false,   pluginHomePath: undefined,   pluginDevelopmentPath: undefined,   pluginTestsPath: undefined } Lifecycle#unload() 1 IPC#vscode-workbenchLoaded IPC#vscode-openFileFolderPicker IPC#vscode-openFileFolderPicker App#activate App#activate App#activate IPC#vscode-openFileFolderPicker Lifecycle#unload() 1 IPC#vscode-workbenchLoaded IPC#vscode-openNewWindow Lifecycle#unload() 2 IPC#vscode-workbenchLoaded Lifecycle#window-before-close 2 Lifecycle#unload() 2 Lifecycle#window-before-close 2 Lifecycle#window-close 2 IPC#vscode-openNewWindow Lifecycle#unload() 3 IPC#vscode-workbenchLoaded IPC#vscode-openFileFolderPicker [VS Code]: render process crashed! App#activate Lifecycle#before-quit Lifecycle#window-before-close 1 Lifecycle#unload() 1 Lifecycle#window-before-close 1 Lifecycle#window-close 1 Lifecycle#window-all-closed Lifecycle#before-quit App#dispose: deleting running instance handle ```
2287|@glennc With just the one line, all looks fine; the comment is in green. ![image](https://cloud.githubusercontent.com/assets/6461412/11484482/7a43731a-97ae-11e5-960c-30b47d5111c4.png)  Same with a more complete example:  ``` c# class A {   foo() {     var a = 0; // {     var b = 0; // hello   } } ```  Can you give a full example that shows the issue?
2288|1.7 will become available the week of 11/30
2289|Thanks, sorry I missed the existing bug.
2290|"@alexandrudima I'm able to produce `\` with `AltGr + º` using a Spanish Spain QWERTY layout. However, using a Spanish Spain QWERTY layout, I cannot capture key codes produced by keys that produce ""standard"" key codes (`\`, etc.) in the US QWERTY layout.  For example, `0xe7` (`ç`) in Spanish Spain QWERTY is for me `0x5c` (`\`) when switching to US QWERTY (the same physical key). So my question is, can VSC now, or is it planned for the future, to make a key code like `0xe7` bindable? My understanding of the problem is superficial, but I guess the answer is negative. If so, could VSC let extensions process key codes instead of characters?  Another surprising thing, is that the `0x3c` (`<`) key in Spanish Spain QWERTY is `0x5c` (`\`) for US QWERTY (different physical key to usual `\` in US QWERTY). So, effectively, I cannot capture `<` in Spanish Spain QWERTY, because for US QWERTY it's a redundant key code. This will make it very hard to make the Vim extension usable for non-US layouts. Sublime, for example, does capture the correct key code and character here. I believe you mentioned in a different post that this problem is a limitation of Electron. It'd be really limiting if VSC could not solve this issue.  The main lesson here is that dealing with international keyboards is very tricky and confusing; I hope I have not made any mistakes in my explanation, but keep in mind that this topic is quite alien to me, so I may be missing something obvious."
2291|@ironcladlou I think the supported way would be to factor out the symbol collection code from the `DocumentSymbolProvider` and then call into that shared implementation from both the symbol provider and any places that want to use the symbol information.  In the `vscode-go` extension in particular, we already do something like this for the formatting code, and could do something similar for the symbol code.
2292|I might not be able to, since we ended up using a pretty different approach to this.  I'll close this for now and will reopen if I'm able to recreate an example of the problem.
2293|Can we get a link to the issue that is resolved in Electron?
2294|Okay - I'll add those.  But it's never correct for me to declare a command in package.json and not ask for it to be an activation event is it (it will always just throw up a confusing error to the user)?  Shouldn't Code either: 1. Not show any commands that are registered but not listed as activation events to the user, or: 2. Automatically treat every registered command as an implicit activation event.
2295|@lukehoban   > I think the supported way would be to factor out the symbol collection code from the DocumentSymbolProvider and then call into that shared implementation from both the symbol provider and any places that want to use the symbol information. In the vscode-go extension in particular, we already do something like this for the formatting code, and could do something similar for the symbol code.  My understanding is that multiple providers can be registered for a given document selector; Code then merges the results to feed the rest of the IDE (via private APIs?) Seems to me that extensions would benefit from exported API access to the merged/processed symbols the IDE already collected from all extensions. I also wouldn't be surprised if the processed provider results were also cached internally, etc for performance, stuff we wouldn't want to duplicate.  Coupling the vscode-go functionality to its own single provider's implementation would probably work, but  seems a little less than ideal based on the above.  Thoughts?
2296|@roslanr18 is that a kinda of help?
2297|:+1: same question
2298|Is anyone working on this already? ... Maybe there is a branch being worked on? ... I'm so happy VS Code is open source  :heart:
2299|Sorry, didn't get the notifications. I haven't configured a linter at all, used the one out of the box, It was originally in a flowtype file where I got the error, I just tried it in js file and I got the error.  Looks like it is after an es6 import statement without semicolons  ``` javascript // lints fine var ONE = (function(a){return 1}())  // lints fine (function(a){return 1}())  // lints fine import blah from 'blah'; (function(a){return 1}())  // errors import blah from 'blah' (function(a){return 1}()) ```
2300|"This is also a problem with double forward slash in js.   <img width=""479"" alt=""screen shot 2015-11-30 at 7 50 03 pm"" src=""https://cloud.githubusercontent.com/assets/7966496/11491076/b0a4014e-979b-11e5-8101-e47677924cf4.png"">  ```   const contentObj = {     domain: uriObj.host,     path: uriObj.path,     longUrl: `${uriObj.protocol}://${uriObj.host}${uriObj.path}`,     type: '',   }; ```"
