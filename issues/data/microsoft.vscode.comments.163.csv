16201|Using ESLint to lint error, I succeed to [lint ES7/babel code as wanted](http://stackoverflow.com/questions/36327096/visual-studio-code-linter-es7-babel-code/36327097#36327097). So VSCode work perfectly well with ES7 code. Indentation in VSCode already fills a lot of use case: it is very awesome. Just the sum of this spread + anonymous function doesn't work :( as expected.  Thank you for the link but I don't want TypeScript to recognize it, I only need to have VSCode indent ES7 Rest/Spread properties in all cases. Let me know if I miss the point about the relation between TypeScript and VSCode.  Do you think a VS Code feature should be proposed? or is it a matter of improve VSCode parser?
16202|"The same problem here. - VSCode Version: latest, downloaded on 04.04.2016, shown as:   Version 0.10.1   Commit df352367df2efcfa9d602d471e4e2f42140a0f05   Date 2015-11-17T15:21:23.766Z   Shell 0.34.1   Renderer 45.0.2454.85   Node 4.1.1 - OS Version: Linux 64bit - Settings:   ""http.proxy"": ""http://proxy........:81"",   ""https.proxy"": ""http://proxy.........:81"",   ""http.proxyStrictSSL"": false,  Steps to Reproduce:  ``` Open Visual Studio Code Open Command Palette Type ext install mason (really, any extension). Error happens: Error: connect ECONNREFUSED ```"
16203|"put below lines in file setting.json     ""http.proxy"": ""http://yourproxy.com:8080"",     ""https.proxy"":""https://yourproxy.com:8080"""
16204|@mquandalle nice stuff, some feedback: - suggest to move `getOptimalWidth()` into the Viewlet base class since it seems to be used only for viewlets - for me the implementation of  `getOptimalWidth()` in working files and explorer view is not working (see my video below on mac) - ideally the implementation of  `getOptimalWidth()` should be shared and reused, would it be possible to make the implementation generic enough that it works with any tree? it could then be moved into `ViewletView` for others to pick up - once we have a reusable `getOptimalWidth()` I actually think we should use it in search, git and debug too, why would we not? - the fact that the sash no longer draws a full div for the cursor style seems to cause issues: if you drag the sidebar into the left until it hides and then back you see that the mouse no longer shows the resize cursor (the same is true when you size the panel in and out)  That is it for now :+1:
16205|![untitled](https://cloud.githubusercontent.com/assets/900690/14242762/17a5244a-fa52-11e5-862c-81fb2477d261.gif)
16206|I will implement a message to indicate that you should consider set up a proxy, whenever this happens.
16207|Code doesn't mishandle version-controlled files. Code works (and should work) just like the Windows Explorer here. It works just like you'd rename a file regardless of git. It works just as you'd run `mv foo bar` in the command line. All of these will make git detect a **delete** and an **add**.  Once you **stage** both those operations, [git will detect that as a **move**](http://stackoverflow.com/questions/7938582/how-does-git-detect-similar-files-for-its-rename-detection).  `git mv foo bar` does these two steps at once: it moves the files and then stages the **delete** and the **add**.  Code shouldn't do that automatically. Let me give you a simple situation why that is: 1. make changes to `foo` 2. stage those changes 3. rename `foo` to `bar`  After those steps, Code will still let you commit the initial changes to `foo` without committing the rename. If Code would automatically stage the move, you'd be stuck with the combination of the file changes and the rename in your staging area, which might not be what you wanted.
16208|Is the current Linux version 1.10.1 (built on 2015-11-17) and the current windows version 1.10.11? Should it work in Linux version at all? When I grep for strictSSL in VSCode directory I find nothing.
16209|@pavelthebest What are your settings exactly?
16210|"AS s you can see in my post before:  `""http.proxy"": ""http://proxy.....:81"",     ""https.proxy"": ""http://proxy.....:81"",     ""http.proxyStrictSSL"": false, ` I have replaced a part of our proxy by '....'."
16211|"> The only way to debug browser side code is use the ""Debugger for chrome"" extensions?   If you want to debug inside VS Code then this is the way to do it.  If there are issues please file them against the extension https://github.com/microsoft/vscode-chrome-debug/issues"
16212|I'm surprised to not see https://github.com/Microsoft/vscode/issues/1703 here, it has April milestone assigned, I consider it a pretty important bug and it's been around since December....
16213|Sorry, it was my fault, for some reason I have downloaded wrong version, 1.10.1 instead of 1.10.11. I take everything back. Sorry.
16214|@asotog imho this should be implemented on a much lower level and fed into our configuration story. There already is a setting search.exclude and when accessing that one, it should get filled with whatever setting is in .gitignore. The work is to convert .gitignore patterns into the VS Code compatible glob system. The other work is to make sure that this scales to very large .gitignore files.
16215|No problem! Thanks for taking the time to try to fix it, nevertheless. :+1:
16216|@felixfbecker #1703 is listed under the Bugs section.
16217|@isidorn  Sorry for the delay, I didn't see any errors shown in the lower corner of my screen.
16218|The improved filtering changes are now on master. The rules are that the range of the text edit defines that text that will be used for filtering and that filtering will happen against _label_, _insertText_, and _filterText_. Having said that the PowerShell extension still needs tweaking (wrt the sample above).   Given the editor content `$env:` and a suggestion like `range: 0,0,0,5, insertText:'$env:ALLUSERS', label:$ALLUSERS` might be misleading because the user sees _$ALLUSERS_ after _$env:_ and when adding another _$_ the list is empty (comparing '$env:$' to '$ALLUSERS' and '$env:ALLUSERS') I believe its easier to make the text edit an insert like `range: 0,5,0,5, insertText:'AllUSERS' ...`
16219|"@iDev0urer traditionally the language server uses stdio to communicate between VSCode and the server. If you write to console.log('...') then it is like sending a message. And the header of the message is not correct. This is why you see the exception. There are two options to make this work: - You still use stdio as the transport and use the connection.console object to log. In you code your would write  ``` ts connection.console.log(""Apex server initialized""); ``` - or you use a different transport than stdio. Since your server is written in node you can use Node's IPC as a transport. Your code would do the following on the client side (note the transport property):  ``` ts     let serverOptions = {         run: { module: serverModule, transport: TransportKind.ipc },         debug: { module: serverModule, transport: TransportKind.ipc, options: debugOptions}     }; ```  and this on the server side:  ``` ts let connection: IConnection = createConnection(new IPCMessageReader(process), new IPCMessageWriter(process)); ```  I will adopt the node example to this pattern."
16220|Yes, schema-based auto-complete would be awesome. And perhaps a schema-validation function as well.
16221|Then we would appreciate if you could create a repository on github where we can reproduce this behavior so we can investigate. Or some other way to reproduce this issue.
16222|Also, I then see stuff like this tho no ./scripts/code.sh is running  ``` jrieken:~/Code/vscode$ ./scripts/test-integration.sh [12:37:50] Using gulpfile ~/Code/vscode/gulpfile.js [12:37:50] Starting 'electron'... [12:37:50] Finished 'electron' after 320 Î¼s Running extension tests from the command line is currently only supported if no other instance of Code is running. jrieken:~/Code/vscode$ ```
16223|@chrisdias assigning to you. This is a overall product decision.  @egamma FYI.
16224|@aeschli can you please take this.
16225|@weinand My bad
16226|Sorry this assumes you have mocha.d.ts
16227|@stephenmartindale Great catch! There is somewhere a +1 bug in the column selection code (evident by the fact that I can't use column select to the beginning of a line):  fyi @egamma   ![column-select-plus-one](https://cloud.githubusercontent.com/assets/5047891/14245817/079b9662-fa64-11e5-9a1d-7772aae927b2.gif)
16228|We're starting the design work on this experience and would like to involve the community as much as we can. I will be running regular design discussions as we make progress to get your feedback. Most often these will be one on one sessions where we share what we are working on and discuss them with you.  The first sessions will take place this Wednesday. Please sign up here if you are interested: https://calendly.com/stevencl/visual-studio-code-tabs-design-discussion/04-06-2016
16229|"@damienleroux When you say ""auto indenting"", do you mean you run the formatter (`Format Code` from the context menu)?"
16230|@weinand is there something I could do on the vscode side right now, or should I wait for #4902 first
16231|This looks similar to #4901. If @damienleroux confirms he's running format we can close one as a dup of another.  ---  I think, as @egamma points out in #4901 that this is caused due to the TS/JS language service not yet supporting Rest/Spread properties, (see Microsoft/TypeScript#2103)
16232|"@mrahhal Would the following rule in your `keybindings.json` work? (Preferences > Keyboard Shortcuts):  ``` json // Place your key bindings in this file to overwrite the defaults [ { ""key"": ""alt+a"", ""command"": ""cursorHome"", ""when"": ""editorTextFocus"" } ] ```"
16233|@isidorn Is there anything that you had planned to do here? My assumption is that fixing the doc is all that we can do here. Or is there a real bug on your side?
16234|I do not think it is a question of 'what [I] want' but what I expect.  As I said, I do not expect renaming a file to remove it from version control.  I am not a regular user of Windows Explorer, so my expectations do not come from that domain. I am a regular user of git and Linux, so am used to moving files to rename them.  I'll give up on this issue now -- I am sure someone else will raise it in the future. Very disappointed to VS Code so obstinate on what seems to be a straight-forward usability issue.  On 4 April 2016 at 10:29, JoÃ£o Moreno notifications@github.com wrote:  > Code doesn't mishandle version-controlled files. Code works (and should > work) just like the Windows Explorer here. It works just like you'd rename > a file regardless of git. It works just as you'd run mv foo bar in the > command line. All of these will make git detect a _delete_ and an _add_. >  > Once you _stage_ both those operations, git will detect that as a _move_ > http://stackoverflow.com/questions/7938582/how-does-git-detect-similar-files-for-its-rename-detection > . >  > git mv foo bar does these two steps at once: it moves the files and then > stages the _delete_ and the _add_. >  > Code shouldn't do that automatically. Let me give you a simple situation > why that is: > 1. make changes to foo > 2. stage those changes > 3. rename foo to bar >  > After those steps, Code will still let you commit the initial changes to > foo without committing the rename. If Code would automatically stage the > move, you'd be stuck with the combination of the file changes and the > rename in your staging area, which might not be what you wanted. >  > â > You are receiving this because you authored the thread. > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/4821#issuecomment-205211135
16235|node.js does not detect and reload modified source automatically. You will have to run a tool like 'nodemon' to get this behaviour.
16236|"Yes! This does work. I used:  ``` [     { ""key"": ""alt+a"", ""command"": ""cursorHome"", ""when"": ""editorTextFocus"" },     { ""key"": ""alt+d"", ""command"": ""cursorEnd"", ""when"": ""editorTextFocus"" } ] ```  Thanks, feel free to close this if that's all you need."
16237|@mucaho Seems so, thanks! Now I'm relieved.
16238|That should only ever show up if `--extensionTestsPath` is provided from the command line.
16239|Currently you can only configure encoding per workspace folder.
16240|We do not react to file deletes in the working files section currently.
16241|F1 > Focus on Files Explorer. I think we might have added this only recently, so give our insiders release a try: http://code.visualstudio.com/Download#insiders
16242|@jschraub Can you please point out specific features you like or that help you move around more efficiently from the Enhanced Scrollbar of VS 2013/2015 ?
16243|@carcigenicate This sounds like you might have hit a problem that went aways after a restart.  If you encounter this problem again, we would love to get some steps on how to reproduce.
16244|Yes it is, doing alt-shift-f
16245|Is there a cost to loading the additional stack frames? If not, I wondered if it might be worth loading the additional stack frames automatically when the user scrolls to the bottom of the call stack?  If there is a cost I would do a little clean up: 1. Remove the '...' as this is used to indicate that a dialog or more information will be requested upon clicking. 2. Consider one or more of the following 2a. Centre the text to make it even clearer that it is not a frame. 2b. Add a highlight on hover that differs from the list and that only spans the text, not the full width of the control 3. Don't allow the text to be selected the same way that a frame can be selected - I noticed that when the stack frame contains two pages worth of stack frames that the 'Load more stack frames' button is selected when viewing the second page (i.e., I clicked the button twice in succession after loading two pages worth of stack frames).
16246|Actually I notice that 2 files in this workspace are very large (> 6 MB) and essentially the search is really busy processing those 2 files in the end and the file based progress is correct. I pushed a change to adjust the progress based on the size of the file. Let me know how it goes.
16247|Looks like the extension suggestion doesn't realize the extension was just installed.
16248|"Thank for the quick answer...  Have you plan to manage encoding files by extension of filenames ? with by example add property ""files.encoding"" in file ""package.json"" of VS Code extension language. Because same folder could have files encoded 1252 and others utf8 with best regards Francis"
16249|Yes that the same issue
16250|Thank you! Closing this one in favor of #4889 .
16251|@stevencl thanks, these are great suggestions.  Loading stack frames might be expensive. It depends on the debug adapter, so we don't really know in the frontend.
16252|I don't know how else to put it: Code shouldn't stage on move, in the same way that it doesn't stage on file creation and deletion.
16253|Straight using of FindController.ts may cause an error when FindController loads earlier than editor.main
16254|Besides the situation in which you type a commit message and later figure out you want to do another commit instead, I don't see any added benefit of remembering commit messages, since they will all be quite different from each other. I just don't see the reuse.  Also I don't think that the solution proposed would solve your problem since you didn't actually commit it, so the message wouldn't be remembered. We would only remember committed messages.  I'm sorry you lost the message.
16255|@fififofo can you make a video so that I can see your setup? I am using liCeCap typically on Mac.
16256|@Anjmao What color theme are you on? The 'sadFile.ts' one looks like the Dark Visual Studio, the first one looks like Dark+. Make sure to switch to the Dark+. There were some theme swirls in the past, but we have settled now with to the 2 styles of default themes (VS and plus).
16257|Atom has this issue as well. I always felt it has something to do with the auto update check upon launch. It always seemed to me that VS Code and Atom are not actually getting elevated to administrator properly. It always appeared to me with Atom, that the updater was being elevated to Administrator, but then it was not properly opening the actual editor as Administrator after then updater was finished. I'm not quite sure how VS Code is handling this, but thought I would add that this is also an issue with Atom. Even when elevated you cannot edit the hosts file for example in either editor.
16258|If so, this is an issue with Electron that should be reported against their repo.
16259|Even if I close all Code Instances, I cannot get an elevated Code on Windows. This makes Code unusable for my use cases. It doesn't matter if I use RunAs or execute code in an elevated cmd or powershell prompt, it is not elevated.
16260|Well then, eliminate these approach and use the native scroll behavior in chromium >= 49.
16261|fyi @dbaeumer
16262|@weinand no, I do not think there is a bug on my side.  @rkeithhill alpha is ahead of insiders always, we just do not update the version number on alpha regulerly it seems. It sounds strange that your fix works for insiders, and not for alpha as there have been no big changes on alpha that would affect this. We will release a new insider update tonight so maybe you can try it out then. If not then please let me know and I can investigate - if I can get you updated version of powershell with the fix.
16263|The task manager reports code.exe as running elevated, but I still cannot edit anything that requires elevation. After testing Atom.exe just now, and bypassing its auto update shortcut, it has the same issue. Task Manager reports it as running elevated, but unable to edit anything that requires elevation. I will go look at the Electron issues.
16264|@stevencl great suggestions, thanks!  @weinand @stevencl I was also thinking of loading more stack frames once the user scrolls all the way down (similar to how Joao is loading more extensions on scroll down in quick open). As Andre pointed out we do not know how expensive this operation can be. But let me know your preference if I should try to load more on scroll down or go with the current solution + Steven's suggestions
16265|I will also note, that there is another issue here that says I should be able to close all open instances of VS Code and then RunAs and get elevation, but this does not work on my machines.
16266|Can you please include a screen-shot of what you are seeing.  What behavior are you expecting to see?
16267|@isidorn @weinand Assuming that automatically loading the additional stack frames doesn't freeze the UI, I think it would be worth trying.
16268|@isidorn Because loading those frames is expensive we would have to make sure not to load more than the 20 frames initially (even if more than these 20 would fit into the view). So only scrolling should trigger loading more. But the user experience for this would be strange: the view shows 20 but there is already room for more. But why would the user then start scrolling in this situation?
16269|Very odd, I decided to do a complete uninstall and reinstall, and I can now get it to run elevated properly if no other instances are running. The etc directory is still not visible, but I can actually open the files and edit them without getting a permissions error.
16270|@weinand yes I agree the solution is not so nice in that case. We would always have to load as much as the view can show to make the user experience nice. However since this operation is expensive I would go with the explicti load more action as we have it today + polish from Steven.
16271|Good point @weinand I didn't think of that. It makes more sense then to go with the load more button at the bottom of the list.
16272|@jrieken Thank you for your work, sir!
16273|"@isidorn lets go with the ""more action"" for now.  Here is more detail about the underlying node.js problem: dependent on what version of node the user is running, it actually could make node.js totally unresponsive because node.js tries to move tons of datastructures over the wire in an uncontrollable way. For newer versions of node, VS Code is able to inject code that prevents this, but in older versions it cannot. In this case the UI would not freeze, but the debugging could grind to a halt.  To reduce the likelihood of this, we only show 20 frames (that's even more than node's default of 10)."
16274|@bpasero please review, now I am using flex for action bar in composite title. I checked all the viewlets and panels and all looks good
16275|@skyaddict My last comment above should work for your scenario as well
16276|:100:
16277|0: action label 1: action keybinding
16278|0: editor input status indicator (e.g. dirty indicator) 1: editor input title
16279|In package.json, bower.json and in project.json, you can hover over a entry in the dependency section. It would show you a hover with the name, description  and the latest version of that dependency.  The resource string mentioned is the first line of the hover, representing the name of the dependency. I could change it to no use a NLS lookup.
16280|@bpasero Actually right now that is what this code is doing, it reads the .gitignore file and push the entries into the existent excludes patterns that vscode provides out of the box, right the now the code works for files explorer, but took a look at the search part and works in similar way, it needs the excludes maps as well, havent added the code to the search yet
16281|"I renamed ""id"" to ""identifier"". It is about the ""language identifier"", for example ""html"". I think for 1.0 it is fine to translate this to ""ID""."
16282|"It's the 'should not' that I am querying -- why should it not? What is Code trying to be? Is there a mission statement...? I agree that newly created files should not be staged, because I have never met anyone who would expect a new file to automatically be considered as version-controlled. However, when an operation is performed upon a file that is under version control, I **suppose** most people would expect the operation to effect the state in version control. Thus, when I use code to delete a file under version control, I expect to see it marked as deleted in version control -- and it is. Naturally, then, when I use Code to rename a file, I expect....etc. We don't know if my supposition is correct, nor if yours is, and since I have not seen a formal objective for Code, I cannot comment further without chasing my own tail. Perhaps a new ticket, ""More Integration with VCS: context menu add/remove/delete/rename"" :-)"
16283|The reason why I bring this up is that many things in the editor react on the `files.exclude` and `search.exclude` setting. If the `.gitignore` patterns are merged into one of those, you would get the explorer filtering for free.   My understanding is that #78 is about ignoring `.gitignore` in searches but not necessarily in the explorer. We would probably have to introduce 2 new settings to pick up the patterns either in `files.exclude` or `search.exclude` or both.  Today, anything in `files.exclude` will also be ignored in searches. It causes the explorer to hide these files too.  My fear is that the VS Code exclude rules cannot fully support `.gitignore` patterns. E.g. you can negate patterns (with `!`) and the order of patterns also has an impact (VS Code ignore patterns are currently unordered).
16284|As a related note, I think Atom actually executes git natively on a path to find out if the path is ignored or not. They do not try to convert the file into any pattern.
16285|Awesome! On Mon, Apr 4, 2016 at 3:54 AM Steven Clarke notifications@github.com wrote:  > We're starting the design work on this experience and would like to > involve the community as much as we can. I will be running regular design > discussions as we make progress to get your feedback. Most often these will > be one on one sessions where we share what we are working on and discuss > them with you. >  > The first sessions will take place this Wednesday. Please sign up here if > you are interested: > https://calendly.com/stevencl/visual-studio-code-tabs-design-discussion/04-06-2016 >  > â > You are receiving this because you were mentioned. >  > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/224#issuecomment-205239769
16286|no worries, thanks for your patience.
16287|good point, will need more research on this,  thanks man
16288|@claudiusraphael do you mean support running VSCode from a location that only has read access?
16289|Ping @joaomoreno
16290|It's not a question of a lack of a mission statement, it's about consistency.  I explained the reason: because the user doesn't necessarily wants to stage a rename when he's just performed it. The same way that the user doesn't want to stage the creation of a file as soon as he does it. Or a deletion. Or a text edit. Or any other operation.  When you add a file it appears as an untracked file in git. And Code shows it as added. But it's not staged. Yet, Code is nice and still lets you commit that without staging, by typing in a message and pressing `Commit`.  When you delete a file it appears as a missing file in git. And Code shows it as deleted. But it's not staged. Yet, Code is nice as still lets you commit that without staging as well.  When you move a file, it appears as a delete and an add in git. And Code shows it as an add and a delete. This is because, similarly to the previous cases, it is not staged. Yet, Code is nice and still lets you commit that without staging. And it will appear in history as a rename.
16291|Related to #597 #3495
16292|"Absolutely, @alexandrudima. The ability to at a glance, get a visual representation of your document/code. Having a ""10,000 foot view"" makes it easy to glance at your document and immediately click into the piece of code for which you are looking. While the Enhanced Scroll bar from VS 2013/2015 offer more features than that, I don't use many of them.  Many other code editors have similar features, including Sublime and Atom and they all have different sub-features, but I think having an offering for a ""10,000 foot view"" of your document at a quick glance, gives great advantage over Text Editors that do not have a corresponding feature.  Please let me know if that is what you were looking for, or it you need better/different details."
16293|"Closing as ""by design""."
16294|Brad can we get custom icons for each file type?
16295|Looking forward to hearing your feedback on new designs we're exploring related to this issue.  If you're interested, please sign up via the link on @stevencl's comment above!
16296|@nevadascout How would you specify such a timeout?
16297|not sure if I understand that. @haibison can you clarify what the different between _replace the rest_ and _insert into current care pos_ means?
16298|This is probably a duplicate of #3495 then. Closing.
16299|yeah... commands starting with an `_` should already be filtered. Unsure what to do the others...
16300|This happens because you clicked the `README` link. Not nice but expected. Consequence of #637
