18101|Actually I didn't pay enough attention (deleted the comment). Voila the same with TypeScript files. Does this setup work for you? If yes, what is the difference to your setup. My suspicion is still that your `files` attribute is causing this issue. If you use the files attribute then the list must be complete.  ![image](https://cloud.githubusercontent.com/assets/172399/14604268/85fc03b6-0527-11e6-8e10-b973e7edb535.png)  ![image](https://cloud.githubusercontent.com/assets/172399/14604295/a3054ce2-0527-11e6-8b95-ad1675aa4c71.png)
18102|@bpasero just small suggestion, you can use `#4679` instead of `4679` to have a reference/link on pull request and commit history.
18103|Waiting for linguistic approval.
18104|We used to not recommend the `currentWord` in textual completion.
18105|These issue are on review in this bug:  https://github.com/Microsoft/vscode/pull/5395
18106|üëç
18107|stretch for April
18108|"@johnliu2016  sure :) <img width=""392"" alt=""bildschirmfoto 2016-04-18 um 15 04 57"" src=""https://cloud.githubusercontent.com/assets/49339/14605051/11929f30-0577-11e6-83b3-54b775aa08a0.png"">"
18109|@aeschli I don't see how it stalls. I see that in case of the object literal textual completions kick in (or in case of an empty document 'no suggestions' shows). My provider is this  ``` class CompletionItemProvider0 implements vscode.CompletionItemProvider {     provideCompletionItems(document: TextDocument, position: Position, token: CancellationToken) {         let items = [             new CompletionItem('stall?-one'),             new CompletionItem('stall?-two'),             new CompletionItem('stall?-three'),             new CompletionItem('stall?-four'),         ];         let result: vscode.CompletionList = {             items,             isIncomplete: false         };         return result;     } } ```
18110|Thanks. Missed that.  Moving to TS.
18111|This issue was moved to Microsoft/TypeScript#8144
18112|@Heather can you please provide a screen shot ?
18113|OK. Makes sense to me.   @chrisdias I assign this to you to adopt the privacy URL to the same schema we use for the license URL.
18114|@mshi you are affected by this: https://github.com/Microsoft/TypeScript/issues/8139  Closing as dup.
18115|@outcoldman thanks for the contribution. Some of the team members are on vacation expect some delays until we get back to you.
18116|@edumunoz Thread events are optional. They only exist for debug adapters that want to report thread activity at times when threads are **not** stopped. If thread activity needs only to be updated on stopped events, there is no need for the debug adapter to send thread events.
18117|"I can only replicate it when  `""editor.formatOnType"": true,` if set to `false` - all works as expected   could it be caused by plugins?"
18118|no unit tests?
18119|@joaomoreno. Thanks for getting back so quickly. When I talked of changed files what I meant was changes :-) . In any case what I mean is that,  if for example, I make a modification to a file and that file was previously staged (i.e. my modification is an **`unstaged modification`**), I want that unstaged modification to be automatically added the to the **`STAGED CHANGES`** because chances are that I want those modifications staged. In the rare cases when I dont want those changes staged, I can move the changes to the the **`CHANGES`** section before I commit. Without this it becomes too easy to forget / overlook to stage modifications  This also goes for **`unstaged deletions`**   Also, whenever I add a new file (**`unstaged addition`**), I want to be prompted as to whether I want to stage that file or have a setting where I can always set the editor to stage new `unstaged addition`  I hope this makes it clearer but if not, then let me know and I will provide more info
18120|@bpasero I have read the first few messages on this board regarding the advantages/disadvantages of tabs. I also understand MSFT Team stance at this: the team is united under the same coding style and developed the same set of reflexes regarding `ctrl+tab` and/or the working files section. That is a good thing. All the team members having uniform flow of doing things, in general. However, we are not part of that team, nor we wish to develop the same set of reflexes. Our existing reflexes should, ideally, be fulfilled, not forced out and replaced. The editor should help the user.  We will have to either adapt to your definition of UX, or stop using VSCode. Some will adapt, some will not. Is all about the balance between good and bad things put on the table. That being said, I think the MSFT team greatly underestimates the importance of tabs, and greatly overestimates the in-the-house developed reflexes.
18121|You can build vscode yourself, just clone the repo and follow the instructions here:  https://github.com/Microsoft/vscode/blob/master/wiki/contributing/how-to-contribute.md#build-and-run-from-source
18122|"@bgse sorry, by ""building"" I meant ""packaging"". I want to be able to produce a package which I can use to replace `Visual Studio Code.app`."
18123|Just received another report of this, will track it there:  https://github.com/PowerShell/vscode-powershell/issues/149
18124|"@jrieken two questions about the workflow you are using for development (not really related to this PR, just want to start discussion and open a thread later if we will need): - looking on this PR - it seems like that you (and I guess some more folks) are allowed to merge changes without getting code review approvals. Is that right? - right now the history is really messed up. For example currently it just hard to understand what kind of work has been done on April 18. A lot of commits from you and @isidorn. Why not require people to squash commits before merging? - descriptions for PR and commits are not helping with code reviews. Most of the commit messages are ""fixes blah"", ""removing foo"", ""speed up bar"". I believe that good commit messages will help us, contributors and users, to understand what to expect from the next release, what is the priority bugs/issues you are working right now and producing really good release notes.  - code commentaries. sadly there are 90% of the code without any commentaries. It just really hard for new people to understand how all of the parts are working."
18125|On review now.
18126|@dbaeumer @bpasero   The privacy URLs are out of our control, they are on visualstudio.com. I am confident many products refer to them and their url schema is probably consistent across their site so changing it there is unlikely.  We could do a redirect from code.visualstudio.com, would that work for you guys?
18127|"Fixed.  File: src\vs\languages\less\common\less.contribution.nls.resx ID: "".resx"", 0; ""lessLint"" SRC: Controls LESS validation and problem severities. TGT: Contr√¥le la validation LESS et la gravit√© des probl√®mes.  File: src\vs\languages\sass\common\sass.contribution.nls.resx ID: src\vs\languages\sass\common\sass.contribution.nls.resx SRC: Controls Sass validation and problem severities. TGT: Contr√¥le la validation Sass et la gravit√© des probl√®mes.  File: src\vs\languages\css\common\css.contribution.nls.resx ID: src\vs\languages\css\common\css.contribution.nls.resx SRC: Controls CSS validation and problem severities. TGT: Contr√¥le la validation CSS et la gravit√© des probl√®mes.  File: src\vs\workbench\electron-browser\main.contribution.nls.resx ID: src\vs\workbench\electron-browser\main.contribution.nls.resx SRC: Update configuration TGT: Configuration des mises √† jour"
18128|Sounds good to me.
18129|#tabs
18130|You can only build the OSS version of code using gulp vscode-win32 (or other platforms). There is no public command to build the identical MS VS Code version due to product specific settings.  @chrisdias can you provide more details?
18131|This is TS related. Moving...
18132|Just editing the file. I created a new project and it seems to not be happening. I have a pretty large Node.js project that it happens consistently. I'm going to see if I can track down any files or settings that trigger it and get back to you guys.
18133|This issue was moved to Microsoft/TypeScript#8146
18134|Dups #4679
18135|Moving to TS.
18136|What about publicly available Nightly builds?
18137|This issue was moved to Microsoft/TypeScript#8147
18138|The task service uses the config service to react to changes to the tasks.json file. The config service relies on file events.  @bpasero are you aware of any problem with FS events and mapped network drive. I had the experience that this worked
18139|@egamma @alexandrudima Will anyone review this PR?
18140|"Also does `gulp vscode-win32` produces actually a package, like ""OSS Version Code.app"" or just set of files which I need to package inside Electron on my own?  @dbaeumer why have you closed this issue? My question has not been answered yet."
18141|"I'm sorry, can I ask another question about these? I'm not sure if there's a bug or my problem matcher is wrong.  Why it behaves like this - only underlining a single column instead of the whole range: ![](http://i.imgur.com/XvMDvLg.png)  I tested the regexp with that string and it seems to capture line/col numbers correctly: https://regex101.com/r/rB7zF3/1  I'm using the same pattern as in this PR:  ``` json     ""problemMatcher"": {         ""owner"": ""haxe"",         ""pattern"": {             ""regexp"": ""^(.+):(\\d+): (?:lines \\d+-(\\d+)|character(?:s (\\d+)-| )(\\d+)) : (?:(Warning) : )?(.*)$"",             ""file"": 1,             ""line"": 2,             ""endLine"": 3,             ""column"": 4,             ""endColumn"": 5,             ""severity"": 6,             ""message"": 7         }     } ```"
18142|@jbsulli great, a small reproducable sample would be great  Unassigning myself since it is not debug, but editing.
18143|The team and the people in charge really need to make one simple decision: **is VS Code a Human-Computer-Interaction experiment or is it supposed to be a solid, usable IDE** that _gives developers what they want?_ If the former, that's OK. Personally, I'll stop bothering and move elsewhere because I want to get my work done, not be part of a HCI experiment, but I'm sure that their experiment will pay dividends down the line. If the latter, they need to implement tabs, at least, because that's what developers want, and _both_ tabs and no-tabs at best if they want to chase both rabbits and try and convert people to a new workflow.
18144|Ok, I have found that `gulp vscode-darwin` outputs `VSCode-darwin/` outside of the source folder (which is not great), but understandable. Please document these steps.
18145|"@Tyriar: I tried your `autoReveal` setting in v.1.0.0-insider and it did nothing for me, either. The explorer still jumps about when I don't want it to - most irritatingly, when it scrolls completely to a different place when I use go-to-definition and that opens another file.  This is what I put in my preferences file:  `""explorer.autoReveal"": false,`"
18146|@anyong @stephenmartindale you're right, I didn't realize how new this setting was. It should be available on the next Insiders build.
18147|"Well said @stephenmartindale. Without tabs all we have is notepad.exe with its own version of Alt-Tab (which as noted many time above, is broken).  I've been trying to use ""Working Files"" as if they were side tabs, but after a week I'm pretty much ready to go back to Sublime and it's issues, particularly that there's no way to make that sidebar always be there no matter what else is going on in the app.  With the name ""Visual Studio..."" I expected at least the basic features of the Visual Studio editor (tabs, and the ability to drag those tabs into their own windows).  Why they would have removed that functionality is unexplainable.  Maybe I'll check back in a few months and see if they've gotten far enough to put a pre-alpha tag on a build.  Right now this is nothing more than a UI experiment, the only question is has it already failed or is it teetering on the brink of failure?"
18148|@biij5698 you should be able to launch from the terminal on all platforms: - On Windows you need to check add code to PATH in the installer - On Linux you need to install via a .deb or .rpm package (or setup a symlink manually) - On Mac you need to install the command to PATH via the command palette (<kbd>F1</kbd>) from within the editor.
18149|"Doh... after poking around it looks like I must have originally mistyped the ""--disable-extensions"" flag as doing it this time fixed the issue. Launched Code again and uninstalled the ""jshint"" extension and that fixed the issue. So it looks like the issue is with their extension. Sorry for wasting your time."
18150|Np, glad we got to the bottom of the issue.
18151|"I am having the same problem. Breakpoint not hit although they are red filled and show up under the ""BREAKPOINTS"" list.  my code is as simple as var a = 3; console.log(a); `{     ""version"": ""0.2.0"",     ""configurations"": [         {             ""name"": ""Launch"",             ""type"": ""node"",             ""request"": ""launch"",             ""program"": ""${workspaceRoot}/app.js"",             ""stopOnEntry"": false,             ""args"": [],             ""cwd"": ""${workspaceRoot}"",             ""preLaunchTask"": null,             ""runtimeExecutable"": null,             ""runtimeArgs"": [                 ""--nolazy""             ],             ""env"": {                 ""NODE_ENV"": ""development""             },             ""externalConsole"": false,             ""sourceMaps"": false,             ""outDir"": null         },         {             ""name"": ""Attach"",             ""type"": ""node"",             ""request"": ""attach"",             ""port"": 5858,             ""address"": ""localhost"",             ""restart"": false,             ""sourceMaps"": false,             ""outDir"": null,             ""localRoot"": ""${workspaceRoot}"",             ""remoteRoot"": null         }     ] }`"
18152|Cool
18153|"Thanks for the feedback. I hope I can provide some answers:  > looking on this PR - it seems like that you (and I guess some more folks) are allowed to merge changes without getting code review approvals. Is that right?  That's correct. We all work against master and don't do pull requests so often. This works well for us because we self host very aggressively - it happens we update alpha a few times a day. So people will notice breakage quickly and there is no hesitation to revert a change.   Usually changes become less wild towards the end of a month. That is because we start a [new iteration](https://github.com/Microsoft/vscode/blob/master/wiki/project-management/development-process.md#inside-an-iteration) every month which usually starts with one week debt/exploration work, two weeks feature work, and one week testing/stabilisation. Then we might do pull requests, reviews, and/or program in pairs.   > right now the history is really messed up. For example currently it just hard to understand what kind of work has been done on April 18. A lot of commits from you and @isidorn. Why not require people to squash commits before merging?  I like that suggestion. Esp. with the recent introduction of merge&squash we should do this more often. It's not a rule but everyone should include an issue number when pushing. When doing debt work that often gets forgotten and we should improve on that.   > descriptions for PR and commits are not helping with code reviews. Most of the commit messages are ""fixes blah"", ""removing foo"", ""speed up bar"". I believe that good commit messages will help us, contributors and users, to understand what to expect from the next release, what is the priority bugs/issues you are working right now and producing really good release notes.  The work is tracked in our [monthly plans](https://github.com/Microsoft/vscode/issues?utf8=‚úì&q=label%3Aiteration-plan+). My recent debt work on service injection got forgotten because it spun-off a water cooler discussion and I just jumped right on... More on our workflow can be found here: https://github.com/Microsoft/vscode/blob/master/wiki/project-management/development-process.md  > code commentaries. sadly there are 90% of the code without any commentaries. It just really hard for new people to understand how all of the parts are working.  We provide an [birds eye view](https://github.com/Microsoft/vscode/blob/master/wiki/contributing/code-organization.md) on how stuff is organised and I'd love to receive some feedback. Because doc comments are usually outdated quickly we have decided to use only TypeScript's type annotations for our _internal_ APIs.   fyi @egamma"
18154|"if I change the ""stopOnEntry"" property to ""true"" inside launch.json then it stops at the start of the program. And I can step thru my code. However, if I hit run it runs to the end without stopping at any of the breakpoints."
18155|The C++ extension does not include a `totalFrames` attribute in the `StackTraceResponse`.  Let me know if there is an easy way to turn on logging on the messages sent and received by VSCode to the debug adapter.
18156|No point in arguing text editor vs IDE (VSCode's selling points include features of both). Thin and popular features go into the base product, heavy or niche features into extensions.  Correct indentation on paste and formatting support for more languages are obvious candidates for base product.
18157|"@jrieken thank you for answers! It helped to understand the process.  I am new for VS Code, liked the concept of really simple editor with few advanced options. Gives me some thoughts of switching from `Vim` to VS Code. The main pros for this are: - Being open source. - Nice code (really good job here) - easy to debug and maintain. (comparing to Vim codebase...) - Having a way to easily fix some annoying bugs without bugging you. Just hope that process of approval is clear and simple. - Being open for the future iteration (https://github.com/Microsoft/vscode/issues/4888).  @jrieken you said ""it happens we update alpha a few times a day"" - how to get on alpha channel?"
18158|![default](https://cloud.githubusercontent.com/assets/2656965/14611739/d346f9be-05a4-11e6-9d7a-76d24dd567be.JPG)
18159|@abdullam what version of node and VSCode are you using? What OS?
18160|Can I have English, please?
18161|@dbaeumer Thanks for your quick response. I can reproduce this bug, and I know the cause after reading the source code. But I haven't set up the debugging environment yet, so hopefully you can easily resolve it. - My previous version is 0.10.11, its UI is English by default. In this version, there is no `Configure Language` command, and no locale.json as well. To reproduce this issue, **remove your locale.json file**.  ![no-config](https://cloud.githubusercontent.com/assets/1907927/14612792/ac5f011c-05cb-11e6-8bd6-5a263d0766b6.jpg) - When updating, the seed url will depend on the `${ env.getPlatformIdentifier() }` at the line 224 of [update-manager.ts](https://github.com/Microsoft/vscode/blob/84abe71111ac14dd58e14565a74a55af0ae6b797/src/vs/workbench/electron-main/update-manager.ts). My platform is simplified Chinese version, so this update media will be in Chinese version as well. (It's another bug, I use the English, why the server forces me to install Chinese version?)  ![updated install](https://cloud.githubusercontent.com/assets/1907927/14612717/473ffc8c-05cb-11e6-8021-54dcb226aa38.JPG) - After updating, the UI becomes Chinese. If I don't use the command 'ÈÖçÁΩÆËØ≠Ë®Ä' (`Configure Language` in Chinese translation) , the locale.json will not be generated. and the variable `locale` (at line 66 of [main.js](https://github.com/Microsoft/vscode/blob/c82ac047c4f43f738d212c3d6e600180475543d0/src/main.js)) will be the value of `app.getLocale()`, in my case, it's `zh-CN`, so I get Chinese UI.  ![config_cn](https://cloud.githubusercontent.com/assets/1907927/14612716/473e8c26-05cb-11e6-962d-bb1f62861796.jpg) - The default content of locale.json is defined at [configureLocale.ts](https://github.com/Microsoft/vscode/blob/5b9ec15ce526decc5dd0488339e798f6bcb4ec46/src/vs/workbench/browser/actions/configureLocale.ts), but the locale value is fixed to `en-US`, that's why I get confused when I opened the new generated locale.json with the Chinese command `Configure Language`. @hungys, you are right, after the locale.json is generated, restarting will resolve the issue, and the English UI will come back.  ![locale json](https://cloud.githubusercontent.com/assets/1907927/14612718/4741a816-05cb-11e6-8be7-a33397e3dc84.jpg)  So my suggestion is  1. the seed url for updating media should be the same language as the client's current locale setting. 2. if there is no locale.json file, just use en-US by default, the command localization is not a smart choice for a developer. (see the Chinese command above, it's ineffective.) 3. if there is an language selection option during the installation, that's would be better.
18162|"The only place I found a "".ignore"" is in https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/comment/common/lineCommentCommand.ts#L139  Moving to @alexandrudima thereby, though I am not sure if this is really being hit.  @T0toro  Can you try to run VS Code without extensions? From the command line, execute: `code --disable-extensions`"
18163|Please use `workbench.action.files.openFileFolder` on Mac !
18164|As most of the previous 259 comments have stated, I would very much like to see tabs in VS Code, similar to how they operate in Sublime Text. I, too, would gladly switch if it weren't for this one missing feature. As strange as it sounds, I do need the ability to have at least four documents open in the same window so I can switch between them rapidly.  Oh, and if Microsoft doesn't want VS Code to be compared Sublime Text so much, then they shouldn't have made a product that looks and acts so similar to it. Keeping tabs away from the GUI isn't a way to discourage comparisons to Sublime Text; it's a way to make those comparisons less favorable for Microsoft.
18165|Updating to reflect the issue exists for tasks as well.
18166|@adamzerok can you check if any file event occurs from the mapped drive? I would assume this does not apply just for tasks.json but any other file as well.  Otherwise I am merging this into https://github.com/Microsoft/vscode/issues/3132
18167|"@be5invis just curios, our rules seem to be this:  `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", sans-serif, ""Droid Sans Fallback""`  Does it already work better if you remove the last rule so that `sans-serif` becomes the fallback:  `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", sans-serif`"
18168|"@egamma if I had to guess, I would think this is our ""reg.exe"" spawning on Windows to find out the machine identifier for telemetry."
18169|"@bpasero   No. `Droid Sans Fallback` is Android-only, so on Windows and OS X the rule is identical to `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", sans-serif`.  My suggestion is: - For `zh-CN` : `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", ""Noto Sans"", ""PingFang SC"", ""Hiragino Sans GB"", ""Microsoft YaHei"", ""Source Han Sans SC"", ""Source Han Sans CN"", ""Source Han Sans"", sans-serif` - For `zh-TW` : `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", ""Noto Sans"", ""PingFang TC"", ""Microsoft Jhenghei"", ""Source Han Sans TC"", ""Source Han Sans"", ""Source Han Sans TW"", sans-serif` - For `ja` : `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", ""Noto Sans"", ""Hiragino Kaku Gothic Pro"", ""Meiryo"", ""Source Han Sans J"", ""Source Han Sans JP"", ""Source Han Sans"", ""Sazanami Gothic"", ""IPA Gothic"", sans-serif` - For `ko` : `font-family: ""Segoe WPC"", ""Segoe UI"", ""SFUIText-Light"", ""HelveticaNeue-Light"", ""Noto Sans"", ""Apple SD Gothic Neo"", ""AppleGothic"", ""Malgun Gothic"", ""Nanum Gothic"", ""Dotom"", ""Source Han Sans K"", ""Source Han Sans JR"", ""Source Han Sans"", ""UnDotum"", ""FBaekmuk Gulim"", sans-serif`"
18170|@SturmB Sublime is not the only editor that exists and I don't think they made VSCode to be yet another Sublime copycat, much like Atom isn't Sublime but all editors are sharing features which is a good thing, that's how you get choices!   VSCode isn't acting like Sublime at all because they are very different, VSCode aims to be the middle ground between a code editor and an IDE whereas Sublime doesn't make that claim, therefor, VSCode have larger audience of people, ranging from people that use Vim to Visual Studio.  Adding tabs is not the problem at all, people keep on saying that they need to add tabs and I'm sure that by now they understand that tabs are important but the real problem is getting the design right and make sure the experience feels great for everyone, these who love tabs and these who hate it.  Now, when you design a feature, especially a feature that is core to the experience in the editor, you can't just hack few things and put them together and then come back with an announcement that after few days will get many people disappointed! good things takes time! and this isn't different. :)
18171|Events are seen when the tasks.json or any other file are changed.  There is no problem with file creation, editing or saving.  Changes to the script are applied when it is run with ctrl-shft-B  However, the updated tasks.json just isn't being used. It uses the copy present when VS Code launches.  If i make a change to tasks.json it isn't used unless i restart VS Code.
18172|I like the working files concept. Tabs don't scale well when many files are open. Whatever happens, please keep the working files control!
18173|@roterdam I'm facing this problem with vscode 1.0.0 on ubuntu 14.4 LTS but when I try to edit the file as you indicated with vi, it says pattern not found
18174|I think this is good to go other than moving the test to `electron-browser/` and the DEFAULT typo.
18175|@oriSomething can you please describe the use case? Doyou need this for debugging ?
18176|@jrieken +1. I have a use case for this as well.
18177|"yes. i'm trying to debug... but then i get the wrong node version. because in my computer i need by default to use older version (v0.12.x) of node (need of most of the projects), and this specific project depends on capabilities of node >= v4. in the debugger i see messages of version 0.12.13 while i need it to be version 4. the only option i have is to change in NVM to default ""alias"" of the version i need for VSCode. because i cannot bump the node version to the whole of the other projects, and sometimes i need to work at both at them at once it makes this process frustrate."
18178|Love it :smiley: Thanks @pflannery! :fireworks:
18179|By analyzing the blame information on this pull request, we identified @egamma, @bpasero and @joaomoreno to be potential reviewers
18180|thanks!
18181|@NikosEfthias FYI the issue got moved to the TypeScript repository, where it is open. It got closed in this repository.
18182|The html lang part is covered by #3841 for which I created a PR The font part is in length discussed in #5260   I therefore close this one.
18183|for anyone else encountering this, I worked around this problem by uninstalling xrdp and installing tigervnc on my ubuntu box, then I installed tightvnc viewer on my windows 10 box and now when I remote in vscode works for me. rdp seems a little nicer to me than vnc so hoping maybe when ubuntu 16 LTS comes out I can change back to rdp
18184|@adamzerok ok this will be covered when we work on #3132
18185|Thanks much, I can apply these rules and people will have a chance to verify these improvements from our next insider build later this week.
18186|"@oriSomething you can set the ""runtimeExecutable"" of your launch config to the desired node.js version."
18187|@dbaeumer what are your thoughts on making <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> the default keybinding for reopen closed (working) file instead of run test task? The thinking here is that it's a standard keybinding across most browsers and text editors.
18188|@dbaeumer as discussed, please review if our list of language codes can directly be used without changing for the HTML language attribute.
18189|#3495 fixes this issue, thanks again @pflannery
18190|We decided today in our UX meeting that we will keep the behavior of closing files when they get deleted. We might revisit this in the future but for now this is as it is.
18191|I don't think automatically staging anything is the correct behaviour for a tool such as Code. You might be correct that those are the _chances_ but in the cases that they are not, Code would be doing the wrong thing unsolicited. This clashes especially with advanced git users that have expectations as to when and how their changes might be staged or otherwise.  I do see you have an specific workflow, which can be interesting to explore. My suggestion is to write an extension that would automatically stage changes as you make them. I believe we do have API to do so. Calling out to the git executable would let you manage the staging area.
18192|@weinand Any update on this?
18193|@Wenzil as I said this is native node.js behaviour. Working around this would be a new VS Code feature that takes some time to plan and implement (and I'm currently on vacation). What do you see when using node-inspector?
18194|Will let you know when I get home
18195|here you go -   ‚ûú  vscode git:(master) scripts/code.sh --verbose [14:42:43] Using gulpfile ~/Downloads/vscode/gulpfile.js [14:42:43] Starting 'electron'... [14:42:43] Finished 'electron' after 447 Œºs { [Error: ENOENT: no such file or directory, open '/Users/abhishah/Library/Application Support/Code-Development/storage.json']   errno: -2,   code: 'ENOENT',   syscall: 'open',   path: '/Users/abhishah/Library/Application Support/Code-Development/storage.json' }
18196|@hungys thanks for the PR, the PR will be reviewed but team members are on vacation during this week.
18197|> They only exist for debug adapters that want to report thread activity at times when threads are **not** stopped  @weinand It doesn't seem that way. The `DebugService` only updates the model with new threads when receiving a `ThreadEvent` (via a call to `rawUpdate`).  If a `started` `ThreadEvent` wasn't received for a specific thread, a `StoppedEvent` for that thread will cause that thread not to show in the `CallStack` viewlet, since it won't be in stored in the debug model.  Maybe I'm completely wrong and I missed a part where the threads are queried. How does VSCode use the threading information regarding threads that are not stopped?
18198|I checked with our legal folks and the correct way to do this is to use the current year, not a range.  Happy to take a PR if you want to revert the range.
18199|Can you see if /Users/abhishah/Library/Application Support/Code-Development exists with user permissions to write to it or otherwise create this?
18200|Is this also not working for Python??
