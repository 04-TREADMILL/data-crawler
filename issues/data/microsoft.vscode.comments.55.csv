5401|Seems dupe of #1733
5402|@joaomoreno Yes, I have applied this patch, and restarted vscode, still the same error.  ![20160105_vscode_main_js](https://cloud.githubusercontent.com/assets/14846203/12111093/b67d719c-b3cd-11e5-8010-2b04f3b79e0b.PNG)
5403|Can you somehow show me how I can reproduce your case? Eg: how to set up an untrusted proxy?
5404|@jrieken can you please have a look.
5405|@bpasero Not sure what you mean by 'wayland extension'. Wayland isn't an extension, it's a display server protocol. VS Code does start, but I get that error message on every start and I have to close it to continue. I haven't ran across this issue in any other applications (yet).  @joaomoreno That seems unrelated to me. Despite the error message, my terminal does not freeze and continues to work fine. I also get the same issue when I launch VS Code without a terminal.
5406|Removing important flag. This only happens if no editor is open when Ctrl+Shift+M is pressed.
5407|Can you provide a screen recording of the behaviour you mention?
5408|"@liandaoacc The different error message come from the fact that in case1 the message comes from the internal language service where the second comes from the external tsc compiler. However in both cases you should be able to navigate to the file containing the error.   The problem is actual a very old version of the tsc compiler that is install on your system. tsc -V reports Version 1.0.3.0 on your system (this version reports file names as absolute paths). It should be at least 1.6.x or higher (which report file names as relative paths). I guess that a long time ago you install the tsc compiler through Visual Studio as an executable which now has preference over the npm module. In a command prompt type where tsc to validate this. I am pretty sure it will not take tsc from AppData\Roaming\npm\tsc.   You can either uninstall the old version of tsc (recommended) or if you really want to use that version of the compiler tweak the tasks.json file to instruct VS Code to use absolute paths from the compiler.   ``` json {     ""version"": ""0.1.0"",     ""command"": ""tsc"",     ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""HelloWorld.ts""],     ""problemMatcher"": {         ""base"": ""$tsc"",         ""fileLocation"": ""absolute""       } } ```"
5409|Indeed, this is a limitation in the way we find (line-by-line) -- you cannot search for `\r` or `\n`.  Let's track it in #313
5410|Regarding tsc: you need to install the tsc compiler on your system. To do so run npm install -g typescript and validate the install using tsc --version. It should print 1.7.5
5411|@joaomoreno, I'd love to contribute if I knew how.  But I have a hint: whatever you are doing on Windows to not using the Windows defined proxy definition, stop doing it.
5412|In the second case you defined an alias for gulp via a npm script. This is currently not supported. To be able to autodetect gulp task gulp must be installed globally as well.
5413|Can you run the [latest Electron package](https://github.com/atom/electron/releases/download/v0.36.2/electron-v0.36.2-darwin-x64.zip)?  Did you try redownloading the bits?
5414|Updating title to reflect this.
5415|@lucianFXD you need now select Tasks: Run Task. This should give you the same picture I see.
5416|That would be the fact that we use Node.JS. Just look at other big Node.JS tools ([npm](https://docs.npmjs.com/misc/config#https-proxy), [atom](https://atom.io/docs/v1.3.0/getting-started-installing-atom#setting-up-a-proxy)) to realise that Node.JS doesn't automatically benefit from Window's proxy abstraction.
5417|@msiniscalchi very wired. Can you check if there is something in the log. From the menu bar select Help > Toggle Developer Tools and repeat the action. Thanks !
5418|@joaomoreno hmm, I think this should be something like SSLStrip, by replacing the https cert from original website to private ones, like [this tool](http://sectools.org/tool/sslstrip/) shows, though I didn't tried this myself.   Anyway, the `strict-ssl=false` [setting for Atom](https://atom.io/docs/v1.3.0/getting-started-installing-atom#setting-up-a-proxy) does works well, so I suggest to refer to the Atom project to see if we can find some clue.
5419|> Until then here's a nifty workaround: > 1.Launch Code in Administrator mode. > 2.In Code, open the  C:\Program Files (x86)\Microsoft VS Code\resources\app\out\vs\workbench\electron-main\sharedProcessMain.js  file. > 3.In Code's status bar, click the Line and Column indicator and type  8:15531  to go to the fix's location in the file. > 4.Change  .host,  to  .hostname,  as in the screenshot below. > 5.Save and restart Code.  Now, `ext install` and `ext update` just make the progress bar spin while code has focus.  As soon as focus is lost, I get the same error:  > getaddrinfo ENOTFOUND marketplace.visualstudio.com marketplace.visualstudio.com:443
5420|We will move to project Salsa this month so that this request becomes obsolete
5421|@MartynasZilinskas Is this with JS or TS files?
5422|"For VSCode, it is Chromium that ultimately renders the text. We provide the font-family and other CSS options, but Chromium deals with the actual font and rendering decisions. In other words, we cannot at our level of abstraction and we should not (given the limiting DOM API) deal with character level positioning.  TextMate, by rendering each character at the same width might get itself into other trouble. How does TextMate render full width characters, since by definition these characters should be wider:  ﻿Ｈｅｌｌｏ  ｗｏｒｌｄ  The only actionable thing we can do is the second bullet point you mention: to better display non-visible / zero-width characters. This we can do by ""massaging"" the text we give to Chromium and substitute those characters with other representations.  Opening the link above or its source: `view-source:https://raw.githubusercontent.com/Kroc/DOMTemplate/master/domtemplate.php` in Chrome:  ![image](https://cloud.githubusercontent.com/assets/5047891/12111704/b488235e-b397-11e5-90ed-483535e35d62.png)"
5423|> That would be the fact that we use Node.JS. Just look at other big Node.JS tools (npm, atom) to realise that Node.JS doesn't automatically benefit from Window's proxy abstraction.  Just found out that code reacts to changes to the configuration files. It seems to be just about editing the settings.
5424|ping @chrisdias
5425|@BenWeedon thanks for the test case. I was able to reproduce it.   @bpasero as discussed, moving to you
5426|This works for me using the latest 0.10.6 build. See attached screen shot:  ![capture](https://cloud.githubusercontent.com/assets/1931590/12112703/9b69c2f4-b39e-11e5-8103-18c8e2fe45bf.png)  @rajeevkumarsharma pls ping me if you can reproduce using 0.10.6. Steps would be helpful as well.
5427|"Thanks für helping me out on this!  :+1:   Shouldn't these important prerequisites better be mentioned in the docs?  I'm running Visual Studio 2015/1 on my system. That's what made me believe that TSC was already installed on my machine, too.  May I suggest to have Intellisense for the tasks that are available to `tasks.json` at `""command"": ""...""`?"
5428|"Using .d.ts files from the the node_modules folder is supported in 0.10.6. However you need to tell the TypeScript language server to look into the node_modules folder by specifying   ``` json         ""moduleResolution"": ""node"" ```  in the tsconfig.json.   For more information please look at the TypeScript documentation."
5429|The same thing occurs in the ruleset.  ![image](https://cloud.githubusercontent.com/assets/7034281/12112805/ec2a7d12-b3af-11e5-9a19-9e66c863b5f1.png)
5430|+1 for this requirement.  XML validation (and intellisense) via xsd is a huge hole in vscode from our perspective.
5431|@mohsen1 The code looks good, but this functionality is already there. See `SelectHighlightsAction` in the same file which does exactly the same: finds all matches using the `multiCursorFind` and then sets selections to those matches. I am sorry its identifier is very misleading (`editor.action.selectHighlights`), but it does the same and is bound by default to <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd>
5432|Atom's implementation is similar to ours.  I've just spent one hour trying to set up this scenario on my dev machine and yielded no significant results. I would love if someone can provide me an environment in which I can reproduce this and fix it myself. Maybe some of you guys have proxies which I can use?  Maybe you'd like to tackle this @iamzhout, since you seem to be able to reproduce this effortlessly?
5433|@jrieken @joaomoreno As you guys own the experience around intellisense, is this command a good idea?
5434|"I have now created a number of sub issues, each mentioning my proposals separately: - [ ] #1788 - Add npm install context menu to package.json file - [ ] #1789 - Use ""pragma comment"" for running tasks in VS Code - [ ] #1790 - Add ""Run Task"" context menu to any "".js"" file containing a ""# task"" pragma comment - [ ] #1791 - Add option to automatically start task runners' tasks - [ ] #1792 - Add mnemonics to context menu items  <br/> Shall we close this issue here?"
5435|I have no idea how these are in there.
5436|Check the [blur event listener in suggestWidget.ts](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/suggest/browser/suggestWidget.ts#L458).
5437|@joaomoreno there is of course no way to give my company proxy to you, as you can not access. I consider this problem for a while and maybe there are some ways we can try: 1. tell me if there is way to get more detailed debug info, so I can collect more info for your analysis. 2. if it will not take you so much trouble, would you like to try this [wallproxy](https://github.com/wallproxy/wallproxy), as it will do https cert replacement, and _maybe_ can reproduce this error. You can refer this [tutorial](https://code.google.com/p/wallproxy/wiki/Tutorial2) on how to setup a wallproxy server/client. (you can use google translate to make this tutorial from Chinese to English)  If there is anything I can do to help, please just tell me.  /Tao
5438|I guess it's the signing step...? Each zip contains such a file
5439|They are surely signing logs. I just don't see them during the build step...
5440|@azizsaboor It is difficult to find out of the box default shortcuts that work on all Linux distributions. We have focused on making good default keybindings work in Ubuntu. I'm guessing mint uses <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>Up/Down</kbd> at the OS level to perform some window management actions.  Please feel free to edit your `keybindings.json` and define new rules for `editor.action.copyLinesDownAction` and `editor.action.copyLinesUpAction`.  Alternatively, I am open to changing the default keybinding to something else, but at this time, we need to change it for all linux distros, so we need to find something that still works on Ubuntu (the majority of our Linux users).
5441|This is a great idea! :+1:
5442|@jrieken it's with Typescript files.
5443|@HuanhuanSunMSFT did something change with your permissions? can you save with another editor?
5444|This issue was moved to Microsoft/TypeScript-TmLanguage#35
5445|Please be specific what does not restore atm.
5446|We don't support the map syntax yet
5447|I have had this problem many times and even had a plugin in Visual Studio .NET that did this for me: Here's a user-voice post for this same feature: https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/11312763-ask-before-moving-files-in-solution-explorer-tree
5448|This issue was moved to davidrios/jade-tmbundle#67
5449|I believe the deprecation is ill-advised. Just look at this [benchmark](https://github.com/GoalSmashers/css-minification-benchmark).
5450|fix delivered
5451|Excellent :clap:
5452|"I have the same question. I write vuejs recently, and I try to implement a plugin to support the syntax highlight and snippet of vuejs. Since vuejs extends basic HTML and JavaScript, I want to inherit the embed support of HTML and JavaScript from Vs-code to my plugin. However I have check the document carefully and find no way.  I have try add **""extensionDependencies"":['vscode.html','vscode.javascript']**, but it seems cannot work.  So how can I inherit/include/import some language support, include snippet and colorizer, to another language?"
5453|@daviwil the December update improved the way an extension is updated. The update is now installed into a new folder with the version suffix.   Can you please verify whether this support addresse the issues with PowerShell/vscode-powershell#27.
5454|@bmustiata I think this is a great scenario for an extension instead of adding a built-in command. You can contribute a command (as generated by the VS Code yo generator) which in return asks for suggestions ([in this spirit](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/test/common/api/extHostApiCommands.test.ts#L248)) and inserts the best of type `snippet`.
5455|Yep, I noticed the new folder layout, that is an improvement!  One question about the new behavior - after you download and unpack the extension into the new version-specific folder, do you attempt to delete the older verson's extension folder?  If so, does it happen before or after VS Code restarts?  The only way we would still have a problem is if VS Code attempts to delete the old extension folder before it restarts because my language server process would still be running at this point.
5456|@daviwil Deletion will only happen after VS Code restarts.
5457|Perfect!  I'll be releasing a new update to my extension in the next week or two, so I'll let you know if I see any issues when attempting an upgrade at that time.  Feel free to close this issue for now, I'm pretty confident that your changes will have fixed it.
5458|@joaomoreno Thanks for your advice.  As you said, it is very probable that my proxy doesn't return the correct bits. I'll try to check the behaviour of my proxy.
5459|"Idea is to have _in addition_ to `showQuickPick` and `showInputBox` something like `createQuickPick():QuickPick` which could return something like this:  ``` interface QuickPick {   show(): void;   hide(): void;   items: Item[]|Thenable<Item[]>   message: string;   onDidSelectItem: Event<Item>   onDidFocusItem: Event<Item>   onDidBlurItem: Event<Item>   onDidChangeInput: Event<string> } ```"
5460|this will be handled by #1795
5461|Interesting!  cc @dfinke
5462|this will be handled by #1795
5463|Looks good. It'd be nice to be able to customize the dropdown too. The `extension install` does with readme and install icons.
5464|I'd love to see this feature happen!  Since the Markdown preview is being used as an example, does this mean we'd be able to return HTML as content and have it be rendered correctly for rich output?  cc @dfinke
5465|@Spown @unhealthy The ways to reuse language functionality are currently very limited. Nunjucks has it's own syntax and the html extension doesn't know what to do with it. The vscode API has the capability to programmatically invoke supports for a given language, but always on a real file resource. We have been discussing if we should add the capability that you can also pass an in-memory buffer, such as you could convert the Nunjucks code to HTML before passing to the html mode, but we haven't come to any conclusions, yet. At this time, for the case of Nunjucks, you have to go the full way, and (re-) implement all the functionality that you need. But at least you have full control, and e.g. don't see any snippets that don't make sense in your context.  In the case of vuejs, that seems to be based on normal html (correct me if I'm wrong, I just read a bit on it), you can participate in the HTML mode by adding additional providers (validation, suggestions, hovers...). You can add additional snippets, but they would be visible to all html files. Alternatively, you could also replace the full mode by your own and programmatically make calls to the HTML extension for things like suggestion, hovers... All that said, we don't have any experience in that yet, so please ping me if you tried this and couldn't get it to work. You might have also seen that the HTML mode is not a proper extension yet. It's legacy code using internal APIs. It's on the plan to bring it to the new APIs and when doing that we will have to find solutions to the embedded languages problem such as css and js in html.
5466|Absolutely nothing! There is not a single line in the console log (I assume that's what you wanted me to check). I tried several times to pul up tasks.... BUT I think I got it!!!  Task-related items DO show up in the palette if you open a folder---any folder. And when you close the folder, task items are no longer shown.  Not sure whether this is a bug or not, but it should be documented.
5467|Unsure what you mean by output, but a goal is to allow others to generate markdown and have it shown/previewed in VS Code
5468|Sorry, the term 'output' was a little vague :)  To rephrase, I'm asking if this would allow a content provider to return arbitrary (within reason) HTML to be rendered.  For example, if I create a mode for editing TODO list files with a special text format, it'd be nice if I could register a content provider that can render some nicely-formatted overview details for the user's TODO items.  Returning Markdown to be rendered could also work but would be less flexible.
5469|"Hmm, I'd keep it ""agnostic"". Make the ""view"" a HTML view so I can send whatever I want, but making it parse Markdown means I'd have to escape if I didn't want the automatic conversion.  Basically - make it a web view and I can send whatever I want.  On Tue, Jan 5, 2016 at 9:25 AM, Johannes Rieken notifications@github.com wrote:  > Unsure what you mean by output, but a goal is to allow others to generate > markdown and have it shown/previewed in VS Code >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/272#issuecomment-169033971.  ##   #   Raymond Camden, Developer Advocate for MobileFirst at IBM  Email : raymondcamden@gmail.com Blog : www.raymondcamden.com Twitter: raymondcamden"
5470|One possibility could be someone editing a CSV file and the VS Code extension would take it as input, render it through d3.js creating a visual and displaying the resulting HTML in the view
5471|@bpasero,  When editor starts it starts in what looks like 800x600. If I resize it to say 1280x762, then do my work and then close the editor, the next time it restarts it should load at 1280x762 and not 800x600. The same goes for fullscreen.
5472|@TheColorRed code keeps the size of the window including maximized state, but not full screen. If you can tell me some steps how to reproduce this, please update this bug.
5473|Please note that I verified that this does not break anything but I did not verify if the `adapterData` gets passed through. Though it should work 😇
5474|+1
5475|Great ideas. I will spin it around with the team. We do have a Markdown_Editor_ and a HTML_Editor_ so it shouldn't be too hard.
5476|Ahh yes you are right, it is just when opening a window `File -> New Window`, then when you close all other windows (first) then reopen code it opens to that small window again.
5477|@TheColorRed yes, if you want to restore multiple windows you can set `window.reopenFolders` to all. I am closing this one.
5478|Sorry but Mac OS 10.8 is not supported anymore.
5479|@Manouchehri my feeling is that we do not support launching VS Code through wayland. We need to investigate more into that but for now only a bare Linux is supported.
5480|"@faludigabor can you run code from the command line with ""--verbose"" and see if any output is printed and attach it here?"
5481|@lucianFXD what linux distro is this?
5482|I'm having a weird problem with tsconfig.json when VSCode is open. If I do a `git checkout someBranch` tsconfig.json sometimes gets deleted or locked and I have to issue a `git reset --hard HEAD` despite having just switched branches. tsconfig.json exists in both branches.  All git commands are issued by commandline (ie: not through VSCode).  I think this is caused by VSCode locking the tsconfig file so git can't overwrite it or something, and it eventually ends up deleted. If VSCode is closed, this doesn't happen. However, no git errors ever occur and I don't notice until my tsc commands fail or I do a `git status`. Pretty fishy.  VSCode 0.10.6, git v2.5.1-windows.1
5483|@bpasero The thing is that it actually works perfectly, it's just that weird error message on startup that has to be closed out.
5484|Just wanted to check on the status of this. We'd really like to close this item out and promote the extension.   Sent from my phone  > On Jan 4, 2016, at 1:04 AM, Johannes Rieken notifications@github.com wrote: >  > @alexandrudima, @bpasero Do we already support some sort of globbing in the filename-to-language mapping? >  > — > Reply to this email directly or view it on GitHub.
5485|@Penryn  its an issue with tsserver, @dbaeumer  already opened a ticket with the typescript team.
5486|Ah, thank you for the update. I understand now.
5487|Help wanted :)
5488|"It seems this is a problem with the Hack font. I noticed when I set the `editor.fontFamily` to ""Consolas"" the white space is rendered correctly and correctly spaced. With ""Hack"", space seems to actually be wider than a fixed-width space (like with ""Consolas"") causing alignments to be off:  ``` javascript // example render with ""Consolas"" var gulp = require(""gulp"")   , gutil = require(""gulp-util"")   ;  // example render with ""Hack"" var gulp = require(""gulp"")     , gutil = require(""gulp-util"")     ; ```  However, I do not see this problem with ""Hack"" in VS, vim, and other editors in which I have it configured."
5489|@bpasero I can save with Sublime 3. But I guess something permissions related did happen because when I save with Sublime 3, I need to input my password. However, I checked the file properties, it's **not** read only.
5490|@HuanhuanSunMSFT this indicates that you are not the owner of the file and currently we do not support entering password during write.
5491|@bpasero that's interesting. How come I'm not the owner of this file? Though it may not be related to VS Code, how could I get into this state and get out of it?
5492|I have no clue but this does not sound like something to discuss in the VSCode issue tracker.
5493|rather StackOverflow :+1:
5494|@dbaeumer please debug this, someone calls clearOutput() and does not give any output, just add some console log statements into the onOutputReceived event: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/browser/outputEditorInput.ts#L57  I suspect that the output is cleared and no new output is appended (= race condition).
5495|It would be nice to extend it for giving genral per language configuration. It was also suggested in F# support repo (as tabs in F# are not allowed by default)
5496|"Error shows up when a change was made to the function while committed to git:  ![bug](https://cloud.githubusercontent.com/assets/11217948/12125194/a0f33d2a-b3af-11e5-88f7-a564063abfc2.PNG)  Error persists when viewing the file not in the git difference view mode:  ![image](https://cloud.githubusercontent.com/assets/11217948/12125211/b696f5f4-b3af-11e5-9e93-590e65d04cd1.png)  The red underlining ""Duplicate function implementation"" warning goes away after the change is committed to git:  ![image](https://cloud.githubusercontent.com/assets/11217948/12125221/c9521354-b3af-11e5-849a-3c1ab212944a.png)  After Change is Committed:  ![image](https://cloud.githubusercontent.com/assets/11217948/12125252/05bc14ac-b3b0-11e5-8e89-a9c36a2a2c74.png)  I'm thinking vscode somehow is taking the git difference version and not recognizing they are the same function and then incorrectly indicating there is a function duplication."
5497|The change doesn't even have to be made within the same function for this to occur, just the same file has to be edited, I just edited the function directly in this example.
5498|@alexandrudima - horizontal scrolling appears to be working now after updating.
5499|I solved this by a simple sudo apt-get install gnome-terminal. It is only 11 mb and the seamless experience is worth it
5500|It allows things like `ionide-webview` https://twitter.com/IonideProject/status/648945352100421632
