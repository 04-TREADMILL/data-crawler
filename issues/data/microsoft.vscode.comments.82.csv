8101|Hi For those who still have this problem, this worked for me https://social.msdn.microsoft.com/Forums/vstudio/en-US/eb6853f3-b710-4be5-8b82-d55fa568e2b9/problem-with-git-on-vs-code?forum=vsarch  Regards
8102|@egamma  I created the screenshot on a Windows 10 machine using VSCode 0.10.6 (stable) and 0.10.7 (insider) with the Dark+ theme. I have currently no access to this machine, so I can't check it but I'm quite sure about this setup.  I made the screenshot below on a Windows 7 machine. The Dark+ theme shows the same here for TypeScript in both version 0.10.6 and 0.10.7.   ![color2_jan16_cas](https://cloud.githubusercontent.com/assets/3448684/12748911/afa33852-c9ad-11e5-8b76-8f322d58265a.png)  With OmniPascal I see the same differences on both machines. I'm not sure whether these changes have come due to API changes or a bug. I did't find anything about API changes with the highlighting engine. Please let me know if there are some.
8103|"I know how to ""effectively use Dropbox with git"", thanks. Your answer sounded a bit condescending at the end there.  Dropbox with Git works fine for me. It works with Visual Studio and it works with Sublime text. The problem here is with VS Code, not my setup.  If this isn't going to be fixed any time soon then that's not a problem, I can just go back to using Sublime text, but I was trying to report a problem to help you guys, I wasn't expecting attitude in return.  Jon"
8104|I have same problem, VS Code is constantly crashing, not only over night, even after 30min of being idle.  I am using Windows 7, 64bit and latest version of VS Code. Regarding project itself it's huge js project, with node_modules and bower_components also loaded. Totally it has around 40K of files.  Steps to reproduce: 1) Open project folder(with lot of files), open several files so they could be in Working Files list.  2) Open task manager. 3) Put cursor to focus some file in VS Code 4) Watch as memory rises during time.  ![code_screenshot_13_55](https://cloud.githubusercontent.com/assets/5306028/12750206/f0f1875c-c9b5-11e5-9015-c90b21a73439.png) ![code_screenshot_14_03](https://cloud.githubusercontent.com/assets/5306028/12750205/f0f0475c-c9b5-11e5-9dbe-6858ab52ab71.png)
8105|Another example: you can see that switching between Windows Explorer and Microsoft Word has no problems, as soon as I switch to vscode, the drawing problems appear. ![vscode_paint_problem](https://cloud.githubusercontent.com/assets/16571328/12749910/cb948a88-c9b3-11e5-8163-edf370115694.gif)
8106|@alexandrudima: You can use the `font-variant-ligatures: common-ligatures;` CSS property instead. It works for me in Chrome with the Hasklig font. See: http://thenewcode.com/547/Make-Your-Web-Pages-More-Legible-With-Ligatures-and-Kerning-Pairs
8107|Thanks, I will give it a try. Sorry for my initial confusion.  From: Benjamin Pasero [mailto:notifications@github.com] Sent: February 02, 2016 3:03 AM To: Microsoft/vscode vscode@noreply.github.com Cc: Chris Amundsen Chris.Amundsen@wtsparadigm.com Subject: Re: [vscode] Poor screen reader support while debugging (#2623)  @amunca15https://github.com/amunca15 we would love to hear back from you how debugging behaves using VS Code since we have invested in accessibility for our next release. You can grab the insiders release with our changes from here: https://code.visualstudio.com/insiders  — Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/2623#issuecomment-178456299.
8108|Chromium handles font symbol selection
8109|I cannot reproduce this anymore in 0.10.7, I did quite some work in the tab/shift-tab handling in the find widget that I think fixed this one.
8110|I don't see this on windows
8111|@zersiax the 0.10.7 insiders build is now available. There is some initial support for screen reading of the editor contents on Windows when using NVDA.  Here is the blog that describes how to get the release: https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/  Here are the relase notes: https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md  We would be much interested in your early feedback.
8112|Can people with JS workspaces seeing this issue give our 0.10.7 insiders release a try (https://vscode-builds.azurewebsites.net/insider) with the option to use Salsa as JS language service: https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#javascript---salsa-preview  Thanks!
8113|"@pmadhur an idea, does it make a difference if you run ""code --disable-gpu"" ?"
8114|VSCode is built on Electron, and the rendering is basically Chromium.  `-webkit-font-smoothing: none;` used to control that, but it doesn't look like it's doing anything for me on windows
8115|@spywhere Thank you for the detailed explanation. Please see #747 that contains a possible workaround with the upcoming 0.10.7 release (enable `editor.fontLigatures`).
8116|Works for me on Windows with English (US) keyboard layout:  ![kb-0](https://cloud.githubusercontent.com/assets/5047891/12751868/da811424-c9bf-11e5-9be9-a9aa6322f302.gif)  @alefragnani Can you please tell me your OS and keyboard layout you had selected when you start VS Code and the VS Code version
8117|"Just did some quick checking. NVDA reas stuff in the code editor. Sometimes it seems NVDA thinks the line you are currently on gets selected after you've arrowed to it, leading to some strange output now and again. It makes some lines repeat with ""selected"" added in front to indicate selection of the entire line. This is false however since typing will not in fact delete the current line, which is good. It does lead to a bit of head-scratching for a f ew seconds though. Overall, good improvements so far :) Keep up the good work."
8118|@sparecycles Such an awesome find, thank you!
8119|Yep, will come out in 0.10.7
8120|"@sanmai-NL We ended up with:  ``` css .monaco-editor.enable-ligatures {     -webkit-font-feature-settings: ""liga"" on, ""calt"" on;     font-feature-settings: ""liga"" on, ""calt"" on; } ```  Let's revisit these and use `font-variant-ligatures: common-ligatures` if any issues pop up."
8121|"@nahaiduk Your crash looks pretty much like an OOM. Does the entire app crash for you or just the extension host or shared process? i.e. Do you see error messages similar to the ones above:  ""Error from the plugin host: write EPIPE"" ""Plugin host terminated unexpectedly. Please restart VSCode to recover"" ""Error from the plugin host: channel closed""  After you observe this error can you please run `ps aux | grep vscode` so we can see which processes are still alive and which ones have crashed."
8122|To verify, trigger a decoration on an input box (e.g. invalid file name in explorer, too many search results in search, git commit without message) and verify the decoration message is read by the screen reader.
8123|Yeah, it would also be pretty hard to implement this given we support zoom in like this:  ![image](https://cloud.githubusercontent.com/assets/5047891/12752215/bc62bca2-c9c1-11e5-8eb9-1691f456f604.png)  So it's ok with me to close :)
8124|@zersiax would also appreciate some feedback for screen reader support in areas outside the editor (views, etc.).
8125|Thanks for doing this btw :+1:
8126|":+1: for something more like ""more"" ;)"
8127|"@bpasero I have tried with ""code --disable-gpu"", it does not make any difference."
8128|Thanks much for trying it out and here are some more questions. We have also added additional support that should improving the screen reading. This is enabled with ALT+F1. Did you discover this support? Does it improve things.  @alexandrudima FYI.
8129|Hi,  No, I was not awareof this functionality and will try it. What I have found with it disabled is the following. Please not I am haphazardly jumping around right now, if you want me to do a systematic check please give me some areas to focus on, code is rather big :+1:  - When bringing up the git view, screenreaders don't report this. When hutning around the accessibility tree, I come across a group labeled simply as ￼   , which holds these git elements. This is a unicode symbol that sometimes is reported as 'note' , but doesn't seem to always work with NVDA. - In search, when there are no results this shows up as text, but I have to go hunt for it. It would be good if this is either popped up or reported via a live region of some kind. The treeview of search results, when it comes up, is accessible and seems to work. It might be good to bring focus to the treeview after a search though. - In the menubar, you cannot use left and right arrow keys to jump between menubar menus. Also, I can't seem to find the menubar in the accessibility tree, so I essentially don't know what menus are there. I do alt+letter now to get to the menus I am guessing are there like file, edit, view etc.  What does the alt+f1 keystroke add?
8130|"en, such as `TypeScript`~~~ I haven't tried any other languages.  Just like this, the workspace:  ``` root(workspace root)   │   ├ route   │  │   │  ├ index.ts   │  ...   ├ util   │  │   │  ├ utilsubdir <-- this   │  │  │   │  │  ├ util1.ts   │  │  ├ util2.ts   │  ├ util3.ts   │ ...   │     ... ```  In `index.ts`, if need to use module `util1`, `util2`, i must   ``` javascript import * as util1 from ""../util/utilsubdir/uitl1.ts""; import * as util2 from ""../util/utilsubdir/uitl2.ts""; ```  In this process, it's easy to get wrong.  > It maybe to write the wrong path `utilSubDir`. It can run smoothly on window, but not in *nux.   > Or I want to rename the directory to `otherutil`. All files that use these module must be modified.  So, if VSCode can support this feature, it will be very easy to resolve by just **press the shortcut key**.   Or show the `import suggession`/`content assist message` when i write code `util1.xxx()`.   Of course, the same as dependencies modules which written in `package.json`."
8131|:+1:
8132|@pmadhur another idea, if you run Code.exe in compatibility mode?
8133|@Wosi I'm currently working on a separate widget implementation for this. :+1:
8134|I don't know the answer in terms of accessibility. It does feel odd that a button can be focusable if it is not visible.  For the specific scenario listed above I think we should consider other ways to deal with command placement when resizing the viewlet. But that is for another bug.
8135|@jon64digital Apologies, I didn't mean to come off condescending.  Don't you see the index and `FETCH_HEAD` files being touched when using `git` from the command line as well? Namely, when running `git status`?  How about when you run `git fetch`? Do those files change? If so, you can disable our automatic `git fetch` calls by changing the setting `git.autofetch` to `false`.
8136|> git view  When you open the git view, we immediately transfer focus into the git commit text area. Would you expect this text area to explain to you that it is for committing the changes you have or even more (how many changes etc.)? Maybe you could give an example what you would expect here  > search view  Good point regarding the search result message that is not being read. I will look into that. I am not sure about moving focus out of the search box, I was assuming that it is not nice to programmatically change focus without user interaction. I do agree though that it would be nice to announce the status of the search operation to the user (progress, results).  > menu bar  Unfortunately the menu bar does not seem to be the native menu bar on Windows. Here we rely on the Electron framework and do not have much control.  > What does the alt+f1 keystroke add?  It brings the editor into accessibility mode, so you want to enable that to test screen reader support within the editor!
8137|:+1:
8138|I am not really able to do this nicely, moving to backlog.
8139|@amunca15 thanks, I suggest you file individual issues once you try. Closing this one.
8140|Git view: Yes, I think that would be good. Right now I was actually thinking I was still in my editor document. search: You are right, often playing ninja with focus isn't considered as a good practice. But I think in this case it actually augments the workflow. You search to get results. It is logical to therefore go to results after doing a search, since ...where else are you going to go?  Alt+f1: Please give me some things that work differently when this is enabled. Without screenreader mode, the editor behaves as I described in an earlier comment. When pressing alt+f1 this toolbar pops up that says I have to press shift+ctrl+r to turn the accessibility support on. Doing that does show me it is toggled on, but i don't really understand what it is supposed to do exactly. I do see something about toggling tab key behavior using ctrl+m, is that what it is supposed to do? That toggle works fine for as far as I can tell.
8141|Ok, turning on screenreader mode seems to get rid of the 'selected' thing I was talking about. Also, the search seems to be visible with its controls greyed out ('unavailable' for screenreaders), not sure why or if that's because of something I did or not. What else should this influence, e.g., do autocomplete suggestions etc. work in this mode as well? Anything else?
8142|I apologize for not providing complete repro instructions, I was hoping there was a simple explanation.  Next time I'll make sure to include full steps.  Do other debug adapters use OutputEvent extensively like mine does?  I'm writing a bunch of output really quickly via OutputEvents, I wonder if that causes it somehow.
8143|@zersiax the difference with Alt+F1 is that we put the entire contents of the file you are editing into the browsers textarea element. We are not doing this typically for performance reasons when the file is very large, that is why we require this explicit action. Doing so, we rely on the browser to provide the related accessibility features for a text area control with text.  I will make a pass over our views and panels to make sure that the text that is being read when switching to these things makes sense in the context where they are.
8144|@zersiax another question I had in mind is how do you explore an application when you start it for the first time without knowing its structure? do you let the screen reader read out the structure of the application? did you try that with Code already?
8145|I should also mention that this was right after an initial install of the PowerShell extension in the Insiders release.  I just started up the Insiders release again and tried to run the PowerShell debugger and the output shows up correctly.  Definitely seems like this is a post-install problem for the extension.
8146|After investigating with @joaomoreno we believe it is a problem with the layout of the tree we use in the repl. This only shows if the horizontal panel is closed (and has never been opened in this vscode seassion) and you start a debugging PS. For some weird reason it only happens for powershell - we believe it might be timing.  We have not yet found a true cause and are still looking for the fix.
8147|@bpasero by compatibility mode do you mean this:  ![image](https://cloud.githubusercontent.com/assets/16571328/12753883/2d3e3e40-c9c9-11e5-80ee-e9da6770d4b0.png)  If yes, I have tried, and the same result.
8148|@bpasero good :) I understand the underlying technologies of Code will make rendering an entire file to a screenreader at once in the current model almost impossible due to performance reasons, so its good you built in this toggle. When users get to this though, we wil need to somehow make them aware the toggle even exists. I now understand the whole 'selected' issue when this mode is off as well, its due to the chunk of code you're working with being rendered almost at runtime to the screenreader which slightly confuses it. This is not a showstopper though. As for how I explore an application, typically I don't. I tend to focus on what I am trying to get done and see what I come across in the mean time. Problem with Code is the Electron framework limitations are slightly preventing me from doing that due to the fact I can't seem to see the menubar's individual menus anymore. This used to work somewhat way, way back when. When I am really looking for something I tend to use NVVDA's object navigation feature which relies on the accessibility tree that UIA or some other framework provides. Usually this gets me places faster than the individual keyboard shortcuts of an app if they don't exist or aren't implemented properly.
8149|This is also not supported in 0.10.7 with Salsa enabled. Moving to Salsa for comment.
8150|This issue was moved to Microsoft/TypeScript#6839
8151|@egamma fyi, fixed in master.
8152|:+1:  Also seeing that on Mac.
8153|Thanks @alexandrudima; I use that rule with the [Stylish plugin](https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=en). Do you where I can set that setting on VSCode?
8154|Yeah I meant that. If you run a bare Electron app (download from https://github.com/atom/electron/releases/download/v0.35.6/electron-v0.35.6-win32-ia32.zip and doubleclick on Electron.exe), does it also repro?
8155|@zersiax when you move focus into the editor, we give the screen reader a message that indicates you can press Alt+F1 to enable this mode, maybe this message was no clear enough or not read to you at all?  I will file a bug for the Menu issue on Electron and link it back here: https://github.com/atom/electron/issues/4330  > NVVDA's object navigation feature > How do you trigger that? I have NVDA installed too. Would like to see what it reports for Code.
8156|"@eljamaki01 the first issue is not a VS Code issue but the expected behaviour of the fork operation: the forked process cannot listen on the same port.  The second issue I do not fully understand: you fork the node process in debug mode listening on port 5859. Then I assume you try to attach from VS Code by using an 'attach' launch config for port 5859.  I do not understand why you are ""launching node"" and in what way ""it"" (node?) errors out. You probably mean vscode? Some more details of how the ""errors out"" looks like would help. Thanks."
8157|Hi,  Best to check the manual for object navigation, theres a clear section about it there. As for the hotkey, no I wasn't informed this hotkey existed when opening the program. Should I have been? :)
8158|As a user, the expectation is that these values change when I change them in the console.  Visual Studio does this - it will update the watch, floating data tips, etc. when changing values during break mode. This is the experience we are striving for.
8159|This is a valid feature request but it will cause the variables pane and watch pane to flicker every time you evaluate something in the console
8160|@zersiax we set the following aria-label to the editor and would expect a screen reader to read it once you focus the editor:  Text file editor.Press Alt+F1 for more info.
8161|I guess I don't know why there is no flicker on step.  I suggest then that we fix the flicker to make the desired experience great!
8162|Hi João,  I will try both of those when I am next using my laptop.   However, I don't think that is my problem. I suspect that those files will change when I use git from the command line, but I expect things to change when using git.  My problem is that this doesn't just happen when using git inside of VS Code, it happens all the time that VS Code is running, even when I am not touching the computer. I can sit back in my chair and watch it updating every few seconds without interacting with it. So VS Code is doing something in the background constantly that other code editors don't do which is touching the git Index and Fetch_head files.  I can't just un-sync these files from dropbox unfortunately, otherwise I assume the git repository would be out of sync between my laptop and work PC.
8163|You are right, because we preserve the tree element ids the flicker might not be big. Worth experimenting with, so on each evaluate from the repl I would refresh all the variables and all the watch expressions
8164|This must be an extension that adds that validation error. Do you have for example the JSLint extension installed?
8165|I tested with a clean repo, and it works. Also so for no one else has seen that error. Strange.
8166|In 0.10.6 the default was the Dark theme that looks like the 0.10.7 Dark (Visual Studio). So for existing workspaces there's no change happening regarding to colors, except that the theme name has been updated. I think that's the expected behavior. We don't want to automatically add more colors again.
8167|"Ok, here is a small sample you can repro it with. Place a breakpoint on line 13 in server.js. Note, if you comment out in the app_FORK.js file both process.send() calls it will break in server.js. Try this - only comment out the first process.send(). You can break, until the timer goes off and then it will no longer break. Obviously, to try out, you open a browser to ""http://localhost:3000/"". You also need to do an npm install in that directory to first get express installed. Here are the files.  // server.js var express = require('express'); var cp = require('child_process'); var app = express();  var node2 = cp.fork('./app_FORK.js', [], { execArgv: ['--debug=5859'] });  node2.on('message', function (m) {     console.log('PARENT got message:', m); }); node2.send({ hello: 'Forked world' });  app.get('/', function (req, res) {   console.log('Send message on get request');   res.send('Hello VS Code!'); });  app.set('port', process.env.PORT || 3000);  var server = app.listen(app.get('port'), function () {     console.log('Express server listening on port ' + server.address().port); });  // app_FORK.js process.send({ msg: 'FORK_RUNNING' });  var backgroundWorker = setInterval(function () {     console.log('Do some work');     process.send({ msg: 'Did the work' }); }, 1 \* 60 \* 1000);  // package.json {   ""name"": ""NewsWatcher"",   ""version"": ""0.0.0"",   ""description"": ""NewsWatcher"",   ""main"": ""server.js"",   ""author"": {     ""name"": ""yourname"",     ""email"": """"   },   ""scripts"": {     ""start"": ""node server.js""   },   ""dependencies"": {     ""express"": ""^4.13.4""   } }"
8168|+1 please allow splitting into rows
8169|:+1:
8170|Awesome, I was going to open a pull request in Microsoft/vscode-generator-code but I saw it is already included in Microsoft/vscode-generator-code@eb57110b2526f059703389021647b109a5978414  Thanks for the update
8171|"@SetTrend Thanks for providing the sample repository. I tried this with VS Code 0.10.6 on Windows 10 and I don't see a VS Code problem here.  The debugger stops in the *.js file because the source map does not have a mapping for the first line (""use strict""). If you perform one step, the debugger will hit the first line in the TypeScript file just fine. The VS Code strategy for dealing with missing mappings is to show the ""truth"" (i.e. the *.js file) and not ""invent"" a bogus location in the TypeScript source.  BTW, this source map visualisation shows the missing mapping:  [visualisation](http://sokra.github.io/source-map-visualization/#base64,InVzZSBzdHJpY3QiOwp2YXIgZnMgPSByZXF1aXJlKCJmcyIpOwpmdW5jdGlvbiBUZXN0U3RyZWFtKHBhdGgpIHsKICAgIGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCwgeyBlbmNvZGluZzogInV0ZjgiIH0pLm9uKCJyZWFkYWJsZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJlYWQoMSkpOwogICAgfSk7Cn0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKZXhwb3J0cy5kZWZhdWx0ID0gVGVzdFN0cmVhbTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRlc3RTdHJlYW0uanMubWFwCg==,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRlc3RTdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QixvQkFBbUMsSUFBWTtJQUU5QyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtRQUU1RCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFORDs0QkFNQyxDQUFBIiwiZmlsZSI6IlRlc3RTdHJlYW0uanMiLCJzb3VyY2VSb290IjoiLi4vc3JjLyJ9,Ly8vIDxyZWZlcmVuY2UgcGF0aD0iLi4vaGVhZGVycy9ub2RlL25vZGUuZC50cyIgLz4KY29uc3QgZnMgPSByZXF1aXJlKCJmcyIpOwoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGVzdFN0cmVhbShwYXRoOiBzdHJpbmcpCnsKCWZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCwge2VuY29kaW5nOiAidXRmOCJ9KS5vbigicmVhZGFibGUiLCBmdW5jdGlvbiAoKQoJewoJCWNvbnNvbGUubG9nKHRoaXMucmVhZCgxKSk7Cgl9KTsKfQ==)"
8172|Thanks.  Consider this closed.  Much appreciated.
8173|Thanks David for the great catch.  Ok, that was a fun day! The underlying issue was that the powershell adapter sends the first output event very early, earlier then we have measured the width of characters (we measure to support word wrap). Because we did not have the characters measured properly the first tree element was thinking he was super big and was not allowing the rest to be shown. If you would first open the repl we would nicely measure, so powershill triggering it was due to timing.  I will cherry-pick this on top of our stable branch  Giving to Andre to verify
8174|I have downloaded the app from the link you provided and it has the same problem as with vscode. Another thing I observed is that if I change my windows theme from Windows 7 Basic to Windows Classic, the problem does not appear.  ![image](https://cloud.githubusercontent.com/assets/16571328/12758244/f9901dee-c9db-11e5-8121-d8e78f17cc0b.png)
8175|Then this is nothing VSCode can fix, I suggest you move this issue over to Electron on GitHub.
8176|Ok. I have no idea what Electron is all about. So I guess I cannot use vscode. Just for your info, I had tried vscode on different Windows 7 machines and all of them have the same problem. Thanks.
8177|"Hi,  Best to check the manual for object navigation, theres a clear section about it there. As for the hotkey, no I wasn't informed this hotkey existed when opening the program. Should I have been? :) Now you mention it, yes, that is read out. However, more info may be a little too generic in this case. How about ""press alt+f1 if you are using a screenreader"". Since ARIA-labels only communicate with screenreaders, that way it is both clearer what you mean and not a hindrance to others who aren't using a screenreader. 'more info'  could be all sorts of things, from a help page to some kind of status message. I think that confused me as well :)"
8178|@eljamaki01 thanks a lot for the sample. I believe that I understand your problem now.  Probably your expectation is that a single VS Code can debug both processes. But this is not yet the case (see https://github.com/Microsoft/vscode/issues/865). VS Code can only attach to a single node process. But you can create multiple VS Code windows and each can have its own debugger session connecting to another node process.  The current problem is: VS Code does not allow you to open the same project folder twice. So in your case you have two process but their code is living in a single folder.  I could work around this limitation by creating a sub-folder 'worker' and moving the app_FORK.js file into it (and changing the path in server.js accordingly). Then I created another VS Code window and opened the 'worker' folder with it. Then I created an 'attach' launch config and changed the port to 5859.  After launching the server.js in the first window and continuing over the 'fork' I attached the second debugger to the forked node process. With this setup I was able to debug two processes simultaneously:  ![2016-02-02 18-59-42](https://cloud.githubusercontent.com/assets/1898161/12759160/f785fe98-c9df-11e5-9bc3-e8ed04fb8b62.png)
8179|Awesome, thanks a lot for the quick fix!  I love the new REPL improvements so far.  PowerShell folks are going to love the horizontally-docked window :)
8180|That is cool that you can attach to the second process. But, tell me if you can break on line 13 of the first process! I cannot, even after making your change.
8181|Glad to hear 😊 We are still discussing the horizontal UI so if you hear from users and get a chance please send a mail with feedback on what users like / do not like. We are also interested if the vertical console will be missed.
8182|And just to reiterate, if I comment out the process.send() lines in the app_FORK.js file, I can break on line 13!
8183|The usage script currently advertises the executable name as code on non-Windows platforms. This is not the case currently as there is no file in the path when installed on darwin or linux, this should be the case once a proper launch script is created.  @bpasero Are there any command line args I'm missing? @chrisdias any concerns bringing in an [MIT-licensed](https://github.com/bcoe/yargs/blob/master/LICENSE) dep?
8184|+1.  I don't have Administrator access on my machine and I don't understand why I would need it in order to install a text editor.  Please support the ability to install Code without requiring elevated permissions.  I'm not sure if this request matches the original description of this issue, but it matches the current title...
8185|If you build VS Code from source then the product is configured without some features like the extensins gallery. Pls see this comment for more background on this https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005  If you install the published Insider version then the command is there. Pls see https://blogs.msdn.microsoft.com/vscode/2016/02/01/introducing-insiders-builds/
8186|@aeschli please check the release notes whether this is clearly explained in there.
8187|duplicate of #1673
8188|My apologies.  I did make an effort to do a search, but I did not find #1673.  Thanks for the heads-up.
8189|no problem at all.
8190|good catch, moving to vscode-docs
8191|This issue was moved to Microsoft/TypeScript#6849
8192|It's working on 0.10.7-insider
8193|@weinand :  Thank you very much for taking the time to shed light on my problem and solving it! :clap: :smile:
8194|I'm glad that I was able to shed some light on this (and that I do not have to fix a bug here 😎)
8195|:smile_cat:   Well, if I may still add a humble wish:  I now am aware of this behaviour. But other users may not be. And I may be confused myself again when the mapped source won't be displayed after stepping over a number of lines (which is a use case that may occur).  If I'm not wrong then it is still not possible to distinguish between an incorrect mapping file / mapping source file location and a situation when a mapping is not available for a certain code point.  I believe it would be helpful if there was some minor visual cue provided by Code (e.g. a short message in the status bar) when hitting such break point, informing the user that everything in regard to mapping file locations is alright, there's just no mapping for the current position and the original source is used for the current breakpoint. E.g. `No mapping in mapped source for code at breakpoint. Using original source.`
8196|**@xaverh**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
8197|Valid request, but this will require a protocol addition and we will have to spend some design cycles on this... We could piggyback this info on the Stopped event and show it either in the stack:  ![2016-02-02 22-54-02](https://cloud.githubusercontent.com/assets/1898161/12765713/40fe5e24-ca00-11e5-86d2-c3dfc43396cb.png)  or in the editor header:  ![2016-02-02 22-55-46](https://cloud.githubusercontent.com/assets/1898161/12765723/4a1148fa-ca00-11e5-9a41-e71056b612e6.png)  @isidorn what do you think?
8198|Alright, let's fix that then! :+1:
8199|@isidorn good job :+1:
8200|Excellent news. @takuan-osho @JFLavidalle @vilinski, maybe you guys can let us know if the issue's fixed for you as well?
