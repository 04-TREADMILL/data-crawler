8701|One interesting thing I learned about Windows recently is that the way to make a file not have an extension using Windows Explorer it to rename the file to `foo.`. Might have something to do with it.
8702|Can someone speak on this? I attempted to make some commits while at work today (on a PC) and was getting hygiene errors regarding copyright header and bad EOL, but the same commit worked fine on my Mac.
8703|#VisualCodeFolding
8704|I cannot wait for code folding. I have been working heavily in VS Code over the past month and with large source files it is so helpful to collapse code to make it more readable.
8705|``` @Component({   selector: 'tabs',   templateUrl: 'dev/template.html' }) ```  And write the your html code in dev/template.html
8706|It's easy to generate JSON Schema off of a JSON structure. I've written a little module for this:  https://github.com/mohsen1/json-to-json-schema
8707|"It's already there: `""json.schemas""` array in the settings. I couldn't get it working with inline schemas though, any tips?"
8708|I'm eager to implement this. Can you point me to where can I start?
8709|"I see this as future solution to the extensions issue: https://github.com/Microsoft/vscode/issues/637  However, while I understand its ""as designed"", I really see no good reason why it is really designed that way. Is there a reason why the command window has to be closed when the window loses focus?   I see this as something that seems to be inherited from Atom. The ""ext install"" is just one scenario that highlights this problem. But often switching between windows, and losing the command window is extremely frustrating. Just changing this design decision will not just enable the multi-taskers to work with ease, but also provide a temporary mitigation to the ""ext install"" problem until the new UI is designed (which I surmise will take quite a while looking at the state of things).  Could this be reconsidered?"
8710|This also no longer works for the latest vscode. Just updated
8711|I suggest that we do this in two steps.   First, we should make the Stop button switch back to the Explorer view, which is consistent with how Visual Studio works (our gold standard).   ![image](https://cloud.githubusercontent.com/assets/1487073/12907529/69c7f5a4-cea1-11e5-9c0c-a12ca8626a91.png)  Given this is the expected behavior (see top of this issue) we would be improving the E2E experience for many (most) developers. We can measure the effectiveness of this by measuring how many people click on the debug viewlet right after clicking on the stop button.    Step 2 would be to introduce this a new stop mode using an A/B test so we can measure how many times people click the new stop action as compared to the control group that does not have the new action. We can also measure how many people bring up the explorer view or debug view after.  fyi @waderyan
8712|:+1:
8713|@chrisdias fyi
8714|Just pending process for `yargs` at this point.
8715|"@jedmao you need to run a ""npm install"" after those changes so that the vscode.d.ts is fetched. The location of this file actually did not change, it should still be within node_modules/vscode/vscode.d.ts"
8716|That is very normal glob pattern behavior, \* is for one character, *\* for any.
8717|:+1:
8718|I would prefer a solution where we eventually update to a V8 version where these features are supported without flags. It would make our life much harder to track down bugs that are caused because of features behind feature flags imho. Also, is the debugger fit to support these features?
8719|@gwynjudd I assume you got the crash dialog and now with 0.10.8 out were able to reopen the window?
8720|@ankitsud were you installing the Insiders build by chance?
8721|https://github.com/Microsoft/vscode/issues/444
8722|I had just used the standard install from a bing search.  From: Chris Dias [mailto:notifications@github.com] Sent: Monday, February 8, 2016 10:15 PM To: Microsoft/vscode vscode@noreply.github.com Cc: Ankit Sud Ankit.Sud@microsoft.com Subject: Re: [vscode] Page after installation is a 404 not found (#2804)  @ankitsudhttps://github.com/ankitsud were you installing the Insiders build by chance?  â€” Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/2804#issuecomment-181726308.
8723|"@bpasero one step ahead of you. Not only did I run `npm install` after those steps, but after it wasn't working, I did `npm uninstall vscode` and then `npm install` again, just to make sure. There is no file at `node_modules/vscode/vscode.d.ts`, even though `node_modules/vscode/package.json` has within it:  ``` json   ""typings"": ""vscode.d.ts"", ```  The closest thing I could find was a file at `node_modules/vscode/typings/index.d.ts`, but I don't think that's what I want."
8724|@bpasero I also did an `npm cache clean` just now, deleted my `node_modules` folder and did a fresh `npm install`. Same issue.  @alexandrudima, do you know more about this? I'm looking at https://github.com/Microsoft/vscode-editorconfig/blob/master/typings/vscode-typings.d.ts with your name on it.
8725|ok, thanks @ankitsud.  I cannot repro this on Windows with Insiders or Jan 2016 stable release.  What operating system are you on?  Is the browser still open with the URL that returned the 404? If so, can you reply with the URL? If not, you can clean out your local storage and run the tool again to force the URL.  **Windows** - Exit Code completely - from a command prompt:  ``` cd %appdata% rmdir /q /s Code ``` - Run Code again, note the URL in the browser  *\* OSX ** - Exit Code completely (CMD+Q) - from the terminal:  ``` bash cd ~/Library/Application\ Support rm -rf Code ``` - Run Visual Studio Code.app gain, note the URL  Thank you for helping us figure this out.
8726|Oh, ok. This is different from Atom behavior. Hence my confusion.
8727|To be more specific: \* matches one or more characters in a path segment, and *\* spans multiple path segments.
8728|@Code-DJ this is the next step. What I mean by an 'SCM provider API' is an API that avoids that you end up with a git viewlet, a TFS viewlet, a mercurial viewlet, etc. The provider API abstracts a bit from the underlying SCM so that you can build some common UI on top of it.
8729|These are my findings. Please let me know if I'm wrong :).  So internally VS Code has some decision check wether it should recalculate the settings for a file in the text editor. Based on some debugging, it looks like the decision looks like this. - Is the options object still referring to the initial options object?     -> YES: No plugin changed the settings so recalculate them based on the user settings     -> NO: Do nothing as someone altered the object  Because when I only change one value `textEditor.options.insertSpaces = true`, it still takes my global VS Code settings because (in my opinion) the `options` object is still referring to the initial options object and thus is not changed.  This is how this issue can be resolved. Values passed in as `undefined` should be calculated by VS Code (based upon the user settings).  ``` js textEditor.options = {     insertSpaces: true,     tabSize: undefined };  // OR  textEditor.options = {     insertSpaces: true }; ```  If my global `tabSize` settings is set to `auto`, VS Code will determine the tab size for me based on the current file being opened. Same goes for `insertSpaces`.
8730|Got it. In Atom, `subdir` is sufficient to exlude any path or file with that string in it. `subdir/` to specify directory.
8731|+1
8732|@bpasero yes I got the new crash dialog and could restart  ##   Gwyn Judd  -------- Original message -------- From: Benjamin Pasero Date:02/09/2016 19:13 (GMT+12:00) To: Microsoft/vscode Cc: Gwyn Judd Subject: Re: [vscode] Crash when running overnight (#508)  @gwynjuddhttps://github.com/gwynjudd I assume you got the crash dialog and now with 0.10.8 out were able to reopen the window?  ##   Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/issues/508#issuecomment-181726111.
8733|fyi @bpasero @joaomoreno
8734|Ok, I see :) It was just an idea.
8735|Moved to OmniSharp/omnisharp-vscode
8736|Moved to omnisharp/omnisharp-vscode
8737|Moved to microsoft/typescript#6976
8738|Moved to microsoft/typescript#6977
8739|@larskris Thanks for your comment. I've already taken this into consideration.   But I have been using it in that way, indeed getting the html code support, but I feel that when a template isn't bigger than 20-30 lines, it's less time consuming to switch between the files and leave it in one file. This also adds to better reasoning about it.
8740|:+1:
8741|@aeschli This seems to be solved by 0.10.8
8742|This would only work if the GDB debug adapter would support [evalute on hover](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts#L489), and if it supported evalution while not stopped (might support this already) Also I would need to add a very small change on the vscode side, but the adapter would need to support this first. Thus forwarding this to @weinand
8743|@bpasero just to remind you about this
8744|@isidorn Evaluation through a Watch is supported while not stopped. At least for [Debug](https://github.com/WebFreak001/code-debug). I have created a ticket (https://github.com/WebFreak001/code-debug/issues/10) to support evaluation on hover.
8745|@isidorn I do not see this in light theme but in dark + theme. Also it seems a lot less flashing now.   ![hover](https://cloud.githubusercontent.com/assets/900690/12912084/b23ba1bc-cf16-11e5-922d-ed1d452006c6.gif)
8746|Also the hover seems a bit hectic to me.
8747|Unfortunately, as designed. This is due to the `runcode` task. We need to define it in Inno Setup so we can control it from the outside, namely when calling the setup during an update.
8748|@alexandrudima fyi
8749|This is OK, we even leverage this as the update mechanism.  The setup does detect the active installation. If you choose to install it in some other folder than the default one, for example, it will correctly overwrite the files in that folder when reinstalling.
8750|@joaomoreno : I can confirm that the issue is fixed for me on release 0.10.7-insider. Great news !
8751|Sure, let's tackle this.
8752|@bpasero Any chance we can move Code to the front?
8753|How is your _stuff_ configured? Do you have some special startup scripts?
8754|Seems to be a duplicate of #2774
8755|:+1:
8756|OK, got confirmation from 2 people that it is fixed, so closing this. Thanks!
8757|@andreiropotica can you share a video or screen shots of what is going on?
8758|Hi **@jamesqo**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
8759|Reopening, using the window.show() workaround causes issues as it will undock windows it seems.
8760|"@csholmq @isidorn I don't think that this request makes sense.  Imagine this: the multi-threaded program is running and the user hovers over a variable `i` which makes VS Code send an `evaluate ""i""` to the debug adapter. How should the debug adapter figure out what ""i"" the user is hovering over and then how should the adapter determine from what thread it should get the value for ""i"". For the first problem the debug adapter would have to know the source location of the ""i"" so that it could get the scope information of it. The second problem shows why this request doesn't make sense: thousands of ""i"" could be active in different threads, in deep stacks resulting from recursive code. What ""i"" should evaluate return?  I'm one of the original authors of Eclipse and the Java debugger, but I have to admit that I'm not aware of the fact that ""the Eclipse hover polls variables between breakpoints"". What debug plugin are you referring to?"
8761|@gwynjudd is this a JS only workspace or other file types like PHP included?
8762|The plugin [Sync Settings for Atom](https://github.com/Hackafe/atom-sync-settings) uses GitHub Gist to backup/sync: - Settings - Packages - Keymap - _(Styles)_ - _(Init)_ - Snippets   Atom also supports [starring packages](http://blog.atom.io/2014/06/09/stars.html) directly in Github and then easily install them using `apm stars --user thedaniel --install`.
8763|"I can see how this is not really a bug, but I also think there is something here that is a bit more than a simple feature request because the conflict seems to be with some built in OSX functionality.  I wanted to clarify a couple of things in case there has been a bit of misunderstanding  @isidorn I am using features built in to OSX: A system-wide keyboard shortcut (set through a built in OSX mechanism) that invokes an OSX System Service (append selected text to a specific file). The system-wide keyboard shortcut actually does invoke the system service correctly everywhere in the OS.  It works correctly on selected text in Chrome.  It works correctly on selected text in Sublime Text.  It works in every program I use, except for VSCode.    @alexandrudima  I'm not sure what you mean by ""external tool"", and so I apologize for any confusion.  As I mention above, the issue I'm having is with VSCode not recognizing  system-wide shortcuts, set through a built in OSX mechanism.  I've tried multiple key combos, and none of them work properly in VSCode, even thought they work everywhere else across the OS.  I don't think that the issue is the System Service itself not finding any selected text, because if I actually do use an external tool (instead of the system keyboard shortcut) to invoke the target service, it works perfectly---selected text in VSCode is recognized and appended to the desired file.  In other words, the actual system service can identify and can work with selected text in VSCode.  The problem is that VSCode does not appear to be registering the system-wide keyboard shortcut in OSX that normally invokes the service in every other program.  I have searched the VSCode key-binding file, and used several shortcuts that I could't find there ( e.g. `ctrl+cmd+H`), and none of them allow me to invoke the system service in VSCode, even though they work in every other program. It's possible that I'm still using a key-binding that conflicts with VSCode, but I don't know how else to confirm that.  I have upgraded to 0.10.8 and the issue still persists."
8764|@jedmao there was a bug that prevented the vscode.d.ts file to be installed. When you run npm install please verify you see output like this:  ``` Detected VS Code engine version: ^0.10.6 Found minimal version that qualifies engine range: 0.10.6 Fetching vscode.d.ts from: https://raw.githubusercontent.com/Microsoft/vscode/0.10.6/src/vs/vscode.d.ts vscode.d.ts successfully installed! ```
8765|@joaomoreno that is entirely up to Windows to decide. I believe this is https://github.com/Microsoft/vscode/issues/929
8766|Looks like this is https://github.com/atom/electron/issues/4349
8767|With TextMate grammars you can also inject syntax coloring rules. (http://blog.macromates.com/2012/injection-grammars-project-variables/). We can already process injection grammars. What's missing is a way to contribute an injection grammar for a set of languages from an extension.  Would you be interested in expressing your coloring rules as Text mate inject rules?
8768|duplicate of #670
8769|Agreed, this would of course only make sense on global variables. My colleague has written a GDB bridge for our embedded development and then uses a GDB plugin to poll global variables using hover (I'll double check which plugin).  As I'm an embedded developer working mainly with C, a simple `p Module_Variable` is what I'm looking to send. Then it's up to the debugger (in this case GDB) to lookup the memory address and return me the results.  This might only be valid for a structural language such as C.
8770|@TheColorRed Thanks for reporting this. Can you paste the code snippet as well, to speed up the instigations?
8771|This is an ongoing discussion with the TypeScript grammar team: https://github.com/Microsoft/TypeScript-TmLanguage/issues/37 `keyword.operator` there is used for keywords as well as operators `===`. My suggestion would be to only use `keyword.operator` for operators like `===`, but nor for keywords like `new`.  Let me know if you think this makes sense. Do you happen to have any insight in what Text mate grammars typically do?
8772|duplicate of https://github.com/Microsoft/TypeScript-TmLanguage/issues/38
8773|"@csholmq I suggest that you file a feature request ""Make debug hover extensible"" and then explain your exact use case (just copy your previous comment). Currently the VS Code debugger is only extensible in the back end (debug adapters) but we are planning to open up the front-end too."
8774|"Settings:  ``` ""git.enabled"": true,     ""git.path"": ""C:\\Program Files\\Git\\git-bash.exe"",     ""git.autofetch"": false, ```  Print screen 1: ![untitled](https://cloud.githubusercontent.com/assets/11310468/12913451/758ae550-cf27-11e5-887e-50effbde2cd1.png)  Print screen 2: ![untitled](https://cloud.githubusercontent.com/assets/11310468/12913710/045cd6fc-cf29-11e5-967f-0e4561c1d3d0.png)  Multiple windows open, this is one of them.  Steps: - Open one project with VS code. - Open new VS Code - Open recent folder (project that is sync with git repo) - Multiple windows open and close rapidly."
8775|Solve by updating...
8776|I do agree with you on `new` and `default` (when used in `default(T)` etc.) But I still believe that in languages such as VB that have `And`, `Or` etc. it would be better to use a separate color. Each operator should be treated the same across languages to aid people moving between languages on a continual basis.
8777|Any updates on that? The blurriness is really annoying!  _(notice the blur-effect on two different documents)_ ![image](https://cloud.githubusercontent.com/assets/462013/12913582/ea58154a-cf1f-11e5-9825-9c16337c14c2.png)
8778|@csholmq just curious you use Code primary for C/C++ development?
8779|We can only solve this by updating Electron to a newer version but currently are blocked because of a native node crash.
8780|@joaomoreno please check, do we spawn git and that opens a git terminal?
8781|For reference, he is talking about https://github.com/atom/electron/issues/4299
8782|@egamma Correct. Mostly embedded. Been using VS for one C# project but not overly fond of it. Might try to use Code on that project eventually.
8783|confirm working with stable and insiders builds. Finally can install extensions
8784|Was just about to post the same thing for php variable highlighting on Dark (Visual Studio) theme. It worked with the previous version.
8785|Are you using TypeScript, JavaScript, JavaScript with Salsa?
8786|You basically have to implement an extension that adds a validation support for YAML. In there you can implement the validation logic yourself, as JSON does it, or delegate to another executable. If you implement the validation logic yourself in TypeScript/JavaScipt, you'd do that as a  [language server](https://code.visualstudio.com/docs/extensions/example-language-server). A language server performs the validation in it's own process.   To see that in action, have a look at the JSON extension at (https://github.com/Microsoft/vscode/tree/master/extensions/json). To try it out: - open a VSCode window on the `extensions/json` folder, also run `npm install` in that folder, press the 'run' button in the debug viewlet - a new VSCode window opens, where you can open a JSON file and [associate a schema to it](https://code.visualstudio.com/docs/languages/json#_json-schemas-settings) - to debug the validation code, additionally open a VSCode window on the 'server' folder, and use the 'attach' option in the debug viewlet. - Check out the jsonParser.ts code that creates an AST out of the JSON document and contains the 'validate' functions that verify a node against the JSON schema.
8787|Same issue seems to hapen on each file save... it's getting pretty anoying... I've disabled the git integration.
8788|@andreiropotica `git.path` should be set to `git.exe`, not `git-bash.exe`.
8789|This issue was moved to Microsoft/TypeScript-TmLanguage#79
8790|Users can make these associations in the [settings](https://code.visualstudio.com/docs/languages/json#_json-schemas-settings).  Extensions can do it with the [jsonValidation contribution point](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesjsonvalidation)  @mohsen1 Not sure what you try to do with inline schemas. Can you file a separate issue with an example?
8791|Worked, thank you!
8792|"Wanted to try and reproduce the problem here just for fun, so I uninstalled vscode from one of my existing, and perfectly functioning extensions, then followed the instructions listed on that page and updated the `devDependencies` of its `package.json` file to `^0.11.1`. After running `npm install` however, the `vscode.d.ts` file was still no where to be found...  So I ran `node ./node_modules/vscode/bin/install` manually an got: `Error installing vscode.d.ts: Missing VSCode engine declaration in package.json.`  Looked at the install script, figured that NPM package vars weren't set for some reason, then added this script to my package.json: `""pkgvars"": ""node ./node_modules/vscode/bin/install""`  Using `npm run pkgvars` resulted in a successful download. _shrug_"
8793|Thank you for quick response. I am trying to use HTML with JavaScript. Just simple.  Kind regards Anton  On Tue, Feb 9, 2016 at 9:48 PM, Erich Gamma notifications@github.com wrote:  > Are you using TypeScript, JavaScript, JavaScript with Salsa? >  > â€” > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/2834#issuecomment-181811875.
8794|The experience is bad without some progress indication, filed #2835
8795|I don't agree that `stop` should implicate going back to the Explorer. A similar situation is committing from the git viewlet. I don't expect Code to send me back to the Explorer then, even when its clear that is a transition from _reviewing mode_ to _development mode_.  I think about automatic viewlet switching when there is _something new to show_. For example, the debug viewlet comes up only when it has something new to show. Opening the Explorer without that reason doesn't seem logical to me.  This is clearly an opportunity for a setting, but I would keep the current behaviour as the default.
8796|(1.) By design, the Dark (Visual Studio) theme only has a very few colors. I fixed that and had to remove the color for variable. If you like the color, use the new Dark+ default theme.  Code assist seems to work from me. I used this example  ``` php <?php  public function demo{     $variable1 = 9;     $variableB->C = 9;     assert($variable11); } > ```  (2.) You are right, I have to investigate (3.) This got fixed for February
8797|Agree, `And` and `Or` should use the same color as `===`. In our themes that would be the regular background color, but other themes could have it colored.
8798|"@danielschmitz From your example, only the first taskName runs when I press Ctrl+Shift+B. I don't get presented with a list as in your screenshot.   `task` does however present me with that list and both my options runs.  ``` {     ""version"": ""0.1.0"",     ""command"": ""cmd"",      ""isShellCommand"": true,     ""showOutput"": ""silent"",     ""args"": [""/C""],      ""tasks"": [         {         ""taskName"": ""Build CustApp"",         ""suppressTaskName"": true,         ""isBuildCommand"": true,         ""args"": [""${cwd}/Sw/A_XMC/make_all.bat""]         },         {         ""taskName"": ""GTAGS"",         ""suppressTaskName"": true,         ""isBuildCommand"": true,         ""args"": [""gtags""]         }     ] } ```"
8799|Is this sufficient to close the issue? https://github.com/Microsoft/vscode/wiki/Previous-Releases
8800|Oh, I see my confusion. I was thinking of the behavior of `workbench.action.tasks.runTask` which actually prompts a list of **all** tasks.  Though I still stand by my first post, since I feel this should be the behavior even for `workbench.action.tasks.build`. That if there a multiple build tasks available, user should be prompted by a list.  This goes for `workbench.action.tasks.test` as well.
