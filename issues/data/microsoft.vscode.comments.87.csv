8601|Good points.  As for the UI, I was thinking something like what you get when you try to rename a file to `/` in the explorer. I would't use the red color but something smoother, that doesn't sound such a big alarm. I would also put it behind an enablement setting.  I would like to stay away from automatic wrapping, since it might not do what the user intends to do. Also, we'd have to make it work for non-latin languages too: Arabic, Japanese, Chinese, etc. Not a trivial task.  There's a double edge sword in automatic wrapping: turning it on by default would be transparent to the user and, if the outcome is not desirable, he will only detect that when it's too late, probably when the commit was pushed to his server. If we set it off by default, we risk that no one will find and/or use it.  What do you think?
8602|+1 For automatic notifications (รก la Atom).
8603|This turns out to only happen on some cases and not all. Randomly also.
8604|Thanks @egamma. I'd already written my own stripComments function, although it's far less elegant than yours as it doesn't use a regexp.
8605|#1228 it is not implemented yet as far as I know
8606|"Here are my 2 cents on the handling of Markdown files in Visual Studio Code.  I think that the main use case for opening a Markdown file is _reading_ it. Not only for developers who consume the documentation of tools and libraries, but also for people like me whose job involves _writing_ lots of documentation. I don't have definitive numbers, but I'm pretty sure I _read_ (or at least scan) many more Markdown files than I _edit_ on a given day. That's why I think that the current situation is a bit cumbersome: - When I open a Markdown file, it is displayed as plain text / source - If I want to read it with as little distraction as possible, I press `ctrl+shift+v`. - But when I see something I'd like to edit, pressing `ctrl+k v` doesn't work. I _first_ have to switch back to the text editor (`ctrl+shift+v`), _then_ enter the split view (`ctrl+shift+v`). - Regardless of whether I choose the better reading experience or (if I expect an edit) the better editing experience, I _always_ have to press a hotkey immediately after opening a Markdown file.  For me personally (this may be a matter of personal preference), the perfect UX would look like this: - When I open a Markdown file, I automatically see the preview mode that you get today when pressing `ctrl+shift+v`. - Then, when I want to make an edit, I can switch to split view very fast, either by pressing an `Edit` button or using a simple hotkey. For Markdown preview (which doesn't have much interaction) it would be possible to use `f2`, which is the ultimate ""change""/""edit""/""rename"" hotkey across Windows, Office (most important key in Excel...) and Visual Studio.  Back to the feature request by @dfinke, who wanted a setting to force Visual Studio code into split editor when opening a Markdown file:   I suggest a setting that controls how Markdown files are opened by default (e.g. `markdown.defaultView`), with the following values: - `source` for the (source) text editor - `preview` for the preview mode (i.e. the `ctrl+shift+v` mode) - `split` for the split editor (i.e. the `ctrl+k v` mode)  From the behavior of the UI it seems to me that the split editor is currently not a real standalone mode, but that `ctrl+k v` is merely a shortcut for manually splitting the editor and switching the second editor view to preview mode. This means that opening a Markdown file directly in split editor may require some rework (e.g. what should happen when opening several Markdown files).  To achieve a ""quick win"" within a limited budget, it would be possible to first implement the `source` and `preview` values of the `markdown.defaultView` setting and add a `split` setting later. That would not break the compatibility of existing configurations.  Of course I'd love to have a hotkey for switching directly from preview to split edtor, but having a `markdown.defaultView` setting alone would already be a huge improvement for my daily work."
8607|I think the best solution is to show both text and preview at the same time in one editor in the same way you can diff a file from git view to see original and modified. This has obvious advantages: - it is up to you if you want to see the text, preview or both at the same time depending on how you arrange the thing (setting would get persisted) - starting to edit is as simple as clicking some edit button to bring the text to the side of the preview without having to open an additional editor - you dont have to manage 2 editors for the same thing
8608|"This is further broken because TS renames `es6` to `es2015` in `tsc init`:  ``` $ ./node_modules/.bin/tsc --version message TS6029: Version 1.7.5 $ ./node_modules/.bin/tsc --init --target es6 --experimentalDecorators --emitDecoratorMetadata message TS6071: Successfully created a tsconfig.json file. $ code . ```  VSCode now shows an error in `tsconfig.json` at `""target"": ""es2015""` and cannot compile stuff (acts like there is no tsconfig.json at all, eg, `cannot compile modules unless the --module flag is provided`)"
8609|I have the same issue on Ubuntu 14.04
8610|@mihaidma symlinked source is not yet supported
8611|I just hit this myself yesterday as well. I'm just guessing here but, I think that setting is for running standalone node apps using the version of Node.js installed on your system, from the command line. Extensions would use the version of node builtin to VS Code, and hence would not receive those arguments.  As a work around, it's easy enough to just check if the parameter is undefined and set the default accordingly. A full list of safe ES6 features that you can use is also listed here: [ECMAScript 2015 (ES6) in Node.js](https://nodejs.org/en/docs/es6/).
8612|@mattacosta I had similar thoughts. I can see in the debugging output how it's running the extension:  ``` '/Users/johnfn/Downloads/Visual Studio Code - Insiders.app/Contents/MacOS/Electron' --debugBrkPluginHost=32101 --harmony-default-parameters --harmony-rest-parameters --extensionDevelopmentPath=/Users/johnfn/code/Vim  ```  Clearly, there's no node in there anywhere.  There is electron, so I tried to pass in the flags in a way that Electron would like: `--js-flags=--harmony-default-parameters`, but that also didn't work.  I know I can just not use the features, but that's lame! :wink:
8613|:+1: I need negated glob files as we store our many services in `node_modules` under the same repo.  We hide `node_modules` because it slows down the editor, and clutters the workspace.  But we have to use directory symlinks so we can edit the specific services in another folder.  If we could exclude these folders from being ignored, we could remove the symlinks and significantly reduce the complexity of our project.  (Another issue is, debugging node in a symlinked folder doesn't work in vscode, this would be solved by this feature also.)
8614|We also need access to the end of line sequence for EditorConfig.
8615|The current answer is to use one of the extensions, e.g., https://marketplace.visualstudio.com/items?itemName=ilich8086.Untabify.  We will see whether we can collaborate or learn from an existing extensions.
8616|Closing as a duplicate of #1228
8617|// @alexandrudima since you are Total Commander user.
8618|Our JSON parser is not a node module (yet), but there are plenty of alternatives on npm, e.g. https://www.npmjs.com/package/strip-json-comments
8619|I would be very surprised if Code creates those 2 files, i rather think TC does.
8620|The `target` enum field now includes `es2015`. We use the schema from http://json.schemastore.org/tsconfig
8621|Can you please provide steps on how to reproduce this? Or at least a case where it randomly happens?
8622|@bpasero, You were right, enabling Salsa fixed the problem. I left VS Code opened trough weekend and it still didn't crashed.
8623|You cannot contribute coloring from an extension currently, but you can contribute diagnostics errors. If you want to show diagnostic errors with squiggles then I suggest to use the Language API. There are different options: - inside the extension directly, this must not be done when the analysis is expensive - spawn a process that computes the errors and the extension translates them into diagnostics (see the go extension, or the php linter) - implement a stateful language service server (see eslint extension)  // @bpasero
8624|Makes sense
8625|Good to hear that! Would be interesting if others could verify this too by trying.
8626|Just confirming that using VS Code 0.10.7-insider, TypeScript 1.9.0-dev.20160208 and Salsa did indeed fix my issue. Thanks.
8627|I have adopted the optional line number on the vscode side
8628|@TheColorRed no there is no run command, but I think it is a valid feature request.  @isidorn what do you think?
8629|@tinganho what version of node and VSCode are you using? Do you have a reproducible case with steps? Thanks.
8630|@weinand I agree it is a valid feature request. Not sure how to best handle this, adding a 'silent' option in the `launch.config`?
8631|Could this be covered by a new `run` action that consumes the information in the existing launch config but doesn't do any debugger attachment logic.
8632|"@weinand @isidorn this happened when I wanted to contribute to the TypeScript project. It happens all the time, just set a break point with a debugger statement(it seems like adding break points on VSCode also don't work all the time). And run the following command:   ``` jake runtests debug=true ```  You might want to just run a specific test with `t=name` also:  ``` jake runtests t=nameoftest debug=true ```  After that, just attach to the node process.  Also, the debugging process is super slow on the TypeScript project. Though, I don't know if this is wrong with nodejs or wrong with VSCode. And clicking on the debug button(next, step into, step out) too fast will just break the debugging experience. It accumulates all the actions and fires them all at once, and you might miss the ""destination point"". There is also a timeout error for the debugger that occurs all the time.  I'm on a Mac with the following settings:  ``` $ node -v v5.0.0  VSCode: Version 0.10.6 (0.10.6) ```"
8633|@janaagaard75 thanks for the confirmation.
8634|@bpasero we need a way to pass node runtime arguments through vscode to the internal node that you fork.
8635|By debugger attachment logic you mean open the debug console and open the debug viewlet? Yes it could be covered by a new action. Would we just call it `run`, or `debug: run`. If we just call it `run` it would not be clear that it actually reads the `launch.json` for the program file and so on..
8636|@egamma sure, but it has to go through the debug adapter (DA) because VS Code doesn't know anything about how to launch a program or that an 'debugger attachment logic' even exists. And the launch/attach config attributes are not part of the debug protocol but are contributed by a debug extension, so VS Code cannot know how to use them in order to 'run' a program.  It is probably a new built-in launch config attribute `noDebug`. This will trigger VS Code not to start a debug session and prevent the 'debugger attachment' logic in the DA. Some of the other attributes still make sense (e.g. args, runtimeArgs, cwd, externalConsole) but it the responsibity of the DA to decide what to do with them.  Another interesting question is whether VS Code tracks programs started this way. If there is no debug session, there will be no 'Terminate' button. This requires some new terminate UI if the program is run in the internal debug console.
8637|@weinand i do not think we can allow to pass in harmony flags because these flags would not be present when running the extension and thus would cause breakage.
8638|@tinganho you are probably running in some large data-structure slowness issues of the node debugger protocol (e.g. there is no way to access arrays or dicts in chunks, you always get the full thing...). Up to node 0.12.x we did some code injection into the debugger to work around these issues and they were quite effective. If possible, just try to use node 0.12.9 and you will notice the difference. For node  4.x and 5.x we haven't figured out how to do the same trick, but we are working on it.
8639|@bpasero good point. I'm closing this.
8640|> Would it be possible for VSCODE to do that easly?  This could be done using a VS Code extension pls see https://code.visualstudio.com/docs/extensions/overview.
8641|Ok thanks, good to know.
8642|@weinand makes sense, but from a user perspective I would not want to have to edit the launch config when I want to switch from running under the debugger and running without the debugger.   My thinking was that the `Run` actions passes the `noDebug` attribute to the DA.
8643|I am marking this as important since this happens reproducible for me when opening a second window with the latest build.
8644|Even switching the folder in an open instance fails  now
8645|@egamma yes, I was assuming that... Sorry for not making this clear.
8646|Actually looking at this with a process monitoring tools shows the following for switching a workspace folder: - starting VSCode. Everything is ok and shared process is up and running - switching to another folder: somehow during this the shared process goes down and never comes up again. As a result VSCode can't operate on the switched workspace.
8647|I was just thinking the other day of writing an extension for this (haven't found an existing one), that supported comments for various languages. Is it only comments you're needing this for or other things too?
8648|Comments are definitely the 80% (99%?) use-case. I guess the only other place I could see it being useful is in a big multi-line string literal. But even that's a stretch.
8649|+1
8650|@csholmq attach screen shot where it does not work in quick open please
8651|Smells a bit like https://github.com/Microsoft/vscode/issues/762 to me
8652|(at least https://github.com/Microsoft/vscode/issues/762#issuecomment-171714102)
8653|![image](https://cloud.githubusercontent.com/assets/1297882/12887005/b9b3a8ea-ce71-11e5-99f1-11b30560cb76.png)  As you can see, I have configured `out/` to be excluded, but the second result of quick open still includes that directory.
8654|PR delivered, thanks @dpodder !
8655|@csholmq I think it does not work because it is not root, try **/out/
8656|@bpasero Confirmed to work. Is this by design? If so, somewhat more intuitive would be to have the same behaviour in the _Find in Files_ as well.
8657|"Wow, cool feedback loop! - Don't know how I missed **Align** and **Document This**. Thanks for the tips! - ""doxy commenting"" would be the same as ""docblockr"". So that can be checked off as well. - highlight-line is already there. But it doesn't highlight when using _Find_, but it does using _Go To Line_. - ""todo-show"" is the plugin I'm lacking. ""native perf"" was more a appreciation of VSCode itself."
8658|I just tried and for me explorer, search and quick open behave all the same when I try to ignore a root folder. If you can provide me with a repro?
8659|Thanks for your answer. I see that we can add a lot of features (debugging, auto completion, color, ...) for a language with extension. But as I'm a newbie with VSCode, I don't know exactly What I have to do. Would it be possible to have support?  Thanks
8660|After a preLaunchTask has finished we now check if there are errors in the workspace, however in our task framework we do not have a connection if a task produced an error. So it might happen that there is an unrelated error in the workspace (e.g some malformed json). Due to this in the message we offer the user to debug anyway. This should also work for watching tasks.  ![screen shot 2016-02-08 at 15 40 49](https://cloud.githubusercontent.com/assets/1926584/12888428/5c485c10-ce7a-11e5-96ac-5e60a6205713.png)
8661|Maybe I should just allow breakpoints to be set on empty lines? This was added before we nicely adjusted breakpoints once a session starts. e.g chrome allows to set on empty lines and then they adjust
8662|Yes, excluding root folders using `root-folder/` work. But not for sub folders.  No public repo for this. But I can set up a demo if needed.
8663|"Oh, OK I see now. **Document This** was released _yesterday_. Same day I tweeted :)  Just coming back to ""atom-alignment"". The plugin **Align** is the same as [Atom Alignment](https://atom.io/packages/alignment) which tried to do smart things where is looks for the same delimiter (e.g. =) in the selected rows of text.   What I was referring to was [atom-alignment](https://atom.io/packages/atom-alignment) (in turn inspired by sublime_alignment) which aligns multiple cursors to the same indent. Allowing for much more powerful usage where e.g. `ctrl+d` can be used to select multiple instances of a letter or text before aligning. Great for multi-column structs for instance.  ![atom-align2](https://cloud.githubusercontent.com/assets/1297882/12889656/3e6fbb42-ce80-11e5-940d-dc2a0fb87de6.gif)  I've created a ticket (https://github.com/steve8708/vscode-align/issues/5) to alter the behaviour. Hopefully it comes through."
8664|@isidorn yes, please allow for setting breakpoints in empty lines. That will make it possible to support debugging [Whitespace](https://en.wikipedia.org/wiki/Whitespace_%28programming_language%29) programs!
8665|@bpasero I looked into this and it is happening due to https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/window.ts#L180  So the show() does not respect the window layout. If I change the show() to focus() all works nicely, but I see your comment so I guess you used it as a workaround for some other bug. If you want to keep this behaviour, I will just flashFrame() instead of focus on win/linux on debug stop event.
8666|Pushed for February release. Quick open special char is `~` and keybinding out of the box is `CtrlCmd+K CtrlCmd+P` but obviously can be reassigned to `Ctrl+Tab`.  ![untitled](https://cloud.githubusercontent.com/assets/900690/12889642/2a41570c-ce80-11e5-94d7-b85912fdc24f.gif)
8667|@csholmq ah ok I thought you said it would exclude in one area but not in the other. so as long as it does not exclude anywhere, we are at least consistent.
8668|Given the changes in #2702, here are some updated results: `237ms` for the trigger, `86ms` for the first letter (`a`), `29ms` for the second (`b`), etc... :+1:   ![screen shot 2016-02-08 at 16 23 10](https://cloud.githubusercontent.com/assets/22350/12889660/44510638-ce80-11e5-9105-9ad3e6520c83.png)
8669|Actually I am closing this as designed because as a user I want to distinguish between a root folder and a sub folder.
8670|@rhires for february we land a quick picker for working files, see demo https://github.com/Microsoft/vscode/issues/441#issuecomment-181423099  feedback welcome
8671|Whitespace users around the world can rejoice now!
8672|I still see this all the time, adding important label
8673|"The running assumption appears to be that ""[tabs] in most cases grows so much that you end up not seeing anything"". I would like to challenge this assumption. I use tabs as a visible index of the files I'm currently interested in, and I actively manage that index as my interest shifts over time. Visibility is important: I refer to the physical tabs constantly to reorient myself. With Working Files, I'm stripped of my ability to view and manipulate that index. For example, there doesn't appear to be a way to remove a file from Working Files via the keyboard. It feels like I'm fighting the editor. Please add Sublime Text-style tabs."
8674|This is awesome! :+1:
8675|@isidorn I remember I had a bug for it, but in another scenario and I could not repro on master. Do you repro on master?
8676|Awesome! Good job, @joaomoreno!
8677|@bpasero I repro on master, on windows with the above explained scenario
8678|Thanks @egamma for confirming and for the advice. I had considered the diagnostic errors, but I think a positive indicator of correctness makes more sense (i.e., syntax highlighting). I think I'll pursue the code lens option for now. I'll take a look at the recommended extensions. (I've learned a lot from the go one already.)
8679|"That seems to be the case. I was initially confused by this (and false positives from ""recently opened"" files) that led me to believe the behaviour to be inconsistent. But by the looks of it, I was mistaken.  But I do think it's a little picky with the expressions: - `*/subdir` **No** - `*/subdir/` **No** - `*/subdir/*` **No** - `**/subdir` **Yes** - `**/subdir/` **Yes** - `**/subdir/*` **Yes**"
8680|Aww. So there's just no way to do this? Or what's the deal?
8681|Hi **@martellaj**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
8682|See #2000 and all linked issues.
8683|Can people seeing this issue with a JavaScript workspace please give our insiders build a try (https://code.visualstudio.com/insiders) and enable Salsa: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#javascript---salsa-preview
8684|Can people seeing this issue with a JavaScript workspace please give our insiders build a try (https://code.visualstudio.com/insiders) and enable Salsa: https://github.com/Microsoft/vscode-docs/blob/master/release-notes/latest.md#javascript---salsa-preview
8685|**@martellaj**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
8686|Should this be closed as a dupe of https://github.com/Microsoft/vscode/issues/211?
8687|The mere existence of [TabSanity](https://visualstudiogallery.msdn.microsoft.com/ac4d4d6b-b017-4a42-8f72-55f0ffe850d7) and the fact that it has been downloaded 1596 times is a testament that I'm not alone in these frustrations.
8688|"@jrieken I tried using the filenamePattern to have the editor recognize the dockerfile.dev and similar files, but it seems like it doesn't work; it's not recognizing the files.  Here's the example I have in my package.json file: `  ""id"": ""dockerfile"",               ""filenamePatterns"": [                   ""dockerfile.*"",                   ""dockerfile*.*""               ]  `"
8689|@bpasero I had enabled salsa and left it running over the weekend. This morning it had crashed.
8690|@johnfn your extension runs in the extension host node process which is shared by all extensions. We cannot allow individual extensions to configure it with arbitrary node options because that would potentially break other extensions that are running in the same extension host.  So what is your use case? Do you really want to develop a VS Code extension that you can only run in development mode but cannot share with others?
8691|fyi @aeschli
8692|@hakobpogh What language is that? Can you please also share reproducible steps?
8693|@Ibrahim-Islam VS Code does not support debugging C# (mono) on Windows.  From: https://code.visualstudio.com/docs/editor/debugging  Q: What are the supported debugging scenarios?  A: Debugging of Node.js based applications is supported on Linux, OS X, and Windows. Debugging of C# applications running on Mono is supported on **Linux and OS X**. ASP.NET 5 applications are compiled using the Roslyn compiler, not the Mono compiler. **ASP.NET 5 debugging will be available through a VS Code extension.**
8694|@bpasero Why would TC create those files? It has no business doing so. It should just run the editor with appropriate parameters. Also note that integration with other editors (Sublime, Notepad++, notepad.exe, etc.) work flawlessly withouth the mentioned problems.  Please be specific with what more info you need.
8695|@weinand I understand. Since doing it on a per-extension basis is impossible, how about enabling the flags for _all_ extensions? That wouldn't break anything - after all, the point of these new ES6 features is that all websites written in ES5/3 will continue to work when the features get turned on.  Or am I missing something here?
8696|I've added the following protocol support: a new `BreakpointEvent` and an attribute `id` for the `Breakpoint` type. A debug adapter that wants to send out `BreakpointEvent` is expected to set the `id` of the `Breakpoint` returned from the `setBreakpoints` or `setFunctionBreakpoints` requests so that subsequent events with the same id can be mapped to the corresponding breakpoints.  @isidorn please implement this in the front end.
8697|@bpasero what do you think?
8698|Hi **@martellaj**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>You've already signed the contribution license agreement. Thanks!</span>         <span>We will now validate the agreement and then real humans will evaluate your PR.</span>  TTYL, MSBOT;
8699|"Installed typescript  ``` $ npm install -g typescript@next C:\Users\mapatel\AppData\Roaming\npm\tsserver -> C:\Users\mapatel\AppData\Roaming\npm\node_modules\typescript\bin\tsserver C:\Users\mapatel\AppData\Roaming\npm\tsc -> C:\Users\mapatel\AppData\Roaming\npm\node_modules\typescript\bin\tsc C:\Users\mapatel\AppData\Roaming\npm ```  I've set settings.json to be   ``` {     ""typescript.tsdk"": ""C:/Users/mapatel/AppData/Roaming/npm/node_modules/typescript/lib"" } ```  and the environment setting  ``` $ setx VSCODE_TSJS 1  SUCCESS: Specified value was saved. ```  I don't still see salsa in the footer of VS code insider."
8700|@nojvek I did basically what you did, and I do see Salsa in the footer, but only when a .js file is open and visible in the editor
