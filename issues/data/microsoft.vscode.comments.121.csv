12001|ah, sorry for the delay 1. no i haven't installed any extension 2. a workspace folder 3. the workspace is https://github.com/spring-projects/spring-framework,    files i open are as described before  2016-03-08 1:01 GMT+08:00 Benjamin Pasero notifications@github.com:  > @AndyYSWoo https://github.com/AndyYSWoo ping, can you answer to the > following questions please: > - any extensions installed? > - are you opening a workspace folder or just individual files > - is it possible to share the workspace with us >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-193345250.
12002|ping @bpasero
12003|@luisrudge Can you paste the code sample so I can investigate?
12004|`gulp vscode-darwin` will build you Code in `../VSCode-darwin`
12005|@isomorphisms @Tyriar  According to electron: Electron needs to write to $XDG_CONFIG_HOME/APP_NAME, this error happens when users don't have permission to create or write to that directory. please make sure you have the permissions.   We should probably add this to our FAQ. @gregvanl fyi
12006|1. RunToCursor is a global editor action, which means you can also access it via command palette <kbd>F1</kbd> or you can assign a custom keybinding via preferences > keyboard shortcuts > search for `editor.debug.action.runToCursor` 2. This is done and will be available in the April vscode release
12007|Should it even be the default?
12008|@analysisi maybe you stopped in your extension in the debugger?
12009|Also, something in the console of the extension host window?
12010|dupe of #3062
12011|Interesting. We only use Python on OS X btw, since there is no easy way to have `realpath` in there.
12012|70ab81b should fix it
12013|@joaomoreno does this ring a bell?
12014|Not sure, the only ones complaining so far are you and me ;)
12015|Yeah but I have a feeling this is one of those things that people just assume they have to live with, until they realise it doesn't need to be so. Might be wrong.
12016|I totally agree this is not a good experience.  Due to this we have removed the `Copy Value` action from the context menu and it should not longer be there in March - you have to use <kbd>ctrl + C</kbd>. There are still issues captured in https://github.com/Microsoft/vscode/issues/2163  <kbd>Ctrl + A</kbd> will not work, since the console is not an editor but a tree from the implementation perspective. And due to the issue above.  Closing as the copy / paste limitation of the debug console are already captured in other issues.
12017|Duplicate of #3569
12018|"@zersiax Indeed, the autocomplete list ""steals"" Enter, arrow up and arrow down when it pops up. I have pushed a change this morning to make arrow up and down read through the proposals as they are focused and just now another change to alert when a suggestion is accepted (Enter).  We will do some more testing on our side, and then I would love to give you a VSCode version containing these changes and get more feedback from you in this area.  Thank you!"
12019|Since there are so many issues discussed here and many issues have been addressed, I no longer have a clear view what problem is still open. Please open new items for everything that is still not working.
12020|@aeschli I'm working on a PR right now with minimal changes
12021|Basically my idea is replicated by what webstorm does. But I understand your concern.  As I think about it more, maybe webstorm implementation is to separate cursor and folding target. Can validate it tomorrow.  The idea is during consecutive unfold, it will automatically target the next available folded code. And the cursor will then point to the newly unfolded location.  What do you think? On Tue, Mar 8, 2016 at 2:05 AM Martin Aeschlimann notifications@github.com wrote:  > IMO #3484 https://github.com/Microsoft/vscode/issues/3484 makes sense. > There, from how I understand it, we only move the cursor on unfold if the > cursor has not moved since folding. > But always move the cursor on unfold to the next folding region doesn't > make sense to me. The next folding region could be far down in the unfolded > region. >  > Let me know if I misunderstood your request. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3814#issuecomment-193700572.
12022|Not sure if this is actually something we should by default, hence setting bug label.
12023|@AndyYSWoo thanks, I am not able to reproduce a crash here nor do I see an increase in CPU/memory usage. Could you watch CPU/memory in activity monitor when you work on the workspace to see if a certain action causes a big spike suddenly? I suspect the crashes to be caused by out of memory.
12024|@Tyriar I tried the chromium workspace over night on Linux, Windows and Mac and could not reproduce a crash. Could you try it again please?
12025|:+1:  Yes, fixed it. Thanks. I just saw [src/vs/workbench/electron-main/env.ts](https://github.com/Microsoft/vscode/blob/7e89b382ef30a81fef73c93065a3d9d71d123b54/src/vs/workbench/electron-main/env.ts) file.
12026|"Oh I used ![skarmavbild 2016-03-08 kl 11 38 54](https://cloud.githubusercontent.com/assets/624182/13599302/72781fb6-e522-11e5-9266-2044ea04f682.png)  referencing my own files ""as packages"" like  ![skarmavbild 2016-03-08 kl 11 39 07](https://cloud.githubusercontent.com/assets/624182/13599316/80447cfc-e522-11e5-8642-ec6ccea9ad0f.png)  instead of have to find out the exact relative path to where I am. This is indeed a hack and was the thing that got broken in the latest update @egamma. Not a issue, but would be nice if it is a small fix to do =)"
12027|Since i cannot reproduce the high CPU use for a large folder this must be something else.
12028|i think most crashes happen when i minimize the window and work on the keynote or read some website for a not short while. Recently i haven't work on this project, but i'll try to reproduce the crash and save my working environment for you.  2016-03-08 18:37 GMT+08:00 Benjamin Pasero notifications@github.com:  > @AndyYSWoo https://github.com/AndyYSWoo thanks, I am not able to > reproduce a crash here nor do I see an increase in CPU/memory usage. Could > you watch CPU/memory in activity monitor when you work on the workspace to > see if a certain action causes a big spike suddenly? I suspect the crashes > to be caused by out of memory. >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-193714905.
12029|@aeschli when I'm trying to commit my changes, the precommit hooks is showing this error:  ``` src\vs\workbench\browser\media\vs-dark-theme.css: Missing or bad copyright statement src\vs\workbench\browser\media\vs-theme.css: Missing or bad copyright statement  Hygiene failed with 2 errors. Check 'build/gulpfile.hygiene.js'. ```  I've not touched the copyright statements at all. Looking at the hygiene file, it seems that it'll throw that error when a copyright is **present**. How do I commit the file then? Do I have to remove the copyright?
12030|"@ransanjeev @fhelje @bmoeskau is one of you able to do a little experiment? I am speculating that maybe our library for file watching is failing. The steps would be: - setup to run vscode out of our sources as described at https://github.com/Microsoft/vscode/wiki/How-to-Contribute - copy the contents of `Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/chokidar` into the sources at `./node_modules/chokidar` (replace the entire folder) - open `./node_modules/chokidar/lib/fsevents-handler.js` from the sources and insert `console.log('Do we have fsevents?: ', !!fsevents)` in line 9 - open `./src/vs/workbench/services/files/node/watcher/unix/watcherService.ts` from the sources and set `VERBOSE_LOGGING` to `true` in line 43 - run code out of sources with `./scripts/code.sh` - from the window that opens show the developer console (`Help | Toggle Developer Tools`) - check if you see `[Service Library: Watcher] Do we have fsevents?:  true`  For me (since fsevents works ok), I get this:  ![image](https://cloud.githubusercontent.com/assets/900690/13642291/33b5555a-e61c-11e5-9b91-3b4700ad78e6.png)  If something goes wrong, I would expect fsevents to print as undefined. In that case, can you put another console.log inside the try/catch block of line 7 to see what the error is loading that native module?  Thanks!"
12031|"@q42jaap @ragebiswas @Kane-Sendgrid @kevinkucharczyk @planetexpress69  is one of you able to do a little experiment? I am speculating that maybe our library for file watching is failing. The steps would be: - setup to run vscode out of our sources as described at https://github.com/Microsoft/vscode/wiki/How-to-Contribute - copy the contents of `Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/chokidar` into the sources at `./node_modules/chokidar` (replace the entire folder) - open `./node_modules/chokidar/lib/fsevents-handler.js` from the sources and insert `console.log('Do we have fsevents?: ', !!fsevents)` in line 9 - open `./src/vs/workbench/services/files/node/watcher/unix/watcherService.ts` from the sources and set `VERBOSE_LOGGING` to `true` in line 43 - run code out of sources with `./scripts/code.sh` - from the window that opens show the developer console (`Help | Toggle Developer Tools`) - check if you see `[Service Library: Watcher] Do we have fsevents?:  true`  For me (since fsevents works ok), I get this:  ![image](https://cloud.githubusercontent.com/assets/900690/13642291/33b5555a-e61c-11e5-9b91-3b4700ad78e6.png)  If something goes wrong, I would expect fsevents to print as undefined. In that case, can you put another console.log inside the try/catch block of line 7 to see what the error is loading that native module?  Thanks!"
12032|"@awgeorge @ccimage @chiangf  is one of you able to do a little experiment? I am speculating that maybe our library for file watching is failing. The steps would be: - setup to run vscode out of our sources as described at https://github.com/Microsoft/vscode/wiki/How-to-Contribute - copy the contents of `Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/chokidar` into the sources at `./node_modules/chokidar` (replace the entire folder) - open `./node_modules/chokidar/lib/fsevents-handler.js` from the sources and insert `console.log('Do we have fsevents?: ', !!fsevents)` in line 9 - open `./src/vs/workbench/services/files/node/watcher/unix/watcherService.ts` from the sources and set `VERBOSE_LOGGING` to `true` in line 43 - make sure to recompile to pick up this change (e.g. run `gulp watch` and wait for it to finish) - run code out of sources with `./scripts/code.sh` - from the window that opens show the developer console (`Help | Toggle Developer Tools`) - check if you see `[Service Library: Watcher] Do we have fsevents?:  true`  For me (since fsevents works ok), I get this:  ![image](https://cloud.githubusercontent.com/assets/900690/13642291/33b5555a-e61c-11e5-9b91-3b4700ad78e6.png)  If something goes wrong, I would expect fsevents to print as undefined. In that case, can you put another console.log inside the try/catch block of line 7 to see what the error is loading that native module?  Thanks!"
12033|@AndyYSWoo thanks. maybe if possible you could also share your global and/or workspace settings.
12034|I also assume you are not running a task in the background with Code right?
12035|Hi **@kumarharsh**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
12036|@egamma   ![image](https://cloud.githubusercontent.com/assets/900690/13599765/26e24326-e525-11e5-99e6-b22b50e80fc1.png)  ![image](https://cloud.githubusercontent.com/assets/900690/13599770/2e90471c-e525-11e5-95c8-e0784a588f49.png)
12037|Ah, so just improve the behavior of the unfold action. If the cursor is not on a folded section, look for the next one and unfold that one. I like that idea.
12038|I can't reproduce. I added a line vs-dark-theme.css, created a commit. Works. Make a change to the copyright statement, create a commit, Fails.  Make sure you have also have no unstaged changes that modify the copyright.
12039|Please note that this fix will appear in the March release and is not in VS Code 0.10.10
12040|> In general code and plugins should support everything installed locally.  @SteveALee I fully agree on globally installed modules. Actually, all the linter extensions (vscode-eslint, vscode-jshint, vscode-tslint, vscode-jscs) are written so that they work with locally installed linter module.   I'll update the release notes.   Have you tried a local install of eslint and it didn't work?
12041|This is actually bigger then expected, postponing to after GA. Updated the summary too.
12042|@isidorn I believe one of the two files was not in working files? if a file is closing we do not persist the mode and you have to reset it. I cannot reproduce when both files are in working files.
12043|moving to TypeScript
12044|This issue was moved to Microsoft/TypeScript#7428
12045|OK, I found the bug. Are you testing on a non-Windows system?  You're creating the copyright string like this: https://github.com/Microsoft/vscode/blob/master/build/gulpfile.hygiene.js#L93  The parts are joined with a '\n', not a '\r\n' for windows. So, when the files are being read, the strings are not equal, even though they exist.
12046|This is a valide feature request, moving to TypeScript.
12047|This issue was moved to Microsoft/TypeScript#7429
12048|"@rebornix running the tests involves two processes: the tests in `adapter.test.ts` and the debug adapter `ruby.ts`. If you launch the test with the ""Run Tests"" launch config you can debug the tests, but not the debug adapter (because that's a different process not started in debug mode).   If you want to debug the debug adapter (while running the test) do the following:  - launch the debug adapter in server mode with the ""ruby debug server"" launch config. - set a breakpoint in `ruby.ts` - in `adapter.test.ts:26` add the port number 4711 as a second argument to `dc.start(done)` so that the tests connect to the ruby debug server (instead of launching the debug adapter). - run your tests from the command line:  ``` node node_modules/mocha/bin/_mocha -u tdd --timeout 999999 --colors ./out/tests/ ```  Now you should hit the breakpoint.  If you only want to run a single test, just add `.only` to the test like this:  ``` test.only('should run program to the end'... ```"
12049|After discussing with @weinand I am hiding the console on any end of a debug session. For instance, also if the user terminates the debugee
12050|Hi **@kumarharsh**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
12051|Hi **@kumarharsh**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.     </span>  TTYL, MSBOT;
12052|Hi **@kumarharsh**, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!     <span>         This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.     </span>  TTYL, MSBOT;
12053|bad PR, closing
12054|**@kumarharsh**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
12055|**@kumarharsh**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
12056|**@kumarharsh**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR. <br />Thanks, MSBOT;
12057|I've added a PR for fixing that hygiene check in #3834
12058|@7brutus7 thanks for sharing the code. I've verified that the problem you are seeing is a duplicate of #3667 and that the March release will fix this.
12059|Hi @slowmove   Do you get an error if you use a function not defined in your module?
12060|@jorgegonzalezperez No I do not.
12061|I'm also having this issue since the last update. Looks like I'm getting no syntax highlighting whatsoever.
12062|Hi,  Awaiting that test version. Will wait for it before continuing conducting tests :)
12063|@fariyAhill what version of node and VS Code are you using?  I just tried VS Code 0.10.10 and node v4.3.0 and your snippet just works fine:  ![2016-03-08 13-16-43](https://cloud.githubusercontent.com/assets/1898161/13601417/3f409750-e530-11e5-999e-02c4b7ff7ec1.png)
12064|vscode is not highlighting object properties, objects (when their sub-properties are accessed), etc among other things, JSX tags, etc. JS looks like plaintext with some colour here and there.  ![screenshot 78](https://cloud.githubusercontent.com/assets/760112/13601650/a277ccae-e557-11e5-8184-ba7191121da1.png)  Code Sample:  ``` js export default class BaseRule extends React.Component {   static propTypes = {     gStyles: React.PropTypes.object.isRequired,     value: React.PropTypes.shape({       operator: React.PropTypes.string,       value: React.PropTypes.oneOfType([         React.PropTypes.string,         React.PropTypes.number,       ]),       timePeriod: TimePeriodPropType,     }).isRequired,     label: React.PropTypes.any, // can be hidden by passing null/false     onChange: React.PropTypes.func.isRequired,     ruleType: React.PropTypes.oneOf(_values(RuleType)),     onRuleTypeChange: React.PropTypes.func.isRequired,   };    renderTimePeriodInput() {     const styles = this.props.gStyles;     return (       <TimePeriodInput         value={this.props.value.timePeriod}         onChange={this._handleChange('timePeriod')}         prepend={<FormattedMessage {...intlStrings.timePeriodInputPreposition}/>}         style={styles.timePeriodWrapper}       />     );   } } ```
12065|I tried, but it didn't work. The reason why VSCode didn't work, may be i just used xshell.That's just a terminal emulator. I installed ubuntu on my PC,and download VSCode,finally it worked. Thanks a lot !@Tyriar @stylemistake
12066|+1
12067|@jrieken shouldn't eslint and babel-eslint be doing that?
12068|I'm trying to configure eslint but I don't get the same behaviour
12069|@weinand thanks for making it clear! It works as charm.
12070|Confirmed, this is a WCAG requirement. I'm not sure how Chromium renders the full VS Code interface, but in HTML this would be a matter of adding a proper lang attribute to the HTML element (usually a language is preferred rather than a language + dialect) for the entire document and lang attributes on the tags that deviate from the main language of the document.
12071|"I have a similar problem with Javascript after updating to 0.10.10. After update it completely stopped working, forcing Intellisense to show up with ctrl+space shows ""Loading..."" tooltip which hangs forever. Once I got a tooltip that ""[Javascript service?] crashed 5 times in 5 minutes"" (are those crash reports logged somewhere so I could share them?)  Some details that maybe could be useful for establishing pattern:  **Update 2**: OK, I am pretty sure that I correlated the issue with VS Code trying to parse and cache existing JS folders. My folder structure looks like this:  ``` / - jsconfig.json - [other config files etc.] / client   / app - folder with our code   / jspm_packages - jspm packages / node_modules - dev. npm packages (gulp etc.) / jspm_packages - old folder, which is not used right now ```  Opening this folder does crash Intellisense for JS files. It can be fixed with one of few ways: - remove `jsconfig.json` - VS Code does give some intellisense then, but it does not scan jspm/npm folders.  - remove both `node_modules` and old `jspm_packages` - VS Code will start helper child process, in my case it will load about 400MB of cached data and Intellisense will work as expected. - exclude explicitly `node_modules` in jsconfig.json - This will prevent VS Code from scanning `node_modules`, and work similarly to previous point  To see what happens when Intellisense is broken we can [observe child processes it spawns](http://puu.sh/nzcrY/33fdf1ec56.png). One of child processes will try to cache files from folders I mentioned above, crash silently, new one will be spawned and so on. After few crashes VS Code will [show message](http://puu.sh/nzcxU/fe354e6085.png) I mentioned before.  One thing I can't figure out to create a repro is why for some projects VS Code will cache `node_modules` and for some won't (without even excluding them from `jsconfig.json`)  **Update 1**: Changing `jsconfig.json` (by removing `exclude` or by changing `module` to different values doesn't help, same for setting it empty with `{  }`, but removing `jsonconfig.json` file altogether does help.  Old post: The problem is not machine wide, for simpler projects I have it does work well (I can have 2 instances of VS Code running side by side, one is having Intellisense, one is stuck. I do have jsconfig.json, for me it looks like that:  ``` {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""target"": ""ES6""     },     ""exclude"": [         ""target""     ] } ```  Making it identical to what @egamma suggested did not solve the problem.  I tried to open only small part of the project and it still hangs (by opening a folder -> pointing it to some subdirectory with 2-3 *.js files; maybe VS Code is smart enough to look up in directory tree to ""base directory""?)  The project I have problem with is of rather small (around 50 js files, many of them very short) we are using AngularJS 1.5 with jspm (systemjs) and pure ES6, no TS (no tsd/typings folders are present). Our setup is maybe somewhat unusual as we are using ES6 modules to do heavy lifting when defining Angular components, something like this:  ``` import template from './match.html!text'; import controller from './match.controller'; import link from './match.link.js';  let matchComponent = function(){     return {         template,         controller,         [...],                 link : link     }; }; ```  I will try to duplicate my project layout and see if I can get a minimal repro."
12072|I think all my settings are default.no i only use it to read the source code. just now it crashes again. here's the [screenshot](http://yongshang.me/ss.jpg) 2016-03-08 18:55 GMT+08:00 Benjamin Pasero notifications@github.com:  > I also assume you are not running a task in the background with Code right? >  > — > Reply to this email directly or view it on GitHub > https://github.com/Microsoft/vscode/issues/3614#issuecomment-193725793.
12073|AFAIK, VS Marketplace is really slow in Chinese network, it might take about 5 minutes to load the extension list. If VS Code lost focus during the extension loading, command window would disappear immediately.
12074|"I also am having problems with the intellisense now, getting that ~10s lag. It seems to happen intermittently, but it consistently happens when typing ""try"" or ""trycatch"" to get the snippet. The lag ranges from ~3-10s. I tried this in a new file in a new folder, and the lag doesn't occur. Only in my actual project."
12075|Yes, I have to wait minutes and can not do anything. Will you change the network of VS Marketplace or fix issue about lost focus?
12076|@joaomoreno - Wouldn't it be better to go with option 1, per my earlier comment?   https://github.com/Microsoft/vscode/commit/70ab81b95eebca26dd5465b3d0b8e094140b5a4b will still break on systems where the system Python is Python 3, like Fedora.
12077|@JohnSpencerTerry this issue seems to affect only Visual Studio light and dark themes. For the moment i'm using Light+ (default light) and it works correctly.
12078|It's not only in template literals:  ![image](https://cloud.githubusercontent.com/assets/94334/13603693/a7e0f34c-e547-11e5-82cf-127334c6527e.png)
12079|@minggo the address in use '4711' indicates that **your** debug adapter is not killed. This can happen if your adapter is in a weird state and for some reason VS Code is not able to kill it successfully. You do not have to restart your computer. On OS X just run the 'Activity Monitor' and search for 'node'. If you are not  in a debugging session, there should be no 'node' processes running. If there are any, you can kill them. (alternatively you can use `killall node` from the command line).
12080|@flynnwt Idea is to set the base to the workspace URI
12081|I have the same issue. Var is not highlighted in JS but it is highlighted in TS.
12082|Those extensions are stored in Visual Studio Online which is unstable in China, I'm not sure whether it can be improved. There can be two workarounds I come up with for now: 1. VS Code adds support for alternative extension registry, then we can mirror all the packages like what Taobao does for `npm` and `gem`. 2. VS Code allows users to pin the Command Palette to avoid it disappear when loading extensions.  Personally I prefer the first option but let's wait for VS Code core team's input.
12083|I have the same issue
12084|@weinand I'm sorry for having opened an issue for an already known and fixed bug! Thanks!
12085|https://github.com/Microsoft/TypeScript-TmLanguage/issues/112
12086|Makes it pretty harder to read, can we get this patched asap plz? ![image](https://cloud.githubusercontent.com/assets/1542376/13604102/2f70d2c0-e50f-11e5-83d9-5309b2be7947.png)
12087|Unfortunately at the time the crash shows in the UI, the process that consumes much memory (the window with your workspace) is already killed and would not show up in the activity monitor.   When you use Code normally on that workspace can you check if the memory goes up steadily? The critical memory size is 800-1000 MB I would say.
12088|As I said 2 comments above, Python is only used in OS X.
12089|@sitefinitysteve try Light+ (default light) theme (or Dark+ if you use dark theme)... it's pretty similar to VS default, having some not annoying colors in addition.
12090|The [Visual Studio Code and Unity](https://code.visualstudio.com/Docs/runtimes/unity) post details methods of using VSCode as a functional IDE for Unity 3D.  There is also an extension available in the marketplace that can help with getting the debugger working. https://marketplace.visualstudio.com/search?term=unity3d&target=VSCode&sortBy=Relevance
12091|"@zersiax great catch! The ARIA label I am now putting with a keybinding is: ""action label, shortcut theShortcut, commands"". Maybe you have feedback if that is OK to do or not."
12092|"(basically I am wondering if the shortcut should just follow the command label or if it should be prefixed with the word ""shortcut"")."
12093|What version do you have? The latest version already addresses this with a server side cache.  How slow can you get the following URL? `https://vscode.blob.core.windows.net/gallery/index`
12094|Either will work really. Adding shortcut does add some translation overhead so make sure that is a localizable string if you go that route, but I don't think it will be necessary since most shortcuts will contain at least one of ctrl, alt, shift or windows which will already denote it as a shortcut key. Am I overgeneralizing?
12095|duplicate of #3848
12096|Oh sorry, I misunderstood what you were saying. This should work. :+1:
12097|I used 0.10.9 I just upgrade to 0.10.10 and the issue solved.
12098|@SetTrend I'm not sure whether this is a node bug. It might be difficult for the node runtime to decide whether there are any events expected and the runtime needs to continue running or not. Yes, please file an issue with node. I'm interested in their response.
12099|ping @jrieken
12100|Yeah, not doing this any time soon.
